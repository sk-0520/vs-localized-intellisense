<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">Fornisce dati per l'evento <see cref="E:System.Windows.Forms.BindingSource.AddingNew" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using no parameters.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.AddingNewEventArgs" /> senza utilizzare parametri.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using the specified object as the new item.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.AddingNewEventArgs" /> utilizzando l'oggetto specificato come nuovo elemento.</summary>
      <param name="newObject" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the new item value.">Oggetto <see cref="T:System.Object" /> da utilizzare come valore del nuovo elemento.</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary vsli:raw="Gets or sets the object to be added to the binding list.">Ottiene o imposta l'oggetto da aggiungere all'elenco di associazioni.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to be added as a new item to the associated collection.">Oggetto <see cref="T:System.Object" /> da aggiungere come nuovo elemento all'insieme associato.</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">Rappresenta il metodo che gestirà l'evento <see cref="E:System.Windows.Forms.BindingSource.AddingNew" />.</summary>
      <param name="sender" vsli:raw="The source of the event, typically a data container or data-bound collection.">Origine dell'evento, in genere un contenitore di dati o un insieme associato ai dati.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">Oggetto <see cref="T:System.ComponentModel.AddingNewEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary vsli:raw="Specifies the value to pass to a property to cause the property to get its value from another source. This is known as ambience. This class cannot be inherited.">Specifica il valore per passare a una proprietà che determini il proprio valore da un'altra origine. Questo concetto è noto come ambiente. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Boolean value for its value.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dato un valore Boolean come relativo valore.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Il valore di questo attributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an 8-bit unsigned integer for its value.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dato un intero senza segno a 8 bit come relativo valore.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Il valore di questo attributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Unicode character for its value.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dato un carattere Unicode come relativo valore.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Il valore di questo attributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a double-precision floating-point number for its value.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dato un numero in virgola mobile e precisione doppia come relativo valore.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Il valore di questo attributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 16-bit signed integer for its value.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dato un intero con segno a 16 bit come relativo valore.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Il valore di questo attributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 32-bit signed integer for its value.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dato un intero con segno a 32 bit come relativo valore.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Il valore di questo attributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 64-bit signed integer for its value.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dato un intero con segno a 64 bit come relativo valore.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Il valore di questo attributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an object for its value.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dato un oggetto come relativo valore.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Il valore di questo attributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a single-precision floating point number for its value.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dato un numero in virgola mobile e precisione singola come relativo valore.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Il valore di questo attributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a string for its value.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, data una stringa come relativo valore.</summary>
      <param name="value" vsli:raw="The value of this attribute.">Il valore di questo attributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given the value and its type.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dato il valore e il relativo tipo.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Oggetto <see cref="T:System.Type" /> del parametro <paramref name="value" />.</param>
      <param name="value" vsli:raw="The value for this attribute.">Valore di questo attributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Determina se l'oggetto <see cref="T:System.ComponentModel.AmbientValueAttribute" /> specificato è uguale all'oggetto <see cref="T:System.ComponentModel.AmbientValueAttribute" /> corrente.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.AmbientValueAttribute" /> da confrontare con l'oggetto <see cref="T:System.ComponentModel.AmbientValueAttribute" /> corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <see cref="T:System.ComponentModel.AmbientValueAttribute" /> specificato è uguale all'oggetto <see cref="T:System.ComponentModel.AmbientValueAttribute" /> corrente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Codice hash per l'oggetto <see cref="T:System.ComponentModel.AmbientValueAttribute" /> corrente.</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary vsli:raw="Gets the object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">Ottiene l'oggetto che corrisponde al valore di <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</summary>
      <returns vsli:raw="The object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">L'oggetto che corrisponde al valore di <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Array&quot; /&gt; objects to and from various other representations.">Fornisce un convertitore di tipi per convertire oggetti <see cref="T:System.Array" /> in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ArrayConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ArrayConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Converte l'oggetto valore specificato nel tipo di destinazione specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Le impostazioni cultura in cui <paramref name="value" /> verrà convertito.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Tipo <see cref="T:System.Type" /> in cui convertire il valore.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter.">Ottiene un insieme di proprietà per il tipo di matrice specificato dal parametro del valore.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">Oggetto <see cref="T:System.Object" /> che specifica il tipo matrice per cui ottenere le proprietà.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> che verrà utilizzata come filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for an array, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà esposte per una matrice oppure <see langword="null" /> se non vi sono proprietà.</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties.">Ottiene un valore che indica se l'oggetto supporta le proprietà.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> perché è necessario chiamare il metodo <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> per individuare le proprietà dell'oggetto. Questo metodo non restituisce mai <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary vsli:raw="Represents a collection of attributes.">Rappresenta un insieme di attributi.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection.">Matrice di tipo <see cref="T:System.Attribute" /> che fornisce gli attributi per questo insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributes" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary vsli:raw="Gets the attribute collection.">Ottiene l'insieme di attributi.</summary>
      <returns vsli:raw="The attribute collection.">Insieme di attributi.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary vsli:raw="Determines whether this collection of attributes has the specified attribute.">Consente di determinare se questo insieme di attributi dispone dell'attributo specificato.</summary>
      <param name="attribute" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">Oggetto <see cref="T:System.Attribute" /> da individuare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme contiene l'attributo o se è l'attributo predefinito per il tipo di attributo. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary vsli:raw="Determines whether this attribute collection contains all the specified attributes in the attribute array.">Consente di determinare se questo insieme di attributi contiene tutti gli attributi specificati nella matrice di attributi.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">Matrice di tipo <see cref="T:System.Attribute" /> da individuare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains all the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme contiene tutti gli attributi. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the collection to an array, starting at the specified index.">Consente di copiare l'insieme in una matrice partendo dall'indice specificato.</summary>
      <param name="array" vsli:raw="The &lt;see cref=&quot;T:System.Array&quot; /&gt; to copy the collection to.">Oggetto <see cref="T:System.Array" /> in cui copiare l'insieme.</param>
      <param name="index" vsli:raw="The index to start from.">Indice da cui iniziare.</param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary vsli:raw="Gets the number of attributes.">Ottiene il numero di attributi.</summary>
      <returns vsli:raw="The number of attributes.">Numero di attributi.</returns>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.">Specifica un insieme vuoto da utilizzare invece di crearne uno nuovo. Questo campo è di sola lettura.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from an existing &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">Crea un nuovo insieme <see cref="T:System.ComponentModel.AttributeCollection" /> da un insieme <see cref="T:System.ComponentModel.AttributeCollection" /> esistente.</summary>
      <param name="existing" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from which to create the copy.">Insieme <see cref="T:System.ComponentModel.AttributeCollection" /> da cui creare la copia.</param>
      <param name="newAttributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection. Can be &lt;see langword=&quot;null&quot; /&gt;.">Matrice di tipo <see cref="T:System.Attribute" /> che fornisce gli attributi per questo insieme. Può essere <see langword="null" />.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that is a copy of &lt;paramref name=&quot;existing&quot; /&gt;.">Nuovo insieme <see cref="T:System.ComponentModel.AttributeCollection" /> che è una copia di <paramref name="existing" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;existing&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="existing" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Restituisce l'oggetto <see cref="T:System.Attribute" /> predefinito di un dato oggetto <see cref="T:System.Type" />.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the attribute to retrieve.">Oggetto <see cref="T:System.Type" /> dell'attributo da recuperare.</param>
      <returns vsli:raw="The default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;paramref name=&quot;attributeType&quot; /&gt;.">L'oggetto <see cref="T:System.Attribute" /> predefinito di un dato oggetto <paramref name="attributeType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this collection.">Ottiene un enumeratore per questo insieme.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Enumeratore di tipo <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the attribute with the specified index number.">Ottiene l'attributo con il numero di indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">Indice in base zero di <see cref="T:System.ComponentModel.AttributeCollection" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified index number.">Oggetto <see cref="T:System.Attribute" /> con il numero di indice specificato.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary vsli:raw="Gets the attribute with the specified type.">Ottiene l'attributo con il tipo specificato.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to get from the collection.">Oggetto <see cref="T:System.Type" /> di <see cref="T:System.Attribute" /> da ottenere dall'insieme.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified type or, if the attribute does not exist, the default value for the attribute type.">Oggetto <see cref="T:System.Attribute" /> con il tipo specificato o, se l'attributo non esiste, il valore predefinito per il tipo di attributo.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary vsli:raw="Determines whether a specified attribute is the same as an attribute in the collection.">Consente di determinare se un attributo specificato è uguale a un attributo nell'insieme.</summary>
      <param name="attribute" vsli:raw="An instance of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to compare with the attributes in this collection.">Istanza di <see cref="T:System.Attribute" /> da confrontare con gli attributi in questo insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'attributo è contenuto nell'insieme e presenta lo stesso valore dell'attributo nell'insieme. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary vsli:raw="Determines whether the attributes in the specified array are the same as the attributes in the collection.">Consente di determinare se gli attributi nella matrice specificata sono uguali agli attributi dell'insieme.</summary>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.MemberAttributes&quot; /&gt; to compare with the attributes in this collection.">Matrice di <see cref="T:System.CodeDom.MemberAttributes" /> da confrontare con gli attributi in questo insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se tutti gli attributi della matrice sono contenuti nell'insieme e presentano gli stessi valori degli attributi nell'insieme. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Ottiene il numero di elementi contenuti nella raccolta.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">Numero di elementi contenuti nella raccolta.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread-safe).">Ottiene un valore che indica se l'accesso alla raccolta è sincronizzato (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'accesso alla raccolta è sincronizzato (thread-safe); in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Ottiene un oggetto che può essere usato per sincronizzare l'accesso alla raccolta.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Oggetto che può essere usato per sincronizzare l'accesso alla raccolta.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Viene restituito un <see cref="T:System.Collections.IEnumerator" /> per l'oggetto <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> per l'oggetto <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary vsli:raw="Enables attribute redirection. This class cannot be inherited.">Consente il reindirizzamento degli attributi. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> con il nome del tipo indicato.</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">Nome del tipo da specificare.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name and property name.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> con il nome del tipo e della proprietà specificati.</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">Nome del tipo da specificare.</param>
      <param name="propertyName" vsli:raw="The name of the property for which attributes will be retrieved.">Nome della proprietà per cui recuperare gli attributi.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> con il tipo indicato.</summary>
      <param name="type" vsli:raw="The type to specify.">Tipo da specificare.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary vsli:raw="Gets the name of the property for which attributes will be retrieved.">Ottiene il nome della proprietà per cui recuperare gli attributi.</summary>
      <returns vsli:raw="The name of the property for which attributes will be retrieved.">Nome della proprietà per cui recuperare gli attributi.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary vsli:raw="Gets the assembly qualified type name passed into the constructor.">Ottiene il nome di tipo dell'assembly passato al costruttore.</summary>
      <returns vsli:raw="The assembly qualified name of the type specified in the constructor.">Il nome completo dell'assembly del tipo specificato nel costruttore.</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary vsli:raw="Provides a base type converter for nonfloating-point numerical types.">Fornisce un convertitore di tipi di base per i tipi numerici non a virgola mobile.</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Determina se questo convertitore può convertire un oggetto del tipo di origine specificato nel tipo nativo del convertitore.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type from which you want to convert.">
        <see cref="T:System.Type" /> che rappresenta il tipo dal quale si desidera effettuare la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questo convertitore può eseguire l'operazione; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">Restituisce un valore che indica se questo convertitore può convertire un oggetto nel tipo di destinazione specificato, utilizzando il contesto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="t">
        <see cref="T:System.Type" /> che rappresenta il tipo nel quale si desidera effettuare la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questo convertitore può eseguire l'operazione; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">Converte l'oggetto specificato nel tipo nativo del convertitore.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che specifica le impostazioni cultura per la rappresentazione del numero.</param>
      <param name="value" vsli:raw="The object to convert.">Oggetto da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.Exception" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> non è un valore valido per il tipo di destinazione.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">Converte l'oggetto specificato in un altro tipo.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che specifica le impostazioni cultura per la rappresentazione del numero.</param>
      <param name="value" vsli:raw="The object to convert.">Oggetto da convertire.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Tipo in cui convertire l'oggetto.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary vsli:raw="Specifies whether a member is typically used for binding. This class cannot be inherited.">Specifica se un membro viene generalmente utilizzato per l'associazione. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with a Boolean value.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.BindableAttribute" /> con un valore booleano.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per utilizzare la proprietà per l'associazione; in caso contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per utilizzare la proprietà per l'associazione; in caso contrario, <see langword="false" />.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">Uno dei valori di <see cref="T:System.ComponentModel.BindingDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with one of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.BindableAttribute" /> con uno dei valori <see cref="T:System.ComponentModel.BindableSupport" />.</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">Uno dei valori di <see cref="T:System.ComponentModel.BindableSupport" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">Uno dei valori di <see cref="T:System.ComponentModel.BindableSupport" />.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">Uno dei valori di <see cref="T:System.ComponentModel.BindingDirection" />.</param>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating that a property is typically used for binding.">Ottiene un valore che indica che una proprietà viene generalmente utilizzata per l'associazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is typically used for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la proprietà viene generalmente utilizzata per l'associazione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.BindableAttribute.No&quot; /&gt;. This field is read-only.">Consente di specificare il valore predefinito per l'attributo <see cref="T:System.ComponentModel.BindableAttribute" />, che è <see cref="F:System.ComponentModel.BindableAttribute.No" />. Questo campo è di sola lettura.</summary>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary vsli:raw="Gets a value indicating the direction or directions of this property's data binding.">Ottiene un valore che indica la o le direzioni dell'associazione dati di questa proprietà.</summary>
      <returns vsli:raw="The direction of this property's data binding.">Direzione del data binding di questa proprietà.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; objects are equal.">Determina se due oggetti <see cref="T:System.ComponentModel.BindableAttribute" /> sono uguali.</summary>
      <param name="obj" vsli:raw="The object to compare.">Oggetto da confrontare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if it is not equal.">
        <see langword="true" /> se l'oggetto <see cref="T:System.ComponentModel.BindableAttribute" /> specificato è uguale all'oggetto <see cref="T:System.ComponentModel.BindableAttribute" /> corrente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary vsli:raw="Serves as a hash function for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">Viene utilizzato come funzione hash per la classe <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;.">Codice hash per l'oggetto <see cref="T:System.ComponentModel.BindableAttribute" /> corrente.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">Determina se questo attributo è predefinito.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'attributo è il valore predefinito per questa classe di attributi; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not typically used for binding. This field is read-only.">Consente di specificare che una proprietà non viene generalmente utilizzata per l'associazione. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is typically used for binding. This field is read-only.">Consente di specificare che una proprietà viene generalmente utilizzata per l'associazione. Questo campo è di sola lettura.</summary>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary vsli:raw="Specifies values to indicate whether a property can be bound to a data element or another property.">Specifica i valori con i quali indicare se una proprietà può essere associata a un elemento di dati o a un'altra proprietà.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary vsli:raw="The property is set to the default.">La proprietà è impostata sul valore predefinito.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary vsli:raw="The property is not bindable at design time.">La proprietà non è associabile in fase di progettazione.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary vsli:raw="The property is bindable at design time.">La proprietà è associabile in fase di progettazione.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary vsli:raw="Specifies whether the template can be bound one way or two ways.">Specifica se per il modello esistono una o due modalità di associazione.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary vsli:raw="The template can only accept property values. Used with a generic &lt;see cref=&quot;T:System.Web.UI.ITemplate&quot; /&gt;.">Il modello può accettare solo i valori delle proprietà. Utilizzato con un oggetto <see cref="T:System.Web.UI.ITemplate" /> generico.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary vsli:raw="The template can accept and expose property values. Used with an &lt;see cref=&quot;T:System.Web.UI.IBindableTemplate&quot; /&gt;.">Il modello può accettare ed esporre i valori delle proprietà. Utilizzato con un oggetto <see cref="T:System.Web.UI.IBindableTemplate" />.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary vsli:raw="Provides a generic collection that supports data binding.">Fornisce un insieme generico che supporta l'associazione dati.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">Tipo di elementi contenuti nell'elenco.</typeparam>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class using default values.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.BindingList`1" /> utilizzando i valori predefiniti.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class with the specified list.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.BindingList`1" /> con l'elenco specificato.</summary>
      <param name="list" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; of items to be contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">Un oggetto <see cref="T:System.Collections.Generic.IList`1" /> di elementi che devono essere contenuti nell'oggetto <see cref="T:System.ComponentModel.BindingList`1" />.</param>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary vsli:raw="Occurs before an item is added to the list.">Si verifica prima dell'aggiunta di un elemento all'elenco.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary vsli:raw="Adds a new item to the collection.">Aggiunge un nuovo elemento alla raccolta.</summary>
      <returns vsli:raw="The item added to the list.">Elemento aggiunto all'elenco.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Forms.BindingSource.AllowNew&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A public parameterless constructor could not be found for the current item type.">La proprietà <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> è impostata su <see langword="false" />.  
-oppure- 
Non è possibile trovare un costruttore senza parametri pubblico per il tipo di elemento corrente.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary vsli:raw="Adds a new item to the end of the collection.">Aggiunge un nuovo elemento alla fine dell'insieme.</summary>
      <returns vsli:raw="The item that was added to the collection.">L'elemento aggiunto all'insieme.</returns>
      <exception cref="T:System.InvalidCastException" vsli:raw="The new item is not the same type as the objects contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">Il nuovo elemento non è dello stesso tipo degli oggetti contenuti nell'oggetto <see cref="T:System.ComponentModel.BindingList`1" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary vsli:raw="Gets or sets a value indicating whether items in the list can be edited.">Ottiene o imposta un valore che indica se è possibile modificare gli elementi dell'elenco.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se è possibile modificare gli elementi dell'elenco; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary vsli:raw="Gets or sets a value indicating whether you can add items to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">Ottiene o imposta un valore che indica se è possibile aggiungere elementi all'elenco utilizzando il metodo <see cref="M:System.ComponentModel.BindingList`1.AddNew" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">
        <see langword="true" /> se è possibile aggiungere elementi all'elenco con il metodo <see cref="M:System.ComponentModel.BindingList`1.AddNew" />; in caso contrario, <see langword="false" />. L'impostazione predefinita dipende dal tipo sottostante contenuto nell'elenco.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary vsli:raw="Gets or sets a value indicating whether you can remove items from the collection.">Ottiene o imposta un valore che indica se è possibile rimuovere elementi dall'elenco sottostante.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se è possibile rimuovere elementi all'elenco con il metodo <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" />; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the items if overridden in a derived class; otherwise, throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Ordina gli elementi se ne è stato eseguito l'override in una classe derivata; in caso contrario genera un oggetto <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that specifies the property to sort on.">Un oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che specifica in base a quale proprietà ordinare.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Uno dei valori di <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">Il metodo non viene sottoposto a override in una classe derivata.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item.">Elimina un nuovo elemento in attesa.</summary>
      <param name="itemIndex" vsli:raw="The index of the of the new item to be added.">L'indice del nuovo elemento da aggiungere</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary vsli:raw="Removes all elements from the collection.">Rimuove tutti gli elementi dalla raccolta.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">Esegue il commit di un nuovo elemento in sospeso nell'insieme.</summary>
      <param name="itemIndex" vsli:raw="The index of the new item to be added.">L'indice del nuovo elemento da aggiungere.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Searches for the index of the item that has the specified property descriptor with the specified value, if searching is implemented in a derived class; otherwise, a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Ricerca l'indice dell'elemento che ha il descrittore di proprietà specificato con il valore specificato, se la ricerca è implementata in una classe derivata; in caso contrario un oggetto <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search for.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> da cercare.</param>
      <param name="key" vsli:raw="The value of &lt;paramref name=&quot;prop&quot; /&gt; to match.">Valore di <paramref name="prop" /> da cercare.</param>
      <returns vsli:raw="The zero-based index of the item that matches the property descriptor and contains the specified value.">Indice in base zero dell'elemento che corrisponde al descrittore di proprietà e che contiene il valore specificato.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; is not overridden in a derived class.">Il metodo <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" /> non viene sottoposto a override in una classe derivata.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified item in the list at the specified index.">Inserisce l'elemento specificato nell'elenco in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index where the item is to be inserted.">Indice in base zero in cui inserire l'elemento.</param>
      <param name="item" vsli:raw="The item to insert in the list.">Elemento da inserire nell'elenco.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary vsli:raw="Gets a value indicating whether the list is sorted.">Ottiene un valore che indica se l'elenco è ordinato.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is sorted; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elenco è ordinato; in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary vsli:raw="Occurs when the list or an item in the list changes.">Si verifica quando viene modificato l'elenco o un elemento dell'elenco.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.AddingNew&quot; /&gt; event.">Genera l'evento <see cref="E:System.ComponentModel.BindingList`1.AddingNew" />.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">Oggetto <see cref="T:System.ComponentModel.AddingNewEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event.">Genera l'evento <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">Oggetto <see cref="T:System.ComponentModel.ListChangedEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary vsli:raw="Gets or sets a value indicating whether adding or removing items within the list raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events.">Ottiene o imposta un valore che indica se l'aggiunta o la rimozione di elementi all'interno dell'elenco genera eventi <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if adding or removing items raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se l'aggiunta o la rimozione degli elementi genera gli eventi <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Rimuove l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Indice in base zero dell'elemento da rimuovere.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="You are removing a newly added item and &lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowRemove&quot; /&gt; is set to &lt;see langword=&quot;false&quot; /&gt;.">Si intende rimuovere un elemento aggiunto di recente e la proprietà <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> è impostata su <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary vsli:raw="Removes any sort applied with &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; if sorting is implemented in a derived class; otherwise, raises &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Rimuove qualsiasi ordinamento applicato con il metodo <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> se l'ordinamento è implementato in una classe derivata; in caso contrario genera <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">Il metodo non viene sottoposto a override in una classe derivata.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.Reset&quot; /&gt;.">Genera un evento <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> di tipo <see cref="F:System.ComponentModel.ListChangedType.Reset" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt; for the item at the specified position.">Genere un evento <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> di tipo <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> per l'elemento nella posizione specificata.</summary>
      <param name="position" vsli:raw="A zero-based index of the item to be reset.">Indice in base zero dell'elemento da reimpostare.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Sostituisce l'elemento in corrispondenza dell'indice specificato con l'elemento specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to replace.">Indice in base zero dell'elemento da sostituire.</param>
      <param name="item" vsli:raw="The new value for the item at the specified index. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Nuovo valore dell'elemento in corrispondenza dell'indice specificato. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.ObjectModel.Collection`1.Count&quot; /&gt;.">
        <paramref name="index" /> è minore di zero.  
-oppure- 
 <paramref name="index" /> è maggiore di <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary vsli:raw="Gets the direction the list is sorted.">Ottenere la direzione di ordinamento dell'elenco.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.ComponentModel.ListSortDirection.Ascending&quot; /&gt;.">Uno dei valori di <see cref="T:System.ComponentModel.ListSortDirection" />. Il valore predefinito è <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary vsli:raw="Gets the property descriptor that is used for sorting the list if sorting is implemented in a derived class; otherwise, returns &lt;see langword=&quot;null&quot; /&gt;.">Ottiene il descrittore di proprietà utilizzato per ordinare l'elenco se l'ordinamento viene implementato in una classe derivata; in caso contrario viene restituito <see langword="null" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; used for sorting the list.">Il <see cref="T:System.ComponentModel.PropertyDescriptor" /> utilizzato per ordinare l'elenco.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary vsli:raw="Gets a value indicating whether &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are enabled.">Ottiene un valore che indica se sono abilitati gli eventi <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se gli eventi <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> sono supportati; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports searching.">Ottiene un valore che indica se l'elenco supporta la ricerca.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elenco supporta la ricerca, in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports sorting.">Ottiene un valore che indica se l'elenco supporta l'ordinamento.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elenco supporta l'ordinamento, in caso contrario <see langword="false" />. Il valore predefinito è <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add as a search criteria.">L'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> da aggiungere come un criterio di ricerca.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary vsli:raw="Adds a new item to the list. For more information, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">Consente di aggiungere un nuovo elemento all'elenco. Per ulteriori informazioni, vedere <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <returns vsli:raw="The item added to the list.">Elemento aggiunto all'elenco.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Questo metodo non è supportato.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary vsli:raw="Gets a value indicating whether items in the list can be edited.">Ottiene un valore che indica se è possibile modificare gli elementi dell'elenco.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se è possibile modificare gli elementi dell'elenco; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary vsli:raw="Gets a value indicating whether new items can be added to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">Ottiene o imposta un valore che indica se è possibile aggiungere elementi all'elenco utilizzando il metodo <see cref="M:System.ComponentModel.BindingList`1.AddNew" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">
        <see langword="true" /> se è possibile aggiungere elementi all'elenco con il metodo <see cref="M:System.ComponentModel.BindingList`1.AddNew" />; in caso contrario, <see langword="false" />. L'impostazione predefinita dipende dal tipo sottostante contenuto nell'elenco.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary vsli:raw="Gets a value indicating whether items can be removed from the list.">Ottiene un valore che indica se è possibile rimuovere elementi dall'elenco.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se è possibile rimuovere elementi dall'elenco con il metodo <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" />; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;. For a complete description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">Ordina l'elenco in base a un oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> e a un oggetto <see cref="T:System.ComponentModel.ListSortDirection" />. Per una descrizione completa di questo membro, vedere <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> in base al quale effettuare l'ordinamento.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Uno dei valori di <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> in base al quale effettuare la ricerca.</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;prop&quot; /&gt; parameter to search for.">Valore del parametro <paramref name="prop" /> da ricercare.</param>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Indice della riga che presenta il dato oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.IsSorted&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="P:System.ComponentModel.IBindingList.IsSorted" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è stato chiamato il metodo <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" /> e non il metodo <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">Un oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> da rimuovere dagli indici utilizzati per la ricerca.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt;.">Per una descrizione di questo membro, vedere il metodo <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />.</summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortDirection&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="P:System.ComponentModel.IBindingList.SortDirection" />.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Uno dei valori di <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortProperty&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="P:System.ComponentModel.IBindingList.SortProperty" />.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che viene utilizzato per l'ordinamento.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsChangeNotification&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se viene generato un evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> quando viene modificato l'elenco o un elemento dell'elenco, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elenco supporta la ricerca con il metodo <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elenco supporta l'ordinamento, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether item property value changes raise &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt;. This member cannot be overridden in a derived class.">Ottiene un valore che indica se le modifiche al valore della proprietà dell'elemento generano eventi <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> di tipo <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" />. Questo membro non può essere sottoposto a override in una classe derivata.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list type implements &lt;see cref=&quot;T:System.ComponentModel.INotifyPropertyChanged&quot; /&gt;, otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />Se il tipo di elenco <see cref="T:System.ComponentModel.INotifyPropertyChanged" />implementa; in <see langword="false" />caso contrario,. Il valore predefinito è <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Boolean&quot; /&gt; objects to and from various other representations.">Fornisce un convertitore di tipi per convertire oggetti <see cref="T:System.Boolean" /> in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BooleanConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.BooleanConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Boolean object using the specified context.">Ottiene un valore che indica se il convertitore può convertire un oggetto dal tipo di origine specificato in un oggetto di tipo Boolean utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo dal quale si desidera effettuare la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a Boolean object.">Converte l'oggetto valore specificato in un oggetto di tipo Boolean.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che specifica le impostazioni cultura della conversione.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> che rappresenta la conversione di <paramref name="value" />.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> non è un valore valido per il tipo di destinazione.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the Boolean data type.">Ottiene un insieme di valori standard per il tipo di dati Boolean.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values.">Oggetto <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> che contiene un insieme standard di valori validi.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">Ottiene un valore che indica se l'elenco di valori standard restituito dal metodo <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> è un elenco esclusivo.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> perché l'oggetto <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> restituito da <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> è un elenco completo dei valori possibili. Questo metodo non restituisce mai <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">Ottiene un valore che indica se il convertitore supporta un insieme di valori standard che possono essere selezionati da un elenco.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> perché è possibile chiamare il metodo <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> per trovare un insieme comune di valori supportati dall'oggetto. Questo metodo non restituisce mai <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from various other representations.">Offre un convertitore di tipi per la conversione di oggetti di tipo intero senza segno a 8 bit in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ByteConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ByteConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary vsli:raw="Represents the method that handles a cancelable event.">Rappresenta il metodo che gestisce un evento annullabile.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origine dell'evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CancelEventArgs&quot; /&gt; that contains the event data.">Oggetto <see cref="T:System.ComponentModel.CancelEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary vsli:raw="Provides a type converter to convert Unicode character objects to and from various other representations.">Fornisce un convertitore di tipi per convertire oggetti carattere Unicode in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CharConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.CharConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Unicode character object using the specified context.">Ottiene un valore che indica se il convertitore può convertire un oggetto dal tipo di origine specificato in un oggetto carattere Unicode utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo da cui eseguire la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a Unicode character object.">Converte l'oggetto specificato in un oggetto carattere Unicode.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Le impostazioni cultura in cui <paramref name="value" /> verrà convertito.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> che rappresenta la conversione di <paramref name="value" />.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> non è un valore valido per il tipo di destinazione.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a Unicode character object using the arguments.">Converte l'oggetto valore specificato in un oggetto carattere Unicode utilizzando gli argomenti.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Le impostazioni cultura in cui <paramref name="value" /> verrà convertito.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Tipo <see cref="T:System.Type" /> in cui convertire il valore.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary vsli:raw="Specifies how the collection is changed.">Consente di specificare il tipo di modifica apportata all'insieme.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary vsli:raw="Specifies that an element was added to the collection.">Consente di specificare che all'insieme è stato aggiunto un elemento.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary vsli:raw="Specifies that the entire collection has changed. This is caused by using methods that manipulate the entire collection, such as &lt;see cref=&quot;M:System.Collections.CollectionBase.Clear&quot; /&gt;.">Consente di specificare che è stato modificato l'intero insieme. Ciò è determinato dall'utilizzo di metodi in grado di modificare l'intero insieme, come ad esempio il metodo <see cref="M:System.Collections.CollectionBase.Clear" />.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary vsli:raw="Specifies that an element was removed from the collection.">Consente di specificare che dall'insieme è stato rimosso un elemento.</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event.">Fornisce dati per l'evento <see cref="E:System.Data.DataColumnCollection.CollectionChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />.</summary>
      <param name="action" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values that specifies how the collection changed.">Uno dei valori di <see cref="T:System.ComponentModel.CollectionChangeAction" /> che specifica il tipo di modifica apportata all'insieme.</param>
      <param name="element" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the instance of the collection where the change occurred.">
        <see cref="T:System.Object" /> che specifica l'istanza dell'insieme in cui è stata apportata la modifica.</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary vsli:raw="Gets an action that specifies how the collection changed.">Ottiene un'azione che specifica il tipo di modifica apportata all'insieme.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values.">Uno dei valori di <see cref="T:System.ComponentModel.CollectionChangeAction" />.</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary vsli:raw="Gets the instance of the collection with the change.">Ottiene l’istanza dell'insieme con la modifica.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the instance of the collection with the change, or &lt;see langword=&quot;null&quot; /&gt; if you refresh the collection.">Oggetto <see cref="T:System.Object" /> che rappresenta l'istanza dell'insieme con la modifica oppure <see langword="null" /> se l'insieme viene aggiornato.</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event raised when adding elements to or removing elements from a collection.">Rappresenta il metodo che gestisce l'evento <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> generato in occasione dell'aggiunta o della rimozione di elementi da un insieme.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origine dell'evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; that contains the event data.">Oggetto <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary vsli:raw="Provides a type converter to convert collection objects to and from various other representations.">Fornisce un convertitore di tipi per convertire oggetti insieme in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.CollectionConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Converte l'oggetto valore specificato nel tipo di destinazione specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="The culture to which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Le impostazioni cultura in cui <paramref name="value" /> verrà convertito.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This parameter must inherit from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> da convertire. Questo parametro deve ereditare da <see cref="T:System.Collections.ICollection" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Tipo <see cref="T:System.Type" /> in cui convertire il valore.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter using the specified context and attributes.">Ottiene un insieme di proprietà per il tipo di matrice specificato dal parametro del valore utilizzando il contesto e gli attributi specificati.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">Oggetto <see cref="T:System.Object" /> che specifica il tipo matrice per cui ottenere le proprietà.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> che verrà utilizzata come filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà esposte per questo tipo di dati oppure <see langword="null" /> se non vi sono proprietà. Questo metodo restituisce sempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Ottiene un valore che indica se l'oggetto supporta le proprietà.</summary>
      <param name="context">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns>
        <see langword="false" /> perché <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> non deve essere chiamato per trovare le proprietà di questo oggetto. Questo metodo non restituisce mai <see langword="true" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the data source and data member properties for a component that supports complex data binding. This class cannot be inherited.">Specifica l'origine dati e le proprietà del membro di dati per un componente che supporta l'associazione dati complessa. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using no parameters.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> senza utilizzare parametri.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> utilizzando l’origine dati specificata.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">Nome della proprietà da utilizzare come origine dati.</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source and data member.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> utilizzando l’origine dati e il membro dati specificati.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">Nome della proprietà da utilizzare come origine dati.</param>
      <param name="dataMember" vsli:raw="The name of the property to be used as the source for data.">Nome della proprietà da utilizzare come origine dei dati.</param>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary vsli:raw="Gets the name of the data member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Ottiene il nome della proprietà del membro di dati per il componente al quale è associato l'oggetto <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
      <returns vsli:raw="The name of the data member property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Nome della proprietà del membro di dati per il componente al quale è associato l'oggetto <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Ottiene il nome della proprietà dell'origine dati per il componente al quale è associato l'oggetto <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
      <returns vsli:raw="The name of the data source property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">Nome della proprietà dell'origine dati per il componente al quale è associato l'oggetto <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class.">Rappresenta il valore predefinito per la classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">Determina se l'oggetto <see cref="T:System.Object" /> specificato è uguale all'istanza <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> corrente.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">Oggetto <see cref="T:System.Object" /> da confrontare con l'istanza <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">
        <see langword="true" /> se l'oggetto è uguale all'istanza corrente; in caso contrario, <see langword="false" />, indica che non sono uguali.</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary vsli:raw="Provides a type converter to convert components to and from various other representations.">Fornisce un convertitore di tipi per convertire i componenti in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ComponentConverter" />.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this component converter.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo da associare al convertitore del componente.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of component specified by the value parameter.">Ottiene un insieme di proprietà per il tipo di componente specificato dal parametro del valore.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of component to get the properties for.">Oggetto <see cref="T:System.Object" /> che specifica il tipo di componente per il quale ottenere le proprietà.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> che verrà utilizzata come filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà esposte per il componente oppure <see langword="null" /> se non sono specificate proprietà.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">Ottiene un valore che indica se l'oggetto supporta le proprietà utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> perché è necessario chiamare il metodo <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> per individuare le proprietà dell'oggetto. Questo metodo non restituisce mai <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary vsli:raw="Provides the base class for a custom component editor.">Fornisce la classe di base per un editor di componenti personalizzato.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentEditor&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ComponentEditor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified based upon a given context.">Consente di modificare il componente e restituire un valore che indica se il componente è stato modificato in base a un determinato contesto.</summary>
      <param name="context" vsli:raw="An optional context object that can be used to obtain further information about the edit.">Un oggetto contesto opzionale che può essere utilizzato per ottenere ulteriori informazioni sulla modifica.</param>
      <param name="component" vsli:raw="The component to be edited.">Componente da modificare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il componente è stato modificato, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified.">Consente di modificare il componente e restituire un valore che indica se il componente è stato modificato.</summary>
      <param name="component" vsli:raw="The component to be edited.">Componente da modificare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il componente è stato modificato, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary vsli:raw="Provides simple functionality for enumerating resources for a component or object. The &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class is a &lt;see cref=&quot;T:System.Resources.ResourceManager&quot; /&gt;.">Fornisce una funzionalità semplice per l'enumerazione delle risorse per un componente o un oggetto. La classe <see cref="T:System.ComponentModel.ComponentResourceManager" /> è un <see cref="T:System.Resources.ResourceManager" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class with default values.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ComponentResourceManager" /> con i valori predefiniti.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; that looks up resources in satellite assemblies based on information from the specified &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Crea una classe <see cref="T:System.ComponentModel.ComponentResourceManager" /> che ricerca le risorse negli assembly satellite in base alle informazioni derivate dalla classe <see cref="T:System.Type" /> specificata.</summary>
      <param name="t" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; from which the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; derives all information for finding resource files.">Oggetto <see cref="T:System.Type" /> dal quale la classe <see cref="T:System.ComponentModel.ComponentResourceManager" /> deriva tutte le informazioni per la ricerca dei file di risorse.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">Applica il valore di una risorsa alla proprietà corrispondente dell'oggetto.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">Oggetto <see cref="T:System.Object" /> che contiene il valore della proprietà da applicare.</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">Oggetto <see cref="T:System.String" /> che contiene il nome dell'oggetto da cercare nelle risorse.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> o <paramref name="objectName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">Applica il valore di una risorsa alla proprietà corrispondente dell'oggetto.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">Oggetto <see cref="T:System.Object" /> che contiene il valore della proprietà da applicare.</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">Oggetto <see cref="T:System.String" /> che contiene il nome dell'oggetto da cercare nelle risorse.</param>
      <param name="culture" vsli:raw="The culture for which to apply resources.">Impostazioni cultura per cui applicare le risorse.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> o <paramref name="objectName" /> è <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary vsli:raw="Encapsulates zero or more components.">Consente di incapsulare zero o più componenti.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Container" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;. The component is unnamed.">Aggiunge l'oggetto <see cref="T:System.ComponentModel.Component" /> specificato all'insieme <see cref="T:System.ComponentModel.Container" />. Non è stato assegnato alcun nome al componente.</summary>
      <param name="component" vsli:raw="The component to add.">Componente da aggiungere.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; and assigns it a name.">Consente di aggiungere l'oggetto <see cref="T:System.ComponentModel.Component" /> specificato all'oggetto <see cref="T:System.ComponentModel.Container" /> e assegnargli un nome.</summary>
      <param name="component" vsli:raw="The component to add.">Componente da aggiungere.</param>
      <param name="name" vsli:raw="The unique, case-insensitive name to assign to the component.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt;, which leaves the component unnamed.">Nome univoco, senza distinzione tra maiuscole e minuscole, da assegnare al componente.  
-oppure- 
 <see langword="null" />. In questo caso, non viene assegnato alcun nome al componente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">
        <paramref name="name" /> non è univoco.</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary vsli:raw="Gets all the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Ottiene tutti i componenti presenti in <see cref="T:System.ComponentModel.Container" />.</summary>
      <returns vsli:raw="A collection that contains the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Insieme che contiene i componenti presenti in <see cref="T:System.ComponentModel.Container" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; for the given &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and assigns the given name to the site.">Consente di creare un sito <see cref="T:System.ComponentModel.ISite" /> per un determinato oggetto <see cref="T:System.ComponentModel.IComponent" /> e assegnargli un nome.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">Oggetto <see cref="T:System.ComponentModel.IComponent" /> per il quale creare un sito.</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">Nome da assegnare al parametro <paramref name="component" /> oppure <see langword="null" /> per non assegnare alcun nome.</param>
      <returns vsli:raw="The newly created site.">Sito appena creato.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Rilascia tutte le risorse usate da <see cref="T:System.ComponentModel.Container" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;, and optionally releases the managed resources.">Rilascia le risorse non gestite usate dall'oggetto <see cref="T:System.ComponentModel.Container" /> e, facoltativamente, le risorse gestite.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite, <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary vsli:raw="Releases unmanaged resources and performs other cleanup operations before the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; is reclaimed by garbage collection.">Rilascia risorse non gestite ed esegue altre operazioni di pulizia prima che la classe <see cref="T:System.ComponentModel.Container" /> venga recuperata tramite Garbage Collection.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">Ottiene l'oggetto servizio del tipo specificato, se disponibile.</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">L'oggetto <see cref="T:System.Type" /> del servizio da recuperare.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; implementing the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">Oggetto <see cref="T:System.Object" /> che implementa il servizio richiesto, oppure <see langword="null" /> se non è possibile trovare il servizio.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">Rimuove un componente da <see cref="T:System.ComponentModel.Container" />.</summary>
      <param name="component" vsli:raw="The component to remove.">Componente da rimuovere.</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; without setting &lt;see cref=&quot;P:System.ComponentModel.IComponent.Site&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;.">Rimuove un componente da <see cref="T:System.ComponentModel.Container" /> senza impostare <see cref="P:System.ComponentModel.IComponent.Site" /> su <see langword="null" />.</summary>
      <param name="component" vsli:raw="The component to remove.">Componente da rimuovere.</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Determines whether the component name is unique for this container.">Determina se il nome del componente è univoco per questo contenitore.</summary>
      <param name="component" vsli:raw="The named component.">Componente denominato.</param>
      <param name="name" vsli:raw="The component name to validate.">Nome del componente da convalidare.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">
        <paramref name="name" /> non è univoco.</exception>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary vsli:raw="Provides a base class for the container filter service.">Fornisce una classe base per il servizio filtro del contenitore.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ContainerFilterService&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ContainerFilterService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary vsli:raw="Filters the component collection.">Filtra l'insieme di componenti.</summary>
      <param name="components" vsli:raw="The component collection to filter.">Insieme di componenti da filtrare.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ComponentCollection&quot; /&gt; that represents a modified collection.">Oggetto <see cref="T:System.ComponentModel.ComponentCollection" /> che rappresenta un insieme modificato.</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; objects to and from various other representations.">Fornisce un convertitore di tipi per convertire oggetti <see cref="T:System.Globalization.CultureInfo" /> in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CultureInfoConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.CultureInfoConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; using the specified context.">Ottiene un valore che indica se il convertitore può convertire un oggetto dal tipo di origine specificato in un oggetto <see cref="T:System.Globalization.CultureInfo" /> utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo dal quale si desidera effettuare la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ottiene un valore che indica se questo convertitore può convertire un oggetto nel tipo di destinazione specificato usando il contesto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Tipo <see cref="T:System.Type" /> che rappresenta il tipo di destinazione della conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;.">Converte l'oggetto valore specificato in un oggetto <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che specifica le impostazioni cultura della conversione.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; specifies a culture that is not valid.">
        <paramref name="value" /> specifica impostazioni cultura non valide.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Converte l'oggetto valore specificato nel tipo di destinazione specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che specifica le impostazioni cultura della conversione.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Tipo <see cref="T:System.Type" /> in cui convertire il valore.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> che rappresenta la conversione di <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary vsli:raw="Retrieves the name of the specified culture.">Recupera il nome delle impostazioni cultura specificate.</summary>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to get the name for.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che specifica le impostazioni cultura di cui ottenere il nome.</param>
      <returns vsli:raw="The name of the specified culture.">Nome delle impostazioni cultura specificate.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object using the specified context.">Ottiene un insieme di valori standard per un oggetto <see cref="T:System.Globalization.CultureInfo" /> utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Insieme <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> con un gruppo standard di valori validi oppure <see langword="null" /> se il tipo di dati non supporta un gruppo standard di valori.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list.">Ottiene un valore che indica se l'elenco di valori standard restituito dal metodo <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> è un elenco completo.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is not an exhaustive list of possible values (that is, other values are possible). This method never returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="false" /> perché l'oggetto <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> restituito dal metodo <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> non è un elenco completo dei valori possibili (vale a dire che altri valori sono possibili). Questo metodo non restituisce mai <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">Ottiene un valore che indica se il convertitore supporta un insieme di valori standard che possono essere selezionati da un elenco utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> perché è necessario chiamare il metodo <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> per trovare un insieme comune di valori supportati dall'oggetto. Questo metodo non restituisce mai <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary vsli:raw="Provides a simple default implementation of the &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; interface.">Fornisce una semplice implementazione predefinita dell'interfaccia <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /></summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.CustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class using a parent custom type descriptor.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> utilizzando un descrittore di tipi personalizzati padre.</summary>
      <param name="parent" vsli:raw="The parent custom type descriptor.">Il descrittore di tipi personalizzati padre.</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for the type represented by this type descriptor.">Restituisce un insieme di attributi personalizzati per il tipo rappresentato da questo descrittore di tipi.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the type. The default is &lt;see cref=&quot;F:System.ComponentModel.AttributeCollection.Empty&quot; /&gt;.">Un oggetto <see cref="T:System.ComponentModel.AttributeCollection" /> contenente gli attributi per il tipo. Il valore predefinito è <see cref="F:System.ComponentModel.AttributeCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the fully qualified name of the class represented by this type descriptor.">Restituisce il nome completo della classe rappresentata da questo descrittore di tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the fully qualified class name of the type this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.String" /> contenente il nome di classe completo del tipo che questo descrittore di tipo sta descrivendo. Il valore predefinito è <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of the class represented by this type descriptor.">Restituisce il nome della classe rappresentata da questo descrittore di tipi.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the component instance this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">Un oggetto <see cref="T:System.String" /> contenente il nome dell'istanza del componente descritto da questo descrittore di tipi. Il valore predefinito è <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for the type represented by this type descriptor.">Restituisce un convertitore di tipi per il tipo rappresentato da questo descrittore di tipi.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the type represented by this type descriptor. The default is a newly created &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt;.">Un oggetto <see cref="T:System.ComponentModel.TypeConverter" /> per il tipo rappresentato da questo descrittore di tipi. Il valore predefinito è un oggetto <see cref="T:System.ComponentModel.TypeConverter" /> appena creato.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the event descriptor for the default event of the object represented by this type descriptor.">Restituisce il descrittore di eventi per l'evento predefinito dell'oggetto rappresentato da questo descrittore di tipi.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the default event on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">L'oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> per l'evento predefinito dell'oggetto rappresentato da questo descrittore di tipi. Il valore predefinito è <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the property descriptor for the default property of the object represented by this type descriptor.">Restituisce il descrittore di proprietà per la proprietà predefinita dell'oggetto rappresentato da questo descrittore di tipi.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; for the default property on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">Un oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> per la proprietà predefinita sull'oggetto rappresentato da questo descrittore di tipi. Il valore predefinito è <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type that is to be associated with the class represented by this type descriptor.">Restituisce un editor del tipo specificato, da associare alla classe rappresentata da questo descrittore di tipi.</summary>
      <param name="editorBaseType" vsli:raw="The base type of the editor to retrieve.">Il tipo di base dell'editor da recuperare.</param>
      <returns vsli:raw="An editor of the given type that is to be associated with the class represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">Un editor del tipo specificato, da associare alla classe rappresentata da questo descrittore di tipi. Il valore predefinito è <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns a collection of event descriptors for the object represented by this type descriptor.">Restituisce un insieme di descrittori di eventi per l'oggetto rappresentato da questo descrittore di tipi.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptors for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">Un oggetto <see cref="T:System.ComponentModel.EventDescriptorCollection" /> contenente i descrittori di eventi per l'oggetto rappresentato da questo descrittore di tipi. Il valore predefinito è <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of event descriptors for the object represented by this type descriptor.">Restituisce un insieme filtrato di descrittori di eventi per l'oggetto rappresentato da questo descrittore di tipi.</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">Matrice di attributi da utilizzare come filtro. Può essere <see langword="null" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.EventDescriptorCollection" /> contenente le descrizioni degli eventi per l'oggetto rappresentato da questo descrittore di tipi. Il valore predefinito è <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns a collection of property descriptors for the object represented by this type descriptor.">Restituisce un insieme di descrittori di proprietà per l'oggetto rappresentato da questo descrittore di tipi.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> contenente le descrizioni delle proprietà per l'oggetto rappresentato da questo descrittore di tipi. Il valore predefinito è <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of property descriptors for the object represented by this type descriptor.">Restituisce un insieme filtrato di descrittori di proprietà per l'oggetto rappresentato da questo descrittore di tipi.</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">Matrice di attributi da utilizzare come filtro. Può essere <see langword="null" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> contenente le descrizioni delle proprietà per l'oggetto rappresentato da questo descrittore di tipi. Il valore predefinito è <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">Restituisce un oggetto che contiene la proprietà descritta dal descrittore di proprietà specificato.</summary>
      <param name="pd" vsli:raw="The property descriptor for which to retrieve the owning object.">Il descrittore di proprietà per il quale recuperare l'oggetto proprietario.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that owns the given property specified by the type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> proprietario della proprietà specificata dal descrittore di tipi. Il valore predefinito è <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary vsli:raw="Identifies a type as an object suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object. This class cannot be inherited.">Identifica un tipo come un oggetto adatto per l'associazione a un oggetto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.DataObjectAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class and indicates whether an object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.DataObjectAttribute" /> e indica se un oggetto è adatto per l'associazione a un oggetto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</summary>
      <param name="isDataObject" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto è adatto per l'associazione a un oggetto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />; in caso contrario, <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary vsli:raw="Indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">Indica che la classe è adatta per l'associazione a un oggetto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> in fase di progettazione. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary vsli:raw="Represents the default value of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class, which indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">Rappresenta il valore predefinito della classe <see cref="T:System.ComponentModel.DataObjectAttribute" /> che indica che la classe è adatta per l'associazione a un oggetto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> in fase di progettazione. Questo campo è di sola lettura.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; fits the pattern of another object.">Determina se questa istanza dell'oggetto <see cref="T:System.ComponentModel.DataObjectAttribute" /> corrisponde allo schema di un altro oggetto.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt;.">Un oggetto da confrontare con questa istanza dell'oggetto <see cref="T:System.ComponentModel.DataObjectAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questa istanza corrisponde a quella specificata dal parametro <paramref name="obj" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary vsli:raw="Gets a value indicating whether an object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time.">Ottiene un valore che indica se un oggetto dovrebbe essere considerato adatto per l'associazione a un oggetto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> in fase di progettazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto è adatto per l'associazione a un oggetto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">Ottiene un valore che indica se il valore corrente dell'attributo è il valore predefinito dell'attributo stesso.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore corrente dell'attributo è quello predefinito, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary vsli:raw="Indicates that the class is not suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">Indica che la classe non è adatta per l'associazione a un oggetto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> in fase di progettazione. Questo campo è di sola lettura.</summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary vsli:raw="Provides metadata for a property representing a data field. This class cannot be inherited.">Fornisce metadati per una proprietà che rappresenta un campo dati. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> e indica se il campo è la chiave primaria della riga di dati.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per indicare che il campo è la chiave primaria della riga di dati; in caso contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, and whether the field is a database identity field.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> e indica se il campo è la chiave primaria della riga di dati e se il campo è un campo di identità del database.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per indicare che il campo è la chiave primaria della riga di dati; in caso contrario, <see langword="false" />.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per indicare che il campo è un campo di identità che identifica in modo univoco la riga di dati; in caso contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether the field is a database identity field, and whether the field can be null.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> e indica se il campo è la chiave primaria della riga di dati e se il campo è un campo di identità del database e se il campo può essere null.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per indicare che il campo è la chiave primaria della riga di dati; in caso contrario, <see langword="false" />.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per indicare che il campo è un campo di identità che identifica in modo univoco la riga di dati; in caso contrario, <see langword="false" />.</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per indicare che il campo può essere null nell'archivio dati in caso contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether it is a database identity field, and whether it can be null and sets the length of the field.">Inizializza un nuova istanza della classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> e indica se il campo è la chiave primaria della riga di dati, se si tratta di un campo di identità del database e se può essere null e se imposta la lunghezza del campo.</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per indicare che il campo è la chiave primaria della riga di dati; in caso contrario, <see langword="false" />.</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per indicare che il campo è un campo di identità che identifica in modo univoco la riga di dati; in caso contrario, <see langword="false" />.</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per indicare che il campo può essere null nell'archivio dati in caso contrario, <see langword="false" />.</param>
      <param name="length" vsli:raw="The length of the field in bytes.">Lunghezza del campo in byte.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt;.">Un oggetto da confrontare con questa istanza dell'oggetto <see cref="T:System.ComponentModel.DataObjectFieldAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questa istanza corrisponde a quella specificata dal parametro <paramref name="obj" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary vsli:raw="Gets a value indicating whether a property represents an identity field in the underlying data.">Ottiene un valore che indica se una proprietà rappresenta un campo di identità dei dati sottostanti.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents an identity field in the underlying data; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la proprietà rappresenta un campo di identità nei dati sottostanti; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary vsli:raw="Gets a value indicating whether a property represents a field that can be null in the underlying data store.">Ottiene un valore che indica se una proprietà rappresenta un campo che può essere null nell'archivio dati sottostante.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents a field that can be null in the underlying data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la proprietà rappresenta un campo che può essere null nell'archivio dati sottostante; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary vsli:raw="Gets the length of the property in bytes.">Ottiene la lunghezza in byte della proprietà.</summary>
      <returns vsli:raw="The length of the property in bytes, or -1 if not set.">La lunghezza della proprietà in byte o -1 se non impostata.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary vsli:raw="Gets a value indicating whether a property is in the primary key in the underlying data.">Ottiene un valore che indica se una proprietà è la chiave primaria nei dati sottostanti.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is in the primary key of the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la proprietà è la chiave primaria dell'archivio dati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary vsli:raw="Identifies a data operation method exposed by a type, what type of operation the method performs, and whether the method is the default data method. This class cannot be inherited.">Identifica un metodo di operazione dati esposto da un tipo, il tipo di operazione effettuata dal metodo e se il metodo è il metodo predefinito dei dati. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class and identifies the type of data operation the method performs.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> e identifica il tipo di operazione dati effettuata dal metodo.</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">Uno dei valori dell'oggetto <see cref="T:System.ComponentModel.DataObjectMethodType" /> che descrive l'operazione dati effettuata dal metodo.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class, identifies the type of data operation the method performs, and identifies whether the method is the default data method that the data object exposes.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />, identifica il tipo di operazione dati eseguita dal metodo e identifica se il metodo è il metodo dati predefinito esposto dall'oggetto dati.</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">Uno dei valori dell'oggetto <see cref="T:System.ComponentModel.DataObjectMethodType" /> che descrive l'operazione dati effettuata dal metodo.</param>
      <param name="isDefault" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the method that the attribute is applied to is the default method of the data object for the specified &lt;paramref name=&quot;methodType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per indicare che il metodo al quale è applicato l'attributo è quello predefinito dell'oggetto dati per il <paramref name="methodType" /> specificato; in caso contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">Un oggetto da confrontare con questa istanza dell'oggetto <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questa istanza corrisponde a quella specificata dal parametro <paramref name="obj" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary vsli:raw="Gets a value indicating whether the method that the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied to is the default data method exposed by the data object for a specific method type.">Ottiene un valore che indica se il metodo al quale è applicato <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> è il metodo dati predefinito esposto dall'oggetto dati per un tipo di metodo specifico.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is the default method exposed by the object for a method type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il metodo è quello predefinito esposto dall'oggetto per un tipo di metodo; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary vsli:raw="Gets a value indicating whether this instance shares a common pattern with a specified attribute.">Ottiene un valore che indica se questa istanza condivide uno schema comune con un attributo specificato.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">Un oggetto da confrontare con questa istanza dell'oggetto <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questa istanza corrisponde a quella specificata dal parametro <paramref name="obj" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; value indicating the type of data operation the method performs.">Ottiene un valore <see cref="T:System.ComponentModel.DataObjectMethodType" /> che indica il tipo di operazione dati effettuata dal metodo.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that identifies the type of data operation performed by the method to which the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied.">Uno dei valori <see cref="T:System.ComponentModel.DataObjectMethodType" /> che identifica il tipo di operazione dati eseguita dal metodo al quale è applicato <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary vsli:raw="Identifies the type of data operation performed by a method, as specified by the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; applied to the method.">Identifica il tipo di operazione dati eseguito da un metodo, come specificato dall'oggetto <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> applicato al metodo.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary vsli:raw="Indicates that a method is used for a data operation that deletes data.">Indica che un metodo viene utilizzato per un'operazione dati che elimina i dati.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary vsli:raw="Indicates that a method is used for a data operation that fills a &lt;see cref=&quot;T:System.Data.DataSet&quot; /&gt; object.">Indica che un metodo viene utilizzato per un'operazione dati che riempie un oggetto <see cref="T:System.Data.DataSet" />.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary vsli:raw="Indicates that a method is used for a data operation that inserts data.">Indica che un metodo viene utilizzato per un'operazione dati che inserisce i dati.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary vsli:raw="Indicates that a method is used for a data operation that retrieves data.">Indica che un metodo viene utilizzato per un'operazione dati che recupera i dati.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary vsli:raw="Indicates that a method is used for a data operation that updates data.">Indica che un metodo viene utilizzato per un'operazione dati che aggiorna i dati.</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTime&quot; /&gt; objects to and from various other representations.">Fornisce un convertitore di tipi per convertire oggetti <see cref="T:System.DateTime" /> in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.DateTimeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the specified context.">Ottiene un valore che indica se il convertitore può convertire un oggetto dal tipo di origine specificato in un oggetto <see cref="T:System.DateTime" /> utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo dal quale si desidera effettuare la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ottiene un valore che indica se questo convertitore può convertire un oggetto nel tipo di destinazione specificato usando il contesto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Tipo <see cref="T:System.Type" /> che rappresenta il tipo di destinazione della conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">Converte l'oggetto valore specificato in un oggetto <see cref="T:System.DateTime" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> facoltativo. Se non vengono specificate impostazioni cultura, vengono utilizzate quelle correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> che rappresenta la conversione di <paramref name="value" />.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> non è un valore valido per il tipo di destinazione.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the arguments.">Converte l'oggetto valore specificato in un oggetto <see cref="T:System.DateTime" /> utilizzando gli argomenti.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> facoltativo. Se non vengono specificate impostazioni cultura, vengono utilizzate quelle correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Tipo <see cref="T:System.Type" /> in cui convertire il valore.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> che rappresenta la conversione di <paramref name="value" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; structures to and from various other representations.">Fornisce un convertitore di tipi per convertire le strutture <see cref="T:System.DateTimeOffset" /> in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeOffsetConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.DateTimeOffsetConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether an object of the specified source type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Restituisce un valore che indica se un oggetto del tipo di origine specificato può essere convertito in oggetto <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context" vsli:raw="The date format context.">Contesto del formato data.</param>
      <param name="sourceType" vsli:raw="The source type to check.">Tipo di origine da verificare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il tipo specificato può essere convertito in <see cref="T:System.DateTimeOffset" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to an object of the specified type.">Restituisce un valore che indica se <see cref="T:System.DateTimeOffset" /> può essere convertito in un oggetto del tipo specificato.</summary>
      <param name="context" vsli:raw="The date format context.">Contesto del formato data.</param>
      <param name="destinationType" vsli:raw="The destination type to check.">Tipo di destinazione da verificare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.DateTimeOffset" /> può essere convertito nel tipo specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Converte l'oggetto specificato in un oggetto <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context" vsli:raw="The date format context.">Contesto del formato data.</param>
      <param name="culture" vsli:raw="The date culture.">Impostazioni cultura della data.</param>
      <param name="value" vsli:raw="The object to be converted.">Oggetto da convertire.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; that represents the specified object.">Oggetto <see cref="T:System.DateTimeOffset" /> che rappresenta l'oggetto specificato.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to an object of the specified type.">Converte un oggetto <see cref="T:System.DateTimeOffset" /> in un oggetto del tipo specificato.</summary>
      <param name="context" vsli:raw="The date format context.">Contesto del formato data.</param>
      <param name="culture" vsli:raw="The date culture.">Impostazioni cultura della data.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to be converted.">Elemento <see cref="T:System.DateTimeOffset" /> da convertire.</param>
      <param name="destinationType" vsli:raw="The type to convert to.">Tipo in cui eseguire la conversione.</param>
      <returns vsli:raw="An object of the specified type that represents the &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">Oggetto del tipo specificato che rappresenta <see cref="T:System.DateTimeOffset" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Decimal&quot; /&gt; objects to and from various other representations.">Fornisce un convertitore di tipi per convertire oggetti <see cref="T:System.Decimal" /> in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DecimalConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.DecimalConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ottiene un valore che indica se questo convertitore può convertire un oggetto nel tipo di destinazione specificato usando il contesto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Tipo <see cref="T:System.Type" /> che rappresenta il tipo di destinazione della conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; using the arguments.">Converte l'oggetto valore specificato in un oggetto <see cref="T:System.Decimal" /> utilizzando gli argomenti.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> facoltativo. Se non vengono specificate impostazioni cultura, vengono utilizzate quelle correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Tipo <see cref="T:System.Type" /> in cui convertire il valore.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">L'elemento <paramref name="destinationType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary vsli:raw="Specifies the default binding property for a component. This class cannot be inherited.">Specifica la proprietà di associazione predefinita per un componente. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using no parameters.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> senza utilizzare parametri.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using the specified property name.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> con il nome della proprietà specificato.</summary>
      <param name="name" vsli:raw="The name of the default binding property.">Nome della proprietà di associazione predefinita.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class.">Rappresenta il valore predefinito per la classe <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">Determina se l'oggetto <see cref="T:System.Object" /> specificato è uguale all'istanza <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> corrente.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">Oggetto <see cref="T:System.Object" /> da confrontare con l'istanza <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">
        <see langword="true" /> se l'oggetto è uguale all'istanza corrente; in caso contrario, <see langword="false" />, indica che non sono uguali.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">Ottiene il nome della proprietà di associazione predefinita per il componente al quale è associato l'oggetto <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</summary>
      <returns vsli:raw="The name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">Nome della proprietà di associazione predefinita per il componente al quale è associato l'oggetto <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary vsli:raw="Specifies the default event for a component.">Specifica l'evento predefinito per un componente.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.DefaultEventAttribute" />.</summary>
      <param name="name" vsli:raw="The name of the default event for the component this attribute is bound to.">Nome dell'evento predefinito per il componente a cui è associato questo attributo.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Consente di specificare il valore predefinito per l'attributo <see cref="T:System.ComponentModel.DefaultEventAttribute" />, che è <see langword="null" />. Questo campo <see langword="static" /> è di sola lettura.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;.">Specifica se il valore dell'oggetto specificato è uguale all'oggetto <see cref="T:System.ComponentModel.DefaultEventAttribute" /> corrente.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Oggetto di cui va verificata l'uguaglianza di valore.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore dell'oggetto specificato è uguale a quello dell'oggetto corrente. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary vsli:raw="Gets the name of the default event for the component this attribute is bound to.">Ottiene il nome dell'evento predefinito per il componente a cui è associato questo attributo.</summary>
      <returns vsli:raw="The name of the default event for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">Nome dell'evento predefinito per il componente a cui è associato questo attributo. Il valore predefinito è <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary vsli:raw="Specifies the default property for a component.">Specifica la proprietà predefinita per un componente.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />.</summary>
      <param name="name" vsli:raw="The name of the default property for the component this attribute is bound to.">Nome della proprietà predefinita per il componente a cui è associato questo attributo.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Consente di specificare il valore predefinito per l'attributo <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />, che è <see langword="null" />. Questo campo <see langword="static" /> è di sola lettura.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;.">Specifica se il valore dell'oggetto specificato è uguale all'oggetto <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> corrente.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Oggetto di cui va verificata l'uguaglianza di valore.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore dell'oggetto specificato è uguale a quello dell'oggetto corrente. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default property for the component this attribute is bound to.">Ottiene il nome della proprietà predefinita per il componente a cui è associato questo attributo.</summary>
      <returns vsli:raw="The name of the default property for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">Nome della proprietà predefinita per il componente a cui è associato questo attributo. Il valore predefinito è <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner&quot; /&gt; event.">Fornisce dati per l'evento <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />.</summary>
      <param name="oldDesigner" vsli:raw="The document that is losing activation.">Documento che sta per perdere l'attivazione.</param>
      <param name="newDesigner" vsli:raw="The document that is gaining activation.">Documento che sta per essere attivato.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary vsli:raw="Gets the document that is gaining activation.">Ottiene il documento che sta per essere attivato.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document gaining activation.">Oggetto <see cref="T:System.ComponentModel.Design.IDesignerHost" /> che rappresenta il documento che sta per essere attivato.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary vsli:raw="Gets the document that is losing activation.">Ottiene il documento che sta per perdere l'attivazione.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document losing activation.">Oggetto <see cref="T:System.ComponentModel.Design.IDesignerHost" /> che rappresenta il documento che sta per perdere l'attivazione.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged&quot; /&gt; event.">Rappresenta il metodo che gestirà l'evento <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origine dell'evento.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; that contains the event data.">Oggetto <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary vsli:raw="The exception that is thrown when an attempt to check out a file that is checked into a source code management program is canceled or fails.">L'eccezione che viene generata quando viene annullato o non riesce un tentativo di estrazione di un file archiviato in un programma di gestione del codice sorgente.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with no associated message or error code.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> senza alcun messaggio o codice di errore associato.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class using the specified serialization data and context.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> usando i dati di serializzazione e il contesto specificati.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">Classe <see cref="T:System.Runtime.Serialization.SerializationInfo" /> da utilizzare per la deserializzazione.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">Destinazione da utilizzare per la deserializzazione.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> con il messaggio specificato.</summary>
      <param name="message" vsli:raw="A message describing the exception.">Messaggio che descrive l'eccezione.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified detailed description and the specified exception.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> con la descrizione dettagliata e l'eccezione specificate.</summary>
      <param name="message" vsli:raw="A detailed description of the error.">Descrizione dettagliata dell'errore.</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">Riferimento all'eccezione interna che è la causa di questa eccezione.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message and error code.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> con il messaggio e il codice di errore specificati.</summary>
      <param name="message" vsli:raw="A message describing the exception.">Messaggio che descrive l'eccezione.</param>
      <param name="errorCode" vsli:raw="The error code to pass.">Codice di errore da passare.</param>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class that specifies that the check out was canceled. This field is read-only.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> in cui si specifica che l'estrazione è stata annullata. Questo campo è di sola lettura.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary vsli:raw="Represents a unique command identifier that consists of a numeric command ID and a GUID menu group identifier.">Rappresenta un identificatore di comando univoco che è costituito da un ID di comando numerico e da un identificatore GUID di gruppo di menu.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; class using the specified menu group GUID and command ID number.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.CommandID" /> utilizzando il GUID del gruppo di menu specificato e il numero di ID di comando.</summary>
      <param name="menuGroup" vsli:raw="The GUID of the group that this menu command belongs to.">GUID del gruppo a cui appartiene questo comando di menu.</param>
      <param name="commandID" vsli:raw="The numeric identifier of this menu command.">Identificatore numerico di questo comando di menu.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; instances are equal.">Determina se due istanze di <see cref="T:System.ComponentModel.Design.CommandID" /> sono uguali.</summary>
      <param name="obj" vsli:raw="The object to compare.">Oggetto da confrontare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is equivalent to this one; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto specificato è equivalente a questo; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary vsli:raw="Serves as a hash function for a particular type.">Viene usato come funzione hash per un tipo specifico.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Codice hash per l'oggetto <see cref="T:System.Object" /> corrente.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary vsli:raw="Gets the GUID of the menu group that the menu command identified by this &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; belongs to.">Ottiene il GUID del gruppo di menu a cui appartiene il comando di menu identificato da questo oggetto <see cref="T:System.ComponentModel.Design.CommandID" />.</summary>
      <returns vsli:raw="The GUID of the command group for this command.">GUID del gruppo di comando per questo comando.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary vsli:raw="Gets the numeric command ID.">Ottiene il numero di ID del comando.</summary>
      <returns vsli:raw="The command ID number.">Numero di ID del comando.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current object.">Restituisce un oggetto <see cref="T:System.String" /> che rappresenta l'oggetto corrente.</summary>
      <returns vsli:raw="A string that contains the command ID information, both the GUID and integer identifier.">Stringa che contiene le informazioni sull'ID del comando, l'identificatore GUID e l'identificatore di interi.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event. This class cannot be inherited.">Fornisce dati per l'evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />.</summary>
      <param name="component" vsli:raw="The component that was changed.">Componente che è stato modificato.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that represents the member that was changed.">Oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> che rappresenta il membro che è stato modificato.</param>
      <param name="oldValue" vsli:raw="The old value of the changed member.">Valore precedente del membro modificato.</param>
      <param name="newValue" vsli:raw="The new value of the changed member.">Nuovo valore del membro modificato.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary vsli:raw="Gets the component that was modified.">Ottiene il componente che è stato modificato.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the component that was modified.">Oggetto <see cref="T:System.Object" /> che rappresenta il componente che è stato modificato.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary vsli:raw="Gets the member that has been changed.">Ottiene il membro che è stato modificato.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that indicates the member that has been changed.">Oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> che indica il membro che è stato modificato.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary vsli:raw="Gets the new value of the changed member.">Ottiene il nuovo valore del membro modificato.</summary>
      <returns vsli:raw="The new value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">Nuovo valore del membro modificato. Questa proprietà può essere <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary vsli:raw="Gets the old value of the changed member.">Ottiene il valore precedente del membro modificato.</summary>
      <returns vsli:raw="The old value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">Valore precedente del membro modificato. Questa proprietà può essere <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">Rappresenta il metodo che gestirà un evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origine dell'evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; that contains the event data.">Oggetto <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event. This class cannot be inherited.">Fornisce dati per l'evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" />.</summary>
      <param name="component" vsli:raw="The component that is about to be changed.">Componente che sta per essere modificato.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member of the component that is about to be changed.">Oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> che indica il membro del componente che sta per essere modificato.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary vsli:raw="Gets the component that is about to be changed or the component that is the parent container of the member that is about to be changed.">Ottiene il componente che sta per essere modificato o il componente che è il contenitore padre del membro che sta per essere modificato.</summary>
      <returns vsli:raw="The component that is about to have a member changed.">Componente con un membro che sta per essere modificato.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary vsli:raw="Gets the member that is about to be changed.">Ottiene il membro che sta per essere modificato.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member that is about to be changed, if known, or &lt;see langword=&quot;null&quot; /&gt; otherwise.">Oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> che indica il membro che sta per essere modificato, se noto. In caso contrario, <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">Rappresenta il metodo che gestirà un evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origine dell'evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; event that contains the event data.">Evento <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt; events.">Fornisce dati per gli eventi <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> e <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />.</summary>
      <param name="component" vsli:raw="The component that is the source of the event.">Componente che è l'origine dell'evento.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary vsli:raw="Gets the component associated with the event.">Ottiene il componente associato all'evento.</summary>
      <returns vsli:raw="The component associated with the event.">Componente associato all'evento.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt; events raised for component-level events.">Rappresenta il metodo che gestirà gli eventi <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> e <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> generati per gli eventi a livello di componente.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origine dell'evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; that contains the event data.">Oggetto <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">Fornisce dati per l'evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />.</summary>
      <param name="component" vsli:raw="The component to be renamed.">Componente da rinominare.</param>
      <param name="oldName" vsli:raw="The old name of the component.">Nome precedente del componente.</param>
      <param name="newName" vsli:raw="The new name of the component.">Nuovo nome del componente.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary vsli:raw="Gets the component that is being renamed.">Ottiene il componente che viene rinominato.</summary>
      <returns vsli:raw="The component that is being renamed.">Componente che viene rinominato.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary vsli:raw="Gets the name of the component after the rename event.">Ottiene il nome del componente dopo l'evento di ridenominazione.</summary>
      <returns vsli:raw="The name of the component after the rename event.">Nome del componente dopo l'evento di ridenominazione.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary vsli:raw="Gets the name of the component before the rename event.">Ottiene il nome del componente prima dell'evento di ridenominazione.</summary>
      <returns vsli:raw="The previous name of the component.">Nome precedente del componente.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">Rappresenta il metodo che gestirà un evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origine dell'evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; that contains the event data.">Oggetto <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary vsli:raw="Represents a collection of designers.">Rappresenta un insieme di finestre di progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified set of designers.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.DesignerCollection" /> contenente il gruppo di finestre di progettazione specificato.</summary>
      <param name="designers" vsli:raw="A list that contains the collection of designers to add.">Elenco che contiene l'insieme di finestre di progettazione da aggiungere.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified designers.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.DesignerCollection" /> contenente le finestre di progettazione specificate.</summary>
      <param name="designers" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; objects to store.">Matrice di oggetti <see cref="T:System.ComponentModel.Design.IDesignerHost" /> da archiviare.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary vsli:raw="Gets the number of designers in the collection.">Ottiene il numero di finestre di progettazione dell'insieme.</summary>
      <returns vsli:raw="The number of designers in the collection.">Numero di finestre di progettazione dell'insieme.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">Ottiene un nuovo enumeratore per questo insieme.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">Oggetto <see cref="T:System.Collections.IEnumerator" /> che enumera l'insieme.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the designer at the specified index.">Ottiene la finestra di progettazione in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index of the designer to return.">Indice della finestra di progettazione da restituire.</param>
      <returns vsli:raw="The designer at the specified index.">Finestra di progettazione in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia gli elementi dell'insieme in un oggetto <see cref="T:System.Array" />, a partire da uno specifico indice di <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">Oggetto <see cref="T:System.Array" /> unidimensionale che rappresenta la destinazione degli elementi copiati dall'insieme. L'indicizzazione di <see cref="T:System.Array" /> deve essere in base zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Ottiene il numero di elementi contenuti nella raccolta.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">Numero di elementi contenuti nella raccolta.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Ottiene un valore che indica se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe); in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Ottiene un oggetto che può essere usato per sincronizzare l'accesso alla raccolta.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Oggetto che può essere usato per sincronizzare l'accesso alla raccolta.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">Ottiene un nuovo enumeratore per questo insieme.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">Oggetto <see cref="T:System.Collections.IEnumerator" /> che enumera l'insieme.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events.">Fornisce i dati per gli eventi <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> e <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />.</summary>
      <param name="host" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">Oggetto <see cref="T:System.ComponentModel.Design.IDesignerHost" /> del documento.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary vsli:raw="Gets the host of the document.">Ottiene l'host del documento.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">Oggetto <see cref="T:System.ComponentModel.Design.IDesignerHost" /> del documento.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events that are raised when a document is created or disposed of.">Rappresenta il metodo che gestirà gli eventi <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> e <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> che vengono generati quando un documento viene creato o eliminato.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origine dell'evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; that contains the event data.">Oggetto <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary vsli:raw="Provides a base class for getting and setting option values for a designer.">Fornisce una classe di base per ottenere e impostare i valori delle opzioni per una finestra di progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.DesignerOptionService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name and adds it to the given parent.">Crea un nuovo oggetto <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> con il nome specificato e lo aggiunge all'elemento padre indicato.</summary>
      <param name="parent" vsli:raw="The parent designer option collection. All collections have a parent except the root object collection.">Insieme di opzioni della finestra di progettazione padre. Tutti gli insiemi dispongono di un elemento padre eccetto l'insieme di oggetti radice.</param>
      <param name="name" vsli:raw="The name of this collection.">Nome dell'insieme.</param>
      <param name="value" vsli:raw="The object providing properties for this collection. Can be &lt;see langword=&quot;null&quot; /&gt; if the collection should not provide any properties.">L'oggetto che fornisce le proprietà per l'insieme. Può essere <see langword="null" /> se l'insieme non deve fornire proprietà.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name.">Nuovo oggetto <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> con il nome specificato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;parent&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="parent" /> o <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is an empty string.">Il parametro <paramref name="name" /> è una stringa vuota.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary vsli:raw="Contains a collection of designer options. This class cannot be inherited.">Contiene una raccolta di opzioni della finestra di progettazione. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">Copia l'intero insieme in un oggetto <see cref="T:System.Array" /> unidimensionale compatibile, a partire dall'indice specificato della matrice di destinazione.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the collection. The &lt;paramref name=&quot;array&quot; /&gt; must have zero-based indexing.">Oggetto <see cref="T:System.Array" /> unidimensionale che rappresenta la destinazione degli elementi copiati dall'insieme. L'indicizzazione di <paramref name="array" /> deve essere in base zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary vsli:raw="Gets the number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">Ottiene il numero degli insiemi di opzioni figlio contenuti nell'oggetto <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns vsli:raw="The number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">Numero degli insiemi di opzioni figlio contenuti nell'oggetto <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">Restituisce un'interfaccia <see cref="T:System.Collections.IEnumerator" /> che può essere utilizzata per scorrere l'insieme.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">Interfaccia <see cref="T:System.Collections.IEnumerator" /> che può essere utilizzata per scorrere l'insieme.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Returns the index of the first occurrence of a given value in a range of this collection.">Restituisce l'indice della prima occorrenza di un determinato valore in un intervallo di questo insieme.</summary>
      <param name="value" vsli:raw="The object to locate in the collection.">Oggetto da individuare nella raccolta.</param>
      <returns vsli:raw="The index of the first occurrence of value within the entire collection, if found; otherwise, the lower bound of the collection minus 1.">Indice della prima occorrenza del valore all'interno dell'intero insieme, se viene trovato; in caso contrario, il limite inferiore dell'insieme -1.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the child collection at the given index.">Ottiene l'insieme figlio in corrispondenza dell'indice indicato.</summary>
      <param name="index" vsli:raw="The zero-based index of the child collection to get.">Indice in base zero dell'insieme figlio da ottenere.</param>
      <returns vsli:raw="The child collection at the specified index.">Insieme figlio in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary vsli:raw="Gets the child collection at the given name.">Ottiene l'insieme figlio in corrispondenza del nome indicato.</summary>
      <param name="name" vsli:raw="The name of the child collection.">Nome dell'insieme figlio.</param>
      <returns vsli:raw="The child collection with the name specified by the &lt;paramref name=&quot;name&quot; /&gt; parameter, or &lt;see langword=&quot;null&quot; /&gt; if the name is not found.">Insieme figlio il cui nome è specificato nel parametro <paramref name="name" /> o valore <see langword="null" /> in mancanza del nome.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary vsli:raw="Gets the name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Ottiene il nome di <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns vsli:raw="The name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Nome di <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary vsli:raw="Gets the parent collection object.">Ottiene l'oggetto insieme padre.</summary>
      <returns vsli:raw="The parent collection object, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">Oggetto insieme padre o valore <see langword="null" /> in mancanza di padre.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary vsli:raw="Gets the collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">Ottiene l'insieme delle proprietà offerte da questo oggetto <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, unitamente a tutti i relativi figli.</summary>
      <returns vsli:raw="The collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">Insieme delle proprietà offerte da questo oggetto <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, unitamente a tutti i relativi figli.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary vsli:raw="Displays a dialog box user interface (UI) with which the user can configure the options in this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Visualizza un'interfaccia utente (UI) della finestra di dialogo mediante la quale l'utente può configurare le opzioni di questo oggetto <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box can be displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è possibile visualizzare la finestra di dialogo; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized and, therefore, thread safe.">Ottiene un valore che indica se l'accesso all'insieme è sincronizzato e, di conseguenza, thread-safe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'accesso all'insieme è sincronizzato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Ottiene un oggetto che può essere usato per sincronizzare l'accesso alla raccolta.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Oggetto che può essere usato per sincronizzare l'accesso alla raccolta.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Aggiunge un elemento a <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> da aggiungere a <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="The position into which the new element was inserted.">Posizione in cui è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">Rimuove tutti gli elementi dalla raccolta.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">Determina se la raccolta contiene un valore specifico.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Oggetto <see cref="T:System.Object" /> da individuare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <see cref="T:System.Object" /> viene trovato nell'insieme; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">Determina l'indice di un elemento specifico dell'insieme.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Oggetto <see cref="T:System.Object" /> da individuare nella raccolta.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Indice di <paramref name="value" />, se presente nell'elenco; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at the specified index.">Inserisce un elemento nella raccolta in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Indice in base zero nel quale <paramref name="value" /> deve essere inserito.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">Oggetto <see cref="T:System.Object" /> da inserire nella raccolta.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Ottiene un valore che indica se la dimensione della raccolta è fissa.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la raccolta è di dimensioni fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Ottiene un valore che indica se la raccolta è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la raccolta è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Ottiene o imposta l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">Indice in base zero dell'elemento da ottenere o impostare.</param>
      <returns vsli:raw="The element at the specified index.">Elemento in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">Rimuove la prima occorrenza di un oggetto specifico dalla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">Oggetto <see cref="T:System.Object" /> da rimuovere dalla raccolta.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the collection item at the specified index.">Rimuove l'elemento dell'insieme in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Indice in base zero dell'elemento da rimuovere.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary vsli:raw="Gets the options collection for this service.">Ottiene l'insieme di opzioni per il servizio.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; populated with available designer options.">Oggetto <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> popolato con le opzioni della finestra di progettazione disponibili.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Populates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">Popola <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <param name="options" vsli:raw="The collection to populate.">Insieme da popolare.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary vsli:raw="Shows the options dialog box for the given object.">Mostra la finestra di dialogo delle opzioni per l'oggetto indicato.</summary>
      <param name="options" vsli:raw="The options collection containing the object to be invoked.">L'insieme di opzioni che include l'oggetto da richiamare.</param>
      <param name="optionObject" vsli:raw="The actual options object.">L'oggetto opzioni effettivo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box is shown; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la finestra di dialogo viene visualizzata. In caso contrario, <see langword="false" /></returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of an option defined in this package.">Ottiene il valore di un'opzione definita nel package.</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">La pagina alla quale l'opzione è associata.</param>
      <param name="valueName" vsli:raw="The name of the option value.">Nome della valore dell'opzione.</param>
      <returns vsli:raw="The value of the option named &lt;paramref name=&quot;valueName&quot; /&gt;.">Valore dell'opzione denominato <paramref name="valueName" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="pageName" /> o <paramref name="valueName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of an option defined in this package.">Imposta il valore di un'opzione definita nel pacchetto.</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">La pagina alla quale l'opzione è associata.</param>
      <param name="valueName" vsli:raw="The name of the option value.">Nome della valore dell'opzione.</param>
      <param name="value" vsli:raw="The value of the option.">Valore dell'opzione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="pageName" /> o <paramref name="valueName" /> è <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary vsli:raw="Provides a way to group a series of design-time actions to improve performance and enable most types of changes to be undone.">Fornisce un metodo per raggruppare una serie di azioni della fase di progettazione per migliorare le prestazioni e consentire l'annullamento della maggior parte dei tipi di modifiche.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class with no description.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> senza descrizione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class using the specified transaction description.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> utilizzando la descrizione della transazione specificata.</summary>
      <param name="description" vsli:raw="A description for this transaction.">Descrizione relativa a questa transazione.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary vsli:raw="Cancels the transaction and attempts to roll back the changes made by the events of the transaction.">Annulla la transazione e prova a ripristinare le modifiche apportate dagli eventi della transazione.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary vsli:raw="Gets a value indicating whether the transaction was canceled.">Ottiene un valore che indica se la transazione è stata annullata.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was canceled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la transazione è stata annullata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary vsli:raw="Commits this transaction.">Esegue il commit di questa transazione.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary vsli:raw="Gets a value indicating whether the transaction was committed.">Ottiene un valore che indica se è stato eseguito il commit della transazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was committed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è stato eseguito il commit della transazione; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary vsli:raw="Gets a description for the transaction.">Ottiene una descrizione relativa alla transazione.</summary>
      <returns vsli:raw="A description for the transaction.">Descrizione relativa alla transazione.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; and optionally releases the managed resources.">Rilascia le risorse non gestite usate da <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> e, facoltativamente, le risorse gestite.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite, <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary vsli:raw="Releases the resources associated with this object. This override commits this transaction if it was not already committed.">Libera le risorse associate all'oggetto. L'override consente di eseguire il commit della transazione se non è già stato eseguito.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Cancel&quot; /&gt; event.">Genera l'evento <see langword="Cancel" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary vsli:raw="Performs the actual work of committing a transaction.">Esegue l'operazione effettiva di commit di una transazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;.">Rilascia tutte le risorse usate da <see cref="T:System.ComponentModel.Design.DesignerTransaction" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events.">Fornisce i dati per gli eventi <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> e <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class, using the specified value that indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> utilizzando il valore specificato che indica se la finestra di progettazione ha chiamato <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> sulla transazione.</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">Valore che indica se è stato eseguito il commit della transazione.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />.</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">Valore che indica se è stato eseguito il commit della transazione.</param>
      <param name="lastTransaction" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è l'ultima transazione da chiudere, altrimenti <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary vsli:raw="Gets a value indicating whether this is the last transaction to close.">Ottiene un valore che indica se si tratta dell'ultima transazione da chiudere.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è l'ultima transazione da chiudere, altrimenti <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary vsli:raw="Indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">Indica se la finestra di progettazione ha chiamato <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> sulla transazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la finestra di progettazione ha chiamato <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> sulla transazione. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events of a designer.">Rappresenta il metodo che gestirà gli eventi <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> e <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> di una finestra di progettazione.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origine dell'evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; that contains the event data.">Oggetto <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary vsli:raw="Represents a verb that can be invoked from a designer.">Rappresenta un verbo che può essere richiamato da una finestra di progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">Testo del comando di menu visualizzato.</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">Gestore eventi che esegue le operazioni del verbo.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">Testo del comando di menu visualizzato.</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">Gestore eventi che esegue le operazioni del verbo.</param>
      <param name="startCommandID" vsli:raw="The starting command ID for this verb. By default, the designer architecture sets aside a range of command IDs for verbs. You can override this by providing a custom command ID.">ID del comando iniziale del verbo. Per impostazione predefinita, l'architettura della finestra di progettazione imposta una serie di ID di comando per i verbi, che è possibile sostituire con ID di comando personalizzati.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary vsli:raw="Gets or sets the description of the menu item for the verb.">Ottiene o imposta la descrizione della voce di menu per il verbo.</summary>
      <returns vsli:raw="A string describing the menu item.">Stringa che descrive la voce di menu.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary vsli:raw="Gets the text description for the verb command on the menu.">Ottiene il testo descrittivo del comando verbo nel menu.</summary>
      <returns vsli:raw="A description for the verb command.">Descrizione del comando verbo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary vsli:raw="Overrides &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt;.">Esegue l'override di <see cref="M:System.Object.ToString" />.</summary>
      <returns vsli:raw="The verb's text, or an empty string (&quot;&quot;) if the text field is empty.">Testo del verbo o una stringa vuota ("") se il campo del testo è vuoto.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class using the specified array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> con la matrice specificata di oggetti <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array that indicates the verbs to contain within the collection.">Matrice <see cref="T:System.ComponentModel.Design.DesignerVerb" /> che indica i verbi contenuti nell'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to the collection.">Aggiunge l'oggetto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> specificato alla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add to the collection.">Oggetto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> da aggiungere alla raccolta.</param>
      <returns vsli:raw="The index in the collection at which the verb was added.">Indice dell'insieme in corrispondenza del quale è stato aggiunto il verbo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Adds the specified set of designer verbs to the collection.">Aggiunge il gruppo specificato di verbi di progettazione all'insieme.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects to add to the collection.">Matrice di oggetti <see cref="T:System.ComponentModel.Design.DesignerVerb" /> da aggiungere alla raccolta.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary vsli:raw="Adds the specified collection of designer verbs to the collection.">Aggiunge l'insieme specificato di verbi di progettazione all'insieme.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; to add to the collection.">Oggetto <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets a value indicating whether the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; exists in the collection.">Ottiene un valore che indica se l'oggetto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> specificato è presente nell'insieme.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to search for in the collection.">Oggetto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> da cercare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object exists in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto specificato è presente nell'insieme. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary vsli:raw="Copies the collection members to the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array beginning at the specified destination index.">Copia i membri dell'insieme nella matrice <see cref="T:System.ComponentModel.Design.DesignerVerb" /> specificata partendo dall'indice di destinazione specificato.</summary>
      <param name="array" vsli:raw="The array to copy collection members to.">Matrice in cui copiare i membri dell'insieme.</param>
      <param name="index" vsli:raw="The destination index to begin copying to.">Indice di destinazione dal quale iniziare la copia.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">Ottiene l'indice della classe <see cref="T:System.ComponentModel.Design.DesignerVerb" /> specificata.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; whose index to get in the collection.">Oggetto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> di cui ottenere l'indice nell'insieme.</param>
      <returns vsli:raw="The index of the specified object if it is found in the list; otherwise, -1.">Indice dell'oggetto specificato, se presente nell'elenco. -1 in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">Inserisce l'oggetto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> specificato in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index in the collection at which to insert the verb.">Indice dell'insieme in corrispondenza del quale inserire il verbo.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to insert in the collection.">Oggetto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> da inserire nell'insieme.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">Ottiene o imposta l'oggetto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index at which to get or set the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">Indice in corrispondenza del quale ottenere o impostare l'oggetto <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at each valid index in the collection.">Oggetto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> in corrispondenza di ciascun indice valido dell'insieme.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>Genera l'evento <see langword="Clear" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>Genera l'evento <see langword="Insert" />.</summary>
      <param name="index">Indice in corrispondenza del quale inserire un elemento.</param>
      <param name="value">Oggetto da inserire.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>Genera l'evento <see langword="Remove" />.</summary>
      <param name="index">Indice in corrispondenza del quale rimuovere l'elemento.</param>
      <param name="value">Oggetto da rimuovere.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Genera l'evento <see langword="Set" />.</summary>
      <param name="index">Indice in corrispondenza del quale impostare l'elemento.</param>
      <param name="oldValue">Oggetto precedente.</param>
      <param name="newValue">Nuovo oggetto.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Validate&quot; /&gt; event.">Genera l'evento <see langword="Validate" />.</summary>
      <param name="value" vsli:raw="The object to validate.">Oggetto da convalidare.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; from the collection.">Rimuove l'oggetto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> specificato dalla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove from the collection.">Oggetto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> da rimuovere dalla raccolta.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary vsli:raw="Represents a design-time license context that can support a license provider at design time.">Rappresenta un contesto di licenza Design-Time in grado di supportare un provider di licenze in fase di progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="Gets a saved license key.">Ottiene un codice licenza salvato.</summary>
      <param name="type" vsli:raw="The type of the license key.">Tipo del codice licenza.</param>
      <param name="resourceAssembly" vsli:raw="The assembly to get the key from.">Assembly da cui ottenere il codice.</param>
      <returns vsli:raw="The saved license key that matches the specified type.">Codice licenza salvato che corrisponde al tipo specificato.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="Sets a saved license key.">Imposta un codice licenza salvato.</summary>
      <param name="type" vsli:raw="The type of the license key.">Tipo del codice licenza.</param>
      <param name="key" vsli:raw="The license key.">Codice licenza.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary vsli:raw="Gets the license usage mode.">Ottiene la modalità di utilizzo della licenza.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; indicating the licensing mode for the context.">Oggetto <see cref="T:System.ComponentModel.LicenseUsageMode" /> che indica la modalità di licenza per il contesto.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary vsli:raw="Provides support for design-time license context serialization.">Fornisce il supporto per la serializzazione del contesto di licenza Design-Time.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary vsli:raw="Serializes the licenses within the specified design-time license context using the specified key and output stream.">Serializza le licenze all'interno del contesto di licenza Design-Time specificato utilizzando la chiave e il flusso di output specificati.</summary>
      <param name="o" vsli:raw="The stream to output to.">Flusso da utilizzare per l'output.</param>
      <param name="cryptoKey" vsli:raw="The key to use for encryption.">Chiave da utilizzare per la crittografia.</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; indicating the license context.">Oggetto <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> che indica il contesto di licenza.</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary vsli:raw="Defines identifiers that indicate information about the context in which a request for Help information originated.">Definisce gli identificatori che specificano informazioni sul contesto in cui ha avuto origine una richiesta di informazioni della Guida.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary vsli:raw="A general context.">Un contesto generale.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary vsli:raw="A selection.">Una selezione.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary vsli:raw="A tool window selection.">Una selezione della finestra degli strumenti.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary vsli:raw="A window.">Una finestra.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary vsli:raw="Specifies the context keyword for a class or member. This class cannot be inherited.">Specifica la parola chiave di contesto per una classe o un membro. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
      <param name="keyword" vsli:raw="The Help keyword value.">Valore della parola chiave della Guida.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;keyword&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyword" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class from the given type.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> per il tipo indicato.</summary>
      <param name="t" vsli:raw="The type from which the Help keyword will be taken.">Tipo dal quale viene tratta la parola chiave della Guida.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> è <see langword="null" />.</exception>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;. This field is read-only.">Rappresenta il valore predefinito dell'attributo <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />. Questo campo è di sola lettura.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; instances are equal.">Determina se due istanze di <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> sono uguali.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> da confrontare con l'oggetto <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> specificato è uguale all'oggetto <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> corrente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">Codice hash per l'oggetto <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> corrente.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary vsli:raw="Gets the Help keyword supplied by this attribute.">Ottiene la parola chiave della Guida fornita da questo attributo.</summary>
      <returns vsli:raw="The Help keyword supplied by this attribute.">Parola chiave della Guida fornita da questo attributo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines whether the Help keyword is &lt;see langword=&quot;null&quot; /&gt;.">Determina se la parola chiave della Guida è <see langword="null" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the Help keyword is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la parola chiave della Guida è <see langword="null" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary vsli:raw="Defines identifiers that indicate the type of a Help keyword.">Definisce gli identificatori che specificano il tipo di una parola chiave della Guida.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary vsli:raw="A keyword that F1 was pressed to request help about.">Una parola chiave per la quale sono state richieste le informazioni della Guida premendo F1.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary vsli:raw="A filter keyword.">Una parola chiave del filtro.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary vsli:raw="A general keyword.">Una parola chiave generale.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary vsli:raw="Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; or &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">Fornisce un'interfaccia per aggiungere e rimuovere i gestori eventi per eventi che aggiungono, modificano, rimuovono o rinominano componenti e fornisce metodi per generare un evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> o <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary vsli:raw="Occurs when a component has been added.">Viene generato quando è stato aggiunto un componente.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary vsli:raw="Occurs when a component is in the process of being added.">Viene generato quando è in corso l'aggiunta di un componente.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary vsli:raw="Occurs when a component has been changed.">Viene generato quando è stato modificato un componente.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary vsli:raw="Occurs when a component is in the process of being changed.">Viene generato quando un componente è in corso di modifica.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary vsli:raw="Occurs when a component has been removed.">Viene generato quando è stato rimosso un componente.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary vsli:raw="Occurs when a component is in the process of being removed.">Viene generato quando un componente è in corso di rimozione.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary vsli:raw="Occurs when a component is renamed.">Viene generato quando al componente viene assegnato un nome diverso.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Announces to the component change service that a particular component has changed.">Notifica al servizio di modifica dei componenti che un particolare componente è stato modificato.</summary>
      <param name="component" vsli:raw="The component that has changed.">Componente modificato.</param>
      <param name="member" vsli:raw="The member that has changed. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">Membro modificato. Ha valore <see langword="null" /> se la modifica non riguarda un solo membro.</param>
      <param name="oldValue" vsli:raw="The old value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">Valore precedente del membro. È valido soltanto se il membro non ha valore <see langword="null" />.</param>
      <param name="newValue" vsli:raw="The new value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">Nuovo valore del membro. È valido soltanto se il membro non ha valore <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Announces to the component change service that a particular component is changing.">Notifica al servizio di modifica dei componenti che un particolare componente è in fase di modifica.</summary>
      <param name="component" vsli:raw="The component that is about to change.">Componente che sta per essere modificato.</param>
      <param name="member" vsli:raw="The member that is changing. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">Membro che sta per essere modificato. Ha valore <see langword="null" /> se la modifica non riguarda un solo membro.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary vsli:raw="Enables enumeration of components at design time.">Attiva l'enumerazione di componenti in fase di progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary vsli:raw="Gets the list of available component types.">Ottiene l'elenco dei tipi di componenti disponibili.</summary>
      <param name="designerHost" vsli:raw="The designer host providing design-time services. Can be &lt;see langword=&quot;null&quot; /&gt;.">Host di progettazione che fornisce servizi in fase di progettazione. Può essere <see langword="null" />.</param>
      <param name="baseType" vsli:raw="The base type specifying the components to retrieve. Can be &lt;see langword=&quot;null&quot; /&gt;.">Tipo base che specifica i componenti da recuperare. Può essere <see langword="null" />.</param>
      <returns vsli:raw="The list of available component types.">Elenco dei tipi di componenti disponibili.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary vsli:raw="Provides a set of recommended default values during component creation.">Fornisce un gruppo di valori predefiniti consigliati durante la creazione dei componenti.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Restores an instance of a component to its default state.">Ripristina lo stato predefinito di un'istanza di un componente.</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to reset the component's state.">Dizionario dei valori di proprietà predefiniti, ossia coppie nome/valore, con i quali reimpostare lo stato del componente.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Initializes a new component using a set of recommended values.">Inizializza un nuovo componente utilizzando un gruppo di valori consigliati.</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to initialize the component's state.">Dizionario dei valori di proprietà predefiniti, ossia coppie nome/valore, con i quali inizializzare lo stato del componente.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary vsli:raw="Provides the basic framework for building a custom designer.">Fornisce il framework di base per la compilazione di una finestra di progettazione personalizzata.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary vsli:raw="Gets the base component that this designer is designing.">Ottiene il componente di base in fase di progettazione nella finestra di progettazione.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; indicating the base component that this designer is designing.">Oggetto <see cref="T:System.ComponentModel.IComponent" /> che indica il componente di base in fase di progettazione nella finestra di progettazione.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary vsli:raw="Performs the default action for this designer.">Esegue l'azione predefinita per questa finestra di progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes the designer with the specified component.">Inizializza la finestra di progettazione con il componente specificato.</summary>
      <param name="component" vsli:raw="The component to associate with this designer.">Componente da associare alla finestra di progettazione.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary vsli:raw="Gets a collection of the design-time verbs supported by the designer.">Ottiene un insieme di verbi della fase di progettazione supportati dalla finestra di progettazione.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the verbs supported by the designer, or &lt;see langword=&quot;null&quot; /&gt; if the component has no verbs.">Oggetto <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> che contiene i verbi supportati dalla finestra di progettazione oppure <see langword="null" /> se il componente non contiene verbi.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary vsli:raw="Provides event notifications when root designers are added and removed, when a selected component changes, and when the current root designer changes.">Fornisce notifiche di eventi in caso di rimozione o aggiunta di finestre di progettazione di primo livello, di modifiche del componente selezionato e di modifiche della finestra di progettazione di primo livello.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary vsli:raw="Gets the root designer for the currently active document.">Ottiene la finestra di progettazione di primo livello per il documento correntemente attivo.</summary>
      <returns vsli:raw="The currently active document, or &lt;see langword=&quot;null&quot; /&gt; if there is no active document.">Documento correntemente attivo oppure <see langword="null" /> se non è attivo alcun documento.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary vsli:raw="Occurs when the current root designer changes.">Viene generato quando la finestra di progettazione di primo livello corrente viene modificata.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary vsli:raw="Occurs when a root designer is created.">Viene generato quando viene creata una finestra di progettazione di primo livello.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary vsli:raw="Occurs when a root designer for a document is disposed.">Viene generato quando viene eliminata una finestra di progettazione di primo livello relativa a un documento.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary vsli:raw="Gets a collection of root designers for design documents that are currently active in the development environment.">Ottiene un insieme di finestre di progettazione di primo livello per i documenti di progettazione correntemente attivi nell'ambiente di sviluppo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; containing the root designers that have been created and not yet disposed.">
        <see cref="T:System.ComponentModel.Design.DesignerCollection" /> che contiene le finestre di progettazione di primo livello create e non ancora eliminate.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary vsli:raw="Occurs when the current design-view selection changes.">Si verifica quando cambia la selezione corrente della visualizzazione Progettazione.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary vsli:raw="Provides an interface that enables a designer to access and filter the dictionaries of a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that stores the property, attribute, and event descriptors that a component designer can expose to the design-time environment.">Fornisce un'interfaccia che permette a una finestra di progettazione di accedere e filtrare i dizionari di un oggetto <see cref="T:System.ComponentModel.TypeDescriptor" /> che memorizza i descrittori delle proprietà, degli attributi e degli eventi che una finestra di progettazione dei componenti può esporre all'ambiente in fase di progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Quando viene sottoposto a override in una classe derivata, consente di modificare o rimuovere, mediante una finestra di progettazione, elementi dell'insieme di attributi esposti tramite un oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">Oggetti <see cref="T:System.Attribute" /> relativi alla classe del componente. Le chiavi presenti nel dizionario degli attributi sono i valori <see cref="P:System.Attribute.TypeId" /> degli attributi.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Quando viene sottoposto a override in una classe derivata, consente a una finestra di progettazione di modificare o rimuovere elementi dall'insieme degli eventi esposti tramite un oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">Oggetti <see cref="T:System.ComponentModel.EventDescriptor" /> che rappresentano gli eventi della classe del componente. Le chiavi presenti nel dizionario degli eventi sono i nomi degli eventi.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Quando viene sottoposto a override in una classe derivata, consente a una finestra di progettazione di modificare o rimuovere elementi nell'insieme delle proprietà esposte tramite un oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">Oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> che rappresentano le proprietà della classe del componente. Le chiavi presenti nel dizionario delle proprietà sono i nomi delle proprietà.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Quando viene sottoposto a override in una classe derivata, consente di aggiungere, mediante una finestra di progettazione, elementi all'insieme di attributi esposti tramite un oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">Oggetti <see cref="T:System.Attribute" /> relativi alla classe del componente. Le chiavi presenti nel dizionario degli attributi sono i valori <see cref="P:System.Attribute.TypeId" /> degli attributi.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Quando viene sottoposto a override in una classe derivata, consente di aggiungere elementi, mediante la finestra di progettazione, all'insieme di eventi esposti tramite un oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">Oggetti <see cref="T:System.ComponentModel.EventDescriptor" /> che rappresentano gli eventi della classe del componente. Le chiavi presenti nel dizionario degli eventi sono i nomi degli eventi.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Quando viene sottoposto a override in una classe derivata, consente di aggiungere elementi, mediante la finestra di progettazione, all'insieme di proprietà esposte tramite un oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">Oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> che rappresentano le proprietà della classe del componente. Le chiavi presenti nel dizionario delle proprietà sono i nomi delle proprietà.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary vsli:raw="Provides an interface for managing designer transactions and components.">Fornisce un'interfaccia per la gestione delle transazioni e dei componenti della finestra di progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary vsli:raw="Activates the designer that this host is hosting.">Attiva la finestra di progettazione ospitata dall'host.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary vsli:raw="Occurs when this designer is activated.">Viene generato quando viene attivata la finestra di progettazione.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary vsli:raw="Gets the container for this designer host.">Ottiene il contenitore di questo host di progettazione.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; for this host.">Oggetto <see cref="T:System.ComponentModel.IContainer" /> per questo host.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary vsli:raw="Creates a component of the specified type and adds it to the design document.">Crea un componente del tipo specificato e lo aggiunge al documento di progettazione.</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">Tipo di componente da creare.</param>
      <returns vsli:raw="The newly created component.">Componente appena creato.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary vsli:raw="Creates a component of the specified type and name, and adds it to the design document.">Crea un componente del tipo e del nome specificati e lo aggiunge al documento di progettazione.</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">Tipo di componente da creare.</param>
      <param name="name" vsli:raw="The name for the component.">Nome del componente.</param>
      <returns vsli:raw="The newly created component.">Componente appena creato.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality.">Crea un oggetto <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> in grado di incapsulare sequenze di eventi al fine di migliorare le prestazioni e consentire funzioni di annullamento e di ripristino.</summary>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you complete the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">Nuova istanza di <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. Al termine delle operazioni della transazione, si dovrebbe chiamare <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> su questo oggetto.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality, using the specified transaction description.">Crea un oggetto <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> in grado di incapsulare sequenze di eventi al fine di migliorare le prestazioni e consentire funzioni di annullamento e di ripristino, utilizzando la descrizione della transazione specificata.</summary>
      <param name="description" vsli:raw="A title or description for the newly created transaction.">Titolo o descrizione per la transazione appena creata.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you have completed the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">Nuovo oggetto <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. Al termine delle operazioni della transazione, si dovrebbe chiamare <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> su questo oggetto.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary vsli:raw="Occurs when this designer is deactivated.">Viene generato quando viene disattivata la finestra di progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary vsli:raw="Destroys the specified component and removes it from the designer container.">Distrugge il componente specificato e lo rimuove dal contenitore di progettazione.</summary>
      <param name="component" vsli:raw="The component to destroy.">Componente da distruggere.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the designer instance that contains the specified component.">Ottiene l'istanza di progettazione contenente il componente specificato.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to retrieve the designer for.">Oggetto <see cref="T:System.ComponentModel.IComponent" /> per cui recuperare la finestra di progettazione.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if there is no designer for the specified component.">Oggetto <see cref="T:System.ComponentModel.Design.IDesigner" /> oppure <see langword="null" /> se non esiste alcuna finestra di progettazione per il componente specificato.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary vsli:raw="Gets an instance of the specified, fully qualified type name.">Ottiene un'istanza del nome completo del tipo specificato.</summary>
      <param name="typeName" vsli:raw="The name of the type to load.">Nome del tipo da caricare.</param>
      <returns vsli:raw="The type object for the specified type name, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be found.">Oggetto tipo per il nome del tipo specificato oppure <see langword="null" /> se è impossibile trovare il tipo.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently in a transaction.">Ottiene un valore che indica se l'host di progettazione si trova attualmente in una transazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a transaction is in progress; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è in corso una transazione. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary vsli:raw="Occurs when this designer completes loading its document.">Viene generato quando la finestra di progettazione completa il caricamento del documento.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently loading the document.">Ottiene un valore che indica se al momento l'host di progettazione sta caricando il documento.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer host is currently loading the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'host di progettazione sta attualmente caricando il documento. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary vsli:raw="Gets the instance of the base class used as the root component for the current design.">Ottiene l'istanza della classe di base utilizzata come componente di primo livello per la progettazione corrente.</summary>
      <returns vsli:raw="The instance of the root component class.">Istanza della classe del componente di primo livello.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary vsli:raw="Gets the fully qualified name of the class being designed.">Ottiene il nome completo della classe che si sta progettando.</summary>
      <returns vsli:raw="The fully qualified name of the base component class.">Nome completo della classe del componente di base.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; event.">Aggiunge un gestore eventi per l'evento <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; event.">Aggiunge un gestore eventi per l'evento <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary vsli:raw="Gets the description of the current transaction.">Ottiene la descrizione della transazione corrente.</summary>
      <returns vsli:raw="A description of the current transaction.">Descrizione della transazione corrente.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpened&quot; /&gt; event.">Aggiunge un gestore eventi per l'evento <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpening&quot; /&gt; event.">Aggiunge un gestore eventi per l'evento <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary vsli:raw="Specifies methods for the designer host to report on the state of transactions.">Specifica i metodi per consentire all'host della finestra di progettazione di segnalare lo stato delle transazioni.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is closing a transaction.">Ottiene un valore che indica se l'host della finestra di progettazione sta chiudendo una transazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is closing a transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la finestra di progettazione sta chiudendo una transazione. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary vsli:raw="Provides access to the designer options located on the Tools menu under the Options command in the Visual Studio development environment.">Offre l'accesso alle opzioni della finestra di progettazione presenti nel menu Strumenti al comando Opzioni dell'ambiente di sviluppo di Visual Studio.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of the specified Windows Forms Designer option.">Ottiene il valore dell'opzione di Progettazione Windows Forms specificata.</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">Nome della pagina che definisce l'opzione.</param>
      <param name="valueName" vsli:raw="The name of the option property.">Nome della proprietà dell'opzione.</param>
      <returns vsli:raw="The value of the specified option.">Valore dell'opzione specificata.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of the specified Windows Forms Designer option.">Imposta il valore dell'opzione di Progettazione Windows Forms specificata.</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">Nome della pagina che definisce l'opzione.</param>
      <param name="valueName" vsli:raw="The name of the option property.">Nome della proprietà dell'opzione.</param>
      <param name="value" vsli:raw="The new value.">Nuovo valore.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary vsli:raw="Provides a basic, component site-specific, key-value pair dictionary through a service that a designer can use to store user-defined data.">Fornisce un dizionario di base a coppia chiave-valore specifico del sito del componente mediante un servizio che può essere utilizzato in una finestra di progettazione per archiviare dati definiti dall'utente.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary vsli:raw="Gets the key corresponding to the specified value.">Ottiene la chiave corrispondente al valore specificato.</summary>
      <param name="value" vsli:raw="The value to look up in the dictionary.">Valore da cercare nel dizionario.</param>
      <returns vsli:raw="The associated key, or &lt;see langword=&quot;null&quot; /&gt; if no key exists.">Chiave associata oppure <see langword="null" /> se non esiste alcuna chiave.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary vsli:raw="Gets the value corresponding to the specified key.">Ottiene il valore corrispondente alla chiave specificata.</summary>
      <param name="key" vsli:raw="The key to look up the value for.">Chiave di cui cercare il valore.</param>
      <returns vsli:raw="The associated value, or &lt;see langword=&quot;null&quot; /&gt; if no value exists.">Valore associato oppure <see langword="null" /> se non esiste alcun valore.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary vsli:raw="Sets the specified key-value pair.">Imposta la coppia chiave-valore specificata.</summary>
      <param name="key" vsli:raw="An object to use as the key to associate the value with.">Oggetto da utilizzare come chiave da associare al valore.</param>
      <param name="value" vsli:raw="The value to store.">Valore da memorizzare.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary vsli:raw="Provides a service for registering event handlers for component events.">Fornisce un servizio per la registrazione dei gestori eventi per gli eventi del componente.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Creates a unique name for an event-handler method for the specified component and event.">Crea un nome univoco per un metodo di gestione degli eventi per il componente e l'evento specificati.</summary>
      <param name="component" vsli:raw="The component instance the event is connected to.">Istanza del componente alla quale è collegato l'evento.</param>
      <param name="e" vsli:raw="The event to create a name for.">Evento per il quale creare un nome.</param>
      <returns vsli:raw="The recommended name for the event-handler method for this event.">Nome consigliato per il metodo di gestione di questo evento.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Gets a collection of event-handler methods that have a method signature compatible with the specified event.">Ottiene un insieme di metodi di gestione degli eventi dotati di firme di metodo compatibili con l'evento specificato.</summary>
      <param name="e" vsli:raw="The event to get the compatible event-handler methods for.">Evento per il quale recuperare i metodi di gestione degli eventi compatibili.</param>
      <returns vsli:raw="A collection of strings.">Insieme di stringhe.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the specified property descriptor represents, if it represents an event.">Ottiene un oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> per l'evento rappresentato dal descrittore di proprietà specificato, se la proprietà rappresenta un evento.</summary>
      <param name="property" vsli:raw="The property that represents an event.">Proprietà che rappresenta un evento.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the property represents, or &lt;see langword=&quot;null&quot; /&gt; if the property does not represent an event.">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> per l'evento rappresentato dalla proprietà oppure <see langword="null" /> se la proprietà non rappresenta un evento.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary vsli:raw="Converts a set of event descriptors to a set of property descriptors.">Converte un gruppo di descrittori di evento in un gruppo di descrittori di proprietà.</summary>
      <param name="events" vsli:raw="The events to convert to properties.">Eventi da convertire in proprietà.</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that describe the event set.">Matrice di oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> che descrivono l'insieme di eventi.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Converts a single event descriptor to a property descriptor.">Converte un singolo descrittore di evento in un descrittore di proprietà.</summary>
      <param name="e" vsli:raw="The event to convert.">Evento da convertire.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the event.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che descrive l'evento.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary vsli:raw="Displays the user code for the designer.">Visualizza il codice utente per la finestra di progettazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il codice viene visualizzato. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Displays the user code for the specified event.">Visualizza il codice utente per l'evento specificato.</summary>
      <param name="component" vsli:raw="The component that the event is connected to.">Componente al quale è collegato l'evento.</param>
      <param name="e" vsli:raw="The event to display.">Evento da visualizzare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il codice viene visualizzato. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary vsli:raw="Displays the user code for the designer at the specified line.">Visualizza il codice utente per la finestra di progettazione corrispondente alla riga specificata.</summary>
      <param name="lineNumber" vsli:raw="The line number to place the caret on.">Numero della riga su cui posizionare il carattere di accento circonflesso.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il codice viene visualizzato. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary vsli:raw="Provides an interface that can list extender providers.">Fornisce un'interfaccia in grado di elencare i provider di estensione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary vsli:raw="Gets the set of extender providers for the component.">Ottiene il gruppo di provider di estensione per il componente.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that lists the active extender providers. If there are no providers, an empty array is returned.">Matrice di tipo <see cref="T:System.ComponentModel.IExtenderProvider" /> che elenca i provider di estensione attivi. Se non esiste alcun provider, verrà restituita una matrice vuota.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary vsli:raw="Provides an interface for adding and removing extender providers at design time.">Fornisce un'interfaccia per l'aggiunta e la rimozione dei provider di estensione in fase di progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Adds the specified extender provider.">Aggiunge il provider di estensione specificato.</summary>
      <param name="provider" vsli:raw="The extender provider to add.">Provider di estensione da aggiungere.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Removes the specified extender provider.">Rimuove il provider di estensione specificato.</summary>
      <param name="provider" vsli:raw="The extender provider to remove.">Provider di estensione da rimuovere.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary vsli:raw="Provides methods for showing Help topics and adding and removing Help keywords at design time.">Fornisce metodi per visualizzare la Guida e aggiungere e rimuovere parole chiave della Guida in fase di progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary vsli:raw="Adds a context attribute to the document.">Aggiunge un attributo di contesto al documento.</summary>
      <param name="name" vsli:raw="The name of the attribute to add.">Nome dell'attributo da aggiungere.</param>
      <param name="value" vsli:raw="The value of the attribute.">Valore dell'attributo.</param>
      <param name="keywordType" vsli:raw="The type of the keyword, from the enumeration &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordType&quot; /&gt;.">Tipo di parola chiave, dall'enumerazione <see cref="T:System.ComponentModel.Design.HelpKeywordType" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary vsli:raw="Removes all existing context attributes from the document.">Rimuove dal documento tutti gli attributi di contesto esistenti.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary vsli:raw="Creates a local &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to manage subcontexts.">Crea un oggetto <see cref="T:System.ComponentModel.Design.IHelpService" /> locale per gestire i sottocontesti.</summary>
      <param name="contextType" vsli:raw="The priority type of the subcontext to add.">Tipo di priorità del sottocontesto da aggiungere.</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.Design.IHelpService" /> appena creato.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary vsli:raw="Removes a previously added context attribute.">Rimuove un attributo di contesto aggiunto precedentemente.</summary>
      <param name="name" vsli:raw="The name of the attribute to remove.">Nome dell'attributo da rimuovere.</param>
      <param name="value" vsli:raw="The value of the attribute to remove.">Valore dell'attributo da rimuovere.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary vsli:raw="Removes a context created with &lt;see cref=&quot;M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)&quot; /&gt;.">Rimuove un contesto creato con <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" />.</summary>
      <param name="localContext" vsli:raw="The local context &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to remove.">Oggetto <see cref="T:System.ComponentModel.Design.IHelpService" /> del contesto locale da rimuovere.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified keyword.">Mostra l'argomento della Guida corrispondente alla parola chiave specificata.</summary>
      <param name="helpKeyword" vsli:raw="The keyword of the Help topic to display.">Parola chiave dell'argomento della Guida da visualizzare.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified URL.">Mostra l'argomento della Guida corrispondente all'URL specificato.</summary>
      <param name="helpUrl" vsli:raw="The URL of the Help topic to display.">URL dell'argomento della Guida da visualizzare.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary vsli:raw="Provides methods for identifying the components of a component.">Fornisce metodi per l'identificazione dei componenti di un componente.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary vsli:raw="Searches the specified component for fields that implement the &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; interface and adds each to the specified container, storing the inheritance level of each which can be retrieved using the &lt;see cref=&quot;M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)&quot; /&gt; method.">Cerca nel componente specificato i campi che implementano l'interfaccia <see cref="T:System.ComponentModel.IComponent" /> e aggiunge ognuno di essi al contenitore specificato, archiviando il livello di ereditarietà relativo che può essere recuperato tramite il metodo <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" />.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to search. Searching begins with this component.">Oggetto <see cref="T:System.ComponentModel.IComponent" /> da cercare. La ricerca inizia con questo componente.</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to add components to.">Oggetto <see cref="T:System.ComponentModel.IContainer" /> a cui aggiungere componenti.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the inheritance attribute for the specified component.">Ottiene l'attributo di ereditarietà per il componente specificato.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for which to retrieve the inheritance attribute.">Oggetto <see cref="T:System.ComponentModel.IComponent" /> per il quale recuperare l'attributo di ereditarietà.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; that describes the level of inheritance of the specified component.">Istanza di <see cref="T:System.ComponentModel.InheritanceAttribute" /> che descrive il livello di ereditarietà del componente specificato.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary vsli:raw="Provides methods to manage the global designer verbs and menu commands available in design mode, and to show some types of shortcut menus.">Fornisce metodi per gestire i verbi di progettazione globali e i comandi di menu disponibili in modalità progettazione e per visualizzare alcuni tipi di menu di scelta rapida.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Adds the specified standard menu command to the menu.">Aggiunge al menu il comando di menu standard specificato.</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to add.">Oggetto <see cref="T:System.ComponentModel.Design.MenuCommand" /> da aggiungere.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; is already present on a menu.">L'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> dell'oggetto <see cref="T:System.ComponentModel.Design.MenuCommand" /> specificato è già presente in un menu.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified designer verb to the set of global designer verbs.">Aggiunge il verbo di progettazione specificato al gruppo di verbi di progettazione globali.</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add.">Oggetto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> da aggiungere.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Searches for the specified command ID and returns the menu command associated with it.">Cerca l'ID del comando specificato e restituisce il comando di menu ad esso associato.</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; to search for.">Oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> da cercare.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; associated with the command ID, or &lt;see langword=&quot;null&quot; /&gt; if no command is found.">
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> associato all'ID di comando o <see langword="null" /> se non viene trovato alcun comando.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Invokes a menu or designer verb command matching the specified command ID.">Richiama un menu o un comando di verbo di progettazione corrispondente all'ID di comando specificato.</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the command to search for and execute.">
        <see cref="T:System.ComponentModel.Design.CommandID" /> del comando da cercare ed eseguire.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the command was found and invoked successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il comando è stato trovato e richiamato correttamente. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Removes the specified standard menu command from the menu.">Rimuove dal menu il comando di menu standard specificato.</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to remove.">Oggetto <see cref="T:System.ComponentModel.Design.MenuCommand" /> da rimuovere.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified designer verb from the collection of global designer verbs.">Rimuove il verbo di progettazione specificato dall'insieme dei verbi di progettazione globali.</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove.">Oggetto <see cref="T:System.ComponentModel.Design.DesignerVerb" /> da rimuovere.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary vsli:raw="Shows the specified shortcut menu at the specified location.">Visualizza il menu di scelta rapida specificato nella posizione indicata.</summary>
      <param name="menuID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the shortcut menu to show.">
        <see cref="T:System.ComponentModel.Design.CommandID" /> per il menu di scelta rapida da visualizzare.</param>
      <param name="x" vsli:raw="The x-coordinate at which to display the menu, in screen coordinates.">Coordinata x in corrispondenza della quale visualizzare il menu, secondo le coordinate dello schermo.</param>
      <param name="y" vsli:raw="The y-coordinate at which to display the menu, in screen coordinates.">Coordinata y in corrispondenza della quale visualizzare il menu, secondo le coordinate dello schermo.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary vsli:raw="Gets a collection of the designer verbs that are currently available.">Ottiene un insieme dei verbi di progettazione attualmente disponibili.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the designer verbs that are currently available.">Oggetto <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> che contiene i verbi di progettazione attualmente disponibili.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary vsli:raw="Provides an interface for obtaining references to objects within a project by name or type, obtaining the name of a specified object, and for locating the parent of a specified object within a designer project.">Fornisce un'interfaccia per ottenere riferimenti a oggetti di un progetto in base al nome o al tipo, ottenendo il nome di un oggetto specificato, e individuare l'elemento padre di un oggetto specificato in un progetto in modalità progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary vsli:raw="Gets the component that contains the specified component.">Ottiene il componente che contiene il componente specificato.</summary>
      <param name="reference" vsli:raw="The object to retrieve the parent component for.">Oggetto per il quale recuperare il componente padre.</param>
      <returns vsli:raw="The base &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that contains the specified object, or &lt;see langword=&quot;null&quot; /&gt; if no parent component exists.">Oggetto <see cref="T:System.ComponentModel.IComponent" /> di base che contiene l'oggetto specificato o <see langword="null" /> se non esiste nessun componente padre.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">Ottiene il nome del componente specificato.</summary>
      <param name="reference" vsli:raw="The object to return the name of.">Oggetto di cui restituire il nome.</param>
      <returns vsli:raw="The name of the object referenced, or &lt;see langword=&quot;null&quot; /&gt; if the object reference is not valid.">Nome dell'oggetto a cui si fa riferimento oppure <see langword="null" /> se il riferimento all'oggetto non è valido.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary vsli:raw="Gets a reference to the component whose name matches the specified name.">Ottiene un riferimento al componente il cui nome corrisponde al nome specificato.</summary>
      <param name="name" vsli:raw="The name of the component to return a reference to.">Nome del componente a cui restituire un riferimento.</param>
      <returns vsli:raw="An object the specified name refers to, or &lt;see langword=&quot;null&quot; /&gt; if no reference is found.">Oggetto a cui fa riferimento il nome specificato oppure <see langword="null" /> se non è stato trovato alcun riferimento.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary vsli:raw="Gets all available references to project components.">Ottiene tutti i riferimenti disponibili ai componenti del progetto.</summary>
      <returns vsli:raw="An array of all objects with references available to the &lt;see cref=&quot;T:System.ComponentModel.Design.IReferenceService&quot; /&gt;.">Matrice di tutti gli oggetti con riferimenti disponibili all'oggetto <see cref="T:System.ComponentModel.Design.IReferenceService" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary vsli:raw="Gets all available references to components of the specified type.">Ottiene tutti i riferimenti disponibili ai componenti del tipo specificato.</summary>
      <param name="baseType" vsli:raw="The type of object to return references to instances of.">Tipo di oggetto di cui devono essere restituiti i riferimenti a istanze.</param>
      <returns vsli:raw="An array of all available objects of the specified type.">Matrice di tutti gli oggetti disponibili del tipo specificato.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary vsli:raw="Provides an interface for designers to access resource readers and writers for specific &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; resource types.">Fornisce un'interfaccia per le finestre di progettazione per accedere a visualizzatori e writer di risorse relativi a tipi di risorse <see cref="T:System.Globalization.CultureInfo" /> specifici.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource reader for the specified culture and returns it.">Individua e restituisce il lettore di risorse per le impostazioni cultura specificate.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to retrieve a resource reader.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> della risorsa per la quale recuperare un lettore di risorse.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceReader&quot; /&gt; interface that contains the resources for the culture, or &lt;see langword=&quot;null&quot; /&gt; if no resources for the culture exist.">Interfaccia <see cref="T:System.Resources.IResourceReader" /> che contiene le risorse per le impostazioni cultura oppure <see langword="null" /> se non esiste alcuna risorsa per le impostazioni cultura.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource writer for the specified culture and returns it.">Individua e restituisce il writer di risorse per le impostazioni cultura specificate.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to create a resource writer.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> della risorsa per la quale creare un writer di risorse.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceWriter&quot; /&gt; interface for the specified culture.">Interfaccia <see cref="T:System.Resources.IResourceWriter" /> per le impostazioni cultura specificate.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary vsli:raw="Provides support for root-level designer view technologies.">Fornisce supporto per le tecnologie di visualizzazione della finestra di progettazione a livello radice.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary vsli:raw="Gets a view object for the specified view technology.">Ottiene un oggetto visualizzazione per la tecnologia di visualizzazione specificata.</summary>
      <param name="technology" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; that indicates a particular view technology.">Oggetto <see cref="T:System.ComponentModel.Design.ViewTechnology" /> che indica una determinata tecnologia di visualizzazione.</param>
      <returns vsli:raw="An object that represents the view for this designer.">Oggetto che rappresenta la visualizzazione per la finestra di progettazione.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified view technology is not supported or does not exist.">La tecnologia di visualizzazione specificata non è supportata o non esiste.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary vsli:raw="Gets the set of technologies that this designer can support for its display.">Ottiene il gruppo di tecnologie che questa finestra di progettazione è in grado di supportare per la visualizzazione.</summary>
      <returns vsli:raw="An array of supported &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; values.">Matrice di valori <see cref="T:System.ComponentModel.Design.ViewTechnology" /> supportati.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary vsli:raw="Provides an interface for a designer to select components.">Fornisce a una finestra di progettazione un'interfaccia per la selezione di componenti.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary vsli:raw="Gets a value indicating whether the specified component is currently selected.">Ottiene un valore che indica se il componente specificato è correntemente selezionato.</summary>
      <param name="component" vsli:raw="The component to test.">Componente da verificare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is part of the user's current selection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il componente fa parte della selezione dell'interfaccia utente. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary vsli:raw="Gets a collection of components that are currently selected.">Ottiene un insieme di componenti correntemente selezionati.</summary>
      <returns vsli:raw="A collection that represents the current set of components that are selected.">Insieme che rappresenta i componenti correntemente selezionati.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary vsli:raw="Gets the object that is currently the primary selected object.">Ottiene l'oggetto principale correntemente selezionato.</summary>
      <returns vsli:raw="The object that is currently the primary selected object.">Oggetto principale correntemente selezionato.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary vsli:raw="Occurs when the current selection changes.">Si verifica quando cambia la selezione corrente.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary vsli:raw="Occurs when the current selection is about to change.">Viene generato quando sta per cambiare la selezione corrente.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary vsli:raw="Gets the count of selected objects.">Ottiene il numero di oggetti selezionati.</summary>
      <returns vsli:raw="The number of selected objects.">Numero di oggetti selezionati.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary vsli:raw="Selects the specified collection of components.">Seleziona l'insieme specificato di componenti.</summary>
      <param name="components" vsli:raw="The collection of components to select.">Insieme di componenti da selezionare.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary vsli:raw="Selects the components from within the specified collection of components that match the specified selection type.">Seleziona i componenti all'interno dell'insieme specificato che corrispondono al tipo di selezione specificato.</summary>
      <param name="components" vsli:raw="The collection of components to select.">Insieme di componenti da selezionare.</param>
      <param name="selectionType" vsli:raw="A value from the &lt;see cref=&quot;T:System.ComponentModel.Design.SelectionTypes&quot; /&gt; enumeration. The default is &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;.">Valore ricavato dall'enumerazione <see cref="T:System.ComponentModel.Design.SelectionTypes" />. Il valore predefinito è <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary vsli:raw="Provides a container for services.">Fornisce un contenitore dei servizi.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">Aggiunge il servizio specificato al contenitore dei servizi.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Tipo di servizio da aggiungere.</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">Oggetto callback che viene utilizzato per creare il servizio. Consente di dichiarare un servizio come disponibile ma ritarda la creazione dell'oggetto fino a quando il servizio non verrà richiesto.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to parent service containers.">Aggiunge il servizio specificato al contenitore dei servizi e facoltativamente promuove il servizio ai contenitori dei servizi padre.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Tipo di servizio da aggiungere.</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">Oggetto callback che viene utilizzato per creare il servizio. Consente di dichiarare un servizio come disponibile ma ritarda la creazione dell'oggetto fino a quando il servizio non verrà richiesto.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per promuovere questa richiesta a eventuali contenitori dei servizi principali. <see langword="false" /> in caso contrario.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">Aggiunge il servizio specificato al contenitore dei servizi.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Tipo di servizio da aggiungere.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Istanza del tipo di servizio da aggiungere. L'oggetto deve implementare o ereditare dal tipo indicato dal parametro <paramref name="serviceType" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to any parent service containers.">Aggiunge il servizio specificato al contenitore dei servizi e facoltativamente promuove il servizio a tutti i contenitori dei servizi padre.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Tipo di servizio da aggiungere.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Istanza del tipo di servizio da aggiungere. L'oggetto deve implementare o ereditare dal tipo indicato dal parametro <paramref name="serviceType" />.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per promuovere questa richiesta a eventuali contenitori dei servizi principali. <see langword="false" /> in caso contrario.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">Rimuove il tipo di servizio specificato dal contenitore dei servizi.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">Tipo di servizio da rimuovere.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container, and optionally promotes the service to parent service containers.">Rimuove il servizio specificato dal contenitore dei servizi e facoltativamente promuove il servizio ai contenitori dei servizi padre.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">Tipo di servizio da rimuovere.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per promuovere questa richiesta a eventuali contenitori dei servizi principali. <see langword="false" /> in caso contrario.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary vsli:raw="Provides support for building a set of related custom designers.">Fornisce supporto per la compilazione di un gruppo correlato di finestre di progettazione personalizzate.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary vsli:raw="Gets a collection of child designers.">Ottiene un insieme di finestre di progettazione figlio.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;, containing the collection of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; child objects of the current designer.">Oggetto <see cref="T:System.Collections.ICollection" />, contenente l'insieme degli oggetti <see cref="T:System.ComponentModel.Design.IDesigner" /> figlio della finestra di progettazione corrente.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary vsli:raw="Gets the parent designer.">Ottiene la finestra di progettazione padre.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; representing the parent designer, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">Oggetto <see cref="T:System.ComponentModel.Design.IDesigner" /> che rappresenta la finestra di progettazione padre oppure <see langword="null" /> se non esiste alcuna finestra di progettazione padre.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary vsli:raw="Provides an interface to modify the set of member descriptors for a component in design mode.">Fornisce un'interfaccia per modificare l'insieme dei descrittori di membro per un componente in modalità progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the attributes that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Filtra gli attributi esposti da un componente tramite un oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component" vsli:raw="The component to filter the attributes of.">Componente di cui filtrare gli attributi.</param>
      <param name="attributes" vsli:raw="A dictionary of attributes that can be modified.">Dizionario degli attributi che può essere modificato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered attributes is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">
        <see langword="true" /> se l'insieme di attributi filtrati può essere memorizzato nella cache; <see langword="false" /> se il servizio filtro deve eseguire di nuovo la query.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the events that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Filtra gli eventi esposti da un componente tramite un oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component" vsli:raw="The component to filter events for.">Componente per il quale filtrare gli eventi.</param>
      <param name="events" vsli:raw="A dictionary of events that can be modified.">Dizionario degli eventi che può essere modificato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered events is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">
        <see langword="true" /> se l'insieme di eventi filtrati può essere memorizzato nella cache; <see langword="false" /> se il servizio filtro deve eseguire di nuovo la query.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the properties that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Filtra le proprietà esposte da un componente tramite un oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component" vsli:raw="The component to filter properties for.">Componente per il quale filtrare le proprietà.</param>
      <param name="properties" vsli:raw="A dictionary of properties that can be modified.">Dizionario delle proprietà che può essere modificato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered properties is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">
        <see langword="true" /> se l'insieme di proprietà filtrate può essere memorizzato nella cache; <see langword="false" /> se il servizio filtro deve eseguire di nuovo la query.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary vsli:raw="Discovers available types at design time.">Individua i tipi disponibili in fase di progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary vsli:raw="Retrieves the list of available types.">Recupera l'elenco dei tipi disponibili.</summary>
      <param name="baseType" vsli:raw="The base type to match. Can be &lt;see langword=&quot;null&quot; /&gt;.">Tipo base di cui verificare la corrispondenza. Può essere <see langword="null" />.</param>
      <param name="excludeGlobalTypes" vsli:raw="Indicates whether types from all referenced assemblies should be checked.">Indica se è necessario controllare i tipi di tutti gli assembly a cui si fa riferimento.</param>
      <returns vsli:raw="A collection of types that match the criteria specified by &lt;paramref name=&quot;baseType&quot; /&gt; and &lt;paramref name=&quot;excludeGlobalTypes&quot; /&gt;.">Insieme di tipi che corrisponde ai criteri specificati dagli oggetti <paramref name="baseType" /> e <paramref name="excludeGlobalTypes" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary vsli:raw="Provides an interface to retrieve an assembly or type by name.">Fornisce un'interfaccia per recuperare un assembly o un tipo in base al nome.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the requested assembly.">Ottiene l'assembly richiesto.</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">Nome dell'assembly da recuperare.</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">Istanza dell'assembly richiesto o <see langword="null" /> se non è possibile trovare alcun assembly.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary vsli:raw="Gets the requested assembly.">Ottiene l'assembly richiesto.</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">Nome dell'assembly da recuperare.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">
        <see langword="true" /> se questo metodo deve generare un'eccezione quando non è possibile trovare l'assembly. <see langword="false" /> in caso contrario. Se, il metodo restituirà <see langword="null" /> se non è possibile trovare l'assembly.</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">Istanza dell'assembly richiesto o <see langword="null" /> se non è possibile trovare alcun assembly.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the path to the file from which the assembly was loaded.">Ottiene il percorso del file dal quale è stato caricato l'assembly.</summary>
      <param name="name" vsli:raw="The name of the assembly.">Nome dell'assembly.</param>
      <returns vsli:raw="The path to the file from which the assembly was loaded.">Percorso del file dal quale è stato caricato l'assembly.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary vsli:raw="Loads a type with the specified name.">Carica un tipo con il nome specificato.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">Nome del tipo. Se il nome del tipo non è un nome completo che indica un assembly, verrà effettuata la ricerca nel gruppo interno di assembly a cui si fa riferimento.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">Istanza di <see cref="T:System.Type" /> che corrisponde al nome specificato o <see langword="null" /> se non è possibile trovare alcun tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">Carica un tipo con il nome specificato.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">Nome del tipo. Se il nome del tipo non è un nome completo che indica un assembly, verrà effettuata la ricerca nel gruppo interno di assembly a cui si fa riferimento.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">
        <see langword="true" /> se questo metodo deve generare un'eccezione quando non è possibile trovare l'assembly. <see langword="false" /> in caso contrario. Se, il metodo restituirà <see langword="null" /> se non è possibile trovare l'assembly.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">Istanza di <see cref="T:System.Type" /> che corrisponde al nome specificato o <see langword="null" /> se non è possibile trovare alcun tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">Carica un tipo con il nome specificato.</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">Nome del tipo. Se il nome del tipo non è un nome completo che indica un assembly, verrà effettuata la ricerca nel gruppo interno di assembly a cui si fa riferimento.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">
        <see langword="true" /> se questo metodo deve generare un'eccezione quando non è possibile trovare l'assembly. <see langword="false" /> in caso contrario. Se, il metodo restituirà <see langword="null" /> se non è possibile trovare l'assembly.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore case when searching for types; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per ignorare la distinzione tra maiuscole e minuscole nella ricerca dei tipi. <see langword="false" /> in caso contrario.</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">Istanza di <see cref="T:System.Type" /> che corrisponde al nome specificato o <see langword="null" /> se non è possibile trovare alcun tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Adds a reference to the specified assembly.">Aggiunge un riferimento all'assembly specificato.</summary>
      <param name="name" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; that indicates the assembly to reference.">Oggetto <see cref="T:System.Reflection.AssemblyName" /> che indica l'assembly a cui fare riferimento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary vsli:raw="Represents a Windows menu or toolbar command item.">Rappresenta un comando di un menu di Windows o di una barra degli strumenti.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <param name="handler" vsli:raw="The event to raise when the user selects the menu item or toolbar button.">Evento da generare quando l'utente sceglie la voce di menu o il pulsante della barra degli strumenti.</param>
      <param name="command" vsli:raw="The unique command ID that links this menu command to the environment's menu.">ID univoco del comando che collega questo comando di menu al menu dell'ambiente.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is checked.">Ottiene o imposta un valore che indica se la voce di menu è selezionata.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is checked; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elemento è selezionato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary vsli:raw="Occurs when the menu command changes.">Viene generato quando viene modificato il comando di menu.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with this menu command.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> associato a questo comando di menu.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with the menu command.">Oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> associato al comando di menu.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary vsli:raw="Gets a value indicating whether this menu item is available.">Ottiene un valore che indica se questa voce di menu è disponibile.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la voce è attivata. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary vsli:raw="Invokes the command.">Richiama il comando.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary vsli:raw="Invokes the command with the given parameter.">Richiama il comando con il parametro dato.</summary>
      <param name="arg" vsli:raw="An optional argument for use by the command.">Argomento facoltativo che può essere utilizzato dal comando.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary vsli:raw="Gets the OLE command status code for this menu item.">Ottiene il codice di stato del comando OLE per questa voce di menu.</summary>
      <returns vsli:raw="An integer containing a mixture of status flags that reflect the state of this menu item.">Intero che contiene i flag di stato relativi allo stato della voce di menu.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.MenuCommand.CommandChanged&quot; /&gt; event.">Genera l'evento <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" />.</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary vsli:raw="Gets the public properties associated with the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">Ottiene le proprietà pubbliche associate all'oggetto <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing the public properties of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">Oggetto <see cref="T:System.Collections.IDictionary" /> che contiene le proprietà pubbliche dell'oggetto <see cref="T:System.ComponentModel.Design.MenuCommand" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is supported.">Ottiene o imposta un valore che indica se la voce di menu è supportata.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is supported, which is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la voce è supportata, ovvero l'impostazione predefinita. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary vsli:raw="Returns a string representation of this menu command.">Restituisce una rappresentazione in forma di stringa di questo comando di menu.</summary>
      <returns vsli:raw="A string containing the value of the &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.CommandID&quot; /&gt; property appended with the names of any flags that are set, separated by pipe bars (|). These flag properties include &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Checked&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Enabled&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Supported&quot; /&gt;, and &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Visible&quot; /&gt;.">Stringa che contiene il valore della proprietà <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> aggiunta ai nomi di tutti i flag impostati, separati dal carattere | Tali proprietà dei flag comprendono <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /> e <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is visible.">Ottiene o imposta un valore che indica se la voce di menu è visibile.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is visible; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la voce è visibile. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary vsli:raw="Defines identifiers that indicate the type of a selection.">Definisce gli identificatori che indicano il tipo di una selezione.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary vsli:raw="Represents an add selection that adds the selected components to the current selection, maintaining the current set of selected components.">Rappresenta una selezione di aggiunta che consente di aggiungere i componenti selezionati alla selezione corrente, mantenendo l'insieme corrente di componenti selezionati.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">Rappresenta una selezione normale. Il servizio di selezione utilizza i tasti CTRL e MAIUSC per supportare l'aggiunta o la rimozione di componenti alla o dalla selezione.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary vsli:raw="Represents a selection that occurs when a user clicks a component. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">Rappresenta una selezione che si verifica quando l'utente fa clic su un componente. Se si seleziona un componente già selezionato, non verrà annullato ma verrà promosso a componente principale selezionato.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary vsli:raw="Represents a selection that occurs when the user presses on the mouse button while the mouse pointer is over a component. If the component under the pointer is already selected, it is promoted to become the primary selected component rather than being canceled.">Rappresenta una selezione che si verifica quando l'utente preme il pulsante del mouse mentre il puntatore è posizionato su un componente. Se il componente in corrispondenza del puntatore è già selezionato, non verrà annullato ma verrà promosso a componente principale selezionato.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary vsli:raw="Represents a selection that occurs when the user releases the mouse button immediately after a component has been selected. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">Rappresenta una selezione che si verifica quando l'utente rilascia il pulsante del mouse immediatamente dopo avere selezionato un componente. Se si seleziona un componente già selezionato, non verrà annullato ma verrà promosso a componente principale selezionato.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">Rappresenta una selezione normale. Il servizio di selezione utilizza i tasti CTRL e MAIUSC per supportare l'aggiunta o la rimozione di componenti alla o dalla selezione.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary vsli:raw="Represents a primary selection that occurs when a user clicks on a component. If a component in the selection list is already selected, the component is promoted to be the primary selection.">Rappresenta una selezione principale che si verifica quando l'utente fa clic su un componente. Se un componente dell'elenco di selezione è già selezionato, verrà promosso a selezione principale.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary vsli:raw="Represents a remove selection that removes the selected components from the current selection, maintaining the current set of selected components.">Rappresenta una selezione di rimozione che consente di rimuovere i componenti selezionati dalla selezione corrente, mantenendo l'insieme corrente di componenti selezionati.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary vsli:raw="Represents a selection that occurs when the content of a selection is replaced. The selection service replaces the current selection with the replacement.">Rappresenta una selezione che si verifica quando si sostituisce il contenuto di una selezione. Questo servizio di selezione sostituisce il contenuto della selezione corrente con altro contenuto.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary vsli:raw="Represents a toggle selection that switches between the current selection and the provided selection. If a component is already selected and is passed into &lt;see cref=&quot;Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents&quot; /&gt; with a selection type of &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Toggle&quot; /&gt;, the component selection will be canceled.">Rappresenta una selezione di attivazione/disattivazione che consente di passare dalla selezione corrente alla selezione fornita e viceversa. Se un componente è già selezionato e viene passato in <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> con un tipo di selezione <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" />, la selezione del componente verrà annullata.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary vsli:raw="Identifies the valid selection types as &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Replace&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseDown&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseUp&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Click&quot; /&gt;.">Identifica i tipi di selezione validi come <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" /> o <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary vsli:raw="Provides the base class for serializing a set of components or serializable objects into a serialization store.">Fornisce la classe base per la serializzazione di un insieme di componenti od oggetti serializzabili in un archivio di serializzazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">Crea un nuovo oggetto <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
      <returns vsli:raw="A new created serialization store.">Nuovo archivio di serializzazione creato.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary vsli:raw="Deserializes the given store to produce a collection of objects.">Deserializza l'archivio dato per produrre un insieme di oggetti.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> da deserializzare.</param>
      <returns vsli:raw="A collection of objects created according to the stored state.">Insieme di oggetti creato in base allo stato memorizzato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> non contiene dati in un formato che può essere elaborato dal contenitore di serializzazione.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given store and populates the given &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with deserialized &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects.">Deserializza l'archivio dato e compila l'interfaccia <see cref="T:System.ComponentModel.IContainer" /> data con oggetti <see cref="T:System.ComponentModel.IComponent" /> deserializzati.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> da deserializzare.</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">Interfaccia <see cref="T:System.ComponentModel.IContainer" /> a cui verranno aggiunti gli oggetti <see cref="T:System.ComponentModel.IComponent" />.</param>
      <returns vsli:raw="A collection of objects created according to the stored state.">Insieme di oggetti creato in base allo stato memorizzato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> o <paramref name="container" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> non contiene dati in un formato che può essere elaborato dal contenitore di serializzazione.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container.">Deserializza la classe <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> data nel contenitore dato.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> da deserializzare.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">Contenitore a cui verranno aggiunti gli oggetti <see cref="T:System.ComponentModel.IComponent" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> o <paramref name="container" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> non contiene dati in un formato che può essere elaborato dal contenitore di serializzazione.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally validating recycled types.">Deserializza la classe <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> data nel contenitore dato, convalidando eventualmente i tipi riciclati.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> da deserializzare.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">Contenitore a cui verranno aggiunti gli oggetti <see cref="T:System.ComponentModel.IComponent" />.</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">
        <see langword="true" /> per garantire che la deserializzazione funzionerà solo se applicata a un oggetto dello stesso tipo.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> o <paramref name="container" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> non contiene dati in un formato che può essere elaborato dal contenitore di serializzazione.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally applying default property values.">Deserializza la classe <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> data nel contenitore dato, applicando eventualmente i valori di proprietà predefiniti.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> da deserializzare.</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">Contenitore a cui verranno aggiunti gli oggetti <see cref="T:System.ComponentModel.IComponent" />.</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">
        <see langword="true" /> per garantire che la deserializzazione funzionerà solo se applicata a un oggetto dello stesso tipo.</param>
      <param name="applyDefaults" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the default property values should be applied.">
        <see langword="true" /> per indicare che devono essere applicati i valori di proprietà predefiniti.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> o <paramref name="container" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> non contiene dati in un formato che può essere elaborato dal contenitore di serializzazione.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary vsli:raw="Loads a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; from a stream.">Carica una classe <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> da un flusso.</summary>
      <param name="stream" vsli:raw="The &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; from which the store will be loaded.">Classe <see cref="T:System.IO.Stream" /> da cui verrà caricato l'archivio.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; instance.">Nuova istanza di <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; does not contain data saved by a previous call to &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)&quot; /&gt;.">
        <paramref name="stream" /> non contiene dati salvati da una precedente chiamata a <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object to the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">Serializza l'oggetto dato nella classe <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> data.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be written.">Classe <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> in cui verrà scritto lo stato di <paramref name="value" />.</param>
      <param name="value" vsli:raw="The object to serialize.">Oggetto da serializzare.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> o <paramref name="value" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> è chiuso oppure <paramref name="store" /> non è un tipo supportato di archivio di serializzazione. Utilizzare un archivio restituito da <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object, accounting for default property values.">Serializza l'oggetto dato, tenendo conto dei valori di proprietà predefiniti.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be serialized.">Classe <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> in cui verrà serializzato lo stato di <paramref name="value" />.</param>
      <param name="value" vsli:raw="The object to serialize.">Oggetto da serializzare.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> o <paramref name="value" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> è chiuso oppure <paramref name="store" /> non è un tipo supportato di archivio di serializzazione. Utilizzare un archivio restituito da <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object.">Serializza il membro specificato sull'oggetto indicato.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">Classe <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> in cui verrà serializzato lo stato di <paramref name="member" />.</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">Oggetto a cui è collegato <paramref name="member" />.</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; specifying the member to serialize.">Classe <see cref="T:System.ComponentModel.MemberDescriptor" /> che specifica il membro da serializzare.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> o <paramref name="value" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> è chiuso oppure <paramref name="store" /> non è un tipo supportato di archivio di serializzazione. Utilizzare un archivio restituito da <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object, accounting for the default property value.">Serializza il membro dato sull'oggetto dato, tenendo conto del valore di proprietà predefinito.</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">Classe <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> in cui verrà serializzato lo stato di <paramref name="member" />.</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">Oggetto a cui è collegato <paramref name="member" />.</param>
      <param name="member" vsli:raw="The member to serialize.">Membro da serializzare.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> o <paramref name="value" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> è chiuso oppure <paramref name="store" /> non è un tipo supportato di archivio di serializzazione. Utilizzare un archivio restituito da <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary vsli:raw="Provides a stack object that can be used by a serializer to make information available to nested serializers.">Fornisce un oggetto stack che può essere utilizzato da un serializzatore per rendere disponibili delle informazioni a serializzatori annidati.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary vsli:raw="Appends an object to the end of the stack, rather than pushing it onto the top of the stack.">Accoda un oggetto alla fine dello stack anziché inserirlo all'inizio dello stack.</summary>
      <param name="context" vsli:raw="A context object to append to the stack.">Oggetto di contesto da accodare allo stack.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary vsli:raw="Gets the current object on the stack.">Ottiene l'oggetto corrente nello stack.</summary>
      <returns vsli:raw="The current object on the stack, or &lt;see langword=&quot;null&quot; /&gt; if no objects were pushed.">Oggetto corrente nello stack oppure <see langword="null" /> se non è stato inserito alcun oggetto.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary vsli:raw="Gets the object on the stack at the specified level.">Ottiene l'oggetto nello stack al livello specificato.</summary>
      <param name="level" vsli:raw="The level of the object to retrieve on the stack. Level 0 is the top of the stack, level 1 is the next down, and so on. This level must be 0 or greater. If level is greater than the number of levels on the stack, it returns &lt;see langword=&quot;null&quot; /&gt;.">Livello dell'oggetto da recuperare nello stack. Il livello 0 è il primo livello dello stack, il livello 1 è quello successivo e così via. Questo livello deve essere maggiore o uguale a 0. Se il livello è superiore al numero dei livelli presenti nello stack, verrà restituito <see langword="null" />.</param>
      <returns vsli:raw="The object on the stack at the specified level, or &lt;see langword=&quot;null&quot; /&gt; if no object exists at that level.">Oggetto nello stack al livello specificato oppure <see langword="null" /> se non esiste alcun oggetto a tale livello.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;level&quot; /&gt; is less than 0.">
        <paramref name="level" /> è minore di 0.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary vsli:raw="Gets the first object on the stack that inherits from or implements the specified type.">Ottiene il primo oggetto nello stack che eredita o implementa il tipo specificato.</summary>
      <param name="type" vsli:raw="A type to retrieve from the context stack.">Tipo da recuperare dallo stack di contesto.</param>
      <returns vsli:raw="The first object on the stack that inherits from or implements the specified type, or &lt;see langword=&quot;null&quot; /&gt; if no object on the stack implements the type.">Primo oggetto nello stack che eredita o implementa il tipo specificato oppure <see langword="null" /> se nessun oggetto nello stack implementa il tipo.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary vsli:raw="Removes the current object off of the stack, returning its value.">Rimuove l'oggetto corrente dallo stack restituendone il valore.</summary>
      <returns vsli:raw="The object removed from the stack; &lt;see langword=&quot;null&quot; /&gt; if no objects are on the stack.">Oggetto rimosso dallo stack; <see langword="null" /> se lo stack non contiene oggetti.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary vsli:raw="Pushes, or places, the specified object onto the stack.">Inserisce l'oggetto specificato nello stack.</summary>
      <param name="context" vsli:raw="The context object to push onto the stack.">Oggetto di contesto da inserire nello stack.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> è <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; attribute is placed on a serializer to indicate the class to use as a default provider of that type of serializer.">L'attributo <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> viene inserito in un serializzatore per indicare la classe da utilizzare come provider predefinito di tale tipo di serializzatore.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the named provider type.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> con il tipo di provider denominato.</summary>
      <param name="providerTypeName" vsli:raw="The name of the serialization provider type.">Nome del tipo di provider di serializzazione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerTypeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerTypeName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the given provider type.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> con il tipo di provider dato.</summary>
      <param name="providerType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the serialization provider.">Classe <see cref="T:System.Type" /> del provider di serializzazione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerType" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary vsli:raw="Gets the type name of the serialization provider.">Ottiene il nome del tipo di provider di serializzazione.</summary>
      <returns vsli:raw="A string containing the name of the provider.">Stringa contenente il nome del provider.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary vsli:raw="Provides a basic designer loader interface that can be used to implement a custom designer loader.">Fornisce un'interfaccia di base del caricatore della finestra di progettazione che può essere utilizzata per implementare un caricatore della finestra di progettazione personalizzato.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary vsli:raw="Begins loading a designer.">Inizia a caricare una finestra di progettazione.</summary>
      <param name="host" vsli:raw="The loader host through which this loader loads components.">Host tramite il quale questo caricatore carica i componenti.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt;.">Rilascia tutte le risorse usate da <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary vsli:raw="Writes cached changes to the location that the designer was loaded from.">Scrive le modifiche inserite nella cache nella posizione dalla quale era stata caricata la finestra di progettazione.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary vsli:raw="Gets a value indicating whether the loader is currently loading a document.">Ottiene un valore che indica se il caricatore sta al momento caricando un documento.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the loader is currently loading a document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il caricatore sta al momento caricando un documento. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>Indica un serializzatore che deve essere utilizzato dal gestore della serializzazione per serializzare i valori del tipo a cui applicare questo attributo. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerTypeName">Nome completo del tipo di dati del serializzatore.</param>
      <param name="baseSerializerTypeName">Nome completo del tipo di dati di base del serializzatore. È possibile fornire più serializzatori per una classe purché questi abbiano tipi di base diversi.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerTypeName">Nome completo del tipo di dati del serializzatore.</param>
      <param name="baseSerializerType">Tipo di dati di base del serializzatore. È possibile fornire più serializzatori per una classe purché questi abbiano tipi di base diversi.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerType">Tipo di dati del serializzatore.</param>
      <param name="baseSerializerType">Tipo di dati di base del serializzatore. È possibile fornire più serializzatori per una classe purché questi abbiano tipi di base diversi.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>Ottiene il nome tipo completo del tipo di base del serializzatore.</summary>
      <returns>Nome tipo completo del tipo di base del serializzatore.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>Ottiene il nome tipo completo del serializzatore.</summary>
      <returns>Nome tipo completo del serializzatore.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>Indica un ID univoco per questo tipo di attributo.</summary>
      <returns>ID univoco per questo tipo di attributo.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary vsli:raw="Provides an interface that can extend a designer host to support loading from a serialized state.">Fornisce un'interfaccia in grado di estendere un host di progettazione per supportare il caricamento da uno stato serializzato.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Ends the designer loading operation.">Termina l'operazione di caricamento della finestra di progettazione.</summary>
      <param name="baseClassName" vsli:raw="The fully qualified name of the base class of the document that this designer is designing.">Nome completo della classe base del documento in fase di progettazione nella finestra di progettazione.</param>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is successfully loaded; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il caricamento della finestra di progettazione è riuscito. <see langword="false" /> in caso contrario.</param>
      <param name="errorCollection" vsli:raw="A collection containing the errors encountered during load, if any. If no errors were encountered, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">Insieme contenente eventuali errori riscontrati durante il caricamento. Se non si riscontrano errori, passare un insieme vuoto o <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary vsli:raw="Reloads the design document.">Ricarica il documento di progettazione.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary vsli:raw="Provides an interface that extends &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&quot; /&gt; to specify whether errors are tolerated while loading a design document.">Fornisce un'interfaccia che estende <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> per specificare se gli errori vengono tollerati durante il caricamento di un documento di progettazione.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary vsli:raw="Gets or sets a value indicating whether it is possible to reload with errors.">Ottiene o imposta un valore che indica se è possibile ricaricare in caso di errori.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader can reload the design document when errors are detected; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il caricatore della finestra di progettazione può ricaricare il documento di progettazione quando vengono rilevati errori; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary vsli:raw="Gets or sets a value indicating whether errors should be ignored when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload&quot; /&gt; is called.">Ottiene o imposta un valore che indica se gli errori devono essere ignorati quando viene chiamato <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader will ignore errors when it reloads; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il caricatore della finestra di progettazione ignorerà gli errori durante il nuovo caricamento; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary vsli:raw="Provides an interface that can extend a designer loader to support asynchronous loading of external components.">Fornisce un'interfaccia in grado di estendere un caricatore della finestra di progettazione in modo da supportare il caricamento asincrono di componenti esterni.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary vsli:raw="Registers an external component as part of the load process managed by this interface.">Registra un componente esterno come parte del processo di caricamento gestito da questa interfaccia.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Signals that a dependent load has finished.">Segnala che un caricamento dipendente è terminato.</summary>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the load of the designer is successful; &lt;see langword=&quot;false&quot; /&gt; if errors prevented the load from finishing.">
        <see langword="true" /> se il caricamento della finestra di progettazione è riuscito; <see langword="false" /> se si sono verificati errori che hanno impedito il completamento del caricamento.</param>
      <param name="errorCollection" vsli:raw="A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">Insieme di errori riscontrati durante il caricamento, se ne esistono. Se non stati riscontrati errori, passare un insieme vuoto o <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary vsli:raw="Reloads the design document.">Ricarica il documento di progettazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reload request is accepted, or &lt;see langword=&quot;false&quot; /&gt; if the loader does not allow the reload.">
        <see langword="true" /> se la richiesta di caricamento viene accettata oppure <see langword="false" /> se il caricatore non consente il ricaricamento.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary vsli:raw="Provides an interface that can manage design-time serialization.">Fornisce un'interfaccia in grado di gestire la serializzazione in fase di progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Adds the specified serialization provider to the serialization manager.">Aggiunge il provider di serializzazione specificato al gestore della serializzazione.</summary>
      <param name="provider" vsli:raw="The serialization provider to add.">Provider di serializzazione da aggiungere.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary vsli:raw="Gets a stack-based, user-defined storage area that is useful for communication between serializers.">Ottiene un'area di memorizzazione definita dall'utente e basata su stack utile per la comunicazione tra i serializzatori.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; that stores data.">Oggetto <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> che memorizza dati.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary vsli:raw="Creates an instance of the specified type and adds it to a collection of named instances.">Crea un'istanza del tipo specificato e la aggiunge a una raccolta di istanze denominate.</summary>
      <param name="type" vsli:raw="The data type to create.">Tipo di dati da creare.</param>
      <param name="arguments" vsli:raw="The arguments to pass to the constructor for this type.">Argomento da passare al costruttore per questo tipo.</param>
      <param name="name" vsli:raw="The name of the object. This name can be used to access the object later through &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the object is still created but cannot be accessed by name.">Nome dell'oggetto. Questo nome può essere utilizzato per accedere all'oggetto in un momento successivo tramite il metodo <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />. Se viene passato <see langword="null" />, l'oggetto verrà comunque creato ma non sarà possibile accedervi in base al nome.</param>
      <param name="addToContainer" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, this object is added to the design container. The object must implement &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for this to have any effect.">Se viene passato <see langword="true" />, questo oggetto verrà aggiunto al contenitore di progettazione. È necessario che l'oggetto implementi <see cref="T:System.ComponentModel.IComponent" /> perché abbia effetto.</param>
      <returns vsli:raw="The newly created object instance.">Istanza dell'oggetto appena creata.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary vsli:raw="Gets an instance of a created object of the specified name, or &lt;see langword=&quot;null&quot; /&gt; if that object does not exist.">Ottiene un'istanza di un oggetto creato con il nome specificato oppure <see langword="null" /> se tale oggetto non esiste.</summary>
      <param name="name" vsli:raw="The name of the object to retrieve.">Nome dell'oggetto da recuperare.</param>
      <returns vsli:raw="An instance of the object with the given name, or &lt;see langword=&quot;null&quot; /&gt; if no object by that name can be found.">Istanza dell'oggetto con il nome specificato oppure <see langword="null" /> se non viene trovato alcun oggetto con tale nome.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified object, or &lt;see langword=&quot;null&quot; /&gt; if the object has no name.">Ottiene il nome dell'oggetto specificato oppure <see langword="null" /> se l'oggetto non ha alcun nome.</summary>
      <param name="value" vsli:raw="The object to retrieve the name for.">Oggetto per il quale recuperare il nome.</param>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object is unnamed.">Nome dell'oggetto oppure <see langword="null" /> se l'oggetto non ha alcun nome.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer of the requested type for the specified object type.">Ottiene un serializzatore del tipo richiesto per il tipo di oggetto specificato.</summary>
      <param name="objectType" vsli:raw="The type of the object to get the serializer for.">Tipo dell'oggetto per il quale ottenere il serializzatore.</param>
      <param name="serializerType" vsli:raw="The type of the serializer to retrieve.">Tipo del serializzatore da recuperare.</param>
      <returns vsli:raw="An instance of the requested serializer, or &lt;see langword=&quot;null&quot; /&gt; if no appropriate serializer can be located.">Istanza del serializzatore richiesto oppure <see langword="null" /> se non viene trovato un serializzatore appropriato.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary vsli:raw="Gets a type of the specified name.">Ottiene un tipo del nome specificato.</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the type to load.">Nome completo del tipo da caricare.</param>
      <returns vsli:raw="An instance of the type, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be loaded.">Istanza del tipo oppure <see langword="null" /> se non è possibile caricare il tipo.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary vsli:raw="Indicates custom properties that can be serializable with available serializers.">Indica proprietà personalizzate che possono essere serializzate con i serializzatori disponibili.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties to be serialized.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> contenente le proprietà da serializzare.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Removes a custom serialization provider from the serialization manager.">Rimuove un provider di serializzazione personalizzato dal gestore della serializzazione.</summary>
      <param name="provider" vsli:raw="The provider to remove. This object must have been added using &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)&quot; /&gt;.">Provider da rimuovere. Questo oggetto deve essere stato aggiunto utilizzando il metodo <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary vsli:raw="Reports an error in serialization.">Riporta un errore di serializzazione.</summary>
      <param name="errorInformation" vsli:raw="The error to report. This information object can be of any object type. If it is an exception, the message of the exception is extracted and reported to the user. If it is any other type, &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt; is called to display the information to the user.">Errore da riportare. Questo oggetto di informazioni può essere qualsiasi tipo di oggetto. Se è un'eccezione, il messaggio dell'eccezione verrà estratto e riportato all'utente. Se si tratta di un altro tipo, verrà chiamato il metodo <see cref="M:System.Object.ToString" /> per visualizzare le informazioni all'utente.</param>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary vsli:raw="Occurs when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)&quot; /&gt; cannot locate the specified name in the serialization manager's name table.">Viene generato quando il metodo <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> non è in grado di individuare il nome specificato nella tabella dei nomi del gestore della serializzazione.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary vsli:raw="Occurs when serialization is complete.">Viene generato al termine della serializzazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary vsli:raw="Sets the name of the specified existing object.">Imposta il nome dell'oggetto esistente specificato.</summary>
      <param name="instance" vsli:raw="The object instance to name.">Istanza dell'oggetto a cui assegnare un nome.</param>
      <param name="name" vsli:raw="The name to give the instance.">Nome da assegnare all'istanza.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary vsli:raw="Provides an interface that enables access to a serializer.">Fornisce un'interfaccia che consente di accedere a un serializzatore.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer using the specified attributes.">Ottiene un serializzatore utilizzando gli attributi specificati.</summary>
      <param name="manager" vsli:raw="The serialization manager requesting the serializer.">Gestore della serializzazione che richiede il serializzatore.</param>
      <param name="currentSerializer" vsli:raw="An instance of the current serializer of the specified type. This can be &lt;see langword=&quot;null&quot; /&gt; if no serializer of the specified type exists.">Istanza del serializzatore corrente del tipo specificato. Può essere <see langword="null" /> se non esiste alcun serializzatore del tipo specificato.</param>
      <param name="objectType" vsli:raw="The data type of the object to serialize.">Tipo di dati dell'oggetto da serializzare.</param>
      <param name="serializerType" vsli:raw="The data type of the serializer to create.">Tipo di dati del serializzatore da creare.</param>
      <returns vsli:raw="An instance of a serializer of the type requested, or &lt;see langword=&quot;null&quot; /&gt; if the request cannot be satisfied.">Istanza di un serializzatore del tipo richiesto oppure <see langword="null" /> se non è possibile soddisfare la richiesta.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary vsli:raw="Provides an interface that can invoke serialization and deserialization.">Fornisce un'interfaccia in grado di richiamare la serializzazione e la deserializzazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary vsli:raw="Deserializes the specified serialization data object and returns a collection of objects represented by that data.">Deserializza l'oggetto dati di serializzazione specificato e restituisce un insieme di oggetti rappresentato da tali dati.</summary>
      <param name="serializationData" vsli:raw="An object consisting of serialized data.">Oggetto costituito da dati serializzati.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of objects rebuilt from the specified serialization data object.">Insieme <see cref="T:System.Collections.ICollection" /> di oggetti rigenerato dall'oggetto dati di serializzazione specificato.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary vsli:raw="Serializes the specified collection of objects and stores them in a serialization data object.">Serializza l'insieme specificato di oggetti e li memorizza in un oggetto dati di serializzazione.</summary>
      <param name="objects" vsli:raw="A collection of objects to serialize.">Insieme di oggetti da serializzare.</param>
      <returns vsli:raw="An object that contains the serialized state of the specified collection of objects.">Oggetto che contiene lo stato serializzato dell'insieme specificato di oggetti.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary vsli:raw="Provides a service that can generate unique names for objects.">Fornisce un servizio in grado di generare nomi univoci per gli oggetti.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary vsli:raw="Creates a new name that is unique to all components in the specified container.">Crea un nuovo nome univoco per tutti i componenti nel contenitore specificato.</summary>
      <param name="container" vsli:raw="The container where the new object is added.">Contenitore nel quale viene aggiunto il nuovo oggetto.</param>
      <param name="dataType" vsli:raw="The data type of the object that receives the name.">Tipo di dati dell'oggetto che riceve il nome.</param>
      <returns vsli:raw="A unique name for the data type.">Nome univoco per il tipo di dati.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">Ottiene un valore che indica se il nome specificato è valido.</summary>
      <param name="name" vsli:raw="The name to validate.">Nome da convalidare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name is valid; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il nome è valido; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">Ottiene un valore che indica se il nome specificato è valido.</summary>
      <param name="name" vsli:raw="The name to validate.">Nome da convalidare.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary vsli:raw="Provides the information necessary to create an instance of an object. This class cannot be inherited.">Fornisce le informazioni necessarie per creare un'istanza di un oggetto. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information and arguments.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> con le informazioni sui membri e gli argomenti specificati.</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">Informazioni sui membri per il descrittore. Può essere un oggetto <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> o <see cref="T:System.Reflection.PropertyInfo" />. Se è un <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> o <see cref="T:System.Reflection.PropertyInfo" />, dovrà rappresentare un membro <see langword="static" />.</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">Insieme di argomenti da passare al membro. Questo parametro può essere <see langword="null" /> o un insieme vuoto se non è presente alcun argomento. L'insieme può anche essere composto da altre istanze di <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">
        <paramref name="member" /> è di tipo <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> o <see cref="T:System.Reflection.PropertyInfo" /> e non rappresenta un membro <see langword="static" />.  
-oppure- 
<paramref name="member" /> è di tipo <see cref="T:System.Reflection.PropertyInfo" /> e non è leggibile.  
-oppure- 
<paramref name="member" /> è di tipo <see cref="T:System.Reflection.MethodInfo" /> o <see cref="T:System.Reflection.ConstructorInfo" /> e il numero di argomenti in <paramref name="arguments" /> non corrisponde alla firma di <paramref name="member" />.
-oppure-
<paramref name="member" /> è di tipo <see cref="T:System.Reflection.ConstructorInfo" /> e rappresenta un membro <see langword="static" />.  
-oppure- 
<paramref name="member" /> è di tipo <see cref="T:System.Reflection.FieldInfo" /> e il numero di argomenti in <paramref name="arguments" /> non è zero.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information, arguments, and value indicating whether the specified information completely describes the instance.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> utilizzando le informazioni sui membri e gli argomenti specificati e il valore che indica se le informazioni specificate descrivono completamente l'istanza.</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">Informazioni sui membri per il descrittore. Può essere un oggetto <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> o <see cref="T:System.Reflection.PropertyInfo" />. Se è un <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> o <see cref="T:System.Reflection.PropertyInfo" />, dovrà rappresentare un membro <see langword="static" />.</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">Insieme di argomenti da passare al membro. Questo parametro può essere <see langword="null" /> o un insieme vuoto se non è presente alcun argomento. L'insieme può anche essere composto da altre istanze di <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <param name="isComplete" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified information completely describes the instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se le informazioni specificate descrivono completamente l'istanza. <see langword="false" /> in caso contrario.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">
        <paramref name="member" /> è di tipo <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> o <see cref="T:System.Reflection.PropertyInfo" /> e non rappresenta un membro <see langword="static" /><paramref name="member" /> è di tipo <see cref="T:System.Reflection.PropertyInfo" /> e non è leggibile.  
 <paramref name="member" /> è di tipo <see cref="T:System.Reflection.MethodInfo" /> o <see cref="T:System.Reflection.ConstructorInfo" /> e il numero di argomenti in <paramref name="arguments" /> non corrisponde alla firma di <paramref name="member" />.  
 <paramref name="member" /> è di tipo <see cref="T:System.Reflection.ConstructorInfo" /> e rappresenta un membro <see langword="static" />. 
 <paramref name="member" /> è di tipo <see cref="T:System.Reflection.FieldInfo" /> e il numero di argomenti in <paramref name="arguments" /> non è zero.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary vsli:raw="Gets the collection of arguments that can be used to reconstruct an instance of the object that this instance descriptor represents.">Ottiene l'insieme di argomenti che è possibile utilizzare per ricostruire un'istanza dell'oggetto rappresentata da questo descrittore dell'istanza.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of arguments that can be used to create the object.">Insieme <see cref="T:System.Collections.ICollection" /> di argomenti che può essere utilizzato per creare l'oggetto.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary vsli:raw="Invokes this instance descriptor and returns the object the descriptor describes.">Chiama questo descrittore dell'istanza e restituisce l'oggetto descritto dal descrittore.</summary>
      <returns vsli:raw="The object this instance descriptor describes.">Oggetto descritto da questo descrittore dell'istanza.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary vsli:raw="Gets a value indicating whether the contents of this &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; completely identify the instance.">Ottiene un valore che indica se il contenuto di questo oggetto <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> identifica completamente l'istanza.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance is completely described; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'istanza è descritta completamente. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary vsli:raw="Gets the member information that describes the instance this descriptor is associated with.">Ottiene le informazioni sui membri che descrivono l'istanza alla quale è associato questo descrittore.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that describes the instance that this object is associated with.">Oggetto <see cref="T:System.Reflection.MemberInfo" /> che descrive l'istanza alla quale è associato questo oggetto.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary vsli:raw="Represents a single relationship between an object and a member.">Rappresenta una singola relazione tra un oggetto e un membro.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</summary>
      <param name="owner" vsli:raw="The object that owns &lt;paramref name=&quot;member&quot; /&gt;.">Oggetto proprietario di <paramref name="member" />.</param>
      <param name="member" vsli:raw="The member which is to be related to &lt;paramref name=&quot;owner&quot; /&gt;.">Membro da correlare a <paramref name="owner" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; or &lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" /> o <paramref name="member" /> è <see langword="null" />.</exception>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary vsli:raw="Represents the empty member relationship. This field is read-only.">Rappresenta la relazione di membri vuota. Questo campo è di sola lettura.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance is equal to the specified object representing a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance.">Determina se due istanze di <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> sono uguali.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> da confrontare con l'oggetto <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance and is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> specificato è uguale all'oggetto <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> corrente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">Codice hash per l'oggetto <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> corrente.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship.">Ottiene un valore che indica se questa relazione è uguale alla relazione <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questa relazione è uguale alla relazione <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary vsli:raw="Gets the related member.">Ottiene il membro correlato.</summary>
      <returns vsli:raw="The member that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">Membro passato al metodo <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equivalent.">Verifica se due strutture <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> specificate sono equivalenti.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the equality operator.">Struttura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> a sinistra dell'operatore di uguaglianza.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the equality operator.">Struttura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> a destra dell'operatore di uguaglianza.</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Questo operatore restituisce <see langword="true" /> se le due strutture <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> sono uguali, in caso contrario restituisce <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different.">Verifica se due strutture <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> specificate sono diverse.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the inequality operator.">Struttura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> a sinistra dell'operatore di disuguaglianza.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the inequality operator.">Struttura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> a destra dell'operatore di disuguaglianza.</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Questo operatore restituisce <see langword="true" /> se le due strutture <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> sono diverse, in caso contrario restituisce <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary vsli:raw="Gets the owning object.">Ottiene l'oggetto proprietario.</summary>
      <returns vsli:raw="The owning object that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">Oggetto proprietario passato al metodo <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary vsli:raw="Provides the base class for relating one member to another.">Fornisce la classe base per mettere in relazione un membro con un altro.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationshipService&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a relationship to the given source relationship.">Ottiene una relazione con la relazione di origine data.</summary>
      <param name="source" vsli:raw="The source relationship.">Relazione di origine.</param>
      <returns vsli:raw="A relationship to &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if no relationship exists.">Relazione con <paramref name="source" /> o <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> se non è presente alcuna relazione.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">Stabilisce una relazione tra un oggetto di origine e uno di destinazione.</summary>
      <param name="source" vsli:raw="The source relationship. This is the left-hand side of a relationship assignment.">Relazione di origine. Si tratta della parte sinistra dell'assegnazione di una relazione.</param>
      <returns vsli:raw="The current relationship associated with &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if there is no relationship.">Relazione corrente associata a <paramref name="source" /> o <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> se non è presente alcuna relazione.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is empty, or the relationship is not supported by the service.">
        <paramref name="source" /> è vuoto o la relazione non è supportata dal servizio.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">Stabilisce una relazione tra un oggetto di origine e uno di destinazione.</summary>
      <param name="sourceOwner" vsli:raw="The owner of a source relationship.">Proprietario di una relazione di origine.</param>
      <param name="sourceMember" vsli:raw="The member of a source relationship.">Membro di una relazione di origine.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure encapsulating the relationship between a source and target object, or &lt;see langword=&quot;null&quot; /&gt; if there is no relationship.">Struttura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> che incapsula la relazione tra un oggetto di origine e uno di destinazione o <see langword="null" /> se non è presente alcuna relazione.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="sourceOwner" /> o <paramref name="sourceMember" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is empty, or the relationship is not supported by the service.">
        <paramref name="sourceOwner" /> o <paramref name="sourceMember" /> è vuoto o la relazione non è supportata dal servizio.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Creates a relationship between the source object and target relationship.">Crea una relazione tra l'oggetto di origine e la relazione di destinazione.</summary>
      <param name="source" vsli:raw="The source relationship.">Relazione di origine.</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">Relazione da impostare nell'origine.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The relationship is not supported by the service.">La relazione non è supportata dal servizio.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a value indicating whether the given relationship is supported.">Ottiene un valore che indica se la relazione data è supportata.</summary>
      <param name="source" vsli:raw="The source relationship.">Relazione di origine.</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">Relazione da impostare nell'origine.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a relationship between the given two objects is supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è supportata una relazione tra questi due oggetti; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event.">Fornisce dati per l'evento <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />.</summary>
      <param name="name" vsli:raw="The name to resolve.">Nome da risolvere.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary vsli:raw="Gets the name of the object to resolve.">Ottiene il nome dell'oggetto da risolvere.</summary>
      <returns vsli:raw="The name of the object to resolve.">Nome dell'oggetto da risolvere.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary vsli:raw="Gets or sets the object that matches the name.">Ottiene o imposta l'oggetto che corrisponde al nome.</summary>
      <returns vsli:raw="The object that the name is associated with.">Oggetto al quale è associato il nome.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event of a serialization manager.">Rappresenta il metodo che gestisce l'evento <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> di un gestore di serializzazione.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origine dell'evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; that contains the event data.">Oggetto <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary vsli:raw="Indicates the base serializer to use for a root designer object. This class cannot be inherited.">Indica il serializzatore di base per un oggetto finestra di progettazione di primo livello. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> con gli attributi specificati.</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">Nome completo del tipo di dati del serializzatore.</param>
      <param name="baseSerializerTypeName" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers as they all have different base types.">Nome tipo di base del serializzatore. Una classe può comprendere più serializzatori poiché ciascuno di essi ha un tipo di base differente.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questo serializzatore supporta il ricaricamento dinamico del documento. <see langword="false" /> in caso contrario.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> con gli attributi specificati.</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">Nome completo del tipo di dati del serializzatore.</param>
      <param name="baseSerializerType" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers, as they all have different base types.">Nome tipo di base del serializzatore. Una classe può comprendere più serializzatori poiché ciascuno di essi ha un tipo di base differente.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questo serializzatore supporta il ricaricamento dinamico del documento. <see langword="false" /> in caso contrario.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> con gli attributi specificati.</summary>
      <param name="serializerType" vsli:raw="The data type of the serializer.">Tipo di dati del serializzatore.</param>
      <param name="baseSerializerType" vsli:raw="The base type of the serializer. A class can include multiple serializers as they all have different base types.">Tipo di base del serializzatore. Una classe può comprendere più serializzatori poiché ciascuno di essi ha un tipo di base differente.</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questo serializzatore supporta il ricaricamento dinamico del documento. <see langword="false" /> in caso contrario.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary vsli:raw="Gets a value indicating whether the root serializer supports reloading of the design document without first disposing the designer host.">Ottiene un valore che indica se il serializzatore di primo livello supporta il ricaricamento del documento di progettazione senza che sia necessario dapprima eliminare l'host di progettazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the root serializer supports reloading; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il serializzatore di primo livello supporta il ricaricamento. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the base type of the serializer.">Ottiene il nome tipo completo del tipo di base del serializzatore.</summary>
      <returns vsli:raw="The name of the base type of the serializer.">Nome tipo di base del serializzatore.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the serializer.">Ottiene il nome tipo completo del serializzatore.</summary>
      <returns vsli:raw="The name of the type of the serializer.">Nome del tipo del serializzatore.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary vsli:raw="Gets a unique ID for this attribute type.">Ottiene un ID univoco per questo tipo di attributo.</summary>
      <returns vsli:raw="An object containing a unique ID for this attribute type.">Oggetto contenente un ID univoco per questo tipo di attributo.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary vsli:raw="Provides the base class for storing serialization data for the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt;.">Fornisce la classe base per memorizzare i dati di serializzazione relativi alla classe <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary vsli:raw="Closes the serialization store.">Chiude l'archivio di serializzazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; and optionally releases the managed resources.">Rilascia le risorse non gestite usate da <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> e, facoltativamente, le risorse gestite.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite, <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary vsli:raw="Gets a collection of errors that occurred during serialization or deserialization.">Ottiene un insieme di errori verificatisi durante la serializzazione o deserializzazione.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that contains errors that occurred during serialization or deserialization.">Interfaccia <see cref="T:System.Collections.ICollection" /> contenente errori verificatisi durante la serializzazione o deserializzazione.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary vsli:raw="Saves the store to the given stream.">Salva l'archivio nel flusso dato.</summary>
      <param name="stream" vsli:raw="The stream to which the store will be serialized.">Flusso in cui verrà serializzato l'archivio.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">Rilascia tutte le risorse usate da <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary vsli:raw="Provides a simple implementation of the &lt;see cref=&quot;T:System.ComponentModel.Design.IServiceContainer&quot; /&gt; interface. This class cannot be inherited.">Fornisce una semplice implementazione dell'interfaccia <see cref="T:System.ComponentModel.Design.IServiceContainer" />. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class using the specified parent service provider.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.ServiceContainer" /> con il provider di servizi padre specificato.</summary>
      <param name="parentProvider" vsli:raw="A parent service provider.">Provider di servizi padre.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">Aggiunge il servizio specificato al contenitore dei servizi.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Tipo di servizio da aggiungere.</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">Oggetto callback in grado di creare il servizio. Consente di dichiarare un servizio come disponibile ma ritarda la creazione dell'oggetto fino a quando il servizio non verrà richiesto.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> o <paramref name="callback" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">Un servizio del tipo <paramref name="serviceType" /> esiste già nel contenitore.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">Aggiunge il servizio specificato al contenitore dei servizi.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Tipo di servizio da aggiungere.</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">Oggetto callback in grado di creare il servizio. Consente di dichiarare un servizio come disponibile ma ritarda la creazione dell'oggetto fino a quando il servizio non verrà richiesto.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il servizio deve essere aggiunto a tutti i contenitori dei servizi padre. <see langword="false" /> in caso contrario.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> o <paramref name="callback" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">Un servizio del tipo <paramref name="serviceType" /> esiste già nel contenitore.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">Aggiunge il servizio specificato al contenitore dei servizi.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Tipo di servizio da aggiungere.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Istanza del servizio da aggiungere. L'oggetto deve implementare o ereditare dal tipo indicato dal parametro <paramref name="serviceType" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> o <paramref name="serviceInstance" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">Un servizio del tipo <paramref name="serviceType" /> esiste già nel contenitore.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">Aggiunge il servizio specificato al contenitore dei servizi.</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">Tipo di servizio da aggiungere.</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">Istanza del tipo di servizio da aggiungere. L'oggetto deve implementare o ereditare dal tipo indicato dal parametro <paramref name="serviceType" />.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il servizio deve essere aggiunto a tutti i contenitori dei servizi padre. <see langword="false" /> in caso contrario.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> o <paramref name="serviceInstance" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">Un servizio del tipo <paramref name="serviceType" /> esiste già nel contenitore.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary vsli:raw="Gets the default services implemented directly by &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt;.">Ottiene i servizi predefiniti implementati direttamente da <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
      <returns vsli:raw="The default services.">Servizi predefiniti.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary vsli:raw="Disposes this service container.">Elimina il contenitore di servizi corrente.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Disposes this service container.">Elimina il contenitore di servizi corrente.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; is in the process of being disposed of; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.ComponentModel.Design.ServiceContainer" /> sta per essere eliminato; in caso contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service.">Ottiene il servizio richiesto.</summary>
      <param name="serviceType" vsli:raw="The type of service to retrieve.">Tipo di servizio da recuperare.</param>
      <returns vsli:raw="An instance of the service if it could be found, or &lt;see langword=&quot;null&quot; /&gt; if it could not be found.">Istanza del servizio se individuato oppure <see langword="null" /> se non è possibile trovarlo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">Rimuove il tipo di servizio specificato dal contenitore dei servizi.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">Tipo di servizio da rimuovere.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container.">Rimuove il tipo di servizio specificato dal contenitore dei servizi.</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">Tipo di servizio da rimuovere.</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be removed from any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il servizio deve essere rimosso da tutti i contenitori dei servizi padre. <see langword="false" /> in caso contrario.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> è <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary vsli:raw="Provides a callback mechanism that can create an instance of a service on demand.">Fornisce un meccanismo di callback che consente la creazione di un'istanza di un servizio su richiesta.</summary>
      <param name="container" vsli:raw="The service container that requested the creation of the service.">Contenitore dei servizi che ha richiesto la creazione del servizio.</param>
      <param name="serviceType" vsli:raw="The type of service to create.">Tipo di servizio da creare.</param>
      <returns vsli:raw="The service specified by &lt;paramref name=&quot;serviceType&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the service could not be created.">Il servizio specificato da <paramref name="serviceType" /> oppure <see langword="null" /> se non è stato possibile creare il servizio.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary vsli:raw="Defines identifiers for the standard set of commands that are available to most applications.">Definisce gli identificatori per l'insieme standard dei comandi disponibili per la maggior parte delle applicazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardCommands&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.StandardCommands" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignBottom command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando AlignBottom. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignHorizontalCenters command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando AlignHorizontalCenters. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignLeft command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando AlignLeft. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignRight command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando AlignRight. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignToGrid command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando AlignToGrid. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignTop command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando AlignTop. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignVerticalCenters command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando AlignVerticalCenters. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeBottom command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando ArrangeBottom. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeIcons command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando ArrangeIcons. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeRight command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando ArrangeRight. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringForward command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando BringForward. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringToFront command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando BringToFront. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterHorizontally command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando CenterHorizontally. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterVertically command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando CenterVertically. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Copy command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando Copy. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Cut command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando Cut. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Delete command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando Delete. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Document Outline command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando Document Outline. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the F1Help command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando F1Help. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Group command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando Group. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceConcatenate command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando HorizSpaceConcatenate. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceDecrease command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando HorizSpaceDecrease. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceIncrease command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando HorizSpaceIncrease. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceMakeEqual command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando HorizSpaceMakeEqual. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LineupIcons command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando LineupIcons. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LockControls command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando LockControls. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelRedo command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando MultiLevelRedo. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelUndo command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando MultiLevelUndo. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Paste command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando Paste. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Properties command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando Properties. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the PropertiesWindow command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando PropertiesWindow. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Redo command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando Redo. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Replace command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando Replace. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SelectAll command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando SelectAll. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendBackward command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando SendBackward. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendToBack command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando SendToBack. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowGrid command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando ShowGrid. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowLargeIcons command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando ShowLargeIcons. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControl command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando SizeToControl. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlHeight command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando SizeToControlHeight. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlWidth command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando SizeToControlWidth. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToFit command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando SizeToFit. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToGrid command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando SizeToGrid. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SnapToGrid command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando SnapToGrid. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the TabOrder command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando TabOrder. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Undo command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando Undo. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Ungroup command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando Ungroup. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary vsli:raw="Gets the first of a set of verbs. This field is read-only.">Ottiene il primo di un insieme di verbi. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary vsli:raw="Gets the last of a set of verbs. This field is read-only.">Ottiene l'ultimo di un insieme di verbi. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceConcatenate command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando VertSpaceConcatenate. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceDecrease command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando VertSpaceDecrease. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceIncrease command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando VertSpaceIncrease. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceMakeEqual command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando VertSpaceMakeEqual. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewCode command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando ViewCode. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewGrid command. This field is read-only.">Ottiene l'oggetto <see cref="T:System.ComponentModel.Design.CommandID" /> per il comando ViewGrid. Questo campo è di sola lettura.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary vsli:raw="Defines GUID identifiers that correspond to the standard set of tool windows that are available in the design environment.">Definisce gli identificatori GUID che corrispondono all'insieme standard di finestre degli strumenti disponibili nell'ambiente di progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardToolWindows&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.StandardToolWindows" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary vsli:raw="Gets the GUID for the object browser. This field is read-only.">Ottiene il GUID del visualizzatore oggetti. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary vsli:raw="Gets the GUID for the output window. This field is read-only.">Ottiene il GUID della finestra di output. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary vsli:raw="Gets the GUID for the solution explorer. This field is read-only.">Ottiene il GUID di Esplora soluzioni. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary vsli:raw="Gets the GUID for the Properties window. This field is read-only.">Ottiene il GUID della finestra Proprietà. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary vsli:raw="Gets the GUID for the related links frame. This field is read-only.">Ottiene il GUID del frame dei collegamenti correlati. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary vsli:raw="Gets the GUID for the server explorer. This field is read-only.">Ottiene il GUID di Esplora server. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary vsli:raw="Gets the GUID for the task list. This field is read-only.">Ottiene il GUID dell'Elenco attività. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary vsli:raw="Gets the GUID for the Toolbox. This field is read-only.">Ottiene il GUID per la Casella degli strumenti. Questo campo è di sola lettura.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary vsli:raw="Provides a type description provider for a specified type.">Fornisce un provider di descrizioni dei tipi per un tipo specificato.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.TypeDescriptionProviderService&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary vsli:raw="Gets a type description provider for the specified object.">Ottiene un provider di descrizioni dei tipi per l'oggetto specificato.</summary>
      <param name="instance" vsli:raw="The object to get a type description provider for.">Oggetto per cui ottenere un provider di descrizioni dei tipi.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;instance&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> che corrisponde a <paramref name="instance" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary vsli:raw="Gets a type description provider for the specified type.">Ottiene un provider di descrizioni dei tipi per il tipo specificato.</summary>
      <param name="type" vsli:raw="The type to get a type description provider for.">Tipo per cui ottenere un provider di descrizioni dei tipi.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;type&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> che corrisponde a <paramref name="type" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary vsli:raw="Defines identifiers for a set of technologies that designer hosts support.">Definisce gli identificatori per un insieme di tecnologie supportate dagli host di progettazione.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary vsli:raw="Specifies the default view technology support.&#xA;        &#xA;The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host. Hosting environments such as Visual Studio provide a way to plug in new view technology adapters. The default view object for the Windows Forms designer is a &lt;see cref=&quot;T:System.Windows.Forms.Control&quot; /&gt; instance.">Specifica il supporto di tecnologia di visualizzazione predefinito.
La finestra di progettazione radice può restituire qualsiasi tipo di oggetto, ma l'oggetto deve essere compatibile con un adapter per la tecnologia dell'host. Gli ambienti di hosting, ad esempio Visual Studio, consentono di inserire nuovi adapter di tecnologia di visualizzazione. L'oggetto di visualizzazione predefinito per la finestra di progettazione Windows Form è un'istanza <see cref="T:System.Windows.Forms.Control" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary vsli:raw="Represents a mode in which the view object is passed directly to the development environment.&#xA;        &#xA;The view object must implement any interfaces the development environment requires. The Visual Studio development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through the Visual Studio VSI (Visual Studio Integration) program. The Visual Studio development environment provides support for this view technology. Support for this view technology is not necessarily available in all development environments.">Rappresenta una modalità in cui l'oggetto visualizzazione viene passato direttamente all'ambiente di sviluppo.
L'oggetto visualizzazione deve implementare le interfacce richieste dall'ambiente di sviluppo. L'ambiente di sviluppo di Visual Studio supporta gli oggetti di visualizzazione che sono un controllo ActiveX, un documento attivo o un oggetto che implementa l'interfaccia IVsWindowPane disponibile attraverso il programma Integrazione con Visual Studio. L'ambiente di sviluppo di Visual Studio offre il supporto per questa tecnologia di visualizzazione, che non è necessariamente disponibile in tutti gli ambienti di sviluppo.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary vsli:raw="Represents a mode in which a Windows Forms control object provides the display for the root designer. The designer host fills the development environment document window with the Windows Forms control.">Rappresenta una modalità in cui un oggetto controllo Windows Form fornisce la visualizzazione per la finestra di progettazione di primo livello. L'host di progettazione completa la finestra del documento dell'ambiente di sviluppo con il controllo Windows Form.</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>Specifica la classe usata per implementare i servizi in fase di progettazione per un componente.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.DesignerAttribute" /> utilizzando il nome del tipo che fornisce i servizi in fase di progettazione.</summary>
      <param name="designerTypeName">Concatenazione del nome completo del tipo che fornisce i servizi della fase di progettazione per il componente a cui è associato questo attributo e del nome dell'assembly in cui il tipo è contenuto.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.DesignerAttribute" /> utilizzando il tipo e la classe base della finestra di progettazione.</summary>
      <param name="designerTypeName">Concatenazione del nome completo del tipo che fornisce i servizi della fase di progettazione per il componente a cui è associato questo attributo e del nome dell'assembly in cui il tipo è contenuto.</param>
      <param name="designerBaseTypeName">Nome completo della classe base da associare alla classe della finestra di progettazione.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.DesignerAttribute" /> utilizzando il nome della classe e la classe base della finestra di progettazione.</summary>
      <param name="designerTypeName">Concatenazione del nome completo del tipo che fornisce i servizi della fase di progettazione per il componente a cui è associato questo attributo e del nome dell'assembly in cui il tipo è contenuto.</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" /> che rappresenta la classe base da associare al <paramref name="designerTypeName" />.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.DesignerAttribute" /> utilizzando il tipo che fornisce i servizi in fase di progettazione.</summary>
      <param name="designerType">Oggetto <see cref="T:System.Type" /> che rappresenta la classe che fornisce i servizi della fase di progettazione per il componente a cui è associato questo attributo.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.DesignerAttribute" /> utilizzando i tipi e la classe base della finestra di progettazione.</summary>
      <param name="designerType">Oggetto <see cref="T:System.Type" /> che rappresenta la classe che fornisce i servizi della fase di progettazione per il componente a cui è associato questo attributo.</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" /> che rappresenta la classe base da associare al <paramref name="designerType" />.</param>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>Ottiene il nome del tipo di base per questa finestra di progettazione.</summary>
      <returns>Nome del tipo di base per questa finestra di progettazione.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>Ottiene il nome del tipo di finestra di progettazione associato a questo attributo della finestra di progettazione.</summary>
      <returns>Nome del tipo di finestra di progettazione associato a questo attributo della finestra di progettazione.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>Specifica se il valore dell'oggetto specificato è uguale all'oggetto <see cref="T:System.ComponentModel.DesignerAttribute" /> corrente.</summary>
      <param name="obj">Oggetto di cui va verificata l'uguaglianza di valore.</param>
      <returns>
        <see langword="true" /> se il valore dell'oggetto specificato è uguale a quello dell'oggetto corrente. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>Ottiene un ID univoco per questo tipo di attributo.</summary>
      <returns>ID univoco per questo tipo di attributo.</returns>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary vsli:raw="&lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; marks a component's visibility. If &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Yes&quot; /&gt; is present, a visual designer can show this component on a designer.">
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> contrassegna la visibilità di un componente. Se è presente il campo <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" />, una finestra di progettazione visiva consentirà di mostrare il componente in una finestra di progettazione.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; set to the default value of &lt;see langword=&quot;false&quot; /&gt;.">Crea un nuovo oggetto <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> impostato sul valore predefinito <see langword="false" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; with the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property set to the given value in &lt;paramref name=&quot;visible&quot; /&gt;.">Crea un nuovo oggetto <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> con la proprietà<see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> impostata sul valore specificato in <paramref name="visible" />.</summary>
      <param name="visible" vsli:raw="The value that the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property will be set against.">Valore a fronte del quale sarà impostata la proprietà <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" />.</param>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary vsli:raw="The default visibility which is &lt;see langword=&quot;Yes&quot; /&gt;.">Visibilità predefinita uguale a <see langword="Yes" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="obj" vsli:raw="An Object to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Oggetto da confrontare con questa istanza o un riferimento null (<see langword="Nothing" /> in Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> è uguale al tipo e al valore di questa istanza; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value.">Ottiene un valore che indica se l'istanza è uguale al valore <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'istanza è uguale al valore <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" />, <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary vsli:raw="Marks a component as not visible in a visual designer.">Contrassegna un componente come non visibile in una finestra di progettazione visiva.</summary>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary vsli:raw="Gets or sets whether the component should be shown at design time.">Ottiene o indica se il componente deve essere visualizzato in fase di progettazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this component should be shown at design time, or &lt;see langword=&quot;false&quot; /&gt; if it shouldn't.">
        <see langword="true" /> se il componente deve essere visualizzato in fase di progettazione, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary vsli:raw="Marks a component as visible in a visual designer.">Contrassegna un componente come visibile in una finestra di progettazione visiva.</summary>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary vsli:raw="Provides a type converter to convert double-precision, floating point number objects to and from various other representations.">Fornisce un convertitore di tipi per convertire oggetti numero a virgola mobile e precisione doppia in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DoubleConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.DoubleConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>Specifica l'editor da usare per modificare una proprietà. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.EditorAttribute" /> con l'editor predefinito, ovvero nessun editor.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.EditorAttribute" /> con il nome del tipo e il nome del tipo base dell'editor.</summary>
      <param name="typeName">Nome completo del tipo dell'editor.</param>
      <param name="baseTypeName">Nome completo del tipo della classe base o dell'interfaccia da utilizzare come chiave di ricerca dell'editor. Questa classe deve derivare da o corrispondere a <see cref="T:System.Drawing.Design.UITypeEditor" />.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.EditorAttribute" /> con il nome del tipo e il tipo base.</summary>
      <param name="typeName">Nome completo del tipo dell'editor.</param>
      <param name="baseType">
        <see cref="T:System.Type" /> della classe base o dell'interfaccia da utilizzare come chiave di ricerca dell'editor. Questa classe deve derivare da o corrispondere a <see cref="T:System.Drawing.Design.UITypeEditor" />.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.EditorAttribute" />con il tipo e il tipo base.</summary>
      <param name="type">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo dell'editor.</param>
      <param name="baseType">
        <see cref="T:System.Type" /> della classe base o dell'interfaccia da utilizzare come chiave di ricerca dell'editor. Questa classe deve derivare da o corrispondere a <see cref="T:System.Drawing.Design.UITypeEditor" />.</param>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>Ottiene il nome della classe base o dell'interfaccia utilizzata come chiave di ricerca di questo editor.</summary>
      <returns>Il nome della classe base o dell'interfaccia utilizzata come chiave di ricerca di questo editor.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>Ottiene il nome della classe dell'editor nel formato <see cref="P:System.Type.AssemblyQualifiedName" />.</summary>
      <returns>Nome della classe dell'editor nel formato <see cref="P:System.Type.AssemblyQualifiedName" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>Specifica se il valore dell'oggetto specificato è uguale all'oggetto <see cref="T:System.ComponentModel.EditorAttribute" /> corrente.</summary>
      <param name="obj">Oggetto di cui va verificata l'uguaglianza di valore.</param>
      <returns>
        <see langword="true" /> se il valore dell'oggetto specificato è uguale a quello dell'oggetto corrente, <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>Ottiene un ID univoco per questo tipo di attributo.</summary>
      <returns>ID univoco per questo tipo di attributo.</returns>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Enum&quot; /&gt; objects to and from various other representations.">Fornisce un convertitore di tipi per convertire oggetti <see cref="T:System.Enum" /> in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EnumConverter&quot; /&gt; class for the given type.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.EnumConverter" /> per il tipo specificato.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of enumeration to associate with this enumeration converter.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di enumerazione da associare a questo convertitore di enumerazioni.</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to an enumeration object using the specified context.">Ottiene un valore che indica se il convertitore può convertire un oggetto dal tipo di origine specificato in un oggetto enumerazione utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo dal quale si desidera effettuare la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ottiene un valore che indica se questo convertitore può convertire un oggetto nel tipo di destinazione specificato usando il contesto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Tipo <see cref="T:System.Type" /> che rappresenta il tipo di destinazione della conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; that can be used to sort the values of the enumeration.">Ottiene un'interfaccia <see cref="T:System.Collections.IComparer" /> che può essere utilizzata per ordinare i valori dell'enumerazione.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; for sorting the enumeration values.">Oggetto <see cref="T:System.Collections.IComparer" /> per l'ordinamento dei valori dell'enumerazione.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to an enumeration object.">Converte l'oggetto valore specificato in un oggetto enumerazione.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> facoltativo. Se non vengono specificate impostazioni cultura, vengono utilizzate quelle correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> che rappresenta la conversione di <paramref name="value" />.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> non è un valore valido per il tipo di destinazione.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Converte l'oggetto valore specificato nel tipo di destinazione specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> facoltativo. Se non vengono specificate impostazioni cultura, vengono utilizzate quelle correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Tipo <see cref="T:System.Type" /> in cui convertire il valore.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> che rappresenta la conversione di <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the enumeration.">
        <paramref name="value" /> non è un valore valido per l'enumerazione.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary vsli:raw="Specifies the type of the enumerator this converter is associated with.">Specifica il tipo di enumeratore a cui è associato il convertitore.</summary>
      <returns vsli:raw="The type of the enumerator this converter is associated with.">Tipo di enumeratore a cui è associato il convertitore.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">Ottiene un insieme di valori standard per il tipo di dati per cui è progettato questo validator.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Insieme <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> con un set standard di valori validi oppure <see langword="null" /> se il tipo di dati non supporta un set standard di valori.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list using the specified context.">Ottiene un valore che indica se l'elenco di valori standard restituito dal metodo <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> è un elenco esclusivo utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" /> se l'insieme <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> restituito dal metodo <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> rappresenta un elenco completo dei valori possibili. <see langword="false" /> se sono possibili altri valori.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">Ottiene un valore che indica se il convertitore supporta un insieme di valori standard che possono essere selezionati da un elenco utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> perché è necessario chiamare il metodo <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> per trovare un insieme comune di valori supportati dall'oggetto. Questo metodo non restituisce mai <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Gets a value indicating whether the given object value is valid for this type.">Ottiene un valore che indica se il valore dell'oggetto specificato è valido per questo tipo.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test.">Oggetto <see cref="T:System.Object" /> da verificare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore specificato è valido per questo oggetto. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary vsli:raw="Gets or sets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">Ottiene o imposta un oggetto <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> che specifica i valori possibili per l'enumerazione.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">Oggetto <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> che specifica i valori possibili per l'enumerazione.</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary vsli:raw="Provides information about an event.">Include informazioni su un evento.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.EventDescriptor" /> con il nome e gli attributi nell'oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> specificato.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the event and its attributes.">Un oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> che contiene il nome dell'evento e i relativi attributi.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.EventDescriptor" /> con il nome nell'oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> specificato e gli attributi nell'oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> e nella matrice <see cref="T:System.Attribute" />.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">Oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> che ha il nome del membro e i relativi attributi.</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes you want to add to this event description.">Matrice <see cref="T:System.Attribute" /> con gli attributi che si desidera aggiungere alla descrizione dell'evento.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the specified name and attribute array.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.EventDescriptor" /> con il nome specificato e la matrice degli attributi.</summary>
      <param name="name" vsli:raw="The name of the event.">Nome dell'evento.</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the event attributes.">Matrice di tipo <see cref="T:System.Attribute" /> contenente gli attributi dell'evento.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, binds the event to the component.">Quando è sottoposto a override in una classe derivata, consente di associare l'evento al componente.</summary>
      <param name="component" vsli:raw="A component that provides events to the delegate.">Componente che fornisce eventi al delegato.</param>
      <param name="value" vsli:raw="A delegate that represents the method that handles the event.">Delegato che rappresenta il metodo con cui viene gestito l'evento.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of component this event is bound to.">Quando è sottoposto a override in una classe derivata, consente di ottenere il tipo di componente a cui l'evento è associato.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component the event is bound to.">Un oggetto <see cref="T:System.Type" /> che rappresenta il tipo di componente a cui l'evento è associato.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary vsli:raw="When overridden in a derived class, gets the type of delegate for the event.">Quando è sottoposto a override in una classe derivata, consente di ottenere il tipo di delegato dell'evento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of delegate for the event.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di delegato dell'evento.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the event delegate is a multicast delegate.">Quando è sottoposto a override in una classe derivata, consente di ottenere un valore che indica se il delegato dell'evento è di tipo multicast.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event delegate is multicast; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il delegato dell'evento è multicast; in caso contrario,<see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, unbinds the delegate from the component so that the delegate will no longer receive events from the component.">Quando è sottoposto a override in una classe derivata, consente di separare il delegato dal componente in modo che il delegato non riceva più eventi dal componente.</summary>
      <param name="component" vsli:raw="The component that the delegate is bound to.">Il componente al quale è associato il delegato.</param>
      <param name="value" vsli:raw="The delegate to unbind from the component.">Il delegato da separare dal componente.</param>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.ComponentModel.EventDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.EventDescriptorCollection" /> con la matrice di oggetti <see cref="T:System.ComponentModel.EventDescriptor" /> specificata.</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">Matrice di tipo <see cref="T:System.ComponentModel.EventDescriptor" /> che fornisce gli eventi per questo insieme.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects. The collection is optionally read-only.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.EventDescriptorCollection" /> con la matrice di oggetti <see cref="T:System.ComponentModel.EventDescriptor" /> specificata. L'insieme è facoltativamente di sola lettura.</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">Matrice di tipo <see cref="T:System.ComponentModel.EventDescriptor" /> che fornisce gli eventi per questo insieme.</param>
      <param name="readOnly" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify a read-only collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per specificare un insieme di sola lettura; in caso contrario <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Adds an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the end of the collection.">Consente di aggiungere un oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to add to the collection.">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> da aggiungere all'insieme.</param>
      <returns vsli:raw="The position of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">Posizione dell'oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> all'interno dell'insieme.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary vsli:raw="Removes all objects from the collection.">Rimuove tutti gli oggetti dalla raccolta.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">Indica se l'insieme contiene il dato oggetto <see cref="T:System.ComponentModel.EventDescriptor" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> da trovare all'interno dell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the &lt;paramref name=&quot;value&quot; /&gt; parameter given; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme contiene il parametro <paramref name="value" /> specificato, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of event descriptors in the collection.">Ottiene il numero di descrittori di evento dell'insieme.</summary>
      <returns vsli:raw="The number of event descriptors in the collection.">Numero di descrittori di evento dell'insieme.</returns>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection to use, rather than creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Consente di specificare un insieme vuoto da utilizzare, invece di crearne uno nuovo senza elementi. Questo campo <see langword="static" /> è di sola lettura.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Gets the description of the event with the specified name in the collection.">Ottiene la descrizione dell'evento con il nome specificato nell'insieme.</summary>
      <param name="name" vsli:raw="The name of the event to get from the collection.">Nome dell'evento da ottenere dall'insieme.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the event; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se si desidera ignorare la distinzione fra maiuscole e minuscole dell'evento, in caso contrario <see langword="false" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">L'oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> con il nome specificato oppure <see langword="null" /> se l'evento non esiste.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Ottiene un enumeratore per questo oggetto <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</summary>
      <returns vsli:raw="An enumerator that implements &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Enumeratore che implementa <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">Restituisce l'indice dell'oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> da trovare all'interno dell'insieme.</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">Indice dell'oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> specificato all'interno dell'insieme.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Inserts an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the collection at a specified index.">Consente di inserire un oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> nell'insieme in corrispondenza di un indice specificato.</summary>
      <param name="index" vsli:raw="The index within the collection in which to insert the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Indice all'interno dell'insieme in corrispondenza del quale inserire il parametro <paramref name="value" />.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to insert into the collection.">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> da inserire nell'insieme.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Consente di ordinare i membri di <see cref="T:System.ComponentModel.EventDescriptorCollection" /> utilizzando l'oggetto <see cref="T:System.Collections.IComparer" /> specificato.</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Operatore di confronto da utilizzare per ordinare gli oggetti <see cref="T:System.ComponentModel.EventDescriptor" /> in questo insieme.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">Consente di ordinare i membri di <see cref="T:System.ComponentModel.EventDescriptorCollection" />. Viene applicato per primo l'ordinamento specificato, seguito dall'ordinamento predefinito di questo insieme, generalmente in ordine alfabetico.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Matrice di stringhe che descrive la sequenza in cui ordinare gli oggetti <see cref="T:System.ComponentModel.EventDescriptor" /> nell'insieme.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the event with the specified index number.">Ottiene o imposta l'evento con il numero di indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index number of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">Numero dell'indice in base zero dell'oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> da ottenere o impostare.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified index number.">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> con il numero di indice specificato.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)&quot; /&gt;.">
        <paramref name="index" /> non è un indice valido per <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the event with the specified name.">Ottiene o imposta l'evento con il nome specificato.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">Nome dell'oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> da ottenere o impostare.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">L'oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> con il nome specificato oppure <see langword="null" /> se l'evento non esiste.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; from the collection.">Rimuove l'oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> specificato dalla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove from the collection.">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> da rimuovere dalla raccolta.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; at the specified index from the collection.">Rimuove l'oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> in corrispondenza dell'indice specificato dall'insieme.</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove.">Indice dell'oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> da rimuovere.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the default sort for this collection, which is usually alphabetical.">Consente di ordinare i membri di <see cref="T:System.ComponentModel.EventDescriptorCollection" /> utilizzando la sequenza predefinita di questo insieme, generalmente in ordine alfabetico.</summary>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Nuovo oggetto <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Consente di ordinare i membri di <see cref="T:System.ComponentModel.EventDescriptorCollection" /> utilizzando l'oggetto <see cref="T:System.Collections.IComparer" /> specificato.</summary>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Oggetto <see cref="T:System.Collections.IComparer" /> da utilizzare per ordinare gli oggetti <see cref="T:System.ComponentModel.EventDescriptor" /> in questo insieme.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Nuovo oggetto <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order.">Consente di ordinare i membri di <see cref="T:System.ComponentModel.EventDescriptorCollection" />, in base a una sequenza di ordinamento specificata.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">Matrice di stringhe che descrive la sequenza in cui ordinare gli oggetti <see cref="T:System.ComponentModel.EventDescriptor" /> nell'insieme.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Nuovo oggetto <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order and an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Consente di ordinare i membri di <see cref="T:System.ComponentModel.EventDescriptorCollection" />, in base a una sequenza di ordinamento specificata e a un oggetto <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">Matrice di stringhe che descrive la sequenza in cui ordinare gli oggetti <see cref="T:System.ComponentModel.EventDescriptor" /> nell'insieme.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">Oggetto <see cref="T:System.Collections.IComparer" /> da utilizzare per ordinare gli oggetti <see cref="T:System.ComponentModel.EventDescriptor" /> in questo insieme.</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">Nuovo oggetto <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia gli elementi dell'insieme in un oggetto <see cref="T:System.Array" />, a partire da uno specifico indice di <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">Oggetto <see cref="T:System.Array" /> unidimensionale che rappresenta la destinazione degli elementi copiati dall'insieme. L'indicizzazione di <see cref="T:System.Array" /> deve essere in base zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Ottiene il numero di elementi contenuti nella raccolta.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">Numero di elementi contenuti nella raccolta.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized.">Ottiene un valore che indica se l'accesso all'insieme è sincronizzato.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'accesso all'insieme è sincronizzato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Ottiene un oggetto che può essere usato per sincronizzare l'accesso alla raccolta.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Oggetto che può essere usato per sincronizzare l'accesso alla raccolta.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Oggetto <see cref="T:System.Collections.IEnumerator" /> che può essere usato per eseguire l'iterazione della raccolta.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">Aggiunge un elemento alla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the collection.">Oggetto <see cref="T:System.Object" /> da aggiungere alla raccolta.</param>
      <returns vsli:raw="The position into which the new element was inserted.">Posizione in cui è stato inserito il nuovo elemento.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all the items from the collection.">Rimuove tutti gli elementi dalla raccolta.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">Determina se la raccolta contiene un valore specifico.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Oggetto <see cref="T:System.Object" /> da individuare nella raccolta.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <see cref="T:System.Object" /> viene trovato nell'insieme; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">Determina l'indice di un elemento specifico dell'insieme.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Oggetto <see cref="T:System.Object" /> da individuare nella raccolta.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Indice di <paramref name="value" />, se presente nell'elenco; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the collection at the specified index.">Inserisce un elemento nell'insieme in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Indice in base zero nel quale <paramref name="value" /> deve essere inserito.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">Oggetto <see cref="T:System.Object" /> da inserire nella raccolta.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Ottiene un valore che indica se la dimensione della raccolta è fissa.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la raccolta è di dimensioni fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Ottiene un valore che indica se la raccolta è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la raccolta è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Ottiene o imposta l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">Indice in base zero dell'elemento da ottenere o impostare.</param>
      <returns vsli:raw="The element at the specified index.">Elemento in corrispondenza dell'indice specificato.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">
        <paramref name="index" /> è minore di 0.  
-oppure- 
 <paramref name="index" /> è uguale a o maggiore di <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">Rimuove la prima occorrenza di un oggetto specifico dalla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">Oggetto <see cref="T:System.Object" /> da rimuovere dalla raccolta.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Rimuove l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Indice in base zero dell'elemento da rimuovere.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary vsli:raw="Provides a type converter to convert expandable objects to and from various other representations.">Fornisce un convertitore di tipi per convertire oggetti espandibili in e da numerose altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExpandableObjectConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ExpandableObjectConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of object specified by the value parameter.">Ottiene un insieme di proprietà per il tipo di oggetto specificato dal parametro del valore.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of object to get the properties for.">Oggetto <see cref="T:System.Object" /> che specifica il tipo di oggetto di cui ottenere le proprietà.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> che verrà utilizzata come filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà esposte per il componente oppure <see langword="null" /> se non sono specificate proprietà.</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">Ottiene un valore che indica se l'oggetto supporta le proprietà utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> perché è necessario chiamare il metodo <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> per individuare le proprietà dell'oggetto. Questo metodo non restituisce mai <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary vsli:raw="Specifies a property that is offered by an extender provider. This class cannot be inherited.">Specifica una proprietà offerta da un provider di estensione. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExtenderProvidedPropertyAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Oggetto <see cref="T:System.Object" /> da confrontare con questa istanza o un riferimento null (<see langword="Nothing" /> in Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> è uguale al tipo e al valore di questa istanza; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary vsli:raw="Gets the property that is being provided.">Ottiene la proprietà fornita.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; encapsulating the property that is being provided.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che incapsula la proprietà fornita.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary vsli:raw="Provides an indication whether the value of this instance is the default value for the derived class.">Indica se il valore dell'istanza è il valore predefinito della classe derivata.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questa istanza è l'attributo predefinito per la classe. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary vsli:raw="Gets the extender provider that is providing the property.">Ottiene il provider di estensione che fornisce la proprietà.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that is providing the property.">Oggetto <see cref="T:System.ComponentModel.IExtenderProvider" /> che fornisce la proprietà.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary vsli:raw="Gets the type of object that can receive the property.">Ottiene il tipo di oggetto che può ricevere la proprietà.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; describing the type of object that can receive the property.">Tipo <see cref="T:System.Type" /> che descrive il tipo di oggetto che può ricevere la proprietà.</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Guid&quot; /&gt; objects to and from various other representations.">Fornisce un convertitore di tipi per convertire oggetti <see cref="T:System.Guid" /> in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.GuidConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.GuidConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a GUID object using the context.">Ottiene un valore che indica se il convertitore può convertire un oggetto dal tipo di origine specificato in un oggetto GUID utilizzando il contesto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo dal quale si desidera effettuare la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ottiene un valore che indica se questo convertitore può convertire un oggetto nel tipo di destinazione specificato usando il contesto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Tipo <see cref="T:System.Type" /> che rappresenta il tipo di destinazione della conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a GUID object.">Converte l'oggetto specificato in un oggetto GUID.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> facoltativo. Se non vengono specificate impostazioni cultura, vengono utilizzate quelle correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> che rappresenta la conversione di <paramref name="value" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">Converte l'oggetto specificato in un altro tipo.</summary>
      <param name="context" vsli:raw="A formatter context.">Contesto di un formattatore.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Le impostazioni cultura in cui <paramref name="value" /> verrà convertito.</param>
      <param name="value" vsli:raw="The object to convert.">Oggetto da convertire.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Tipo in cui convertire l'oggetto.</param>
      <returns vsli:raw="The converted object.">Oggetto convertito.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary vsli:raw="Provides data for events that can be handled completely in an event handler.">Fornisce i dati per gli eventi che possono essere interamente gestiti dal gestore eventi.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with a default &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property value of &lt;see langword=&quot;false&quot; /&gt;.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.HandledEventArgs" /> con un valore predefinito della proprietà <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> di <see langword="false" />.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with the specified default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.HandledEventArgs" /> con il valore predefinito specificato per la proprietà <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</summary>
      <param name="defaultHandledValue" vsli:raw="The default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">Valore predefinito per la proprietà <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary vsli:raw="Gets or sets a value that indicates whether the event handler has completely handled the event or whether the system should continue its own processing.">Ottiene o imposta un valore che indica se il gestore eventi ha gestito completamente l'evento o se il sistema deve proseguire la propria elaborazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been completely handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'evento è stato gestito completamente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary vsli:raw="Represents a method that can handle events which may or may not require further processing after the event handler has returned.">Rappresenta un metodo in grado di gestire gli eventi che richiedano o non richiedano ulteriore elaborazione dopo essere stati restituiti dal gestore eventi.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origine dell'evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; that contains the event data.">Oggetto <see cref="T:System.ComponentModel.HandledEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary vsli:raw="Provides the features required to support both complex and simple scenarios when binding to a data source.">Fornisce le funzionalità necessarie per supportare scenari semplici e complessi quando si effettua un'associazione a un'origine dati.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the indexes used for searching.">Consente di aggiungere l'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> agli indici utilizzati per la ricerca.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the indexes used for searching.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> da aggiungere agli indici utilizzati per la ricerca.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary vsli:raw="Adds a new item to the list.">Consente di aggiungere un nuovo elemento all'elenco.</summary>
      <returns vsli:raw="The item added to the list.">Elemento aggiunto all'elenco.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowNew&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> è <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary vsli:raw="Gets whether you can update items in the list.">Indica se è possibile aggiornare gli elementi dell'elenco.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can update the items in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è possibile aggiornare gli elementi dell'elenco, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary vsli:raw="Gets whether you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">Indica se è possibile aggiungere elementi all'elenco utilizzando il metodo <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è possibile aggiungere elementi all'elenco utilizzando il metodo <see cref="M:System.ComponentModel.IBindingList.AddNew" />, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary vsli:raw="Gets whether you can remove items from the list, using &lt;see cref=&quot;M:System.Collections.IList.Remove(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.Collections.IList.RemoveAt(System.Int32)&quot; /&gt;.">Indica se è possibile rimuovere elementi dall'elenco utilizzando il metodo <see cref="M:System.Collections.IList.Remove(System.Object)" /> o il metodo <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è possibile rimuovere elementi dall'elenco, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;.">Ordina l'elenco in base a un oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> e a un oggetto <see cref="T:System.ComponentModel.ListSortDirection" />.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> in base al quale effettuare l'ordinamento.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Uno dei valori di <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Returns the index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Consente di restituire l'indice della riga che presenta il dato oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> in base al quale effettuare la ricerca.</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;property&quot; /&gt; parameter to search for.">Valore del parametro <paramref name="property" /> da ricercare.</param>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Indice della riga che presenta il dato oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> è <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary vsli:raw="Gets whether the items in the list are sorted.">Indica se gli elementi dell'elenco sono ordinati.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è stato chiamato il metodo <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> e non il metodo <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />, in caso contrario <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> è <see langword="false" />.</exception>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary vsli:raw="Occurs when the list changes or an item in the list changes.">Si verifica quando viene modificato l'elenco o un elemento dell'elenco.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the indexes used for searching.">Consente di rimuovere l'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> dagli indici utilizzati per la ricerca.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> da rimuovere dagli indici utilizzati per la ricerca.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary vsli:raw="Removes any sort applied using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">Consente di rimuovere qualsiasi ordinamento applicato utilizzando il metodo <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> è <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary vsli:raw="Gets the direction of the sort.">Ottiene la direzione dell'ordinamento.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Uno dei valori di <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> è <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">Ottiene l'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che viene utilizzato per l'ordinamento.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che viene utilizzato per l'ordinamento.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> è <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary vsli:raw="Gets whether a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or an item in the list changes.">Indica se viene generato un evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> quando viene modificato l'elenco o un elemento dell'elenco.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se viene generato un evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> quando viene modificato l'elenco o un elemento dell'elenco, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary vsli:raw="Gets whether the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method.">Indica se l'elenco supporta la ricerca con il metodo <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elenco supporta la ricerca con il metodo <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary vsli:raw="Gets whether the list supports sorting.">Indica se l'elenco supporta l'ordinamento.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elenco supporta l'ordinamento, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary vsli:raw="Extends the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; interface by providing advanced sorting and filtering capabilities.">Estende l'interfaccia <see cref="T:System.ComponentModel.IBindingList" /> fornendo funzionalità di ordinamento e di filtraggio avanzate.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary vsli:raw="Sorts the data source based on the given &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">Ordina l'origine dati in base a <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</summary>
      <param name="sorts" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; containing the sorts to apply to the data source.">Oggetto <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> che contiene gli ordinamenti da applicare all'origine dati.</param>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary vsli:raw="Gets or sets the filter to be used to exclude items from the collection of items returned by the data source.">Ottiene o imposta il filtro da utilizzare per escludere degli elementi dall'insieme di elementi restituiti dall'origine dati.</summary>
      <returns vsli:raw="The string used to filter items out in the item collection returned by the data source.">Stringa utilizzata per filtrare gli elementi compresi nell'insieme di elementi restituiti dall'origine dati.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary vsli:raw="Removes the current filter applied to the data source.">Rimuove il filtro correntemente applicato all'origine dati.</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary vsli:raw="Gets the collection of sort descriptions currently applied to the data source.">Ottiene l'insieme delle descrizioni di ordinamento correntemente applicate all'origine dati.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; currently applied to the data source.">Oggetto <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> correntemente applicato all'origine dati.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary vsli:raw="Gets a value indicating whether the data source supports advanced sorting.">Ottiene un valore che indica se l'origine dati supporta l'ordinamento avanzato.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports advanced sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'origine dati supporta l'ordinamento avanzato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary vsli:raw="Gets a value indicating whether the data source supports filtering.">Ottiene un valore che indica se l'origine dati supporta il filtraggio.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports filtering; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'origine dati supporta il filtraggio; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary vsli:raw="Adds transactional capability when adding a new item to a collection.">Aggiunge funzionalità transazionali al momento dell'aggiunta di un nuovo elemento a un insieme.</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item from the collection.">Elimina dall'insieme un nuovo elemento in sospeso.</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">Indice dell'elemento precedentemente aggiunto all'insieme.</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">Esegue il commit di un nuovo elemento in sospeso nell'insieme.</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">Indice dell'elemento precedentemente aggiunto all'insieme.</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary vsli:raw="Provides a top-level mapping layer between a COM object and a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Fornisce un livello di mapping di livello principale tra un oggetto COM e <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary vsli:raw="Gets the attributes for the specified component.">Ottiene gli attributi per il componente specificato.</summary>
      <param name="component" vsli:raw="The component to get attributes for.">Componente per il quale ottenere gli attributi.</param>
      <returns vsli:raw="A collection of attributes for &lt;paramref name=&quot;component&quot; /&gt;.">Insieme di attributi per <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary vsli:raw="Gets the class name for the specified component.">Ottiene il nome della classe per il componente specificato.</summary>
      <param name="component" vsli:raw="The component to get the class name for.">Componente per il quale ottenere il nome della classe.</param>
      <returns vsli:raw="The name of the class that corresponds with &lt;paramref name=&quot;component&quot; /&gt;.">Nome della classe corrispondente a <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary vsli:raw="Gets the type converter for the specified component.">Ottiene il convertitore di tipi per il componente specificato.</summary>
      <param name="component" vsli:raw="The component to get the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for.">Componente per il quale ottenere <see cref="T:System.ComponentModel.TypeConverter" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for &lt;paramref name=&quot;component&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.TypeConverter" /> per <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Gets the default event for the specified component.">Ottiene l'evento predefinito per il componente specificato.</summary>
      <param name="component" vsli:raw="The component to get the default event for.">Componente per il quale ottenere l'evento predefinito.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default event.">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> che rappresenta l'evento predefinito di <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Gets the default property for the specified component.">Ottiene la proprietà predefinita per il componente specificato.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">Componente per cui ottenere la proprietà predefinita.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default property.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che rappresenta la proprietà predefinita di <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets the editor for the specified component.">Ottiene l'editor per il componente specificato.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">Componente per il quale ottenere l'editor.</param>
      <param name="baseEditorType" vsli:raw="The base type of the editor for &lt;paramref name=&quot;component&quot; /&gt;.">Tipo base dell'editor per <paramref name="component" />.</param>
      <returns vsli:raw="The editor for &lt;paramref name=&quot;component&quot; /&gt;.">Editor per <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary vsli:raw="Gets the events for the specified component.">Ottiene gli eventi per il componente specificato.</summary>
      <param name="component" vsli:raw="The component to get events for.">Componente per il quale ottenere gli eventi.</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">Insieme di descrittori di evento per <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the events with the specified attributes for the specified component.">Ottiene gli eventi con gli attributi specificati per il componente specificato.</summary>
      <param name="component" vsli:raw="The component to get events for.">Componente per il quale ottenere gli eventi.</param>
      <param name="attributes" vsli:raw="The attributes used to filter events.">Attributi utilizzati per filtrare gli eventi.</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">Insieme di descrittori di evento per <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">Ottiene il nome del componente specificato.</summary>
      <param name="component" vsli:raw="The component to get the name of.">Componente di cui ottenere il nome.</param>
      <returns vsli:raw="The name of &lt;paramref name=&quot;component&quot; /&gt;.">Nome dell'oggetto <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the properties with the specified attributes for the specified component.">Ottiene le proprietà con gli attributi specificati per il componente specificato.</summary>
      <param name="component" vsli:raw="The component to get events for.">Componente per il quale ottenere gli eventi.</param>
      <param name="attributes" vsli:raw="The attributes used to filter properties.">Attributi utilizzati per filtrare le proprietà.</param>
      <returns vsli:raw="A collection of property descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">Insieme di descrittori di proprietà per <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified dispatch identifier.">Ottiene il valore della proprietà con l'ID dispatch specificato.</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">Oggetto a cui appartiene la proprietà.</param>
      <param name="dispid" vsli:raw="The dispatch identifier.">ID dispatch.</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">Oggetto <see cref="T:System.Boolean" />, passato per riferimento, che rappresenta un valore che indica se la proprietà è stata recuperata.</param>
      <returns vsli:raw="The value of the property that has the specified dispatch identifier.">Valore della proprietà con l'ID dispatch specificato.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified name.">Ottiene il valore della proprietà con il nome specificato.</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">Oggetto a cui appartiene la proprietà.</param>
      <param name="propertyName" vsli:raw="The name of the property.">Nome della proprietà.</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">Oggetto <see cref="T:System.Boolean" />, passato per riferimento, che rappresenta un valore che indica se la proprietà è stata recuperata.</param>
      <returns vsli:raw="The value of the property that has the specified name.">Valore della proprietà con il nome specificato.</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary vsli:raw="Provides an interface that supplies dynamic custom type information for an object.">Fornisce un'interfaccia che riporta informazioni dinamiche di tipo personalizzato per un oggetto.</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for this instance of a component.">Restituisce una raccolta di attributi personalizzati per questa istanza di un componente.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for this object.">Oggetto <see cref="T:System.ComponentModel.AttributeCollection" /> contenente gli attributi per l'oggetto.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the class name of this instance of a component.">Restituisce il nome della classe di questa istanza di un componente.</summary>
      <returns vsli:raw="The class name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the class does not have a name.">Il nome della classe dell'oggetto, o <see langword="null" />, se la classe non ha un nome.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of this instance of a component.">Restituisce il nome di questa istanza di un componente.</summary>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object does not have a name.">Il nome dell'oggetto, o <see langword="null" />, se l'oggetto non ha un nome.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for this instance of a component.">Restituisce un convertitore di tipi per questa istanza di un componente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is the converter for this object, or &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for this object.">Oggetto <see cref="T:System.ComponentModel.TypeConverter" /> che costituisce il convertitore per l'oggetto oppure <see langword="null" /> se non esiste alcun <see cref="T:System.ComponentModel.TypeConverter" /> per l'oggetto.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the default event for this instance of a component.">Restituisce l'evento predefinito per questa istanza di un componente.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents the default event for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have events.">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> che rappresenta l'evento predefinito per questo oggetto oppure <see langword="null" /> se questo oggetto non ha eventi.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the default property for this instance of a component.">Restituisce la proprietà predefinita per questa istanza di un componente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the default property for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have properties.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che rappresenta la proprietà predefinita per questo oggetto oppure <see langword="null" /> se questo oggetto non ha proprietà.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type for this instance of a component.">Restituisce un editor del tipo specificato per questa istanza di un componente.</summary>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the editor for this object.">Oggetto <see cref="T:System.Type" /> che rappresenta l'editor per questo oggetto.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type that is the editor for this object, or &lt;see langword=&quot;null&quot; /&gt; if the editor cannot be found.">Oggetto <see cref="T:System.Object" /> del tipo specificato che costituisce l'editor per questo oggetto oppure <see langword="null" /> se l'editor non è stato trovato.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns the events for this instance of a component.">Restituisce gli eventi per questa istanza di un componente.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the events for this component instance.">Oggetto <see cref="T:System.ComponentModel.EventDescriptorCollection" /> che rappresenta gli eventi per questa istanza del componente.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns the events for this instance of a component using the specified attribute array as a filter.">Restituisce gli eventi per questa istanza di un componente usando come filtro la matrice di attributi specificata.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> usata come filtro.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the filtered events for this component instance.">Oggetto <see cref="T:System.ComponentModel.EventDescriptorCollection" /> che rappresenta gli eventi filtrati per questa istanza del componente.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns the properties for this instance of a component.">Restituisce le proprietà per questa istanza di un componente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties for this component instance.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> che rappresenta le proprietà per questa istanza del componente.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns the properties for this instance of a component using the attribute array as a filter.">Restituisce le proprietà per questa istanza di un componente usando come filtro la matrice di attributi.</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> usata come filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the filtered properties for this component instance.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> che rappresenta le proprietà filtrate per questa istanza del componente.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">Restituisce un oggetto che contiene la proprietà descritta dal descrittore di proprietà specificato.</summary>
      <param name="pd" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the property whose owner is to be found.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che rappresenta la proprietà per cui deve essere trovato il proprietario.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the owner of the specified property.">Oggetto <see cref="T:System.Object" /> che rappresenta il proprietario della proprietà specificata.</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary vsli:raw="Provides the functionality to offer custom error information that a user interface can bind to.">Fornisce le funzionalità che offrono informazioni personalizzate sugli errori alle quali può essere associata un'interfaccia utente.</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary vsli:raw="Gets an error message indicating what is wrong with this object.">Ottiene un messaggio di errore che indica l'errore relativo a questo oggetto.</summary>
      <returns vsli:raw="An error message indicating what is wrong with this object. The default is an empty string (&quot;&quot;).">Messaggio di errore che indica l'errore relativo a questo oggetto. Il valore predefinito è una stringa vuota ("").</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary vsli:raw="Gets the error message for the property with the given name.">Ottiene il messaggio di errore per la proprietà con il nome specificato.</summary>
      <param name="columnName" vsli:raw="The name of the property whose error message to get.">Nome della proprietà di cui ottenere il messaggio di errore.</param>
      <returns vsli:raw="The error message for the property. The default is an empty string (&quot;&quot;).">Messaggio di errore per la proprietà. Il valore predefinito è una stringa vuota ("").</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary vsli:raw="Defines the interface for extending properties to other components in a container.">Viene definita l'interfaccia per l'estensione delle proprietà ad altri componenti in un contenitore.</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary vsli:raw="Specifies whether this object can provide its extender properties to the specified object.">Consente di specificare se questo oggetto può fornire le proprietà di estensione all'oggetto specificato.</summary>
      <param name="extendee" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to receive the extender properties.">Oggetto <see cref="T:System.Object" /> che riceverà le proprietà di estensione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can provide extender properties to the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questo oggetto è in grado di fornire proprietà di estensione all'oggetto specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary vsli:raw="Provides an interface to facilitate the retrieval of the builder's name and to display the builder.">Fornisce un'interfaccia che agevola il recupero del nome del generatore e la sua visualizzazione.</summary>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary vsli:raw="Gets a localized name.">Ottiene un nome localizzato.</summary>
      <returns vsli:raw="A localized name.">Nome localizzato.</returns>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary vsli:raw="Shows the builder.">Visualizza il generatore.</summary>
      <param name="language" vsli:raw="The language service that is calling the builder.">Linguaggio del servizio che chiama il generatore.</param>
      <param name="value" vsli:raw="The expression being edited.">Espressione da modificare.</param>
      <param name="newValue" vsli:raw="The new value.">Nuovo valore.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value should be replaced with &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt; (if the user cancels, for example).">
        <see langword="true" /> se il valore deve essere sostituito con <paramref name="newValue" />; in caso contrario, <see langword="false" /> se, ad esempio, l'utente annulla l'operazione.</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary vsli:raw="Provides functionality to an object to return a list that can be bound to a data source.">Consente di fornire a un oggetto le funzionalità per restituire un elenco che possa essere associato a un'origine dati.</summary>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary vsli:raw="Gets a value indicating whether the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects.">Ottiene un valore che indica se l'insieme è costituito da oggetti <see cref="T:System.Collections.IList" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme è costituito da oggetti <see cref="T:System.Collections.IList" />, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from an object that does not implement an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; itself.">Restituisce un oggetto <see cref="T:System.Collections.IList" /> che può essere associato a un'origine dati da un oggetto che non implementa un'interfaccia <see cref="T:System.Collections.IList" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from the object.">Un oggetto <see cref="T:System.Collections.IList" /> che può essere associato a un'origine dati dall'oggetto.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary vsli:raw="Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.">Fornisce funzionalità per i contenitori annidati, contenitori logici di zero o più componenti che appartengono a un componente padre.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for the nested container.">Ottiene il componente proprietario per il contenitore annidato.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns the nested container.">Oggetto <see cref="T:System.ComponentModel.IComponent" /> che possiede il contenitore annidato.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary vsli:raw="Provides the ability to retrieve the full nested name of a component.">Consente di recuperare il nome completo annidato di un componente.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary vsli:raw="Gets the full name of the component in this site.">Ottiene il nome completo del componente in questo sito.</summary>
      <returns vsli:raw="The full name of the component in this site.">Nome completo del componente in questo sito.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary vsli:raw="Indicates whether the component associated with this attribute has been inherited from a base class. This class cannot be inherited.">Indica se il componente associato a questo attributo è stato ereditato da una classe base. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.InheritanceAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class with the specified inheritance level.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.InheritanceAttribute" /> con il livello di ereditarietà specificato.</summary>
      <param name="inheritanceLevel" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; that indicates the level of inheritance to set this attribute to.">Un oggetto <see cref="T:System.ComponentModel.InheritanceLevel" /> che indica il livello di ereditarietà su cui impostare questo attributo.</param>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary vsli:raw="Specifies that the default value for &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; is &lt;see cref=&quot;F:System.ComponentModel.InheritanceAttribute.NotInherited&quot; /&gt;. This field is read-only.">Consente di specificare che il valore predefinito di <see cref="T:System.ComponentModel.InheritanceAttribute" /> è <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />. Questo campo è di sola lettura.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary vsli:raw="Override to test for equality.">Esegue l'override per verificare l'uguaglianza.</summary>
      <param name="value" vsli:raw="The object to test.">Oggetto da testare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is the same; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto corrisponde; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">Restituisce il codice hash di questo oggetto.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">Codice hash per l'oggetto <see cref="T:System.ComponentModel.InheritanceAttribute" /> corrente.</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary vsli:raw="Gets or sets the current inheritance level stored in this attribute.">Ottiene e impostare il livello di ereditarietà corrente memorizzato nell'attributo.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; stored in this attribute.">Oggetto <see cref="T:System.ComponentModel.InheritanceLevel" /> memorizzato in questo attributo.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary vsli:raw="Specifies that the component is inherited. This field is read-only.">Consente di specificare che il componente è ereditato. Questo campo è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary vsli:raw="Specifies that the component is inherited and is read-only. This field is read-only.">Specifica che il componente è ereditato ed è di sola lettura. Questo campo è di sola lettura.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">Ottiene un valore che indica se il valore corrente dell'attributo è il valore predefinito dell'attributo stesso.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore corrente dell'attributo è quello predefinito, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary vsli:raw="Specifies that the component is not inherited. This field is read-only.">Specifica che il componente non è ereditato. Questo campo è di sola lettura.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary vsli:raw="Converts this attribute to a string.">Converte questo attributo in una stringa.</summary>
      <returns vsli:raw="A string that represents this &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">Stringa che rappresenta questo oggetto <see cref="T:System.ComponentModel.InheritanceAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary vsli:raw="Defines identifiers for types of inheritance levels.">Definisce gli identificatori per i tipi di livelli di ereditarietà.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary vsli:raw="The object is inherited.">L'oggetto è ereditato.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary vsli:raw="The object is inherited, but has read-only access.">L'oggetto è ereditato ma ha un accesso di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary vsli:raw="The object is not inherited.">L'oggetto non è ereditato.</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary vsli:raw="Specifies the installer for a type that installs components.">Specifica il programma di installazione di un tipo dal quale viene eseguita l'installazione di componenti.</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class with the name of the component's installer type.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> con il nome del tipo di programma di installazione del componente.</summary>
      <param name="typeName" vsli:raw="The name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">Nome di un oggetto <see cref="T:System.Type" /> che rappresenta il programma di installazione del componente al quale è associato questo attributo. È necessario che questa classe implementi l'interfaccia <see cref="T:System.ComponentModel.Design.IDesigner" />.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class, when given a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for a component.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.InstallerTypeAttribute" />, quando viene fornito un oggetto <see cref="T:System.Type" /> che rappresenta il programma di installazione di un componente.</summary>
      <param name="installerType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">Oggetto <see cref="T:System.Type" /> che rappresenta il programma di installazione del componente al quale è associato questo attributo. È necessario che questa classe implementi l'interfaccia <see cref="T:System.ComponentModel.Design.IDesigner" />.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">Specifica se il valore dell'oggetto specificato è uguale all'oggetto <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> corrente.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Oggetto di cui va verificata l'uguaglianza di valore.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore dell'oggetto specificato è uguale a quello dell'oggetto corrente. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">Restituisce il codice hash di questo oggetto.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">Codice hash per l'oggetto <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> corrente.</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary vsli:raw="Gets the type of installer associated with this attribute.">Ottiene il tipo di programma di installazione associato a questo attributo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of installer associated with this attribute, or &lt;see langword=&quot;null&quot; /&gt; if an installer does not exist.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di programma di installazione associato a questo attributo oppure <see langword="null" /> in assenza di un programma di installazione.</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary vsli:raw="Creates an instance of a particular type of property from a drop-down box within the &lt;see cref=&quot;T:System.Windows.Forms.PropertyGrid&quot; /&gt;.">Crea un'istanza di un particolare tipo di proprietà da una casella a discesa nell'oggetto <see cref="T:System.Windows.Forms.PropertyGrid" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstanceCreationEditor&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.InstanceCreationEditor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="When overridden in a derived class, returns an instance of the specified type.">Quando è sottoposto a override in una classe derivata, restituisce un'istanza del tipo specificato.</summary>
      <param name="context" vsli:raw="The context information.">Informazioni contestuali.</param>
      <param name="instanceType" vsli:raw="The specified type.">Tipo specificato.</param>
      <returns vsli:raw="An instance of the specified type or &lt;see langword=&quot;null&quot; /&gt;.">Istanza del tipo specificato o valore <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary vsli:raw="Gets the specified text.">Ottiene il testo specificato.</summary>
      <returns vsli:raw="The specified text.">Il testo specificato.</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit signed integer objects to and from other representations.">Offre un convertitore di tipi per la conversione di oggetti di tipo intero senza segno a 16 bit in e da altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int16Converter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Int16Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit signed integer objects to and from other representations.">Fornisce un convertitore di tipi per convertire oggetti di tipo Integer con segno a 32 bit in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int32Converter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Int32Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit signed integer objects to and from various other representations.">Fornisce un convertitore di tipi per convertire oggetti di tipo Integer con segno a 64 bit in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int64Converter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.Int64Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>Generato quando un thread su cui dovrebbe venire eseguita un'operazione non esiste più oppure è privo di un ciclo di messaggi.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> con gli oggetti <see cref="T:System.Runtime.Serialization.SerializationInfo" /> e <see cref="T:System.Runtime.Serialization.StreamingContext" /> specificati.</summary>
      <param name="info">Classe <see cref="T:System.Runtime.Serialization.SerializationInfo" /> da utilizzare per la deserializzazione.</param>
      <param name="context">Destinazione da utilizzare per la deserializzazione.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> con la descrizione dettagliata specificata.</summary>
      <param name="message">Descrizione dettagliata dell'errore.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> con la descrizione dettagliata e l'eccezione specificate.</summary>
      <param name="message">Descrizione dettagliata dell'errore.</param>
      <param name="innerException">Riferimento all'eccezione interna che è la causa di questa eccezione.</param>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary vsli:raw="Indicates whether a class converts property change events to &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">Specifica se una classe converte gli eventi di modifica delle proprietà in eventi <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">Ottiene un valore che indica se l'oggetto <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> genera gli eventi <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events when one of its property values changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> genera gli eventi <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> quando uno dei valori delle proprietà di tale oggetto viene modificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary vsli:raw="Allows coordination of initialization for a component and its dependent properties.">Consente di coordinare l'inizializzazione di un componente e delle relative proprietà dipendenti.</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary vsli:raw="Occurs when initialization of the component is completed.">Si verifica quando l'inizializzazione del componente è stata eseguita.</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary vsli:raw="Gets a value indicating whether the component is initialized.">Ottiene un valore che indica se il componente è inizializzato.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the component has completed initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per indicare che l'inizializzazione del componente è stata completata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary vsli:raw="Provides contextual information about a component, such as its container and property descriptor.">Fornisce informazioni contestuali su un componente relative, ad esempio, al contenitore e al descrittore di proprietà.</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary vsli:raw="Gets the container representing this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; request.">Ottiene il contenitore che rappresenta questa richiesta <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with the set of objects for this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no container or if the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; does not use outside objects.">Un oggetto <see cref="T:System.ComponentModel.IContainer" /> imposta gli oggetti per questo oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />; in caso contrario, <see langword="null" /> in mancanza di contenitore o se l'oggetto <see cref="T:System.ComponentModel.TypeDescriptor" /> non utilizza oggetti esterni.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary vsli:raw="Gets the object that is connected with this type descriptor request.">Ottiene l'oggetto connesso a questa richiesta di descrittore di tipi.</summary>
      <returns vsli:raw="The object that invokes the method on the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no object responsible for the call.">Oggetto che richiama il metodo nell'oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />; in caso contrario, <see langword="null" /> in mancanza di un oggetto responsabile della chiamata.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">Genera l'evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">Genera l'evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can be changed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questo oggetto può essere modificato. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is associated with the given context item.">Ottiene l'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> associato all'elemento di contesto indicato.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the given context item; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; responsible for the call.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che descrive l'elemento di contesto indicato; in caso contrario, <see langword="null" /> in mancanza di un oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> responsabile della chiamata.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary vsli:raw="Provides functionality to discover the schema for a bindable list, where the properties available for binding differ from the public properties of the object to bind to.">Fornisce le funzionalità per scoprire lo schema di un elenco associabile, in cui le proprietà disponibili per l'associazione differiscono dalle proprietà pubbliche dell'oggetto verso cui effettuare l'associazione.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">Restituisce l'oggetto <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> che rappresenta le proprietà di ogni elemento usato per associare i dati.</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to find in the collection as bindable. This can be &lt;see langword=&quot;null&quot; /&gt;.">Matrice di oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> da individuare come associabili nella raccolta. Può essere <see langword="null" />.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">L'oggetto <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> che rappresenta le proprietà di ogni elemento usato per associare i dati.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the name of the list.">Restituisce il nome dell'elenco.</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects, for which the list name is returned. This can be &lt;see langword=&quot;null&quot; /&gt;.">Matrice di oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" />, di cui viene restituito il nome dell'elenco. Può essere <see langword="null" />.</param>
      <returns vsli:raw="The name of the list.">Il nome dell'elenco.</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for all licenses. A license is granted to a specific instance of a component.">Fornisce la classe base <see langword="abstract" /> per tutte le licenze. La licenza viene concessa a un'istanza specifica di un componente.</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.License" />.</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary vsli:raw="When overridden in a derived class, disposes of the resources used by the license.">Quando è sottoposto a override in una classe derivata, consente di eliminare le risorse utilizzate dalla licenza.</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary vsli:raw="When overridden in a derived class, gets the license key granted to this component.">Quando è sottoposto a override in una classe derivata, consente di ottenere la chiave di licenza assegnata a questo componente.</summary>
      <returns vsli:raw="A license key granted to this component.">Una chiave di licenza concessa a questo componente.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary vsli:raw="Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.">Specifica quando è possibile utilizzare un oggetto concesso in licenza e consente di ottenere i servizi aggiuntivi necessari per supportare le licenze eseguite all'interno del rispettivo dominio.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.LicenseContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.">Quando è sottoposto a override in una classe derivata, restituisce una chiave di licenza salvata per il tipo specificato, tratta dall'assembly di risorse specificato.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di componente.</param>
      <param name="resourceAssembly" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; with the license key.">Oggetto <see cref="T:System.Reflection.Assembly" /> con la chiave di licenza.</param>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type. This method returns &lt;see langword=&quot;null&quot; /&gt; unless you override it.">La proprietà <see cref="P:System.ComponentModel.License.LicenseKey" /> per il tipo specificato. Questo metodo restituisce <see langword="null" /> a meno che non venga sottoposto a override.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service, if it is available.">Ottiene il servizio richiesto, se disponibile.</summary>
      <param name="type" vsli:raw="The type of service to retrieve.">Tipo di servizio da recuperare.</param>
      <returns vsli:raw="An instance of the service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be found.">Istanza del servizio oppure <see langword="null" /> se non è possibile trovare il servizio.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="When overridden in a derived class, sets a license key for the specified type.">Quando è sottoposto a override in una classe derivata, consente di impostare una chiave di licenza per il tipo specificato.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component associated with the license key.">Oggetto <see cref="T:System.Type" /> che rappresenta il componente associato alla chiave di licenza.</param>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to save for the type of component.">La proprietà <see cref="P:System.ComponentModel.License.LicenseKey" /> da salvare per il tipo di componente.</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary vsli:raw="When overridden in a derived class, gets a value that specifies when you can use a license.">Quando è sottoposto a override in una classe derivata, consente di ottenere un valore che specifica quando è possibile utilizzare una licenza.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values that specifies when you can use a license. The default is &lt;see cref=&quot;F:System.ComponentModel.LicenseUsageMode.Runtime&quot; /&gt;.">Uno dei valori di <see cref="T:System.ComponentModel.LicenseUsageMode" /> che specifica quando è possibile utilizzare una licenza. Il valore predefinito è <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary vsli:raw="Represents the exception thrown when a component cannot be granted a license.">Rappresenta l'eccezione generata quando non può essere concessa un licenza a un componente.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class with the given &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.LicenseException" /> con gli oggetti <see cref="T:System.Runtime.Serialization.SerializationInfo" /> e <see cref="T:System.Runtime.Serialization.StreamingContext" /> specificati.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">Classe <see cref="T:System.Runtime.Serialization.SerializationInfo" /> da utilizzare per la deserializzazione.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">Destinazione da utilizzare per la deserializzazione.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type of component that was denied a license.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.LicenseException" /> per il tipo di componente a cui è stata negata una licenza.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di componente a cui non è stata concessa una licenza.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.LicenseException" /> per il tipo e l'istanza del componente a cui è stata negata una licenza.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di componente a cui non è stata concessa una licenza.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">Istanza del componente a cui non è stata concessa la licenza.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.LicenseException" /> per il tipo e l'istanza del componente a cui è stata negata la licenza, insieme a un messaggio da visualizzare.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di componente a cui non è stata concessa una licenza.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">Istanza del componente a cui non è stata concessa la licenza.</param>
      <param name="message" vsli:raw="The exception message to display.">Il messaggio di eccezione da visualizzare.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display and the original exception thrown.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.LicenseException" /> per il tipo e l'istanza del componente a cui è stata negata una licenza, insieme a un messaggio da visualizzare e all'eccezione originale generata.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di componente a cui non è stata concessa una licenza.</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">Istanza del componente a cui non è stata concessa la licenza.</param>
      <param name="message" vsli:raw="The exception message to display.">Il messaggio di eccezione da visualizzare.</param>
      <param name="innerException" vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the original exception.">Oggetto <see cref="T:System.Exception" /> che rappresenta l'eccezione originale.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">Imposta l'oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con le informazioni sull'eccezione.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">Classe <see cref="T:System.Runtime.Serialization.SerializationInfo" /> da utilizzare per la deserializzazione.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">Destinazione da utilizzare per la deserializzazione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary vsli:raw="Gets the type of the component that was not granted a license.">Ottiene il tipo del componente a cui non è stata concessa una licenza.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di componente a cui non è stata concessa una licenza.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary vsli:raw="Provides properties and methods to add a license to a component and to manage a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. This class cannot be inherited.">Offre proprietà e metodi per aggiungere una licenza a un componente e gestire <see cref="T:System.ComponentModel.LicenseProvider" />. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary vsli:raw="Creates an instance of the specified type, given a context in which you can use the licensed instance.">Consente di creare un'istanza del tipo specificato, dato il contesto in cui è possibile utilizzare l'istanza concessa in licenza.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo da creare.</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">Oggetto <see cref="T:System.ComponentModel.LicenseContext" /> che specifica quando è possibile utilizzare l'istanza concessa in licenza.</param>
      <returns vsli:raw="An instance of the specified type.">Istanza del tipo specificato.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary vsli:raw="Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.">Consente di creare un'istanza del tipo specificato con gli argomenti indicati, dato il contesto in cui è possibile utilizzare l'istanza concessa in licenza.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo da creare.</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">Oggetto <see cref="T:System.ComponentModel.LicenseContext" /> che specifica quando è possibile utilizzare l'istanza concessa in licenza.</param>
      <param name="args" vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the arguments for the type.">Matrice di tipo <see cref="T:System.Object" /> che rappresenta gli argomenti per il tipo.</param>
      <returns vsli:raw="An instance of the specified type with the given array of arguments.">Istanza del tipo specificato con la determinata matrice di argomenti.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary vsli:raw="Gets or sets the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt;, which specifies when you can use the licensed object.">Viene poi ottenuto o impostato l'oggetto <see cref="T:System.ComponentModel.LicenseContext" /> corrente, che specifica quando è possibile utilizzare l'oggetto concesso in licenza.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed object.">Oggetto <see cref="T:System.ComponentModel.LicenseContext" /> che specifica quando è possibile utilizzare l'oggetto concesso in licenza.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property is currently locked and cannot be changed.">Attualmente la proprietà <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> è bloccata e non può essere modificata.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary vsli:raw="Returns whether the given type has a valid license.">Indica se il tipo specificato dispone di una licenza valida.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to find a valid license for.">Oggetto <see cref="T:System.Type" /> per il quale trovare una licenza valida.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given type is licensed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il tipo specificato dispone di licenza, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified type.">Determina se può essere concessa una licenza valida per il tipo specificato.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di oggetto che richiede <see cref="T:System.ComponentModel.License" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid license can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se può essere concessa una licenza valida, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Consente di determinare se può essere concessa una licenza valida per l'istanza specificata del tipo. Questo metodo crea un oggetto <see cref="T:System.ComponentModel.License" /> valido.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di oggetto che richiede la licenza.</param>
      <param name="instance" vsli:raw="An object of the specified type or a type derived from the specified type.">Oggetto del tipo specificato o un tipo derivato dal tipo specificato.</param>
      <param name="license" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; that is a valid license, or &lt;see langword=&quot;null&quot; /&gt; if a valid license cannot be granted.">Oggetto <see cref="T:System.ComponentModel.License" /> che rappresenta una licenza valida oppure <see langword="null" /> se non è possibile concedere una licenza valida.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è possibile concedere un oggetto <see cref="T:System.ComponentModel.License" /> valido, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary vsli:raw="Prevents changes being made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">Impedisce di apportare modifiche all'oggetto <see cref="T:System.ComponentModel.LicenseContext" /> corrente dell'oggetto specificato.</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to lock.">Oggetto il cui contesto corrente si desidera bloccare.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The context is already locked.">Il contesto è già bloccato.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary vsli:raw="Allows changes to be made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">Consente di apportare modifiche all'oggetto <see cref="T:System.ComponentModel.LicenseContext" /> corrente dell'oggetto specificato.</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to unlock.">Oggetto il cui contesto corrente si desidera sbloccare.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;contextUser&quot; /&gt; represents a different user than the one specified in a previous call to &lt;see cref=&quot;M:System.ComponentModel.LicenseManager.LockContext(System.Object)&quot; /&gt;.">
        <paramref name="contextUser" /> rappresenta un utente diverso da quello specificato in una precedente chiamata a <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; which specifies when you can use the licensed object for the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt;.">Ottiene l'oggetto <see cref="T:System.ComponentModel.LicenseUsageMode" /> che specifica quando è possibile utilizzare l'oggetto concesso in licenza per la proprietà <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values, as specified in the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property.">Uno dei valori di <see cref="T:System.ComponentModel.LicenseUsageMode" />, come specificato nella proprietà <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary vsli:raw="Determines whether a license can be granted for the specified type.">Determina se può essere concessa una licenza per il tipo specificato.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di oggetto che richiede la licenza.</param>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">Non è possibile concedere un oggetto <see cref="T:System.ComponentModel.License" />.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary vsli:raw="Determines whether a license can be granted for the instance of the specified type.">Consente di determinare se è possibile concedere una licenza per l'istanza del tipo specificato.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di oggetto che richiede la licenza.</param>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type or a type derived from the specified type.">Oggetto <see cref="T:System.Object" /> del tipo specificato o un tipo derivato dal tipo specificato.</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.License" /> valido.</returns>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="The type is licensed, but a &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">Il tipo dispone di licenza, ma non è possibile concedere un oggetto <see cref="T:System.ComponentModel.License" />.</exception>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for implementing a license provider.">Fornisce la classe base <see langword="abstract" /> per l'implementazione di un provider di licenze.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.LicenseProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.">Se sottoposto a override in una classe derivata, consente di ottenere una licenza per un'istanza o un tipo di componente, quando viene specificato un contesto e se la negazione di una licenza genera un'eccezione.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">Oggetto <see cref="T:System.ComponentModel.LicenseContext" /> che specifica dove è possibile utilizzare l'oggetto concesso in licenza.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the license.">Oggetto <see cref="T:System.Type" /> che rappresenta il componente che richiede la licenza.</param>
      <param name="instance" vsli:raw="An object that is requesting the license.">Oggetto che sta richiedendo la licenza.</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when the component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se deve essere generata un'eccezione <see cref="T:System.ComponentModel.LicenseException" /> quando al componente non può essere concessa una licenza, in caso contrario <see langword="false" />.</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.License" /> valido.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary vsli:raw="Specifies the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; to use with a class. This class cannot be inherited.">Consente di specificare l'oggetto <see cref="T:System.ComponentModel.LicenseProvider" /> da utilizzare con una classe. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class without a license provider.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> senza un provider di licenza.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> con il tipo specificato.</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the license provider class.">Nome completo della classe del provider di licenza.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type of license provider.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> con il tipo specificato di provider di licenza.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider class.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo della classe del provider di licenza.</param>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary vsli:raw="Specifies the default value, which is no provider. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Consente di specificare il valore predefinito, ovvero nessun provider. Questo campo <see langword="static" /> è di sola lettura.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">Indica se questa istanza e un oggetto specificato sono uguali.</summary>
      <param name="value" vsli:raw="Another object to compare to.">Altro oggetto da confrontare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="value" /> è uguale all'istanza; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt;.">Codice hash per l'oggetto <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> corrente.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary vsli:raw="Gets the license provider that must be used with the associated class.">Ottiene il provider di licenza che deve essere utilizzato con la classe associata.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider. The default value is &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo del provider di licenza. Il valore predefinito è <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary vsli:raw="Indicates a unique ID for this attribute type.">Indica un ID univoco per questo tipo di attributo.</summary>
      <returns vsli:raw="A unique ID for this attribute type.">ID univoco per questo tipo di attributo.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary vsli:raw="Specifies when the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be used.">Consente di specificare quando è possibile utilizzare <see cref="T:System.ComponentModel.License" />.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary vsli:raw="Used during design time by a visual designer or the compiler.">Utilizzato in fase di progettazione da una finestra di progettazione visiva o dal compilatore.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary vsli:raw="Used during runtime.">Utilizzato in fase di esecuzione.</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary vsli:raw="Provides an implementation of a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.">Fornisce un'implementazione di un oggetto <see cref="T:System.ComponentModel.LicenseProvider" />. Il provider funziona in modo analogo al modello di gestione delle licenze standard di Microsoft .NET Framework.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicFileLicenseProvider&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.LicFileLicenseProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary vsli:raw="Returns a key for the specified type.">Restituisce una chiave per il tipo specificato.</summary>
      <param name="type" vsli:raw="The object type to return the key.">Tipo di oggetto per restituire la chiave.</param>
      <returns vsli:raw="A confirmation that the &lt;paramref name=&quot;type&quot; /&gt; parameter is licensed.">Conferma del fatto che il parametro <paramref name="type" /> dispone di licenza.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Returns a license for the instance of the component, if one is available.">Restituisce una licenza per l'istanza del componente, se disponibile.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">Oggetto <see cref="T:System.ComponentModel.LicenseContext" /> che specifica dove è possibile utilizzare l'oggetto concesso in licenza.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Oggetto <see cref="T:System.Type" /> che rappresenta il componente che richiede l'oggetto <see cref="T:System.ComponentModel.License" />.</param>
      <param name="instance" vsli:raw="An object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Oggetto che richiede l'oggetto <see cref="T:System.ComponentModel.License" />.</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when a component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se deve essere generata un'eccezione <see cref="T:System.ComponentModel.LicenseException" /> quando non può essere concessa una licenza a un componente, in caso contrario <see langword="false" />.</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;. If this method cannot find a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; or a valid &lt;paramref name=&quot;context&quot; /&gt; parameter, it returns &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.License" /> valido. Se tramite questo metodo non viene trovato un oggetto <see cref="T:System.ComponentModel.License" /> valido o un parametro <paramref name="context" /> valido, viene restituito <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary vsli:raw="Determines whether the key that the &lt;see cref=&quot;M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)&quot; /&gt; method retrieves is valid for the specified type.">Consente di determinare se la chiave recuperata dal metodo <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> è valida per il tipo specificato.</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to check.">Oggetto <see cref="P:System.ComponentModel.License.LicenseKey" /> da verificare.</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">Oggetto <see cref="T:System.Type" /> che rappresenta il componente che richiede l'oggetto <see cref="T:System.ComponentModel.License" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is a valid &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la chiave è una proprietà <see cref="P:System.ComponentModel.License.LicenseKey" /> valida per il tipo specificato, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary vsli:raw="Specifies that a list can be used as a data source. A visual designer should use this attribute to determine whether to display a particular list in a data-binding picker. This class cannot be inherited.">Consente di specificare che un elenco può essere utilizzato come origine dati. Questo attributo dovrebbe essere utilizzato in una finestra di progettazione visiva per determinare se visualizzare uno specifico elenco in una selezione di associazione dati. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using a value to indicate whether the list is bindable.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.ListBindableAttribute" /> utilizzando un valore per indicare se l'elenco è associabile.</summary>
      <param name="listBindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elenco è associabile, in caso contrario <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; to indicate whether the list is bindable.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.ListBindableAttribute" /> utilizzando <see cref="T:System.ComponentModel.BindableSupport" /> per indicare se l'elenco è associabile.</summary>
      <param name="flags" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; that indicates whether the list is bindable.">Attributo <see cref="T:System.ComponentModel.BindableSupport" /> che indica se l'elenco è associabile.</param>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">Rappresenta il valore predefinito dell'attributo <see cref="T:System.ComponentModel.ListBindableAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">Restituisce l'oggetto passato se è uguale all'oggetto <see cref="T:System.ComponentModel.ListBindableAttribute" />.</summary>
      <param name="obj" vsli:raw="The object to test equality with.">Oggetto rispetto al quale verificare l'uguaglianza.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto passato è uguale all'oggetto <see cref="T:System.ComponentModel.ListBindableAttribute" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">Codice hash per l'oggetto <see cref="T:System.ComponentModel.ListBindableAttribute" /> corrente.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns whether &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value.">Indica se la proprietà <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> è impostata sul valore predefinito.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> è impostata sul valore predefinito, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary vsli:raw="Gets whether the list is bindable.">Indica se l'elenco è associabile.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elenco è associabile, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary vsli:raw="Specifies that the list is not bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Consente di specificare che l'elenco non è associabile. Questo campo <see langword="static" /> è di sola lettura.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary vsli:raw="Specifies that the list is bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Consente di specificare che l'elenco è associabile. Questo campo <see langword="static" /> è di sola lettura.</summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event.">Fornisce dati per l'evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> dato il tipo di modifica e l'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> interessato.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Valore <see cref="T:System.ComponentModel.ListChangedType" /> che indica il tipo di modifica.</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, removed, or changed.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> aggiunto, rimosso o modificato.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the index of the affected item.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> fornendo il tipo di modifica e l'indice dell'elemento interessato.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Valore <see cref="T:System.ComponentModel.ListChangedType" /> che indica il tipo di modifica.</param>
      <param name="newIndex" vsli:raw="The index of the item that was added, changed, or removed.">Indice dell'elemento che è stato aggiunto, modificato o rimosso.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change, the index of the affected item, and a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the affected item.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> fornendo il tipo di modifica, l'indice dell'elemento interessato e un oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che descrive l'elemento interessato.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Valore <see cref="T:System.ComponentModel.ListChangedType" /> che indica il tipo di modifica.</param>
      <param name="newIndex" vsli:raw="The index of the item that was added or changed.">Indice dell'elemento che è stato aggiunto o modificato.</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the item.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che descrive l'elemento.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the old and new index of the item that was moved.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> dato il tipo della modifica, nonché il nuovo e il precedente indice dell'elemento spostato.</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Valore <see cref="T:System.ComponentModel.ListChangedType" /> che indica il tipo di modifica.</param>
      <param name="newIndex" vsli:raw="The new index of the item that was moved.">Nuovo indice dell'elemento spostato.</param>
      <param name="oldIndex" vsli:raw="The old index of the item that was moved.">Precedente indice dell'elemento spostato.</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary vsli:raw="Gets the type of change.">Ottiene il tipo di modifica.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">Valore <see cref="T:System.ComponentModel.ListChangedType" /> che indica il tipo di modifica.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary vsli:raw="Gets the index of the item affected by the change.">Ottiene l'indice dell'elemento interessato dalla modifica.</summary>
      <returns vsli:raw="The index of the affected by the change.">Indice dell'elemento interessato dalla modifica.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary vsli:raw="Gets the old index of an item that has been moved.">Ottiene il precedente indice di un elemento spostato.</summary>
      <returns vsli:raw="The old index of the moved item.">Precedente indice dell'elemento spostato.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, changed, or deleted.">Ottiene l'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> aggiunto, modificato o eliminato.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected by the change.">L'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> interessato dalla modifica.</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event of the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; class.">Rappresenta il metodo che gestirà l'evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> della classe <see cref="T:System.ComponentModel.IBindingList" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origine dell'evento.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">Oggetto <see cref="T:System.ComponentModel.ListChangedEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary vsli:raw="Specifies how the list changed.">Specifica il modo in cui l'elenco è cambiato.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary vsli:raw="An item added to the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was added.">Elemento aggiunto all'elenco. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contiene l'indice dell'elemento aggiunto.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary vsli:raw="An item changed in the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was changed.">Elemento modificato nell'elenco. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contiene l'indice dell'elemento modificato.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary vsli:raw="An item deleted from the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was deleted.">Elemento eliminato dall'elenco. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contiene l'indice dell'elemento eliminato.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary vsli:raw="An item moved within the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.OldIndex&quot; /&gt; contains the previous index for the item, whereas &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the new index for the item.">Elemento spostato all'interno dell'elenco. <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> contiene l'indice precedente per l'elemento, mentre il campo <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contiene il nuovo indice per l'elemento.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was added, which changed the schema.">È stato aggiunto un oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> e in questo modo è stato modificato lo schema.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was changed, which changed the schema.">È stato modificato un oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> e in questo modo è stato modificato lo schema.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was deleted, which changed the schema.">È stato eliminato un oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> e in questo modo è stato modificato lo schema.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary vsli:raw="Much of the list has changed. Any listening controls should refresh all their data from the list.">Gran parte dell'elenco è stata modificata. Nei controlli in attesa dovrebbero essere aggiornati tutti i dati dall'elenco.</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary vsli:raw="Provides a description of the sort operation applied to a data source.">Fornisce una descrizione dell'operazione di ordinamento applicata a un'origine dati.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; class with the specified property description and direction.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ListSortDescription" /> con la descrizione e la direzione della proprietà specificate.</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the property by which the data source is sorted.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che descrive la proprietà che determina l'ordinamento dell'origine dati.</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; values.">Uno dei valori di <see cref="T:System.ComponentModel.ListSortDescription" />.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary vsli:raw="Gets or sets the abstract description of a class property associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Ottiene o imposta la descrizione astratta della proprietà della classe associata a questo oggetto <see cref="T:System.ComponentModel.ListSortDescription" /></summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> associato a questo oggetto <see cref="T:System.ComponentModel.ListSortDescription" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary vsli:raw="Gets or sets the direction of the sort operation associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Ottiene o imposta la direzione dell'operazione di ordinamento associata a questo oggetto <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">Uno dei valori di <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class with the specified array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> con la matrice specificata di oggetti <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <param name="sorts" vsli:raw="The array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects to be contained in the collection.">Matrice di oggetti <see cref="T:System.ComponentModel.ListSortDescription" /> che devono essere contenuti nell'insieme.</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary vsli:raw="Determines if the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; contains a specific value.">Determina se <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> contiene un valore specifico.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Oggetto <see cref="T:System.Object" /> da individuare nella raccolta.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <see cref="T:System.Object" /> viene trovato nell'insieme; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of the collection to the specified array, starting at the specified destination array index.">Copia il contenuto dell’insieme nella matrice specificata, a partire dall'indice della matrice di destinazione specificato.</summary>
      <param name="array" vsli:raw="The destination array for the items copied from the collection.">Matrice di destinazione degli elementi copiati dall'insieme.</param>
      <param name="index" vsli:raw="The index of the destination array at which copying begins.">Indice della matrice di destinazione in corrispondenza del quale iniziare la copia.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary vsli:raw="Gets the number of items in the collection.">Ottiene il numero di elementi nella raccolta.</summary>
      <returns vsli:raw="The number of items in the collection.">Numero di elementi nella raccolta.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary vsli:raw="Returns the index of the specified item in the collection.">Restituisce l'indice dell'elemento specificato nell'insieme.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">Oggetto <see cref="T:System.Object" /> da individuare nella raccolta.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Indice di <paramref name="value" />, se presente nell'elenco; in caso contrario, -1.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Ottiene o imposta l'oggetto <see cref="T:System.ComponentModel.ListSortDescription" /> specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">Indice a base zero dell'oggetto <see cref="T:System.ComponentModel.ListSortDescription" /> da ottenere o impostare nell'insieme.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">Oggetto <see cref="T:System.ComponentModel.ListSortDescription" /> con l'indice specificato.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An item is set in the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;, which is read-only.">Viene impostato un elemento nella classe <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />, che è in sola lettura.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is thread safe.">Ottiene un valore che indica se l'accesso all'insieme è thread-safe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> in tutti i casi.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the current instance that can be used to synchronize access to the collection.">Ottiene l'istanza corrente che può essere utilizzata per sincronizzare l'accesso all'insieme.</summary>
      <returns vsli:raw="The current instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">Istanza corrente della classe <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Ottiene un oggetto <see cref="T:System.Collections.IEnumerator" /> che può essere utilizzato per scorrere l'insieme.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Oggetto <see cref="T:System.Collections.IEnumerator" /> che può essere usato per eseguire l'iterazione della raccolta.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">Aggiunge un elemento alla raccolta.</summary>
      <param name="value" vsli:raw="The item to add to the collection.">Elemento da aggiungere alla raccolta.</param>
      <returns vsli:raw="The position into which the new element was inserted.">Posizione in cui è stato inserito il nuovo elemento.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">Rimuove tutti gli elementi dalla raccolta.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">Inserisce un elemento nella raccolta in corrispondenza di un indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">L'indice in base zero dell'oggetto <see cref="T:System.ComponentModel.ListSortDescription" /> da ottenere o impostare nella raccolta.</param>
      <param name="value" vsli:raw="The item to insert into the collection.">Elemento da inserire nell'insieme.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Ottiene un valore che indica se la dimensione della raccolta è fissa.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> in tutti i casi.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Ottiene un valore che indica se la raccolta è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> in tutti i casi.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">Ottiene l'oggetto <see cref="T:System.ComponentModel.ListSortDescription" /> specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get in the collection.">Indice in base zero dell'oggetto <see cref="T:System.ComponentModel.ListSortDescription" /> da ottenere nella raccolta.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">Oggetto <see cref="T:System.ComponentModel.ListSortDescription" /> con l'indice specificato.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of an item from the collection.">Consente di rimuovere la prima occorrenza di un elemento dall'insieme.</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">Elemento da rimuovere dall'insieme.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes an item from the collection at a specified index.">Rimuove un elemento dall'insieme in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to remove from the collection.">Indice in base zero dell'oggetto <see cref="T:System.ComponentModel.ListSortDescription" /> da rimuovere dalla raccolta</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">In tutti i casi.</exception>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary vsli:raw="Specifies the direction of a sort operation.">Specifica la direzione di un'operazione di ordinamento.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary vsli:raw="Sorts in ascending order.">Ordinamento in senso crescente.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary vsli:raw="Sorts in descending order.">Ordinamento in senso decrescente.</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the properties that support lookup-based binding. This class cannot be inherited.">Specifica le proprietà che supportano l'associazione basata sulla ricerca. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class using no parameters.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> senza utilizzare parametri.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">Nome della proprietà da utilizzare come origine dati.</param>
      <param name="displayMember" vsli:raw="The name of the property to be used for the display name.">Nome della proprietà da utilizzare per il nome di visualizzazione.</param>
      <param name="valueMember" vsli:raw="The name of the property to be used as the source for values.">Nome della proprietà da utilizzare come origine dei valori.</param>
      <param name="lookupMember" vsli:raw="The name of the property to be used for lookups.">Nome della proprietà da utilizzare per le ricerche.</param>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Ottiene il nome della proprietà dell'origine dati per il componente al quale è associato l'oggetto <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <returns vsli:raw="The data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Proprietà dell'origine dati per il componente al quale è associato l'oggetto <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">Rappresenta il valore predefinito per la classe <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary vsli:raw="Gets the name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Ottiene il nome della proprietà del membro di visualizzazione per il componente al quale è associato l'oggetto <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <returns vsli:raw="The name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Nome della proprietà del membro di visualizzazione per il componente al quale è associato l'oggetto <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">Determina se l'oggetto <see cref="T:System.Object" /> specificato è uguale all'istanza <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> corrente.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">Oggetto <see cref="T:System.Object" /> da confrontare con l'istanza <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">
        <see langword="true" /> se l'oggetto è uguale all'istanza corrente; in caso contrario, <see langword="false" />, indica che non sono uguali.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt;.">Codice hash per l'oggetto <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> corrente.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary vsli:raw="Gets the name of the lookup member for the component to which this attribute is bound.">Ottiene il nome del membro della ricerca per il componente a cui è associato questo attributo.</summary>
      <returns vsli:raw="The name of the lookup member for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Nome del membro di ricerca per il componente al quale è associato l'oggetto <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary vsli:raw="Gets the name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Ottiene il nome della proprietà del membro del valore per il componente al quale è associato l'oggetto <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <returns vsli:raw="The name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">Ottiene il nome della proprietà del membro del valore per il componente al quale è associato l'oggetto <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary vsli:raw="Implements &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and provides the base implementation for remotable components that are marshaled by value (a copy of the serialized object is passed).">Implementa l'interfaccia <see cref="T:System.ComponentModel.IComponent" /> e fornisce l'implementazione base per i componenti definibili in modalità remota di cui viene effettuato il marshalling in base al valore (viene passata una copia dell'oggetto serializzato).</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.MarshalByValueComponent" />.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary vsli:raw="Gets the container for the component.">Ottiene il contenitore del componente.</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; interface that represents the component's container, or &lt;see langword=&quot;null&quot; /&gt; if the component does not have a site.">Oggetto che implementa l'interfaccia <see cref="T:System.ComponentModel.IContainer" /> che rappresenta il contenitore del componente oppure <see langword="null" /> se il componente non dispone di un sito.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary vsli:raw="Gets a value indicating whether the component is currently in design mode.">Ottiene un valore che indica se il componente è in modalità progettazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is in design mode; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il componente è in modalità progettazione, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt;.">Rilascia tutte le risorse usate da <see cref="T:System.ComponentModel.MarshalByValueComponent" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; and optionally releases the managed resources.">Rilascia le risorse non gestite usate da <see cref="T:System.ComponentModel.MarshalByValueComponent" /> e, facoltativamente, le risorse gestite.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite, <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary vsli:raw="Adds an event handler to listen to the &lt;see cref=&quot;E:System.ComponentModel.MarshalByValueComponent.Disposed&quot; /&gt; event on the component.">Aggiunge un gestore eventi per restare in attesa dell'evento <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> sul componente.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary vsli:raw="Gets the list of event handlers that are attached to this component.">Ottiene l'elenco dei gestori eventi allegati a questo componente.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventHandlerList&quot; /&gt; that provides the delegates for this component.">Oggetto <see cref="T:System.ComponentModel.EventHandlerList" /> che fornisce i delegati per questo componente.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary vsli:raw="Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.">Consente a un oggetto di effettuare un tentativo di liberare risorse ed eseguire altre operazioni di pulizia prima che venga recuperato da Garbage Collection.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary vsli:raw="Gets the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">Ottiene l'implementatore dell'interfaccia <see cref="T:System.IServiceProvider" />.</summary>
      <param name="service" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of service you want.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di servizio desiderato.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> che rappresenta l'implementatore di <see cref="T:System.IServiceProvider" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary vsli:raw="Gets or sets the site of the component.">Ottiene o imposta il sito del componente.</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface that represents the site of the component.">Oggetto che implementa l'interfaccia <see cref="T:System.ComponentModel.ISite" /> che rappresenta il sito del componente.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any. This method should not be overridden.">Restituisce un oggetto <see cref="T:System.String" /> che contiene il nome dell'eventuale oggetto <see cref="T:System.ComponentModel.Component" />. Questo metodo non deve essere sottoposto a override.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any.  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; is unnamed.">Un oggetto <see cref="T:System.String" /> contenente il nome dell'oggetto <see cref="T:System.ComponentModel.Component" />, se presente.  
 <see langword="null" /> se l'oggetto <see cref="T:System.ComponentModel.Component" /> è senza nome.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary vsli:raw="Represents a mask-parsing service that can be used by any number of controls that support masking, such as the &lt;see cref=&quot;T:System.Windows.Forms.MaskedTextBox&quot; /&gt; control.">Rappresenta un servizio di analisi mediante maschera utilizzabile da tutti i controlli che supportano l'utilizzo delle maschere, come il controllo <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> mediante la maschera specificata.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Oggetto <see cref="T:System.String" /> che rappresenta la maschera di input.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and ASCII restriction value.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> utilizzando la maschera e il valore di restrizione ASCII specificati.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Oggetto <see cref="T:System.String" /> che rappresenta la maschera di input.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">
        <see langword="true" /> per limitare l'input ai caratteri compatibili con il set ASCII; in caso contrario <see langword="false" /> per consentire l'intero set di caratteri Unicode.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, password character, and prompt usage value.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> utilizzando la maschera, il carattere della password e il valore di utilizzo della richiesta specificati.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Oggetto <see cref="T:System.String" /> che rappresenta la maschera di input.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">Oggetto <see cref="T:System.Char" /> visualizzato per i caratteri inseriti nella stringa della password.</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per consentire come input il carattere di richiesta; in caso contrario <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and culture.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> mediante la maschera e le impostazioni cultura specificate.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Oggetto <see cref="T:System.String" /> che rappresenta la maschera di input.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> utilizzato per impostare i caratteri separatori che dipendono dalle impostazioni internazionali.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, and ASCII restriction value.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> utilizzando la maschera, le impostazioni cultura e il valore di restrizione ASCII specificati.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Oggetto <see cref="T:System.String" /> che rappresenta la maschera di input.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> utilizzato per impostare i caratteri separatori che dipendono dalle impostazioni internazionali.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">
        <see langword="true" /> per limitare l'input ai caratteri compatibili con il set ASCII; in caso contrario <see langword="false" /> per consentire l'intero set di caratteri Unicode.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, prompt usage value, prompt character, password character, and ASCII restriction value.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> utilizzando la maschera, le impostazioni cultura, il valore di utilizzo della richiesta, il carattere di richiesta, il carattere della password e il valore di restrizione ASCII specificati.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Oggetto <see cref="T:System.String" /> che rappresenta la maschera di input.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> utilizzato per impostare i caratteri separatori che dipendono dalle impostazioni internazionali.</param>
      <param name="allowPromptAsInput" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value that specifies whether the prompt character should be allowed as a valid input character.">Valore <see cref="T:System.Boolean" /> che specifica se il carattere di richiesta può essere utilizzato come carattere di input.</param>
      <param name="promptChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed as a placeholder for user input.">Oggetto <see cref="T:System.Char" /> visualizzato come segnaposto per l'input dell'utente.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">Oggetto <see cref="T:System.Char" /> visualizzato per i caratteri inseriti nella stringa della password.</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">
        <see langword="true" /> per limitare l'input ai caratteri compatibili con il set ASCII; in caso contrario <see langword="false" /> per consentire l'intero set di caratteri Unicode.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The mask parameter is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The mask contains one or more non-printable characters.">Il parametro della maschera è <see langword="null" /> o <see cref="F:System.String.Empty" />.  
In alternativa 
La maschera contiene uno o più caratteri non stampabili.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, password character, and prompt usage value.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> utilizzando la maschera, le impostazioni cultura, il carattere della password e il valore di utilizzo della richiesta specificati.</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">Oggetto <see cref="T:System.String" /> che rappresenta la maschera di input.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> utilizzato per impostare i caratteri separatori che dipendono dalle impostazioni internazionali.</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">Oggetto <see cref="T:System.Char" /> visualizzato per i caratteri inseriti nella stringa della password.</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per consentire come input il carattere di richiesta; in caso contrario <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string.">Aggiunge il carattere di input specificato alla fine della stringa formattata.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">Valore <see cref="T:System.Char" /> da aggiungere alla stringa formattata.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il carattere di input è stato aggiunto; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string, and then outputs position and descriptive information.">Aggiunge il carattere di input specificato alla fine della stringa formattata, quindi genera informazioni sulla posizione e sulla descrizione.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">Valore <see cref="T:System.Char" /> da aggiungere alla stringa formattata.</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">Posizione in base zero della stringa formattata nella quale si è tentato di aggiungere il carattere. Parametro di output.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Oggetto <see cref="T:System.ComponentModel.MaskedTextResultHint" /> che descrive sinteticamente il risultato dell'operazione. Parametro di output.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il carattere di input è stato aggiunto; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string.">Aggiunge i caratteri nella stringa di input specificata alla fine della stringa formattata.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">Oggetto <see cref="T:System.String" /> contenente i valori dei caratteri da aggiungere alla stringa formattata.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">
        <see langword="true" /> se sono stati aggiunti tutti i caratteri della stringa di input; in caso contrario <see langword="false" /> per indicare che non sono stati aggiunti caratteri.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="input" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string, and then outputs position and descriptive information.">Aggiunge i caratteri nella stringa di input specificata alla fine della stringa formattata, quindi genera informazioni sulla posizione e sulla descrizione.</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">Oggetto <see cref="T:System.String" /> contenente i valori dei caratteri da aggiungere alla stringa formattata.</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">Posizione in base zero della stringa formattata nella quale si è tentato di aggiungere il carattere. Parametro di output.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Oggetto <see cref="T:System.ComponentModel.MaskedTextResultHint" /> che descrive sinteticamente il risultato dell'operazione. Parametro di output.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">
        <see langword="true" /> se sono stati aggiunti tutti i caratteri della stringa di input; in caso contrario <see langword="false" /> per indicare che non sono stati aggiunti caratteri.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary vsli:raw="Gets a value indicating whether the prompt character should be treated as a valid input character or not.">Ottiene un valore che indica se il carattere di richiesta può essere utilizzato come carattere di input.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the user can enter &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt; into the control; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se l'utente può immettere la proprietà <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> nel controllo; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary vsli:raw="Gets a value indicating whether the mask accepts characters outside of the ASCII character set.">Ottiene un valore che indica se la maschera accetta caratteri non appartenenti al set di caratteri ASCII.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if only ASCII is accepted; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; can accept any arbitrary Unicode character. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se vengono accettati solo i caratteri ASCII; <see langword="false" /> se l'oggetto <see cref="T:System.ComponentModel.MaskedTextProvider" /> può accettare qualsiasi carattere arbitrario Unicode. Il valore predefinito è <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions that have already been successfully assigned an input value.">Ottiene il numero delle posizioni dei caratteri modificabili a cui è già stato assegnato un valore di input.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions in the input mask that have already been assigned a character value in the formatted string.">Oggetto <see cref="T:System.Int32" /> contenente il numero delle posizioni dei caratteri modificabili della maschera di input a cui è già stato assegnato il valore del carattere nella stringa formattata.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions in the input mask that have not yet been assigned an input value.">Ottiene il numero delle posizioni dei caratteri modificabili nella maschera di input a cui non è ancora stato assegnato un valore di input.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions that not yet been assigned a character value.">Oggetto <see cref="T:System.Int32" /> contenente il numero delle posizioni dei caratteri modificabili a cui non è ancora stato assegnato un valore del carattere.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters.">Cancella dalla stringa formattata tutti i caratteri di input modificabili e li sostituisce con i caratteri di richiesta.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters, and then outputs descriptive information.">Cancella dalla stringa formattata tutti i caratteri di input modificabili e li sostituisce con i caratteri di richiesta, quindi genera informazioni descrittive.</summary>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Oggetto <see cref="T:System.ComponentModel.MaskedTextResultHint" /> che descrive sinteticamente il risultato dell'operazione. Parametro di output.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary vsli:raw="Creates a copy of the current &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt;.">Crea una copia dell'oggetto <see cref="T:System.ComponentModel.MaskedTextProvider" /> corrente.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; object this method creates, cast as an object.">Oggetto <see cref="T:System.ComponentModel.MaskedTextProvider" /> creato da questo metodo, di cui viene eseguito il cast come oggetto.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary vsli:raw="Gets the culture that determines the value of the localizable separators and placeholders in the input mask.">Ottiene le impostazioni cultura che determinano il valore dei segnaposti e dei separatori localizzabili nella maschera di input.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; containing the culture information associated with the input mask.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> contenente le informazioni sulle impostazioni cultura associate alla maschera di input.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary vsli:raw="Gets the default password character used obscure user input.">Ottiene il carattere della password predefinito utilizzato per nascondere l'input dell'utente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that represents the default password character.">Oggetto <see cref="T:System.Char" /> che rappresenta il carattere della password predefinito.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary vsli:raw="Gets the number of editable positions in the formatted string.">Ottiene il numero di posizioni modificabili nella stringa formattata.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable positions in the formatted string.">Oggetto <see cref="T:System.Int32" /> contenente il numero di posizioni modificabili nella stringa formattata.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary vsli:raw="Gets a newly created enumerator for the editable positions in the formatted string.">Ottiene l'enumeratore appena creato per le posizioni modificabili della stringa formattata.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that supports enumeration over the editable positions in the formatted string.">Oggetto <see cref="T:System.Collections.IEnumerator" /> che supporta l'enumerazione delle posizioni modificabili nella stringa formattata.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position after the specified position using the specified search direction.">Restituisce la prima posizione modificabile assegnata successiva a quella specificata utilizzando la direzione di ricerca indicata.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">Posizione in base zero della stringa formattata dalla quale ha inizio la ricerca.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Valore <see cref="T:System.Boolean" /> che indica la direzione di ricerca; <see langword="true" /> per la ricerca in avanti o <see langword="false" /> per la ricerca all'indietro.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">In caso di esito positivo, valore <see cref="T:System.Int32" /> che rappresenta il valore in base zero della prima posizione modificabile assegnata individuata; in caso contrario <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position between the specified positions using the specified search direction.">Restituisce la prima posizione modificabile assegnata compresa tra quelle specificate utilizzando la direzione di ricerca indicata.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">Posizione in base zero della stringa formattata dalla quale ha inizio la ricerca.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">Posizione in base zero della stringa formattata nella quale si conclude la ricerca.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Valore <see cref="T:System.Boolean" /> che indica la direzione di ricerca; <see langword="true" /> per la ricerca in avanti o <see langword="false" /> per la ricerca all'indietro.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">In caso di esito positivo, valore <see cref="T:System.Int32" /> che rappresenta il valore in base zero della prima posizione modificabile assegnata individuata; in caso contrario <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position after the specified position using the specified search direction.">Restituisce la posizione della prima posizione modificabile successiva a quella specificata utilizzando la direzione di ricerca indicata.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">Posizione in base zero della stringa formattata dalla quale ha inizio la ricerca.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Valore <see cref="T:System.Boolean" /> che indica la direzione di ricerca; <see langword="true" /> per la ricerca in avanti o <see langword="false" /> per la ricerca all'indietro.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">In caso di esito positivo, valore <see cref="T:System.Int32" /> in base zero della prima posizione modificabile incontrata; in caso contrario <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position between the specified positions using the specified search direction.">Restituisce la prima posizione modificabile compresa tra quelle specificate utilizzando la direzione di ricerca indicata.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">Posizione in base zero della stringa formattata dalla quale ha inizio la ricerca.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">Posizione in base zero della stringa formattata nella quale si conclude la ricerca.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Valore <see cref="T:System.Boolean" /> che indica la direzione di ricerca; <see langword="true" /> per la ricerca in avanti o <see langword="false" /> per la ricerca all'indietro.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">In caso di esito positivo, valore <see cref="T:System.Int32" /> in base zero della prima posizione modificabile incontrata; in caso contrario <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position after the specified position using the specified search direction.">Restituisce la prima posizione non modificabile successiva a quella specificata utilizzando la direzione di ricerca indicata.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">Posizione in base zero della stringa formattata dalla quale ha inizio la ricerca.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Valore <see cref="T:System.Boolean" /> che indica la direzione di ricerca; <see langword="true" /> per la ricerca in avanti o <see langword="false" /> per la ricerca all'indietro.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">In caso di esito positivo, valore <see cref="T:System.Int32" /> in base zero della prima posizione letterale incontrata; in caso contrario <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position between the specified positions using the specified search direction.">Restituisce la prima posizione non modificabile compresa tra quelle specificate utilizzando la direzione di ricerca indicata.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">Posizione in base zero della stringa formattata dalla quale ha inizio la ricerca.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">Posizione in base zero della stringa formattata nella quale si conclude la ricerca.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Valore <see cref="T:System.Boolean" /> che indica la direzione di ricerca; <see langword="true" /> per la ricerca in avanti o <see langword="false" /> per la ricerca all'indietro.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">In caso di esito positivo, valore <see cref="T:System.Int32" /> in base zero della prima posizione letterale incontrata; in caso contrario <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position after the specified position using the specified search direction.">Restituisce la prima posizione modificabile non assegnata successiva a quella specificata utilizzando la direzione di ricerca indicata.</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">Posizione in base zero della stringa formattata dalla quale ha inizio la ricerca.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Valore <see cref="T:System.Boolean" /> che indica la direzione di ricerca; <see langword="true" /> per la ricerca in avanti o <see langword="false" /> per la ricerca all'indietro.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">In caso di esito positivo, valore <see cref="T:System.Int32" /> in base zero della prima posizione modificabile non assegnata incontrata; in caso contrario <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position between the specified positions using the specified search direction.">Restituisce la prima posizione modificabile non assegnata compresa tra quelle specificate utilizzando la direzione di ricerca indicata.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">Posizione in base zero della stringa formattata dalla quale ha inizio la ricerca.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">Posizione in base zero della stringa formattata nella quale si conclude la ricerca.</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">Valore <see cref="T:System.Boolean" /> che indica la direzione di ricerca; <see langword="true" /> per la ricerca in avanti o <see langword="false" /> per la ricerca all'indietro.</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">In caso di esito positivo, valore <see cref="T:System.Int32" /> in base zero della prima posizione modificabile non assegnata incontrata; in caso contrario <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; denotes success or failure.">Determina se l'oggetto <see cref="T:System.ComponentModel.MaskedTextResultHint" /> specificato indica esito positivo o negativo.</summary>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value typically obtained as an output parameter from a previous operation.">Valore dell'oggetto <see cref="T:System.ComponentModel.MaskedTextResultHint" /> che generalmente si ottiene come parametro di output da un'operazione precedente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value represents a success; otherwise, &lt;see langword=&quot;false&quot; /&gt; if it represents failure.">
        <see langword="true" /> se il valore <see cref="T:System.ComponentModel.MaskedTextResultHint" /> specificato indica esito positivo; <see langword="false" /> se indica esito negativo.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary vsli:raw="Gets or sets a value that indicates whether literal characters in the input mask should be included in the formatted string.">Ottiene o imposta un valore che indica se è possibile includere nella stringa formattata i caratteri letterali della maschera di input.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if literals are included; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se sono inclusi i caratteri letterali; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary vsli:raw="Gets or sets a value indicating whether &lt;see cref=&quot;P:System.Windows.Forms.MaskedTextBox.PromptChar&quot; /&gt; is used to represent the absence of user input when displaying the formatted string.">Ottiene o imposta un valore che indica se viene utilizzata la proprietà <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> per rappresentare l'assenza dell'input dell'utente nella visualizzazione della stringa formattata.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character is used to represent the positions where no user input was provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se viene utilizzato il carattere di richiesta per rappresentare le posizioni nelle quali non è presente l'input dell'utente; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string.">Inserisce il carattere specificato nella posizione indicata della stringa formattata.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">Oggetto <see cref="T:System.Char" /> da inserire.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">Posizione in base zero della stringa formattata nella quale inserire il carattere.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'inserimento è stato effettuato correttamente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string, returning the last insertion position and the status of the operation.">Inserisce il carattere specificato nella posizione indicata della stringa formattata, restituendo l'ultima posizione di inserimento e lo stato dell'operazione.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">Oggetto <see cref="T:System.Char" /> da inserire.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">Posizione in base zero della stringa formattata nella quale inserire il carattere.</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">Se il metodo ha esito positivo, ultima posizione nella quale è stato inserito un carattere; in caso contrario, prima posizione nella quale l'inserimento ha avuto esito negativo. Parametro di output.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">Oggetto <see cref="T:System.ComponentModel.MaskedTextResultHint" /> che descrive sinteticamente il risultato dell'operazione di inserimento. Parametro di output.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'inserimento è stato effettuato correttamente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string.">Inserisce la stringa specificata nella posizione indicata della stringa formattata.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">Oggetto <see cref="T:System.String" /> da inserire.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">Posizione in base zero della stringa formattata nella quale inserire la stringa di input.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'inserimento è stato effettuato correttamente; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="input" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string, returning the last insertion position and the status of the operation.">Inserisce la stringa specificata nella posizione indicata della stringa formattata, restituendo l'ultima posizione di inserimento e lo stato dell'operazione.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">Oggetto <see cref="T:System.String" /> da inserire.</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">Posizione in base zero della stringa formattata nella quale inserire la stringa di input.</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">Se il metodo ha esito positivo, ultima posizione nella quale è stato inserito un carattere; in caso contrario, prima posizione nella quale l'inserimento ha avuto esito negativo. Parametro di output.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">Oggetto <see cref="T:System.ComponentModel.MaskedTextResultHint" /> che descrive sinteticamente il risultato dell'operazione di inserimento. Parametro di output.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'inserimento è stato effettuato correttamente; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="input" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary vsli:raw="Gets the upper bound of the range of invalid indexes.">Ottiene il limite superiore dell'intervallo degli indici non validi.</summary>
      <returns vsli:raw="A value representing the largest invalid index, as determined by the provider implementation. For example, if the lowest valid index is 0, this property will return -1.">Valore che rappresenta l'indice non valido superiore, come determinato dall'implementazione del provider. Se ad esempio l'indice valido inferiore è 0, questa proprietà restituisce -1.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is available for assignment.">Determina se la posizione specificata è disponibile per l'assegnazione.</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">Posizione in base zero da verificare nella maschera.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable and has not been assigned to yet; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la posizione specificata nella stringa formattata è modificabile e non è ancora stata assegnata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is editable.">Determina se la posizione specificata è modificabile.</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">Posizione in base zero da verificare nella maschera.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la posizione specificata nella stringa formattata è modificabile; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary vsli:raw="Gets or sets a value that determines whether password protection should be applied to the formatted string.">Ottiene o imposta un valore che determina se applicare la protezione tramite password alla stringa formattata.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input string is to be treated as a password string; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la stringa di input deve essere considerata come stringa della password; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid input character.">Determina se il carattere specificato è un carattere di input valido.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Valore <see cref="T:System.Char" /> su cui eseguire il test.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid input value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il carattere specificato contiene un valore di input valido; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid mask character.">Determina se il carattere specificato è un carattere della maschera valido.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Valore <see cref="T:System.Char" /> su cui eseguire il test.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid mask value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il carattere specificato contiene un valore della maschera valido; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid password character.">Determina se il carattere specificato è un carattere della password valido.</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Valore <see cref="T:System.Char" /> su cui eseguire il test.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid password value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il carattere specificato contiene un valore della password valido; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified position in the formatted string.">Ottiene l'elemento situato nella posizione specificata della stringa formattata.</summary>
      <param name="index" vsli:raw="A zero-based index of the element to retrieve.">Indice in base zero dell'elemento da recuperare.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; at the specified position in the formatted string.">Oggetto <see cref="T:System.Char" /> situato nella posizione specificata della stringa formattata.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero or greater than or equal to the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.Length&quot; /&gt; of the mask.">
        <paramref name="index" /> è minore di zero oppure maggiore o uguale alla proprietà <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> della maschera.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary vsli:raw="Gets the index in the mask of the rightmost input character that has been assigned to the mask.">Ottiene l'indice nella maschera del carattere di input all'estrema destra assegnato alla maschera.</summary>
      <returns vsli:raw="If at least one input character has been assigned to the mask, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the index of rightmost assigned position; otherwise, if no position has been assigned, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">Se alla maschera è stato assegnato almeno un carattere di input, un oggetto <see cref="T:System.Int32" /> contenente l'indice della posizione assegnata all'estrema destra; in caso contrario, se non è stata assegnata alcuna posizione, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary vsli:raw="Gets the length of the mask, absent any mask modifier characters.">Ottiene la lunghezza della maschera, senza i caratteri modificatori della maschera.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of positions in the mask, excluding characters that modify mask input.">Oggetto <see cref="T:System.Int32" /> contenente il numero di posizioni della maschera, esclusi i caratteri che modificano l'input della maschera.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary vsli:raw="Gets the input mask.">Ottiene la maschera di input.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the full mask.">Oggetto <see cref="T:System.String" /> contenente l'intera maschera.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary vsli:raw="Gets a value indicating whether all required inputs have been entered into the formatted string.">Ottiene un valore che indica se nella stringa formattata sono stati inseriti tutti gli input obbligatori.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required input has been entered into the mask; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se nella maschera sono stati inseriti tutti gli input obbligatori; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary vsli:raw="Gets a value indicating whether all required and optional inputs have been entered into the formatted string.">Ottiene un valore che indica se nella stringa formattata sono stati inseriti tutti gli input obbligatori e facoltativi.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required and optional inputs have been entered; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se sono stati inseriti tutti gli input obbligatori e facoltativi; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary vsli:raw="Gets or sets the character to be substituted for the actual input characters.">Ottiene o imposta il carattere da sostituire ai caratteri di input effettivi.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value used as the password character.">Valore <see cref="T:System.Char" /> utilizzato come carattere della password.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The password character specified when setting this property is the same as the current prompt character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt;. The two are required to be different.">Il carattere della password specificato quando si imposta questa proprietà è uguale al carattere di richiesta corrente, ossia <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />. I due caratteri devono essere differenti.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">Il carattere specificato quando si imposta questa proprietà non è un carattere della password valido, in base a quanto determinato dal metodo <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary vsli:raw="Gets or sets the character used to represent the absence of user input for all available edit positions.">Ottiene o imposta il carattere utilizzato per rappresentare l'assenza di input dell'utente per tutte le posizioni di modifica disponibili.</summary>
      <returns vsli:raw="The character used to prompt the user for input. The default is an underscore (_).">Carattere utilizzato per richiedere l'input all'utente. L'impostazione predefinita è un carattere di sottolineatura (_).</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The prompt character specified when setting this property is the same as the current password character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt;. The two are required to be different.">Il carattere di richiesta specificato quando si imposta questa proprietà è uguale al carattere della password corrente, <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />. I due caratteri devono essere differenti.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">Il carattere specificato quando si imposta questa proprietà non è un carattere della password valido, in base a quanto determinato dal metodo <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary vsli:raw="Removes the last assigned character from the formatted string.">Rimuove dalla stringa formattata l'ultimo carattere assegnato.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il carattere è stato rimosso; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the last assigned character from the formatted string, and then outputs the removal position and descriptive information.">Rimuove dalla stringa formattata l'ultimo carattere assegnato, quindi genera informazioni sulla posizione di rimozione e sulla descrizione.</summary>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the character was actually removed. An output parameter.">Posizione in base zero della stringa formattata dalla quale è stato effettivamente rimosso il carattere. Parametro di output.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Oggetto <see cref="T:System.ComponentModel.MaskedTextResultHint" /> che descrive sinteticamente il risultato dell'operazione. Parametro di output.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il carattere è stato rimosso; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the assigned character at the specified position from the formatted string.">Rimuove il carattere assegnato dalla posizione indicata della stringa formattata.</summary>
      <param name="position" vsli:raw="The zero-based position of the assigned character to remove.">Posizione in base zero del carattere assegnato da rimuovere.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il carattere è stato rimosso; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string.">Rimuove dalla stringa formattata tutti i caratteri assegnati compresi tra le posizioni specificate.</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">Posizione in base zero del primo carattere assegnato da rimuovere.</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">Posizione in base zero dell'ultimo carattere assegnato da rimuovere.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il carattere è stato rimosso; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string, and then outputs the removal position and descriptive information.">Rimuove dalla stringa formattata i caratteri assegnati compresi tra le posizioni specificate, quindi genera informazioni sulla posizione di rimozione e sulla descrizione.</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">Posizione in base zero del primo carattere assegnato da rimuovere.</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">Posizione in base zero dell'ultimo carattere assegnato da rimuovere.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string of where the characters were actually removed; otherwise, the first position where the operation failed. An output parameter.">In caso di esito positivo, posizione in base zero della stringa formattata dalla quale sono stati effettivamente rimossi i caratteri; in caso contrario, prima posizione nella quale l'operazione ha avuto esito negativo. Parametro di output.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Oggetto <see cref="T:System.ComponentModel.MaskedTextResultHint" /> che descrive sinteticamente il risultato dell'operazione. Parametro di output.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il carattere è stato rimosso; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value.">Sostituisce un singolo carattere nella posizione corrispondente o in quelle successive a quella specificata con il valore del carattere fornito.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">Valore <see cref="T:System.Char" /> che sostituisce il valore esistente.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">Posizione in base zero da ricercare per la sostituzione del primo carattere modificabile.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il carattere è stato sostituito; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character between the specified starting and ending positions with the specified character value, and then outputs the removal position and descriptive information.">Sostituisce un singolo carattere compreso tra le posizioni iniziale e finale specificate con il valore del carattere fornito, quindi genera informazioni sulla posizione di rimozione e sulla descrizione.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">Valore <see cref="T:System.Char" /> che sostituisce il valore esistente.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">Posizione in base zero della stringa formattata dalla quale ha inizio la sostituzione.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">Posizione in base zero della stringa formattata nella quale si conclude la sostituzione.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">In caso di esito positivo, posizione in base zero della stringa formattata nella quale è stato effettivamente sostituito l'ultimo carattere; in caso contrario, prima posizione nella quale l'operazione ha avuto esito negativo. Parametro di output.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">Oggetto <see cref="T:System.ComponentModel.MaskedTextResultHint" /> che descrive sinteticamente il risultato dell'operazione di sostituzione. Parametro di output.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il carattere è stato sostituito; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value, and then outputs the removal position and descriptive information.">Sostituisce un singolo carattere nella posizione corrispondente o in quelle successive a quella specificata con il valore del carattere fornito, quindi genera informazioni sulla posizione di rimozione e sulla descrizione.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">Valore <see cref="T:System.Char" /> che sostituisce il valore esistente.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">Posizione in base zero da ricercare per la sostituzione del primo carattere modificabile.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">In caso di esito positivo, posizione in base zero della stringa formattata nella quale è stato effettivamente sostituito l'ultimo carattere; in caso contrario, prima posizione nella quale l'operazione ha avuto esito negativo. Parametro di output.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">Oggetto <see cref="T:System.ComponentModel.MaskedTextResultHint" /> che descrive sinteticamente il risultato dell'operazione di sostituzione. Parametro di output.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il carattere è stato sostituito; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string.">Sostituisce un intervallo di caratteri modificabili a partire dalla posizione indicata con la stringa specificata.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">Valore dell'oggetto <see cref="T:System.String" /> utilizzato per sostituire i caratteri modificabili esistenti.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">Posizione in base zero da ricercare per la sostituzione del primo carattere modificabile.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se sono stati sostituiti tutti i caratteri; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="input" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters between the specified starting and ending positions with the specified string, and then outputs the removal position and descriptive information.">Sostituisce un intervallo di caratteri modificabili compresi tra le posizioni iniziale finale specificate, quindi genera informazioni sulla posizione di rimozione e sulla descrizione.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">Valore dell'oggetto <see cref="T:System.String" /> utilizzato per sostituire i caratteri modificabili esistenti.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">Posizione in base zero della stringa formattata dalla quale ha inizio la sostituzione.</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">Posizione in base zero della stringa formattata nella quale si conclude la sostituzione.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">In caso di esito positivo, posizione in base zero della stringa formattata nella quale è stato effettivamente sostituito l'ultimo carattere; in caso contrario, prima posizione nella quale l'operazione ha avuto esito negativo. Parametro di output.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">Oggetto <see cref="T:System.ComponentModel.MaskedTextResultHint" /> che descrive sinteticamente il risultato dell'operazione di sostituzione. Parametro di output.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se sono stati sostituiti tutti i caratteri; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string, and then outputs the removal position and descriptive information.">Sostituisce un intervallo di caratteri modificabili a partire dalla posizione indicata con la stringa specificata, quindi genera informazioni sulla posizione di rimozione e sulla descrizione.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">Valore dell'oggetto <see cref="T:System.String" /> utilizzato per sostituire i caratteri modificabili esistenti.</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">Posizione in base zero da ricercare per la sostituzione del primo carattere modificabile.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">In caso di esito positivo, posizione in base zero della stringa formattata nella quale è stato effettivamente sostituito l'ultimo carattere; in caso contrario, prima posizione nella quale l'operazione ha avuto esito negativo. Parametro di output.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">Oggetto <see cref="T:System.ComponentModel.MaskedTextResultHint" /> che descrive sinteticamente il risultato dell'operazione di sostituzione. Parametro di output.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se sono stati sostituiti tutti i caratteri; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary vsli:raw="Gets or sets a value that determines how an input character that matches the prompt character should be handled.">Ottiene o imposta un valore che determina la modalità di gestione di un carattere di input che corrisponda al carattere di richiesta.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character entered as input causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the prompt character is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se il carattere di richiesta inserito come input determina la reimpostazione della posizione modificabile corrente della maschera; in caso contrario, <see langword="false" /> per indicare che il carattere di richiesta deve essere elaborato come carattere di input normale. Il valore predefinito è <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary vsli:raw="Gets or sets a value that determines how a space input character should be handled.">Ottiene o imposta un valore che determina la modalità di gestione di un carattere di input di spaziatura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the space input character causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that it is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se il carattere di input di spaziatura determina la reimpostazione della posizione modificabile corrente della maschera; in caso contrario, <see langword="false" /> per indicarne l'elaborazione come carattere di input normale. Il valore predefinito è <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary vsli:raw="Sets the formatted string to the specified input string.">Imposta la stringa formattata sulla stringa di input specificata.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">Valore <see cref="T:System.String" /> utilizzato per impostare la stringa formattata.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se sono stati impostati tutti i caratteri; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="input" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Sets the formatted string to the specified input string, and then outputs the removal position and descriptive information.">Imposta la stringa formattata sulla stringa di input specificata, quindi genera informazioni sulla posizione di rimozione e sulla descrizione.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">Valore <see cref="T:System.String" /> utilizzato per impostare la stringa formattata.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually set; otherwise, the first position where the operation failed. An output parameter.">In caso di esito positivo, posizione in base zero della stringa formattata nella quale è stato effettivamente impostato l'ultimo carattere; in caso contrario, prima posizione nella quale l'operazione ha avuto esito negativo. Parametro di output.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the set operation. An output parameter.">Oggetto <see cref="T:System.ComponentModel.MaskedTextResultHint" /> che descrive sinteticamente il risultato dell'operazione di impostazione. Parametro di output.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se sono stati impostati tutti i caratteri; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="input" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary vsli:raw="Gets or sets a value indicating whether literal character positions in the mask can be overwritten by their same values.">Ottiene o imposta un valore che indica se è possibile sovrascrivere le posizioni dei caratteri letterali nella maschera con gli stessi valori.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow literals to be added back; otherwise, &lt;see langword=&quot;false&quot; /&gt; to not allow the user to overwrite literal characters. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> per consentire nuovamente l'aggiunta dei caratteri letterali; in caso contrario, <see langword="false" /> per non consentire la sovrascrittura dei caratteri letterali. Il valore predefinito è <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary vsli:raw="Returns the formatted string in a displayable form.">Restituisce la stringa formattata in formato visualizzabile.</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes prompts and mask literals.">Oggetto <see cref="T:System.String" /> formattato che include le richieste e i caratteri letterali della maschera.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary vsli:raw="Returns the formatted string that includes all the assigned character values.">Restituisce la stringa formattata che include tutti i valori dei caratteri assegnati.</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values.">Oggetto <see cref="T:System.String" /> formattato che include tutti i valori dei caratteri assegnati.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including password characters.">Restituisce la stringa formattata e include, facoltativamente, i caratteri della password.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">
        <see langword="true" /> per restituire i caratteri modificabili effettivi; in caso contrario, <see langword="false" /> per indicare che è necessario applicare la proprietà <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />.</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes literals, prompts, and optionally password characters.">Oggetto <see cref="T:System.String" /> formattato che include i caratteri letterali, di richiesta e, facoltativamente, della password.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including prompt and literal characters.">Restituisce la stringa formattata e include, facoltativamente, i caratteri di richiesta e letterali.</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per includere i caratteri di richiesta nella stringa restituita; in caso contrario, <see langword="false" />.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per includere i caratteri letterali nella stringa restituita; in caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values and optionally includes literals and prompts.">Oggetto <see cref="T:System.String" /> formattato che include tutti i valori dei caratteri assegnati e, facoltativamente, i caratteri letterali e di richiesta.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt, literal, and password characters.">Restituisce una sottostringa della stringa formattata e include, facoltativamente, i caratteri di richiesta, letterali e della password.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">
        <see langword="true" /> per restituire i caratteri modificabili effettivi; in caso contrario, <see langword="false" /> per indicare che è necessario applicare la proprietà <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />.</param>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per includere i caratteri di richiesta nella stringa restituita; in caso contrario, <see langword="false" />.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per includere i caratteri letterali nella stringa restituita; in caso contrario, <see langword="false" />.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">Posizione in base zero della stringa formattata dalla quale ha inizio l'output.</param>
      <param name="length" vsli:raw="The number of characters to return.">Numero dei caratteri da restituire.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals, prompts, and password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">In caso di esito positivo, sottostringa dell'oggetto <see cref="T:System.String" /> formattato, che include tutti i valori dei caratteri assegnati e, facoltativamente, i caratteri letterali, di richiesta e della password; in caso contrario, stringa <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt and literal characters.">Restituisce una sottostringa della stringa formattata e include, facoltativamente, i caratteri di richiesta e letterali.</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per includere i caratteri di richiesta nella stringa restituita; in caso contrario, <see langword="false" />.</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per includere i caratteri letterali nella stringa restituita; in caso contrario, <see langword="false" />.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">Posizione in base zero della stringa formattata dalla quale ha inizio l'output.</param>
      <param name="length" vsli:raw="The number of characters to return.">Numero dei caratteri da restituire.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals and prompts; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">In caso di esito positivo, sottostringa dell'oggetto <see cref="T:System.String" /> formattato che include tutti i valori dei caratteri assegnati e, facoltativamente, i caratteri letterali e di richiesta; in caso contrario, stringa <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including password characters.">Restituisce una sottostringa della stringa formattata e, facoltativamente, i caratteri della password.</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">
        <see langword="true" /> per restituire i caratteri modificabili effettivi; in caso contrario, <see langword="false" /> per indicare che è necessario applicare la proprietà <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />.</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">Posizione in base zero della stringa formattata dalla quale ha inizio l'output.</param>
      <param name="length" vsli:raw="The number of characters to return.">Numero dei caratteri da restituire.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes literals, prompts, and optionally password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">In caso di esito positivo, sottostringa dell'oggetto <see cref="T:System.String" /> formattato, che include i caratteri letterali, di richiesta e, facoltativamente, i caratteri della password; in caso contrario, stringa <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string.">Restituisce una sottostringa della stringa formattata.</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">Posizione in base zero della stringa formattata dalla quale ha inizio l'output.</param>
      <param name="length" vsli:raw="The number of characters to return.">Numero dei caratteri da restituire.</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">In caso di esito positivo, sottostringa dell'oggetto <see cref="T:System.String" /> formattato che include tutti i valori dei caratteri assegnati; in caso contrario, stringa <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified character could be set successfully at the specified position.">Verifica se è possibile impostare il carattere specificato nella posizione indicata.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Valore <see cref="T:System.Char" /> su cui eseguire il test.</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">Posizione della maschera in base alla quale verificare il carattere di input.</param>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">Oggetto <see cref="T:System.ComponentModel.MaskedTextResultHint" /> che descrive sinteticamente il risultato dell'operazione. Parametro di output.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character is valid for the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il carattere specificato è valido per la posizione indicata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary vsli:raw="Tests whether the specified character would be escaped at the specified position.">Verifica se il carattere specificato nella posizione indicata viene sottoposto a escape.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">Valore <see cref="T:System.Char" /> su cui eseguire il test.</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">Posizione della maschera in base alla quale verificare il carattere di input.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character would be escaped at the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il carattere specificato viene sottoposto a escape; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary vsli:raw="Tests whether the specified string could be set successfully.">Verifica se è possibile impostare la stringa formattata.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">Valore <see cref="T:System.String" /> su cui eseguire il test.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la stringa specificata rappresenta un input valido; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified string could be set successfully, and then outputs position and descriptive information.">Verifica se è possibile impostare la stringa specificata, quindi genera informazioni sulla posizione e sulla descrizione.</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">Valore <see cref="T:System.String" /> su cui eseguire il test.</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position of the last character actually tested; otherwise, the first position where the test failed. An output parameter.">In caso di esito positivo, posizione in base zero dell'ultimo carattere effettivamente verificato; in caso contrario, prima posizione nella quale la verifica ha avuto esito negativo. Parametro di output.</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the test operation. An output parameter.">Oggetto <see cref="T:System.ComponentModel.MaskedTextResultHint" /> che descrive sinteticamente il risultato dell'operazione di verifica. Parametro di output.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la stringa specificata rappresenta un input valido; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary vsli:raw="Specifies values that succinctly describe the results of a masked text parsing operation.">Specifica i valori che descrivono sinteticamente i risultati di un'operazione di analisi di testo mascherato.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not alphanumeric. .">L'operazione ha avuto esito negativo. È presente un carattere di input non alfanumerico. .</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not a member of the ASCII character set.">L'operazione ha avuto esito negativo. È presente un carattere di input non appartenente al set di caratteri ASCII.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary vsli:raw="Success. The operation succeeded because a literal, prompt or space character was an escaped character. For more information about escaped characters, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)&quot; /&gt; method.">Operazione completata. L'operazione ha avuto esito positivo perché un carattere letterale, di richiesta o di spaziatura è un carattere di escape. Per ulteriori informazioni sui caratteri di escape, vedere il metodo <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a digit.">L'operazione ha avuto esito negativo. È presente un carattere di input che non è una cifra.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary vsli:raw="Operation did not succeed. The program encountered an input character that was not valid. For more information about characters that are not valid, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)&quot; /&gt; method.">L'operazione ha avuto esito negativo. Il programma ha individuato un carattere di input non valido. Per ulteriori informazioni sui caratteri non validi, vedere il metodo <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a letter.">L'operazione ha avuto esito negativo. È presente un carattere di input che non è una lettera.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed; therefore, no side effect was produced.">Operazione completata. L'operazione principale non è stata eseguita perché non necessaria, pertanto non sono stati prodotti effetti collaterali.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary vsli:raw="Operation did not succeed. The current position in the formatted string is a literal character.">L'operazione ha avuto esito negativo. La posizione corrente della stringa formattata è rappresentata da un carattere letterale.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary vsli:raw="Operation did not succeed. The specified position is not in the range of the target string; typically it is either less than zero or greater then the length of the target string.">L'operazione ha avuto esito negativo. La posizione specificata non rientra nell'intervallo della stringa di destinazione. In genere, questo indica che è minore di zero o maggiore della lunghezza della stringa di destinazione.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary vsli:raw="Operation did not succeed. The prompt character is not valid at input, perhaps because the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.">L'operazione ha avuto esito negativo. Il carattere di richiesta non è valido come input. Questo può essere determinato dall'impostazione della proprietà <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> su <see langword="false" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed, but the method produced a side effect. For example, the &lt;see cref=&quot;Overload:System.ComponentModel.MaskedTextProvider.RemoveAt&quot; /&gt; method can delete an unassigned edit position, which causes left-shifting of subsequent characters in the formatted string.">Operazione completata. L'operazione principale non è stata eseguita perché non necessaria, ma il metodo ha prodotto un effetto collaterale. Il metodo <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" />, ad esempio, può eliminare una posizione di modifica non assegnata, determinando lo spostamento a sinistra dei caratteri successivi della stringa formattata.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a signed digit.">L'operazione ha avuto esito negativo. È presente un carattere di input che non è una cifra con segno.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary vsli:raw="Success. The primary operation succeeded.">Operazione completata. L'operazione principale ha avuto esito positivo.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary vsli:raw="Operation did not succeed. There were not enough edit positions available to fulfill the request.">L'operazione ha avuto esito negativo. Le posizioni di modifica disponibili non sono sufficienti per soddisfare la richiesta.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary vsli:raw="Unknown. The result of the operation could not be determined.">Sconosciuto. Impossibile determinare il risultato dell'operazione.</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary vsli:raw="Represents a class member, such as a property or event. This is an abstract base class.">Rappresenta il membro di una classe, ad esempio una proprietà o un evento. Si tratta di una classe base astratta</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.MemberDescriptor" /> con l'oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> specificato.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the member and its attributes.">Oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> che contiene il nome del membro e i relativi attributi.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the old &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.MemberDescriptor" /> con il nome nell'oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> specificato e gli attributi nella precedente classe <see cref="T:System.ComponentModel.MemberDescriptor" /> e nella matrice <see cref="T:System.Attribute" />.</summary>
      <param name="oldMemberDescriptor" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">Oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> che ha il nome del membro e i relativi attributi.</param>
      <param name="newAttributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects with the attributes you want to add to the member.">Matrice di oggetti <see cref="T:System.Attribute" /> con gli attributi che si desidera aggiungere al membro.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.MemberDescriptor" /> con il nome specificato del membro.</summary>
      <param name="name" vsli:raw="The name of the member.">Nome del membro.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">Il nome è una stringa vuota ("") oppure <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member and an array of attributes.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.MemberDescriptor" /> con il nome specificato del membro e una matrice di attributi.</summary>
      <param name="name" vsli:raw="The name of the member.">Nome del membro.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the member attributes.">Matrice di tipo <see cref="T:System.Attribute" /> che contiene gli attributi del membro.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">Il nome è una stringa vuota ("") oppure <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary vsli:raw="Gets or sets an array of attributes.">Ottiene o imposta una matrice di attributi.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the attributes of this member.">Matrice di tipo <see cref="T:System.Attribute" /> che contiene gli attributi di questo membro.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary vsli:raw="Gets the collection of attributes for this member.">Ottiene l'insieme di attributi per questo membro.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that provides the attributes for this member, or an empty collection if there are no attributes in the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.AttributeCollection" /> che fornisce gli attributi per questo membro oppure un insieme vuoto se la proprietà <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> non contiene attributi.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary vsli:raw="Gets the name of the category to which the member belongs, as specified in the &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;.">Ottiene il nome della categoria alla quale appartiene il membro, come specificato in <see cref="T:System.ComponentModel.CategoryAttribute" />.</summary>
      <returns vsli:raw="The name of the category to which the member belongs. If there is no &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;, the category name is set to the default category, &lt;see langword=&quot;Misc&quot; /&gt;.">Nome della categoria alla quale appartiene il membro. Se non esiste alcun attributo <see cref="T:System.ComponentModel.CategoryAttribute" />, il nome della categoria verrà impostato sulla categoria predefinita <see langword="Misc" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary vsli:raw="Creates a collection of attributes using the array of attributes passed to the constructor.">Consente di creare un insieme di attributi utilizzando la matrice di attributi passati al costruttore.</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that contains the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt; attributes.">Nuovo insieme <see cref="T:System.ComponentModel.AttributeCollection" /> che contiene gli attributi della proprietà <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary vsli:raw="Gets the description of the member, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;.">Ottiene la descrizione del membro, come specificato in <see cref="T:System.ComponentModel.DescriptionAttribute" />.</summary>
      <returns vsli:raw="The description of the member. If there is no &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;, the property value is set to the default, which is an empty string (&quot;&quot;).">Descrizione del membro. Se non esiste alcun attributo <see cref="T:System.ComponentModel.DescriptionAttribute" />, il valore della proprietà viene impostato su quello predefinito, ovvero una stringa vuota ("").</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary vsli:raw="Gets whether this member should be set only at design time, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignOnlyAttribute&quot; /&gt;.">Indica se questo membro deve essere impostato soltanto in fase di progettazione, come specificato in <see cref="T:System.ComponentModel.DesignOnlyAttribute" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this member should be set only at design time; &lt;see langword=&quot;false&quot; /&gt; if the member can be set during run time.">
        <see langword="true" /> se il membro deve essere impostato soltanto in fase di progettazione, <see langword="false" /> se il membro può essere impostato in fase di esecuzione.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary vsli:raw="Gets the name that can be displayed in a window, such as a Properties window.">Ottiene il nome che può essere visualizzato in una finestra, quale una finestra delle proprietà.</summary>
      <returns vsli:raw="The name to display for the member.">Nome da visualizzare per il membro.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this instance to the given object to see if they are equivalent.">Consente di confrontare questa istanza con l'oggetto specificato per verificare se sono equivalenti.</summary>
      <param name="obj" vsli:raw="The object to compare to the current instance.">Oggetto da confrontare con l'istanza corrente della classe.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se sono equivalenti, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="When overridden in a derived class, adds the attributes of the inheriting class to the specified list of attributes in the parent class.">Quando è sottoposto a override in una classe derivata, consente di aggiungere gli attributi della classe che eredita all'elenco specificato di attributi nella classe padre.</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">Oggetto <see cref="T:System.Collections.IList" /> che elenca gli attributi nella classe padre. Inizialmente, questo oggetto è vuoto.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary vsli:raw="Finds the given method through reflection, searching only for public methods.">Consente di trovare il metodo specificato mediante reflection, cercando soltanto i metodi pubblici.</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">Componente che contiene il metodo.</param>
      <param name="name" vsli:raw="The name of the method to find.">Nome del metodo da ricercare.</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">Matrice di parametri per il metodo, utilizzata per scegliere fra i metodi di overload.</param>
      <param name="returnType" vsli:raw="The type to return for the method.">Tipo da restituire per il metodo.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo oppure <see langword="null" /> se il metodo non viene trovato.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Finds the given method through reflection, with an option to search only public methods.">Consente di trovare il metodo specificato mediante reflection, con la possibilità di ricercare soltanto i metodi pubblici.</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">Componente che contiene il metodo.</param>
      <param name="name" vsli:raw="The name of the method to find.">Nome del metodo da ricercare.</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">Matrice di parametri per il metodo, utilizzata per scegliere fra i metodi di overload.</param>
      <param name="returnType" vsli:raw="The type to return for the method.">Tipo da restituire per il metodo.</param>
      <param name="publicOnly" vsli:raw="Whether to restrict search to public methods.">Per limitare la ricerca ai metodi pubblici.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo oppure <see langword="null" /> se il metodo non viene trovato.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Codice hash per l'oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> corrente.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="Retrieves the object that should be used during invocation of members.">Recupera l'oggetto da utilizzare durante la chiamata dei membri.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">Tipo <see cref="T:System.Type" /> della destinazione della chiamata.</param>
      <param name="instance" vsli:raw="The potential invocation target.">Destinazione potenziale della chiamata.</param>
      <returns vsli:raw="The object to be used during member invocations.">Oggetto da utilizzare durante le chiamate dei membri.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> o <paramref name="instance" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary vsli:raw="Gets the component on which to invoke a method.">Ottiene il componente sul quale richiamare un metodo.</summary>
      <param name="componentClass" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of component this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; is bound to. For example, if this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; describes a property, this parameter should be the class that the property is declared on.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di componente al quale è associato questo oggetto <see cref="T:System.ComponentModel.MemberDescriptor" />. Se ad esempio la classe <see cref="T:System.ComponentModel.MemberDescriptor" /> descrive una proprietà, questo parametro deve rappresentare la classe sulla quale è dichiarata la proprietà.</param>
      <param name="component" vsli:raw="An instance of the object to call.">Istanza dell'oggetto da chiamare.</param>
      <returns vsli:raw="An instance of the component to invoke. This method returns a visual designer when the property is attached to a visual designer.">Istanza del componente da richiamare. Questo metodo restituisce una finestra di progettazione visiva quando la proprietà è associata a una finestra del genere.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentClass&quot; /&gt; or &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentClass" /> o <paramref name="component" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary vsli:raw="Gets a component site for the given component.">Ottiene un sito del componente per il componente specificato.</summary>
      <param name="component" vsli:raw="The component for which you want to find a site.">Componente per il quale si desidera trovare un sito.</param>
      <returns vsli:raw="The site of the component, or &lt;see langword=&quot;null&quot; /&gt; if a site does not exist.">Sito del componente oppure <see langword="null" /> se non esiste alcun sito.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary vsli:raw="Gets a value indicating whether the member is browsable, as specified in the &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;.">Ottiene un valore che indica se il membro è esplorabile, come specificato in <see cref="T:System.ComponentModel.BrowsableAttribute" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is browsable; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If there is no &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;, the property value is set to the default, which is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se il membro è esplorabile, in caso contrario <see langword="false" />. Se non esiste alcun attributo <see cref="T:System.ComponentModel.BrowsableAttribute" />, il valore della proprietà verrà impostato su quello predefinito, ovvero <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary vsli:raw="Gets the name of the member.">Ottiene il nome del membro.</summary>
      <returns vsli:raw="The name of the member.">Nome del membro.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary vsli:raw="Gets the hash code for the name of the member, as specified in &lt;see cref=&quot;M:System.String.GetHashCode&quot; /&gt;.">Ottiene il codice hash per il nome del membro, come specificato nel metodo <see cref="M:System.String.GetHashCode" />.</summary>
      <returns vsli:raw="The hash code for the name of the member.">Codice hash per il nome del membro.</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary vsli:raw="Provides a type converter to convert multiline strings to a simple string.">Fornisce un convertitore di tipi per la conversione di stringhe su più righe in una stringa semplice.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MultilineStringConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.MultilineStringConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Converte l'oggetto valore indicato nel tipo specificato, usando il contesto e le informazioni sulle impostazioni cultura specificati.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Oggetto <see cref="T:System.Globalization.CultureInfo" />. Se viene passato <see langword="null" /> , verranno usate le impostazioni cultura correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">Oggetto <see cref="T:System.Type" /> in cui convertire il parametro del valore.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the &lt;paramref name=&quot;value&quot; /&gt; parameter, using the specified context and attributes.">Restituisce un insieme di proprietà per il tipo di matrice specificato dal parametro <paramref name="value" /> utilizzando il contesto e gli attributi specificati.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Oggetto <see cref="T:System.Object" /> che specifica il tipo di matrice di cui ottenere le proprietà.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> usata come filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà esposte per questo tipo di dati oppure <see langword="null" /> se non vi sono proprietà.</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">Indica se questo oggetto supporta le proprietà, utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.ComponentModel.MultilineStringConverter.GetProperties&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se occorre chiamare <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" /> per trovare le proprietà di questo oggetto. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary vsli:raw="Provides the base implementation for the &lt;see cref=&quot;T:System.ComponentModel.INestedContainer&quot; /&gt; interface, which enables containers to have an owning component.">Fornisce l'implementazione di base per l'interfaccia <see cref="T:System.ComponentModel.INestedContainer" /> che consente ai contenitori di disporre di un componente proprietario.</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NestedContainer&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.NestedContainer" />.</summary>
      <param name="owner" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">L'oggetto <see cref="T:System.ComponentModel.IComponent" /> che possiede questo contenitore annidato.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site for the component within the container.">Crea un sito per il componente all'interno del contenitore.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">Oggetto <see cref="T:System.ComponentModel.IComponent" /> per il quale creare un sito.</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">Nome da assegnare al parametro <paramref name="component" /> oppure <see langword="null" /> per non assegnare alcun nome.</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.ISite" /> appena creato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the resources used by the nested container.">Rilascia le risorse utilizzate dal contenitore annidato.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite, <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">Ottiene l'oggetto servizio del tipo specificato, se disponibile.</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">L'oggetto <see cref="T:System.Type" /> del servizio da recuperare.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that implements the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">Oggetto <see cref="T:System.Object" /> che implementa il servizio richiesto, oppure <see langword="null" /> se non è possibile risolvere il servizio.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for this nested container.">Ottiene il componente proprietario per questo contenitore annidato.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">L'oggetto <see cref="T:System.ComponentModel.IComponent" /> che possiede questo contenitore annidato.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary vsli:raw="Gets the name of the owning component.">Ottiene il nome del componente proprietario.</summary>
      <returns vsli:raw="The name of the owning component.">Nome del componente proprietario.</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary vsli:raw="Provides automatic conversion between a nullable type and its underlying primitive type.">Fornisce la conversione automatica tra un tipo nullable e il relativo tipo primitivo sottostante.</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NullableConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.NullableConverter" />.</summary>
      <param name="type" vsli:raw="The specified nullable type.">Tipo nullable specificato.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is not a nullable type.">
        <paramref name="type" /> non è un tipo nullable.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">Restituisce un valore che indica se il convertitore può convertire un oggetto del tipo specificato nel tipo di questo convertitore, usando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo da cui eseguire la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">Restituisce un valore che indica se il convertitore può convertire l'oggetto nel tipo specificato usando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo in cui eseguire la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Converte l'oggetto indicato nel tipo di questo convertitore usando il contesto e le informazioni sulle impostazioni cultura specificati.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> da usare come impostazioni cultura correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Converte l'oggetto valore indicato nel tipo specificato, usando il contesto e le informazioni sulle impostazioni cultura specificati.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> da usare come impostazioni cultura correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">Oggetto <see cref="T:System.Type" /> in cui convertire il parametro del valore.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">Crea un'istanza del tipo a cui questo oggetto <see cref="T:System.ComponentModel.TypeConverter" /> è associato, usando il contesto specificato, dato un set di valori di proprietà per l'oggetto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">
        <see cref="T:System.Collections.IDictionary" /> dei nuovi valori di proprietà.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Object" /> che rappresenta l'oggetto <see cref="T:System.Collections.IDictionary" /> specificato oppure <see langword="null" /> se non è possibile creare l'oggetto. Questo metodo restituisce sempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">Indica se la modifica di un valore di questo oggetto richiede la chiamata del metodo <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> per creare un nuovo valore utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la modifica di una proprietà dell'oggetto richiede una chiamata a <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> per creare un nuovo valore. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">Restituisce un insieme di proprietà per il tipo di matrice specificato dal parametro del valore utilizzando il contesto e gli attributi specificati.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Oggetto <see cref="T:System.Object" /> che specifica il tipo di matrice di cui ottenere le proprietà.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> utilizzata come filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà esposte per questo tipo di dati oppure <see langword="null" /> se non vi sono proprietà.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">Indica se questo oggetto supporta le proprietà, utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se occorre chiamare <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> per trovare le proprietà di questo oggetto. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">Restituisce un insieme di valori standard del tipo di dati per il quale è stato progettato questo convertitore di tipi, quando viene fornito un contesto di formato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato, utilizzabile per estrarre informazioni aggiuntive sull'ambiente da cui viene richiamato il convertitore. Questo parametro o le proprietà di questo parametro possono essere <see langword="null" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Insieme <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> con un set standard di valori validi oppure <see langword="null" /> se il tipo di dati non supporta un set standard di valori.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;Overload:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">Indica se l'insieme di valori standard restituiti dal metodo <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" /> rappresenta un elenco esclusivo di valori possibili, utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" /> se l'insieme <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> restituito dal metodo <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> rappresenta un elenco completo dei valori possibili. <see langword="false" /> se sono possibili altri valori.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">Indica se questo oggetto supporta un insieme standard di valori selezionabili da un elenco, utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è necessario chiamare il metodo <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> per individuare un insieme comune di valori supportati dall’oggetto; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">Indica se l'oggetto valore specificato è valido per questo tipo e per il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">Oggetto <see cref="T:System.Object" /> di cui eseguire il test di validità.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore specificato è valido per questo oggetto. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary vsli:raw="Gets the nullable type.">Ottiene il tipo nullable.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the nullable type.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo nullable.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary vsli:raw="Gets the underlying type.">Ottiene il tipo sottostante.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the underlying type.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo sottostante.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary vsli:raw="Gets the underlying type converter.">Ottiene il convertitore del tipo sottostante.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that represents the underlying type converter.">Oggetto <see cref="T:System.ComponentModel.TypeConverter" /> che rappresenta il convertitore del tipo sottostante.</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary vsli:raw="Indicates that an object's text representation is obscured by characters such as asterisks. This class cannot be inherited.">Indica che la rappresentazione di testo di un oggetto è nascosta da caratteri quali gli asterischi. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class, optionally showing password text.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> visualizzando, facoltativamente, il testo della password.</summary>
      <param name="password" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per indicare la visualizzazione della proprietà come testo della password; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">Specifica il valore predefinito dell'oggetto <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; instances are equal.">Determina se due istanze di <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> sono uguali.</summary>
      <param name="o" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> da confrontare con l'oggetto <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> specificato è uguale all'oggetto <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> corrente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">Codice hash per l'oggetto <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> corrente.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns an indication whether the value of this instance is the default value.">Indica se il valore dell'istanza è quello predefinito.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questa istanza è l'attributo predefinito per la classe. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary vsli:raw="Specifies that a text property is not used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">Indica che una proprietà del testo non viene utilizzata come password. Questo campo <see langword="static" /> (<see langword="Shared" /> in Visual Basic) è in sola lettura.</summary>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary vsli:raw="Gets a value indicating if the property for which the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is defined should be shown as password text.">Ottiene un valore che indica se la proprietà per la quale è stato definito l'oggetto <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> debba essere visualizzata come testo della password.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la proprietà deve essere visualizzata come testo della password; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary vsli:raw="Specifies that a text property is used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">Indica che una proprietà del testo viene utilizzata come password. Questo campo <see langword="static" /> (<see langword="Shared" /> in Visual Basic) è in sola lettura.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary vsli:raw="Provides an abstraction of a property on a class.">Fornisce un'astrazione di una proprietà su una classe.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> con il nome e gli attributi nell'oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> specificato.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the property and its attributes.">Oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> che contiene il nome della proprietà e i relativi attributi.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> con il nome nell'oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> specificato e gli attributi nell'oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> e nella matrice <see cref="T:System.Attribute" />.</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; containing the name of the member and its attributes.">Oggetto <see cref="T:System.ComponentModel.MemberDescriptor" /> che contiene il nome del membro e i relativi attributi.</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array containing the attributes you want to associate with the property.">Matrice <see cref="T:System.Attribute" /> contenente gli attributi che si desidera associare alla proprietà.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the specified name and attributes.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> con il nome e gli attributi specificati.</summary>
      <param name="name" vsli:raw="The name of the property.">Nome della proprietà.</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the property attributes.">Matrice di tipo <see cref="T:System.Attribute" /> che contiene gli attributi della proprietà.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">Consente ad altri oggetti di ricevere una notifica quando la proprietà viene modificata.</summary>
      <param name="component" vsli:raw="The component to add the handler for.">Componente per il quale aggiungere il gestore.</param>
      <param name="handler" vsli:raw="The delegate to add as a listener.">Delegato da aggiungere come listener.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> o <paramref name="handler" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, returns whether resetting an object changes its value.">Quando è sottoposto a override in una classe derivata, indica se la reimpostazione di un oggetto ne cambia il valore.</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">Componente di cui eseguire il test di reimpostazione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes its value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se reimpostando il componente varia il relativo valore, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the component this property is bound to.">Quando è sottoposto a override in una classe derivata, consente di ottenere il tipo di componente a cui questa proprietà è associata.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component this property is bound to. When the &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)&quot; /&gt; methods are invoked, the object specified might be an instance of this type.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di componente a cui questa proprietà è associata. Quando viene richiamato il metodo <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> o <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" />, l'oggetto specificato potrebbe essere un'istanza di questo tipo.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary vsli:raw="Gets the type converter for this property.">Ottiene il convertitore di tipi di questa proprietà.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is used to convert the &lt;see cref=&quot;T:System.Type&quot; /&gt; of this property.">Oggetto <see cref="T:System.ComponentModel.TypeConverter" /> che viene utilizzato per convertire l'oggetto <see cref="T:System.Type" /> della proprietà.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary vsli:raw="Creates an instance of the specified type.">Crea un'istanza del tipo specificato.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo da creare.</param>
      <returns vsli:raw="A new instance of the type.">Nuova istanza del tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this to another object to see if they are equivalent.">Consente di confrontare questo oggetto con un altro oggetto per verificare se sono equivalenti.</summary>
      <param name="obj" vsli:raw="The object to compare to this &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Oggetto da confrontare con la classe <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se i valori sono equivalenti, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="Adds the attributes of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the specified list of attributes in the parent class.">Aggiunge gli attributi dell'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> all'elenco di attributi specificato della classe padre.</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">Oggetto <see cref="T:System.Collections.IList" /> che elenca gli attributi nella classe padre. Inizialmente, questo oggetto è vuoto.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt;.">Restituisce l'oggetto <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> predefinito.</summary>
      <returns vsli:raw="A collection of property descriptor.">Raccolta di descrittori della proprietà.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; using a specified array of attributes as a filter.">Restituisce un insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> utilizzando una specifica matrice di attributi come filtro.</summary>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> da utilizzare come filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà che corrispondono agli attributi specificati.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object.">Restituisce un insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> per un dato oggetto.</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">Componente per il quale ottenere le proprietà.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà per il componente specificato.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object using a specified array of attributes as a filter.">Restituisce un insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> per un determinato oggetto utilizzando una specifica matrice di attributi come filtro.</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">Componente per il quale ottenere le proprietà.</param>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> da utilizzare come filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà che corrispondono agli attributi specificati per lo specifico componente.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Gets an editor of the specified type.">Ottiene un editor del tipo specificato.</summary>
      <param name="editorBaseType" vsli:raw="The base type of editor, which is used to differentiate between multiple editors that a property supports.">Il tipo base di editor, utilizzato per distinguere i numerosi editor supportati da una proprietà.</param>
      <returns vsli:raw="An instance of the requested editor type, or &lt;see langword=&quot;null&quot; /&gt; if an editor cannot be found.">Istanza del tipo di editor richiesto oppure <see langword="null" /> se non viene trovato un editor.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">Restituisce il codice hash per questo oggetto.</summary>
      <returns vsli:raw="The hash code for this object.">Codice hash per l'oggetto.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="This method returns the object that should be used during invocation of members.">Questo metodo restituisce l'oggetto da utilizzare durante la chiamata dei membri.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">Tipo <see cref="T:System.Type" /> della destinazione della chiamata.</param>
      <param name="instance" vsli:raw="The potential invocation target.">Destinazione potenziale della chiamata.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; that should be used during invocation of members.">Oggetto <see cref="T:System.Object" /> da utilizzare durante la chiamata dei membri.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary vsli:raw="Returns a type using its name.">Consente di restituire un tipo utilizzandone il nome.</summary>
      <param name="typeName" vsli:raw="The assembly-qualified name of the type to retrieve.">Il nome qualificato dall'assembly del tipo da recuperare.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that matches the given type name, or &lt;see langword=&quot;null&quot; /&gt; if a match cannot be found.">Oggetto <see cref="T:System.Type" /> che corrisponde al nome del tipo specificato oppure <see langword="null" /> se non viene trovata alcuna corrispondenza.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, gets the current value of the property on a component.">Quando è sottoposto a override in una classe derivata, consente di ottenere il valore corrente della proprietà su un componente.</summary>
      <param name="component" vsli:raw="The component with the property for which to retrieve the value.">Componente con la proprietà per la quale recuperare il valore.</param>
      <returns vsli:raw="The value of a property for a given component.">Valore di una proprietà per un dato componente.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary vsli:raw="Retrieves the current set of &lt;c&gt;ValueChanged&lt;/c&gt; event handlers for a specific component.">Recupera l'insieme corrente di gestori di eventi <c>ValueChanged</c> per un componente specifico.</summary>
      <param name="component" vsli:raw="The component for which to retrieve event handlers.">Componente per cui recuperare i gestori di eventi.</param>
      <returns vsli:raw="A combined multicast event handler, or &lt;see langword=&quot;null&quot; /&gt; if no event handlers are currently assigned to &lt;paramref name=&quot;component&quot; /&gt;.">Gestore di eventi multicast combinati o <see langword="null" /> se nessun gestore di eventi è attualmente assegnato a <paramref name="component" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary vsli:raw="Gets a value indicating whether this property should be localized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt;.">Ottiene un valore che indica se la proprietà deve essere localizzata, come specificato in <see cref="T:System.ComponentModel.LocalizableAttribute" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is marked with the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt; set to &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il membro è contrassegnato con la classe <see cref="T:System.ComponentModel.LocalizableAttribute" /> impostata su <see langword="true" />; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether this property is read-only.">Quando è sottoposto a override in una classe derivata, consente di ottenere un valore che indica se questa proprietà è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la proprietà è di sola lettura, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary vsli:raw="Raises the &lt;c&gt;ValueChanged&lt;/c&gt; event that you implemented.">Genera l'evento <c>ValueChanged</c> implementato.</summary>
      <param name="component" vsli:raw="The object that raises the event.">Oggetto che genera l'evento.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">Oggetto <see cref="T:System.EventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the property.">Quando è sottoposto a override in una classe derivata, consente di ottenere il tipo della proprietà.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo della proprietà.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">Consente ad altri oggetti di ricevere una notifica quando la proprietà viene modificata.</summary>
      <param name="component" vsli:raw="The component to remove the handler for.">Componente per il quale rimuovere il gestore.</param>
      <param name="handler" vsli:raw="The delegate to remove as a listener.">Delegato da rimuovere come listener.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> o <paramref name="handler" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, resets the value for this property of the component to the default value.">Quando è sottoposto a override in una classe derivata, consente di reimpostare il valore predefinito di questa proprietà del componente.</summary>
      <param name="component" vsli:raw="The component with the property value that is to be reset to the default value.">Componente con il valore di proprietà da reimpostare sul valore predefinito.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary vsli:raw="Gets a value indicating whether this property should be serialized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibilityAttribute&quot; /&gt;.">Ottiene un valore che indica se la proprietà deve essere serializzata, come specificato in <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibility&quot; /&gt; enumeration values that specifies whether this property should be serialized.">Uno dei valori di enumerazione di <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> che specifica se la proprietà deve essere serializzata.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary vsli:raw="When overridden in a derived class, sets the value of the component to a different value.">Quando è sottoposto a override in una classe derivata, consente di impostare il valore del componente su un valore differente.</summary>
      <param name="component" vsli:raw="The component with the property value that is to be set.">Componente con il valore di proprietà da impostare.</param>
      <param name="value" vsli:raw="The new value.">Nuovo valore.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.">Quando è sottoposto a override in una classe derivata, consente di determinare un valore che indica se il valore di questa proprietà deve essere conservato.</summary>
      <param name="component" vsli:raw="The component with the property to be examined for persistence.">Componente con la proprietà di cui verificare la persistenza.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be persisted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la proprietà deve essere conservata, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary vsli:raw="Gets a value indicating whether value change notifications for this property may originate from outside the property descriptor.">Ottiene un valore che indica se le notifiche delle modifiche dei valori di questa proprietà possono avere origine all'esterno del descrittore della proprietà.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if value change notifications may originate from outside the property descriptor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se le notifiche delle modifiche dei valori possono avere origine all'esterno del descrittore della proprietà; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">Matrice di tipo <see cref="T:System.ComponentModel.PropertyDescriptor" /> che fornisce le proprietà per questo insieme.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class, which is optionally read-only.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, che è facoltativamente di sola lettura.</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">Matrice di tipo <see cref="T:System.ComponentModel.PropertyDescriptor" /> che fornisce le proprietà per questo insieme.</param>
      <param name="readOnly" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, specifies that the collection cannot be modified.">Se <see langword="true" />, specifica che non è possibile modificare l'insieme.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection.">Aggiunge l'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> specificato alla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> da aggiungere alla raccolta.</param>
      <returns vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added to the collection.">Indice dell'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> che è stato aggiunto all'insieme.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary vsli:raw="Removes all &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects from the collection.">Rimuove tutti gli oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> dalla raccolta.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Indica se l'insieme contiene il dato oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to find in the collection.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> da trovare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme contiene l'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> specificato, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to an array, starting at the specified index number.">Consente di copiare l'intero insieme in una matrice, iniziando dal numero di indice specificato.</summary>
      <param name="array" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to copy elements of the collection to.">Matrice di oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> in cui copiare elementi dell'insieme.</param>
      <param name="index" vsli:raw="The index of the &lt;paramref name=&quot;array&quot; /&gt; parameter at which copying begins.">Indice del parametro <paramref name="array" /> in corrispondenza del quale ha inizio la copia.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of property descriptors in the collection.">Ottiene il numero di descrittori di proprietà nell'insieme.</summary>
      <returns vsli:raw="The number of property descriptors in the collection.">Numero di descrittori di proprietà nell'insieme.</returns>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use instead of creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Consente di specificare un insieme vuoto che può essere utilizzato invece di crearne uno nuovo senza elementi. Questo campo <see langword="static" /> è di sola lettura.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, using a Boolean to indicate whether to ignore case.">Restituisce l'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> con il nome specificato, utilizzando un valore Boolean per indicare se ignorare la distinzione fra maiuscole e minuscole.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return from the collection.">Nome dell'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> da restituire dall'insieme.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the property name; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se si desidera ignorare la distinzione fra maiuscole e minuscole del nome della proprietà, in caso contrario <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> con il nome specificato oppure <see langword="null" /> se la proprietà non esiste.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">Restituisce un enumeratore per questa classe.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Enumeratore di tipo <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Restituisce l'indice dell'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return the index of.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> di cui restituire l'indice.</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">Indice dell'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> specificato.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection at the specified index number.">Consente di aggiungere all'insieme l'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> in corrispondenza del numero di indice specificato.</summary>
      <param name="index" vsli:raw="The index at which to add the &lt;paramref name=&quot;value&quot; /&gt; parameter to the collection.">Indice in corrispondenza del quale aggiungere il parametro <paramref name="value" /> all'insieme.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> da aggiungere alla raccolta.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Consente di ordinare i membri dell'insieme utilizzando l'oggetto <see cref="T:System.Collections.IComparer" /> specificato.</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Operatore di confronto da utilizzare per ordinare gli oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> in questo insieme.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">Consente di ordinare i membri dell'insieme. Viene applicato per primo l'ordinamento specificato, seguito dall'ordinamento predefinito di questo insieme, generalmente in ordine alfabetico.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Matrice di stringhe che descrive la sequenza in cui ordinare gli oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> nell'insieme.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index number.">Ottiene o imposta l'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> in corrispondenza del numero di indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get or set.">Indice in base zero dell'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> da ottenere o impostare.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified index number.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> con il numero di indice specificato.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)&quot; /&gt;.">Il parametro <paramref name="index" /> non è un indice valido per la proprietà <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name.">Ottiene o imposta la classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> con il nome specificato.</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get from the collection.">Nome dell'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> da ottenere dalla raccolta.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> con il nome specificato oppure <see langword="null" /> se la proprietà non esiste.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the collection.">Rimuove l'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> specificato dalla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> da rimuovere dalla raccolta.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index from the collection.">Rimuove l'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> in corrispondenza dell'indice specificato dall'insieme.</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">Indice dell'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> da rimuovere dall'insieme.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.">Consente di ordinare i membri dell'insieme utilizzando l'ordine predefinito, che è generalmente quello alfabetico.</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Nuovo insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> che contiene gli oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> ordinati.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Consente di ordinare i membri dell'insieme utilizzando l'oggetto <see cref="T:System.Collections.IComparer" /> specificato.</summary>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Operatore di confronto da utilizzare per ordinare gli oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> in questo insieme.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Nuovo insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> che contiene gli oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> ordinati.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">Consente di ordinare i membri dell'insieme. Viene applicato per primo l'ordinamento specificato, seguito dall'ordinamento predefinito di questo insieme, generalmente in ordine alfabetico.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Matrice di stringhe che descrive la sequenza in cui ordinare gli oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> nell'insieme.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Nuovo insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> che contiene gli oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> ordinati.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">Consente di ordinare i membri dell'insieme. Viene applicato per primo l'ordinamento specificato, seguito dall'ordinamento che utilizza l'oggetto <see cref="T:System.Collections.IComparer" /> specificato.</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Matrice di stringhe che descrive la sequenza in cui ordinare gli oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> nell'insieme.</param>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">Operatore di confronto da utilizzare per ordinare gli oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> in questo insieme.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">Nuovo insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> che contiene gli oggetti <see cref="T:System.ComponentModel.PropertyDescriptor" /> ordinati.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Ottiene il numero di elementi contenuti nella raccolta.</summary>
      <returns vsli:raw="The number of elements contained in the collection.">Numero di elementi contenuti nella raccolta.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread safe).">Ottiene un valore che indica se l'accesso alla raccolta è sincronizzato (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'accesso alla raccolta è sincronizzato (thread-safe), altrimenti <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Ottiene un oggetto che può essere usato per sincronizzare l'accesso alla raccolta.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">Oggetto che può essere usato per sincronizzare l'accesso alla raccolta.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Aggiunge un elemento con la chiave e il valore forniti all'interfaccia <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the key of the element to add.">Oggetto <see cref="T:System.Object" /> da usare come chiave dell'elemento da aggiungere.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the value of the element to add.">Oggetto <see cref="T:System.Object" /> da usare come valore dell'elemento da aggiungere.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Rimuove tutti gli elementi da <see cref="T:System.Collections.IDictionary" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">Determina se <see cref="T:System.Collections.IDictionary" /> contiene un elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Chiave da individuare in <see cref="T:System.Collections.IDictionary" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.IDictionary" /> contiene un elemento con la chiave; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">Restituisce un enumeratore per questa classe.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Enumeratore di tipo <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">Ottiene un valore che indica se <see cref="T:System.Collections.IDictionary" /> ha dimensioni fisse.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.IDictionary" /> è di dimensioni fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">Ottiene un valore che indica se <see cref="T:System.Collections.IDictionary" /> è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.IDictionary" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Ottiene o imposta l'elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key of the element to get or set.">Chiave dell'elemento da ottenere o impostare.</param>
      <returns vsli:raw="The element with the specified key.">Elemento con la chiave specificata.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Ottiene <see cref="T:System.Collections.ICollection" /> contenente le chiavi di <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Interfaccia <see cref="T:System.Collections.ICollection" /> contenente le chiavi dell'interfaccia <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Rimuove l'elemento con la chiave specificata da <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Chiave dell'elemento da rimuovere.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Ottiene <see cref="T:System.Collections.ICollection" /> contenente i valori in <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Interfaccia <see cref="T:System.Collections.ICollection" /> contenente i valori dell'interfaccia <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Viene restituito un <see cref="T:System.Collections.IEnumerator" /> per l'oggetto <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> per l'oggetto <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Aggiunge un elemento a <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The item to add to the collection.">Elemento da aggiungere alla raccolta.</param>
      <returns vsli:raw="The position into which the new element was inserted.">Posizione in cui è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">Rimuove tutti gli elementi dalla raccolta.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">Determina se la raccolta contiene un valore specifico.</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">Elemento da individuare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elemento viene individuato nell'insieme; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specified item in the collection.">Determina l'indice di un elemento specifico dell'insieme.</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">Elemento da individuare nell'insieme.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list, otherwise -1.">Indice di <paramref name="value" /> se si trova nell'elenco; in caso contrario -1.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">Inserisce un elemento nella raccolta in corrispondenza di un indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Indice in base zero nel quale <paramref name="value" /> deve essere inserito.</param>
      <param name="value" vsli:raw="The item to insert into the collection.">Elemento da inserire nell'insieme.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">Ottiene un valore che indica se la dimensione della raccolta è fissa.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la raccolta è di dimensioni fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">Ottiene un valore che indica se la raccolta è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la raccolta è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets an item from the collection at a specified index.">Ottiene o imposta un elemento dall'insieme in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to get or set.">Indice in base zero dell'elemento da ottenere o impostare.</param>
      <returns vsli:raw="The element at the specified index.">Elemento in corrispondenza dell'indice specificato.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">
        <paramref name="value" /> non è un oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">
        <paramref name="index" /> è minore di 0.  
In alternativa 
 <paramref name="index" /> è uguale a o maggiore di <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specified value from the collection.">Rimuove dall'insieme la prima occorrenza del valore specificato.</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">Elemento da rimuovere dall'insieme.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Rimuove l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Indice in base zero dell'elemento da rimuovere.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">Raccolta in sola lettura.</exception>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary vsli:raw="Identifies the property tab or tabs to display for the specified class or classes.">Consente di identificare la scheda o le schede delle proprietà da visualizzare per la classe o le classi specificate.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> con il nome della classe della scheda specificato.</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">Nome completo dall'assembly del tipo di scheda da creare. Per un esempio di questa convenzione dei formati,vedere la proprietà <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name and tab scope.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> con il nome della classe della scheda e l'ambito della scheda specificati.</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">Nome completo dall'assembly del tipo di scheda da creare. Per un esempio di questa convenzione dei formati,vedere la proprietà <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">Oggetto <see cref="T:System.ComponentModel.PropertyTabScope" /> che indica l'ambito di questa scheda. Se l'ambito è <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, verrà visualizzata soltanto per i componenti con l'attributo <see cref="T:System.ComponentModel.PropertyTabAttribute" /> corrispondente. Se è <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, verrà visualizzata per tutti i componenti del documento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">
        <paramref name="tabScope" /> non è <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> o <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> utilizzando il tipo di scheda specificato.</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">Tipo di scheda da creare.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab and tab scope.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> con il tipo di scheda e l'ambito della scheda specificati.</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">Tipo di scheda da creare.</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">Oggetto <see cref="T:System.ComponentModel.PropertyTabScope" /> che indica l'ambito di questa scheda. Se l'ambito è <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, verrà visualizzata soltanto per i componenti con l'attributo <see cref="T:System.ComponentModel.PropertyTabAttribute" /> corrispondente. Se è <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, verrà visualizzata per tutti i componenti del documento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">
        <paramref name="tabScope" /> non è <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> o <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified attribute.">Restituisce un valore che indica se l'istanza è uguale a un attributo specificato.</summary>
      <param name="other" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.PropertyTabAttribute" /> da confrontare con questa istanza oppure <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se le istanze di <see cref="T:System.ComponentModel.PropertyTabAttribute" /> sono uguali; in caso contrario <see langword="false" />.</returns>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter cannot be found.">Non è stato possibile trovare i tipi specificati dalla proprietà <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> del parametro <paramref name="other" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="other" vsli:raw="An object to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">Oggetto da confrontare con questa istanza o <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; refers to the same &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="other" /> fa riferimento alla stessa istanza di <see cref="T:System.ComponentModel.PropertyTabAttribute" />; in caso contrario <see langword="false" />.</returns>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter could not be found.">Non è stato possibile trovare i tipi specificati dalla proprietà <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> del parametro <paramref name="other" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary vsli:raw="Gets the hash code for this object.">Ottiene il codice hash di questo oggetto.</summary>
      <returns vsli:raw="The hash code for the object the attribute belongs to.">Il codice hash per l'oggetto a cui appartiene l'attributo.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">Consente di inizializzare l'attributo utilizzando i nomi specificati delle classi delle schede e la matrice degli ambiti delle schede.</summary>
      <param name="tabClassNames" vsli:raw="An array of fully qualified type names of the types to create for tabs on the Properties window.">Matrice di nomi completi dei tipi da creare per le schede della finestra Proprietà.</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">Ambito di ciascuna scheda. Se l'ambito è <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, verrà visualizzata soltanto per i componenti con l'attributo <see cref="T:System.ComponentModel.PropertyTabAttribute" /> corrispondente. Se è <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, verrà visualizzata per tutti i componenti del documento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Uno o più dei valori di <paramref name="tabScopes" /> non sono <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> o <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.  
-oppure- 
Le matrici <paramref name="tabClassNames" /> e <paramref name="tabScopes" /> hanno lunghezze diverse.  
-oppure- 
 <paramref name="tabClassNames" /> o <paramref name="tabScopes" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">Consente di inizializzare l'attributo utilizzando i nomi specificati delle classi delle schede e la matrice degli ambiti delle schede.</summary>
      <param name="tabClasses" vsli:raw="The types of tabs to create.">Tipi di schede da creare.</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">Ambito di ciascuna scheda. Se l'ambito è <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, verrà visualizzata soltanto per i componenti con l'attributo <see cref="T:System.ComponentModel.PropertyTabAttribute" /> corrispondente. Se è <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, verrà visualizzata per tutti i componenti del documento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Uno o più dei valori di <paramref name="tabScopes" /> non sono <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> o <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.  
-oppure- 
Le matrici <paramref name="tabClassNames" /> e <paramref name="tabScopes" /> hanno lunghezze diverse.  
-oppure- 
 <paramref name="tabClassNames" /> o <paramref name="tabScopes" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary vsli:raw="Gets the types of tabs that this attribute uses.">Ottiene i tipi di scheda utilizzati da questo attributo.</summary>
      <returns vsli:raw="An array of types indicating the types of tabs that this attribute uses.">Matrice di tipi che indicano i tipi di scheda utilizzati da questo attributo.</returns>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property could not be found.">Non è stato possibile trovare i tipi specificati dalla proprietà <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary vsli:raw="Gets the names of the tab classes that this attribute uses.">Ottiene i nomi delle classi delle schede utilizzate da questo attributo.</summary>
      <returns vsli:raw="The names of the tab classes that this attribute uses.">Nomi delle classi delle schede utilizzate da questo attributo.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary vsli:raw="Gets an array of tab scopes of each tab of this &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;.">Ottiene una matrice di ambiti di ogni scheda di questo attributo <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; objects that indicate the scopes of the tabs.">Matrice di oggetti <see cref="T:System.ComponentModel.PropertyTabScope" /> che indicano gli ambiti delle schede.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary vsli:raw="Defines identifiers that indicate the persistence scope of a tab in the Properties window.">Consente di definire gli identificatori che indicano l'ambito di persistenza di una scheda nella finestra Proprietà.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary vsli:raw="This tab is specific to the current component. This tab is added to the Properties window for the current component only and is removed when the component is no longer selected.">Questa scheda è specifica del componente corrente. Questa scheda viene aggiunta alla finestra Proprietà soltanto per il componente corrente e viene rimossa quando il componente non è più selezionato.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary vsli:raw="This tab is specific to the current document. This tab is added to the Properties window and is removed when the currently selected document changes.">Questa scheda è specifica del documento corrente. Questa scheda viene aggiunta alla finestra Proprietà e viene rimossa quando cambia il documento attualmente selezionato.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary vsli:raw="This tab is added to the Properties window and can only be removed explicitly by a parent component.">Questa scheda viene aggiunta alla finestra Proprietà e può essere rimossa esplicitamente soltanto da un componente padre.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary vsli:raw="This tab is added to the Properties window and cannot be removed.">Questa scheda viene aggiunta alla finestra Proprietà e non può essere rimossa.</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary vsli:raw="Specifies the name of the property that an implementer of &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; offers to other components. This class cannot be inherited.">Viene specificato il nome della proprietà fornita da un implementatore di <see cref="T:System.ComponentModel.IExtenderProvider" /> ad altri componenti. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and the type of its receiver.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> con il nome della proprietà e il tipo del ricevente.</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">Nome della proprietà che si estende a un oggetto del tipo specificato.</param>
      <param name="receiverTypeName" vsli:raw="The name of the data type this property can extend.">Nome del tipo di dati che la proprietà può estendere.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and its &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> con il nome della proprietà e il <see cref="T:System.Type" />.</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">Nome della proprietà che si estende a un oggetto del tipo specificato.</param>
      <param name="receiverType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the data type of the object that can receive the property.">Oggetto <see cref="T:System.Type" /> del tipo di dati dell'oggetto che può ricevere la proprietà.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">Specifica se il valore dell'oggetto specificato è uguale all'oggetto <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> corrente.</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">Oggetto di cui va verificata l'uguaglianza di valore.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore dell'oggetto specificato è uguale a quello dell'oggetto corrente. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">Codice hash per l'oggetto <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> corrente.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary vsli:raw="Gets the name of a property that this class provides.">Ottiene il nome di una proprietà fornita da questa classe.</summary>
      <returns vsli:raw="The name of a property that this class provides.">Nome di una proprietà fornita da questa classe.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary vsli:raw="Gets the name of the data type this property can extend.">Ottiene il nome del tipo di dati che la proprietà può estendere.</summary>
      <returns vsli:raw="The name of the data type this property can extend.">Nome del tipo di dati che la proprietà può estendere.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary vsli:raw="Gets a unique identifier for this attribute.">Ottiene un identificatore univoco per questo attributo.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that is a unique identifier for the attribute.">Un oggetto <see cref="T:System.Object" /> che rappresenta l'identificatore univoco dell'attributo.</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary vsli:raw="Specifies that the property can be used as an application setting.">Consente di specificare che la proprietà può essere utilizzata come un'impostazione dell'applicazione.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />.</summary>
      <param name="recommendedAsConfigurable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la proprietà a cui è associato questo attributo può essere utilizzata come impostazione dell'applicazione, <see langword="false" /> in caso contrario.</param>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.RecommendedAsConfigurableAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Consente di specificare il valore predefinito per l'attributo <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />, che è <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />. Questo campo <see langword="static" /> è di sola lettura.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">Indica se questa istanza e un oggetto specificato sono uguali.</summary>
      <param name="obj" vsli:raw="Another object to compare to.">Altro oggetto da confrontare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> è uguale all'istanza; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;.">Codice hash per l'oggetto <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> corrente.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Indicates whether the value of this instance is the default value for the class.">Indica se il valore dell'istanza è quello predefinito per la classe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questa istanza è l'attributo predefinito per la classe. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary vsli:raw="Specifies that a property cannot be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Consente di specificare che una proprietà non può essere utilizzata come impostazione dell'applicazione. Questo campo <see langword="static" /> è di sola lettura.</summary>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary vsli:raw="Gets a value indicating whether the property this attribute is bound to can be used as an application setting.">Ottiene un valore che indica se la proprietà alla quale è associato questo attributo può essere utilizzata come impostazione dell'applicazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la proprietà a cui è associato questo attributo può essere utilizzata come impostazione dell'applicazione, <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary vsli:raw="Specifies that a property can be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Consente di specificare che una proprietà può essere utilizzata come impostazione dell'applicazione. Questo campo <see langword="static" /> è di sola lettura.</summary>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary vsli:raw="Provides a type converter to convert object references to and from other representations.">Fornisce un convertitore di tipi per convertire riferimenti a oggetti in e da altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ReferenceConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ReferenceConverter" />.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this reference converter.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo da associare a questo convertitore di riferimenti.</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a reference object using the specified context.">Ottiene un valore che indica se il convertitore può convertire un oggetto dal tipo di origine specificato in un oggetto riferimento utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo dal quale si desidera effettuare la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the reference type.">Converte l'oggetto specificato in un oggetto di tipo riferimento.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che specifica le impostazioni cultura utilizzate per rappresentare il tipo di carattere.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> che rappresenta la conversione di <paramref name="value" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the reference type using the specified context and arguments.">Converte l'oggetto valore specificato nel tipo riferimento utilizzando il contesto e gli argomenti specificati.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che specifica le impostazioni cultura utilizzate per rappresentare il tipo di carattere.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Tipo in cui convertire l'oggetto.</param>
      <returns vsli:raw="The converted object.">Oggetto convertito.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the reference data type.">Ottiene un insieme di valori standard per il tipo di dati riferimento.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Insieme <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> con un set standard di valori validi oppure <see langword="null" /> se il tipo di dati non supporta un set standard di valori.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exclusive list.">Ottiene un valore che indica se l'elenco di valori standard restituito dal metodo <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> è un elenco esclusivo.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> perché l'oggetto <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> restituito da <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> è un elenco completo dei valori possibili. Questo metodo non restituisce mai <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">Ottiene un valore che indica se il convertitore supporta un insieme di valori standard che possono essere selezionati da un elenco.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> perché è possibile chiamare il metodo <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> per trovare un insieme comune di valori supportati dall'oggetto. Questo metodo non restituisce mai <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value indicating whether a particular value can be added to the standard values collection.">Restituisce un valore che indica se è possibile aggiungere un determinato valore all'insieme dei valori standard.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides an additional context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto aggiuntivo.</param>
      <param name="value" vsli:raw="The value to check.">Valore da controllare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is allowed and can be added to the standard values collection; &lt;see langword=&quot;false&quot; /&gt; if the value cannot be added to the standard values collection.">
        <see langword="true" /> se il valore è consentito e può essere aggiunto all'insieme dei valori standard, <see langword="false" /> se il valore non può essere aggiunto all'insieme dei valori standard.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event.">Fornisce dati per l'evento <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" />.</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the component that has changed.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.RefreshEventArgs" /> con il componente modificato.</summary>
      <param name="componentChanged" vsli:raw="The component that changed.">Componente modificato.</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the type of component that has changed.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.ComponentModel.RefreshEventArgs" /> con il tipo di componente modificato.</summary>
      <param name="typeChanged" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">Oggetto <see cref="T:System.Type" /> modificato.</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary vsli:raw="Gets the component that changed its properties, events, or extenders.">Ottiene il componente di cui cono stati modificati eventi, proprietà o estensioni.</summary>
      <returns vsli:raw="The component that changed its properties, events, or extenders, or &lt;see langword=&quot;null&quot; /&gt; if all components of the same type have changed.">Componente di cui sono stati modificati eventi, proprietà o estensioni oppure <see langword="null" /> se sono stati modificati tutti i componenti dello stesso tipo.</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">Ottiene l'oggetto <see cref="T:System.Type" /> di cui sono stati modificati eventi o proprietà.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">Oggetto <see cref="T:System.Type" /> di cui sono stati modificati eventi o proprietà.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event raised when a &lt;see cref=&quot;T:System.Type&quot; /&gt; or component is changed during design time.">Rappresenta il metodo che gestisce l'evento <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> generato quando viene modificato un oggetto <see cref="T:System.Type" /> o un componente in fase di progettazione.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; that contains the component or &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">Oggetto <see cref="T:System.ComponentModel.RefreshEventArgs" /> che contiene il componente o l'oggetto <see cref="T:System.Type" /> modificato.</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary vsli:raw="Specifies whether the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed.">Specifica se all'installazione dell'assembly verrà chiamato Installutil.exe (strumento Installer) o il programma di installazione delle azioni personalizzate di Visual Studio.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.RunInstallerAttribute" />.</summary>
      <param name="runInstaller" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se durante l'installazione di un assembly deve essere richiamato un programma di installazione. <see langword="false" /> in caso contrario.</param>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary vsli:raw="Specifies the default visibility, which is &lt;see cref=&quot;F:System.ComponentModel.RunInstallerAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Specifica la visibilità predefinita, uguale a <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />. Questo campo <see langword="static" /> è di sola lettura.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the value of the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equivalent to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">Determina se il valore dell'attributo <see cref="T:System.ComponentModel.RunInstallerAttribute" /> specificato è equivalente all'attributo <see cref="T:System.ComponentModel.RunInstallerAttribute" /> corrente.</summary>
      <param name="obj" vsli:raw="The object to compare.">Oggetto da confrontare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <see cref="T:System.ComponentModel.RunInstallerAttribute" /> specificato è uguale all'oggetto <see cref="T:System.ComponentModel.RunInstallerAttribute" /> corrente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary vsli:raw="Generates a hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">Genera un codice hash per l'oggetto <see cref="T:System.ComponentModel.RunInstallerAttribute" /> corrente.</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">Codice hash per l'oggetto <see cref="T:System.ComponentModel.RunInstallerAttribute" /> corrente.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">Determina se questo attributo è predefinito.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'attributo è il valore predefinito per questa classe di attributi; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should not be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Specifica che all'installazione dell'assembly non verrà chiamato Installutil.exe (strumento Installer) o il programma di installazione delle azioni personalizzate di Visual Studio. Questo campo <see langword="static" /> è di sola lettura.</summary>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary vsli:raw="Gets a value indicating whether an installer should be invoked during installation of an assembly.">Ottiene un valore che indica se è necessario richiamare un programma di installazione durante l'installazione di un assembly.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se durante l'installazione di un assembly deve essere richiamato un programma di installazione. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">Specifica che all'installazione dell'assembly verrà chiamato Installutil.exe (strumento Installer) o il programma di installazione delle azioni personalizzate di Visual Studio. Questo campo <see langword="static" /> è di sola lettura.</summary>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from a string.">Fornisce un convertitore di tipi per convertire oggetti integer a 8 bit senza segno in e da una stringa.</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SByteConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.SByteConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary vsli:raw="Specifies when a component property can be bound to an application setting.">Specifica quando è possibile associare una proprietà di componente a un'impostazione dell'applicazione.</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SettingsBindableAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.SettingsBindableAttribute" />.</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that a property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per specificare che una proprietà è appropriata per l'associazione delle impostazioni; in caso contrario, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating whether a property is appropriate to bind settings to.">Ottiene un valore che indica se una proprietà è appropriata per l'associazione delle impostazioni.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se una proprietà è appropriata per l'associazione delle impostazioni; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Oggetto <see cref="T:System.Object" /> da confrontare con questa istanza o un riferimento null (<see langword="Nothing" /> in Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> è uguale al tipo e al valore di questa istanza; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not appropriate to bind settings to.">Specifica che una proprietà non è appropriata per l'associazione delle impostazioni.</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is appropriate to bind settings to.">Specifica che una proprietà è appropriata per l'associazione delle impostazioni.</summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary vsli:raw="Provides a type converter to convert single-precision, floating point number objects to and from various other representations.">Fornisce un convertitore di tipi per convertire oggetti numero in virgola mobile a precisione singola in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SingleConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.SingleConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary vsli:raw="Provides a type converter to convert string objects to and from other representations.">Fornisce un convertitore di tipi per convertire oggetti stringa in e da altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.StringConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.StringConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a string using the specified context.">Ottiene un valore che indica se il convertitore è in grado di convertire un oggetto dal tipo di origine specificato in una stringa tramite il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo dal quale si desidera effettuare la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">Converte l'oggetto valore specificato in un oggetto <see cref="T:System.String" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> da usare.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary vsli:raw="Provides methods to verify the machine name and path conform to a specific syntax. This class cannot be inherited.">Fornisce metodi per verificare che il nome e il percorso del computer siano conformi a una sintassi specifica. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary vsli:raw="Checks the syntax of the machine name to confirm that it does not contain &quot;\&quot;.">Controlla la sintassi del nome del computer per verificare che non contenga "\".</summary>
      <param name="value" vsli:raw="A string containing the machine name to check.">Stringa contenente il nome del computer da controllare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper machine name format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="value" /> corrisponde al formato di nome del computer adeguato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see whether it starts with &quot;\\&quot;.">Controlla la sintassi del percorso per verificare se inizia con "\\".</summary>
      <param name="value" vsli:raw="A string containing the path to check.">Stringa contenente il percorso da controllare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="value" /> corrisponde al formato di percorso adeguato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see if it starts with &quot;\&quot; or drive letter &quot;C:&quot;.">Controlla la sintassi del percorso per verificare se inizia con "\" o con la lettera di unità "C".</summary>
      <param name="value" vsli:raw="A string containing the path to check.">Stringa contenente il percorso da controllare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="value" /> corrisponde al formato di percorso adeguato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; objects to and from other representations.">Fornisce un convertitore di tipi per convertire oggetti <see cref="T:System.TimeSpan" /> in e da altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TimeSpanConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TimeSpanConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; using the specified context.">Ottiene un valore che indica se il convertitore può convertire un oggetto dal tipo di origine specificato in un oggetto <see cref="T:System.TimeSpan" /> utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo dal quale si desidera effettuare la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ottiene un valore che indica se questo convertitore può convertire un oggetto nel tipo di destinazione specificato usando il contesto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Tipo <see cref="T:System.Type" /> che rappresenta il tipo di destinazione della conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> non è un valore valido per il tipo di destinazione.</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;.">Converte l'oggetto specificato in un oggetto <see cref="T:System.TimeSpan" />.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> facoltativo. Se non vengono specificate impostazioni cultura, vengono utilizzate quelle correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> non è un valore valido per il tipo di destinazione.</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">Converte l'oggetto specificato in un altro tipo.</summary>
      <param name="context" vsli:raw="A formatter context.">Contesto di un formattatore.</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">Le impostazioni cultura in cui <paramref name="value" /> verrà convertito.</param>
      <param name="value" vsli:raw="The object to convert.">Oggetto da convertire.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Tipo in cui convertire l'oggetto.</param>
      <returns vsli:raw="The converted object.">Oggetto convertito.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary vsli:raw="Represents an attribute of a toolbox item.">Rappresenta un attributo di un elemento della casella degli strumenti.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and specifies whether to use default initialization values.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> e specifica se utilizzare i valori di inizializzazione predefiniti.</summary>
      <param name="defaultType" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to create a toolbox item attribute for a default type; &lt;see langword=&quot;false&quot; /&gt; to associate no default toolbox item support for this attribute.">
        <see langword="true" /> per creare l'attributo di un elemento della Casella degli strumenti per un tipo predefinito. <see langword="false" /> per non associare alcun supporto predefinito dell'elemento della Casella degli strumenti per questo attributo.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified name of the type.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> utilizzando il nome specificato del tipo.</summary>
      <param name="toolboxItemTypeName" vsli:raw="The names of the type of the toolbox item and of the assembly that contains the type.">Nomi del tipo dell'elemento della casella degli strumenti e dell'assembly che contiene il tipo.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified type of the toolbox item.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> utilizzando il tipo specificato dell'elemento della Casella degli strumenti.</summary>
      <param name="toolboxItemType" vsli:raw="The type of the toolbox item.">Tipo dell'elemento della Casella degli strumenti.</param>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to the default, &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;. This field is read-only.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> e imposta il tipo sul valore predefinito, <see cref="T:System.Drawing.Design.ToolboxItem" />. Questo campo è di sola lettura.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Oggetto <see cref="T:System.Object" /> da confrontare con questa istanza o un riferimento null (<see langword="Nothing" /> in Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> è uguale al tipo e al valore di questa istanza; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">Ottiene un valore che indica se il valore corrente dell'attributo è il valore predefinito dell'attributo stesso.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore corrente dell'attributo è quello predefinito, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to &lt;see langword=&quot;null&quot; /&gt;. This field is read-only.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> e imposta il tipo su <see langword="null" />. Questo campo è di sola lettura.</summary>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary vsli:raw="Gets or sets the type of the toolbox item.">Ottiene o imposta il tipo dell'elemento della Casella degli strumenti.</summary>
      <returns vsli:raw="The type of the toolbox item.">Tipo dell'elemento della Casella degli strumenti.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The type cannot be found.">Impossibile trovare il tipo.</exception>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary vsli:raw="Gets or sets the name of the type of the current &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;.">Ottiene o imposta il nome del tipo dell'oggetto <see cref="T:System.Drawing.Design.ToolboxItem" /> corrente.</summary>
      <returns vsli:raw="The fully qualified type name of the current toolbox item.">Nome completo del tipo dell'elemento corrente della Casella degli strumenti.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary vsli:raw="Specifies the filter string and filter type to use for a toolbox item.">Specifica la stringa e il tipo del filtro da utilizzare per un elemento della Casella degli strumenti.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> con la stringa del filtro specificata.</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">Stringa del filtro per l'elemento della Casella degli strumenti.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string and type.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> con il tipo e la stringa del filtro specificati.</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">Stringa del filtro per l'elemento della Casella degli strumenti.</param>
      <param name="filterType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; indicating the type of the filter.">Oggetto <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> che indica il tipo del filtro.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Oggetto <see cref="T:System.Object" /> da confrontare con questa istanza o un riferimento null (<see langword="Nothing" /> in Visual Basic).</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> è uguale al tipo e al valore di questa istanza; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary vsli:raw="Gets the filter string for the toolbox item.">Ottiene la stringa del filtro per l'elemento della Casella degli strumenti.</summary>
      <returns vsli:raw="The filter string for the toolbox item.">Stringa del filtro per l'elemento della Casella degli strumenti.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary vsli:raw="Gets the type of the filter.">Ottiene il tipo del filtro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; that indicates the type of the filter.">Oggetto <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> che indica il tipo del filtro.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Restituisce il codice hash per l'istanza.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary vsli:raw="Indicates whether the specified object has a matching filter string.">Indica se l'oggetto specificato dispone di una stringa del filtro corrispondente.</summary>
      <param name="obj" vsli:raw="The object to test for a matching filter string.">Oggetto di cui verificare la stringa del filtro corrispondente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object has a matching filter string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto specificato dispone di una stringa del filtro corrispondente. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary vsli:raw="Returns a string that represents the current object.">Restituisce una stringa che rappresenta l'oggetto corrente.</summary>
      <returns vsli:raw="A string that represents the current object.">Stringa che rappresenta l'oggetto corrente.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary vsli:raw="Gets the type ID for the attribute.">Ottiene l'ID del tipo per l'attributo.</summary>
      <returns vsli:raw="The type ID for this attribute. All &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; objects with the same filter string return the same type ID.">ID del tipo per questo attributo. Tutti gli oggetti <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> con la stessa stringa del filtro restituiscono il medesimo ID del tipo.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary vsli:raw="Defines identifiers used to indicate the type of filter that a &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; uses.">Definisce gli identificatori utilizzati per indicare il tipo di filtro impiegato da una classe <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary vsli:raw="Indicates that a toolbox item filter string is allowed, but not required.">Indica che è consentita, ma non richiesta, una stringa del filtro per un elemento della Casella degli strumenti.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary vsli:raw="Indicates that custom processing is required to determine whether to use a toolbox item filter string. It is typically specified on a root designer class to indicate that the designer wishes to accept or reject a toolbox item through code. The designer must implement the &lt;see cref=&quot;M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)&quot; /&gt; method of the &lt;see cref=&quot;T:System.Drawing.Design.IToolboxUser&quot; /&gt; interface.">Indica che è richiesta un'elaborazione personalizzata per stabilire se utilizzare una stringa del filtro per un elemento della Casella degli strumenti. In genere viene specificato in una classe della finestra di progettazione radice per indicare se la finestra di progettazione accetta o rifiuta un elemento della casella degli strumenti attraverso il codice. La finestra di progettazione deve implementare il metodo <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" /> dell'interfaccia <see cref="T:System.Drawing.Design.IToolboxUser" />.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary vsli:raw="Indicates that a toolbox item filter string is not allowed. If a designer and a component class both have a filter string and the value of one is &lt;c&gt;ToolboxItemFilterType.Prevent&lt;/c&gt;, the toolbox item will not be available.">Indica che non è consentita una stringa del filtro per un elemento della Casella degli strumenti. Se una finestra di progettazione e una classe del componente hanno entrambe una stringa di filtro e il valore di una è <c>ToolboxItemFilterType.Prevent</c>, l'elemento della casella degli strumenti non sarà disponibile.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary vsli:raw="Indicates that a toolbox item filter string must be present for a toolbox item to be enabled.  For a toolbox item with a filter type of &lt;c&gt;Require&lt;/c&gt; to be enabled, the designer and the component class must have a matching filter string. Additionally, neither the designer or component class can have a filter type of &lt;c&gt;Prevent&lt;/c&gt; for the toolbox item to be enabled.">Indica che per l'attivazione di un elemento della Casella degli strumenti è necessaria una stringa del filtro.  Per abilitare un elemento della casella degli strumenti con tipo di filtro <c>Require</c>, è necessario che la finestra di progettazione e la classe del componente abbiano una stringa di filtro corrispondente. Inoltre, né la finestra di progettazione, né la classe del componente devono avere un tipo di filtro <c>Prevent</c> perché sia possibile abilitare l'elemento della casella degli strumenti.</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary vsli:raw="Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.">Rappresenta una soluzione unica per la conversione di tipi di valori in altri tipi, oltre che per l'accesso a sottoproprietà e valori standard.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">Restituisce un valore che indica se il convertitore può convertire un oggetto del tipo specificato nel tipo di questo convertitore, usando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo da cui eseguire la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">Indica se questo convertitore può convertire un oggetto del tipo specificato nel tipo di questo convertitore.</summary>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo da cui eseguire la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">Restituisce un valore che indica se il convertitore può convertire l'oggetto nel tipo specificato usando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo in cui eseguire la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">Indica se questo convertitore può convertire l'oggetto nel tipo specificato.</summary>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo in cui eseguire la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Converte l'oggetto indicato nel tipo di questo convertitore usando il contesto e le informazioni sulle impostazioni cultura specificati.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> da usare come impostazioni cultura correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary vsli:raw="Converts the given value to the type of this converter.">Converte il valore specificato nel tipo di questo convertitore.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture and the specified context.">Converte la stringa specificata nel tipo di questo convertitore, utilizzando le impostazioni cultura inglesi e il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">Oggetto <see cref="T:System.String" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Oggetto <see cref="T:System.Object" /> che rappresenta il testo convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture.">Converte la stringa specificata nel tipo di questo convertitore, utilizzando le impostazioni cultura invarianti.</summary>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">Oggetto <see cref="T:System.String" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Oggetto <see cref="T:System.Object" /> che rappresenta il testo convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context and culture information.">Converte il testo specificato in un oggetto, utilizzando il contesto specificato e le informazioni sulle impostazioni cultura.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Oggetto <see cref="T:System.Globalization.CultureInfo" />. Se viene passato <see langword="null" /> , verranno usate le impostazioni cultura correnti.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">Oggetto <see cref="T:System.String" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Oggetto <see cref="T:System.Object" /> che rappresenta il testo convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context.">Converte il testo specificato in un oggetto, utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">Oggetto <see cref="T:System.String" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Oggetto <see cref="T:System.Object" /> che rappresenta il testo convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary vsli:raw="Converts the specified text to an object.">Converte il testo specificato in un oggetto.</summary>
      <param name="text" vsli:raw="The text representation of the object to convert.">Rappresentazione di testo dell'oggetto da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">Oggetto <see cref="T:System.Object" /> che rappresenta il testo convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The string cannot be converted into the appropriate object.">Impossibile convertire la stringa nell'oggetto appropriato.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Converte l'oggetto valore indicato nel tipo specificato, usando il contesto e le informazioni sulle impostazioni cultura specificati.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Oggetto <see cref="T:System.Globalization.CultureInfo" />. Se viene passato <see langword="null" /> , verranno usate le impostazioni cultura correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <see cref="T:System.Type" /> in cui convertire il parametro <paramref name="value" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="destinationType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the arguments.">Converte l'oggetto valore specificato nel tipo specificato, utilizzando gli argomenti.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <see cref="T:System.Type" /> in cui convertire il parametro <paramref name="value" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="destinationType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation, using the specified context.">Converte il valore specificato in una rappresentazione in formato stringa indipendente dalle impostazioni cultura, utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">
        <see cref="T:System.String" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation.">Converte il valore specificato in una rappresentazione in formato stringa indipendente dalle impostazioni cultura.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">
        <see cref="T:System.String" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the specified context and culture information.">Converte il valore specificato in una rappresentazione in formato stringa, utilizzando il contesto specificato e le informazioni sulle impostazioni cultura.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Oggetto <see cref="T:System.Globalization.CultureInfo" />. Se viene passato <see langword="null" /> , verranno usate le impostazioni cultura correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the given context.">Converte il valore specificato in una rappresentazione in formato stringa, utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary vsli:raw="Converts the specified value to a string representation.">Converte il valore specificato in una rappresentazione in formato stringa.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary vsli:raw="Re-creates an &lt;see cref=&quot;T:System.Object&quot; /&gt; given a set of property values for the object.">Ricrea un oggetto <see cref="T:System.Object" /> in base a un set di valori di proprietà dell'oggetto.</summary>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; that represents a dictionary of new property values.">Oggetto <see cref="T:System.Collections.IDictionary" /> che rappresenta un dizionario di nuovi valori di proprietà.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Object" /> che rappresenta l'oggetto <see cref="T:System.Collections.IDictionary" /> specificato oppure <see langword="null" /> se non è possibile creare l'oggetto. Questo metodo restituisce sempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">Crea un'istanza del tipo a cui questo oggetto <see cref="T:System.ComponentModel.TypeConverter" /> è associato, usando il contesto specificato, dato un set di valori di proprietà per l'oggetto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">
        <see cref="T:System.Collections.IDictionary" /> dei nuovi valori di proprietà.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Object" /> che rappresenta l'oggetto <see cref="T:System.Collections.IDictionary" /> specificato oppure <see langword="null" /> se non è possibile creare l'oggetto. Questo metodo restituisce sempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">Restituisce un'eccezione da generare quando non è possibile eseguire una conversione.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">Oggetto <see cref="T:System.Object" /> da convertire oppure <see langword="null" /> se l'oggetto non è disponibile.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">Oggetto <see cref="T:System.Exception" /> che rappresenta l'eccezione da generare quando non è possibile eseguire una conversione.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">Generata automaticamente da questo metodo.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">Restituisce un'eccezione da generare quando non è possibile eseguire una conversione.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">Oggetto <see cref="T:System.Object" /> da convertire oppure <see langword="null" /> se l'oggetto non è disponibile.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type the conversion was trying to convert to.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo nel quale si cerca di eseguire la conversione.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">Oggetto <see cref="T:System.Exception" /> che rappresenta l'eccezione da generare quando non è possibile eseguire una conversione.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">Generata automaticamente da questo metodo.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to the &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; method to create a new value.">Restituisce se la modifica di un valore su questo oggetto richiede una chiamata al metodo <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> per creare un nuovo valore.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la modifica di una proprietà di questo oggetto richiede la chiamata al metodo <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> per creare un nuovo valore; <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">Indica se la modifica di un valore di questo oggetto richiede la chiamata del metodo <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> per creare un nuovo valore utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la modifica di una proprietà di questo oggetto richiede la chiamata al metodo <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> per creare un nuovo valore; <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context.">Restituisce un insieme di proprietà per il tipo di matrice specificato dal parametro del valore utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Oggetto <see cref="T:System.Object" /> che specifica il tipo di matrice di cui ottenere le proprietà.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà esposte per questo tipo di dati oppure <see langword="null" /> se non vi sono proprietà.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">Restituisce un insieme di proprietà per il tipo di matrice specificato dal parametro del valore utilizzando il contesto e gli attributi specificati.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Oggetto <see cref="T:System.Object" /> che specifica il tipo di matrice di cui ottenere le proprietà.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> utilizzata come filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà esposte per questo tipo di dati oppure <see langword="null" /> se non vi sono proprietà.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter.">Restituisce un insieme di proprietà per il tipo di matrice specificato dal parametro del valore.</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">Oggetto <see cref="T:System.Object" /> che specifica il tipo di matrice di cui ottenere le proprietà.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà esposte per questo tipo di dati oppure <see langword="null" /> se non vi sono proprietà.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary vsli:raw="Returns whether this object supports properties.">Indica se questo oggetto supporta le proprietà.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se occorre chiamare <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> per trovare le proprietà di questo oggetto. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">Indica se questo oggetto supporta le proprietà, utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se occorre chiamare <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> per trovare le proprietà di questo oggetto. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary vsli:raw="Returns a collection of standard values from the default context for the data type this type converter is designed for.">Restituisce un insieme di valori standard dal contesto predefinito del tipo di dati per il quale è stato progettato questo convertitore di tipi.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Insieme <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> con un gruppo standard di valori validi oppure <see langword="null" /> se il tipo di dati non supporta un gruppo standard di valori.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">Restituisce un insieme di valori standard del tipo di dati per il quale è stato progettato questo convertitore di tipi, quando viene fornito un contesto di formato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato, utilizzabile per estrarre informazioni aggiuntive sull'ambiente da cui viene richiamato il convertitore. Questo parametro o le proprietà di questo parametro possono essere <see langword="null" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Insieme <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> con un set standard di valori validi oppure <see langword="null" /> se il tipo di dati non supporta un set standard di valori.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list.">Indica se l'insieme di valori standard restituiti dal metodo <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> rappresenta un elenco esclusivo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" /> se l'insieme <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> restituito dal metodo <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> rappresenta un elenco completo dei valori possibili. <see langword="false" /> se sono possibili altri valori.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">Indica se l'insieme di valori standard restituiti dal metodo <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> rappresenta un elenco esclusivo di valori possibili, utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" /> se l'insieme <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> restituito dal metodo <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> rappresenta un elenco completo dei valori possibili. <see langword="false" /> se sono possibili altri valori.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list.">Indica se questo oggetto supporta un gruppo standard di valori selezionabili da un elenco.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è necessario chiamare il metodo <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> per individuare un insieme comune di valori supportati dall’oggetto; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">Indica se questo oggetto supporta un insieme standard di valori selezionabili da un elenco, utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è necessario chiamare il metodo <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> per individuare un insieme comune di valori supportati dall’oggetto; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">Indica se l'oggetto valore specificato è valido per questo tipo e per il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">Oggetto <see cref="T:System.Object" /> di cui eseguire il test di validità.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore specificato è valido per questo oggetto. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type.">Indica se l'oggetto valore specificato è valido per questo tipo.</summary>
      <param name="value" vsli:raw="The object to test for validity.">Oggetto di cui eseguire il test di validità.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore specificato è valido per questo oggetto. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary vsli:raw="Represents an &lt;see langword=&quot;abstract&quot; /&gt; class that provides properties for objects that do not have properties.">Rappresenta una classe <see langword="abstract" /> che fornisce proprietà per oggetti che non presentano proprietà.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di componente al quale è associato questo descrittore di proprietà.</param>
      <param name="name" vsli:raw="The name of the property.">Nome della proprietà.</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di dati per questa proprietà.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di componente al quale è associato questo descrittore di proprietà.</param>
      <param name="name" vsli:raw="The name of the property.">Nome della proprietà.</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di dati per questa proprietà.</param>
      <param name="attributes" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes to associate with the property.">Matrice di <see cref="T:System.Attribute" /> contenente gli attributi da associare alla proprietà.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="Returns whether resetting the component changes the value of the component.">Indica se reimpostando il componente cambia il valore del componente stesso.</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">Componente di cui eseguire il test di reimpostazione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes the value of the component; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se reimpostando il componente cambia il relativo valore. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary vsli:raw="Gets the type of component to which this property description binds.">Ottiene il tipo di componente a cui è associato questo descrittore di proprietà.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property binds.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di componente al quale è associata questa proprietà.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this property is read-only.">Ottiene un valore che indica se questa proprietà è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; &lt;see langword=&quot;false&quot; /&gt; if the property is read/write.">
        <see langword="true" /> se la proprietà è di sola lettura. <see langword="false" /> se la proprietà è di lettura/scrittura.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary vsli:raw="Gets the type of the property.">Ottiene il tipo della proprietà.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo della proprietà.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="Resets the value for this property of the component.">Reimposta il valore per questa proprietà del componente.</summary>
      <param name="component" vsli:raw="The component with the property value to be reset.">Componente con valore di proprietà da reimpostare.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="Returns whether the value of this property can persist.">Indica se il valore di questa proprietà può essere conservato.</summary>
      <param name="component" vsli:raw="The component with the property that is to be examined for persistence.">Componente con proprietà di cui verificare la persistenza.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the property can persist; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore della proprietà può essere conservato. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary vsli:raw="Sorts a collection of properties.">Ordina un insieme di proprietà.</summary>
      <param name="props" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that has the properties to sort.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> contenente le proprietà da ordinare.</param>
      <param name="names" vsli:raw="An array of names in the order you want the properties to appear in the collection.">Matrice di nomi nell'ordine in cui si desidera visualizzare le proprietà dell'insieme.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted properties.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> che contiene le proprietà ordinate.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary vsli:raw="Represents a collection of values.">Rappresenta un insieme di valori.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />.</summary>
      <param name="values" vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that represents the objects to put into the collection.">Oggetto <see cref="T:System.Collections.ICollection" /> che rappresenta gli oggetti da inserire nell'insieme.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of this collection to an array.">Copia il contenuto di questo insieme in una matrice.</summary>
      <param name="array" vsli:raw="An &lt;see cref=&quot;T:System.Array&quot; /&gt; that represents the array to copy to.">Oggetto <see cref="T:System.Array" /> che rappresenta la matrice in cui effettuare la copia.</param>
      <param name="index" vsli:raw="The index to start from.">Indice da cui iniziare.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary vsli:raw="Gets the number of objects in the collection.">Ottiene il numero degli oggetti nella raccolta.</summary>
      <returns vsli:raw="The number of objects in the collection.">Numero di oggetti della raccolta.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this collection.">Restituisce un enumeratore per questo insieme.</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">Enumeratore di tipo <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the object at the specified index number.">Ottiene l'oggetto in corrispondenza del numero di indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.Object&quot; /&gt; to get from the collection.">Indice a base zero dell'oggetto <see cref="T:System.Object" /> da ottenere dall'insieme.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; with the specified index.">Oggetto <see cref="T:System.Object" /> con l'indice specificato.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.IsSynchronized&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">
        <see langword="false" /> in tutti i casi.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.SyncRoot&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;null&quot; /&gt; in all cases.">
        <see langword="null" /> in tutti i casi.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>Specifica il tipo da utilizzare come convertitore per l'oggetto a cui l'attributo è associato.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> con il convertitore di tipi predefinito, ovvero una stringa vuota ("").</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeConverterAttribute" />, utilizzando il nome del tipo specificato come convertitore di dati per l'oggetto a cui è associato questo attributo.</summary>
      <param name="typeName">Nome completo della classe da utilizzare per la conversione dei dati per l'oggetto a cui è associato questo attributo.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeConverterAttribute" />, utilizzando il nome del tipo specificato come convertitore di dati per l'oggetto a cui è associato questo attributo.</summary>
      <param name="type">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo della classe del convertitore da utilizzare per la conversione dei dati per l'oggetto a cui è associato questo attributo.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>Ottiene il nome di tipo completo dell'oggetto <see cref="T:System.Type" /> da utilizzare come convertitore per l'oggetto a cui è associato questo attributo.</summary>
      <returns>Nome di tipo completo dell'oggetto <see cref="T:System.Type" /> da utilizzare come convertitore per l'oggetto a cui è associato questo attributo o, in mancanza, una stringa vuota (""). Il valore predefinito è una stringa vuota ("").</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>Specifica il tipo da utilizzare come convertitore per l'oggetto a cui è associato questo attributo.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>Specifica se il valore dell'oggetto specificato è uguale all'oggetto <see cref="T:System.ComponentModel.TypeConverterAttribute" /> corrente.</summary>
      <param name="obj">Oggetto di cui va verificata l'uguaglianza di valore.</param>
      <returns>
        <see langword="true" /> se il valore dell'oggetto specificato è uguale a quello dell'oggetto corrente <see cref="T:System.ComponentModel.TypeConverterAttribute" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash per l'oggetto <see cref="T:System.ComponentModel.TypeConverterAttribute" /> corrente.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary vsli:raw="Provides supplemental metadata to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Fornisce metadati aggiuntivi all'oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class using a parent type description provider.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> utilizzando un provider della descrizione dei tipi padre.</summary>
      <param name="parent" vsli:raw="The parent type description provider.">Provider della descrizione dei tipi padre.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">Crea un oggetto che può sostituire un altro tipo di dati.</summary>
      <param name="provider" vsli:raw="An optional service provider.">Provider di servizi facoltativo.</param>
      <param name="objectType" vsli:raw="The type of object to create. This parameter is never &lt;see langword=&quot;null&quot; /&gt;.">Tipo di oggetto da creare. Il parametro non è mai <see langword="null" />.</param>
      <param name="argTypes" vsli:raw="An optional array of types that represent the parameter types to be passed to the object's constructor. This array can be &lt;see langword=&quot;null&quot; /&gt; or of zero length.">Matrice facoltativa dei tipi che rappresentano i tipi di parametro da passare al costruttore dell'oggetto. Questa matrice può essere <see langword="null" /> o di lunghezza zero.</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor.">Matrice facoltativa dei valori di parametro da passare al costruttore dell'oggetto.</param>
      <returns vsli:raw="The substitute &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> sostitutivo.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary vsli:raw="Gets a per-object cache, accessed as an &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of key/value pairs.">Ottiene una cache per oggetto, accessibile come interfaccia <see cref="T:System.Collections.IDictionary" /> di coppie chiave/valore.</summary>
      <param name="instance" vsli:raw="The object for which to get the cache.">Oggetto per cui ottenere la cache.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; if the provided object supports caching; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Un oggetto <see cref="T:System.Collections.IDictionary" /> se l'oggetto fornito supporta l'inserimento nella cache, altrimenti <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets an extended custom type descriptor for the given object.">Ottiene un descrittore di tipi personalizzato esteso per l'oggetto specificato.</summary>
      <param name="instance" vsli:raw="The object for which to get the extended type descriptor.">Oggetto per cui ottenere il descrittore di tipi esteso.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide extended metadata for the object.">Oggetto <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> che può fornire metadati estesi per l'oggetto.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary vsli:raw="Gets the extender providers for the specified object.">Ottiene i provider di estensione per l'oggetto specificato.</summary>
      <param name="instance" vsli:raw="The object to get extender providers for.">Oggetto per cui ottenere i provider di estensione.</param>
      <returns vsli:raw="An array of extender providers for &lt;paramref name=&quot;instance&quot; /&gt;.">Matrice di provider di estensione per <paramref name="instance" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">Ottiene il nome del componente specificato oppure <see langword="null" /> se il componente non ha alcun nome.</summary>
      <param name="component" vsli:raw="The specified component.">Il componente specificato.</param>
      <returns vsli:raw="The name of the specified component.">Nome del componente specificato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object.">Effettua la reflection normale per l'oggetto specificato.</summary>
      <param name="instance" vsli:raw="An instance of the type (should not be &lt;see langword=&quot;null&quot; /&gt;).">Istanza del tipo specificato (deve essere diverso da <see langword="null" />).</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;instance&quot; /&gt;.">Tipo di reflection per questo oggetto <paramref name="instance" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary vsli:raw="Performs normal reflection against a type.">Effettua la reflection normale per un tipo.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">Tipo di oggetto per cui recuperare l'interfaccia <see cref="T:System.Reflection.IReflect" />.</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">Tipo di reflection per questo oggetto <paramref name="objectType" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="objectType" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object with the given type.">Effettua la reflection normale per l'oggetto specificato con il tipo indicato.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">Tipo di oggetto per cui recuperare l'interfaccia <see cref="T:System.Reflection.IReflect" />.</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt;.">Istanza del tipo. Può essere <see langword="null" />.</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">Tipo di reflection per questo oggetto <paramref name="objectType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary vsli:raw="Converts a reflection type into a runtime type.">Converte un tipo di reflection in un tipo in fase di esecuzione.</summary>
      <param name="reflectionType" vsli:raw="The type to convert to its runtime equivalent.">Tipo da convertire nell'equivalente in fase di esecuzione.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the runtime equivalent of &lt;paramref name=&quot;reflectionType&quot; /&gt;.">Oggetto <see cref="T:System.Type" /> che rappresenta l'equivalente in fase di esecuzione di <paramref name="reflectionType" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reflectionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reflectionType" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given object.">Ottiene un descrittore di tipi personalizzato per l'oggetto.</summary>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Istanza del tipo. Può essere <see langword="null" /> se nessuna istanza è stata passata all'oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">Oggetto <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> che può fornire metadati per il tipo.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary vsli:raw="Gets a custom type descriptor for the given type.">Ottiene un descrittore di tipi personalizzato per il tipo specificato.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">Tipo di oggetto per cui recuperare il descrittore di tipi.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">Oggetto <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> che può fornire metadati per il tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given type and object.">Imposta un descrittore di tipi personalizzato per il tipo e l'oggetto specificati.</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">Tipo di oggetto per cui recuperare il descrittore di tipi.</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Istanza del tipo. Può essere <see langword="null" /> se nessuna istanza è stata passata all'oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">Oggetto <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> che può fornire metadati per il tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary vsli:raw="Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers.">Ottiene un valore che indica se il tipo specificato è compatibile con la descrizione del tipo e la catena di provider di descrizione del tipo.</summary>
      <param name="type" vsli:raw="The type to test for compatibility.">Tipo di cui testare la compatibilità.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;type&quot; /&gt; is compatible with the type description and its chain of type description providers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="type" /> è compatibile con la descrizione del tipo e la catena di provider di descrizione del tipo. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> è <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>Specifica il provider della descrizione dei tipi personalizzato per una classe. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> utilizzando il nome del tipo specificato.</summary>
      <param name="typeName">Nome completo del tipo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> utilizzando il tipo specificato.</summary>
      <param name="type">Tipo da archiviare nell'attributo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>Ottiene il nome del tipo per il provider della descrizione dei tipi.</summary>
      <returns>Oggetto <see cref="T:System.String" /> contenente il nome completo del tipo per l'oggetto <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary vsli:raw="Provides information about the characteristics for a component, such as its attributes, properties, and events. This class cannot be inherited.">Offre informazioni sulle caratteristiche di un componente, ad esempio gli attributi, le proprietà e gli eventi. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component instance.">Aggiunge attributi a livello di classe all'istanza del componente di destinazione.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">Istanza del componente di destinazione.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">Matrice di oggetti <see cref="T:System.Attribute" /> da aggiungere alla classe del componente.</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">L'oggetto <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> appena creato, utilizzato per aggiungere gli attributi specificati.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Uno o entrambi i parametri sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component type.">Aggiunge attributi a livello di classe al tipo del componente di destinazione.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">Matrice di oggetti <see cref="T:System.Attribute" /> da aggiungere alla classe del componente.</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">L'oggetto <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> appena creato, utilizzato per aggiungere gli attributi specificati.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">Uno o entrambi i parametri sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary vsli:raw="Adds an editor table for the given editor base type.">Aggiunge una tabella editor per il tipo base dell'editor indicato.</summary>
      <param name="editorBaseType" vsli:raw="The editor base type to add the editor table for. If a table already exists for this type, this method will do nothing.">Tipo base dell'editor per il quale aggiungere la tabella editor. Se per questo tipo già esiste una tabella, il metodo non eseguirà alcuna operazione.</param>
      <param name="table" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Hashtable&quot; /&gt; to add.">Oggetto <see cref="T:System.Collections.Hashtable" /> da aggiungere.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">Aggiunge un provider della descrizione del tipo per una singola istanza di un componente.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> da aggiungere.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Istanza del componente di destinazione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Uno o entrambi i parametri sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">Aggiunge un provider della descrizione del tipo per una classe del componente.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> da aggiungere.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Uno o entrambi i parametri sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">Aggiunge un provider della descrizione del tipo per una singola istanza di un componente.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> da aggiungere.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Istanza del componente di destinazione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Uno o entrambi i parametri sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">Aggiunge un provider della descrizione del tipo per una classe del componente.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> da aggiungere.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Uno o entrambi i parametri sono <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary vsli:raw="Gets or sets the provider for the Component Object Model (COM) type information for the target component.">Ottiene o imposta il provider di informazioni sul tipo COM (Component Object Model) per il componente di destinazione.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComNativeDescriptorHandler&quot; /&gt; instance representing the COM type information provider.">Istanza di <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> che rappresenta il provider di informazioni sul tipo COM.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary vsli:raw="Gets the type of the Component Object Model (COM) object represented by the target component.">Ottiene il tipo di oggetto COM (Component Object Model) rappresentato dal componente di destinazione.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the COM object represented by this component, or &lt;see langword=&quot;null&quot; /&gt; for non-COM objects.">Oggetto <see cref="T:System.Type" /> dell'oggetto COM rappresentato da questo componente oppure <see langword="null" /> per oggetti non COM.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary vsli:raw="Creates a primary-secondary association between two objects.">Crea un'associazione primaria/secondaria tra due oggetti.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> primario.</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> secondario.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Uno o entrambi i parametri sono <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is equal to &lt;paramref name=&quot;secondary&quot; /&gt;.">
        <paramref name="primary" /> è uguale a <paramref name="secondary" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary vsli:raw="Creates an instance of the designer associated with the specified component and of the specified type of designer.">Crea un'istanza della finestra di progettazione associata al componente specificato e del tipo di finestra di progettazione specificato.</summary>
      <param name="component" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that specifies the component to associate with the designer.">Oggetto <see cref="T:System.ComponentModel.IComponent" /> che specifica il componente da associare alla finestra di progettazione.</param>
      <param name="designerBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of designer to create.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di finestra di progettazione da creare.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; that is an instance of the designer for the component, or &lt;see langword=&quot;null&quot; /&gt; if no designer can be found.">Oggetto <see cref="T:System.ComponentModel.Design.IDesigner" /> che rappresenta un'istanza della finestra di progettazione per il componente oppure <see langword="null" /> se non viene trovata alcuna finestra di progettazione.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor, when passed the existing &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">Crea un nuovo descrittore di eventi che è identico a un descrittore esistente, quando viene passato l'oggetto esistente <see cref="T:System.ComponentModel.EventDescriptor" />.</summary>
      <param name="componentType" vsli:raw="The type of the component for which to create the new event.">Tipo di componente per cui creare il nuovo evento.</param>
      <param name="oldEventDescriptor" vsli:raw="The existing event information.">Informazioni sull'evento esistente.</param>
      <param name="attributes" vsli:raw="The new attributes.">Nuovi attributi.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that has merged the specified metadata attributes with the existing metadata attributes.">Un nuovo oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> i cui attributi di metadati specificati sono uniti agli attributi di metadati esistenti.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor by dynamically generating descriptor information from a specified event on a type.">Crea un nuovo descrittore di eventi identico a un descrittore di eventi esistente generando dinamicamente le informazioni sul descrittore da un evento specificato su un tipo.</summary>
      <param name="componentType" vsli:raw="The type of the component the event lives on.">Tipo di componente su cui si basa l'evento.</param>
      <param name="name" vsli:raw="The name of the event.">Nome dell'evento.</param>
      <param name="type" vsli:raw="The type of the delegate that handles the event.">Tipo del delegato che gestisce l'evento.</param>
      <param name="attributes" vsli:raw="The attributes for this event.">Attributi per l'evento.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that is bound to a type.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> associato a un tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">Crea un oggetto che può sostituire un altro tipo di dati.</summary>
      <param name="provider" vsli:raw="The service provider that provides a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; service. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">Provider di servizi che fornisce un servizio <see cref="T:System.ComponentModel.TypeDescriptionProvider" />. Questo parametro può essere <see langword="null" />.</param>
      <param name="objectType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of object to create.">Tipo di oggetto <see cref="T:System.Type" /> da creare.</param>
      <param name="argTypes" vsli:raw="An optional array of parameter types to be passed to the object's constructor. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an array of zero length.">Matrice facoltativa dei tipi di parametro da passare al costruttore dell'oggetto. Questo parametro può essere <see langword="null" /> o una matrice di lunghezza zero.</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor. If not &lt;see langword=&quot;null&quot; /&gt;, the number of elements must be the same as &lt;paramref name=&quot;argTypes&quot; /&gt;.">Matrice facoltativa dei valori di parametro da passare al costruttore dell'oggetto. Se non è <see langword="null" />, il numero di elementi deve essere uguale a <paramref name="argTypes" />.</param>
      <returns vsli:raw="An instance of the substitute data type if an associated &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; is found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Istanza del tipo di dati sostituito se viene individuato un oggetto <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> associato; in caso contrario, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or &lt;paramref name=&quot;args&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; when &lt;paramref name=&quot;argTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="objectType" /> è <see langword="null" /> o <paramref name="args" /> è <see langword="null" /> quando <paramref name="argTypes" /> non è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;argTypes&quot; /&gt; and &lt;paramref name=&quot;args&quot; /&gt; have different number of elements.">
        <paramref name="argTypes" /> e <paramref name="args" /> hanno un numero diverso di elementi.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new property descriptor from an existing property descriptor, using the specified existing &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and attribute array.">Crea un nuovo descrittore di proprietà da un descrittore di proprietà esistente, usando l'oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> e la matrice di attributi specificati.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">L'oggetto <see cref="T:System.Type" /> del componente di cui la proprietà è un membro.</param>
      <param name="oldPropertyDescriptor" vsli:raw="The existing property descriptor.">Descrittore della proprietà esistente.</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">Nuovi attributi per questa proprietà.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that has the specified metadata attributes merged with the existing metadata attributes.">Un nuovo oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> i cui attributi di metadati specificati sono uniti agli attributi di metadati esistenti.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates and dynamically binds a property descriptor to a type, using the specified property name, type, and attribute array.">Crea e associa dinamicamente un descrittore di proprietà a un tipo, usando il nome della proprietà, il tipo e la matrice di attributi specificati.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">L'oggetto <see cref="T:System.Type" /> del componente di cui la proprietà è un membro.</param>
      <param name="name" vsli:raw="The name of the property.">Nome della proprietà.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the property.">
        <see cref="T:System.Type" /> della proprietà.</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">Nuovi attributi per questa proprietà.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is bound to the specified type and that has the specified metadata attributes merged with the existing metadata attributes.">Un oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> associato al tipo specificato e i cui attributi di metadati specificati sono uniti agli attributi di metadati esistenti.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary vsli:raw="Returns an instance of the type associated with the specified primary object.">Restituisce un'istanza del tipo associato all'oggetto primario specificato.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
      <param name="primary" vsli:raw="The primary object of the association.">Oggetto primario dell'associazione.</param>
      <returns vsli:raw="An instance of the secondary type that has been associated with the primary object if an association exists; otherwise, &lt;paramref name=&quot;primary&quot; /&gt; if no specified association exists.">Istanza del tipo secondario associata all'oggetto primario se esiste un'associazione. In caso contrario, <paramref name="primary" /> se non esiste alcuna associazione specifica.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Uno o entrambi i parametri sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary vsli:raw="Returns the collection of attributes for the specified component.">Restituisce l'insieme di attributi per il componente specificato.</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">Componente per il quale si desidera ottenere attributi.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the component. If &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">Oggetto <see cref="T:System.ComponentModel.AttributeCollection" /> contenente gli attributi per il componente. Se <paramref name="component" /> è <see langword="null" />, questo metodo restituisce un insieme vuoto.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a collection of attributes for the specified component and a Boolean indicating that a custom type descriptor has been created.">Restituisce un insieme di attributi per il componente specificato e un valore booleano che indica che è stato creato un descrittore di tipi personalizzato.</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">Componente per il quale si desidera ottenere attributi.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use a baseline set of attributes from the custom type descriptor if &lt;paramref name=&quot;component&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per utilizzare un set di attributi di base dal descrittore di tipi personalizzato se l'oggetto <paramref name="component" /> è di tipo <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />. In caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">Insieme <see cref="T:System.ComponentModel.AttributeCollection" /> con gli attributi per il componente. Se il componente è <see langword="null" />, questo metodo restituisce un insieme vuoto.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary vsli:raw="Returns a collection of attributes for the specified type of component.">Restituisce un insieme di attributi per il tipo di componente specificato.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the type of the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">Insieme <see cref="T:System.ComponentModel.AttributeCollection" /> con gli attributi per il tipo di componente. Se il componente è <see langword="null" />, questo metodo restituisce un insieme vuoto.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary vsli:raw="Returns the name of the class for the specified component using the default type descriptor.">Restituisce il nome della classe per il componente specificato utilizzando il descrittore di tipi predefinito.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">Oggetto <see cref="T:System.Object" /> per il quale si desidera il nome della classe.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">Oggetto <see cref="T:System.String" /> contenente il nome della classe per il componente specificato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the class for the specified component using a custom type descriptor.">Restituisce il nome della classe per il componente specificato utilizzando un descrittore di tipi personalizzato.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">Oggetto <see cref="T:System.Object" /> per il quale si desidera il nome della classe.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per considerare le informazioni di descrizione dei tipi personalizzati. In caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">Oggetto <see cref="T:System.String" /> contenente il nome della classe per il componente specificato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary vsli:raw="Returns the name of the class for the specified type.">Restituisce il nome della classe per il tipo specificato.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component type.">Oggetto <see cref="T:System.String" /> contenente il nome della classe per il tipo di componente specificato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary vsli:raw="Returns the name of the specified component using the default type descriptor.">Restituisce il nome del componente specificato utilizzando il descrittore di tipi predefinito.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">Oggetto <see cref="T:System.Object" /> per il quale si desidera il nome della classe.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">Oggetto <see cref="T:System.String" /> contenente il nome del componente specificato o <see langword="null" /> in mancanza di un nome di componente.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the specified component using a custom type descriptor.">Restituisce il nome del componente specificato utilizzando un descrittore di tipi personalizzato.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">Oggetto <see cref="T:System.Object" /> per il quale si desidera il nome della classe.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per considerare le informazioni di descrizione dei tipi personalizzati. In caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="The name of the class for the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">Nome della classe del componente specificato o <see langword="null" /> in mancanza di un nome di componente.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary vsli:raw="Returns a type converter for the type of the specified component.">Restituisce un convertitore di tipi per il tipo del componente specificato.</summary>
      <param name="component" vsli:raw="A component to get the converter for.">Componente per il quale ottenere il convertitore.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">Oggetto <see cref="T:System.ComponentModel.TypeConverter" /> per il componente specificato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a type converter for the type of the specified component with a custom type descriptor.">Restituisce un convertitore di tipi per il tipo del componente specificato con un descrittore di tipi personalizzato.</summary>
      <param name="component" vsli:raw="A component to get the converter for.">Componente per il quale ottenere il convertitore.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per considerare le informazioni di descrizione dei tipi personalizzati. In caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">Oggetto <see cref="T:System.ComponentModel.TypeConverter" /> per il componente specificato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary vsli:raw="Returns a type converter for the specified type.">Restituisce un convertitore di tipi per il tipo specificato.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">Oggetto <see cref="T:System.ComponentModel.TypeConverter" /> per il tipo specificato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Returns the default event for the specified component.">Restituisce l'evento predefinito per il componente specificato.</summary>
      <param name="component" vsli:raw="The component to get the event for.">Componente per il quale ottenere l'evento.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> con l'evento predefinito oppure <see langword="null" /> se non esistono eventi.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default event for a component with a custom type descriptor.">Restituisce l'evento predefinito per un componente con un descrittore di tipi personalizzato.</summary>
      <param name="component" vsli:raw="The component to get the event for.">Componente per il quale ottenere l'evento.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per considerare le informazioni di descrizione dei tipi personalizzati. In caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> con l'evento predefinito oppure <see langword="null" /> se non esistono eventi.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary vsli:raw="Returns the default event for the specified type of component.">Restituisce l'evento predefinito per il tipo specificato di componente.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">Oggetto <see cref="T:System.ComponentModel.EventDescriptor" /> con l'evento predefinito oppure <see langword="null" /> se non esistono eventi.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Returns the default property for the specified component.">Restituisce la proprietà predefinita per il componente specificato.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">Componente per cui ottenere la proprietà predefinita.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> con la proprietà predefinita oppure <see langword="null" /> se non esistono proprietà.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default property for the specified component with a custom type descriptor.">Restituisce la proprietà predefinita per il componente specificato con un descrittore di tipi personalizzato.</summary>
      <param name="component" vsli:raw="The component to get the default property for.">Componente per cui ottenere la proprietà predefinita.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per considerare le informazioni di descrizione dei tipi personalizzati. In caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> con la proprietà predefinita oppure <see langword="null" /> se non esistono proprietà.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary vsli:raw="Returns the default property for the specified type of component.">Restituisce la proprietà predefinita per il tipo specificato di componente.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the class to get the property for.">Oggetto <see cref="T:System.Type" /> che rappresenta la classe per la quale ottenere la proprietà.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptor" /> con la proprietà predefinita oppure <see langword="null" /> se non esistono proprietà.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets an editor with the specified base type for the specified component.">Ottiene un editor con il tipo base specificato per il componente specificato.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">Componente per il quale ottenere l'editor.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo base dell'editor che si desidera trovare.</param>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">Istanza dell'editor della quale è possibile eseguire il cast nel tipo di editor specificato o <see langword="null" /> se non viene individuato alcun editor del tipo richiesto.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> o <paramref name="editorBaseType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary vsli:raw="Returns an editor with the specified base type and with a custom type descriptor for the specified component.">Restituisce un editor con il tipo base specificato e con un descrittore di tipi personalizzato per il componente specificato.</summary>
      <param name="component" vsli:raw="The component to get the editor for.">Componente per il quale ottenere l'editor.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo base dell'editor che si desidera trovare.</param>
      <param name="noCustomTypeDesc" vsli:raw="A flag indicating whether custom type description information should be considered.">Flag che indica se prendere in considerazione le informazioni sulla descrizione dei tipi personalizzati.</param>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">Istanza dell'editor della quale è possibile eseguire il cast nel tipo di editor specificato o <see langword="null" /> se non viene individuato alcun editor del tipo richiesto.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> o <paramref name="editorBaseType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary vsli:raw="Returns an editor with the specified base type for the specified type.">Restituisce un editor con il tipo base specificato per il tipo specificato.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you are trying to find.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo base dell'editor che si sta cercando.</param>
      <returns vsli:raw="An instance of the editor object that can be cast to the given base type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">Istanza dell'oggetto editor della quale è possibile eseguire il cast nel tipo di base indicato o <see langword="null" /> se non viene individuato alcun editor del tipo richiesto.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> o <paramref name="editorBaseType" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary vsli:raw="Returns the collection of events for the specified component.">Restituisce l'insieme degli eventi per il componente specificato.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Componente per il quale ottenere gli eventi.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">Insieme <see cref="T:System.ComponentModel.EventDescriptorCollection" /> con gli eventi per questo componente.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter.">Restituisce l'insieme di eventi per un componente specificato utilizzando come filtro una matrice di attributi specificata.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Componente per il quale ottenere gli eventi.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> che può essere utilizzata come filtro.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">Insieme <see cref="T:System.ComponentModel.EventDescriptorCollection" /> con gli eventi che corrispondono agli attributi specificati per questo componente.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">Restituisce l'insieme di eventi per un componente specificato utilizzando come filtro una matrice di attributi specificata e un descrittore di tipi personalizzato.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Componente per il quale ottenere gli eventi.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> da utilizzare come filtro.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per considerare le informazioni di descrizione dei tipi personalizzati. In caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">Insieme <see cref="T:System.ComponentModel.EventDescriptorCollection" /> con gli eventi che corrispondono agli attributi specificati per questo componente.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component with a custom type descriptor.">Restituisce l'insieme di eventi per un componente specificato con un descrittore di tipi personalizzato.</summary>
      <param name="component" vsli:raw="A component to get the events for.">Componente per il quale ottenere gli eventi.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per considerare le informazioni di descrizione dei tipi personalizzati. In caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">Insieme <see cref="T:System.ComponentModel.EventDescriptorCollection" /> con gli eventi per questo componente.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary vsli:raw="Returns the collection of events for a specified type of component.">Restituisce l'insieme di eventi per un tipo specificato di componente.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">Insieme <see cref="T:System.ComponentModel.EventDescriptorCollection" /> con gli eventi per questo componente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified type of component using a specified array of attributes as a filter.">Restituisce l'insieme di eventi per un tipo specificato di componente utilizzando come filtro una matrice di attributi specificata.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> che può essere utilizzata come filtro.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">Insieme <see cref="T:System.ComponentModel.EventDescriptorCollection" /> con gli eventi che corrispondono agli attributi specificati per questo componente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary vsli:raw="Returns the fully qualified name of the component.">Restituisce il nome completo del componente.</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to find the name for.">Oggetto <see cref="T:System.ComponentModel.Component" /> del quale trovare il nome.</param>
      <returns vsli:raw="The fully qualified name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">Nome completo del componente specificato o <see langword="null" /> se il componente non ha nome.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary vsli:raw="Returns the collection of properties for a specified component.">Restituisce l'insieme di proprietà per un componente specificato.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Componente per il quale ottenere le proprietà.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà per il componente specificato.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter.">Restituisce l'insieme di proprietà per un componente specificato utilizzando come filtro una matrice di attributi specificata.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Componente per il quale ottenere le proprietà.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> da utilizzare come filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà che corrispondono agli attributi specificati per lo specifico componente.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">Restituisce l'insieme di proprietà per un componente specificato utilizzando come filtro una matrice di attributi specificata e un descrittore di tipi personalizzato.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Componente per il quale ottenere le proprietà.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> da usare come filtro.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per considerare le informazioni di descrizione dei tipi personalizzati. In caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the events that match the specified attributes for the specified component.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con gli eventi che corrispondono agli attributi specificati per lo specifico componente.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using the default type descriptor.">Restituisce l'insieme di proprietà per un componente specificato utilizzando il descrittore di tipi personalizzato.</summary>
      <param name="component" vsli:raw="A component to get the properties for.">Componente per il quale ottenere le proprietà.</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per non considerare le informazioni di descrizione dei tipi personalizzati; in caso contrario, <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified component.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà per un componente specificato.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> è un oggetto cross-process remoto.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary vsli:raw="Returns the collection of properties for a specified type of component.">Restituisce l'insieme di proprietà per un tipo specificato di componente.</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component to get properties for.">Oggetto <see cref="T:System.Type" /> che rappresenta il componente per il quale ottenere proprietà.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified type of component.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà per un tipo di componente specificato.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified type of component using a specified array of attributes as a filter.">Restituisce l'insieme di proprietà per un tipo specificato di componente utilizzando come filtro una matrice di attributi specificata.</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">Matrice di tipo <see cref="T:System.Attribute" /> da utilizzare come filtro.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for this type of component.">Insieme <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> con le proprietà che corrispondono agli attributi specificati per questo tipo di componente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary vsli:raw="Returns the type description provider for the specified component.">Restituisce il provider della descrizione del tipo per il componente specificato.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">Istanza del componente di destinazione.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified component.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> associato al componente specificato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary vsli:raw="Returns the type description provider for the specified type.">Restituisce il provider della descrizione del tipo per il tipo specificato.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified type.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> associato al tipo specificato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given an object.">Restituisce un oggetto <see cref="T:System.Type" /> che può essere utilizzato per effettuare la reflection, dato un oggetto.</summary>
      <param name="instance" vsli:raw="An instance of the target component.">Istanza del componente di destinazione.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; for the specified object.">Oggetto <see cref="T:System.Type" /> per l'oggetto specificato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given a class type.">Restituisce un oggetto <see cref="T:System.Type" /> che può essere utilizzato per effettuare la reflection, dato un tipo di classe.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; of the specified class.">Un oggetto <see cref="T:System.Type" /> della classe specificata.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary vsli:raw="Gets a type that represents a type description provider for all interface types.">Ottiene un tipo che rappresenta un provider di descrizione del tipo per tutti i tipi di interfaccia.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents a custom type description provider for all interface types.">
        <see cref="T:System.Type" /> che rappresenta un provider di descrizione del tipo personalizzato per tutti i tipi di interfaccia.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary vsli:raw="Clears the properties and events for the specified component from the cache.">Elimina dalla cache le proprietà e gli eventi per il componente specificato.</summary>
      <param name="component" vsli:raw="A component for which the properties or events have changed.">Componente le cui proprietà o eventi sono cambiati.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary vsli:raw="Clears the properties and events for the specified assembly from the cache.">Elimina dalla cache le proprietà e gli eventi per l'assembly specificato.</summary>
      <param name="assembly" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that represents the assembly to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this assembly will be refreshed.">Oggetto <see cref="T:System.Reflection.Assembly" /> che rappresenta l'assembly da aggiornare. Verrà aggiornato ogni oggetto <see cref="T:System.Type" /> di questo assembly.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary vsli:raw="Clears the properties and events for the specified module from the cache.">Elimina dalla cache le proprietà e gli eventi per il modulo specificato.</summary>
      <param name="module" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; that represents the module to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this module will be refreshed.">Oggetto <see cref="T:System.Reflection.Module" /> che rappresenta il modulo da aggiornare. Verrà aggiornato ogni oggetto <see cref="T:System.Type" /> di questo modulo.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary vsli:raw="Clears the properties and events for the specified type of component from the cache.">Elimina dalla cache le proprietà e gli eventi per il tipo specificato di componente.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary vsli:raw="Occurs when the cache for a component is cleared.">Viene generato quando viene svuotata la cache di un componente.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary vsli:raw="Removes an association between two objects.">Rimuove un'associazione tra due oggetti.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> primario.</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> secondario.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Uno o entrambi i parametri sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary vsli:raw="Removes all associations for a primary object.">Rimuove tutte le associazioni di un oggetto primario.</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt; in an association.">Oggetto <see cref="T:System.Object" /> primario di un'associazione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="primary" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">Rimuove un provider della descrizione del tipo aggiunto in precedenza e associato all'oggetto specificato.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> da rimuovere.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Istanza del componente di destinazione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Uno o entrambi i parametri sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">Rimuove un provider della descrizione del tipo aggiunto in precedenza e associato al tipo specificato.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> da rimuovere.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Uno o entrambi i parametri sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">Rimuove un provider della descrizione del tipo aggiunto in precedenza e associato all'oggetto specificato.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> da rimuovere.</param>
      <param name="instance" vsli:raw="An instance of the target component.">Istanza del componente di destinazione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Uno o entrambi i parametri sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">Rimuove un provider della descrizione del tipo aggiunto in precedenza e associato al tipo specificato.</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> da rimuovere.</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">Oggetto <see cref="T:System.Type" /> del componente di destinazione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">Uno o entrambi i parametri sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary vsli:raw="Sorts descriptors using the name of the descriptor.">Ordina i descrittori utilizzando il nome del descrittore.</summary>
      <param name="infos" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that contains the descriptors to sort.">Oggetto <see cref="T:System.Collections.IList" /> che contiene i descrittori da ordinare.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;infos&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="infos" /> è <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary vsli:raw="Provides a type converter that can be used to populate a list box with available types.">Fornisce un convertitore di tipi che può essere utilizzato per inserire i tipi disponibili in una casella di riepilogo.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeListConverter&quot; /&gt; class using the type array as the available types.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeListConverter" /> utilizzando la matrice dei tipi per i tipi disponibili.</summary>
      <param name="types" vsli:raw="The array of type &lt;see cref=&quot;T:System.Type&quot; /&gt; to use as the available types.">Matrice di tipo <see cref="T:System.Type" /> da utilizzare per i tipi disponibili.</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert the specified &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object using the given context.">Ottiene un valore che indica se questo convertitore può convertire il tipo <see cref="T:System.Type" /> specificato dell'oggetto di origine utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="sourceType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object.">Tipo <see cref="T:System.Type" /> dell'oggetto di origine.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ottiene un valore che indica se questo convertitore può convertire un oggetto nel tipo di destinazione specificato usando il contesto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">Tipo <see cref="T:System.Type" /> che rappresenta il tipo di destinazione della conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the native type of the converter.">Converte l'oggetto specificato nel tipo nativo del convertitore.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che specifica le impostazioni cultura utilizzate per rappresentare il tipo di carattere.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">Converte l'oggetto valore specificato nel tipo di destinazione specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> facoltativo. Se non vengono specificate impostazioni cultura, vengono utilizzate quelle correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">Tipo <see cref="T:System.Type" /> in cui convertire il valore.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> che rappresenta la conversione di <paramref name="value" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">Ottiene un insieme di valori standard per il tipo di dati per cui è progettato questo validator.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Insieme <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> con un set standard di valori validi oppure <see langword="null" /> se il tipo di dati non supporta un set standard di valori.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">Ottiene un valore che indica se l'elenco di valori standard restituito dal metodo <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> è un elenco esclusivo.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> perché l'oggetto <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> restituito da <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> è un elenco completo dei valori possibili. Questo metodo non restituisce mai <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">Ottiene un valore che indica se il convertitore supporta un insieme di valori standard che possono essere selezionati da un elenco utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> perché è necessario chiamare il metodo <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> per trovare un insieme comune di valori supportati dall'oggetto. Questo metodo non restituisce mai <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit unsigned integer objects to and from other representations.">Fornisce un convertitore di tipi per la conversione di oggetti di tipo Integer senza segno a 16 bit in e da altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt16Converter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.UInt16Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit unsigned integer objects to and from various other representations.">Fornisce un convertitore di tipi per la conversione di oggetti di tipo Integer senza segno a 32 bit in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt32Converter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.UInt32Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit unsigned integer objects to and from other representations.">Offre un convertitore di tipi per la conversione di oggetti di tipo intero senza segno a 64 bit in e da altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt64Converter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.UInt64Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Version&quot; /&gt; objects to and from various other representations.">Fornisce un convertitore di tipi per convertire oggetti <see cref="T:System.Version" /> in e da diverse altre rappresentazioni.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.VersionConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.VersionConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">Ottiene un valore che indica se il convertitore può convertire un oggetto dal tipo di origine specificato in un oggetto <see cref="T:System.Version" />.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">Oggetto che fornisce informazioni contestuali.</param>
      <param name="sourceType" vsli:raw="The type of the object to be converted.">Tipo di oggetto da convertire.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can convert sourceType to a &lt;see cref=&quot;T:System.Version&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può convertire sourceType in <see cref="T:System.Version" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ottiene un valore che indica se questo convertitore può convertire un oggetto nel tipo di destinazione specificato usando il contesto.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">Oggetto che fornisce informazioni contestuali.</param>
      <param name="destinationType" vsli:raw="The target type for the conversion.">Tipo di destinazione per la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the converter can convert an object to the given destination type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può convertire un oggetto nel tipo di destinazione dato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">Converte l'oggetto specificato in un oggetto <see cref="T:System.Version" />.</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">Oggetto che fornisce informazioni contestuali.</param>
      <param name="culture" vsli:raw="The culture to use for the conversion.">Impostazioni cultura da utilizzare per la conversione.</param>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">Valore da convertire in un <see cref="T:System.Version" />.</param>
      <returns vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; converted to a &lt;see cref=&quot;T:System.Version&quot; /&gt; value.">
        <paramref name="value" /> convertito in un valore <see cref="T:System.Version" />.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Version&quot; /&gt; string.">
        <paramref name="value" /> non è una stringa <see cref="T:System.Version" /> valida.</exception>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified value to the specified destination type using the specified context and arguments.">Converte il valore specificato nel tipo di destinazione indicato usando il contesto e gli argomenti specificati.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="The culture that supplies formatting information for the conversion.">Impostazioni cultura che specificano informazioni di formattazione per la conversione.</param>
      <param name="value" vsli:raw="The value to be converted.">Valore da convertire.</param>
      <param name="destinationType" vsli:raw="The type to convert the value parameter to.">Tipo in cui convertire il parametro value.</param>
      <returns vsli:raw="An object that represents the converted value.">Oggetto che rappresenta il valore convertito.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the given value object is valid for this type and for the specified context.">Restituisce un valore che indica se l'oggetto valore specificato è valido per questo tipo e per il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="value" vsli:raw="The object to test for validity.">Oggetto di cui eseguire il test di validità.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore specificato è valido per questo oggetto. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary vsli:raw="Specifies an exception that is handled as a warning instead of an error.">Specifica un'eccezione che viene gestita come avviso e non come errore.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.WarningException" />.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class using the specified serialization data and context.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.WarningException" /> usando i dati di serializzazione e il contesto specificati.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">Classe <see cref="T:System.Runtime.Serialization.SerializationInfo" /> da utilizzare per la deserializzazione.</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">Destinazione da utilizzare per la deserializzazione.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message and no Help file.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.WarningException" /> con il messaggio specificato e nessun file della Guida.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">Messaggio che apparirà all'utente finale.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified detailed description and the specified exception.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.WarningException" /> con la descrizione dettagliata e l'eccezione specificate.</summary>
      <param name="message" vsli:raw="A detailed description of the error.">Descrizione dettagliata dell'errore.</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">Riferimento all'eccezione interna che è la causa di questa eccezione.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.WarningException" /> con il messaggio specificato e l'accesso al file della Guida specificato.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">Messaggio che apparirà all'utente finale.</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">File della Guida da visualizzare se l'utente richiede ulteriori informazioni.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file and topic.">Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.WarningException" /> con il messaggio specificato e accesso al file e all'argomento della Guida specificati.</summary>
      <param name="message" vsli:raw="The message to display to the end user.">Messaggio che apparirà all'utente finale.</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">File della Guida da visualizzare se l'utente richiede ulteriori informazioni.</param>
      <param name="helpTopic" vsli:raw="The Help topic to display if the user requests help.">Argomento della Guida da visualizzare se l'utente richiede ulteriori informazioni.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with the parameter name and additional exception information.">Imposta l'oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con il nome del parametro e le informazioni aggiuntive sull'eccezione.</summary>
      <param name="info" vsli:raw="Stores the data that was being used to serialize or deserialize the object that the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.CodeDomSerializer&quot; /&gt; was serializing or deserializing.">Memorizza i dati utilizzati per serializzare o deserializzare l'oggetto a sua volta serializzato o deserializzato dall'oggetto <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />.</param>
      <param name="context" vsli:raw="Describes the source and destination of the stream that generated the exception, as well as a means for serialization to retain that context and an additional caller-defined context.">Descrive l'origine e la destinazione del flusso che ha generato l'eccezione e rappresenta un mezzo per mantenere tale contesto e un ulteriore contesto definito dal chiamante nell'ambito della serializzazione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary vsli:raw="Gets the Help topic associated with the warning.">Ottiene l'argomento della Guida associato all'avviso.</summary>
      <returns vsli:raw="The Help topic associated with the warning.">Argomento della Guida associato all'avviso.</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary vsli:raw="Gets the Help file associated with the warning.">Ottiene il file della Guida associato all'avviso.</summary>
      <returns vsli:raw="The Help file associated with the warning.">File della Guida associato all'avviso.</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary vsli:raw="Converts colors from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Converte i colori da un tipo di dati all'altro. È possibile accedere a questa classe mediante l'oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.ColorConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Drawing.ColorConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Determina se questo convertitore può convertire un oggetto del tipo di origine specificato nel tipo nativo del convertitore.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato. È possibile utilizzare questo oggetto per ottenere ulteriori informazioni sull'ambiente da cui è richiamato questo convertitore.</param>
      <param name="sourceType" vsli:raw="The type from which you want to convert.">Tipo da cui si desidera eseguire la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">Restituisce un valore che indica se questo convertitore può convertire un oggetto nel tipo di destinazione specificato, utilizzando il contesto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to which you want to convert.">
        <see cref="T:System.Type" /> che rappresenta il tipo nel quale si desidera effettuare la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questo convertitore può eseguire l'operazione; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">Converte l'oggetto specificato nel tipo nativo del convertitore.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptor" /> che fornisce un contesto di formato. È possibile utilizzare questo oggetto per ottenere ulteriori informazioni sull'ambiente da cui è richiamato questo convertitore.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che specifica le impostazioni cultura per la rappresentazione del colore.</param>
      <param name="value" vsli:raw="The object to convert.">Oggetto da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">Converte l'oggetto specificato in un altro tipo.</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">Contesto di un formattatore. Utilizzare questo oggetto per ottenere ulteriori informazioni sull'ambiente da cui è richiamato questo convertitore. Controllare sempre se questo valore corrisponde a <see langword="null" />. Anche le proprietà dell'oggetto di contesto possono restituire <see langword="null" />.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che specifica le impostazioni cultura per la rappresentazione del colore.</param>
      <param name="value" vsli:raw="The object to convert.">Oggetto da convertire.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Tipo in cui convertire l'oggetto.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationtype&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationtype" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Retrieves a collection containing a set of standard values for the data type for which this validator is designed. This will return &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">Recupera un insieme contenente un gruppo di valori standard per il tipo di dati per cui è stato progettato questo validator. Viene restituito un valore <see langword="null" />, se il tipo di dati non supporta un gruppo standard di valori.</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">Contesto di un formattatore. Utilizzare questo oggetto per ottenere ulteriori informazioni sull'ambiente da cui è richiamato questo convertitore. Controllare sempre se questo valore corrisponde a <see langword="null" />. Anche le proprietà dell'oggetto di contesto possono restituire <see langword="null" />.</param>
      <returns vsli:raw="A collection containing &lt;see langword=&quot;null&quot; /&gt; or a standard set of valid values. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Insieme che contiene valori <see langword="null" /> o un set standard di valori validi. L'implementazione predefinita restituisce sempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports a standard set of values that can be chosen from a list.">Determina se questo oggetto supporta un gruppo standard di valori selezionabili da un elenco.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptor" /> tramite il quale è possibile fornire un contesto aggiuntivo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.Drawing.ColorConverter.GetStandardValues&quot; /&gt; must be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è necessario chiamare il metodo <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" /> per individuare un set comune di valori supportati dall'oggetto; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object from one data type to another.">Converte un oggetto <see cref="T:System.Drawing.Point" /> da un tipo di dati all'altro.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.PointConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Drawing.PointConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Determina se questo convertitore può convertire un oggetto del tipo di origine specificato nel tipo nativo del convertitore.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Contesto di un formattatore. Questo oggetto può essere usato per ottenere informazioni aggiuntive sull'ambiente da cui viene chiamato il convertitore. Poiché può essere <see langword="null" />, è sempre consigliabile eseguire un controllo. Anche le proprietà dell'oggetto contesto possono restituire <see langword="null" />.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">Tipo da cui si vuole eseguire la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ottiene un valore che indica se questo convertitore può convertire un oggetto nel tipo di destinazione specificato usando il contesto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto del formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo nel quale si vuole effettuare la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object.">Converte l'oggetto specificato in un oggetto <see cref="T:System.Drawing.Point" />.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Contesto di un formattatore. Questo oggetto può essere usato per ottenere informazioni aggiuntive sull'ambiente da cui viene chiamato il convertitore. Poiché può essere <see langword="null" />, è sempre consigliabile eseguire un controllo. Anche le proprietà dell'oggetto contesto possono restituire <see langword="null" />.</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Oggetto che contiene informazioni specifiche delle impostazioni cultura, ad esempio le convenzioni linguistiche, di calendario e culturali associate a determinate impostazioni cultura. Si basa sullo standard RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Oggetto da convertire.</param>
      <returns vsli:raw="The converted object.">Oggetto convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Non è possibile completare la conversione.</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">Converte l'oggetto specificato nel tipo indicato.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Contesto di un formattatore. Questo oggetto può essere usato per ottenere informazioni aggiuntive sull'ambiente da cui viene chiamato il convertitore. Poiché può essere <see langword="null" />, è sempre consigliabile eseguire un controllo. Anche le proprietà dell'oggetto contesto possono restituire <see langword="null" />.</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Oggetto che contiene informazioni specifiche delle impostazioni cultura, ad esempio le convenzioni linguistiche, di calendario e culturali associate a determinate impostazioni cultura. Si basa sullo standard RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Oggetto da convertire.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Tipo in cui convertire l'oggetto.</param>
      <returns vsli:raw="The converted object.">Oggetto convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Non è possibile completare la conversione.</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object.">Dopo che è stato specificato un set di valori di proprietà per l'oggetto, crea un'istanza di questo tipo.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">Descrittore del tipo tramite il quale è possibile fornire un contesto aggiuntivo.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt;.">Dizionario dei nuovi valori delle proprietà. Il dizionario contiene una serie di coppie nome-valore, una per ogni proprietà restituita da <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">Nuovo oggetto creato oppure <see langword="null" />, se non è stato possibile creare l'oggetto. L'implementazione predefinita restituisce <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">Determina se la modifica di un valore in questo oggetto richiede una chiamata a <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> per creare un nuovo valore.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptor" /> tramite il quale è possibile fornire un contesto aggiuntivo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il metodo <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> deve essere chiamato quando viene apportata una modifica a una o più proprietà di questo oggetto. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">Recupera il gruppo di proprietà per questo tipo. Per impostazione predefinita, un tipo non restituisce alcuna proprietà.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">Descrittore del tipo tramite il quale è possibile fornire un contesto aggiuntivo.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">Valore dell'oggetto per il quale ottenere le proprietà.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Matrice di oggetti <see cref="T:System.Attribute" /> che descrivono le proprietà.</param>
      <returns vsli:raw="The set of properties that are exposed for this data type. If no properties are exposed, this method might return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Set di proprietà esposte per questo tipo di dati. Se non è esposta alcuna proprietà, il metodo può restituire <see langword="null" />. L'implementazione predefinita restituisce sempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">Determina se questo oggetto supporta proprietà. Per impostazione predefinita, tale valore è <see langword="false" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptor" /> tramite il quale è possibile fornire un contesto aggiuntivo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se occorre chiamare <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> per trovare le proprietà di questo oggetto. <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary vsli:raw="Converts rectangles from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">Converte i rettangoli da un tipo di dati all'altro. È possibile accedere a questa classe mediante l'oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.RectangleConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Drawing.RectangleConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">Determina se questo convertitore può convertire un oggetto del tipo di origine specificato nel tipo nativo del convertitore.</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Contesto di un formattatore. Questo oggetto può essere usato per ottenere informazioni aggiuntive sull'ambiente da cui viene chiamato il convertitore. Poiché può essere <see langword="null" />, è sempre consigliabile eseguire un controllo. Anche le proprietà dell'oggetto contesto possono restituire <see langword="null" />.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">Tipo da cui si vuole eseguire la conversione.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Questo metodo restituisce <see langword="true" /> se l'oggetto è in grado di eseguire la conversione, in caso contrario restituisce <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ottiene un valore che indica se questo convertitore può convertire un oggetto nel tipo di destinazione specificato usando il contesto.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context. This can be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object can also return &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto del formato. È opportuno eseguire un controllo poiché potrebbe essere <see langword="null" />. Inoltre, anche le proprietà dell'oggetto di contesto possono restituire <see langword="null" />.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo nel quale si vuole effettuare la conversione.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Questo metodo restituisce <see langword="true" /> se il convertitore è in grado di eseguire la conversione, in caso contrario restituisce <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.Drawing.Rectangle&quot; /&gt; object.">Converte l'oggetto specificato in un oggetto <see cref="T:System.Drawing.Rectangle" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che può essere utilizzato per ottenere informazioni aggiuntive sull'ambiente da cui viene chiamato il convertitore. Poiché può essere <see langword="null" />, è sempre consigliabile eseguire un controllo. Anche le proprietà dell'oggetto contesto possono restituire <see langword="null" />.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che contiene informazioni specifiche delle impostazioni cultura, ad esempio le convenzioni linguistiche, di calendario e culturali associate a determinate impostazioni cultura. Si basa sullo standard RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Oggetto da convertire.</param>
      <returns vsli:raw="The converted object.">Oggetto convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Non è possibile completare la conversione.</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">Converte l'oggetto specificato nel tipo indicato.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che può essere utilizzato per ottenere informazioni aggiuntive sull'ambiente da cui viene chiamato il convertitore. Poiché può essere <see langword="null" />, è sempre consigliabile eseguire un controllo. Anche le proprietà dell'oggetto contesto possono restituire <see langword="null" />.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che contiene informazioni specifiche delle impostazioni cultura, ad esempio le convenzioni linguistiche, di calendario e culturali associate a determinate impostazioni cultura. Si basa sullo standard RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Oggetto da convertire.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Tipo in cui convertire l'oggetto.</param>
      <returns vsli:raw="The converted object.">Oggetto convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Non è possibile completare la conversione.</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object. This is useful for objects that are immutable but still want to provide changeable properties.">Dopo che è stato specificato un set di valori di proprietà per l'oggetto, crea un'istanza di questo tipo. Risulta utile per oggetti non modificabili cui, tuttavia, si desidera assegnare proprietà modificabili.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> tramite il quale è possibile fornire un contesto aggiuntivo.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from a call to the &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">Dizionario dei nuovi valori delle proprietà. Il dizionario contiene una serie di coppie nome-valore, una per ciascuna proprietà restituita da una chiamata al metodo <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">Nuovo oggetto creato oppure <see langword="null" />, se non è stato possibile creare l'oggetto. L'implementazione predefinita restituisce <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">Determina se la modifica di un valore in questo oggetto richiede una chiamata a <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> per creare un nuovo valore.</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">Descrittore del tipo tramite il quale è possibile fornire un contesto aggiuntivo.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Questo metodo restituisce <see langword="true" /> se è necessario chiamare <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> quando una o più proprietà di questo oggetto vengono modificate; in caso contrario, restituisce <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">Recupera il gruppo di proprietà per questo tipo. Per impostazione predefinita, un tipo non restituisce alcuna proprietà.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> tramite il quale è possibile fornire un contesto aggiuntivo.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">Valore dell'oggetto per il quale ottenere le proprietà.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Matrice di oggetti <see cref="T:System.Attribute" /> che descrivono le proprietà.</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Insieme di proprietà che deve essere esposto per questo tipo di dati. Se non è necessario esporre alcuna proprietà, è possibile che venga restituito il valore <see langword="null" />. L'implementazione predefinita restituisce sempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">Determina se questo oggetto supporta proprietà. Per impostazione predefinita, tale valore è <see langword="false" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> tramite il quale è possibile fornire un contesto aggiuntivo.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Questo metodo restituisce <see langword="true" /> se è necessario chiamare <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> per trovare le proprietà di questo oggetto; in caso contrario, restituisce <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; class is used to convert from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; object.">La classe <see cref="T:System.Drawing.SizeConverter" /> viene utilizzata per eseguire conversioni da un tipo di dati all'altro. È possibile accedere a questa classe mediante l'oggetto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; object.">Inizializza un nuovo oggetto <see cref="T:System.Drawing.SizeConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether this converter can convert an object in the specified source type to the native type of the converter.">Determina se questo convertitore può convertire un oggetto del tipo di origine specificato nel tipo nativo del convertitore.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che può essere utilizzato per ottenere informazioni aggiuntive sull'ambiente da cui viene chiamato il convertitore. Poiché può essere <see langword="null" />, è sempre consigliabile eseguire un controllo. Anche le proprietà dell'oggetto contesto possono restituire <see langword="null" />.</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">Tipo da cui si vuole eseguire la conversione.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion.">Questo metodo restituisce <see langword="true" /> se l'oggetto è in grado di eseguire tale conversione.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">Ottiene un valore che indica se questo convertitore può convertire un oggetto nel tipo di destinazione specificato usando il contesto.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This can be &lt;see langword=&quot;null&quot; /&gt;, so always check. Also, properties on the context object can return &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che può essere utilizzato per ottenere informazioni aggiuntive sull'ambiente da cui viene chiamato il convertitore. Dal momento che può essere <see langword="null" />, è preferibile eseguire sempre un controllo. Anche le proprietà dell'oggetto di contesto possono restituire <see langword="null" />.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo in cui eseguire la conversione.</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Questo metodo restituisce <see langword="true" /> se il convertitore è in grado di eseguire la conversione, in caso contrario restituisce <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the converter's native type.">Converte l'oggetto specificato nel tipo nativo del convertitore.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che può essere utilizzato per ottenere informazioni aggiuntive sull'ambiente da cui viene chiamato il convertitore. Poiché può essere <see langword="null" />, è sempre consigliabile eseguire un controllo. Anche le proprietà dell'oggetto contesto possono restituire <see langword="null" />.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che contiene informazioni specifiche delle impostazioni cultura, ad esempio le convenzioni linguistiche, di calendario e culturali associate a determinate impostazioni cultura. Si basa sullo standard RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Oggetto da convertire.</param>
      <returns vsli:raw="The converted object.">Oggetto convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Non è possibile completare la conversione.</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">Converte l'oggetto specificato nel tipo indicato.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che può essere utilizzato per ottenere informazioni aggiuntive sull'ambiente da cui viene chiamato il convertitore. Poiché può essere <see langword="null" />, è sempre consigliabile eseguire un controllo. Anche le proprietà dell'oggetto contesto possono restituire <see langword="null" />.</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> che contiene informazioni specifiche delle impostazioni cultura, ad esempio le convenzioni linguistiche, di calendario e culturali associate a determinate impostazioni cultura. Si basa sullo standard RFC 1766.</param>
      <param name="value" vsli:raw="The object to convert.">Oggetto da convertire.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">Tipo in cui convertire l'oggetto.</param>
      <returns vsli:raw="The converted object.">Oggetto convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">Non è possibile completare la conversione.</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an object of this type by using a specified set of property values for the object. This is useful for creating non-changeable objects that have changeable properties.">Crea un oggetto di questo tipo, utilizzando un insieme specificato di valori di proprietà per l'oggetto. Questa operazione risulta utile per la creazione di oggetti non modificabili con proprietà modificabili.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptor" /> tramite il quale è possibile fornire un contesto aggiuntivo.</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">Dizionario dei nuovi valori delle proprietà. Il dizionario contiene una serie di coppie nome-valore, una per ciascuna proprietà restituita dal metodo <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">Nuovo oggetto creato oppure <see langword="null" />, se non è stato possibile creare l'oggetto. L'implementazione predefinita restituisce <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether changing a value on this object should require a call to the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method to create a new value.">Determina se la modifica di un valore su questo oggetto richiede una chiamata al metodo <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> per creare un nuovo valore.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptor" /> tramite il quale è possibile fornire un contesto aggiuntivo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; object should be called when a change is made to one or more properties of this object.">
        <see langword="true" /> se l'oggetto <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> deve essere chiamato quando viene apportata una modifica a una o più proprietà di questo oggetto.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not have any properties to return.">Recupera il gruppo di proprietà per questo tipo. Per impostazione predefinita, un tipo non dispone di proprietà da restituire.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptor" /> tramite il quale è possibile fornire un contesto aggiuntivo.</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">Valore dell'oggetto per il quale ottenere le proprietà.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Matrice di oggetti <see cref="T:System.Attribute" /> che descrivono le proprietà.</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Insieme di proprietà che deve essere esposto per questo tipo di dati. Se non è necessario esporre alcuna proprietà, è possibile che venga restituito il valore <see langword="null" />. L'implementazione predefinita restituisce sempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">Determina se questo oggetto supporta proprietà. Per impostazione predefinita, tale valore è <see langword="false" />.</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">Oggetto <see cref="T:System.ComponentModel.TypeDescriptor" /> tramite il quale è possibile fornire un contesto aggiuntivo.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method should be called to find the properties of this object.">
        <see langword="true" /> se il metodo <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> deve essere chiamato per trovare le proprietà di questo oggetto.</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary vsli:raw="Converts &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; objects from one type to another.">Converte gli oggetti <see cref="T:System.Drawing.SizeF" /> da un tipo all'altro.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Drawing.SizeFConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the converter can convert from the type specified to the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type, using the specified context.">Restituisce un valore che indica se il convertitore può convertire il tipo specificato nel tipo <see cref="T:System.Drawing.SizeF" /> utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> mediante il quale è possibile fornire un contesto aggiuntivo.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; the represents the type you wish to convert from.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo dal quale si desidera effettuare la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the conversion can be performed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per indicare che la conversione può essere eseguita; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; can convert a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; to the specified type.">Restituisce un valore che indica se la classe <see cref="T:System.Drawing.SizeFConverter" /> può convertire il tipo <see cref="T:System.Drawing.SizeF" /> nel tipo specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> mediante il quale è possibile fornire un contesto aggiuntivo.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo da cui eseguire la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questo convertitore può eseguire la conversione; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Converte l'oggetto indicato nel tipo di questo convertitore usando il contesto e le informazioni sulle impostazioni cultura specificati.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> da usare come impostazioni cultura correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">Converte l'oggetto valore indicato nel tipo specificato, usando il contesto e le informazioni sulle impostazioni cultura specificati.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If null is passed, the current culture is assumed.">Oggetto <see cref="T:System.Globalization.CultureInfo" />. Se viene passato null, verranno usate le impostazioni cultura correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">Oggetto <see cref="T:System.Type" /> in cui convertire il parametro del valore.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; with the specified property values using the specified context.">Crea un'istanza di un tipo <see cref="T:System.Drawing.SizeF" /> con i valori di proprietà specificati utilizzando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> mediante il quale è possibile fornire un contesto aggiuntivo.</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing property names and values.">Oggetto <see cref="T:System.Collections.IDictionary" /> contenente nomi e valori di proprietà.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the new &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created.">Oggetto <see cref="T:System.Object" /> che rappresenta il nuovo tipo <see cref="T:System.Drawing.SizeF" /> oppure <see langword="null" /> se non è possibile creare l'oggetto.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a value indicating whether changing a value on this object requires a call to the &lt;see cref=&quot;Overload:System.Drawing.SizeFConverter.CreateInstance&quot; /&gt; method to create a new value.">Restituisce un valore che indica se la modifica di un valore di questo oggetto richiede la chiamata al metodo <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" /> per creare un nuovo valore.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. This may be &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato. Può assumere il valore <see langword="null" />.</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">Restituisce sempre <see langword="true" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves a set of properties for the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type using the specified context and attributes.">Recupera un set di proprietà per il tipo <see cref="T:System.Drawing.SizeF" /> utilizzando il contesto e gli attributi specificati.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> mediante il quale è possibile fornire un contesto aggiuntivo.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to return properties for.">Classe <see cref="T:System.Object" /> per la quale restituire le proprietà.</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">Matrice di oggetti <see cref="T:System.Attribute" /> che descrivono le proprietà.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties.">Oggetto <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> che contiene le proprietà.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type supports properties.">Restituisce un valore che indica se il tipo <see cref="T:System.Drawing.SizeF" /> supporta delle proprietà.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> mediante il quale è possibile fornire un contesto aggiuntivo.</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">Restituisce sempre <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class represents the type converter for extended protection policy used by the server to validate incoming client connections.">La classe <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> rappresenta il convertitore di tipi per i criteri di protezione estesa utilizzati dal server per convalidare le connessioni client in ingresso.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" />.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">Indica se questo convertitore può convertire l'oggetto nel tipo specificato.</summary>
      <param name="context" vsli:raw="The object to convert.">Oggetto da convertire.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo in cui eseguire la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questo convertitore può eseguire la conversione. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Convert the object to the specified type.">Conversione dell'oggetto nel tipo specificato</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Oggetto <see cref="T:System.Globalization.CultureInfo" />. Se viene passato <see langword="null" />, verranno usate le impostazioni cultura correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This should be a &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot; /&gt; object.">Oggetto <see cref="T:System.Object" /> da convertire. Deve essere un oggetto <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">Oggetto <see cref="T:System.Type" /> in cui convertire il parametro del valore.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt; parameter.">Istanza di <see cref="T:System.Object" /> che rappresenta il parametro <paramref name="value" /> convertito.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="destinationType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">Fornisce dati per l'evento <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary vsli:raw="Gets the date/time when the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">Ottiene la data e l'ora in cui è stato generato l'evento <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <returns vsli:raw="The time the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">Ora in cui è stato generato l'evento <see cref="E:System.Timers.Timer.Elapsed" />.</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">Rappresenta il metodo che gestirà l'evento <see cref="E:System.Timers.Timer.Elapsed" /> di un oggetto <see cref="T:System.Timers.Timer" />.</summary>
      <param name="sender" vsli:raw="The source of the event.">Origine dell'evento.</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.Timers.ElapsedEventArgs&quot; /&gt; object that contains the event data.">Oggetto <see cref="T:System.Timers.ElapsedEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary vsli:raw="Generates an event after a set interval, with an option to generate recurring events.">Genera un evento dopo un intervallo specificato, con un'opzione per generare eventi ricorrenti.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets all the properties to their initial values.">Inizializza una nuova istanza della classe <see cref="T:System.Timers.Timer" /> e imposta tutte le proprietà sui rispettivi valori iniziali.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets the &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property to the specified number of milliseconds.">Inizializza una nuova istanza della classe <see cref="T:System.Timers.Timer" /> e imposta la proprietà <see cref="P:System.Timers.Timer.Interval" /> sul numero di millisecondi specificato.</summary>
      <param name="interval" vsli:raw="The time, in milliseconds, between events. The value must be greater than zero and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Tempo che intercorre tra gli eventi, in millisecondi. Il valore deve essere maggiore di zero e minore o uguale a <see cref="F:System.Int32.MaxValue" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The value of the &lt;paramref name=&quot;interval&quot; /&gt; parameter is less than or equal to zero, or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Il valore del parametro <paramref name="interval" /> è maggiore o uguale a zero oppure maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary vsli:raw="Gets or sets a Boolean indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once (&lt;see langword=&quot;false&quot; /&gt;) or repeatedly (&lt;see langword=&quot;true&quot; /&gt;).">Ottiene o imposta un valore booleano che indica se <see cref="T:System.Timers.Timer" /> deve generare l'evento <see cref="E:System.Timers.Timer.Elapsed" /> una sola volta (<see langword="false" />) o più volte (<see langword="true" />).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event each time the interval elapses; &lt;see langword=&quot;false&quot; /&gt; if it should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once, after the first time the interval elapses. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Timers.Timer" /> deve generare l'evento <see cref="E:System.Timers.Timer.Elapsed" /> allo scadere di ogni intervallo; <see langword="false" /> se deve generare l'evento <see cref="E:System.Timers.Timer.Elapsed" /> solo una volta, in corrispondenza della prima scadenza dell'intervallo. Il valore predefinito è <see langword="true" />.</returns>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary vsli:raw="Begins the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">Avvia l'inizializzazione in fase di esecuzione di un oggetto <see cref="T:System.Timers.Timer" /> usato in un form o da un altro componente.</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary vsli:raw="Releases the resources used by the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">Rilascia le risorse usate da <see cref="T:System.Timers.Timer" />.</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases all resources used by the current &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">Rilascia tutte le risorse usate dall'oggetto <see cref="T:System.Timers.Timer" /> corrente.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite, <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary vsli:raw="Occurs when the interval elapses.">Si verifica quando l'intervallo scade.</summary>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">Ottiene o imposta un valore che indica se <see cref="T:System.Timers.Timer" /> deve generare l'evento <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Timers.Timer" /> deve generare l'evento <see cref="E:System.Timers.Timer.Elapsed" />; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This property cannot be set because the timer has been disposed.">Non è possibile impostare questa proprietà perché il timer è stato eliminato.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property was set to a value greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; before the timer was enabled.">La proprietà <see cref="P:System.Timers.Timer.Interval" /> era impostata su un valore maggiore di <see cref="F:System.Int32.MaxValue" /> prima che sia stato abilitato il timer.</exception>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary vsli:raw="Ends the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">Termina l'inizializzazione in fase di esecuzione di un oggetto <see cref="T:System.Timers.Timer" /> usato in un form o da un altro componente.</summary>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary vsli:raw="Gets or sets the interval, expressed in milliseconds, at which to raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">Ottiene o imposta l'intervallo, espresso in millisecondi, in cui generare l'evento <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <returns vsli:raw="The time, in milliseconds, between &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; events. The value must be greater than zero, and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;. The default is 100 milliseconds.">Tempo tra gli eventi <see cref="E:System.Timers.Timer.Elapsed" />, in millisecondi. Il valore deve essere maggiore di zero e minore o uguale a <see cref="F:System.Int32.MaxValue" />. Il valore predefinito è 100 millisecondi.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The interval is less than or equal to zero.&#xA;&#xA; -or-&#xA;&#xA; The interval is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;, and the timer is currently enabled. (If the timer is not currently enabled, no exception is thrown until it becomes enabled.)">L'intervallo è minore o uguale a zero.  
-oppure- 
L'intervallo è più grande di <see cref="F:System.Int32.MaxValue" />e il timer è attualmente attivato. Non viene generata alcuna eccezione finché il timer non viene abilitato.</exception>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary vsli:raw="Gets or sets the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; to its container in design mode.">Ottiene o imposta il sito che associa l'oggetto <see cref="T:System.Timers.Timer" /> al contenitore in modalità progettazione.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface representing the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; object to its container.">Interfaccia <see cref="T:System.ComponentModel.ISite" /> che rappresenta il sito che associa l'oggetto <see cref="T:System.Timers.Timer" /> al contenitore.</returns>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary vsli:raw="Starts raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;.">Avvia la generazione dell'evento <see cref="E:System.Timers.Timer.Elapsed" /> impostando <see cref="P:System.Timers.Timer.Enabled" /> su <see langword="true" />.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; is created with an interval equal to or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; + 1, or set to an interval less than zero.">L'oggetto <see cref="T:System.Timers.Timer" /> viene creato con intervallo uguale o maggiore di <see cref="F:System.Int32.MaxValue" /> + 1 oppure viene impostato su un intervallo minore di zero.</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary vsli:raw="Stops raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">Arresta la generazione dell'evento <see cref="E:System.Timers.Timer.Elapsed" /> impostando <see cref="P:System.Timers.Timer.Enabled" /> su <see langword="false" />.</summary>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary vsli:raw="Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.">Ottiene o imposta l'oggetto usato per effettuare il marshalling delle chiamate del gestore eventi generate alla scadenza di un intervallo.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ISynchronizeInvoke&quot; /&gt; representing the object used to marshal the event-handler calls that are issued when an interval has elapsed. The default is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> che rappresenta l'oggetto usato per effettuare il marshalling delle chiamate del gestore eventi generate alla scadenza di un intervallo. Il valore predefinito è <see langword="null" />.</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary vsli:raw="Sets the description that visual designers can display when referencing an event, extender, or property.">Imposta la descrizione visualizzata dalle finestre di progettazione visiva quando si fa riferimento a un evento, a un'estensione o a una proprietà.</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.TimersDescriptionAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Timers.TimersDescriptionAttribute" />.</summary>
      <param name="description" vsli:raw="The description to use.">Descrizione da utilizzare.</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary vsli:raw="Gets the description that visual designers can display when referencing an event, extender, or property.">Ottiene la descrizione visualizzata dalle finestre di progettazione visiva quando si fa riferimento a un evento, a un'estensione o a una proprietà.</summary>
      <returns vsli:raw="The description for the event, extender, or property.">Descrizione dell'evento, dell'estensione o della proprietà.</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; type to a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type, and vice versa.">Converte un tipo <see cref="T:System.String" /> in un tipo <see cref="T:System.Uri" /> e viceversa.</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.UriTypeConverter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.UriTypeConverter" />.</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">Indica se questo convertitore può convertire un oggetto del tipo specificato nel tipo di questo convertitore.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert from.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo dal quale si desidera eseguire la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;sourceType&quot; /&gt; is a &lt;see cref=&quot;T:System.String&quot; /&gt; type or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type can be assigned from &lt;paramref name=&quot;sourceType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="sourceType" /> è di tipo <see cref="T:System.String" />, oppure se un tipo <see cref="T:System.Uri" /> può essere assegnato a partire dal tipo <paramref name="sourceType" />; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;sourceType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="sourceType" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">Restituisce un valore che indica se il convertitore può convertire l'oggetto nel tipo specificato usando il contesto specificato.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert to.">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo verso il quale si desidera effettuare la conversione.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;destinationType&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Uri&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="destinationType" /> è di tipo <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, <see cref="T:System.String" /> oppure <see cref="T:System.Uri" />. In caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">Converte l'oggetto indicato nel tipo di questo convertitore usando il contesto e le informazioni sulle impostazioni cultura specificati.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">Oggetto <see cref="T:System.Globalization.CultureInfo" /> da usare come impostazioni cultura correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a given value object to the specified type, using the specified context and culture information.">Converte l'oggetto specificato nel tipo di questo convertitore, utilizzando le informazioni sulle impostazioni cultura e il contesto specificati.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">Oggetto <see cref="T:System.Globalization.CultureInfo" />. Se viene passato <see langword="null" /> , verranno usate le impostazioni cultura correnti.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">Oggetto <see cref="T:System.Object" /> da convertire.</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <see cref="T:System.Type" /> in cui convertire il parametro <paramref name="value" />.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">Oggetto <see cref="T:System.Object" /> che rappresenta il valore convertito.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="destinationType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">Impossibile eseguire la conversione.</exception>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created from it.">Indica se l'oggetto valore specificato è una classe <see cref="T:System.Uri" /> oppure se è possibile creare una classe <see cref="T:System.Uri" /> a partire dal medesimo.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">Oggetto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> che fornisce un contesto di formato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">Oggetto <see cref="T:System.Object" /> di cui eseguire il test di validità.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.String&quot; /&gt; from which a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il parametro <paramref name="value" /> è di tipo <see cref="T:System.Uri" />, oppure se è un oggetto <see cref="T:System.String" /> da cui è possibile creare un oggetto <see cref="T:System.Uri" />; in caso contrario, <see langword="false" />.</returns>
    </member>
  </members>
</doc>
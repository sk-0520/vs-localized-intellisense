<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Linq.Queryable</name>
  </assembly>
  <members>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary vsli:raw="Represents an expression tree and provides functionality to execute the expression tree after rewriting it.">Rappresenta una struttura ad albero dell'espressione e fornisce la funzionalità per eseguire la struttura ad albero dell'espressione dopo la riscrittura.</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary vsli:raw="Represents an expression tree and provides functionality to execute the expression tree after rewriting it.">Rappresenta una struttura ad albero dell'espressione e fornisce la funzionalità per eseguire la struttura ad albero dell'espressione dopo la riscrittura.</summary>
      <typeparam name="T" vsli:raw="The data type of the value that results from executing the expression tree.">Tipo di dati del valore risultante dall'esecuzione della struttura ad albero dell'espressione.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.EnumerableExecutor`1&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Linq.EnumerableExecutor`1" />.</summary>
      <param name="expression" vsli:raw="An expression tree to associate with the new instance.">Struttura ad albero dell'espressione da associare alla nuova istanza.</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary vsli:raw="Represents an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; as an &lt;see cref=&quot;T:System.Linq.EnumerableQuery&quot; /&gt; data source.">Rappresenta un oggetto <see cref="T:System.Collections.IEnumerable" /> come origine dati <see cref="T:System.Linq.EnumerableQuery" />.</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary vsli:raw="Represents an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; collection as an &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; data source.">Rappresenta una raccolta <see cref="T:System.Collections.Generic.IEnumerable`1" /> come origine dati <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <typeparam name="T" vsli:raw="The type of the data in the collection.">Tipo di dati nella raccolta.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; class and associates it with an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; collection.">Inizializza una nuova istanza della classe <see cref="T:System.Linq.EnumerableQuery`1" /> e la associa a una raccolta <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="enumerable" vsli:raw="A collection to associate with the new instance.">Raccolta da associare alla nuova istanza.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; class and associates the instance with an expression tree.">Inizializza una nuova istanza della classe <see cref="T:System.Linq.EnumerableQuery`1" /> e associa l'istanza a una struttura ad albero dell'espressione.</summary>
      <param name="expression" vsli:raw="An expression tree to associate with the new instance.">Struttura ad albero dell'espressione da associare alla nuova istanza.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through the associated &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; data source and executing it.">Restituisce un enumeratore che può scorrere la raccolta <see cref="T:System.Collections.Generic.IEnumerable`1" /> associata o, se è null, può scorrere la raccolta risultante dalla riscrittura della struttura ad albero dell'espressione associata come query su un'origine dati <see cref="T:System.Collections.Generic.IEnumerable`1" /> e dalla relativa esecuzione.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the associated data source.">Enumeratore che può essere utilizzato per scorrere l'origine dati associata.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through the associated &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; data source and executing it.">Restituisce un enumeratore che può scorrere la raccolta <see cref="T:System.Collections.Generic.IEnumerable`1" /> associata o, se è null, può scorrere la raccolta risultante dalla riscrittura della struttura ad albero dell'espressione associata come query su un'origine dati <see cref="T:System.Collections.Generic.IEnumerable`1" /> e dalla relativa esecuzione.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the associated data source.">Enumeratore che può essere utilizzato per scorrere l'origine dati associata.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary vsli:raw="Gets the type of the data in the collection that this instance represents.">Ottiene il tipo di dati nella raccolta rappresentata da questa istanza.</summary>
      <returns vsli:raw="The type of the data in the collection that this instance represents.">Tipo di dati nella raccolta rappresentata da questa istanza.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary vsli:raw="Gets the expression tree that is associated with or that represents this instance.">Ottiene la struttura ad albero dell'espressione rappresentata da questa istanza o ad essa associata.</summary>
      <returns vsli:raw="The expression tree that is associated with or that represents this instance.">Struttura ad albero dell'espressione rappresentata da questa istanza o ad essa associata.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary vsli:raw="Gets the query provider that is associated with this instance.">Ottiene il provider di query associato a questa istanza.</summary>
      <returns vsli:raw="The query provider that is associated with this instance.">Provider di query associato a questa istanza.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; object and associates it with a specified expression tree that represents an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; collection of data.">Costruisce un nuovo oggetto <see cref="T:System.Linq.EnumerableQuery`1" /> e lo associa alla struttura ad albero dell'espressione specificata che rappresenta una raccolta <see cref="T:System.Linq.IQueryable" /> di dati.</summary>
      <param name="expression" vsli:raw="An expression tree that represents an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; collection of data.">Struttura ad albero dell'espressione che rappresenta una raccolta <see cref="T:System.Linq.IQueryable" /> di dati.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.EnumerableQuery`1&quot; /&gt; object that is associated with &lt;paramref name=&quot;expression&quot; /&gt;.">Oggetto <see cref="T:System.Linq.EnumerableQuery`1" /> associato a <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Costruisce un nuovo oggetto <see cref="T:System.Linq.EnumerableQuery`1" /> e lo associa alla struttura ad albero dell'espressione specificata che rappresenta una raccolta <see cref="T:System.Linq.IQueryable`1" /> di dati.</summary>
      <param name="expression">Struttura ad albero dell'espressione da eseguire.</param>
      <typeparam name="S">Tipo di dati nella raccolta rappresentata da <paramref name="expression" />.</typeparam>
      <returns>Oggetto EnumerableQuery associato a <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary vsli:raw="Executes an expression after rewriting it to call &lt;see cref=&quot;T:System.Linq.Enumerable&quot; /&gt; methods instead of &lt;see cref=&quot;T:System.Linq.Queryable&quot; /&gt; methods on any enumerable data sources that cannot be queried by &lt;see cref=&quot;T:System.Linq.Queryable&quot; /&gt; methods.">Esegue un'espressione dopo la riscrittura per chiamare i metodi <see cref="T:System.Linq.Enumerable" /> anziché i metodi <see cref="T:System.Linq.Queryable" /> su tutte le origini dati enumerabili su cui non è possibile eseguire una query mediante i metodi <see cref="T:System.Linq.Queryable" />.</summary>
      <param name="expression" vsli:raw="An expression tree to execute.">Struttura ad albero dell'espressione da eseguire.</param>
      <returns vsli:raw="The value that results from executing &lt;paramref name=&quot;expression&quot; /&gt;.">Valore risultante dall'esecuzione di <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>Esegue un'espressione dopo la riscrittura per chiamare i metodi <see cref="T:System.Linq.Enumerable" /> anziché i metodi <see cref="T:System.Linq.Queryable" /> su tutte le origini dati enumerabili su cui non è possibile eseguire una query mediante i metodi <see cref="T:System.Linq.Queryable" />.</summary>
      <param name="expression">Struttura ad albero dell'espressione da eseguire.</param>
      <typeparam name="S">Tipo di dati nella raccolta rappresentata da <paramref name="expression" />.</typeparam>
      <returns>Valore risultante dall'esecuzione di <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary vsli:raw="Returns a textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.">Restituisce una rappresentazione testuale della raccolta enumerabile o, se è null, della struttura ad albero dell'espressione associata a questa istanza.</summary>
      <returns vsli:raw="A textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.">Rappresentazione testuale della raccolta enumerabile o, se è null, della struttura ad albero dell'espressione associata a questa istanza.</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary vsli:raw="Provides a set of &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) methods for querying data structures that implement &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt;.">Fornisce un set di metodi <see langword="static" />(<see langword="Shared" /> in Visual Basic) per l'esecuzione di query su strutture dei dati che implementano <see cref="T:System.Linq.IQueryable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary vsli:raw="Applies an accumulator function over a sequence.">Applica una funzione accumulatore a una sequenza.</summary>
      <param name="source" vsli:raw="A sequence to aggregate over.">Una sequenza su cui aggregare.</param>
      <param name="func" vsli:raw="An accumulator function to apply to each element.">Una funzione accumulatore da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The final accumulator value.">Valore finale dell'accumulatore.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="func" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary vsli:raw="Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.">Applica una funzione accumulatore a una sequenza. Il valore di inizializzazione specificato viene usato come valore iniziale dell'accumulatore.</summary>
      <param name="source" vsli:raw="A sequence to aggregate over.">Una sequenza su cui aggregare.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Valore iniziale dell'accumulatore.</param>
      <param name="func" vsli:raw="An accumulator function to invoke on each element.">Una funzione accumulatore da richiamare per ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulator value.">Tipo del valore dell'accumulatore.</typeparam>
      <returns vsli:raw="The final accumulator value.">Valore finale dell'accumulatore.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="func" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary vsli:raw="Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.">Applica una funzione accumulatore a una sequenza. Il valore di inizializzazione specificato viene usato come valore iniziale dell'accumulatore e la funzione specificata viene usata per selezionare il valore risultante.</summary>
      <param name="source" vsli:raw="A sequence to aggregate over.">Una sequenza su cui aggregare.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Valore iniziale dell'accumulatore.</param>
      <param name="func" vsli:raw="An accumulator function to invoke on each element.">Una funzione accumulatore da richiamare per ogni elemento.</param>
      <param name="selector" vsli:raw="A function to transform the final accumulator value into the result value.">Una funzione per trasformare il valore finale dell'accumulatore nel valore risultante.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulator value.">Tipo del valore dell'accumulatore.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the resulting value.">Il tipo del valore risultante.</typeparam>
      <returns vsli:raw="The transformed final accumulator value.">Il valore finale trasformato dell'accumulatore.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;func&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Il parametro <paramref name="source" />, il parametro <paramref name="func" /> o il parametro <paramref name="selector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Determines whether all the elements of a sequence satisfy a condition.">Determina se tutti gli elementi di una sequenza soddisfano una condizione.</summary>
      <param name="source" vsli:raw="A sequence whose elements to test for a condition.">Una sequenza i cui elementi sono da testare rispetto a una condizione.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se ogni elemento della sequenza di origine supera il test per il predicato specificato o se la sequenza è vuota; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Determines whether a sequence contains any elements.">Determina se una sequenza contiene elementi.</summary>
      <param name="source" vsli:raw="A sequence to check for being empty.">Una sequenza da verificare per controllare se è vuota.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source sequence contains any elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la sequenza di origine contiene elementi; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Determines whether any element of a sequence satisfies a condition.">Determina un qualsiasi elemento di una sequenza soddisfa una condizione.</summary>
      <param name="source" vsli:raw="A sequence whose elements to test for a condition.">Una sequenza i cui elementi sono da testare rispetto a una condizione.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any elements in the source sequence pass the test in the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se gli elementi nella sequenza di origine superano il test per il predicato specificato; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Append``1(System.Linq.IQueryable{``0},``0)">
      <param name="source" vsli:raw="A queryable sequence." />
      <param name="element" vsli:raw="An element of type &lt;typeparamref name=&quot;TSource&quot; /&gt; to append to &lt;paramref name=&quot;source&quot; /&gt;." />
      <typeparam name="TSource" vsli:raw="The type of the elements in the queryable sequence." />
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary vsli:raw="Converts an &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; to an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt;.">Converte un oggetto <see cref="T:System.Collections.IEnumerable" /> in un oggetto <see cref="T:System.Linq.IQueryable" />.</summary>
      <param name="source" vsli:raw="A sequence to convert.">Sequenza da convertire.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; that represents the input sequence.">Un oggetto <see cref="T:System.Linq.IQueryable" /> che rappresenta la sequenza di input.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; does not implement &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; for some &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="source" /> non implementa <see cref="T:System.Collections.Generic.IEnumerable`1" /> per qualche <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Converts a generic &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; to a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt;.">Converte un generico oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> in un generico oggetto <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <param name="source" vsli:raw="A sequence to convert.">Sequenza da convertire.</param>
      <typeparam name="TElement" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that represents the input sequence.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> che rappresenta la sequenza di input.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Calcola la media di una sequenza di valori <see cref="T:System.Decimal" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the average of.">Sequenza di valori <see cref="T:System.Decimal" /> di cui calcolare la media.</param>
      <returns vsli:raw="The average of the sequence of values.">Media della sequenza dei valori.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Calcola la media di una sequenza di valori <see cref="T:System.Double" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the average of.">Sequenza di valori <see cref="T:System.Double" /> di cui calcolare la media.</param>
      <returns vsli:raw="The average of the sequence of values.">Media della sequenza dei valori.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Calcola la media di una sequenza di valori <see cref="T:System.Int32" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the average of.">Sequenza di valori <see cref="T:System.Int32" /> di cui calcolare la media.</param>
      <returns vsli:raw="The average of the sequence of values.">Media della sequenza dei valori.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Calcola la media di una sequenza di valori <see cref="T:System.Int64" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the average of.">Sequenza di valori <see cref="T:System.Int64" /> di cui calcolare la media.</param>
      <returns vsli:raw="The average of the sequence of values.">Media della sequenza dei valori.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Calcola la media di una sequenza di valori <see cref="T:System.Decimal" /> nullable.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the average of.">Sequenza di valori <see cref="T:System.Decimal" /> nullable di cui calcolare la media.</param>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Media della sequenza di valori o <see langword="null" /> se la sequenza di origine è vuota o contiene solo valori <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Calcola la media di una sequenza di valori <see cref="T:System.Double" /> nullable.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the average of.">Sequenza di valori <see cref="T:System.Double" /> nullable di cui calcolare la media.</param>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Media della sequenza di valori o <see langword="null" /> se la sequenza di origine è vuota o contiene solo valori <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Calcola la media di una sequenza di valori <see cref="T:System.Int32" /> nullable.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the average of.">Sequenza di valori <see cref="T:System.Int32" /> nullable di cui calcolare la media.</param>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Media della sequenza di valori o <see langword="null" /> se la sequenza di origine è vuota o contiene solo valori <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Calcola la media di una sequenza di valori <see cref="T:System.Int64" /> nullable.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the average of.">Sequenza di valori <see cref="T:System.Int64" /> nullable di cui calcolare la media.</param>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Media della sequenza di valori o <see langword="null" /> se la sequenza di origine è vuota o contiene solo valori <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Calcola la media di una sequenza di valori <see cref="T:System.Single" /> nullable.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the average of.">Sequenza di valori <see cref="T:System.Single" /> nullable di cui calcolare la media.</param>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the source sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Media della sequenza di valori o <see langword="null" /> se la sequenza di origine è vuota o contiene solo valori <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Calcola la media di una sequenza di valori <see cref="T:System.Single" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the average of.">Sequenza di valori <see cref="T:System.Single" /> di cui calcolare la media.</param>
      <returns vsli:raw="The average of the sequence of values.">Media della sequenza dei valori.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la media di una sequenza di valori <see cref="T:System.Decimal" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values that are used to calculate an average.">Una sequenza di valori usata per calcolare una media.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values.">Media della sequenza dei valori.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la media di una sequenza di valori <see cref="T:System.Double" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values.">Media della sequenza dei valori.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la media di una sequenza di valori <see cref="T:System.Int32" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values.">Media della sequenza dei valori.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la media di una sequenza di valori <see cref="T:System.Int64" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values.">Media della sequenza dei valori.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la media di una sequenza che ammette valori <see cref="T:System.Decimal" /> NULL, ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Media della sequenza di valori; <see langword="null" /> se la sequenza <paramref name="source" /> è vuota o contiene solo valori <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la media di una sequenza che ammette valori <see cref="T:System.Double" /> NULL, ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Media della sequenza di valori; <see langword="null" /> se la sequenza <paramref name="source" /> è vuota o contiene solo valori <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la media di una sequenza che ammette valori <see cref="T:System.Int32" /> NULL, ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Media della sequenza di valori; <see langword="null" /> se la sequenza <paramref name="source" /> è vuota o contiene solo valori <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la media di una sequenza che ammette valori <see cref="T:System.Int64" /> NULL, ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Media della sequenza di valori; <see langword="null" /> se la sequenza <paramref name="source" /> è vuota o contiene solo valori <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary vsli:raw="Computes the average of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la media di una sequenza che ammette valori <see cref="T:System.Single" /> NULL, ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;paramref name=&quot;source&quot; /&gt; sequence is empty or contains only &lt;see langword=&quot;null&quot; /&gt; values.">Media della sequenza di valori; <see langword="null" /> se la sequenza <paramref name="source" /> è vuota o contiene solo valori <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary vsli:raw="Computes the average of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la media di una sequenza di valori <see cref="T:System.Single" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values to calculate the average of.">Sequenza di valori di cui calcolare la media.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The average of the sequence of values.">Media della sequenza dei valori.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains no elements.">
        <paramref name="source" /> non contiene elementi.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary vsli:raw="Converts the elements of an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; to the specified type.">Converte gli elementi di un oggetto <see cref="T:System.Linq.IQueryable" /> nel tipo specificato.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; that contains the elements to be converted.">Oggetto <see cref="T:System.Linq.IQueryable" /> che contiene gli elementi da convertire.</param>
      <typeparam name="TResult" vsli:raw="The type to convert the elements of &lt;paramref name=&quot;source&quot; /&gt; to.">Tipo in cui convertire gli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains each element of the source sequence converted to the specified type.">
        <see cref="T:System.Linq.IQueryable`1" /> che contiene ogni elemento della sequenza di origine convertito nel tipo specificato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="An element in the sequence cannot be cast to type &lt;paramref name=&quot;TResult&quot; /&gt;.">Non è possibile eseguire il cast di un elemento della sequenza al tipo <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Concatenates two sequences.">Concatena due sequenze.</summary>
      <param name="source1" vsli:raw="The first sequence to concatenate.">Prima sequenza da concatenare.</param>
      <param name="source2" vsli:raw="The sequence to concatenate to the first sequence.">Sequenza da concatenare alla prima sequenza.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo degli elementi delle sequenze di input.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the concatenated elements of the two input sequences.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi concatenati delle due sequenze di input.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary vsli:raw="Determines whether a sequence contains a specified element by using the default equality comparer.">Determina se una sequenza contiene uno specifico elemento utilizzando l'operatore di confronto uguaglianze predefinito.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; in which to locate &lt;paramref name=&quot;item&quot; /&gt;.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> in cui individuare <paramref name="item" />.</param>
      <param name="item" vsli:raw="The object to locate in the sequence.">Oggetto da individuare nella sequenza.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input sequence contains an element that has the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la sequenza di input contiene un elemento con il valore specificato; altrimenti, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Determines whether a sequence contains a specified element by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Determina se una sequenza contiene un elemento specificato utilizzando un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; in which to locate &lt;paramref name=&quot;item&quot; /&gt;.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> in cui individuare <paramref name="item" />.</param>
      <param name="item" vsli:raw="The object to locate in the sequence.">Oggetto da individuare nella sequenza.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input sequence contains an element that has the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la sequenza di input contiene un elemento con il valore specificato; altrimenti, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the number of elements in a sequence.">Restituisce il numero di elementi in una sequenza.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements to be counted.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi da contare.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The number of elements in the input sequence.">Numero di elementi nella sequenza di input.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt; is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Il numero di elementi in <paramref name="source" /> è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the number of elements in the specified sequence that satisfies a condition.">Restituisce il numero di elementi nella sequenza specificata che soddisfano una condizione.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements to be counted.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi da contare.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The number of elements in the sequence that satisfies the condition in the predicate function.">Il numero di elementi nella sequenza che soddisfa la condizione nella funzione predicativa.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt; is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Il numero di elementi in <paramref name="source" /> è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.">Restituisce gli elementi della sequenza specificata o il valore predefinito del parametro di tipo in una raccolta di singleton se la sequenza è vuota.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return a default value for if empty.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> per il quale restituire un valore predefinito se vuoto.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains &lt;see langword=&quot;default&quot; /&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, &lt;paramref name=&quot;source&quot; /&gt;.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene <see langword="default" />(<paramref name="TSource" />) se <paramref name="source" /> è vuoto; in caso contrario, <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary vsli:raw="Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.">Restituisce gli elementi della sequenza specificata o il valore specificato in una raccolta di singleton se la sequenza è vuota.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the specified value for if empty.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> per il quale restituire il valore specificato se vuoto.</param>
      <param name="defaultValue" vsli:raw="The value to return if the sequence is empty.">Valore da restituire se la sequenza è vuota.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains &lt;paramref name=&quot;defaultValue&quot; /&gt; if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, &lt;paramref name=&quot;source&quot; /&gt;.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene <paramref name="defaultValue" /> se <paramref name="source" /> è vuota; in caso contrario, <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns distinct elements from a sequence by using the default equality comparer to compare values.">Restituisce elementi distinti da una sequenza utilizzando l'operatore di confronto uguaglianze predefinito per confrontare i valori.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to remove duplicates from.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> da cui rimuovere i duplicati.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains distinct elements from &lt;paramref name=&quot;source&quot; /&gt;.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi distinti da <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Returns distinct elements from a sequence by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Restituisce elementi distinti da una sequenza utilizzando uno specificato <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare valori.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to remove duplicates from.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> da cui rimuovere i duplicati.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains distinct elements from &lt;paramref name=&quot;source&quot; /&gt;.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi distinti da <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="comparer" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence.">Restituisce l'elemento in corrispondenza dell’indice specificato in una sequenza.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire un elemento.</param>
      <param name="index" vsli:raw="The zero-based index of the element to retrieve.">Indice in base zero dell'elemento da recuperare.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The element at the specified position in &lt;paramref name=&quot;source&quot; /&gt;.">L’elemento alla posizione specificata in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> è minore di zero.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence or a default value if the index is out of range.">Restituisce l'elemento in corrispondenza di un indice specificato in una sequenza o un valore predefinito se l'indice è esterno all'intervallo.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire un elemento.</param>
      <param name="index" vsli:raw="The zero-based index of the element to retrieve.">Indice in base zero dell'elemento da recuperare.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;index&quot; /&gt; is outside the bounds of &lt;paramref name=&quot;source&quot; /&gt;; otherwise, the element at the specified position in &lt;paramref name=&quot;source&quot; /&gt;.">
        <c>default</c>(<paramref name="TSource" />) se <paramref name="index" /> è esterno ai limiti di <paramref name="source" />, in caso contrario l'elemento nella posizione specificata in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set difference of two sequences by using the default equality comparer to compare values.">Produce la differenza insiemistica di due sequenze utilizzando l'operatore di confronto eguaglianze predefinito per confrontare i valori.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements that are not also in &lt;paramref name=&quot;source2&quot; /&gt; will be returned.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui saranno restituiti gli elementi che non sono presenti anche in <paramref name="source2" />.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements that also occur in the first sequence will not appear in the returned sequence.">Un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi che sono presenti anche nella prima sequenza non saranno visualizzati nella sequenza restituita.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo degli elementi delle sequenze di input.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the set difference of the two sequences.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene la differenza insiemistica delle due sequenze.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set difference of two sequences by using the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Produce la differenza insiemistica delle due sequenze utilizzando l’oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato per confrontare i valori.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements that are not also in &lt;paramref name=&quot;source2&quot; /&gt; will be returned.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui saranno restituiti gli elementi che non sono presenti anche in <paramref name="source2" />.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements that also occur in the first sequence will not appear in the returned sequence.">Un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi che sono presenti anche nella prima sequenza non saranno visualizzati nella sequenza restituita.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo degli elementi delle sequenze di input.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the set difference of the two sequences.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene la differenza insiemistica delle due sequenze.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the first element of a sequence.">Restituisce il primo elemento di una sequenza.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the first element of.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui restituire il primo elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The first element in &lt;paramref name=&quot;source&quot; /&gt;.">Il primo elemento in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source sequence is empty.">La sequenza di origine è vuota.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the first element of a sequence that satisfies a specified condition.">Restituisce il primo elemento di una sequenza che soddisfa una condizione specificata.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire un elemento.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The first element in &lt;paramref name=&quot;source&quot; /&gt; that passes the test in &lt;paramref name=&quot;predicate&quot; /&gt;.">Il primo elemento in <paramref name="source" /> che passa il test rispetto a <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Nessun elemento soddisfa la condizione in <paramref name="predicate" />.  
In alternativa 
La sequenza di origine è vuota.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the first element of a sequence, or a default value if the sequence contains no elements.">Restituisce il primo elemento di una sequenza o un valore predefinito se la sequenza non contiene elementi.</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the first element of.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui restituire il primo elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, the first element in &lt;paramref name=&quot;source&quot; /&gt;.">
        <c>default</c>(<paramref name="TSource" />) se <paramref name="source" /> è vuota, in caso contrario il primo elemento di <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.">Restituisce il primo elemento di una sequenza che soddisfa una condizione specificata o un valore predefinito se un tale elemento non viene trovato.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire un elemento.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty or if no element passes the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;; otherwise, the first element in &lt;paramref name=&quot;source&quot; /&gt; that passes the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">
        <c>default</c>(<paramref name="TSource" />) se <paramref name="source" /> è vuota o nessun elemento supera il test specificato da <paramref name="predicate" />, in caso contrario, il primo elemento di <paramref name="source" /> che supera il test specificato da <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function.">Raggruppa gli elementi di una sequenza secondo una specificata funzione del selettore principale.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Funzione per estrarre la chiave per ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo della chiave restituita dalla funzione rappresentata nell'oggetto <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;c&gt;IQueryable&amp;lt;IGrouping&amp;lt;TKey, TSource&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IQueryable(Of IGrouping(Of TKey, TSource))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; object contains a sequence of objects and a key.">Elemento <c>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# o <c>IQueryable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic in cui ogni oggetto <see cref="T:System.Linq.IGrouping`2" /> contiene una sequenza di oggetti e una chiave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.">Raggruppa gli elementi di una sequenza secondo una specificata funzione del selettore principale e confronta le chiavi utilizzando un operatore di confronto specificato.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo della chiave restituita dalla funzione rappresentata nell'oggetto <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;c&gt;IQueryable&amp;lt;IGrouping&amp;lt;TKey, TSource&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IQueryable(Of IGrouping(Of TKey, TSource))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; contains a sequence of objects and a key.">Elemento <c>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# o <c>IQueryable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic in cui ogni oggetto <see cref="T:System.Linq.IGrouping`2" /> contiene una sequenza di oggetti e una chiave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Il parametro <paramref name="source" />, il parametro <paramref name="keySelector" /> o il parametro <paramref name="comparer" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.">Raggruppa gli elementi di una sequenza in base a una funzione specificata del selettore principale e proietta gli elementi di ogni gruppo utilizzando una funzione specificata.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Funzione per eseguire il mapping di ogni elemento di origine a un elemento in un oggetto <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo della chiave restituita dalla funzione rappresentata nell'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Tipo degli elementi contenuti in ciascun oggetto <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <returns vsli:raw="An &lt;c&gt;IQueryable&amp;lt;IGrouping&amp;lt;TKey, TElement&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IQueryable(Of IGrouping(Of TKey, TElement))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; contains a sequence of objects of type &lt;paramref name=&quot;TElement&quot; /&gt; and a key.">Elemento <c>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# o <c>IQueryable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic in cui ogni oggetto <see cref="T:System.Linq.IGrouping`2" /> contiene una sequenza di oggetti di tipo <paramref name="TElement" /> e una chiave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Il parametro <paramref name="source" />, il parametro <paramref name="keySelector" /> o il parametro <paramref name="elementSelector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.">Raggruppa gli elementi di una sequenza e proietta gli elementi di ogni gruppo utilizzando una funzione specificata. I valori chiave vengono confrontati utilizzando un operatore di confronto specificato.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Funzione per eseguire il mapping di ogni elemento di origine a un elemento in un oggetto <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo della chiave restituita dalla funzione rappresentata nell'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Tipo degli elementi contenuti in ciascun oggetto <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <returns vsli:raw="An &lt;c&gt;IQueryable&amp;lt;IGrouping&amp;lt;TKey, TElement&amp;gt;&amp;gt;&lt;/c&gt; in C# or &lt;c&gt;IQueryable(Of IGrouping(Of TKey, TElement))&lt;/c&gt; in Visual Basic where each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt; contains a sequence of objects of type &lt;paramref name=&quot;TElement&quot; /&gt; and a key.">Elemento <c>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# o <c>IQueryable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic in cui ogni oggetto <see cref="T:System.Linq.IGrouping`2" /> contiene una sequenza di oggetti di tipo <paramref name="TElement" /> e una chiave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> o <paramref name="comparer" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.">Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Funzione per creare un valore di risultato da ogni gruppo.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo della chiave restituita dalla funzione rappresentata nell'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Tipo del valore restituito dall'oggetto <paramref name="resultSelector" />.</typeparam>
      <returns vsli:raw="An &lt;c&gt;T:System.Linq.IQueryable`1&lt;/c&gt; that has a type argument of &lt;paramref name=&quot;TResult&quot; /&gt; and where each element represents a projection over a group and its key.">Oggetto <c>T:System.Linq.IQueryable`1</c> che ha un argomento di tipo <paramref name="TResult" /> e in cui ogni elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Il parametro <paramref name="source" />, il parametro <paramref name="keySelector" /> o il parametro <paramref name="resultSelector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.">Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave. Le chiavi vengono confrontate utilizzando un operatore di confronto specificato.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Funzione per creare un valore di risultato da ogni gruppo.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo della chiave restituita dalla funzione rappresentata nell'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Tipo del valore restituito dall'oggetto <paramref name="resultSelector" />.</typeparam>
      <returns vsli:raw="An &lt;c&gt;T:System.Linq.IQueryable`1&lt;/c&gt; that has a type argument of &lt;paramref name=&quot;TResult&quot; /&gt; and where each element represents a projection over a group and its key.">Oggetto <c>T:System.Linq.IQueryable`1</c> che ha un argomento di tipo <paramref name="TResult" /> e in cui ogni elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="resultSelector" /> o <paramref name="comparer" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.">Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave. Gli elementi di ogni gruppo vengono proiettati usando una funzione specificata.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Funzione per eseguire il mapping di ogni elemento di origine a un elemento in un oggetto <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Funzione per creare un valore di risultato da ogni gruppo.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo della chiave restituita dalla funzione rappresentata nell'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Tipo degli elementi contenuti in ciascun oggetto <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Tipo del valore restituito dall'oggetto <paramref name="resultSelector" />.</typeparam>
      <returns vsli:raw="An &lt;c&gt;T:System.Linq.IQueryable`1&lt;/c&gt; that has a type argument of &lt;paramref name=&quot;TResult&quot; /&gt; and where each element represents a projection over a group and its key.">Oggetto <c>T:System.Linq.IQueryable`1</c> che ha un argomento di tipo <paramref name="TResult" /> e in cui ogni elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> o <paramref name="resultSelector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.">Raggruppa gli elementi di una sequenza in base a una funzione del selettore principale specificata e crea un valore risultante da ciascun gruppo e relativa chiave. Le chiavi sono confrontate utilizzando un operatore di confronto specificato e gli elementi di ogni gruppo vengono proiettati utilizzando una funzione specificata.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to group.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono da raggruppare.</param>
      <param name="keySelector" vsli:raw="A function to extract the key for each element.">Funzione per estrarre la chiave per ogni elemento.</param>
      <param name="elementSelector" vsli:raw="A function to map each source element to an element in an &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Funzione per eseguire il mapping di ogni elemento di origine a un elemento in un oggetto <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector" vsli:raw="A function to create a result value from each group.">Funzione per creare un valore di risultato da ogni gruppo.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare keys.">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented in &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo della chiave restituita dalla funzione rappresentata nell'oggetto <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the elements in each &lt;see cref=&quot;T:System.Linq.IGrouping`2&quot; /&gt;.">Tipo degli elementi contenuti in ciascun oggetto <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result value returned by &lt;paramref name=&quot;resultSelector&quot; /&gt;.">Tipo del valore restituito dall'oggetto <paramref name="resultSelector" />.</typeparam>
      <returns vsli:raw="An &lt;c&gt;T:System.Linq.IQueryable`1&lt;/c&gt; that has a type argument of &lt;paramref name=&quot;TResult&quot; /&gt; and where each element represents a projection over a group and its key.">Oggetto <c>T:System.Linq.IQueryable`1</c> che ha un argomento di tipo <paramref name="TResult" /> e in cui ogni elemento rappresenta una proiezione su un gruppo e sulla relativa chiave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;elementSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> o <paramref name="elementSelector" /> o <paramref name="resultSelector" /> o <paramref name="comparer" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary vsli:raw="Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.">Correla gli elementi di due sequenze in base all'uguaglianza delle chiavi e raggruppa i risultati. Per confrontare le chiavi viene usato l'operatore di confronto uguaglianze predefinito.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Prima sequenza da unire.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Sequenza da unire alla prima sequenza.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.">Funzione per creare un elemento di risultato da un elemento dalla prima sequenza e una raccolta di elementi corrispondenti dalla seconda sequenza.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Tipo delle chiavi restituite dalle funzioni del selettore principale.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Tipo degli elementi di risultato.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements of type &lt;paramref name=&quot;TResult&quot; /&gt; obtained by performing a grouped join on two sequences.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un'aggiunta raggruppata delle due sequenze.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Correlates the elements of two sequences based on key equality and groups the results. A specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; is used to compare keys.">Correla gli elementi di due sequenze in base all'uguaglianza delle chiavi e raggruppa i risultati. Per confrontare le chiavi, viene usato un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Prima sequenza da unire.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Sequenza da unire alla prima sequenza.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.">Funzione per creare un elemento di risultato da un elemento dalla prima sequenza e una raccolta di elementi corrispondenti dalla seconda sequenza.</param>
      <param name="comparer" vsli:raw="A comparer to hash and compare keys.">Un operatore di confronto per la codifica hash e il confronto delle chiavi.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Tipo delle chiavi restituite dalle funzioni del selettore principale.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Tipo degli elementi di risultato.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements of type &lt;paramref name=&quot;TResult&quot; /&gt; obtained by performing a grouped join on two sequences.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un'aggiunta raggruppata delle due sequenze.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set intersection of two sequences by using the default equality comparer to compare values.">Produce l’intersezione insiemistica di due sequenze utilizzando l'operatore di confronto uguaglianze predefinito per confrontare i valori.</summary>
      <param name="source1" vsli:raw="A sequence whose distinct elements that also appear in &lt;paramref name=&quot;source2&quot; /&gt; are returned.">Una sequenza di cui vengono restituiti gli elementi distinti presenti anche in <paramref name="source2" />.</param>
      <param name="source2" vsli:raw="A sequence whose distinct elements that also appear in the first sequence are returned.">Una sequenza di cui vengono restituiti gli elementi distinti presenti anche nella prima sequenza.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo degli elementi delle sequenze di input.</typeparam>
      <returns vsli:raw="A sequence that contains the set intersection of the two sequences.">Una sequenza che contiene l'intersezione insiemistica delle due sequenze.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set intersection of two sequences by using the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Produce l’intersezione insiemistica delle due sequenze utilizzando l’oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato per confrontare i valori.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose distinct elements that also appear in &lt;paramref name=&quot;source2&quot; /&gt; are returned.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui vengono restituiti gli elementi distinti che sono presenti anche in <paramref name="source2" />.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose distinct elements that also appear in the first sequence are returned.">Un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> di cui vengono restituiti gli elementi distinti presenti anche nella prima sequenza.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo degli elementi delle sequenze di input.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the set intersection of the two sequences.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene l’intersezione insiemistica delle due sequenze.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary vsli:raw="Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.">Correla gli elementi di due sequenze in base alle chiavi corrispondenti. Per confrontare le chiavi viene usato l'operatore di confronto uguaglianze predefinito.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Prima sequenza da unire.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Sequenza da unire alla prima sequenza.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from two matching elements.">Funzione per creare un elemento di risultato da due elementi corrispondenti.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Tipo delle chiavi restituite dalle funzioni del selettore principale.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Tipo degli elementi di risultato.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that has elements of type &lt;paramref name=&quot;TResult&quot; /&gt; obtained by performing an inner join on two sequences.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un inner join sulle due sequenze.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Correlates the elements of two sequences based on matching keys. A specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; is used to compare keys.">Correla gli elementi di due sequenze in base alle chiavi corrispondenti. Per confrontare le chiavi, viene usato un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato.</summary>
      <param name="outer" vsli:raw="The first sequence to join.">Prima sequenza da unire.</param>
      <param name="inner" vsli:raw="The sequence to join to the first sequence.">Sequenza da unire alla prima sequenza.</param>
      <param name="outerKeySelector" vsli:raw="A function to extract the join key from each element of the first sequence.">Funzione per estrarre la chiave di aggiunta da ogni elemento della prima sequenza.</param>
      <param name="innerKeySelector" vsli:raw="A function to extract the join key from each element of the second sequence.">Funzione per estrarre la chiave di aggiunta da ogni elemento della seconda sequenza.</param>
      <param name="resultSelector" vsli:raw="A function to create a result element from two matching elements.">Funzione per creare un elemento di risultato da due elementi corrispondenti.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to hash and compare keys.">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per la codifica hash e il confronto delle chiavi.</param>
      <typeparam name="TOuter" vsli:raw="The type of the elements of the first sequence.">Tipo degli elementi della prima sequenza.</typeparam>
      <typeparam name="TInner" vsli:raw="The type of the elements of the second sequence.">Tipo degli elementi della seconda sequenza.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys returned by the key selector functions.">Tipo delle chiavi restituite dalle funzioni del selettore principale.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result elements.">Tipo degli elementi di risultato.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that has elements of type &lt;paramref name=&quot;TResult&quot; /&gt; obtained by performing an inner join on two sequences.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi di tipo <paramref name="TResult" /> ottenuti eseguendo un inner join sulle due sequenze.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;outer&quot; /&gt; or &lt;paramref name=&quot;inner&quot; /&gt; or &lt;paramref name=&quot;outerKeySelector&quot; /&gt; or &lt;paramref name=&quot;innerKeySelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="outer" /> o <paramref name="inner" /> o <paramref name="outerKeySelector" /> o <paramref name="innerKeySelector" /> o <paramref name="resultSelector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the last element in a sequence.">Restituisce l'ultimo elemento in una sequenza.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the last element of.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui restituire l’ultimo elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The value at the last position in &lt;paramref name=&quot;source&quot; /&gt;.">Il valore dell’ultima posizione in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source sequence is empty.">La sequenza di origine è vuota.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a specified condition.">Restituisce l'ultimo elemento di una sequenza che soddisfa una condizione specificata.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire un elemento.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The last element in &lt;paramref name=&quot;source&quot; /&gt; that passes the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">L'ultimo elemento in <paramref name="source" /> che supera il test specificato da <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Nessun elemento soddisfa la condizione in <paramref name="predicate" />.  
In alternativa 
La sequenza di origine è vuota.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the last element in a sequence, or a default value if the sequence contains no elements.">Restituisce l’ultimo elemento in una sequenza o un valore predefinito se la sequenza non contiene elementi.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the last element of.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui restituire l’ultimo elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty; otherwise, the last element in &lt;paramref name=&quot;source&quot; /&gt;.">
        <c>default</c>(<paramref name="TSource" />) se <paramref name="source" /> è vuota, in caso contrario l'ultimo elemento di <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.">Restituisce l'ultimo elemento di una sequenza che soddisfa una condizione specificata o un valore predefinito se tale elemento non viene trovato.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return an element from.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire un elemento.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="&lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if &lt;paramref name=&quot;source&quot; /&gt; is empty or if no elements pass the test in the predicate function; otherwise, the last element of &lt;paramref name=&quot;source&quot; /&gt; that passes the test in the predicate function.">
        <c>default</c>(<paramref name="TSource" />) se <paramref name="source" /> è vuota o nessun elemento supera il test nella funzione predicato, in caso contrario, l'ultimo elemento di <paramref name="source" /> che supera il test nella funzione predicato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Int64&quot; /&gt; that represents the total number of elements in a sequence.">Restituisce un oggetto <see cref="T:System.Int64" /> che rappresenta il numero totale di elementi in una sequenza.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements to be counted.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi da contare.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt;.">Numero di elementi in <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of elements exceeds &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Il numero di elementi è maggiore di <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Int64&quot; /&gt; that represents the number of elements in a sequence that satisfy a condition.">Restituisce un oggetto <see cref="T:System.Int64" /> che rappresenta il numero di elementi in una sequenza che soddisfano una condizione.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements to be counted.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi da contare.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The number of elements in &lt;paramref name=&quot;source&quot; /&gt; that satisfy the condition in the predicate function.">Il numero di elementi in <paramref name="source" /> che soddisfa la condizione nella funzione predicativa.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The number of matching elements exceeds &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">Il numero di elementi corrispondenti è maggiore di <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the maximum value in a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt;.">Restituisce il valore massimo di un generico oggetto <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum of.">Una sequenza di valori della quale determinare il massimo.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The maximum value in the sequence.">Valore massimo della sequenza.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Invokes a projection function on each element of a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; and returns the maximum resulting value.">Richiama una funzione di proiezione su ogni elemento di un generico oggetto <see cref="T:System.Linq.IQueryable`1" /> e restituisce il valore massimo risultante.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the maximum of.">Una sequenza di valori della quale determinare il massimo.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Tipo del valore restituito dalla funzione rappresentata dall'oggetto <paramref name="selector" />.</typeparam>
      <returns vsli:raw="The maximum value in the sequence.">Valore massimo della sequenza.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the minimum value of a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt;.">Restituisce il valore minimo di un generico oggetto <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum of.">Una sequenza di valori della quale determinare il minimo.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The minimum value in the sequence.">Valore minimo della sequenza.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Invokes a projection function on each element of a generic &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; and returns the minimum resulting value.">Richiama una funzione di proiezione su ogni elemento di un generico oggetto <see cref="T:System.Linq.IQueryable`1" /> e restituisce il valore minimo risultante.</summary>
      <param name="source" vsli:raw="A sequence of values to determine the minimum of.">Una sequenza di valori della quale determinare il minimo.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Tipo del valore restituito dalla funzione rappresentata dall'oggetto <paramref name="selector" />.</typeparam>
      <returns vsli:raw="The minimum value in the sequence.">Valore minimo della sequenza.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary vsli:raw="Filters the elements of an &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; based on a specified type.">Filtra gli elementi di un oggetto <see cref="T:System.Linq.IQueryable" /> in base a un tipo specificato.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable&quot; /&gt; whose elements to filter.">Un oggetto <see cref="T:System.Linq.IQueryable" /> i cui elementi devono essere filtrati.</param>
      <typeparam name="TResult" vsli:raw="The type to filter the elements of the sequence on.">Il tipo in base al quale filtrare gli elementi della sequenza.</typeparam>
      <returns vsli:raw="A collection that contains the elements from &lt;paramref name=&quot;source&quot; /&gt; that have type &lt;paramref name=&quot;TResult&quot; /&gt;.">Raccolta che contiene elementi da <paramref name="source" /> che sono di tipo <paramref name="TResult" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Sorts the elements of a sequence in ascending order according to a key.">Ordina in senso crescente gli elementi di una sequenza secondo una chiave.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Sequenza di valori da ordinare.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Funzione per estrarre una chiave da un elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function that is represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo della chiave restituita dalla funzione rappresentata dall'oggetto <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted according to a key.">Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> i cui elementi vengono ordinati secondo una chiave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Sorts the elements of a sequence in ascending order by using a specified comparer.">Ordina in ordine crescente gli elementi di una sequenza utilizzando un operatore di confronto specificato.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Sequenza di valori da ordinare.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Funzione per estrarre una chiave da un elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">Oggetto <see cref="T:System.Collections.Generic.IComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function that is represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo della chiave restituita dalla funzione rappresentata dall'oggetto <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted according to a key.">Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> i cui elementi vengono ordinati secondo una chiave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Il parametro <paramref name="source" />, il parametro <paramref name="keySelector" /> o il parametro <paramref name="comparer" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Sorts the elements of a sequence in descending order according to a key.">Ordina in senso decrescente gli elementi di una sequenza secondo una chiave.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Sequenza di valori da ordinare.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Funzione per estrarre una chiave da un elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function that is represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo della chiave restituita dalla funzione rappresentata dall'oggetto <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> i cui elementi vengono ordinati in senso decrescente in base a una chiave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Sorts the elements of a sequence in descending order by using a specified comparer.">Ordina in senso decrescente gli elementi di una sequenza usando un operatore di confronto specificato.</summary>
      <param name="source" vsli:raw="A sequence of values to order.">Sequenza di valori da ordinare.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from an element.">Funzione per estrarre una chiave da un elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">Oggetto <see cref="T:System.Collections.Generic.IComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function that is represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo della chiave restituita dalla funzione rappresentata dall'oggetto <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> i cui elementi vengono ordinati in senso decrescente in base a una chiave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Il parametro <paramref name="source" />, il parametro <paramref name="keySelector" /> o il parametro <paramref name="comparer" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Prepend``1(System.Linq.IQueryable{``0},``0)">
      <param name="source" vsli:raw="A queryable sequence." />
      <param name="element" vsli:raw="An element of type &lt;typeparamref name=&quot;TSource&quot; /&gt; to prepend to &lt;paramref name=&quot;source&quot; /&gt;." />
      <typeparam name="TSource" vsli:raw="The type of the elements in the queryable sequence." />
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Inverts the order of the elements in a sequence.">Inverte l'ordine degli elementi in una sequenza.</summary>
      <param name="source" vsli:raw="A sequence of values to reverse.">Sequenza di valori da invertire.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements correspond to those of the input sequence in reverse order.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi corrispondono a quelli della sequenza di input, in ordine inverso.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Projects each element of a sequence into a new form.">Proietta ogni elemento di una sequenza in un nuovo form.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Sequenza di valori da proiettare.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Tipo del valore restituito dalla funzione rappresentata dall'oggetto <paramref name="selector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking a projection function on each element of &lt;paramref name=&quot;source&quot; /&gt;.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono il risultato ottenuto richiamando una funzione di proiezione su ogni elemento di <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary vsli:raw="Projects each element of a sequence into a new form by incorporating the element's index.">Proietta ogni elemento di una sequenza in un nuovo modulo incorporando l'indice dell'elemento.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Sequenza di valori da proiettare.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the value returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Tipo del valore restituito dalla funzione rappresentata dall'oggetto <paramref name="selector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking a projection function on each element of &lt;paramref name=&quot;source&quot; /&gt;.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono il risultato ottenuto richiamando una funzione di proiezione su ogni elemento di <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and combines the resulting sequences into one sequence.">Proietta ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> e combina le sequenze risultanti in una sequenza.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Sequenza di valori da proiettare.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the sequence returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Il tipo degli elementi della sequenza restituiti dalla funzione rappresentata da <paramref name="selector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono il risultato ottenuto richiamando una funzione di proiezione uno a molti su ogni elemento della sequenza di input.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.">Proietta ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> e combina le sequenze risultanti in una sequenza. L'indice di ogni elemento di origine viene usato nella maschera proiettata di tale elemento.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Sequenza di valori da proiettare.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element; the second parameter of this function represents the index of the source element.">Una funzione di proiezione da applicare a ogni elemento; il secondo parametro di questa funzione rappresenta l'indice dell'elemento di origine.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the sequence returned by the function represented by &lt;paramref name=&quot;selector&quot; /&gt;.">Il tipo degli elementi della sequenza restituiti dalla funzione rappresentata da <paramref name="selector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono il risultato ottenuto richiamando una funzione di proiezione uno a molti su ogni elemento della sequenza di input.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.">Proietta ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> e richiama una funzione del selettore di risultato su ogni elemento al suo interno. I valori risultanti da ogni sequenza intermedia vengono combinati in un singola sequenza unidimensionale e restituiti.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Sequenza di valori da proiettare.</param>
      <param name="collectionSelector" vsli:raw="A projection function to apply to each element of the input sequence.">Una funzione di proiezione da applicare a ogni elemento della sequenza di input.</param>
      <param name="resultSelector" vsli:raw="A projection function to apply to each element of each intermediate sequence.">Una funzione di proiezione da applicare a ogni elemento di ogni sequenza intermedia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by the function represented by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">Il tipo degli elementi intermedi raccolti dalla funzione rappresentata da <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">Tipo degli elementi della sequenza risultante.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking the one-to-many projection function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each element of &lt;paramref name=&quot;source&quot; /&gt; and then mapping each of those sequence elements and their corresponding &lt;paramref name=&quot;source&quot; /&gt; element to a result element.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono il risultato ottenuto richiamando la funzione di proiezione uno a molti <paramref name="collectionSelector" /> su ogni elemento di <paramref name="source" /> ed eseguire quindi il mapping di ognuno degli elementi di tale sequenza e del corrispondente elemento di <paramref name="source" /> a un elemento di risultato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;collectionSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Il parametro <paramref name="source" />, il parametro <paramref name="collectionSelector" /> o il parametro <paramref name="resultSelector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.">Proietta ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che incorpora l'indice dell'elemento di origine che lo ha prodotto. Viene quindi richiamata una funzione del selettore di risultato su ogni elemento di ogni sequenza intermedia e i valori risultanti vengono combinati in una singola sequenza unidimensionale e restituiti.</summary>
      <param name="source" vsli:raw="A sequence of values to project.">Sequenza di valori da proiettare.</param>
      <param name="collectionSelector" vsli:raw="A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.">Una funzione di proiezione da applicare a ogni elemento della sequenza di input; il secondo parametro di questa funzione rappresenta l'indice dell'elemento di origine.</param>
      <param name="resultSelector" vsli:raw="A projection function to apply to each element of each intermediate sequence.">Una funzione di proiezione da applicare a ogni elemento di ogni sequenza intermedia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by the function represented by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">Il tipo degli elementi intermedi raccolti dalla funzione rappresentata da <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">Tipo degli elementi della sequenza risultante.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements are the result of invoking the one-to-many projection function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each element of &lt;paramref name=&quot;source&quot; /&gt; and then mapping each of those sequence elements and their corresponding &lt;paramref name=&quot;source&quot; /&gt; element to a result element.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> i cui elementi sono il risultato ottenuto richiamando la funzione di proiezione uno a molti <paramref name="collectionSelector" /> su ogni elemento di <paramref name="source" /> ed eseguire quindi il mapping di ognuno degli elementi di tale sequenza e del corrispondente elemento di <paramref name="source" /> a un elemento di risultato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;collectionSelector&quot; /&gt; or &lt;paramref name=&quot;resultSelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Il parametro <paramref name="source" />, il parametro <paramref name="collectionSelector" /> o il parametro <paramref name="resultSelector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Determines whether two sequences are equal by using the default equality comparer to compare elements.">Determina se due sequenze sono uguali utilizzando l'operatore di confronto uguaglianze predefinito per confrontare gli elementi.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to compare to those of &lt;paramref name=&quot;source2&quot; /&gt;.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> cui elementi devono venire confrontati con quelli di <paramref name="source2" />.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to compare to those of the first sequence.">Un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi devono venire confrontati con quelli della prima sequenza.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo degli elementi delle sequenze di input.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se le due sequenze di origine sono di lunghezza uguale e gli elementi corrispondenti risultano uguali; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Determines whether two sequences are equal by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare elements.">Determina se due sequenze sono uguali utilizzando un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato per confrontare gli elementi.</summary>
      <param name="source1" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; whose elements to compare to those of &lt;paramref name=&quot;source2&quot; /&gt;.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> cui elementi devono venire confrontati con quelli di <paramref name="source2" />.</param>
      <param name="source2" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements to compare to those of the first sequence.">Un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi devono venire confrontati con quelli della prima sequenza.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to use to compare elements.">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> da usare per confrontare gli elementi.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo degli elementi delle sequenze di input.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se le due sequenze di origine sono di lunghezza uguale e gli elementi corrispondenti risultano uguali; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.">Restituisce l'unico elemento di una sequenza e genera un'eccezione se nella sequenza non è presente esattamente un elemento.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the single element of.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui restituire il singolo elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The single element of the input sequence.">Singolo elemento della sequenza di input.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; has more than one element.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">
        <paramref name="source" /> presenta più di un elemento.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.">Restituisce l'unico elemento di una sequenza che soddisfa una condizione specificata e genera un'eccezione se esistono più elementi di tale tipo.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return a single element from.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire un singolo elemento.</param>
      <param name="predicate" vsli:raw="A function to test an element for a condition.">Funzione per testare un elemento per una condizione.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The single element of the input sequence that satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">Il singolo elemento della sequenza di input che soddisfa la condizione in <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The source sequence is empty.">Nessun elemento soddisfa la condizione in <paramref name="predicate" />.  
-oppure- 
Più di un elemento soddisfa la condizione in <paramref name="predicate" />.  
In alternativa 
La sequenza di origine è vuota.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary vsli:raw="Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.">Restituisce il singolo elemento di una sequenza o un valore predefinito se la sequenza è vuota. Questo metodo genera un'eccezione se esiste più di un elemento nella sequenza.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return the single element of.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> di cui restituire il singolo elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The single element of the input sequence, or &lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if the sequence contains no elements.">Singolo elemento della sequenza di input o <c>default</c>(<paramref name="TSource" />) se la sequenza non contiene elementi.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; has more than one element.">
        <paramref name="source" /> presenta più di un elemento.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.">Restituisce l'unico elemento di una sequenza che soddisfa una condizione specificata o un valore predefinito se tale elemento esiste. Questo metodo genera un'eccezione se più di un elemento soddisfa la condizione.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return a single element from.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire un singolo elemento.</param>
      <param name="predicate" vsli:raw="A function to test an element for a condition.">Funzione per testare un elemento per una condizione.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The single element of the input sequence that satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;, or &lt;c&gt;default&lt;/c&gt;(&lt;paramref name=&quot;TSource&quot; /&gt;) if no such element is found.">Singolo elemento della sequenza di input che soddisfa la condizione in <paramref name="predicate" /> o <c>default</c>(<paramref name="TSource" />) se tale elemento non viene trovato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">Più di un elemento soddisfa la condizione in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Bypasses a specified number of elements in a sequence and then returns the remaining elements.">Ignora un numero specificato di elementi in una sequenza e quindi restituisce gli elementi rimanenti.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return elements from.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire elementi.</param>
      <param name="count" vsli:raw="The number of elements to skip before returning the remaining elements.">Il numero di elementi da ignorare prima di restituire gli elementi rimanenti.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements that occur after the specified index in the input sequence.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi presenti dopo l'indice specificato nella sequenza di input.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipLast``1(System.Linq.IQueryable{``0},System.Int32)">
      <param name="source" vsli:raw="A queryable sequence." />
      <param name="count" vsli:raw="The number of elements to omit from the end of the queryable sequence." />
      <typeparam name="TSource" vsli:raw="The type of the elements in the queryable sequence." />
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.">Ignora gli elementi in sequenza finché la condizione specificata è soddisfatta e quindi restituisce gli elementi rimanenti.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return elements from.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire elementi.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from &lt;paramref name=&quot;source&quot; /&gt; starting at the first element in the linear series that does not pass the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi da <paramref name="source" /> a partire dal primo elemento nella serie lineare che non supera il test specificato da <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary vsli:raw="Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.">Ignora gli elementi in sequenza finché la condizione specificata è soddisfatta e quindi restituisce gli elementi rimanenti. L'indice dell'elemento viene usato nella logica della funzione predicativa.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to return elements from.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> dal quale restituire elementi.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition; the second parameter of this function represents the index of the source element.">Una funzione per testare ogni elemento per una condizione; il secondo parametro di questa funzione rappresenta l'indice dell'elemento di origine.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from &lt;paramref name=&quot;source&quot; /&gt; starting at the first element in the linear series that does not pass the test specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Un oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi da <paramref name="source" /> a partire dal primo elemento nella serie lineare che non supera il test specificato da <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Calcola la somma di una sequenza di valori <see cref="T:System.Decimal" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the sum of.">Sequenza di valori <see cref="T:System.Decimal" /> di cui calcolare la somma.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Somma dei valori della sequenza.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">La somma è maggiore di <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Calcola la somma di una sequenza di valori <see cref="T:System.Double" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the sum of.">Sequenza di valori <see cref="T:System.Double" /> di cui calcolare la somma.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Somma dei valori della sequenza.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Calcola la somma di una sequenza di valori <see cref="T:System.Int32" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the sum of.">Sequenza di valori <see cref="T:System.Int32" /> di cui calcolare la somma.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Somma dei valori della sequenza.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">La somma è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Calcola la somma di una sequenza di valori <see cref="T:System.Int64" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the sum of.">Sequenza di valori <see cref="T:System.Int64" /> di cui calcolare la somma.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Somma dei valori della sequenza.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La somma è maggiore di <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values.">Calcola la somma di una sequenza che ammette valori <see cref="T:System.Decimal" /> nullable.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values to calculate the sum of.">Sequenza che ammette valori <see cref="T:System.Decimal" /> nullable di cui calcolare la somma.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Somma dei valori della sequenza.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">La somma è maggiore di <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values.">Calcola la somma di una sequenza che ammette valori <see cref="T:System.Double" /> nullable.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values to calculate the sum of.">Sequenza che ammette valori <see cref="T:System.Double" /> nullable di cui calcolare la somma.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Somma dei valori della sequenza.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values.">Calcola la somma di una sequenza che ammette valori <see cref="T:System.Int32" /> nullable.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values to calculate the sum of.">Sequenza che ammette valori <see cref="T:System.Int32" /> nullable di cui calcolare la somma.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Somma dei valori della sequenza.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">La somma è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values.">Calcola la somma di una sequenza che ammette valori <see cref="T:System.Int64" /> nullable.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values to calculate the sum of.">Sequenza che ammette valori <see cref="T:System.Int64" /> nullable di cui calcolare la somma.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Somma dei valori della sequenza.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La somma è maggiore di <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary vsli:raw="Computes the sum of a sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Calcola la somma di una sequenza che ammette valori <see cref="T:System.Single" /> nullable.</summary>
      <param name="source" vsli:raw="A sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the sum of.">Sequenza che ammette valori <see cref="T:System.Single" /> nullable di cui calcolare la somma.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Somma dei valori della sequenza.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary vsli:raw="Computes the sum of a sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values.">Calcola la somma di una sequenza di valori <see cref="T:System.Single" />.</summary>
      <param name="source" vsli:raw="A sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values to calculate the sum of.">Sequenza di valori <see cref="T:System.Single" /> di cui calcolare la somma.</param>
      <returns vsli:raw="The sum of the values in the sequence.">Somma dei valori della sequenza.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la somma della sequenza di valori <see cref="T:System.Decimal" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Somma dei valori proiettati.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">La somma è maggiore di <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Double&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la somma della sequenza di valori <see cref="T:System.Double" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Somma dei valori proiettati.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la somma della sequenza di valori <see cref="T:System.Int32" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Somma dei valori proiettati.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">La somma è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la somma della sequenza di valori <see cref="T:System.Int64" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Somma dei valori proiettati.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La somma è maggiore di <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Decimal&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la somma della sequenza di valori <see cref="T:System.Decimal" /> nullable, ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Somma dei valori proiettati.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">La somma è maggiore di <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Double&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la somma della sequenza di valori <see cref="T:System.Double" /> nullable, ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Somma dei valori proiettati.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Int32&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la somma della sequenza di valori <see cref="T:System.Int32" /> nullable, ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Somma dei valori proiettati.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">La somma è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Int64&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la somma della sequenza di valori <see cref="T:System.Int64" /> nullable, ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Somma dei valori proiettati.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The sum is larger than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">La somma è maggiore di <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary vsli:raw="Computes the sum of the sequence of nullable &lt;see cref=&quot;T:System.Single&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la somma della sequenza di valori <see cref="T:System.Single" /> nullable, ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Somma dei valori proiettati.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary vsli:raw="Computes the sum of the sequence of &lt;see cref=&quot;T:System.Single&quot; /&gt; values that is obtained by invoking a projection function on each element of the input sequence.">Calcola la somma della sequenza di valori <see cref="T:System.Single" /> ottenuta chiamando una funzione di proiezione su ogni elemento della sequenza di input.</summary>
      <param name="source" vsli:raw="A sequence of values of type &lt;paramref name=&quot;TSource&quot; /&gt;.">Sequenza di valori di tipo <paramref name="TSource" />.</param>
      <param name="selector" vsli:raw="A projection function to apply to each element.">Funzione di proiezione da applicare a ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="The sum of the projected values.">Somma dei valori proiettati.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;selector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="selector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary vsli:raw="Returns a specified number of contiguous elements from the start of a sequence.">Restituisce un numero specificato di elementi contigui dall'inizio di una sequenza.</summary>
      <param name="source" vsli:raw="The sequence to return elements from.">Sequenza dalla quale vengono restituiti gli elementi.</param>
      <param name="count" vsli:raw="The number of elements to return.">Numero di elementi da restituire.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the specified number of elements from the start of &lt;paramref name=&quot;source&quot; /&gt;.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene il numero specificato di elementi dall'inizio di <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeLast``1(System.Linq.IQueryable{``0},System.Int32)">
      <param name="source" vsli:raw="A queryable sequence instance." />
      <param name="count" vsli:raw="The number of elements to take from the end of the queryable sequence." />
      <typeparam name="TSource" vsli:raw="The type of the elements in the queryable sequence." />
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Returns elements from a sequence as long as a specified condition is true.">Restituisce elementi di una sequenza finché una condizione specificata è soddisfatta.</summary>
      <param name="source" vsli:raw="The sequence to return elements from.">Sequenza dalla quale vengono restituiti gli elementi.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from the input sequence occurring before the element at which the test specified by &lt;paramref name=&quot;predicate&quot; /&gt; no longer passes.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi dalla sequenza di input che precedono il primo elemento che non soddisfa più il test specificato da <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary vsli:raw="Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.">Restituisce elementi di una sequenza finché una condizione specificata è soddisfatta. L'indice dell'elemento viene usato nella logica della funzione predicativa.</summary>
      <param name="source" vsli:raw="The sequence to return elements from.">Sequenza dalla quale vengono restituiti gli elementi.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.">Una funzione per testare ogni elemento per una condizione; il secondo parametro della funzione rappresenta l'indice dell'elemento della sequenza di origine.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from the input sequence occurring before the element at which the test specified by &lt;paramref name=&quot;predicate&quot; /&gt; no longer passes.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene elementi dalla sequenza di input che precedono il primo elemento che non soddisfa più il test specificato da <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.">Esegue un successivo ordinamento in senso crescente in base a una chiave degli elementi di una sequenza.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; that contains elements to sort.">Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> che contiene gli elementi da ordinare.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Funzione per estrarre una chiave da ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo della chiave restituita dalla funzione rappresentata dall'oggetto <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted according to a key.">Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> i cui elementi vengono ordinati secondo una chiave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.">Esegue un ordinamento secondario in senso crescente degli elementi di una sequenza utilizzando un operatore di confronto specificato.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; that contains elements to sort.">Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> che contiene gli elementi da ordinare.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">Oggetto <see cref="T:System.Collections.Generic.IComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo della chiave restituita dalla funzione rappresentata dall'oggetto <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted according to a key.">Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> i cui elementi vengono ordinati secondo una chiave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Il parametro <paramref name="source" />, il parametro <paramref name="keySelector" /> o il parametro <paramref name="comparer" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.">Esegue un successivo ordinamento in senso decrescente in base a una chiave degli elementi di una sequenza.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; that contains elements to sort.">Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> che contiene gli elementi da ordinare.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Funzione per estrarre una chiave da ogni elemento.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key returned by the function represented by &lt;paramref name=&quot;keySelector&quot; /&gt;.">Tipo della chiave restituita dalla funzione rappresentata dall'oggetto <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; whose elements are sorted in descending order according to a key.">Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> i cui elementi vengono ordinati in senso decrescente in base a una chiave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="keySelector" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.">Esegue un ordinamento secondario in senso decrescente degli elementi di una sequenza utilizzando un operatore di confronto specificato.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IOrderedQueryable`1&quot; /&gt; that contains elements to sort.">Oggetto <see cref="T:System.Linq.IOrderedQueryable`1" /> che contiene gli elementi da ordinare.</param>
      <param name="keySelector" vsli:raw="A function to extract a key from each element.">Funzione per estrarre una chiave da ogni elemento.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; to compare keys.">Oggetto <see cref="T:System.Collections.Generic.IComparer`1" /> per confrontare le chiavi.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the key that is returned by the &lt;paramref name=&quot;keySelector&quot; /&gt; function.">Tipo della chiave restituita dalla funzione <paramref name="keySelector" />.</typeparam>
      <returns vsli:raw="A collection whose elements are sorted in descending order according to a key.">Raccolta i cui elementi vengono disposti in ordine decrescente in base a una chiave.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;keySelector&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Il parametro <paramref name="source" />, il parametro <paramref name="keySelector" /> o il parametro <paramref name="comparer" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Produces the set union of two sequences by using the default equality comparer.">Produce l'unione insiemistica delle due sequenze utilizzando l'operatore di confronto uguaglianze predefinito.</summary>
      <param name="source1" vsli:raw="A sequence whose distinct elements form the first set for the union operation.">Una sequenza i cui elementi distinti formano il primo insieme per l'operazione di unione.</param>
      <param name="source2" vsli:raw="A sequence whose distinct elements form the second set for the union operation.">Una sequenza i cui elementi distinti formano il secondo insieme per l'operazione di unione.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo degli elementi delle sequenze di input.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements from both input sequences, excluding duplicates.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi di entrambe le sequenze di input, tranne i duplicati.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Produces the set union of two sequences by using a specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Produce l'unione insiemistica di due sequenze utilizzando un oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> specificato.</summary>
      <param name="source1" vsli:raw="A sequence whose distinct elements form the first set for the union operation.">Una sequenza i cui elementi distinti formano il primo insieme per l'operazione di unione.</param>
      <param name="source2" vsli:raw="A sequence whose distinct elements form the second set for the union operation.">Una sequenza i cui elementi distinti formano il secondo insieme per l'operazione di unione.</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; to compare values.">Oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> per confrontare i valori.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of the input sequences.">Tipo degli elementi delle sequenze di input.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains the elements from both input sequences, excluding duplicates.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi di entrambe le sequenze di input, tranne i duplicati.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary vsli:raw="Filters a sequence of values based on a predicate.">Filtra una sequenza di valori in base a un predicato.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to filter.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> da filtrare.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition.">Funzione per testare ogni elemento rispetto a una condizione.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from the input sequence that satisfy the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi dalla sequenza di input che soddisfano la condizione specificata da <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary vsli:raw="Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.">Filtra una sequenza di valori in base a un predicato. L'indice di ogni elemento viene usato nella logica della funzione predicato.</summary>
      <param name="source" vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; to filter.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> da filtrare.</param>
      <param name="predicate" vsli:raw="A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.">Una funzione per testare ogni elemento per una condizione; il secondo parametro della funzione rappresenta l'indice dell'elemento della sequenza di origine.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;source&quot; /&gt;.">Tipo degli elementi di <paramref name="source" />.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains elements from the input sequence that satisfy the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi dalla sequenza di input che soddisfano la condizione specificata da <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1})">
      <summary vsli:raw="Produces a sequence of tuples with elements from the two specified sequences.">Produce una sequenza di tuple con gli elementi dalle due sequenze specificate.</summary>
      <param name="source1" vsli:raw="The first sequence to merge.">Prima sequenza da unire.</param>
      <param name="source2" vsli:raw="The second sequence to merge.">Seconda sequenza da unire.</param>
      <typeparam name="TFirst" vsli:raw="The type of the elements of the first input sequence.">Tipo degli elementi della prima sequenza di input.</typeparam>
      <typeparam name="TSecond" vsli:raw="The type of the elements of the second input sequence.">Tipo degli elementi della seconda sequenza di input.</typeparam>
      <returns vsli:raw="A sequence of tuples with elements taken from the first and second sequences, in that order.">Sequenza di tuple con elementi tratti dalla prima e dalla seconda sequenza, in questo ordine.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary vsli:raw="Merges two sequences by using the specified predicate function.">Unisce due sequenze tramite la funzione del predicato specificata.</summary>
      <param name="source1" vsli:raw="The first sequence to merge.">Prima sequenza da unire.</param>
      <param name="source2" vsli:raw="The second sequence to merge.">Seconda sequenza da unire.</param>
      <param name="resultSelector" vsli:raw="A function that specifies how to merge the elements from the two sequences.">Una funzione che specifica come unire gli elementi dalle due sequenze.</param>
      <typeparam name="TFirst" vsli:raw="The type of the elements of the first input sequence.">Tipo degli elementi della prima sequenza di input.</typeparam>
      <typeparam name="TSecond" vsli:raw="The type of the elements of the second input sequence.">Tipo degli elementi della seconda sequenza di input.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the result sequence.">Tipo degli elementi della sequenza risultante.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Linq.IQueryable`1&quot; /&gt; that contains merged elements of two input sequences.">Oggetto <see cref="T:System.Linq.IQueryable`1" /> che contiene gli elementi uniti delle due sequenze di input.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source1&quot; /&gt; or &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> o <paramref name="source2" /> è <see langword="null" />.</exception>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Numerics.Vectors</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.Matrix3x2">
      <summary>Rappresenta una matrice 3x2.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea una matrice 3x2 dai componenti specificati.</summary>
      <param name="m11">Valore da assegnare al primo elemento nella prima riga.</param>
      <param name="m12">Valore da assegnare al secondo elemento nella prima riga.</param>
      <param name="m21">Valore da assegnare al primo elemento nella seconda riga.</param>
      <param name="m22">Valore da assegnare al secondo elemento nella seconda riga.</param>
      <param name="m31">Valore da assegnare al primo elemento nella terza riga.</param>
      <param name="m32">Valore da assegnare al secondo elemento nella terza riga.</param>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Add(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Aggiunge ogni elemento in una matrice con il relativo elemento corrispondente in una seconda matrice.</summary>
      <param name="value1">Prima matrice.</param>
      <param name="value2">Seconda matrice.</param>
      <returns>Matrice contenente i valori sommati di <paramref name="value1" /> e <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single)">
      <summary>Crea una matrice di rotazione usando la rotazione specificata in radianti.</summary>
      <param name="radians">Quantità in base a cui eseguire la rotazione, in radianti.</param>
      <returns>Matrice di rotazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single,System.Numerics.Vector2)">
      <summary>Crea una matrice di rotazione usando la rotazione specificata in radianti e un punto centrale.</summary>
      <param name="radians">Quantità in base a cui eseguire la rotazione, in radianti.</param>
      <param name="centerPoint">Punto centrale.</param>
      <returns>Matrice di rotazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2)">
      <summary>Crea una matrice di scala dalla scala del vettore specificata.</summary>
      <param name="scales">Scala da usare.</param>
      <returns>Matrice di scala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Crea una matrice di scala dalla scala del vettore specificata con un offset dal punto centrale specificato.</summary>
      <param name="scales">Scala da usare.</param>
      <param name="centerPoint">Offset centrale.</param>
      <returns>Matrice di scala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single)">
      <summary>Crea una matrice di scala che viene ridimensionata in modo uniforme in base alla scala specificata.</summary>
      <param name="scale">Scala uniforme da usare.</param>
      <returns>Matrice di scala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Numerics.Vector2)">
      <summary>Crea una matrice di scala che viene ridimensionata in modo uniforme in base alla scala specificata con un offset dal centro specificato.</summary>
      <param name="scale">Scala uniforme da usare.</param>
      <param name="centerPoint">Offset centrale.</param>
      <returns>Matrice di scala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single)">
      <summary>Crea una matrice di scala dai componenti X e Y specificati.</summary>
      <param name="xScale">Valore di scala per l'asse X.</param>
      <param name="yScale">Valore di scala per l'asse Y.</param>
      <returns>Matrice di scala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>Crea una matrice di scala con un offset in base a un punto centrale specificato.</summary>
      <param name="xScale">Valore di scala per l'asse X.</param>
      <param name="yScale">Valore di scala per l'asse Y.</param>
      <param name="centerPoint">Punto centrale.</param>
      <returns>Matrice di scala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single)">
      <summary>Crea una matrice di inclinazione dagli angoli specificati in radianti.</summary>
      <param name="radiansX">Angolo X, in radianti.</param>
      <param name="radiansY">Angolo Y, in radianti.</param>
      <returns>Matrice di inclinazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>Crea una matrice di inclinazione dagli angoli specificati in radianti e da un punto centrale.</summary>
      <param name="radiansX">Angolo X, in radianti.</param>
      <param name="radiansY">Angolo Y, in radianti.</param>
      <param name="centerPoint">Punto centrale.</param>
      <returns>Matrice di inclinazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Numerics.Vector2)">
      <summary>Crea una matrice di traslazione dal vettore bidimensionale specificato.</summary>
      <param name="position">Posizione di traslazione.</param>
      <returns>Matrice di traslazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Single,System.Single)">
      <summary>Crea una matrice di traslazione dai componenti X e Y specificati.</summary>
      <param name="xPosition">Posizione X.</param>
      <param name="yPosition">Posizione Y.</param>
      <returns>Matrice di traslazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Numerics.Matrix3x2)">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un'altra matrice 3x2.</summary>
      <param name="other">L'altra matrice.</param>
      <returns>
        <see langword="true" /> se le due matrici sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Object)">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="obj">Oggetto da confrontare con l'istanza corrente.</param>
      <returns>
        <see langword="true" /> se l'istanza corrente è uguale a <paramref name="obj" />; in caso contrario, <see langword="false" />. Se <paramref name="obj" /> è <see langword="null" />, il metodo restituisce <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetDeterminant">
      <summary>Calcola il determinante per la matrice.</summary>
      <returns>Determinante.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Identity">
      <summary>Ottiene la matrice identità moltiplicativa.</summary>
      <returns>Matrice identità moltiplicativa.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Invert(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2@)">
      <summary>Inverte la matrice specificata. Il valore restituito indica se l'operazione è riuscita.</summary>
      <param name="matrix">Matrice da invertire.</param>
      <param name="result">Il valore restituito dal metodo, se l'operazione è riuscita, contiene la matrice invertita.</param>
      <returns>
        <see langword="true" /> se <paramref name="matrix" /> è stato convertito correttamente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.IsIdentity">
      <summary>Indica se la matrice corrente è la matrice identità.</summary>
      <returns>
        <see langword="true" /> se la matrice corrente è la matrice identità; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Lerp(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2,System.Single)">
      <summary>Esegue un'interpolazione lineare da una matrice a una seconda matrice in base a un valore che specifica il peso della seconda matrice.</summary>
      <param name="matrix1">Prima matrice.</param>
      <param name="matrix2">Seconda matrice.</param>
      <param name="amount">Peso relativo di <paramref name="matrix2" />.</param>
      <returns>Matrice interpolata.</returns>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M11">
      <summary>Primo elemento della prima riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M12">
      <summary>Secondo elemento della prima riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M21">
      <summary>Primo elemento della seconda riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M22">
      <summary>Secondo elemento della seconda riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M31">
      <summary>Primo elemento della terza riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M32">
      <summary>Secondo elemento della terza riga.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Restituisce la matrice risultante dalla moltiplicazione di due matrici.</summary>
      <param name="value1">Prima matrice.</param>
      <param name="value2">Seconda matrice.</param>
      <returns>Matrice prodotto.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>Restituisce la matrice risultante dall'operazione di ridimensionamento su tutti gli elementi di una matrice specificata in base a un fattore scalare.</summary>
      <param name="value1">Matrice da scalare.</param>
      <param name="value2">Valore di scala da usare.</param>
      <returns>Matrice scalata.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Negate(System.Numerics.Matrix3x2)">
      <summary>Nega la matrice specificata moltiplicando tutti i relativi valori per -1.</summary>
      <param name="value">Matrice da negare.</param>
      <returns>Matrice negata.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Addition(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Aggiunge ogni elemento in una matrice con il relativo elemento corrispondente in una seconda matrice.</summary>
      <param name="value1">Prima matrice.</param>
      <param name="value2">Seconda matrice.</param>
      <returns>Matrice contenente i valori sommati.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Equality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Restituisce un valore che indica se le matrici specificate sono uguali.</summary>
      <param name="value1">Prima matrice da confrontare.</param>
      <param name="value2">Seconda matrice da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="value1" /> e <paramref name="value2" /> sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Inequality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Restituisce un valore che indica se le matrici specificate non sono uguali.</summary>
      <param name="value1">Prima matrice da confrontare.</param>
      <param name="value2">Seconda matrice da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="value1" /> e <paramref name="value2" /> non sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Restituisce la matrice risultante dalla moltiplicazione di due matrici.</summary>
      <param name="value1">Prima matrice.</param>
      <param name="value2">Seconda matrice.</param>
      <returns>Matrice prodotto.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>Restituisce la matrice risultante dall'operazione di ridimensionamento su tutti gli elementi di una matrice specificata in base a un fattore scalare.</summary>
      <param name="value1">Matrice da scalare.</param>
      <param name="value2">Valore di scala da usare.</param>
      <returns>Matrice scalata.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Subtraction(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Sottrae ogni elemento in una seconda matrice dall'elemento corrispondente in una prima matrice.</summary>
      <param name="value1">Prima matrice.</param>
      <param name="value2">Seconda matrice.</param>
      <returns>Matrice contenente i valori risultanti dalla sottrazione di ogni elemento in <paramref name="value2" /> dal relativo elemento corrispondente in <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_UnaryNegation(System.Numerics.Matrix3x2)">
      <summary>Nega la matrice specificata moltiplicando tutti i relativi valori per -1.</summary>
      <param name="value">Matrice da negare.</param>
      <returns>Matrice negata.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Subtract(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Sottrae ogni elemento in una seconda matrice dall'elemento corrispondente in una prima matrice.</summary>
      <param name="value1">Prima matrice.</param>
      <param name="value2">Seconda matrice.</param>
      <returns>Matrice contenente i valori risultanti dalla sottrazione di ogni elemento in <paramref name="value2" /> dal relativo elemento corrispondente in <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.ToString">
      <summary>Restituisce una stringa che rappresenta la matrice.</summary>
      <returns>Rappresentazione di stringa di questa matrice.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Translation">
      <summary>Ottiene o imposta il componente traslazione di questa matrice.</summary>
      <returns>Componente traslazione dell'istanza corrente.</returns>
    </member>
    <member name="T:System.Numerics.Matrix4x4">
      <summary>Rappresenta una matrice 4x4.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Numerics.Matrix3x2)">
      <summary>Crea un oggetto <see cref="T:System.Numerics.Matrix4x4" /> dall'oggetto <see cref="T:System.Numerics.Matrix3x2" /> specificato.</summary>
      <param name="value">Matrice 3x2.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea una matrice 4x4 dai componenti specificati.</summary>
      <param name="m11">Valore da assegnare al primo elemento nella prima riga.</param>
      <param name="m12">Valore da assegnare al secondo elemento nella prima riga.</param>
      <param name="m33">Valore da assegnare al terzo elemento nella terza riga.</param>
      <param name="m34">Valore da assegnare al quarto elemento nella terza riga.</param>
      <param name="m41">Valore da assegnare al primo elemento nella quarta riga.</param>
      <param name="m42">Valore da assegnare al secondo elemento nella quarta riga.</param>
      <param name="m43">Valore da assegnare al terzo elemento nella quarta riga.</param>
      <param name="m44">Valore da assegnare al quarto elemento nella quarta riga.</param>
      <param name="m13">Valore da assegnare al terzo elemento nella prima riga.</param>
      <param name="m14">Valore da assegnare al quarto elemento nella prima riga.</param>
      <param name="m21">Valore da assegnare al primo elemento nella seconda riga.</param>
      <param name="m22">Valore da assegnare al secondo elemento nella seconda riga.</param>
      <param name="m23">Valore da assegnare al quarto elemento nella seconda riga.</param>
      <param name="m24">Valore da assegnare al quarto elemento nella seconda riga.</param>
      <param name="m31">Valore da assegnare al primo elemento nella terza riga.</param>
      <param name="m32">Valore da assegnare al secondo elemento nella terza riga.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Add(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Aggiunge ogni elemento in una matrice con il relativo elemento corrispondente in una seconda matrice.</summary>
      <param name="value1">Prima matrice.</param>
      <param name="value2">Seconda matrice.</param>
      <returns>Matrice contenente i valori sommati di <paramref name="value1" /> e <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crea un pannello sferico che ruota intorno a una posizione di oggetto specificata.</summary>
      <param name="objectPosition">Posizione dell'oggetto intorno al quale ruota il pannello.</param>
      <param name="cameraPosition">Posizione della camera.</param>
      <param name="cameraUpVector">Vettore up della camera.</param>
      <param name="cameraForwardVector">Vettore forward della camera.</param>
      <returns>Pannello creato.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateConstrainedBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crea un pannello cilindrico che ruota intorno a un asse specificato.</summary>
      <param name="objectPosition">Posizione dell'oggetto intorno al quale ruota il pannello.</param>
      <param name="cameraPosition">Posizione della camera.</param>
      <param name="rotateAxis">Asse intorno a cui ruotare il pannello.</param>
      <param name="cameraForwardVector">Vettore forward della camera.</param>
      <param name="objectForwardVector">Vettore forward dell'oggetto.</param>
      <returns>Matrice del pannello.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>Crea una matrice che ruota intorno a un vettore arbitrario.</summary>
      <param name="axis">Asse di rotazione.</param>
      <param name="angle">L'angolo di rotazione dell'oggetto <paramref name="axis" />, in radianti.</param>
      <returns>Matrice di rotazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromQuaternion(System.Numerics.Quaternion)">
      <summary>Crea una matrice di rotazione dal valore di rotazione Quaternion specificato.</summary>
      <param name="quaternion">Quaternione di origine.</param>
      <returns>Matrice di rotazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Crea una matrice di rotazione dagli assi di rotazione y, x e z specificati.</summary>
      <param name="yaw">Angolo di rotazione intorno all'asse Y, in radianti.</param>
      <param name="pitch">Angolo di rotazione intorno all'asse X, in radianti.</param>
      <param name="roll">Angolo di rotazione intorno all'asse Z, in radianti.</param>
      <returns>Matrice di rotazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateLookAt(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crea una matrice di visualizzazione.</summary>
      <param name="cameraPosition">Posizione della camera.</param>
      <param name="cameraTarget">Posizione di destinazione verso cui punta la camera.</param>
      <param name="cameraUpVector">Direzione "up" dal punto di vista della camera.</param>
      <returns>Matrice di visualizzazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea una matrice prospettica ortogonale dalle dimensioni del volume di visualizzazione specificate.</summary>
      <param name="width">Larghezza del volume di visualizzazione.</param>
      <param name="height">Altezza del volume di visualizzazione.</param>
      <param name="zNearPlane">Valore Z minimo del volume di visualizzazione.</param>
      <param name="zFarPlane">Valore Z massimo del volume di visualizzazione.</param>
      <returns>Matrice di proiezione ortogonale.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea una matrice di proiezione ortogonale personalizzata.</summary>
      <param name="left">Valore X minimo del volume di visualizzazione.</param>
      <param name="right">Valore X massimo del volume di visualizzazione.</param>
      <param name="bottom">Valore Y minimo del volume di visualizzazione.</param>
      <param name="top">Valore Y massimo del volume di visualizzazione.</param>
      <param name="zNearPlane">Valore Z minimo del volume di visualizzazione.</param>
      <param name="zFarPlane">Valore Z massimo del volume di visualizzazione.</param>
      <returns>Matrice di proiezione ortogonale.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea una matrice di proiezione prospettica dalle dimensioni del volume di visualizzazione specificate.</summary>
      <param name="width">Larghezza del volume di visualizzazione nel piano di visualizzazione vicino.</param>
      <param name="height">Altezza del volume di visualizzazione nel piano di visualizzazione vicino.</param>
      <param name="nearPlaneDistance">Distanza dal piano di visualizzazione vicino.</param>
      <param name="farPlaneDistance">Distanza dal piano di visualizzazione lontano.</param>
      <returns>Matrice di proiezione prospettica.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" /> è minore o uguale a zero.  
-oppure- 
 <paramref name="farPlaneDistance" /> è minore o uguale a zero.  
-oppure- 
 <paramref name="nearPlaneDistance" /> è maggiore o uguale a <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea una matrice di proiezione prospettica in base a un campo visivo, alle proporzioni e alle distanze del piano di visualizzazione vicino e lontano.</summary>
      <param name="fieldOfView">Campo visivo nella direzione y, in radianti.</param>
      <param name="aspectRatio">Proporzioni, definite come larghezza dello spazio visivo divisa per l'altezza.</param>
      <param name="nearPlaneDistance">Distanza dal piano di visualizzazione vicino.</param>
      <param name="farPlaneDistance">Distanza dal piano di visualizzazione lontano.</param>
      <returns>Matrice di proiezione prospettica.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfView" /> è minore o uguale a zero.  
-oppure- 
 <paramref name="fieldOfView" /> è maggiore o uguale a <see cref="F:System.Math.PI" />.  
 <paramref name="nearPlaneDistance" /> è minore o uguale a zero.  
In alternativa 
 <paramref name="farPlaneDistance" /> è minore o uguale a zero.  
In alternativa 
 <paramref name="nearPlaneDistance" /> è maggiore o uguale a <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea una matrice di proiezione prospettica personalizzata.</summary>
      <param name="left">Valore X minimo del volume di visualizzazione nel piano di visualizzazione vicino.</param>
      <param name="right">Valore X massimo del volume di visualizzazione nel piano di visualizzazione vicino.</param>
      <param name="bottom">Valore Y minimo del volume di visualizzazione nel piano di visualizzazione vicino.</param>
      <param name="top">Valore Y massimo del volume di visualizzazione nel piano di visualizzazione vicino.</param>
      <param name="nearPlaneDistance">Distanza dal piano di visualizzazione vicino.</param>
      <param name="farPlaneDistance">Distanza dal piano di visualizzazione lontano.</param>
      <returns>Matrice di proiezione prospettica.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" /> è minore o uguale a zero.  
-oppure- 
 <paramref name="farPlaneDistance" /> è minore o uguale a zero.  
-oppure- 
 <paramref name="nearPlaneDistance" /> è maggiore o uguale a <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateReflection(System.Numerics.Plane)">
      <summary>Crea una matrice che crea un sistema di coordinate speculare rispetto a un piano specificato.</summary>
      <param name="value">Piano intorno al quale creare una reflection.</param>
      <returns>Nuova matrice che esprime la reflection.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single)">
      <summary>Crea una matrice per la rotazione di punti intorno all'asse X.</summary>
      <param name="radians">Quantità, in radianti, in base a cui eseguire la rotazione intorno all'asse X.</param>
      <returns>Matrice di rotazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single,System.Numerics.Vector3)">
      <summary>Crea una matrice per la rotazione di punti intorno all'asse X da un punto centrale.</summary>
      <param name="radians">Quantità, in radianti, in base a cui eseguire la rotazione intorno all'asse X.</param>
      <param name="centerPoint">Punto centrale.</param>
      <returns>Matrice di rotazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single)">
      <summary>Crea una matrice per la rotazione di punti intorno all'asse Y.</summary>
      <param name="radians">Quantità, in radianti, in base a cui eseguire la rotazione intorno all'asse Y.</param>
      <returns>Matrice di rotazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single,System.Numerics.Vector3)">
      <summary>Quantità, in radianti, in base a cui eseguire la rotazione intorno all'asse Y da un punto centrale.</summary>
      <param name="radians">Quantità, in radianti, in base a cui eseguire la rotazione intorno all'asse Y.</param>
      <param name="centerPoint">Punto centrale.</param>
      <returns>Matrice di rotazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single)">
      <summary>Crea una matrice per la rotazione di punti intorno all'asse Z.</summary>
      <param name="radians">Quantità, in radianti, in base a cui eseguire la rotazione intorno all'asse Z.</param>
      <returns>Matrice di rotazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single,System.Numerics.Vector3)">
      <summary>Crea una matrice per la rotazione di punti intorno all'asse Z da un punto centrale.</summary>
      <param name="radians">Quantità, in radianti, in base a cui eseguire la rotazione intorno all'asse Z.</param>
      <param name="centerPoint">Punto centrale.</param>
      <returns>Matrice di rotazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3)">
      <summary>Crea una matrice di scala dalla scala del vettore specificata.</summary>
      <param name="scales">Scala da usare.</param>
      <returns>Matrice di scala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crea una matrice di scala con un punto centrale.</summary>
      <param name="scales">Vettore contenente la quantità in base a cui eseguire la scala per ogni asse.</param>
      <param name="centerPoint">Punto centrale.</param>
      <returns>Matrice di scala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single)">
      <summary>Crea una matrice di scala uniforme che viene ridimensionata in modo equo lungo ogni asse.</summary>
      <param name="scale">Fattore di scala uniforme.</param>
      <returns>Matrice di scala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Numerics.Vector3)">
      <summary>Crea una matrice di scala uniforme che viene ridimensionata in modo equo lungo ogni asse con un punto centrale.</summary>
      <param name="scale">Fattore di scala uniforme.</param>
      <param name="centerPoint">Punto centrale.</param>
      <returns>Matrice di scala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single)">
      <summary>Crea una matrice di scala dai componenti X, Y e Z specificati.</summary>
      <param name="xScale">Valore di scala per l'asse X.</param>
      <param name="yScale">Valore di scala per l'asse Y.</param>
      <param name="zScale">Valore di scala per l'asse Z.</param>
      <returns>Matrice di scala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,System.Numerics.Vector3)">
      <summary>Crea una matrice di scala con un offset in base a un punto centrale specificato.</summary>
      <param name="xScale">Valore di scala per l'asse X.</param>
      <param name="yScale">Valore di scala per l'asse Y.</param>
      <param name="zScale">Valore di scala per l'asse Z.</param>
      <param name="centerPoint">Punto centrale.</param>
      <returns>Matrice di scala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateShadow(System.Numerics.Vector3,System.Numerics.Plane)">
      <summary>Crea una matrice che appiattisce la geometria in un piano specificato come se si proiettasse un'ombra da una sorgente di luce specificata.</summary>
      <param name="lightDirection">Direzione da cui proviene la luce che proietta l'ombra.</param>
      <param name="plane">Piano sul quale la nuova matrice deve appiattire la geometria per proiettare l'ombra.</param>
      <returns>Nuova matrice che può essere usata per appiattire la geometria sul piano specificato dalla direzione specificata.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Numerics.Vector3)">
      <summary>Crea una matrice di traslazione dal vettore tridimensionale specificato.</summary>
      <param name="position">Quantità in base a cui eseguire la traslazione per ogni asse.</param>
      <returns>Matrice di traslazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary>Crea una matrice di traslazione dai componenti X, Y e Z specificati.</summary>
      <param name="xPosition">Quantità in base a cui eseguire la traslazione sull'asse X.</param>
      <param name="yPosition">Quantità in base a cui eseguire la traslazione sull'asse Y.</param>
      <param name="zPosition">Quantità in base a cui eseguire la traslazione sull'asse Z.</param>
      <returns>Matrice di traslazione.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateWorld(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crea una nuova matrice globale con i parametri specificati.</summary>
      <param name="position">Posizione dell'oggetto.</param>
      <param name="forward">Direzione in avanti dell'oggetto.</param>
      <param name="up">Direzione verso l'alto dell'oggetto. Il valore è in genere <c>[0, 1, 0]</c>.</param>
      <returns>Matrice globale.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Decompose(System.Numerics.Matrix4x4,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@)">
      <summary>Tenta di estrarre i componenti di scala, traslazione e rotazione dalla matrice di scala, rotazione o traslazione specificata. Il valore restituito indica se l'operazione è riuscita.</summary>
      <param name="matrix">Matrice di origine.</param>
      <param name="scale">Il valore restituito dal metodo, se l'operazione è riuscita, contiene il componente di scala della matrice di trasformazione.</param>
      <param name="rotation">Il valore restituito dal metodo, se l'operazione è riuscita, contiene il componente di rotazione della matrice di trasformazione.</param>
      <param name="translation">Il valore restituito dal metodo, se l'operazione è riuscita, contiene il componente di traslazione della matrice di trasformazione.</param>
      <returns>
        <see langword="true" /> se <paramref name="matrix" /> è stato scomposto correttamente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Numerics.Matrix4x4)">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un'altra matrice 4x4.</summary>
      <param name="other">L'altra matrice.</param>
      <returns>
        <see langword="true" /> se le due matrici sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Object)">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="obj">Oggetto da confrontare con l'istanza corrente.</param>
      <returns>
        <see langword="true" /> se l'istanza corrente è uguale a <paramref name="obj" />; in caso contrario, <see langword="false" />. Se <paramref name="obj" /> è <see langword="null" />, il metodo restituisce <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetDeterminant">
      <summary>Calcola il determinante della matrice 4x4 corrente.</summary>
      <returns>Determinante.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Identity">
      <summary>Ottiene la matrice identità moltiplicativa.</summary>
      <returns>Ottiene la matrice identità moltiplicativa.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Invert(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4@)">
      <summary>Inverte la matrice specificata. Il valore restituito indica se l'operazione è riuscita.</summary>
      <param name="matrix">Matrice da invertire.</param>
      <param name="result">Il valore restituito dal metodo, se l'operazione è riuscita, contiene la matrice invertita.</param>
      <returns>
        <see langword="true" /> se <paramref name="matrix" /> è stato convertito correttamente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.IsIdentity">
      <summary>Indica se la matrice corrente è la matrice identità.</summary>
      <returns>
        <see langword="true" /> se la matrice corrente è la matrice identità; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Lerp(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Single)">
      <summary>Esegue un'interpolazione lineare da una matrice a una seconda matrice in base a un valore che specifica il peso della seconda matrice.</summary>
      <param name="matrix1">Prima matrice.</param>
      <param name="matrix2">Seconda matrice.</param>
      <param name="amount">Peso relativo di <paramref name="matrix2" />.</param>
      <returns>Matrice interpolata.</returns>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M11">
      <summary>Primo elemento della prima riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M12">
      <summary>Secondo elemento della prima riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M13">
      <summary>Terzo elemento della prima riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M14">
      <summary>Quarto elemento della prima riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M21">
      <summary>Primo elemento della seconda riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M22">
      <summary>Secondo elemento della seconda riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M23">
      <summary>Terzo elemento della seconda riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M24">
      <summary>Quarto elemento della seconda riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M31">
      <summary>Primo elemento della terza riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M32">
      <summary>Secondo elemento della terza riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M33">
      <summary>Terzo elemento della terza riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M34">
      <summary>Quarto elemento della terza riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M41">
      <summary>Primo elemento della quarta riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M42">
      <summary>Secondo elemento della quarta riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M43">
      <summary>Terzo elemento della quarta riga.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M44">
      <summary>Quarto elemento della quarta riga.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Restituisce la matrice risultante dalla moltiplicazione di due matrici.</summary>
      <param name="value1">Prima matrice.</param>
      <param name="value2">Seconda matrice.</param>
      <returns>Matrice prodotto.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>Restituisce la matrice risultante dall'operazione di ridimensionamento su tutti gli elementi di una matrice specificata in base a un fattore scalare.</summary>
      <param name="value1">Matrice da scalare.</param>
      <param name="value2">Valore di scala da usare.</param>
      <returns>Matrice scalata.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Negate(System.Numerics.Matrix4x4)">
      <summary>Nega la matrice specificata moltiplicando tutti i relativi valori per -1.</summary>
      <param name="value">Matrice da negare.</param>
      <returns>Matrice negata.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Addition(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Aggiunge ogni elemento in una matrice con il relativo elemento corrispondente in una seconda matrice.</summary>
      <param name="value1">Prima matrice.</param>
      <param name="value2">Seconda matrice.</param>
      <returns>Matrice contenente i valori sommati.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Equality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Restituisce un valore che indica se le matrici specificate sono uguali.</summary>
      <param name="value1">Prima matrice da confrontare.</param>
      <param name="value2">Seconda matrice da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="value1" /> e <paramref name="value2" /> sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Inequality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Restituisce un valore che indica se le matrici specificate non sono uguali.</summary>
      <param name="value1">Prima matrice da confrontare.</param>
      <param name="value2">Seconda matrice da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="value1" /> e <paramref name="value2" /> non sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Restituisce la matrice risultante dalla moltiplicazione di due matrici.</summary>
      <param name="value1">Prima matrice.</param>
      <param name="value2">Seconda matrice.</param>
      <returns>Matrice prodotto.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>Restituisce la matrice risultante dall'operazione di ridimensionamento su tutti gli elementi di una matrice specificata in base a un fattore scalare.</summary>
      <param name="value1">Matrice da scalare.</param>
      <param name="value2">Valore di scala da usare.</param>
      <returns>Matrice scalata.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Subtraction(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Sottrae ogni elemento in una seconda matrice dall'elemento corrispondente in una prima matrice.</summary>
      <param name="value1">Prima matrice.</param>
      <param name="value2">Seconda matrice.</param>
      <returns>Matrice contenente i valori risultanti dalla sottrazione di ogni elemento in <paramref name="value2" /> dal relativo elemento corrispondente in <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_UnaryNegation(System.Numerics.Matrix4x4)">
      <summary>Nega la matrice specificata moltiplicando tutti i relativi valori per -1.</summary>
      <param name="value">Matrice da negare.</param>
      <returns>Matrice negata.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Subtract(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Sottrae ogni elemento in una seconda matrice dall'elemento corrispondente in una prima matrice.</summary>
      <param name="value1">Prima matrice.</param>
      <param name="value2">Seconda matrice.</param>
      <returns>Matrice contenente i valori risultanti dalla sottrazione di ogni elemento in <paramref name="value2" /> dal relativo elemento corrispondente in <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.ToString">
      <summary>Restituisce una stringa che rappresenta la matrice.</summary>
      <returns>Rappresentazione di stringa di questa matrice.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transform(System.Numerics.Matrix4x4,System.Numerics.Quaternion)">
      <summary>Trasforma la matrice specificata applicando la rotazione Quaternion specificata.</summary>
      <param name="value">Matrice da trasformare.</param>
      <param name="rotation">Rotazione da applicare.</param>
      <returns>Matrice trasformata.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Translation">
      <summary>Ottiene o imposta il componente traslazione di questa matrice.</summary>
      <returns>Componente traslazione dell'istanza corrente.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transpose(System.Numerics.Matrix4x4)">
      <summary>Traspone le righe e le colonne di una matrice.</summary>
      <param name="matrix">Matrice da trasporre.</param>
      <returns>Matrice trasposta.</returns>
    </member>
    <member name="T:System.Numerics.Plane">
      <summary>Rappresenta un piano nello spazio tridimensionale.</summary>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Crea un oggetto <see cref="T:System.Numerics.Plane" /> da una normale specificata e dalla distanza lungo la normale dall'origine.</summary>
      <param name="normal">Vettore normale del piano.</param>
      <param name="d">Distanza del piano dall'origine lungo il relativo vettore normale.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector4)">
      <summary>Crea un oggetto <see cref="T:System.Numerics.Plane" /> da un vettore quadridimensionale specificato.</summary>
      <param name="value">Vettore i cui primi tre elementi descrivono il vettore normale e il cui oggetto <see cref="F:System.Numerics.Vector4.W" /> definisce la distanza lungo tale normale dall'origine.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea un oggetto <see cref="T:System.Numerics.Plane" /> dai componenti X, Y e Z della normale e della distanza dall'origine su tale normale.</summary>
      <param name="x">Componente X della normale.</param>
      <param name="y">Componente Y della normale.</param>
      <param name="z">Componente Z della normale.</param>
      <param name="d">Distanza del piano lungo la relativa normale dall'origine.</param>
    </member>
    <member name="M:System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crea un oggetto <see cref="T:System.Numerics.Plane" /> contenente tre punti specificati.</summary>
      <param name="point1">Primo punto che definisce il piano.</param>
      <param name="point2">Secondo punto che definisce il piano.</param>
      <param name="point3">Terzo punto che definisce il piano.</param>
      <returns>Piano contenente i tre punti.</returns>
    </member>
    <member name="F:System.Numerics.Plane.D">
      <summary>Distanza del piano lungo la relativa normale dall'origine.</summary>
    </member>
    <member name="M:System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)">
      <summary>Calcola il prodotto scalare di un piano e di un vettore quadridimensionale.</summary>
      <param name="plane">Piano.</param>
      <param name="value">Vettore quadridimensionale.</param>
      <returns>Prodotto scalare.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>Restituisce il prodotto scalare di un vettore tridimensionale specificato e il vettore normale di questo piano, più il valore (<see cref="F:System.Numerics.Plane.D" />) della distanza del piano.</summary>
      <param name="plane">Piano.</param>
      <param name="value">Vettore tridimensionale.</param>
      <returns>Prodotto scalare.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>Restituisce il prodotto scalare di un vettore tridimensionale specificato e del vettore <see cref="F:System.Numerics.Plane.Normal" /> di tale piano.</summary>
      <param name="plane">Piano.</param>
      <param name="value">Vettore tridimensionale.</param>
      <returns>Prodotto scalare.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Numerics.Plane)">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un altro oggetto piano.</summary>
      <param name="other">L'altro piano.</param>
      <returns>
        <see langword="true" /> se i due piani sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Object)">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="obj">Oggetto da confrontare con l'istanza corrente.</param>
      <returns>
        <see langword="true" /> se l'istanza corrente è uguale a <paramref name="obj" />; in caso contrario, <see langword="false" />. Se <paramref name="obj" /> è <see langword="null" />, il metodo restituisce <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash.</returns>
    </member>
    <member name="F:System.Numerics.Plane.Normal">
      <summary>Vettore normale del piano.</summary>
    </member>
    <member name="M:System.Numerics.Plane.Normalize(System.Numerics.Plane)">
      <summary>Crea un nuovo oggetto <see cref="T:System.Numerics.Plane" /> il cui vettore normale è il vettore normale del piano di origine normalizzato.</summary>
      <param name="value">Piano di origine.</param>
      <returns>Piano normalizzato.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>Restituisce un valore che indica se due piani sono uguali.</summary>
      <param name="value1">Primo piano da confrontare.</param>
      <param name="value2">Secondo piano da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="value1" /> e <paramref name="value2" /> sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>Restituisce un valore che indica se due piani non sono uguali.</summary>
      <param name="value1">Primo piano da confrontare.</param>
      <param name="value2">Secondo piano da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="value1" /> e <paramref name="value2" /> non sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.ToString">
      <summary>Restituisce la rappresentazione di stringa di questo oggetto piano.</summary>
      <returns>Stringa che rappresenta questo oggetto <see cref="T:System.Numerics.Plane" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)">
      <summary>Trasforma un piano normalizzato in base a una matrice 4x4.</summary>
      <param name="plane">Piano normalizzato da trasformare.</param>
      <param name="matrix">Matrice di trasformazione da applicare a <paramref name="plane" />.</param>
      <returns>Piano trasformato.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)">
      <summary>Trasforma un piano normalizzato in base a una rotazione Quaternion.</summary>
      <param name="plane">Piano normalizzato da trasformare.</param>
      <param name="rotation">Rotazione Quaternion da applicare al piano.</param>
      <returns>Nuovo piano risultante dall'applicazione della rotazione Quaternion.</returns>
    </member>
    <member name="T:System.Numerics.Quaternion">
      <summary>Rappresenta un vettore usato per codificare le rotazioni fisiche tridimensionali.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Crea un quaternione dal vettore e dalle parti vettore e rotazione specificate.</summary>
      <param name="vectorPart">Parte vettore del quaternione.</param>
      <param name="scalarPart">Parte rotazione del quaternione.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Costruisce un quaternione dai componenti specificati.</summary>
      <param name="x">Valore da assegnare al componente X del quaternione.</param>
      <param name="y">Valore da assegnare al componente Y del quaternione.</param>
      <param name="z">Valore da assegnare al componente Z del quaternione.</param>
      <param name="w">Valore da assegnare al componente W del quaternione.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Aggiunge ogni elemento in un quaternione con il relativo elemento corrispondente in un secondo quaternione.</summary>
      <param name="value1">Primo quaternione.</param>
      <param name="value2">Secondo quaternione.</param>
      <returns>Quaternione contenente i valori sommati di <paramref name="value1" /> e <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Concatena due quaternioni.</summary>
      <param name="value1">Prima rotazione del quaternione nella serie.</param>
      <param name="value2">Seconda rotazione del quaternione nella serie.</param>
      <returns>Nuovo quaternione che rappresenta la concatenazione della rotazione di <paramref name="value1" /> seguita dalla rotazione di <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)">
      <summary>Restituisce il coniugato del quaternione specificato.</summary>
      <param name="value">Quaternione.</param>
      <returns>Nuovo quaternione coniugato di <see langword="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>Crea un quaternione da un vettore unitario e un angolo per la rotazione del vettore.</summary>
      <param name="axis">Vettore unitario da sottoporre a rotazione.</param>
      <param name="angle">Angolo, in radianti, di rotazione intorno al vettore.</param>
      <returns>Quaternione appena creato.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)">
      <summary>Crea un quaternione dalla matrice di rotazione specificata.</summary>
      <param name="matrix">Matrice di rotazione.</param>
      <returns>Quaternione appena creato.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Crea un nuovo quaternione dalla rotazione intorno agli assi y, x e z specificati.</summary>
      <param name="yaw">Angolo di rotazione intorno all'asse Y, in radianti.</param>
      <param name="pitch">Angolo di rotazione intorno all'asse X, in radianti.</param>
      <param name="roll">Angolo di rotazione intorno all'asse Z, in radianti.</param>
      <returns>Quaternione risultante.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Divide un quaternione per un secondo quaternione.</summary>
      <param name="value1">Dividendo.</param>
      <param name="value2">Divisore.</param>
      <returns>Quaternione risultante dalla divisione di <paramref name="value1" /> per <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Calcola il prodotto scalare di due quaternioni.</summary>
      <param name="quaternion1">Primo quaternione.</param>
      <param name="quaternion2">Secondo quaternione.</param>
      <returns>Prodotto scalare.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un altro quaternione.</summary>
      <param name="other">L'altro quaternione.</param>
      <returns>
        <see langword="true" /> se i due quaternioni sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Object)">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="obj">Oggetto da confrontare con l'istanza corrente.</param>
      <returns>
        <see langword="true" /> se l'istanza corrente è uguale a <paramref name="obj" />; in caso contrario, <see langword="false" />. Se <paramref name="obj" /> è <see langword="null" />, il metodo restituisce <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.Identity">
      <summary>Ottiene un quaternione che non rappresenta alcuna rotazione.</summary>
      <returns>Quaternione i cui valori sono <c>(0, 0, 0, 1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)">
      <summary>Restituisce l'inversa di un quaternione.</summary>
      <param name="value">Quaternione.</param>
      <returns>Quaternione invertito.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.IsIdentity">
      <summary>Ottiene un valore che indica se l'istanza corrente è il quaternione identità.</summary>
      <returns>
        <see langword="true" /> se l'istanza corrente è il quaternione identità; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Length">
      <summary>Calcola la lunghezza del quaternione.</summary>
      <returns>Lunghezza calcolata del quaternione.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.LengthSquared">
      <summary>Calcola la lunghezza quadratica del quaternione.</summary>
      <returns>Lunghezza quadratica del quaternione.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>Esegue un'interpolazione lineare tra due quaternioni in base a un valore che specifica il peso del secondo quaternione.</summary>
      <param name="quaternion1">Primo quaternione.</param>
      <param name="quaternion2">Secondo quaternione.</param>
      <param name="amount">Peso relativo dell'oggetto <paramref name="quaternion2" /> nell'interpolazione.</param>
      <returns>Quaternione interpolato.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Restituisce il quaternione risultante dalla moltiplicazione di due quaternioni.</summary>
      <param name="value1">Primo quaternione.</param>
      <param name="value2">Secondo quaternione.</param>
      <returns>Quaternione prodotto.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>Restituisce il quaternione risultante dal ridimensionamento di tutti i componenti di un quaternione specificato per un fattore scalare.</summary>
      <param name="value1">Quaternione di origine.</param>
      <param name="value2">Valore scalare.</param>
      <returns>Quaternione scalato.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)">
      <summary>Inverte il segno di ogni componente del quaternione.</summary>
      <param name="value">Quaternione da negare.</param>
      <returns>Quaternione negato.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)">
      <summary>Divide ogni componente di un oggetto <see cref="T:System.Numerics.Quaternion" /> specificato per la relativa lunghezza.</summary>
      <param name="value">Quaternione da normalizzare.</param>
      <returns>Quaternione normalizzato.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Aggiunge ogni elemento in un quaternione con il relativo elemento corrispondente in un secondo quaternione.</summary>
      <param name="value1">Primo quaternione.</param>
      <param name="value2">Secondo quaternione.</param>
      <returns>Quaternione contenente i valori sommati di <paramref name="value1" /> e <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Divide un quaternione per un secondo quaternione.</summary>
      <param name="value1">Dividendo.</param>
      <param name="value2">Divisore.</param>
      <returns>Quaternione risultante dalla divisione di <paramref name="value1" /> per <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Restituisce un valore che indica se due quaternioni sono uguali.</summary>
      <param name="value1">Primo quaternione da confrontare.</param>
      <param name="value2">Secondo quaternione da confrontare.</param>
      <returns>
        <see langword="true" /> se i due quaternioni sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Restituisce un valore che indica se due quaternioni non sono uguali.</summary>
      <param name="value1">Primo quaternione da confrontare.</param>
      <param name="value2">Secondo quaternione da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="value1" /> e <paramref name="value2" /> non sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Restituisce il quaternione risultante dalla moltiplicazione di due quaternioni.</summary>
      <param name="value1">Primo quaternione.</param>
      <param name="value2">Secondo quaternione.</param>
      <returns>Quaternione prodotto.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>Restituisce il quaternione risultante dal ridimensionamento di tutti i componenti di un quaternione specificato per un fattore scalare.</summary>
      <param name="value1">Quaternione di origine.</param>
      <param name="value2">Valore scalare.</param>
      <returns>Quaternione scalato.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Sottrae ogni elemento in un secondo quaternione dall'elemento corrispondente in un primo quaternione.</summary>
      <param name="value1">Primo quaternione.</param>
      <param name="value2">Secondo quaternione.</param>
      <returns>Quaternione contenente i valori risultanti dalla sottrazione di ogni elemento in <paramref name="value2" /> dal relativo elemento corrispondente in <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)">
      <summary>Inverte il segno di ogni componente del quaternione.</summary>
      <param name="value">Quaternione da negare.</param>
      <returns>Quaternione negato.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>Esegue l'interpolazione tra due quaternioni usando l'interpolazione lineare sferica.</summary>
      <param name="quaternion1">Primo quaternione.</param>
      <param name="quaternion2">Secondo quaternione.</param>
      <param name="amount">Peso relativo del secondo quaternione nell'interpolazione.</param>
      <returns>Quaternione interpolato.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Sottrae ogni elemento in un secondo quaternione dall'elemento corrispondente in un primo quaternione.</summary>
      <param name="value1">Primo quaternione.</param>
      <param name="value2">Secondo quaternione.</param>
      <returns>Quaternione contenente i valori risultanti dalla sottrazione di ogni elemento in <paramref name="value2" /> dal relativo elemento corrispondente in <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.ToString">
      <summary>Restituisce una stringa che rappresenta il quaternione corrente.</summary>
      <returns>Rappresentazione di stringa di questo quaternione.</returns>
    </member>
    <member name="F:System.Numerics.Quaternion.W">
      <summary>Componente rotazione del quaternione.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.X">
      <summary>Valore X del componente del vettore del quaternione.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Y">
      <summary>Valore Y del componente del vettore del quaternione.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Z">
      <summary>Valore Z del componente del vettore del quaternione.</summary>
    </member>
    <member name="T:System.Numerics.Vector">
      <summary>Fornisce una raccolta di metodi pratici statici per la creazione, la modifica, la combinazione e la conversione di vettori generici.</summary>
    </member>
    <member name="M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore i cui elementi sono i valori assoluti di ognuno degli elementi del vettore specificato.</summary>
      <param name="value">Vettore di origine.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Valore assoluto del vettore.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore i cui valori sono la somma di ogni coppia di elementi da due vettori specificati.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore sommato.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore tramite un'operazione And Not bit per bit in ogni coppia di elementi corrispondenti in due vettori.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta i bit di un vettore specificato in quelli di un vettore di byte senza segno.</summary>
      <param name="value">Vettore di origine.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta i bit di un vettore specificato in quelli di un vettore a virgola mobile a precisione doppia.</summary>
      <param name="value">Vettore di origine.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta i bit di un vettore specificato in quelli di un vettore di interi a 16 bit.</summary>
      <param name="value">Vettore di origine.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta i bit di un vettore specificato in quelli di un vettore di interi.</summary>
      <param name="value">Vettore di origine.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta i bit di un vettore specificato in quelli di un vettore di valori Long Integer.</summary>
      <param name="value">Vettore di origine.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta i bit di un vettore specificato in quelli di un vettore di byte con segno.</summary>
      <param name="value">Vettore di origine.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta i bit di un vettore specificato in quelli di un vettore a virgola mobile a precisione singola.</summary>
      <param name="value">Vettore di origine.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta i bit di un vettore specificato in quelli di un vettore di interi senza segno a 16 bit.</summary>
      <param name="value">Vettore di origine.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta i bit di un vettore specificato in quelli di un vettore di interi senza segno.</summary>
      <param name="value">Vettore di origine.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta i bit di un vettore specificato in quelli di un vettore di valori Unsigned Long Integer.</summary>
      <param name="value">Vettore di origine.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore tramite un'operazione <see langword="And" /> bit per bit in ogni coppia di elementi in due vettori.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore tramite un'operazione <see langword="Or" /> bit per bit in ogni coppia di elementi in due vettori.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Crea un nuovo vettore a precisione singola con gli elementi selezionati tra due vettori di origine a precisione singola specificati in base a un mascheramento vettore integrale.</summary>
      <param name="condition">Vettore mascheramento integrale usato per la selezione.</param>
      <param name="left">Primo vettore di origine.</param>
      <param name="right">Secondo vettore di origine.</param>
      <returns>Nuovo vettore con gli elementi selezionati in base alla maschera.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Crea un nuovo vettore a precisione doppia con gli elementi selezionati tra due vettori di origine a precisione doppia specificati in base a un mascheramento vettore integrale.</summary>
      <param name="condition">Vettore mascheramento integrale usato per la selezione.</param>
      <param name="left">Primo vettore di origine.</param>
      <param name="right">Secondo vettore di origine.</param>
      <returns>Nuovo vettore con gli elementi selezionati in base alla maschera.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Crea un nuovo vettore di un tipo specificato con gli elementi selezionati tra due vettori di origine specificati in base a un mascheramento vettore integrale.</summary>
      <param name="condition">Vettore mascheramento integrale usato per la selezione.</param>
      <param name="left">Primo vettore di origine.</param>
      <param name="right">Secondo vettore di origine.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Nuovo vettore con gli elementi selezionati in base alla maschera.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})">
      <summary>Converte <see cref="System.Numerics.Vector{System.Int64}" /> in <see cref="System.Numerics.Vector{System.Double}" />.</summary>
      <param name="value">Vettore di origine.</param>
      <returns>Vettore convertito.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})">
      <summary>Converte <see cref="System.Numerics.Vector{System.UInt64}" /> in <see cref="System.Numerics.Vector{System.Double}" />.</summary>
      <param name="value">Vettore di origine.</param>
      <returns>Vettore convertito.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})">
      <summary>Converte <see cref="System.Numerics.Vector{System.Single}" /> in <see cref="System.Numerics.Vector{System.Int32}" />.</summary>
      <param name="value">Vettore di origine.</param>
      <returns>Vettore convertito.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})">
      <summary>Converte <see cref="System.Numerics.Vector{System.Double}" /> in <see cref="System.Numerics.Vector{System.Int64}" />.</summary>
      <param name="value">Vettore di origine.</param>
      <returns>Vettore convertito.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})">
      <summary>Converte <see cref="System.Numerics.Vector{System.Int32}" /> in <see cref="System.Numerics.Vector{System.Single}" />.</summary>
      <param name="value">Vettore di origine.</param>
      <returns>Vettore convertito.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})">
      <summary>Converte <see cref="System.Numerics.Vector{System.UInt32}" /> in <see cref="System.Numerics.Vector{System.Single}" />.</summary>
      <param name="value">Vettore di origine.</param>
      <returns>Vettore convertito.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})">
      <summary>Converte <see cref="System.Numerics.Vector{System.Single}" /> in <see cref="System.Numerics.Vector{System.UInt32}" />.</summary>
      <param name="value">Vettore di origine.</param>
      <returns>Vettore convertito.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})">
      <summary>Converte <see cref="System.Numerics.Vector{System.Double}" /> in <see cref="System.Numerics.Vector{System.UInt64}" />.</summary>
      <param name="value">Vettore di origine.</param>
      <returns>Vettore convertito.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore i cui valori sono il risultato della divisione degli elementi del primo vettore per gli elementi corrispondenti nel secondo vettore.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Valore diviso.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce il prodotto scalare di due vettori.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Prodotto scalare.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in due vettori a precisione doppia specificati sono uguali.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore integrale risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in due vettori integrali specificati sono uguali.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore integrale risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in due vettori di tipo Long Integer specificati sono uguali.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore di tipo Long Integer risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in due vettori a precisione singola specificati sono uguali.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore integrale risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore di un tipo specificato i cui elementi indicano se gli elementi in due vettori specificati dello stesso tipo sono uguali.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un valore che indica se le coppie di elementi nei vettori specificati sono uguali.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se tutti gli elementi in <paramref name="left" /> e <paramref name="right" /> sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un valore che indica se qualsiasi coppia singola di elementi in due vettori specificati è uguale.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se qualsiasi coppia singola in <paramref name="left" /> e <paramref name="right" /> è uguale; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore a virgola mobile a precisione doppia sono maggiori dei relativi elementi corrispondenti in un secondo vettore a virgola mobile a precisione doppia.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore integrale risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore integrale sono maggiori dei relativi elementi corrispondenti nel secondo vettore integrale.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore integrale risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Restituisce un nuovo vettore di tipo Long Integer i cui elementi indicano se gli elementi in un vettore di tipo Long Integer sono maggiori dei relativi elementi corrispondenti in un secondo vettore di tipo Long Integer.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore di tipo Long Integer risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore a virgola mobile a precisione singola sono maggiori dei relativi elementi corrispondenti in un secondo vettore a virgola mobile a precisione singola.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore integrale risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore i cui elementi indicano se gli elementi in un vettore di un tipo specificato sono maggiori dei relativi elementi corrispondenti nel secondo vettore dello stesso tipo.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un valore che indica se tutti gli elementi nel primo vettore sono maggiori degli elementi corrispondenti nel secondo vettore.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se tutti gli elementi in <paramref name="left" /> sono maggiori degli elementi corrispondenti in <paramref name="right" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un valore che indica se qualsiasi elemento nel primo vettore è maggiore dell'elemento corrispondente nel secondo vettore.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se qualsiasi elemento in <paramref name="left" /> è maggiore dell'elemento corrispondente in <paramref name="right" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore sono maggiori o uguali ai relativi elementi corrispondenti nel secondo vettore a virgola mobile a precisione doppia.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore integrale risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore integrale sono maggiori o uguali ai relativi elementi corrispondenti nel secondo vettore integrale.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore integrale risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Restituisce un nuovo vettore Long Integer i cui elementi indicano se gli elementi in un vettore Long Integer sono maggiori o uguali ai relativi elementi corrispondenti nel secondo vettore Long Integer.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore di tipo Long Integer risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore sono maggiori o uguali ai relativi elementi corrispondenti nel secondo vettore a virgola mobile a precisione singola.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore integrale risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore i cui elementi indicano se gli elementi in un vettore di un tipo specificato sono maggiori o uguali ai relativi elementi corrispondenti nel secondo vettore dello stesso tipo.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un valore che indica se tutti gli elementi nel primo vettore sono maggiori  uguali a tutti gli elementi corrispondenti nel secondo vettore.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se tutti gli elementi in <paramref name="left" /> sono maggiori o uguali agli elementi corrispondenti in <paramref name="right" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un valore che indica se qualsiasi elemento nel primo vettore è maggiore o uguale all'elemento corrispondente nel secondo vettore.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se qualsiasi elemento in <paramref name="left" /> è maggiore o uguale all'elemento corrispondente in <paramref name="right" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Vector.IsHardwareAccelerated">
      <summary>Ottiene un valore che indica se le operazioni vettore sono soggette ad accelerazione hardware tramite supporto intrinseco JIT.</summary>
      <returns>
        <see langword="true" /> se le operazioni vettore sono soggette ad accelerazione hardware; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore a virgola mobile a precisione doppia sono minori dei relativi elementi corrispondenti in un secondo vettore a virgola mobile a precisione doppia.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore integrale risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore integrale sono minori dei relativi elementi corrispondenti nel secondo vettore integrale.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore integrale risultante</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Restituisce un nuovo vettore Long Integer i cui elementi indicano se gli elementi in un vettore Long Integer sono minori dei relativi elementi corrispondenti in un secondo vettore Long Integer.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore di tipo Long Integer risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore a precisione singola sono minori dei relativi elementi corrispondenti in un secondo vettore a precisione singola.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore integrale risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore di un tipo specificato i cui elementi indicano se gli elementi in un vettore sono minori dei relativi elementi corrispondenti nel secondo vettore.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un valore che indica se tutti gli elementi nel primo vettore sono minori degli elementi corrispondenti nel secondo vettore.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se tutti gli elementi in <paramref name="left" /> sono minori degli elementi corrispondenti in <paramref name="right" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un valore che indica se qualsiasi elemento nel primo vettore è minore dell'elemento corrispondente nel secondo vettore.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se qualsiasi elemento in <paramref name="left" /> è minore dell'elemento corrispondente in <paramref name="right" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore a virgola mobile a precisione doppia sono minori o uguali ai relativi elementi corrispondenti in un secondo vettore a virgola mobile a precisione doppia.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore integrale risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore integrale sono minori o uguali ai relativi elementi corrispondenti nel secondo vettore integrale.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore integrale risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Restituisce un nuovo vettore Long Integer i cui elementi indicano se gli elementi in un vettore Long Integer sono minori o uguali ai relativi elementi corrispondenti in un secondo vettore Long Integer.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore di tipo Long Integer risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Restituisce un nuovo vettore integrale i cui elementi indicano se gli elementi in un vettore a virgola mobile a precisione singola sono minori o uguali ai relativi elementi corrispondenti in un secondo vettore a virgola mobile a precisione singola.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>Vettore integrale risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore i cui elementi indicano se gli elementi in un vettore sono minori o uguali ai relativi elementi corrispondenti nel secondo vettore.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un valore che indica se tutti gli elementi nel primo vettore sono minori o uguali agli elementi corrispondenti nel secondo vettore.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se tutti gli elementi in <paramref name="left" /> sono minori o uguali agli elementi corrispondenti in <paramref name="right" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un valore che indica se qualsiasi elemento nel primo vettore è minore o uguale all'elemento corrispondente nel secondo vettore.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>
        <see langword="true" /> se qualsiasi elemento in <paramref name="left" /> è minore o uguale all'elemento corrispondente in <paramref name="right" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore i cui elementi sono costituiti dal valore più alto di ogni coppia di elementi nei due vettori specificati.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore massimo.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore i cui elementi sono costituiti dal valore più basso di ogni coppia di elementi nei due vettori specificati.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore minimo.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore i cui valori sono un valore scalare moltiplicato per ognuno dei valori di un vettore specificato.</summary>
      <param name="left">Valore scalare.</param>
      <param name="right">Vettore.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore scalato.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)">
      <summary>Restituisce un nuovo vettore i cui valori sono un valore scalare moltiplicato per ognuno dei valori di un vettore specificato.</summary>
      <param name="left">Vettore.</param>
      <param name="right">Valore scalare.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore scalato.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore i cui valori sono il prodotto di ogni coppia di elementi in due vettori specificati.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore prodotto per gli elementi.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Restringe due istanze di <see cref="System.Numerics.Vector{System.Double}" /> in un'istanza di <see cref="System.Numerics.Vector{System.Single}" />.</summary>
      <param name="source1">Primo vettore di origine, i cui elementi diventano gli elementi di indice inferiore del valore restituito.</param>
      <param name="source2">Secondo vettore di origine, i cui elementi diventano gli elementi di indice superiore del valore restituito.</param>
      <returns>
        <see cref="System.Numerics.Vector{System.Single}" /> contenente gli elementi ristretti dai vettori di origine.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})">
      <summary>Restringe due istanze di <see cref="System.Numerics.Vector{System.Int16}" /> in un'istanza di <see cref="System.Numerics.Vector{System.SByte}" />.</summary>
      <param name="source1">Primo vettore di origine, i cui elementi diventano gli elementi di indice inferiore del valore restituito.</param>
      <param name="source2">Secondo vettore di origine, i cui elementi diventano gli elementi di indice superiore del valore restituito.</param>
      <returns>
        <see cref="System.Numerics.Vector{System.SByte}" /> contenente gli elementi ristretti dai vettori di origine.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Restringe due istanze di <see cref="System.Numerics.Vector{System.Int32}" /> in un'istanza di <see cref="System.Numerics.Vector{System.Int16}" />.</summary>
      <param name="source1">Primo vettore di origine, i cui elementi diventano gli elementi di indice inferiore del valore restituito.</param>
      <param name="source2">Secondo vettore di origine, i cui elementi diventano gli elementi di indice superiore del valore restituito.</param>
      <returns>
        <see cref="System.Numerics.Vector{System.Int16}" /> contenente gli elementi ristretti dai vettori di origine.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Restringe due istanze di <see cref="System.Numerics.Vector{System.Int64}" /> in un'istanza di <see cref="System.Numerics.Vector{System.Int32}" />.</summary>
      <param name="source1">Primo vettore di origine, i cui elementi diventano gli elementi di indice inferiore del valore restituito.</param>
      <param name="source2">Secondo vettore di origine, i cui elementi diventano gli elementi di indice superiore del valore restituito.</param>
      <returns>
        <see cref="System.Numerics.Vector{System.Int32}" /> contenente gli elementi ristretti dai vettori di origine.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})">
      <summary>Restringe due istanze di <see cref="System.Numerics.Vector{System.UInt16}" /> in un'istanza di <see cref="System.Numerics.Vector{System.Byte}" />.</summary>
      <param name="source1">Primo vettore di origine, i cui elementi diventano gli elementi di indice inferiore del valore restituito.</param>
      <param name="source2">Secondo vettore di origine, i cui elementi diventano gli elementi di indice superiore del valore restituito.</param>
      <returns>
        <see cref="System.Numerics.Vector{System.Byte}" /> contenente gli elementi ristretti dai vettori di origine.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})">
      <summary>Restringe due istanze di <see cref="System.Numerics.Vector{System.UInt32}" /> in un'istanza di <see cref="System.Numerics.Vector{System.UInt16}" />.</summary>
      <param name="source1">Primo vettore di origine, i cui elementi diventano gli elementi di indice inferiore del valore restituito.</param>
      <param name="source2">Secondo vettore di origine, i cui elementi diventano gli elementi di indice superiore del valore restituito.</param>
      <returns>
        <see cref="System.Numerics.Vector{System.UInt16}" /> contenente gli elementi ristretti dai vettori di origine.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})">
      <summary>Restringe due istanze di <see cref="System.Numerics.Vector{System.UInt64}" /> in un'istanza di <see cref="System.Numerics.Vector{System.UInt32}" />.</summary>
      <param name="source1">Primo vettore di origine, i cui elementi diventano gli elementi di indice inferiore del valore restituito.</param>
      <param name="source2">Secondo vettore di origine, i cui elementi diventano gli elementi di indice superiore del valore restituito.</param>
      <returns>
        <see cref="System.Numerics.Vector{System.UInt32}" /> contenente gli elementi ristretti dai vettori di origine.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore i cui elementi sono la negazione dell'elemento corrispondente nel vettore specificato.</summary>
      <param name="value">Vettore di origine.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore negato.</returns>
    </member>
    <member name="M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore i cui elementi sono ottenuti prendendo il complemento a uno degli elementi di un vettore specificato.</summary>
      <param name="value">Vettore di origine.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore risultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore i cui elementi sono le radici quadrate degli elementi del vettore specificato.</summary>
      <param name="value">Vettore di origine.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore radice quadrata.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore i cui valori sono la differenza tra gli elementi nel secondo vettore e gli elementi corrispondenti nel primo vettore.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore differenza.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)">
      <summary>Estende un'istanza di <see cref="System.Numerics.Vector{System.Byte}" /> in due istanze di <see cref="System.Numerics.Vector{System.UInt16}" />.</summary>
      <param name="source">Vettore di origine i cui elementi vengono estesi negli output.</param>
      <param name="dest1">Primo vettore di output, i cui elementi conterranno gli elementi estesi dagli indici inferiori nel vettore di origine.</param>
      <param name="dest2">Secondo vettore di output, i cui elementi conterranno gli elementi estesi dagli indici superiori nel vettore di origine.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)">
      <summary>Estende un'istanza di <see cref="System.Numerics.Vector{System.Int16}" /> in due istanze di <see cref="System.Numerics.Vector{System.Int32}" />.</summary>
      <param name="source">Vettore di origine i cui elementi vengono estesi negli output.</param>
      <param name="dest1">Primo vettore di output, i cui elementi conterranno gli elementi estesi dagli indici inferiori nel vettore di origine.</param>
      <param name="dest2">Secondo vettore di output, i cui elementi conterranno gli elementi estesi dagli indici superiori nel vettore di origine.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)">
      <summary>Estende un'istanza di <see cref="System.Numerics.Vector{System.Int32}" /> in due istanze di <see cref="System.Numerics.Vector{System.Int64}" />.</summary>
      <param name="source">Vettore di origine i cui elementi vengono estesi negli output.</param>
      <param name="dest1">Primo vettore di output, i cui elementi conterranno gli elementi estesi dagli indici inferiori nel vettore di origine.</param>
      <param name="dest2">Secondo vettore di output, i cui elementi conterranno gli elementi estesi dagli indici superiori nel vettore di origine.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)">
      <summary>Estende un'istanza di <see cref="System.Numerics.Vector{System.SByte}" /> in due istanze di <see cref="System.Numerics.Vector{System.Int16}" />.</summary>
      <param name="source">Vettore di origine i cui elementi vengono estesi negli output.</param>
      <param name="dest1">Primo vettore di output, i cui elementi conterranno gli elementi estesi dagli indici inferiori nel vettore di origine.</param>
      <param name="dest2">Secondo vettore di output, i cui elementi conterranno gli elementi estesi dagli indici superiori nel vettore di origine.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)">
      <summary>Estende un'istanza di <see cref="System.Numerics.Vector{System.Single}" /> in due istanze di <see cref="System.Numerics.Vector{System.Double}" />.</summary>
      <param name="source">Vettore di origine i cui elementi vengono estesi negli output.</param>
      <param name="dest1">Primo vettore di output, i cui elementi conterranno gli elementi estesi dagli indici inferiori nel vettore di origine.</param>
      <param name="dest2">Secondo vettore di output, i cui elementi conterranno gli elementi estesi dagli indici superiori nel vettore di origine.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)">
      <summary>Estende un'istanza di <see cref="System.Numerics.Vector{System.UInt16}" /> in due istanze di <see cref="System.Numerics.Vector{System.UInt32}" />.</summary>
      <param name="source">Vettore di origine i cui elementi vengono estesi negli output.</param>
      <param name="dest1">Primo vettore di output, i cui elementi conterranno gli elementi estesi dagli indici inferiori nel vettore di origine.</param>
      <param name="dest2">Secondo vettore di output, i cui elementi conterranno gli elementi estesi dagli indici superiori nel vettore di origine.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)">
      <summary>Estende un'istanza di <see cref="System.Numerics.Vector{System.UInt32}" /> in due istanze di <see cref="System.Numerics.Vector{System.UInt64}" />.</summary>
      <param name="source">Vettore di origine i cui elementi vengono estesi negli output.</param>
      <param name="dest1">Primo vettore di output, i cui elementi conterranno gli elementi estesi dagli indici inferiori nel vettore di origine.</param>
      <param name="dest2">Secondo vettore di output, i cui elementi conterranno gli elementi estesi dagli indici superiori nel vettore di origine.</param>
    </member>
    <member name="M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Restituisce un nuovo vettore tramite un'operazione Or (<see langword="XOr" />) esclusiva bit per bit in ogni coppia di elementi in due vettori.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
      <returns>Vettore risultante.</returns>
    </member>
    <member name="T:System.Numerics.Vector`1">
      <summary>Rappresenta un singolo vettore di un tipo numerico specificato adatto per l'ottimizzazione a basso livello degli algoritmi paralleli.</summary>
      <typeparam name="T">Tipo di vettore. <c>T</c> può essere qualsiasi tipo numerico primitivo.</typeparam>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0)">
      <summary>Crea un vettore i cui componenti sono del tipo specificato.</summary>
      <param name="value">Tipo numerico che definisce il tipo dei componenti nel vettore.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[])">
      <summary>Crea un vettore da una matrice specificata.</summary>
      <param name="values">Matrice numerica.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
      <summary>Crea un vettore da una matrice specificata, iniziando da una posizione di indice specificata.</summary>
      <param name="values">Matrice numerica.</param>
      <param name="index">Posizione di indice iniziale da cui creare il vettore.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> è <see langword="null" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> è minore di zero.  
In alternativa 
La lunghezza di <paramref name="values" /> meno <paramref name="index" /> è minore di <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{`0})">
      <summary>Costruisce un vettore dall'elemento <see cref="T:System.ReadOnlySpan`1" /> specificato.</summary>
      <param name="values">Valori da aggiungere al vettore come intervallo di sola lettura di oggetti di tipo T. L'intervallo deve contenere almeno gli elementi <see cref="P:System.Numerics.Vector`1.Count" />.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>Costruisce un vettore dall'intervallo di sola lettura di byte specificato.</summary>
      <param name="values">Intervallo di sola lettura di byte contenente i valori da aggiungere al vettore. L'intervallo deve contenere almeno gli elementi <see cref="P:System.Numerics.Vector`1.Count" />.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.Span{`0})">
      <summary>Costruisce un vettore dall'elemento <see cref="T:System.Span`1" /> specificato.</summary>
      <param name="values">Valori da aggiungere al vettore come intervallo di oggetti di tipo T. L'intervallo deve contenere almeno gli elementi <see cref="P:System.Numerics.Vector`1.Count" />.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[])">
      <summary>Copia l'istanza del vettore in una matrice di destinazione specificata.</summary>
      <param name="destination">Matrice che riceve una copia dei valori del vettore.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Il numero di elementi nel vettore corrente è maggiore del numero di elementi disponibili nella matrice <paramref name="destination" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
      <summary>Copia l'istanza del vettore in una matrice di destinazione specificata, partendo dalla posizione dell'indice specificata.</summary>
      <param name="destination">Matrice che riceve una copia dei valori del vettore.</param>
      <param name="startIndex">Indice iniziale in <paramref name="destination" /> in corrispondenza del quale iniziare l'operazione di copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Il numero di elementi nell'istanza corrente è maggiore del numero di elementi disponibili da <paramref name="startIndex" /> alla fine della matrice <paramref name="destination" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> è minore di zero o maggiore dell'ultimo indice in <paramref name="destination" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{`0})">
      <summary>Copia il vettore nell'intervallo specificato. .</summary>
      <param name="destination">Intervallo di destinazione in cui vengono copiati i valori. L'intervallo di destinazione deve essere almeno di dimensione <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.ArgumentException">Il numero degli elementi nel vettore di origine è maggiore degli elementi disponibili nell'intervallo di destinazione.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{System.Byte})">
      <summary>Copia il vettore nell'oggetto <see cref="T:System.Span`1" /> specificato.</summary>
      <param name="destination">Intervallo di destinazione in cui vengono copiati i valori. L'intervallo di destinazione deve essere almeno di dimensione <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.ArgumentException">Il numero degli elementi nel vettore di origine è maggiore degli elementi disponibili nell'intervallo di destinazione.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.Count">
      <summary>Restituisce il numero di elementi archiviati nel vettore.</summary>
      <returns>Numero di elementi archiviati nel vettore.</returns>
      <exception cref="T:System.NotSupportedException">L'accesso al getter proprietà tramite reflection non è supportato.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un vettore specificato.</summary>
      <param name="other">Vettore da confrontare con questa istanza.</param>
      <returns>
        <see langword="true" /> se l'istanza corrente è uguale a <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Object)">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="obj">Oggetto da confrontare con questa istanza.</param>
      <returns>
        <see langword="true" /> se l'istanza corrente è uguale a <paramref name="obj" />; in caso contrario, <see langword="false" />. Il metodo restituisce <see langword="false" /> se <paramref name="obj" /> è Null o se <paramref name="obj" /> è un vettore di un tipo diverso da quello dell'istanza corrente.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Item(System.Int32)">
      <summary>Ottiene l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice dell'elemento da restituire.</param>
      <returns>Elemento in corrispondenza dell'indice <paramref name="index" />.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> è minore di zero.  
-oppure- 
 <paramref name="index" /> è maggiore o uguale a <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.One">
      <summary>Restituisce un vettore contenente tutti uno.</summary>
      <returns>Vettore contenente tutti uno.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Somma due vettori.</summary>
      <param name="left">Primo vettore da sommare.</param>
      <param name="right">Secondo vettore da sommare.</param>
      <returns>Vettore sommato.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Restituisce un nuovo vettore tramite un'operazione <see langword="And" /> bit per bit in ognuno degli elementi in due vettori.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore risultante dall'operazione <see langword="And" /> bit per bit di <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Restituisce un nuovo vettore tramite un'operazione <see langword="Or" /> bit per bit in ognuno degli elementi in due vettori.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore risultante dall'operazione <see langword="Or" /> bit per bit degli elementi in <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Divide il primo vettore per il secondo.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore risultante dalla divisione di <paramref name="left" /> per <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Restituisce un valore che indica se le coppie di elementi in due vettori specificati sono uguali.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Restituisce un nuovo vettore tramite un'operazione <see langword="XOr" /> bit per bit in ognuno degli elementi in due vettori.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore risultante dall'operazione <see langword="XOr" /> bit per bit degli elementi in <paramref name="left" /> e <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}">
      <summary>Reinterpreta i bit del vettore specificato in un vettore del tipo <see cref="T:System.Byte" />.</summary>
      <param name="value">Vettore da reinterpretare.</param>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}">
      <summary>Reinterpreta i bit del vettore specificato in un vettore del tipo <see cref="T:System.Double" />.</summary>
      <param name="value">Vettore da reinterpretare.</param>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}">
      <summary>Reinterpreta i bit del vettore specificato in un vettore del tipo <see cref="T:System.Int16" />.</summary>
      <param name="value">Vettore da reinterpretare.</param>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}">
      <summary>Reinterpreta i bit del vettore specificato in un vettore del tipo <see cref="T:System.Int32" />.</summary>
      <param name="value">Vettore da reinterpretare.</param>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}">
      <summary>Reinterpreta i bit del vettore specificato in un vettore del tipo <see cref="T:System.Int64" />.</summary>
      <param name="value">Vettore da reinterpretare.</param>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}">
      <summary>Reinterpreta i bit del vettore specificato in un vettore del tipo <see cref="T:System.SByte" />.</summary>
      <param name="value">Vettore da reinterpretare.</param>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}">
      <summary>Reinterpreta i bit del vettore specificato in un vettore del tipo <see cref="T:System.Single" />.</summary>
      <param name="value">Vettore da reinterpretare.</param>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}">
      <summary>Reinterpreta i bit del vettore specificato in un vettore del tipo <see cref="T:System.UInt16" />.</summary>
      <param name="value">Vettore da reinterpretare.</param>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}">
      <summary>Reinterpreta i bit del vettore specificato in un vettore del tipo <see cref="T:System.UInt32" />.</summary>
      <param name="value">Vettore da reinterpretare.</param>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}">
      <summary>Reinterpreta i bit del vettore specificato in un vettore del tipo <see cref="T:System.UInt64" />.</summary>
      <param name="value">Vettore da reinterpretare.</param>
      <returns>Vettore reinterpretato.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Restituisce un valore che indica se qualsiasi singola coppia di elementi nei vettori specificati è uguale.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>
        <see langword="true" /> se una qualsiasi coppia di elementi a sinistra e destra è uguale. <see langword="false" /> se nessuna coppia di elementi è uguale.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
      <summary>Moltiplica un vettore per un valore scalare specificato.</summary>
      <param name="factor">Valore scalare.</param>
      <param name="value">Vettore di origine.</param>
      <returns>Vettore scalato.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
      <summary>Moltiplica un vettore per un valore scalare specificato.</summary>
      <param name="value">Vettore di origine.</param>
      <param name="factor">Valore scalare.</param>
      <returns>Vettore scalato.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Restituisce un nuovo vettore i cui valori sono il prodotto di ogni coppia di elementi in due vettori specificati.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore prodotto per gli elementi.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})">
      <summary>Restituisce un nuovo vettore i cui elementi sono ottenuti prendendo il complemento a uno degli elementi di un vettore specificato.</summary>
      <param name="value">Vettore di origine.</param>
      <returns>Vettore di complemento a uno.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Sottrae il secondo vettore dal primo.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore risultante dalla sottrazione di <paramref name="right" /> da <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})">
      <summary>Nega un vettore specificato.</summary>
      <param name="value">Vettore da negare.</param>
      <returns>Vettore negato.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString">
      <summary>Restituisce la rappresentazione di stringa del vettore corrente usando la formattazione predefinita.</summary>
      <returns>Rappresentazione di stringa di questo vettore.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String)">
      <summary>Restituisce la rappresentazione di stringa del vettore corrente usando la stringa di formato specificata per formattare i singoli elementi.</summary>
      <param name="format">Oggetto che definisce il formato di singoli elementi.</param>
      <returns>Rappresentazione di stringa dell'istanza corrente.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
      <summary>Restituisce la rappresentazione di stringa del vettore corrente usando la stringa di formato specificata per formattare i singoli elementi e il provider di formato specificato per definire la formattazione specifica delle impostazioni cultura.</summary>
      <param name="format">Oggetto che definisce il formato di singoli elementi.</param>
      <param name="formatProvider">Provider di formato che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</param>
      <returns>Rappresentazione di stringa dell'istanza corrente.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{`0})">
      <summary>Tenta di copiare il vettore nell'elemento <see cref="T:System.Span`1" /> specificato.</summary>
      <param name="destination">Intervallo di destinazione in cui vengono copiati i valori. L'intervallo di destinazione deve essere almeno di dimensione <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <returns>
        <see langword="true" /> se il vettore di origine è stato copiato correttamente in <paramref name="destination" />. <see langword="false" /> se <paramref name="destination" /> non è abbastanza ampio da contenere il vettore di origine.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{System.Byte})">
      <summary>Tenta di copiare il vettore nell'intervallo di byte specificato.</summary>
      <param name="destination">Intervallo di destinazione in cui vengono copiati i valori. L'intervallo di destinazione deve essere almeno di dimensione <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <returns>
        <see langword="true" /> se il vettore di origine è stato copiato correttamente in <paramref name="destination" />. <see langword="false" /> se <paramref name="destination" /> non è abbastanza ampio da contenere il vettore di origine.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Zero">
      <summary>Restituisce un vettore contenente tutti zero.</summary>
      <returns>Vettore contenente tutti zero.</returns>
    </member>
    <member name="T:System.Numerics.Vector2">
      <summary>Rappresenta un vettore con due valori a virgola mobile e precisione singola.</summary>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single)">
      <summary>Crea un nuovo oggetto <see cref="T:System.Numerics.Vector2" /> i cui due elementi hanno lo stesso valore.</summary>
      <param name="value">Valore da assegnare a entrambi gli elementi.</param>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single,System.Single)">
      <summary>Crea un vettore i cui elementi hanno i valori specificati.</summary>
      <param name="x">Valore da assegnare al campo <see cref="F:System.Numerics.Vector2.X" />.</param>
      <param name="y">Valore da assegnare al campo <see cref="F:System.Numerics.Vector2.Y" />.</param>
    </member>
    <member name="M:System.Numerics.Vector2.Abs(System.Numerics.Vector2)">
      <summary>Restituisce un vettore i cui elementi sono i valori assoluti di ognuno degli elementi del vettore specificato.</summary>
      <param name="value">Vettore.</param>
      <returns>Valore assoluto del vettore.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Somma due vettori.</summary>
      <param name="left">Primo vettore da sommare.</param>
      <param name="right">Secondo vettore da sommare.</param>
      <returns>Vettore sommato.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Limita un vettore tra un valore minimo e un valore massimo.</summary>
      <param name="value1">Vettore da limitare.</param>
      <param name="min">Valore minimo.</param>
      <param name="max">Valore massimo.</param>
      <returns>Vettore limitato.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[])">
      <summary>Copia gli elementi del vettore nella matrice specificata.</summary>
      <param name="array">Matrice di destinazione.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Il numero di elementi nell'istanza corrente è maggiore di quello nella matrice.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> è multidimensionale.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)">
      <summary>Copia gli elementi del vettore nella matrice specificata, partendo dalla posizione dell'indice specificata.</summary>
      <param name="array">Matrice di destinazione.</param>
      <param name="index">Indice in cui copiare il primo elemento del vettore.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Il numero di elementi nell'istanza corrente è maggiore di quello nella matrice.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> è minore di zero.  
-oppure- 
 <paramref name="index" /> è maggiore o uguale alla lunghezza della matrice.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> è multidimensionale.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Calcola la distanza euclidea tra due punti specificati.</summary>
      <param name="value1">Primo punto.</param>
      <param name="value2">Secondo punto.</param>
      <returns>Distanza.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Restituisce la distanza euclidea quadratica tra due punti specificati.</summary>
      <param name="value1">Primo punto.</param>
      <param name="value2">Secondo punto.</param>
      <returns>Distanza quadratica.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Divide il primo vettore per il secondo.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore risultante dalla divisione.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)">
      <summary>Divide il vettore specificato per un valore scalare specificato.</summary>
      <param name="left">Vettore.</param>
      <param name="divisor">Valore scalare.</param>
      <returns>Vettore risultante dalla divisione.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Restituisce il prodotto scalare di due vettori.</summary>
      <param name="value1">Primo vettore.</param>
      <param name="value2">Secondo vettore.</param>
      <returns>Prodotto scalare.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Numerics.Vector2)">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un altro vettore.</summary>
      <param name="other">L'altro vettore.</param>
      <returns>
        <see langword="true" /> se i due vettori sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Object)">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="obj">Oggetto da confrontare con l'istanza corrente.</param>
      <returns>
        <see langword="true" /> se l'istanza corrente è uguale a <paramref name="obj" />; in caso contrario, <see langword="false" />. Se <paramref name="obj" /> è <see langword="null" />, il metodo restituisce <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Length">
      <summary>Restituisce la lunghezza del vettore.</summary>
      <returns>Lunghezza del vettore.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.LengthSquared">
      <summary>Restituisce la lunghezza del vettore al quadrato.</summary>
      <returns>Lunghezza al quadrato del vettore.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
      <summary>Esegue un'interpolazione lineare tra due vettori in base al peso specificato.</summary>
      <param name="value1">Primo vettore.</param>
      <param name="value2">Secondo vettore.</param>
      <param name="amount">Valore compreso tra 0 e 1 che indica il peso di <paramref name="value2" />.</param>
      <returns>Vettore interpolato.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Restituisce un vettore che contiene il valore più alto da ognuna delle coppie di elementi nei due vettori specificati.</summary>
      <param name="value1">Primo vettore.</param>
      <param name="value2">Secondo vettore.</param>
      <returns>Vettore massimizzato.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Restituisce un vettore che contiene il valore più basso da ognuna delle coppie di elementi nei due vettori specificati.</summary>
      <param name="value1">Primo vettore.</param>
      <param name="value2">Secondo vettore.</param>
      <returns>Vettore minimizzato.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Restituisce un nuovo vettore i cui valori sono il prodotto di ogni coppia di elementi in due vettori specificati.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore prodotto per gli elementi.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)">
      <summary>Moltiplica un vettore per un valore scalare specificato.</summary>
      <param name="left">Vettore da moltiplicare.</param>
      <param name="right">Valore scalare.</param>
      <returns>Vettore scalato.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)">
      <summary>Moltiplica un valore scalare per un vettore specificato.</summary>
      <param name="left">Valore scalato.</param>
      <param name="right">Vettore.</param>
      <returns>Vettore scalato.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Negate(System.Numerics.Vector2)">
      <summary>Nega un vettore specificato.</summary>
      <param name="value">Vettore da negare.</param>
      <returns>Vettore negato.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Normalize(System.Numerics.Vector2)">
      <summary>Restituisce un vettore con la stessa direzione del vettore specificato, ma con una lunghezza di uno.</summary>
      <param name="value">Vettore da normalizzare.</param>
      <returns>Vettore normalizzato.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.One">
      <summary>Ottiene un vettore i cui 2 elementi sono uguali a uno.</summary>
      <returns>Vettore i cui due elementi sono uguali a uno (ovvero, restituisce il vettore <c>(1,1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Somma due vettori.</summary>
      <param name="left">Primo vettore da sommare.</param>
      <param name="right">Secondo vettore da sommare.</param>
      <returns>Vettore sommato.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Divide il primo vettore per il secondo.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore risultante dalla divisione di <paramref name="left" /> per <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)">
      <summary>Divide il vettore specificato per un valore scalare specificato.</summary>
      <param name="value1">Vettore.</param>
      <param name="value2">Valore scalare.</param>
      <returns>Risultato della divisione.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Restituisce un valore che indica se le coppie di elementi in due vettori specificati sono uguali.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Restituisce un valore che indica se due vettori specificati non sono uguali.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> non sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Restituisce un nuovo vettore i cui valori sono il prodotto di ogni coppia di elementi in due vettori specificati.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore prodotto per gli elementi.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)">
      <summary>Moltiplica il vettore specificato per il valore scalare specificato.</summary>
      <param name="left">Vettore.</param>
      <param name="right">Valore scalare.</param>
      <returns>Vettore scalato.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)">
      <summary>Moltiplica il valore scalare per il vettore specificato.</summary>
      <param name="left">Vettore.</param>
      <param name="right">Valore scalare.</param>
      <returns>Vettore scalato.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Sottrae il secondo vettore dal primo.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore risultante dalla sottrazione di <paramref name="right" /> da <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)">
      <summary>Nega il vettore specificato.</summary>
      <param name="value">Vettore da negare.</param>
      <returns>Vettore negato.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Restituisce la reflection di un vettore da una superficie con la normale specificata.</summary>
      <param name="vector">Vettore di origine.</param>
      <param name="normal">Normale della superficie riflessa.</param>
      <returns>Vettore riflesso.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)">
      <summary>Restituisce un vettore i cui elementi sono la radice quadrata di ognuno degli elementi del vettore specificato.</summary>
      <param name="value">Vettore.</param>
      <returns>Vettore radice quadrata.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Sottrae il secondo vettore dal primo.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore differenza.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString">
      <summary>Restituisce la rappresentazione di stringa dell'istanza corrente usando la formattazione predefinita.</summary>
      <returns>Rappresentazione di stringa dell'istanza corrente.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String)">
      <summary>Restituisce la rappresentazione di stringa dell'istanza corrente usando la stringa di formato specificata per formattare i singoli elementi.</summary>
      <param name="format">Stringa di formato standard o numerico personalizzato che definisce il formato dei singoli elementi.</param>
      <returns>Rappresentazione di stringa dell'istanza corrente.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)">
      <summary>Restituisce la rappresentazione di stringa dell'istanza corrente usando la stringa di formato specificata per formattare i singoli elementi e il provider di formato specificato per definire la formattazione specifica delle impostazioni cultura.</summary>
      <param name="format">Stringa di formato standard o numerico personalizzato che definisce il formato dei singoli elementi.</param>
      <param name="formatProvider">Provider di formato che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</param>
      <returns>Rappresentazione di stringa dell'istanza corrente.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>Trasforma un vettore in base a una matrice 3x2 specificata.</summary>
      <param name="position">Vettore da trasformare.</param>
      <param name="matrix">Matrice di trasformazione.</param>
      <returns>Vettore trasformato.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Trasforma un vettore in base a una matrice 4x4 specificata.</summary>
      <param name="position">Vettore da trasformare.</param>
      <param name="matrix">Matrice di trasformazione.</param>
      <returns>Vettore trasformato.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>Trasforma un vettore in base al valore di rotazione Quaternion specificato.</summary>
      <param name="value">Vettore da ruotare.</param>
      <param name="rotation">Rotazione da applicare.</param>
      <returns>Vettore trasformato.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>Trasforma la normale di un vettore in base alla matrice 3x2 specificata.</summary>
      <param name="normal">Vettore di origine.</param>
      <param name="matrix">Matrice.</param>
      <returns>Vettore trasformato.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Trasforma la normale di un vettore in base alla matrice 4x4 specificata.</summary>
      <param name="normal">Vettore di origine.</param>
      <param name="matrix">Matrice.</param>
      <returns>Vettore trasformato.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitX">
      <summary>Ottiene il vettore (1,0).</summary>
      <returns>Vettore <c>(1,0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitY">
      <summary>Ottiene il vettore (0,1).</summary>
      <returns>Vettore <c>(0, 1)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector2.X">
      <summary>Componente X del vettore.</summary>
    </member>
    <member name="F:System.Numerics.Vector2.Y">
      <summary>Componente Y del vettore.</summary>
    </member>
    <member name="P:System.Numerics.Vector2.Zero">
      <summary>Restituisce un vettore i cui 2 elementi sono uguali a zero.</summary>
      <returns>Vettore i cui due elementi sono uguali a zero (ovvero, restituisce il vettore <c>(0, 0)</c>.</returns>
    </member>
    <member name="T:System.Numerics.Vector3">
      <summary>Rappresenta un vettore con tre valori a virgola mobile e precisione singola.</summary>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)">
      <summary>Crea un nuovo oggetto <see cref="T:System.Numerics.Vector3" /> dall'oggetto <see cref="T:System.Numerics.Vector2" /> specificato e dal valore specificato.</summary>
      <param name="value">Vettore con due elementi.</param>
      <param name="z">Valore aggiuntivo da assegnare al campo <see cref="F:System.Numerics.Vector3.Z" />.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single)">
      <summary>Crea un nuovo oggetto <see cref="T:System.Numerics.Vector3" /> i cui tre elementi hanno lo stesso valore.</summary>
      <param name="value">Valore da assegnare a tutti e tre gli elementi.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>Crea un vettore i cui elementi hanno i valori specificati.</summary>
      <param name="x">Valore da assegnare al campo <see cref="F:System.Numerics.Vector3.X" />.</param>
      <param name="y">Valore da assegnare al campo <see cref="F:System.Numerics.Vector3.Y" />.</param>
      <param name="z">Valore da assegnare al campo <see cref="F:System.Numerics.Vector3.Z" />.</param>
    </member>
    <member name="M:System.Numerics.Vector3.Abs(System.Numerics.Vector3)">
      <summary>Restituisce un vettore i cui elementi sono i valori assoluti di ognuno degli elementi del vettore specificato.</summary>
      <param name="value">Vettore.</param>
      <returns>Valore assoluto del vettore.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Somma due vettori.</summary>
      <param name="left">Primo vettore da sommare.</param>
      <param name="right">Secondo vettore da sommare.</param>
      <returns>Vettore sommato.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Limita un vettore tra un valore minimo e un valore massimo.</summary>
      <param name="value1">Vettore da limitare.</param>
      <param name="min">Valore minimo.</param>
      <param name="max">Valore massimo.</param>
      <returns>Vettore limitato.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[])">
      <summary>Copia gli elementi del vettore nella matrice specificata.</summary>
      <param name="array">Matrice di destinazione.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Il numero di elementi nell'istanza corrente è maggiore di quello nella matrice.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> è multidimensionale.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)">
      <summary>Copia gli elementi del vettore nella matrice specificata, partendo dalla posizione dell'indice specificata.</summary>
      <param name="array">Matrice di destinazione.</param>
      <param name="index">Indice in cui copiare il primo elemento del vettore.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Il numero di elementi nell'istanza corrente è maggiore di quello nella matrice.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> è minore di zero.  
-oppure- 
 <paramref name="index" /> è maggiore o uguale alla lunghezza della matrice.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> è multidimensionale.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Calcola il prodotto incrociato di due vettori.</summary>
      <param name="vector1">Primo vettore.</param>
      <param name="vector2">Secondo vettore.</param>
      <returns>Prodotto incrociato.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Calcola la distanza euclidea tra due punti specificati.</summary>
      <param name="value1">Primo punto.</param>
      <param name="value2">Secondo punto.</param>
      <returns>Distanza.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Restituisce la distanza euclidea quadratica tra due punti specificati.</summary>
      <param name="value1">Primo punto.</param>
      <param name="value2">Secondo punto.</param>
      <returns>Distanza quadratica.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Divide il primo vettore per il secondo.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore risultante dalla divisione.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)">
      <summary>Divide il vettore specificato per un valore scalare specificato.</summary>
      <param name="left">Vettore.</param>
      <param name="divisor">Valore scalare.</param>
      <returns>Vettore risultante dalla divisione.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Restituisce il prodotto scalare di due vettori.</summary>
      <param name="vector1">Primo vettore.</param>
      <param name="vector2">Secondo vettore.</param>
      <returns>Prodotto scalare.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Numerics.Vector3)">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un altro vettore.</summary>
      <param name="other">L'altro vettore.</param>
      <returns>
        <see langword="true" /> se i due vettori sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Object)">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="obj">Oggetto da confrontare con l'istanza corrente.</param>
      <returns>
        <see langword="true" /> se l'istanza corrente è uguale a <paramref name="obj" />; in caso contrario, <see langword="false" />. Se <paramref name="obj" /> è <see langword="null" />, il metodo restituisce <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Length">
      <summary>Ottiene la lunghezza di questo oggetto vettore.</summary>
      <returns>Lunghezza del vettore.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.LengthSquared">
      <summary>Restituisce la lunghezza del vettore al quadrato.</summary>
      <returns>Lunghezza al quadrato del vettore.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
      <summary>Esegue un'interpolazione lineare tra due vettori in base al peso specificato.</summary>
      <param name="value1">Primo vettore.</param>
      <param name="value2">Secondo vettore.</param>
      <param name="amount">Valore compreso tra 0 e 1 che indica il peso di <paramref name="value2" />.</param>
      <returns>Vettore interpolato.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Restituisce un vettore che contiene il valore più alto da ognuna delle coppie di elementi nei due vettori specificati.</summary>
      <param name="value1">Primo vettore.</param>
      <param name="value2">Secondo vettore.</param>
      <returns>Vettore massimizzato.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Restituisce un vettore che contiene il valore più basso da ognuna delle coppie di elementi nei due vettori specificati.</summary>
      <param name="value1">Primo vettore.</param>
      <param name="value2">Secondo vettore.</param>
      <returns>Vettore minimizzato.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Restituisce un nuovo vettore i cui valori sono il prodotto di ogni coppia di elementi in due vettori specificati.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore prodotto per gli elementi.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)">
      <summary>Moltiplica un vettore per un valore scalare specificato.</summary>
      <param name="left">Vettore da moltiplicare.</param>
      <param name="right">Valore scalare.</param>
      <returns>Vettore scalato.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)">
      <summary>Moltiplica un valore scalare per un vettore specificato.</summary>
      <param name="left">Valore scalato.</param>
      <param name="right">Vettore.</param>
      <returns>Vettore scalato.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Negate(System.Numerics.Vector3)">
      <summary>Nega un vettore specificato.</summary>
      <param name="value">Vettore da negare.</param>
      <returns>Vettore negato.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Normalize(System.Numerics.Vector3)">
      <summary>Restituisce un vettore con la stessa direzione del vettore specificato, ma con una lunghezza di uno.</summary>
      <param name="value">Vettore da normalizzare.</param>
      <returns>Vettore normalizzato.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.One">
      <summary>Ottiene un vettore i cui 3 elementi sono uguali a uno.</summary>
      <returns>Vettore i cui tre elementi sono uguali a uno (ovvero, restituisce il vettore <c>(1, 1, 1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Somma due vettori.</summary>
      <param name="left">Primo vettore da sommare.</param>
      <param name="right">Secondo vettore da sommare.</param>
      <returns>Vettore sommato.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Divide il primo vettore per il secondo.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore risultante dalla divisione di <paramref name="left" /> per <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)">
      <summary>Divide il vettore specificato per un valore scalare specificato.</summary>
      <param name="value1">Vettore.</param>
      <param name="value2">Valore scalare.</param>
      <returns>Risultato della divisione.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Restituisce un valore che indica se le coppie di elementi in due vettori specificati sono uguali.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Restituisce un valore che indica se due vettori specificati non sono uguali.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> non sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Restituisce un nuovo vettore i cui valori sono il prodotto di ogni coppia di elementi in due vettori specificati.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore prodotto per gli elementi.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)">
      <summary>Moltiplica il vettore specificato per il valore scalare specificato.</summary>
      <param name="left">Vettore.</param>
      <param name="right">Valore scalare.</param>
      <returns>Vettore scalato.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)">
      <summary>Moltiplica il valore scalare per il vettore specificato.</summary>
      <param name="left">Vettore.</param>
      <param name="right">Valore scalare.</param>
      <returns>Vettore scalato.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Sottrae il secondo vettore dal primo.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore risultante dalla sottrazione di <paramref name="right" /> da <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)">
      <summary>Nega il vettore specificato.</summary>
      <param name="value">Vettore da negare.</param>
      <returns>Vettore negato.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Restituisce la reflection di un vettore da una superficie con la normale specificata.</summary>
      <param name="vector">Vettore di origine.</param>
      <param name="normal">Normale della superficie riflessa.</param>
      <returns>Vettore riflesso.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)">
      <summary>Restituisce un vettore i cui elementi sono la radice quadrata di ognuno degli elementi del vettore specificato.</summary>
      <param name="value">Vettore.</param>
      <returns>Vettore radice quadrata.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Sottrae il secondo vettore dal primo.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore differenza.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString">
      <summary>Restituisce la rappresentazione di stringa dell'istanza corrente usando la formattazione predefinita.</summary>
      <returns>Rappresentazione di stringa dell'istanza corrente.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String)">
      <summary>Restituisce la rappresentazione di stringa dell'istanza corrente usando la stringa di formato specificata per formattare i singoli elementi.</summary>
      <param name="format">Stringa di formato standard o numerico personalizzato che definisce il formato dei singoli elementi.</param>
      <returns>Rappresentazione di stringa dell'istanza corrente.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)">
      <summary>Restituisce la rappresentazione di stringa dell'istanza corrente usando la stringa di formato specificata per formattare i singoli elementi e il provider di formato specificato per definire la formattazione specifica delle impostazioni cultura.</summary>
      <param name="format">Stringa di formato standard o numerico personalizzato che definisce il formato dei singoli elementi.</param>
      <param name="formatProvider">Provider di formato che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</param>
      <returns>Rappresentazione di stringa dell'istanza corrente.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Trasforma un vettore in base a una matrice 4x4 specificata.</summary>
      <param name="position">Vettore da trasformare.</param>
      <param name="matrix">Matrice di trasformazione.</param>
      <returns>Vettore trasformato.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>Trasforma un vettore in base al valore di rotazione Quaternion specificato.</summary>
      <param name="value">Vettore da ruotare.</param>
      <param name="rotation">Rotazione da applicare.</param>
      <returns>Vettore trasformato.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Trasforma la normale di un vettore in base alla matrice 4x4 specificata.</summary>
      <param name="normal">Vettore di origine.</param>
      <param name="matrix">Matrice.</param>
      <returns>Vettore trasformato.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitX">
      <summary>Ottiene il vettore (1,0,0).</summary>
      <returns>Vettore <c>(1, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitY">
      <summary>Ottiene il vettore (0,1,0).</summary>
      <returns>Il vettore <c>(0, 1, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitZ">
      <summary>Ottiene il vettore (0,0,1).</summary>
      <returns>Vettore <c>(0, 0, 1)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector3.X">
      <summary>Componente X del vettore.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Y">
      <summary>Componente Y del vettore.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Z">
      <summary>Componente Z del vettore.</summary>
    </member>
    <member name="P:System.Numerics.Vector3.Zero">
      <summary>Ottiene un vettore i cui 3 elementi sono uguali a zero.</summary>
      <returns>Vettore i cui tre elementi sono uguali a zero (ovvero, restituisce il vettore <c>(0, 0, 0)</c>.</returns>
    </member>
    <member name="T:System.Numerics.Vector4">
      <summary>Rappresenta un vettore con quattro valori a virgola mobile e precisione singola.</summary>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector2,System.Single,System.Single)">
      <summary>Crea un nuovo oggetto <see cref="T:System.Numerics.Vector4" /> dall'oggetto <see cref="T:System.Numerics.Vector2" /> specificato e dai componenti Z e W.</summary>
      <param name="value">Vettore da usare per i componenti X e Y.</param>
      <param name="z">Componente Z.</param>
      <param name="w">Componente W.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Costruisce un nuovo oggetto <see cref="T:System.Numerics.Vector4" /> dall'oggetto <see cref="T:System.Numerics.Vector3" /> specificato e da un componente W.</summary>
      <param name="value">Vettore da usare per i componenti X, Y e Z.</param>
      <param name="w">Componente W.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single)">
      <summary>Crea un nuovo oggetto <see cref="T:System.Numerics.Vector4" /> i cui quattro elementi hanno lo stesso valore.</summary>
      <param name="value">Valore da assegnare a tutti e quattro gli elementi.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea un vettore i cui elementi hanno i valori specificati.</summary>
      <param name="x">Valore da assegnare al campo <see cref="F:System.Numerics.Vector4.X" />.</param>
      <param name="y">Valore da assegnare al campo <see cref="F:System.Numerics.Vector4.Y" />.</param>
      <param name="z">Valore da assegnare al campo <see cref="F:System.Numerics.Vector4.Z" />.</param>
      <param name="w">Valore da assegnare al campo <see cref="F:System.Numerics.Vector4.W" />.</param>
    </member>
    <member name="M:System.Numerics.Vector4.Abs(System.Numerics.Vector4)">
      <summary>Restituisce un vettore i cui elementi sono i valori assoluti di ognuno degli elementi del vettore specificato.</summary>
      <param name="value">Vettore.</param>
      <returns>Valore assoluto del vettore.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Add(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Somma due vettori.</summary>
      <param name="left">Primo vettore da sommare.</param>
      <param name="right">Secondo vettore da sommare.</param>
      <returns>Vettore sommato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Clamp(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Limita un vettore tra un valore minimo e un valore massimo.</summary>
      <param name="value1">Vettore da limitare.</param>
      <param name="min">Valore minimo.</param>
      <param name="max">Valore massimo.</param>
      <returns>Vettore limitato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[])">
      <summary>Copia gli elementi del vettore nella matrice specificata.</summary>
      <param name="array">Matrice di destinazione.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Il numero di elementi nell'istanza corrente è maggiore di quello nella matrice.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> è multidimensionale.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[],System.Int32)">
      <summary>Copia gli elementi del vettore nella matrice specificata, partendo dalla posizione dell'indice specificata.</summary>
      <param name="array">Matrice di destinazione.</param>
      <param name="index">Indice in cui copiare il primo elemento del vettore.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Il numero di elementi nell'istanza corrente è maggiore di quello nella matrice.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> è minore di zero.  
In alternativa 
 <paramref name="index" /> è maggiore o uguale alla lunghezza della matrice.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> è multidimensionale.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.Distance(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Calcola la distanza euclidea tra due punti specificati.</summary>
      <param name="value1">Primo punto.</param>
      <param name="value2">Secondo punto.</param>
      <returns>Distanza.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.DistanceSquared(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Restituisce la distanza euclidea quadratica tra due punti specificati.</summary>
      <param name="value1">Primo punto.</param>
      <param name="value2">Secondo punto.</param>
      <returns>Distanza quadratica.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Divide il primo vettore per il secondo.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore risultante dalla divisione.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Single)">
      <summary>Divide il vettore specificato per un valore scalare specificato.</summary>
      <param name="left">Vettore.</param>
      <param name="divisor">Valore scalare.</param>
      <returns>Vettore risultante dalla divisione.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Dot(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Restituisce il prodotto scalare di due vettori.</summary>
      <param name="vector1">Primo vettore.</param>
      <param name="vector2">Secondo vettore.</param>
      <returns>Prodotto scalare.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Numerics.Vector4)">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un altro vettore.</summary>
      <param name="other">L'altro vettore.</param>
      <returns>
        <see langword="true" /> se i due vettori sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Object)">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="obj">Oggetto da confrontare con l'istanza corrente.</param>
      <returns>
        <see langword="true" /> se l'istanza corrente è uguale a <paramref name="obj" />; in caso contrario, <see langword="false" />. Se <paramref name="obj" /> è <see langword="null" />, il metodo restituisce <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Length">
      <summary>Ottiene la lunghezza di questo oggetto vettore.</summary>
      <returns>Lunghezza del vettore.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.LengthSquared">
      <summary>Restituisce la lunghezza del vettore al quadrato.</summary>
      <returns>Lunghezza al quadrato del vettore.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Lerp(System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
      <summary>Esegue un'interpolazione lineare tra due vettori in base al peso specificato.</summary>
      <param name="value1">Primo vettore.</param>
      <param name="value2">Secondo vettore.</param>
      <param name="amount">Valore compreso tra 0 e 1 che indica il peso di <paramref name="value2" />.</param>
      <returns>Vettore interpolato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Max(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Restituisce un vettore che contiene il valore più alto da ognuna delle coppie di elementi nei due vettori specificati.</summary>
      <param name="value1">Primo vettore.</param>
      <param name="value2">Secondo vettore.</param>
      <returns>Vettore massimizzato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Min(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Restituisce un vettore che contiene il valore più basso da ognuna delle coppie di elementi nei due vettori specificati.</summary>
      <param name="value1">Primo vettore.</param>
      <param name="value2">Secondo vettore.</param>
      <returns>Vettore minimizzato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Restituisce un nuovo vettore i cui valori sono il prodotto di ogni coppia di elementi in due vettori specificati.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore prodotto per gli elementi.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Single)">
      <summary>Moltiplica un vettore per un valore scalare specificato.</summary>
      <param name="left">Vettore da moltiplicare.</param>
      <param name="right">Valore scalare.</param>
      <returns>Vettore scalato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Single,System.Numerics.Vector4)">
      <summary>Moltiplica un valore scalare per un vettore specificato.</summary>
      <param name="left">Valore scalato.</param>
      <param name="right">Vettore.</param>
      <returns>Vettore scalato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Negate(System.Numerics.Vector4)">
      <summary>Nega un vettore specificato.</summary>
      <param name="value">Vettore da negare.</param>
      <returns>Vettore negato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Normalize(System.Numerics.Vector4)">
      <summary>Restituisce un vettore con la stessa direzione del vettore specificato, ma con una lunghezza di uno.</summary>
      <param name="vector">Vettore da normalizzare.</param>
      <returns>Vettore normalizzato.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.One">
      <summary>Ottiene un vettore i cui 4 elementi sono uguali a uno.</summary>
      <returns>Restituisca il valore <see cref="T:System.Numerics.Vector4" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Addition(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Somma due vettori.</summary>
      <param name="left">Primo vettore da sommare.</param>
      <param name="right">Secondo vettore da sommare.</param>
      <returns>Vettore sommato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Divide il primo vettore per il secondo.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore risultante dalla divisione di <paramref name="left" /> per <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Single)">
      <summary>Divide il vettore specificato per un valore scalare specificato.</summary>
      <param name="value1">Vettore.</param>
      <param name="value2">Valore scalare.</param>
      <returns>Risultato della divisione.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Equality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Restituisce un valore che indica se le coppie di elementi in due vettori specificati sono uguali.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Inequality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Restituisce un valore che indica se due vettori specificati non sono uguali.</summary>
      <param name="left">Primo vettore da confrontare.</param>
      <param name="right">Secondo vettore da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="left" /> e <paramref name="right" /> non sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Restituisce un nuovo vettore i cui valori sono il prodotto di ogni coppia di elementi in due vettori specificati.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore prodotto per gli elementi.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Single)">
      <summary>Moltiplica il vettore specificato per il valore scalare specificato.</summary>
      <param name="left">Vettore.</param>
      <param name="right">Valore scalare.</param>
      <returns>Vettore scalato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Single,System.Numerics.Vector4)">
      <summary>Moltiplica il valore scalare per il vettore specificato.</summary>
      <param name="left">Vettore.</param>
      <param name="right">Valore scalare.</param>
      <returns>Vettore scalato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Subtraction(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Sottrae il secondo vettore dal primo.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore risultante dalla sottrazione di <paramref name="right" /> da <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_UnaryNegation(System.Numerics.Vector4)">
      <summary>Nega il vettore specificato.</summary>
      <param name="value">Vettore da negare.</param>
      <returns>Vettore negato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.SquareRoot(System.Numerics.Vector4)">
      <summary>Restituisce un vettore i cui elementi sono la radice quadrata di ognuno degli elementi del vettore specificato.</summary>
      <param name="value">Vettore.</param>
      <returns>Vettore radice quadrata.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Subtract(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Sottrae il secondo vettore dal primo.</summary>
      <param name="left">Primo vettore.</param>
      <param name="right">Secondo vettore.</param>
      <returns>Vettore differenza.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString">
      <summary>Restituisce la rappresentazione di stringa dell'istanza corrente usando la formattazione predefinita.</summary>
      <returns>Rappresentazione di stringa dell'istanza corrente.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String)">
      <summary>Restituisce la rappresentazione di stringa dell'istanza corrente usando la stringa di formato specificata per formattare i singoli elementi.</summary>
      <param name="format">Stringa di formato standard o numerico personalizzato che definisce il formato dei singoli elementi.</param>
      <returns>Rappresentazione di stringa dell'istanza corrente.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String,System.IFormatProvider)">
      <summary>Restituisce la rappresentazione di stringa dell'istanza corrente usando la stringa di formato specificata per formattare i singoli elementi e il provider di formato specificato per definire la formattazione specifica delle impostazioni cultura.</summary>
      <param name="format">Stringa di formato standard o numerico personalizzato che definisce il formato dei singoli elementi.</param>
      <param name="formatProvider">Provider di formato che fornisce informazioni di formattazione specifiche delle impostazioni cultura.</param>
      <returns>Rappresentazione di stringa dell'istanza corrente.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Trasforma un vettore bidimensionale per una matrice 4x4 specificata.</summary>
      <param name="position">Vettore da trasformare.</param>
      <param name="matrix">Matrice di trasformazione.</param>
      <returns>Vettore trasformato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>Trasforma un vettore bidimensionale in base al valore di rotazione Quaternion specificato.</summary>
      <param name="value">Vettore da ruotare.</param>
      <param name="rotation">Rotazione da applicare.</param>
      <returns>Vettore trasformato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Trasforma un vettore tridimensionale per una matrice 4x4 specificata.</summary>
      <param name="position">Vettore da trasformare.</param>
      <param name="matrix">Matrice di trasformazione.</param>
      <returns>Vettore trasformato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>Trasforma un vettore tridimensionale in base al valore di rotazione Quaternion specificato.</summary>
      <param name="value">Vettore da ruotare.</param>
      <param name="rotation">Rotazione da applicare.</param>
      <returns>Vettore trasformato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4)">
      <summary>Trasforma un vettore quadridimensionale per una matrice 4x4 specificata.</summary>
      <param name="vector">Vettore da trasformare.</param>
      <param name="matrix">Matrice di trasformazione.</param>
      <returns>Vettore trasformato.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Quaternion)">
      <summary>Trasforma un vettore quadridimensionale in base al valore di rotazione Quaternion specificato.</summary>
      <param name="value">Vettore da ruotare.</param>
      <param name="rotation">Rotazione da applicare.</param>
      <returns>Vettore trasformato.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitW">
      <summary>Ottiene il vettore (0,0,0,1).</summary>
      <returns>Vettore <c>(0, 0, 0, 1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitX">
      <summary>Ottiene il vettore (1,0,0,0).</summary>
      <returns>Vettore <c>(1, 0, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitY">
      <summary>Ottiene il vettore (0,1,0,0).</summary>
      <returns>Il vettore <c>(0, 1, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitZ">
      <summary>Ottiene il vettore (0,0,1,0).</summary>
      <returns>Il vettore <c>(0, 0, 1, 0)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector4.W">
      <summary>Componente W del vettore.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.X">
      <summary>Componente X del vettore.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Y">
      <summary>Componente Y del vettore.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Z">
      <summary>Componente Z del vettore.</summary>
    </member>
    <member name="P:System.Numerics.Vector4.Zero">
      <summary>Ottiene un vettore i cui 4 elementi sono uguali a zero.</summary>
      <returns>Vettore i cui quattro elementi sono uguali a zero (ovvero, restituisce il vettore <c>(0, 0, 0, 0)</c>.</returns>
    </member>
  </members>
</doc>
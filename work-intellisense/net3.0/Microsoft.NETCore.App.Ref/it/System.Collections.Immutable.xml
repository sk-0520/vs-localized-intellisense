<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable collection of key/value pairs.  &#xA;&#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta una raccolta non modificabile di coppie chiave/valore.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Tipo delle chiavi nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Tipo dei valori nel dizionario.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the dictionary.">Aggiunge un elemento con la chiave e il valore specificati al dizionario.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Chiave dell'elemento da aggiungere.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valore dell'elemento da aggiungere.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">Nuovo dizionario non modificabile che contiene la coppia chiave/valore aggiuntiva.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">La chiave specificata esiste già nel dizionario, ma ha un valore diverso.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the dictionary.">Aggiunge le coppie chiave/valore specificate al dizionario.</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">Coppie chiave/valore da aggiungere.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Nuovo dizionario non modificabile che contiene le coppie chiave/valore aggiuntive.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Una delle chiavi specificate esiste già nel dizionario, ma ha un valore diverso.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Recupera un dizionario vuoto con lo stesso ordinamento e le stesse regole di confronto chiave/valore di questa istanza del dizionario.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Dizionario vuoto con ordinamento e regole di confronto chiave/valore equivalenti.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains the specified key/value pair.">Determina se il dizionario non modificabile contiene la coppia chiave/valore specificata.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">Coppia chiave/valore da individuare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la coppia chiave/valore specificata viene trovata nel dizionario; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Rimuove dal dizionario non modificabile l'elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Chiave dell'elemento da rimuovere.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">Nuovo dizionario non modificabile con l'elemento specificato rimosso oppure questa istanza se la chiave specificata non viene trovata nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">Rimuove dal dizionario non modificabile gli elementi con le chiavi specificate.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">Chiavi degli elementi da rimuovere.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Nuovo dizionario non modificabile con le chiavi specificate rimosse oppure questa istanza se le chiavi specificate non vengono trovate nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">Imposta la chiave e il valore specificati nel dizionario non modificabile, eventualmente sovrascrivendo un valore esistente per la chiave.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Chiave della voce da aggiungere.</param>
      <param name="value" vsli:raw="The key value to set.">Valore di chiave da impostare.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">Nuovo dizionario non modificabile che contiene la coppia chiave/valore specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">Imposta le coppie chiave/valore specificate nel dizionario non modificabile, eventualmente sovrascrivendo i valori esistenti per le chiavi.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Coppie chiave/valore da impostare nel dizionario. Se una qualsiasi delle chiavi esiste già nel dizionario, questo metodo sovrascriverà i valori precedenti.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">Nuovo dizionario non modificabile che contiene le coppie chiave/valore specificate.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Determina se il dizionario contiene una chiave specificata.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Chiave da ricercare.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">La chiave corrispondente presente nel dizionario, se trovata, oppure <c>equalkey</c> se non viene trovata alcuna corrispondenza.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se viene trovata una corrispondenza per <paramref name="equalKey" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary vsli:raw="Represents a list of elements that cannot be modified.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta un elenco di elementi che non possono essere modificati.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">Tipo di elementi contenuti nell'elenco.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary vsli:raw="Makes a copy of the list, and adds the specified object to the end of the copied list.">Crea una copia dell'elenco e aggiunge l'oggetto specificato alla fine dell'elenco copiato.</summary>
      <param name="value" vsli:raw="The object to add to the list.">Oggetto da aggiungere all'elenco.</param>
      <returns vsli:raw="A new list with the object added.">Nuovo elenco con l'oggetto aggiunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Makes a copy of the list and adds the specified objects to the end of the copied list.">Crea una copia dell'elenco e aggiunge gli oggetti specificati alla fine dell'elenco copiato.</summary>
      <param name="items" vsli:raw="The objects to add to the list.">Oggetti da aggiungere all'elenco.</param>
      <returns vsli:raw="A new list with the elements added.">Nuovo elenco con gli elementi aggiunti.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary vsli:raw="Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.">Crea un elenco con tutti gli elementi rimossi, ma con lo stesso ordinamento e la stessa semantica di ordinamento di questo elenco.</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">Elenco vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'oggetto <see cref="T:System.Collections.Immutable.IImmutableList`1" /> che inizia in corrispondenza dell'indice specificato e contiene il numero di elementi specificato.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;. This value can be null for reference types.">Oggetto da individuare nella raccolta <see cref="T:System.Collections.Immutable.IImmutableList`1" />. Questo valore può essere null per i tipi di riferimento.</param>
      <param name="index" vsli:raw="The zero-based starting indexes of the search. 0 (zero) is valid in an empty list.">Indici iniziali a base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;item&quot; /&gt;.">Operatore di confronto di uguaglianza da usare per individuare <paramref name="item" />.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements if found; otherwise -1.">Indice in base zero della prima occorrenza di <paramref name="item" /> all'interno dell'intervallo di elementi dell'oggetto <see cref="T:System.Collections.Immutable.IImmutableList`1" /> che inizia da <paramref name="index" /> e contiene il numero di elementi corrispondente a <paramref name="count" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">Inserisce l'elemento specificato nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the value.">Indice in base zero in corrispondenza del quale inserire il valore.</param>
      <param name="element" vsli:raw="The object to insert.">Oggetto da inserire.</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">Nuovo elenco non modificabile che include l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">Inserisce gli elementi specificati nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">Indice in base zero in corrispondenza del quale devono essere inseriti i nuovi elementi.</param>
      <param name="items" vsli:raw="The elements to insert.">Elementi da inserire.</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">Nuovo elenco non modificabile che include gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi della classe <see cref="T:System.Collections.Immutable.IImmutableList`1" /> che contiene il numero di elementi specificato e termina in corrispondenza dell'indice specificato.</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Oggetto da individuare nell'elenco. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to match &lt;paramref name=&quot;item&quot; /&gt;.">Operatore di confronto di uguaglianza di cui trovare una corrispondenza con <paramref name="item" />.</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Restituisca il valore <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of a specified object from this immutable list.">Rimuove la prima occorrenza di un oggetto specificato da questo elenco non modificabile.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">Oggetto da rimuovere dall'elenco.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;value&quot; /&gt;.">Operatore di confronto di uguaglianza da usare per individuare <paramref name="value" />.</param>
      <returns vsli:raw="A new list with the specified object removed.">Un nuovo elenco con l'oggetto specificato rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Rimuove tutti gli elementi che corrispondono alle condizioni definite dal predicato specificato.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Delegato che definisce le condizioni degli elementi da rimuovere.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Nuovo elenco non modificabile con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">Rimuove l'elemento presente nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index of the element to remove.">Indice dell'elemento da rimuovere.</param>
      <returns vsli:raw="A new list with the element removed.">Nuovo elenco con l'elemento rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified object from the list.">Rimuove l'oggetto specificato dall'elenco.</summary>
      <param name="items" vsli:raw="The objects to remove from the list.">Oggetti da rimuovere dall'elenco.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to determine if &lt;paramref name=&quot;items&quot; /&gt; match any objects in the list.">Operatore di confronto di uguaglianza da usare per determinare se <paramref name="items" /> corrisponde a qualsiasi oggetto nell'elenco.</param>
      <returns vsli:raw="A new immutable list with the specified objects removed, if &lt;paramref name=&quot;items&quot; /&gt; matched objects in the list.">Nuovo elenco non modificabile con gli oggetti specificati rimossi, se <paramref name="items" /> corrisponde agli oggetti nell'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements from the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;.">Rimuove un intervallo di elementi da <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range of elements to remove.">Indice iniziale in base zero dell'intervallo di elementi da rimuovere.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Numero di elementi da rimuovere.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Nuovo elenco non modificabile con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns a new list with the first matching element in the list replaced with the specified element.">Restituisce un nuovo elenco con il primo elemento corrispondente nell'elenco sostituito con l'elemento specificato.</summary>
      <param name="oldValue" vsli:raw="The element to be replaced.">Elemento da sostituire.</param>
      <param name="newValue" vsli:raw="The element to replace the first occurrence of &lt;paramref name=&quot;oldValue&quot; /&gt; with.">Elemento con cui sostituire la prima occorrenza di <paramref name="oldValue" /></param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use for matching &lt;paramref name=&quot;oldValue&quot; /&gt;.">Operatore di confronto di uguaglianza da usare per la corrispondenza a <paramref name="oldValue" />.</param>
      <returns vsli:raw="A new list that contains &lt;paramref name=&quot;newValue&quot; /&gt;, even if &lt;paramref name=&quot;oldvalue&quot; /&gt; is the same as &lt;paramref name=&quot;newValue&quot; /&gt;.">Nuovo elenco contenente <paramref name="newValue" />, anche se <paramref name="oldvalue" /> è uguale a <paramref name="newValue" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">
        <paramref name="oldValue" /> non esiste nell'elenco.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">Sostituisce un elemento in una determinata posizione nell'elenco con l'elemento specificato.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">Posizione nell'elenco dell'elemento da sostituire.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">Elemento con cui sostituire l'elemento precedente.</param>
      <returns vsli:raw="A new list that contains the new element, even if the element at the specified location is the same as the new element.">Nuovo elenco che contiene il nuovo elemento, anche se l'elemento nella posizione specificata è uguale al nuovo elemento.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary vsli:raw="Represents an immutable first-in, first-out collection of objects.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta una raccolta di oggetti FIFO (First-In First-Out) non modificabile.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">Tipo di elementi contenuti nella coda.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary vsli:raw="Returns a new queue with all the elements removed.">Restituisce una nuova coda con tutti gli elementi rimossi.</summary>
      <returns vsli:raw="An empty immutable queue.">Coda non modificabile vuota.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the first element in the immutable queue, and returns the new queue.">Rimuove il primo elemento dalla coda non modificabile e restituisce la nuova coda.</summary>
      <returns vsli:raw="The new immutable queue with the first element removed. This value is never &lt;see langword=&quot;null&quot; /&gt;.">Nuova coda non modificabile da cui è stato rimosso il primo elemento. Questo valore non è mai <c>null</c>.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La coda è vuota.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Aggiunge un elemento alla fine della coda non modificabile e restituisce la nuova coda.</summary>
      <param name="value" vsli:raw="The element to add.">Elemento da aggiungere.</param>
      <returns vsli:raw="The new immutable queue with the specified element added.">Nuova coda non modificabile a cui è stato aggiunto l'elemento specificato.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.">Ottiene un valore che indica se questa coda non modificabile è vuota o meno.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la coda è vuota; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">Restituisce l'elemento all'inizio della coda non modificabile senza rimuoverlo.</summary>
      <returns vsli:raw="The element at the beginning of the queue.">Elemento all'inizio della coda.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La coda è vuota.</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary vsli:raw="Represents a set of elements that can only be modified by creating a new instance of the set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta un set di elementi che è possibile modificare solo creando una nuova istanza del set.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="The type of element stored in the set.">Tipo di elemento archiviato nel set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Aggiunge l'elemento specificato a questo set non modificabile.</summary>
      <param name="value" vsli:raw="The element to add.">Elemento da aggiungere.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Nuovo set con l'elemento aggiunto o questo set se l'elemento è già presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">Recupera un set non modificabile vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">Set vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable set contains a specified element.">Determina se questo set non modificabile contiene un elemento specificato.</summary>
      <param name="value" vsli:raw="The element to locate in the set.">Elemento da individuare nel set.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set contiene il valore specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">Rimuove gli elementi della raccolta specificata dal set non modificabile corrente.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">Raccolta di elementi da rimuovere da questo set.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Nuovo set con gli elementi rimossi oppure il set originale se nessuno degli elementi era presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that exist in this set and the specified set.">Crea un set non modificabile che contiene solo gli elementi esistenti in questo set e nel set specificato.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableSet`1&quot; /&gt;.">Raccolta da confrontare con l'oggetto <see cref="T:System.Collections.Immutable.IImmutableSet`1" /> corrente.</param>
      <returns vsli:raw="A new immutable set that contains elements that exist in both sets.">Nuovo set non modificabile che contiene gli elementi esistenti in entrambi i set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) subset of the specified collection.">Determina se il set non modificabile corrente è un subset (strict) appropriato della raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un subset corretto della raccolta specificata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) superset of the specified collection.">Determina se il set non modificabile corrente è un superset (strict) appropriato della raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un superset corretto della raccolta specificata; in caso contrario false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a subset of a specified collection.">Determina se il set non modificabile corrente è un subset di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un subset della raccolta specificata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a superset of a specified collection.">Determina se il set non modificabile corrente è un superset di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un superset della raccolta specificata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set overlaps with the specified collection.">Determina se il set non modificabile corrente è sovrapposto alla raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente e la raccolta specificata condividono almeno un elemento comune; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Rimuove l'elemento specificato da questo set non modificabile.</summary>
      <param name="value" vsli:raw="The element to remove.">Elemento da rimuovere.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Nuovo set con l'elemento specificato rimosso oppure il set corrente se l'elemento non viene trovato nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set and the specified collection contain the same elements.">Determina se il set non modificabile corrente e la raccolta specificata contengono gli stessi elementi.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se i set sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Crea un set non modificabile che contiene solo elementi presenti in tale set o nella raccolta specificata, ma non in entrambi.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Nuovo set che contiene gli elementi presenti solo in tale set o nella raccolta specificata, ma non in entrambi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Determines whether the set contains a specified value.">Determina se il set contiene un valore specificato.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">Valore da cercare.</param>
      <param name="actualValue" vsli:raw="The matching value from the set, if found, or &lt;c&gt;equalvalue&lt;/c&gt; if there are no matches.">Valore corrispondente del set, se trovato, o <c>equalvalue</c> se non esistono corrispondenze.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching value was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se viene trovato un valore corrispondente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Crea un nuovo set non modificabile che contiene tutti gli elementi presenti in tale set o nella raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Raccolta da cui aggiungere gli elementi.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Nuovo set non modificabile con gli elementi aggiunti oppure il set originale se tutti gli elementi erano già presenti nel set.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary vsli:raw="Represents an immutable last-in-first-out (LIFO) collection.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta una raccolta LIFO (Last In, First Out) non modificabile.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the stack.">Tipo di elementi presenti nello stack.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">Rimuove tutti gli oggetti dallo stack non modificabile.</summary>
      <returns vsli:raw="An empty immutable stack.">Stack non modificabile vuoto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable stack is empty.">Ottiene un valore che indica se questo stack non modificabile è vuoto o meno.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this stack is empty; otherwise,&lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se lo stack è vuoto; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary vsli:raw="Returns the element at the top of the immutable stack without removing it.">Restituisce l'elemento all'inizio dello stack non modificabile senza rimuoverlo.</summary>
      <returns vsli:raw="The element at the top of the stack.">Elemento all'inizio dello stack.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Lo stack è vuoto.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">Rimuove l'elemento all'inizio dello stack non modificabile e restituisce il nuovo stack.</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">Nuovo stack; il valore non è mai <c>null</c>.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Lo stack è vuoto.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">Inserisce un elemento all'inizio dello stack non modificabile e restituisce il nuovo stack.</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">Elemento da inserire nello stack.</param>
      <returns vsli:raw="The new stack.">Nuovo stack.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary vsli:raw="Provides methods for creating an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fornisce i metodi per creare una matrice non modificabile, ovvero che non può essere modificata una volta che è stata creata.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary vsli:raw="Searches the sorted immutable array for a specified element using the default comparer and returns the zero-based index of the element, if it's found.">Cerca un elemento specificato nella matrice non modificabile ordinata usando l'operatore di confronto predefinito e restituisce l'indice in base zero dell'elemento, se trovato.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Matrice ordinata in cui effettuare la ricerca.</param>
      <param name="value" vsli:raw="The object to search for.">Oggetto da cercare.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Tipo di elemento memorizzato nella matrice.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Indice in base zero dell'elemento nella matrice, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore di <paramref name="value" /> o, se non è disponibile alcun elemento maggiore, il complemento bit per bit di <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> non implementa <see cref="T:System.IComparable" /> o la ricerca rileva un elemento che non implementa <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">Cerca un elemento specificato in una matrice non modificabile ordinata e restituisce l'indice in base zero dell'elemento, se trovato.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Matrice ordinata in cui effettuare la ricerca.</param>
      <param name="value" vsli:raw="The object to search for.">Oggetto da cercare.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or null to use the default comparer.">Implementazione dell'operatore di confronto da usare durante il confronto di elementi oppure null per usare l'operatore di confronto.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Tipo di elemento memorizzato nella matrice.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Indice in base zero dell'elemento nella matrice, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore di <paramref name="value" /> o, se non è disponibile alcun elemento maggiore, il complemento bit per bit di <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> ha un valore Null e <paramref name="value" /> non implementa <see cref="T:System.IComparable" /> o la ricerca rileva un elemento che non implementa <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">Cerca un elemento specificato in una matrice non modificabile ordinata e restituisce l'indice in base zero dell'elemento, se trovato.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Matrice ordinata in cui effettuare la ricerca.</param>
      <param name="index" vsli:raw="The starting index of the range to search.">Indice iniziale dell'intervallo in cui eseguire la ricerca.</param>
      <param name="length" vsli:raw="The length of the range to search.">Lunghezza dell'intervallo in cui eseguire la ricerca.</param>
      <param name="value" vsli:raw="The object to search for.">Oggetto da cercare.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Tipo di elemento memorizzato nella matrice.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Indice in base zero dell'elemento nella matrice, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore di <paramref name="value" /> o, se non è disponibile alcun elemento maggiore, il complemento bit per bit di <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> non implementa <see cref="T:System.IComparable" /> o la ricerca rileva un elemento che non implementa <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> e <paramref name="length" /> non specificano un intervallo valido in <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> è minore del limite inferiore di <paramref name="array" />.
-oppure-
<paramref name="length" /> è minore di zero.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element.">Cerca un elemento specificato in una matrice non modificabile ordinata e restituisce l'indice in base zero dell'elemento.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Matrice ordinata in cui effettuare la ricerca.</param>
      <param name="index" vsli:raw="The starting index of the range to search.">Indice iniziale dell'intervallo in cui eseguire la ricerca.</param>
      <param name="length" vsli:raw="The length of the range to search.">Lunghezza dell'intervallo in cui eseguire la ricerca.</param>
      <param name="value" vsli:raw="The object to search for.">Oggetto da cercare.</param>
      <param name="comparer" vsli:raw="The comparer to use when comparing elements for equality or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Operatore di confronto da usare durante il confronto dell'eguaglianza degli elementi oppure <see langword="null" /> per usare l'operatore di confronto.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Tipo di elemento memorizzato nella matrice.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Indice in base zero dell'elemento nella matrice, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore di <paramref name="value" /> o, se non è disponibile alcun elemento maggiore, il complemento bit per bit di <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> ha un valore Null e <paramref name="value" /> non implementa <see cref="T:System.IComparable" /> o la ricerca rileva un elemento che non implementa <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not compatible with the elements of &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> e <paramref name="length" /> non specificano un intervallo valido in <paramref name="array" />.
-oppure-
<paramref name="comparer" /> è <see langword="null" /> e <paramref name="value" /> è di un tipo non compatibile con gli elementi di <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> è minore del limite inferiore di <paramref name="array" />.
In alternativa
<paramref name="length" /> è minore di zero.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary vsli:raw="Creates an empty immutable array.">Crea una matrice non modificabile vuota.</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Tipo di elementi memorizzati nella matrice.</typeparam>
      <returns vsli:raw="An empty immutable array.">Matrice non modificabile vuota.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified object.">Crea una matrice non modificabile che contiene l'oggetto specificato.</summary>
      <param name="item" vsli:raw="The object to store in the array.">Oggetto usato per archiviare la matrice.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Tipo di elementi memorizzati nella matrice.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified object.">Matrice non modificabile che contiene l'oggetto specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Crea una matrice non modificabile che contiene gli oggetti specificati.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">Primo oggetto usato per archiviare la matrice.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">Secondo oggetto usato per archiviare la matrice.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Tipo di elementi memorizzati nella matrice.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Matrice non modificabile che contiene gli oggetti specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Crea una matrice non modificabile che contiene gli oggetti specificati.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">Primo oggetto usato per archiviare la matrice.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">Secondo oggetto usato per archiviare la matrice.</param>
      <param name="item3" vsli:raw="The third object to store in the array.">Terzo oggetto usato per archiviare la matrice.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Tipo di elementi memorizzati nella matrice.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Matrice non modificabile che contiene gli oggetti specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Crea una matrice non modificabile che contiene gli oggetti specificati.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">Primo oggetto usato per archiviare la matrice.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">Secondo oggetto usato per archiviare la matrice.</param>
      <param name="item3" vsli:raw="The third object to store in the array.">Terzo oggetto usato per archiviare la matrice.</param>
      <param name="item4" vsli:raw="The fourth object to store in the array.">Quarto oggetto usato per archiviare la matrice.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Tipo di elementi memorizzati nella matrice.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Matrice non modificabile che contiene gli oggetti specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary vsli:raw="Creates an immutable array from the specified array of objects.">Crea una matrice non modificabile dalla matrice di oggetti specificata.</summary>
      <param name="items" vsli:raw="The array of objects to populate the array with.">Matrice di oggetti con cui popolare la matrice.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Tipo di elementi memorizzati nella matrice.</typeparam>
      <returns vsli:raw="An immutable array that contains the array of items.">Matrice non modificabile che contiene la matrice di elementi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with specified objects from another array.">Crea una matrice non modificabile con gli oggetti specificati di un'altra matrice.</summary>
      <param name="items" vsli:raw="The source array of objects.">Matrice di origine degli oggetti.</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">Indice del primo elemento da copiare da <paramref name="items" />.</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">Numero di elementi da <paramref name="items" /> da includere in questa matrice non modificabile.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Tipo di elementi memorizzati nella matrice.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">Matrice non modificabile che contiene gli oggetti specificati della matrice di origine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with the specified objects from another immutable array.">Crea una matrice non modificabile con gli oggetti specificati di un'altra matrice non modificabile.</summary>
      <param name="items" vsli:raw="The source array of objects.">Matrice di origine degli oggetti.</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">Indice del primo elemento da copiare da <paramref name="items" />.</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">Numero di elementi da <paramref name="items" /> da includere in questa matrice non modificabile.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Tipo di elementi memorizzati nella matrice.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">Matrice non modificabile che contiene gli oggetti specificati della matrice di origine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">Crea una matrice modificabile che può essere convertita in <see cref="T:System.Collections.Immutable.ImmutableArray" /> senza allocare nuova memoria.</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">Tipo di elementi memorizzati nel generatore.</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">Matrice modificabile del tipo specificato che può essere convertito in modo efficiente in una matrice non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">Crea una matrice modificabile che può essere convertita in <see cref="T:System.Collections.Immutable.ImmutableArray" /> senza allocare nuova memoria.</summary>
      <param name="initialCapacity" vsli:raw="The initial capacity of the builder.">Capacità iniziale del generatore.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">Tipo di elementi memorizzati nel generatore.</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">Matrice modificabile del tipo specificato che può essere convertito in modo efficiente in una matrice non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; populated with the specified items.">Crea un nuovo oggetto <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> popolato con gli elementi specificati.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Elementi da aggiungere alla matrice.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Tipo di elemento memorizzato nella matrice.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified items.">Matrice non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Inizializza una nuova istanza dell'elemento struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Matrice di origine con cui inizializzare la matrice risultante.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">Funzione da applicare a ogni elemento della matrice di origine.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Inizializza una nuova istanza dell'elemento struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Matrice di origine con cui inizializzare la matrice risultante.</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">Indice del primo elemento nella matrice di origine da includere nella matrice risultante.</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">Numero di elementi della matrice di origine da includere nella matrice risultante.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">Funzione da applicare a ogni elemento della matrice di origine incluso nella matrice risultante.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Inizializza una nuova istanza dell'elemento struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Matrice di origine con cui inizializzare la matrice risultante.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">Funzione da applicare a ogni elemento della matrice di origine.</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">Argomento da passare alla funzione di mapping del selettore.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to pass to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Inizializza una nuova istanza dell'elemento struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Matrice di origine con cui inizializzare la matrice risultante.</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">Indice del primo elemento nella matrice di origine da includere nella matrice risultante.</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">Numero di elementi della matrice di origine da includere nella matrice risultante.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">Funzione da applicare a ogni elemento della matrice di origine incluso nella matrice risultante.</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">Argomento da passare alla funzione di mapping del selettore.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to be passed to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to be stored in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates an immutable array from the specified collection.">Crea una matrice non modificabile dalla raccolta specificata.</summary>
      <param name="items" vsli:raw="The collection of objects to copy to the immutable array.">Raccolta di oggetti da copiare nella matrice non modificabile.</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in &lt;paramref name=&quot;items&quot; /&gt;.">Tipo di elementi contenuti in <paramref name="items" />.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified collection of objects.">Matrice non modificabile che contiene la raccolta di oggetti specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Creates an immutable array from the current contents of the builder's array.">Crea una matrice non modificabile dal contenuto corrente della matrice del generatore.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable array from.">Generatore da cui creare la matrice non modificabile.</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in the immutable array.">Tipo di elementi contenuti nella matrice non modificabile.</typeparam>
      <returns vsli:raw="An immutable array that contains the current contents of the builder's array.">Restituisce una matrice non modificabile che contiene il contenuto corrente della matrice del generatore.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary vsli:raw="Represents an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta una matrice non modificabile, ovvero che non può essere modificata una volta che è stata creata.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Tipo di elemento memorizzato dalla matrice.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">Restituisce una copia della matrice originale con l'elemento specificato aggiunto alla fine.</summary>
      <param name="item" vsli:raw="The item to be added to the end of the array.">Elemento da aggiungere alla fine della matrice.</param>
      <returns vsli:raw="A new array with the specified item added to the end.">Nuova matrice con l'elemento specificato aggiunto alla fine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Restituisce una copia della matrice originale con gli elementi specificati aggiunti alla fine della matrice.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Elementi da aggiungere alla matrice.</param>
      <returns vsli:raw="A new array with the elements added.">Nuova matrice con gli elementi aggiunti.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Restituisce una copia della matrice originale con gli elementi specificati aggiunti alla fine della matrice.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Elementi da aggiungere alla matrice.</param>
      <returns vsli:raw="A new array with the elements added.">Nuova matrice con gli elementi aggiunti.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary vsli:raw="Returns a new immutable array that contains the elements of this array cast to a different type.">Restituisce una nuova matrice non modificabile che contiene gli elementi di questa matrice di cui viene eseguito il cast su un tipo diverso.</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return.">Tipo di elemento della matrice da restituire.</typeparam>
      <returns vsli:raw="An immutable array that contains the elements of this array, cast to a different type. If the cast fails, returns an array whose &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Matrice non modificabile che contiene gli elementi di questa matrice di cui viene eseguito il cast su un tipo diverso. Se il cast non riesce, restituisce una matrice la cui proprietà <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> restituisce <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary vsli:raw="Creates a new read-only memory region over this immutable array.">Crea una nuova area di memoria di sola lettura su questa matrice non modificabile.</summary>
      <returns vsli:raw="The read-only memory representation of this immutable array.">Rappresentazione in memoria di sola lettura di questa matrice non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary vsli:raw="Creates a new read-only span over this immutable array.">Crea un nuovo intervallo di sola lettura per la matrice non modificabile.</summary>
      <returns vsli:raw="The read-only span representation of this immutable array.">Rappresentazione dell'intervallo di sola lettura di questa matrice non modificabile.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary vsli:raw="A writable array accessor that can be converted into an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; instance without allocating extra memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Funzione di accesso alla matrice scrivibile che può essere convertita in un'istanza <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> senza allocare memoria aggiuntiva.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the array.">Aggiunge l'elemento specificato alla matrice.</summary>
      <param name="item" vsli:raw="The object to add to the array.">Oggetto da aggiungere alla matrice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary vsli:raw="Adds the specified items to the end of the array.">Aggiunge gli elementi specificati alla fine della matrice.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Elementi da aggiungere alla matrice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Aggiunge gli elementi specificati alla fine della matrice.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Elementi da aggiungere alla matrice.</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">Numero di elementi dalla matrice di origine da aggiungere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">Aggiunge gli elementi specificati alla fine della matrice.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Elementi da aggiungere alla matrice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">Aggiunge gli elementi specificati alla fine della matrice.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Elementi da aggiungere alla matrice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Aggiunge gli elementi specificati alla fine della matrice.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Elementi da aggiungere alla matrice.</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">Numero di elementi dalla matrice di origine da aggiungere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Aggiunge gli elementi specificati alla fine della matrice.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Elementi da aggiungere alla matrice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Aggiunge alla fine della matrice gli elementi specificati che derivano dal tipo attualmente nella matrice.</summary>
      <param name="items" vsli:raw="The items to add to end of the array.">Elementi da aggiungere alla fine della matrice.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">Tipo che deriva dal tipo di elemento già nella matrice.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Aggiunge alla fine della matrice gli elementi specificati che derivano dal tipo attualmente nella matrice</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">Elementi da aggiungere alla fine della matrice.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">Tipo che deriva dal tipo di elemento già nella matrice.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Aggiunge alla fine della matrice gli elementi specificati che derivano dal tipo attualmente nella matrice.</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">Elementi da aggiungere alla fine della matrice.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">Tipo che deriva dal tipo di elemento già nella matrice.</typeparam>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary vsli:raw="Gets or sets the length of the internal array. When set, the internal array is reallocated to the given capacity if it is not already the specified length.">Ottiene o imposta la lunghezza della matrice interna. Quando è impostata, la matrice interna viene riallocata alla capacità specificata se non corrisponde già alla lunghezza specificata.</summary>
      <returns vsli:raw="The length of the internal array.">Lunghezza della matrice interna.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the array.">Rimuove tutti gli elementi dalla matrice.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the array contains a specific value.">Stabilisce se la matrice contiene un valore specifico.</summary>
      <param name="item" vsli:raw="The object to locate in the array.">Oggetto da individuare nella matrice.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto viene trovato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the current contents to the specified array.">Copia il contenuto corrente in una matrice specificata.</summary>
      <param name="array" vsli:raw="The array to copy to.">Matrice in cui effettuare la copia.</param>
      <param name="index" vsli:raw="The index to start the copy operation.">Indice in corrispondenza del quale iniziare l'operazione di copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary vsli:raw="Gets or sets the number of items in the array.">Ottiene o imposta il numero di elementi della matrice.</summary>
      <returns vsli:raw="The number of items in the array.">Numero di elementi nella matrice.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary vsli:raw="Gets an object that can be used to iterate through the collection.">Ottiene un oggetto che può essere usato per scorrere la raccolta.</summary>
      <returns vsli:raw="An object that can be used to iterate through the collection.">Oggetto che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Determines the index of a specific item in the array.">Determina l'indice di un elemento specifico nella raccolta.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Elemento da individuare nella raccolta.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Indice di <paramref name="item" /> se è stato trovato nell'elenco; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">Determina l'indice dell'elemento specificato.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Elemento da individuare nella raccolta.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Posizione iniziale della ricerca.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Indice di <paramref name="item" /> se è stato trovato nell'elenco; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">Determina l'indice dell'elemento specificato.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Elemento da individuare nella raccolta.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Posizione iniziale della ricerca.</param>
      <param name="count" vsli:raw="The number of elements to search.">Numero di elementi in cui eseguire la ricerca.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Indice di <paramref name="item" /> se è stato trovato nell'elenco; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the index for the specified item.">Determina l'indice per l'elemento specificato.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Elemento da individuare nella raccolta.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Indice in corrispondenza del quale iniziare la ricerca.</param>
      <param name="count" vsli:raw="The starting position of the search.">Posizione iniziale della ricerca.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Indice di <paramref name="item" /> se è stato trovato nell'elenco; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the array at the specified index.">Inserisce un elemento nella matrice in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">Indice in base zero in corrispondenza del quale inserire l'elemento.</param>
      <param name="item" vsli:raw="The object to insert into the array.">Oggetto da inserire nella matrice.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the item at the specified index.">Ottiene o imposta l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">Indice dell'elemento da ottenere o impostare.</param>
      <returns vsli:raw="The item at the specified index.">Elemento in corrispondenza dell'indice specificato.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The specified index is not in the array.">L'indice specificato non è compreso nella matrice.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified index.">Ottiene un riferimento di sola lettura all'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The item index.">Indice dell'elemento.</param>
      <returns vsli:raw="The read-only reference to the element at the specified index.">Riferimento di sola lettura all'elemento in corrispondenza dell'indice specificato.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is greater or equal to the array count.">
        <paramref name="index" /> è maggiore o uguale al numero di matrici.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Determina l'indice in base zero dell'ultima occorrenza dell'elemento specificato in questa matrice.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento da cercare.</param>
      <returns vsli:raw="The 0-based index where the item was found; or -1 if it could not be found.">Indice in base zero in cui è stato trovato l'elemento oppure -1 se non è stato trovato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Determina l'indice in base zero dell'ultima occorrenza dell'elemento specificato in questa matrice.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento da cercare.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Posizione iniziale della ricerca.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Indice in base zero della matrice in cui è stato trovato l'elemento oppure -1 se non è stato trovato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Determina l'indice in base zero dell'ultima occorrenza dell'elemento specificato in questa matrice.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento da cercare.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Posizione iniziale della ricerca.</param>
      <param name="count" vsli:raw="The number of elements to search.">Numero di elementi in cui eseguire la ricerca.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Indice in base zero della matrice in cui è stato trovato l'elemento oppure -1 se non è stato trovato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Determina l'indice in base zero dell'ultima occorrenza dell'elemento specificato in questa matrice.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento da cercare.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Posizione iniziale della ricerca.</param>
      <param name="count" vsli:raw="The number of elements to search.">Numero di elementi in cui eseguire la ricerca.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Indice in base zero della matrice in cui è stato trovato l'elemento oppure -1 se non è stato trovato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary vsli:raw="Extracts the internal array as an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; and replaces it              with a zero length array.">Estrae la matrice interna come <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> e la sostituisce con una matrice di lunghezza zero.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="When &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Count&quot; /&gt; doesn't              equal &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity&quot; /&gt;.">Quando <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> non è uguale a <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the specified element.">Rimuove l'elemento specificato.</summary>
      <param name="element" vsli:raw="The item to remove.">Elemento da rimuovere.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;element&quot; /&gt; was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="element" /> è stato trovato e rimosso; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index from the array.">Rimuove l'elemento dalla matrice in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Indice in base zero dell'elemento da rimuovere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of elements in the collection.">Inverte l'ordine degli elementi nella raccolta.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary vsli:raw="Sorts the contents of the array.">Ordina il contenuto della matrice.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">Ordina il contenuto della matrice.</summary>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">Operatore di confronto da usare per l'ordinamento. Se l'operatore di confronto è <see langword="null" />, viene usato l'operatore di confronto predefinito per il tipo di elementi nella matrice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire array using the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">Ordina gli elementi nell'intera matrice usando l'elemento <see cref="T:System.Comparison`1" /> specificato.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">Oggetto <see cref="T:System.Comparison`1" /> da usare quando si confrontano gli elementi.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">Ordina il contenuto della matrice.</summary>
      <param name="index" vsli:raw="The starting index for the sort.">Indice iniziale per l'ordinamento.</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">Numero di elementi da includere nell'ordinamento.</param>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">Operatore di confronto da usare per l'ordinamento. Se l'operatore di confronto è <see langword="null" />, viene usato l'operatore di confronto predefinito per il tipo di elementi nella matrice.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Restituisce un enumeratore che scorre la matrice.</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">Enumeratore che scorre la matrice.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Restituisce un enumeratore che scorre la matrice.</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">Enumeratore che scorre la matrice.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary vsli:raw="Creates a new array with the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Crea una nuova matrice con il contenuto corrente di questo <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns vsli:raw="A new array with the contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Nuova matrice con il contenuto di questo <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary vsli:raw="Returns an immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Restituisce una matrice non modificabile che contiene il contenuto corrente di questo <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns vsli:raw="An immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Matrice non modificabile che contiene il contenuto corrente di questo <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct by casting the underlying array to an array of type &lt;typeparamref name=&quot;TOther&quot; /&gt;.">Inizializza una nuova istanza dello struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> eseguendo il cast della matrice sottostante a una matrice di tipo <paramref name="TOther" />.</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return." />
      <exception cref="T:System.InvalidCastException" vsli:raw="The cast is illegal.">Generata se il cast non è valido.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct based on the contents of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.">Inizializza una nuova istanza dello struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> in base al contenuto di un'istanza esistente, consentendo un cast statico covariante per riutilizzare in modo efficiente la matrice esistente.</summary>
      <param name="items" vsli:raw="The array to initialize the array with. No copy is made.">Matrice con cui inizializzare la matrice. Non viene effettuata alcuna copia.</param>
      <typeparam name="TDerived" vsli:raw="The type of array element to return." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">Restituisce una matrice con tutti gli elementi rimossi.</summary>
      <returns vsli:raw="An array with all of the elements removed.">Matrice con tutti gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary vsli:raw="Determines whether the specified item exists in the array.">Determina se l'elemento specificato esiste nella matrice.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento da cercare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified item was found in the array; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elemento specificato è stato individuato nella matrice; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the contents of this array to the specified array.">Copia il contenuto di questa matrice nella matrice specificata.</summary>
      <param name="destination" vsli:raw="The array to copy to.">Matrice in cui effettuare la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the contents of this array to the specified array starting at the specified destination index.">Copia il contenuto di questa matrice nella matrice specificata, a partire dall'indice di destinazione specificato.</summary>
      <param name="destination" vsli:raw="The array to copy to.">Matrice in cui effettuare la copia.</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">Indice in <paramref name="array" /> in corrispondenza del quale ha inizio la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the specified items in this array to the specified array at the specified starting index.">Copia gli elementi specificati in questa matrice nella matrice specificata in corrispondenza dell'indice iniziale specificato.</summary>
      <param name="sourceIndex" vsli:raw="The index of this array where copying begins.">Indice di questa matrice da cui ha inizio la copia.</param>
      <param name="destination" vsli:raw="The array to copy to.">Matrice in cui effettuare la copia.</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">Indice in <paramref name="array" /> in corrispondenza del quale ha inizio la copia.</param>
      <param name="length" vsli:raw="The number of elements to copy from this array.">Numero di elementi da copiare da questa matrice.</param>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary vsli:raw="Gets an empty immutable array.">Ottiene una matrice non modificabile vuota.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary vsli:raw="An array enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumeratore di matrice.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary vsli:raw="Gets the current item.">Ottiene l'elemento corrente.</summary>
      <returns vsli:raw="The current item.">Elemento corrente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances to the next value in the array.">Sposta al valore successivo nella matrice.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if another item exists in the array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se esiste un altro elemento nella matrice; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Indicates whether specified array is equal to this array.">Indica se la matrice specificata è uguale a questa matrice.</summary>
      <param name="other" vsli:raw="An object to compare with this object.">Oggetto da confrontare con l'oggetto corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; is equal to this array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="other" /> è uguale a questa matrice; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary vsli:raw="Determines if this array is equal to the specified object.">Determina se questa matrice è uguale all'oggetto specificato.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this array.">
        <see cref="T:System.Object" /> da confrontare con questa matrice.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this array is equal to &lt;paramref name=&quot;obj&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questa matrice è uguale a <paramref name="obj" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the contents of the array.">Restituisce un enumeratore che consente di scorrere il contenuto della matrice.</summary>
      <returns vsli:raw="An enumerator.">Enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary vsli:raw="Returns a hash code for this instance.">Restituisce un codice hash per questa istanza.</summary>
      <returns vsli:raw="A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.">Codice hash per questa istanza, adatto per l'utilizzo in algoritmi hash e in strutture di dati, ad esempio una tabella hash.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item.">Cerca l'elemento specificato nella matrice.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento da cercare.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Posizione dell'indice in base zero dell'elemento se viene trovato; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">Cerca l'elemento specificato nella matrice.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento da cercare.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Indice in corrispondenza del quale iniziare la ricerca.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Posizione dell'indice in base zero dell'elemento se viene trovato; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">Cerca l'elemento specificato nella matrice.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento da cercare.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Indice in corrispondenza del quale iniziare la ricerca.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Posizione dell'indice in base zero dell'elemento se viene trovato; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">Cerca l'elemento specificato nella matrice.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento da cercare.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Indice in corrispondenza del quale iniziare la ricerca.</param>
      <param name="count" vsli:raw="The number of elements to search.">Numero di elementi in cui eseguire la ricerca.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Posizione dell'indice in base zero dell'elemento se viene trovato; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">Cerca l'elemento specificato nella matrice.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento da cercare.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Indice in corrispondenza del quale iniziare la ricerca.</param>
      <param name="count" vsli:raw="The number of elements to search.">Numero di elementi in cui eseguire la ricerca.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Posizione dell'indice in base zero dell'elemento se viene trovato; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">Restituisce una nuova matrice con il valore specificato inserito nella posizione specificata.</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">Indice in base zero nella matrice in corrispondenza del quale deve essere aggiunto il nuovo elemento.</param>
      <param name="item" vsli:raw="The item to insert at the start of the array.">Elemento da inserire all'inizio della matrice.</param>
      <returns vsli:raw="A new array with the item inserted at the specified index.">Nuova matrice con l'elemento inserito in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Inserisce i valori specificati in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Indice in corrispondenza del quale inserire il valore.</param>
      <param name="items" vsli:raw="The elements to insert.">Elementi da inserire.</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">Nuova matrice non modificabile con gli elementi inseriti in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Inserisce i valori specificati in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Indice in corrispondenza del quale inserire il valore.</param>
      <param name="items" vsli:raw="The elements to insert.">Elementi da inserire.</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">Nuova matrice non modificabile con gli elementi inseriti in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary vsli:raw="Gets a value indicating whether this array was declared but not initialized.">Ottiene un valore che indica se questa matrice è stata dichiarata ma non inizializzata.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> è <see langword="null" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty or is not initialized.">Ottiene un valore che indica se questa matrice <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> è vuota o non inizializzata.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.Collections.Immutable.ImmutableArray`1.Empty&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> se è <see langword="null" /> o <see langword="false" />; in caso contrario,. <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" /></returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty.">Ottiene un valore che indica se questa matrice <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> è vuota.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> è vuoto; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index in the immutable array.">Ottiene l'elemento in corrispondenza dell'indice specificato nella matrice non modificabile.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">Indice in base zero dell'elemento da ottenere.</param>
      <returns vsli:raw="The element at the specified index in the immutable array.">Elemento in corrispondenza dell'indice specificato nella matrice non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">Ottiene un riferimento di sola lettura all'elemento in corrispondenza dell'<paramref name="index" /> specificato nell'elenco di sola lettura.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get a reference to.">Indice in base zero dell'elemento a cui ottenere un riferimento.</param>
      <returns vsli:raw="A read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">Riferimento di sola lettura all'elemento in corrispondenza dell'<paramref name="index" /> specificato nell'elenco di sola lettura.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Cerca l'elemento specificato nella matrice, a partire dalla fine della matrice.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento da cercare.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Indice in base zero della matrice in cui è stato trovato l'elemento oppure -1 se non è stato trovato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Cerca l'elemento specificato nella matrice, a partire dalla fine della matrice.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento da cercare.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Indice in corrispondenza del quale iniziare la ricerca.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Indice in base zero della matrice in cui è stato trovato l'elemento oppure -1 se non è stato trovato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Cerca l'elemento specificato nella matrice, a partire dalla fine della matrice.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento da cercare.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Indice in corrispondenza del quale iniziare la ricerca.</param>
      <param name="count" vsli:raw="The number of elements to search.">Numero di elementi in cui eseguire la ricerca.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Indice in base zero della matrice in cui è stato trovato l'elemento oppure -1 se non è stato trovato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Cerca l'elemento specificato nella matrice, a partire dalla fine della matrice.</summary>
      <param name="item" vsli:raw="The item to search for.">Elemento da cercare.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Indice in corrispondenza del quale iniziare la ricerca.</param>
      <param name="count" vsli:raw="The number of elements to search.">Numero di elementi in cui eseguire la ricerca.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Indice in base zero della matrice in cui è stato trovato l'elemento oppure -1 se non è stato trovato.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary vsli:raw="Gets the number of elements in the array.">Ottiene il numero di elementi nella matrice.</summary>
      <returns vsli:raw="The number of elements in the array.">Numero di elementi nella matrice</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary vsli:raw="Filters the elements of this array to those assignable to the specified type.">Filtra gli elementi di questa matrice in base a quelli assegnabili al tipo specificato.</summary>
      <typeparam name="TResult" vsli:raw="The type to filter the elements of the sequence on.">Il tipo in base al quale filtrare gli elementi della sequenza.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; that contains elements from the input sequence of type of &lt;paramref name=&quot;TResult&quot; /&gt;.">Oggetto <see cref="T:System.Collections.IEnumerable" /> che contiene elementi della sequenza di input del tipo <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">Restituisce un valore che indica se due matrici sono uguali.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">Matrice a sinistra dell'operatore.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">Matrice a destra dell'operatore.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se le matrici sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">Restituisce un valore che indica se due matrici sono uguali.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">Matrice a sinistra dell'operatore.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">Matrice a destra dell'operatore.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se le matrici sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates whether two arrays are not equal.">Restituisce un valore che indica se due matrici non sono uguali.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">Matrice a sinistra dell'operatore.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">Matrice a destra dell'operatore.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se le matrici non sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Checks for inequality between two array.">Verifica la disuguaglianza tra due matrici.</summary>
      <param name="left" vsli:raw="The object to the left of the operator.">Oggetto a sinistra dell'operatore.</param>
      <param name="right" vsli:raw="The object to the right of the operator.">Oggetto a destra dell'operatore.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se le due matrici non sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array. If no match is found, the current array is returned.">Restituisce una matrice con la prima occorrenza dell'elemento specificato rimosso dalla matrice. Se non viene trovata alcuna corrispondenza, viene restituita la matrice corrente.</summary>
      <param name="item" vsli:raw="The item to remove.">Elemento da rimuovere.</param>
      <returns vsli:raw="A new array with the item removed.">Nuova matrice con l'elemento rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array.  &#xA;  &#xA; If no match is found, the current array is returned.">Restituisce una matrice con la prima occorrenza dell'elemento specificato rimosso dalla matrice.  
 Se non viene trovata alcuna corrispondenza, viene restituita la matrice corrente.</summary>
      <param name="item" vsli:raw="The item to remove.">Elemento da rimuovere.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns vsli:raw="A new array with the specified item removed.">Nuova matrice con l'elemento specificato rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">Rimuove della matrice tutti gli elementi che soddisfano la condizione specificata.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Delegato che definisce le condizioni degli elementi da rimuovere.</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">Nuova matrice con gli elementi che soddisfano la condizione specificata rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">Restituisce una matrice con l'elemento in corrispondenza della posizione specificata rimosso.</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">Indice in base zero dell'elemento da rimuovere dalla matrice restituita.</param>
      <returns vsli:raw="A new array with the item at the specified index removed.">Nuova matrice con l'elemento in corrispondenza dell'indice specificato rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Rimuove da questa matrice gli elementi specificati.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Elementi da rimuovere se vengono trovate corrispondenze in questo elenco.</param>
      <returns vsli:raw="A new array with the elements removed.">Nuova matrice con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Rimuove da questa matrice gli elementi specificati.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Elementi da rimuovere se vengono trovate corrispondenze in questo elenco.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns vsli:raw="A new array with the elements removed.">Nuova matrice con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Removes the specified values from this list.">Rimuove da questo elenco i valori specificati.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Elementi da rimuovere se vengono trovate corrispondenze in questo elenco.</param>
      <returns vsli:raw="A new list with the elements removed.">Nuovo elenco con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this list.">Rimuove da questo elenco gli elementi specificati.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Elementi da rimuovere se vengono trovate corrispondenze in questo elenco.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns vsli:raw="A new array with the elements removed.">Nuova matrice con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">Restituisce una matrice con gli elementi in corrispondenza della posizione specificata rimossi.</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">Indice in base zero dell'elemento iniziale da rimuovere dalla matrice.</param>
      <param name="length" vsli:raw="The number of elements to remove from the array.">Numero di elementi da rimuovere dalla matrice.</param>
      <returns vsli:raw="The new array with the specified elements removed.">Nuova matrice con gli elementi specificati rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Individua il primo elemento nella matrice uguale al valore specificato e sostituisce il valore con il nuovo valore specificato.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">Valore da trovare e sostituire nella matrice.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">Valore con cui sostituire <c>oldvalue</c>.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Nuova matrice che contiene <paramref name="newValue" /> anche se i valori nuovi e precedenti sono uguali.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> non è presente nella matrice.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Individua il primo elemento nella matrice uguale al valore specificato e sostituisce il valore con il nuovo valore specificato.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">Valore da trovare e sostituire nella matrice.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">Valore con cui sostituire <c>oldvalue</c>.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">Operatore di confronto di uguaglianza da usare per confrontare i valori.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Nuova matrice che contiene <paramref name="newValue" /> anche se i valori nuovi e precedenti sono uguali.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> non è presente nella matrice.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Sostituisce l'elemento in corrispondenza dell'indice specificato con l'elemento specificato.</summary>
      <param name="index" vsli:raw="The index of the item to replace.">Indice dell'elemento da sostituire.</param>
      <param name="item" vsli:raw="The item to add to the list.">Elemento da aggiungere all'elenco.</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">Nuova matrice che contiene <paramref name="item" /> in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary vsli:raw="Sorts the elements in the immutable array using the default comparer.">Ordina gli elementi della matrice non modificabile usando l'operatore di confronto predefinito.</summary>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Nuova matrice non modificabile che contiene gli elementi di questa matrice, nell'ordine specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the immutable array using the specified comparer.">Ordina gli elementi della matrice non modificabile usando l'operatore di confronto specificato.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Implementazione da usare durante il confronto di elementi oppure <see langword="null" /> per usare l'operatore di confronto predefinito</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Nuova matrice non modificabile che contiene gli elementi di questa matrice, nell'ordine specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; using             the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">Ordina gli elementi in <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> usando l'elemento <see cref="T:System.Comparison`1" /> specificato.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">Oggetto <see cref="T:System.Comparison`1" /> da usare quando si confrontano gli elementi.</param>
      <returns vsli:raw="The sorted list.">Elenco ordinato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">
        <paramref name="comparison" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the specified elements in the immutable array using the specified comparer.">Ordina gli elementi specificati della matrice non modificabile usando l'operatore di confronto specificato.</summary>
      <param name="index" vsli:raw="The index of the first element to sort.">Indice del primo elemento da ordinare.</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">Numero di elementi da includere nell'ordinamento.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Implementazione da usare durante il confronto di elementi oppure <see langword="null" /> per usare l'operatore di confronto predefinito</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Nuova matrice non modificabile che contiene gli elementi di questa matrice, nell'ordine specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="item" vsli:raw="The item to add to the end of the array.">Elemento da aggiungere alla fine della matrice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">Ottiene il numero di matrici nella raccolta.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Generata se la proprietà <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> restituisce true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">Ottiene un valore che indica se l'istanza è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <c>true</c> se l'istanza è di sola lettura. in caso contrario, <c>false</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="item" vsli:raw="The object to remove from the array.">Oggetto da rimuovere dalla matrice.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Restituisce un enumeratore che scorre la matrice.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">Enumeratore che può essere usato per scorrere la matrice.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="index" vsli:raw="The index of the location to insert the item.">Indice della posizione in cui inserire l'elemento.</param>
      <param name="item" vsli:raw="The item to insert.">Elemento da inserire.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index in the read-only list.">Ottiene o imposta l'elemento in corrispondenza dell'indice specificato nell'elenco di sola lettura.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">Indice in base zero dell'elemento da ottenere.</param>
      <returns vsli:raw="The element at the specified index in the read-only list.">Elemento in corrispondenza dell'indice specificato nell'elenco di sola lettura.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Generata sempre da set.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Generata se la proprietà <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> restituisce true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="index" vsli:raw="The index.">Indice.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">Ottiene il numero di matrici nella raccolta.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Generata se la proprietà <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> restituisce true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index.">Ottiene l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index.">Indice.</param>
      <returns vsli:raw="The element.">Elemento.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Generata se la proprietà <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> restituisce true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies this array to another array starting at the specified index.">Copia questa matrice in un'altra matrice, a partire dall'indice specificato.</summary>
      <param name="array" vsli:raw="The array to copy this array to.">Matrice in cui copiare questa matrice.</param>
      <param name="index" vsli:raw="The index in the destination array to start the copy operation.">Indice nella matrice di destinazione in corrispondenza del quale iniziare l'operazione di copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the size of the array.">Ottiene la dimensione della matrice.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Generata se la proprietà <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> restituisce true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface. Always returns &lt;see langword=&quot;true&quot; /&gt; since since immutable collections are thread-safe.">Vedere l'interfaccia <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the sync root.">Ottiene la radice di sincronizzazione.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable array.">Restituisce un enumeratore che consente di scorrere la matrice non modificabile.</summary>
      <returns vsli:raw="An enumerator that iterates through the immutable array.">Enumeratore che consente di scorrere la matrice non modificabile.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">La proprietà <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> restituisce <see langword="true" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="value" vsli:raw="The value to add to the array.">Valore da aggiungere alla matrice.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Generata in tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Generata in tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="value" vsli:raw="The value to check for.">Valore da controllare.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Gets the value at the specified index.">Ottiene il valore in corrispondenza dell'indice specificato.</summary>
      <param name="value" vsli:raw="The value to return the index of.">Valore di cui restituire l'indice.</param>
      <returns vsli:raw="The value of the element at the specified index.">Valore dell'elemento in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="index" vsli:raw="Index that indicates where to insert the item.">Indice che indica dove inserire l'elemento.</param>
      <param name="value" vsli:raw="The value to insert.">Valore da inserire.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Generata in tutti i casi.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether this instance is fixed size.">Ottiene un valore che indica se l'istanza ha una dimensione fissa.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <c>true</c> se l'istanza è di dimensioni fisse; in caso contrario, <c>false</c>.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">Ottiene un valore che indica se l'istanza è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <c>true</c> se l'istanza è di sola lettura. in caso contrario, <c>false</c>.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Ottiene o imposta l'oggetto <see cref="T:System.Object" /> in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index.">Indice.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Generata sempre da set.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Generata se la proprietà <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> restituisce true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="value" vsli:raw="The value to remove from the array.">Valore da rimuovere dalla matrice.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Generata in tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="index" vsli:raw="The index of the item to remove.">Indice dell'elemento da rimuovere.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Generata in tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">Restituisce una copia della matrice originale con l'elemento specificato aggiunto alla fine.</summary>
      <param name="value" vsli:raw="The value to add to the end of the array.">Valore da aggiungere alla fine della matrice.</param>
      <returns vsli:raw="A new array with the specified item added to the end.">Nuova matrice con l'elemento specificato aggiunto alla fine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Restituisce una copia della matrice originale con gli elementi specificati aggiunti alla fine della matrice.</summary>
      <param name="items" vsli:raw="The elements to add to the end of the array.">Elementi da aggiungere alla fine della matrice.</param>
      <returns vsli:raw="A new array with the elements added to the end.">Nuova matrice con gli elementi aggiunti alla fine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">Restituisce una matrice con tutti gli elementi rimossi.</summary>
      <returns vsli:raw="An array with all the elements removed.">Matrice con tutti gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">Restituisce una nuova matrice con il valore specificato inserito nella posizione specificata.</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">Indice in base zero nella matrice in corrispondenza del quale deve essere aggiunto il nuovo elemento.</param>
      <param name="element" vsli:raw="The item to insert at the start of the array.">Elemento da inserire all'inizio della matrice.</param>
      <returns vsli:raw="A new array with the specified value inserted.">Nuova matrice con il valore specificato inserito.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Inserisce i valori specificati in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Indice in corrispondenza del quale inserire il valore.</param>
      <param name="items" vsli:raw="The elements to insert.">Elementi da inserire.</param>
      <returns vsli:raw="A new array with the specified values inserted.">Nuova matrice con i valori specificati rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array; if no match is found, the current array is returned.">Restituisce una matrice con la prima occorrenza dell'elemento specificato rimosso dalla matrice; se non viene trovata alcuna corrispondenza, viene restituita la matrice corrente.</summary>
      <param name="value" vsli:raw="The value to remove from the array.">Valore da rimuovere dalla matrice.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns vsli:raw="A new array with the value removed.">Nuova matrice con il valore rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">Rimuove della matrice tutti gli elementi che soddisfano la condizione specificata.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Delegato che definisce le condizioni degli elementi da rimuovere.</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">Nuova matrice con gli elementi che soddisfano la condizione specificata rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">Restituisce una matrice con l'elemento in corrispondenza della posizione specificata rimosso.</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">Indice in base zero dell'elemento da rimuovere dalla matrice restituita.</param>
      <returns vsli:raw="A new array with the specified item removed.">Nuova matrice con l'elemento specificato rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Rimuove da questa matrice gli elementi specificati.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Elementi da rimuovere se vengono trovate corrispondenze in questo elenco.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns vsli:raw="A new array with the elements removed.">Nuova matrice con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">Restituisce una matrice con gli elementi in corrispondenza della posizione specificata rimossi.</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">Indice in base zero dell'elemento iniziale da rimuovere dalla matrice.</param>
      <param name="count" vsli:raw="The number of elements to remove from the array.">Numero di elementi da rimuovere dalla matrice.</param>
      <returns vsli:raw="The new array with the specified elements removed.">Nuova matrice con gli elementi specificati rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Individua il primo elemento nella matrice uguale al valore specificato e sostituisce il valore con il nuovo valore specificato.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">Valore da trovare e sostituire nella matrice.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">Valore con cui sostituire <c>oldvalue</c>.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">Operatore di confronto di uguaglianza da usare per confrontare i valori.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Nuova matrice che contiene <paramref name="newValue" /> anche se i valori nuovi e precedenti sono uguali.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> non è presente nella matrice.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Sostituisce l'elemento in corrispondenza dell'indice specificato con l'elemento specificato.</summary>
      <param name="index" vsli:raw="The index of the item to replace.">Indice dell'elemento da sostituire.</param>
      <param name="value" vsli:raw="The value to add to the list.">Valore da aggiungere all'elenco.</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">Nuova matrice che contiene <paramref name="item" /> in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary vsli:raw="Determines whether the current collection element precedes, occurs in the same position as, or follows another element in the sort order.">Determina se l'elemento raccolta corrente precede, è nella stessa posizione o segue un altro elemento nell'ordinamento.</summary>
      <param name="other" vsli:raw="The element to compare with the current instance.">Elemento da confrontare con l'istanza corrente.</param>
      <param name="comparer" vsli:raw="The object used to compare members of the current array with the corresponding members of other array.">Oggetto usato per confrontare i membri della matrice corrente con i membri corrispondenti di un'altra matrice.</param>
      <returns vsli:raw="An integer that indicates whether the current element precedes, is in the same position or follows the other element.">Intero che indica se l'elemento corrente precede, è nella stessa posizione o segue l'altro elemento.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The arrays are not the same length.">Le matrici non hanno la stessa lunghezza.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary vsli:raw="Determines whether this array is structurally equal to the specified array.">Determina se questa matrice è uguale alla matrice specificata dal punto di vista strutturale.</summary>
      <param name="other" vsli:raw="The array to compare with the current instance.">Matrice da confrontare con l'istanza corrente.</param>
      <param name="comparer" vsli:raw="An object that determines whether the current instance and other are structurally equal.">Oggetto che determina se l'istanza corrente e l'altra sono uguali dal punto di vista strutturale.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are structurally equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se le due matrici sono uguali dal punto di vista strutturale; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary vsli:raw="Returns a hash code for the current instance.">Restituisce un codice hash per l'istanza corrente.</summary>
      <param name="comparer" vsli:raw="An object that computes the hash code of the current object.">Oggetto che calcola il codice hash dell'oggetto corrente.</param>
      <returns vsli:raw="The hash code for the current instance.">Codice hash per l'istanza corrente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary vsli:raw="Creates a mutable array that has the same contents as this array and can be efficiently mutated across multiple operations using standard mutable interfaces.">Crea una matrice modificabile con lo stesso contenuto di questa matrice e che può essere modificata in modo efficiente tra più operazioni tramite interfacce standard modificabili.</summary>
      <returns vsli:raw="The new builder with the same contents as this array.">Nuovo generatore con lo stesso contenuto di questa matrice.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fornisce un set di metodi di inizializzazione per le istanze della classe <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" />.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Determines whether the specified immutable dictionary contains the specified key/value pair.">Determina se il dizionario non modificabile specificato contiene la coppia chiave/valore specificata.</summary>
      <param name="map" vsli:raw="The immutable dictionary to search.">Dizionario non modificabile in cui eseguire la ricerca.</param>
      <param name="key" vsli:raw="The key to locate in the immutable dictionary.">Chiave da individuare nel dizionario non modificabile.</param>
      <param name="value" vsli:raw="The value to locate on the specified key, if the key is found.">Valore da individuare nella chiave specificata, se la chiave viene trovata.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the immutable dictionary.">Tipo di chiavi nel dizionario non modificabile.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the immutable dictionary.">Tipo di valori nel dizionario non modificabile.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this map contains the specified key/value pair; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se questa mappa contiene la coppia chiave/valore specificata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable dictionary.">Crea un dizionario non modificabile vuoto.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Dizionario non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key comparer.">Crea un dizionario non modificabile vuoto che usa l'operatore di confronto della chiave specificato.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Implementazione da usare per determinare l'uguaglianza delle chiavi nel dizionario.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Dizionario non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key and value comparers.">Crea un dizionario non modificabile vuoto che usa gli operatori di confronto della chiave e del valore specificati.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Implementazione da usare per determinare l'uguaglianza delle chiavi nel dizionario.</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">Implementazione da usare per determinare l'uguaglianza dei valori nel dizionario.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Dizionario non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Crea un nuovo generatore di dizionario non modificabile.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns vsli:raw="The new builder.">Nuovo generatore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Crea un nuovo generatore di dizionario non modificabile.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Operatore di confronto della chiave.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns vsli:raw="The new builder.">Nuovo generatore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Crea un nuovo generatore di dizionario non modificabile.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Operatore di confronto della chiave.</param>
      <param name="valueComparer" vsli:raw="The value comparer.">Operatore di confronto del valore.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns vsli:raw="The new builder.">Nuovo generatore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items.">Crea un nuovo dizionario non modificabile che contiene gli elementi specificati.</summary>
      <param name="items" vsli:raw="The items used to populate the dictionary before it's immutable.">Elementi usati per popolare il dizionario prima che diventi non modificabile.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Tipo delle chiavi nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Tipo dei valori nel dizionario.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items.">Nuovo dizionario non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">Crea un nuovo dizionario non modificabile che contiene gli elementi specificati e usa l'operatore di confronto della chiave specificato.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">Implementazione dell'operatore di confronto da usare per verificare l'uguaglianza delle chiavi.</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">Elementi da aggiungere al dizionario prima che diventi non modificabile.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Tipo delle chiavi nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Tipo dei valori nel dizionario.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">Nuovo dizionario non modificabile che contiene gli elementi specificati e usa l'operatore di confronto specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">Crea un nuovo dizionario non modificabile che contiene gli elementi specificati e usa l'operatore di confronto della chiave specificato.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">Implementazione dell'operatore di confronto da usare per verificare l'uguaglianza delle chiavi.</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">Implementazione dell'operatore di confronto da usare per verificare l'uguaglianza dei valori.</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">Elementi da aggiungere al dizionario prima che diventi non modificabile.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Tipo delle chiavi nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Tipo dei valori nel dizionario.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">Nuovo dizionario non modificabile che contiene gli elementi specificati e usa l'operatore di confronto specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Ottiene il valore per una determinata chiave se esiste una chiave corrispondente nel dizionario.</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">Dizionario da cui recuperare il valore.</param>
      <param name="key" vsli:raw="The key to search for.">Chiave da ricercare.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo di chiave.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">Tipo di valore.</typeparam>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">Valore della chiave oppure <c>default(TValue)</c> se non è stata trovata alcuna chiave corrispondente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Ottiene il valore per una determinata chiave se esiste una chiave corrispondente nel dizionario.</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">Dizionario da cui recuperare il valore.</param>
      <param name="key" vsli:raw="The key to search for.">Chiave da ricercare.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">Valore predefinito da restituire se non viene trovata alcuna chiave corrispondente nel dizionario.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo di chiave.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">Tipo di valore.</typeparam>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">Valore della chiave oppure <paramref name="defaultValue" /> se non è stata trovata alcuna chiave corrispondente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Constructs an immutable dictionary from an existing collection of elements, applying a transformation function to the source keys.">Costruisce un dizionario non modificabile da una raccolta di elementi esistente, applicando una funzione di trasformazione alle chiavi di origine.</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">Raccolta di origine usata per generare il dizionario non modificabile.</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">Funzione usata per trasformare le chiavi per il dizionario non modificabile.</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">Tipo di elemento nella raccolta di origine.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">Tipo di chiave nel dizionario non modificabile risultante.</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">Dizionario non modificabile che contiene gli elementi da <paramref name="source" />, con le chiavi trasformate applicando <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Constructs an immutable dictionary based on some transformation of a sequence.">Costruisce un dizionario non modificabile basato su una trasformazione di una sequenza.</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">Raccolta di origine usata per generare il dizionario non modificabile.</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">Funzione usata per trasformare le chiavi per il dizionario non modificabile.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Operatore di confronto della chiave da usare per il dizionario.</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">Tipo di elemento nella raccolta di origine.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">Tipo di chiave nel dizionario non modificabile risultante.</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">Dizionario non modificabile che contiene gli elementi da <paramref name="source" />, con le chiavi trasformate applicando <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents.">Enumera una sequenza di coppie chiave/valore e produce un dizionario non modificabile del relativo contenuto.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Sequenza di coppie chiave/valore da enumerare.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo di valori nel dizionario.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Dizionario non modificabile che contiene le coppie chiave/valore nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">Enumera una sequenza di coppie chiave/valore e produce un dizionario non modificabile del relativo contenuto usando l'operatore di confronto della chiave specificato.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Sequenza di coppie chiave/valore da enumerare.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Operatore di confronto della chiave da usare durante la compilazione del dizionario non modificabile.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo di valori nel dizionario.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Dizionario non modificabile che contiene le coppie chiave/valore nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key and value comparers.">Enumera una sequenza di coppie chiave/valore e produce un dizionario non modificabile del relativo contenuto usando gli operatori di confronto della chiave e del valore specificati.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Sequenza di coppie chiave/valore da enumerare.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Operatore di confronto della chiave da usare durante la compilazione del dizionario non modificabile.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">Operatore di confronto del valore da usare per il dizionario non modificabile.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo di valori nel dizionario.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Dizionario non modificabile che contiene le coppie chiave/valore nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable dictionary from the current contents of the builder's dictionary.">Crea un dizionario non modificabile dal contenuto corrente del dizionario del generatore.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable dictionary from.">Generatore da cui creare il dizionario non modificabile.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo di valori nel dizionario.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the current contents in the builder's dictionary.">Dizionario non modificabile che contiene il contenuto corrente nel dizionario del generatore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents.">Enumera e trasforma una sequenza e produce un dizionario non modificabile del relativo contenuto.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Sequenza da enumerare per generare il dizionario.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Funzione che produrrà la chiave per il dizionario da ogni elemento della sequenza.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Funzione che produrrà il valore per il dizionario da ogni elemento della sequenza.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo degli elementi nella sequenza.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Tipo di chiavi nel dizionario risultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Tipo di valori nel dizionario risultante.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Dizionario non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key comparer.">Enumera e trasforma una sequenza e produce un dizionario non modificabile del relativo contenuto usando l'operatore di confronto della chiave specificato.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Sequenza da enumerare per generare il dizionario.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Funzione che produrrà la chiave per il dizionario da ogni elemento della sequenza.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Funzione che produrrà il valore per il dizionario da ogni elemento della sequenza.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Operatore di confronto della chiave da usare per il dizionario.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo degli elementi nella sequenza.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Tipo di chiavi nel dizionario risultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Tipo di valori nel dizionario risultante.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Dizionario non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key and value comparers.">Enumera e trasforma una sequenza e produce un dizionario non modificabile del relativo contenuto usando gli operatori di confronto della chiave e del valore specificati.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Sequenza da enumerare per generare il dizionario.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Funzione che produrrà la chiave per il dizionario da ogni elemento della sequenza.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Funzione che produrrà il valore per il dizionario da ogni elemento della sequenza.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Operatore di confronto della chiave da usare per il dizionario.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">Operatore di confronto del valore da usare per il dizionario.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo degli elementi nella sequenza.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Tipo di chiavi nel dizionario risultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Tipo di valori nel dizionario risultante.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Dizionario non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable, unordered collection of keys and values.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta una raccolta non modificabile e non ordinata di chiavi e valori.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo di valori nel dizionario.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable dictionary.">Aggiunge un elemento con la chiave e il valore specificati al dizionario non modificabile.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Chiave dell'elemento da aggiungere.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valore dell'elemento da aggiungere.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">Nuovo dizionario non modificabile che contiene la coppia chiave/valore aggiuntiva.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">La chiave specificata esiste già nel dizionario, ma ha un valore diverso.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the immutable dictionary.">Aggiunge le coppie chiave/valore specificate al dizionario non modificabile.</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">Coppie chiave/valore da aggiungere.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Nuovo dizionario non modificabile che contiene le coppie chiave/valore aggiuntive.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Una delle chiavi specificate esiste già nel dizionario, ma ha un valore diverso.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary vsli:raw="Represents a hash map that mutates with little or no memory allocations and that can produce or build on immutable hash map instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta una mappa di hash che viene modificata con allocazioni di memoria minime o nulle e in grado di produrre o compilare su istanze di mappa di hash non modificabili in modo molto efficiente.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable dictionary.">Aggiunge un elemento con la chiave e il valore specificati al dizionario non modificabile.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Chiave dell'elemento da aggiungere.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valore dell'elemento da aggiungere.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> è null.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the dictionary.">Un elemento con la stessa chiave esiste già nel dizionario.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Il dizionario è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable dictionary.">Aggiunge l'elemento specificato al dizionario non modificabile.</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">Oggetto da aggiungere al dizionario.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Il dizionario è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to this collection.">Aggiunge una sequenza di valori a questa raccolta.</summary>
      <param name="items" vsli:raw="The items to add to this collection.">Elementi da aggiungere a questa raccolta.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable dictionary.">Rimuove tutti gli elementi dal dizionario non modificabile.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Il dizionario è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains a specific value.">Determina se il dizionario non modificabile contiene un valore specifico.</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">Oggetto da individuare nel dizionario.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <paramref name="item" /> viene trovato nel dizionario; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified key.">Determina se il dizionario non modificabile contiene un elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">Chiave da individuare nel dizionario.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il dizionario contiene un elemento con la chiave; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified value.">Determina se il dizionario non modificabile contiene un elemento con il valore specificato.</summary>
      <param name="value" vsli:raw="The value to locate in the immutable dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valore da individuare nel dizionario non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il dizionario contiene un elemento con il valore specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable dictionary.">Ottiene il numero di elementi contenuti nel dizionario non modificabile.</summary>
      <returns vsli:raw="The number of elements contained in the immutable dictionary.">Numero di elementi contenuti nel dizionario non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">Restituisce un enumeratore che esegue l'iterazione di tutto il dizionario non modificabile.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Ottiene il valore per una determinata chiave se esiste una chiave corrispondente nel dizionario.</summary>
      <param name="key" vsli:raw="The key to search for.">Chiave da ricercare.</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">Valore della chiave oppure <c>default(TValue)</c> se non è stata trovata alcuna chiave corrispondente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Ottiene il valore per una determinata chiave se esiste una chiave corrispondente nel dizionario.</summary>
      <param name="key" vsli:raw="The key to search for.">Chiave da ricercare.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">Valore predefinito da restituire se non viene trovata alcuna chiave corrispondente nel dizionario.</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">Valore della chiave oppure <paramref name="defaultValue" /> se non è stata trovata alcuna chiave corrispondente.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Ottiene o imposta l'elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The element to get or set.">Elemento da ottenere o impostare.</param>
      <returns vsli:raw="The element that has the specified key.">Elemento che dispone della chiave specificata.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is being retrieved, and &lt;paramref name=&quot;key&quot; /&gt; is not found.">La proprietà è in corso di recupero e non è possibile trovare <paramref name="key" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The property is being set, and the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">La proprietà è in corso di impostazione e <see cref="T:System.Collections.Generic.IDictionary`2" /> è di sola lettura.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Ottiene o imposta l'operatore di confronto della chiave.</summary>
      <returns vsli:raw="The key comparer.">Operatore di confronto della chiave.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a collection that contains the keys of the immutable dictionary.">Ottiene una raccolta contenente le chiavi presenti nel dizionario non modificabile.</summary>
      <returns vsli:raw="A collection that contains the keys of the object that implements the immutable dictionary.">Raccolta contenente le chiavi dell'oggetto che implementa il dizionario non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Rimuove dal dizionario non modificabile l'elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Chiave dell'elemento da rimuovere.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the dictionary.">
        <see langword="true" /> se l'elemento viene rimosso correttamente; in caso contrario, <see langword="false" />.  Questo metodo restituisce <see langword="false" /> anche se <paramref name="key" /> non è stato trovato nel dizionario.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> è null.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Il dizionario è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable dictionary.">Rimuove la prima occorrenza di un oggetto specifico dal dizionario non modificabile.</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">Oggetto da rimuovere dal dizionario.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns false if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">
        <see langword="true" /> se <paramref name="item" /> è stato rimosso correttamente dal dizionario; in caso contrario, <see langword="false" />. Questo metodo restituisce false anche se <paramref name="item" /> non viene trovato nel dizionario.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Il dizionario è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable dictionary.">Rimuove dal dizionario non modificabile tutte le voci con chiavi che corrispondono a quelle presenti nella sequenza specificata.</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">Chiavi per le voci da rimuovere dal dizionario.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, starting at the specified array index.">Copia gli elementi del dizionario in una matrice di tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" />, iniziando dall'indice di matrice specificato.</summary>
      <param name="array" vsli:raw="The one-dimensional array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Matrice unidimensionale di tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" /> che costituisce la destinazione degli elementi copiati dal dizionario. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Ottiene un valore che indica se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe); in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ottiene un oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Aggiunge un elemento con la chiave e il valore forniti all'oggetto dizionario.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Chiave dell'elemento da aggiungere.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valore dell'elemento da aggiungere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">Determina se l'oggetto dizionario contiene un elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key to locate.">La chiave da individuare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il dizionario contiene un elemento con la chiave; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Restituisce un oggetto <see cref="T:System.Collections.IDictionaryEnumerator" /> per il dizionario.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Oggetto <see cref="T:System.Collections.IDictionaryEnumerator" /> per il dizionario.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Ottiene un valore che indica se le dimensioni dell'oggetto <see cref="T:System.Collections.IDictionary" /> sono fisse.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se le dimensioni dell'oggetto <see cref="T:System.Collections.IDictionary" /> sono fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Ottiene o imposta l'elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key.">Chiave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Ottiene <see cref="T:System.Collections.Generic.ICollection`1" /> contenente le chiavi di <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contenente le chiavi dell'oggetto che implementa l'interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">Rimuove dal dizionario l'elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Chiave dell'elemento da rimuovere.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Ottiene <see cref="T:System.Collections.Generic.ICollection`1" /> contenente i valori in <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contenente i valori nell'oggetto che implementa l'interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Oggetto enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable dictionary based on the contents of this instance.">Crea un dizionario non modificabile basato sul contenuto di questa istanza.</summary>
      <returns vsli:raw="An immutable dictionary.">Dizionario non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Determina se il dizionario contiene una chiave specificata.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Chiave da ricercare.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">La chiave corrispondente presente nel dizionario, se trovata, oppure <c>equalkey</c> se non viene trovata alcuna corrispondenza.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se viene trovata una corrispondenza per <paramref name="equalKey" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Returns the value associated with the specified key.">Restituisce il valore associato alla chiave specificata.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Chiave di cui verrà recuperato il valore.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, returns the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Quando termina, questo metodo restituisce il valore associato alla chiave specificata nel caso in cui la chiave venga trovata; in caso contrario, restituisce il valore predefinito per il tipo di parametro <paramref name="value" />. Questo parametro viene passato non inizializzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto che implementa il dizionario non modificabile contiene un elemento con la chiave specificata; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> è null.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">Ottiene o imposta l'operatore di confronto del valore.</summary>
      <returns vsli:raw="The value comparer.">Operatore di confronto del valore.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable dictionary.">Ottiene una raccolta contenente i valori presenti nel dizionario non modificabile.</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">Raccolta contenente i valori dell'oggetto che implementa il dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Recupera un dizionario non modificabile vuoto con lo stesso ordinamento e le stesse regole di confronto chiave/valore di questa istanza del dizionario.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Dizionario vuoto con ordinamento e regole di confronto chiave/valore equivalenti.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable dictionary contains the specified key/value pair.">Determina se questo dizionario non modificabile contiene la coppia chiave/valore specificata.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">Coppia chiave/valore da individuare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la coppia chiave/valore specificata viene trovata nel dizionario; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified key.">Determina se il dizionario non modificabile contiene un elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key to locate.">La chiave da individuare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il dizionario non modificabile contiene un elemento con la chiave specificata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified value.">Determina se il dizionario non modificabile contiene un elemento con il valore specificato.</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valore da individuare. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il dizionario contiene un elemento con il valore specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable dictionary.">Ottiene il numero di coppie chiave/valore nel dizionario non modificabile.</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">Numero di coppie chiave/valore nel dizionario.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable dictionary.">Ottiene un dizionario non modificabile vuoto.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable dictionary without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera il contenuto del dizionario non modificabile senza allocare memoria.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Ottiene l'elemento in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns vsli:raw="The element in the dictionary at the current position of the enumerator.">Elemento del dizionario nella posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator&quot; /&gt; class.">Rilascia le risorse usate dall'istanza corrente della classe <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable dictionary.">Sposta l'enumeratore all'elemento successivo del dizionario non modificabile.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the dictionary.">
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo; <see langword="false" /> se l'enumeratore ha superato la fine del dizionario.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">Il dizionario è stato modificato dopo la creazione dell'enumeratore.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the dictionary.">Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento nel dizionario.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">Il dizionario è stato modificato dopo la creazione dell'enumeratore.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">Ottiene l'elemento corrente.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">Restituisce un enumeratore che esegue l'iterazione di tutto il dizionario non modificabile.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Enumeratore che può essere usato per scorrere il dizionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable dictionary is empty.">Ottiene un valore che indica se questa istanza del dizionario non modificabile è vuota o meno.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'istanza è vuota; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">Ottiene l'oggetto <paramref name="TValue" /> associato alla chiave specificata.</summary>
      <param name="key" vsli:raw="The type of the key.">Tipo di chiave.</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">Valore associato alla chiave specificata. Se non vengono trovati risultati, l'operazione genera un'eccezione.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable dictionary.">Ottiene l'operatore di confronto della chiave per il dizionario non modificabile.</summary>
      <returns vsli:raw="The key comparer.">Operatore di confronto della chiave.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable dictionary.">Ottiene le chiavi nel dizionario non modificabile.</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">Chiavi nel dizionario non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Rimuove dal dizionario non modificabile l'elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Chiave dell'elemento da rimuovere.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">Nuovo dizionario non modificabile con l'elemento specificato rimosso oppure questa istanza se la chiave specificata non viene trovata nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">Rimuove dal dizionario non modificabile gli elementi con le chiavi specificate.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">Chiavi degli elementi da rimuovere.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Nuovo dizionario non modificabile con le chiavi specificate rimosse oppure questa istanza se le chiavi specificate non vengono trovate nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">Imposta la chiave e il valore specificati nel dizionario non modificabile, eventualmente sovrascrivendo un valore esistente per la chiave.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Chiave della voce da aggiungere.</param>
      <param name="value" vsli:raw="The key value to set.">Valore di chiave da impostare.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">Nuovo dizionario non modificabile che contiene la coppia chiave/valore specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">Imposta le coppie chiave/valore specificate nel dizionario non modificabile, eventualmente sovrascrivendo i valori esistenti per le chiavi.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Coppie chiave/valore da impostare nel dizionario. Se una qualsiasi delle chiavi esiste già nel dizionario, questo metodo sovrascriverà i valori precedenti.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">Nuovo dizionario non modificabile che contiene le coppie chiave/valore specificate.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The type of the key." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">Copia gli elementi del dizionario in una matrice, a partire da un indice della matrice specifico.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dal dizionario. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Ottiene un valore che indica se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe); in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ottiene un oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the immutable dictionary object.">Aggiunge un elemento con la chiave e il valore forniti all'oggetto dizionario non modificabile.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">Oggetto da usare come chiave dell'elemento da aggiungere.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">Oggetto da usare come valore dell'elemento da aggiungere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">Cancella questa istanza.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">L'oggetto dizionario è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">Determina se l'oggetto dizionario non modificabile contiene un elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">Chiave da individuare nell'oggetto dizionario.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il dizionario contiene un elemento con la chiave; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">Restituisce un oggetto <see cref="T:System.Collections.IDictionaryEnumerator" /> per l'oggetto dizionario non modificabile.</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">Oggetto enumeratore per l'oggetto dizionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Ottiene un valore che indica se le dimensioni dell'oggetto <see cref="T:System.Collections.IDictionary" /> sono fisse.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se le dimensioni dell'oggetto <see cref="T:System.Collections.IDictionary" /> sono fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Ottiene o imposta l'elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key.">Chiave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Ottiene <see cref="T:System.Collections.Generic.ICollection`1" /> contenente le chiavi di <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contenente le chiavi dell'oggetto che implementa l'interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">Rimuove dall'oggetto dizionario non modificabile l'elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Chiave dell'elemento da rimuovere.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Ottiene <see cref="T:System.Collections.Generic.ICollection`1" /> contenente i valori in <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contenente i valori nell'oggetto che implementa l'interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Oggetto enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added to the dictionary." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of the entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="The key-value pairs to set on the map. Any keys that conflict with existing keys will replace the previous values." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Crea un dizionario non modificabile con lo stesso contenuto di questo dizionario e che può essere modificato in modo efficiente tra più operazioni tramite interfacce standard modificabili.</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Raccolta con lo stesso contenuto di questo dizionario e che può essere modificata in modo efficiente tra più operazioni tramite interfacce standard modificabili.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Determina se il dizionario contiene una chiave specificata.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Chiave da ricercare.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">La chiave corrispondente presente nel dizionario, se trovata, oppure <c>equalkey</c> se non viene trovata alcuna corrispondenza.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se viene trovata una corrispondenza per <paramref name="equalKey" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Ottiene il valore associato alla chiave specificata.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Chiave di cui verrà recuperato il valore.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Quando termina, questo metodo restituisce il valore associato alla chiave specificata nel caso in cui la chiave venga trovata. In caso contrario, restituisce il valore predefinito per il tipo del parametro <paramref name="value" />. Questo parametro viene passato non inizializzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto che implementa il dizionario contiene un elemento con la chiave specificata; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">
        <paramref name="key" /> è null.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">Ottiene l'operatore di confronto del valore usato per determinare se i valori sono uguali.</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">Operatore di confronto del valore usato per determinare se i valori sono uguali.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable dictionary.">Ottiene i valori nel dizionario non modificabile.</summary>
      <returns vsli:raw="The values in the immutable dictionary.">Valori nel dizionario non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key comparer.">Ottiene un'istanza del dizionario non modificabile che usa l'operatore di confronto della chiave specificato.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Operatore di confronto della chiave da usare.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">Istanza del dizionario non modificabile che usa l'operatore di confronto specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key and value comparers.">Ottiene un'istanza del dizionario non modificabile che usa gli operatori di confronto della chiave e del valore specificati.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Operatore di confronto della chiave da usare.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">Operatore di confronto del valore da usare.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">Istanza del dizionario non modificabile che usa gli operatori di confronto specificati.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fornisce un set di metodi di inizializzazione per le istanze della classe <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary vsli:raw="Creates an empty immutable hash set.">Crea un set di hash non modificabile vuoto.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable hash set.">Tipo di elementi da archiviare nel set di hash non modificabile.</typeparam>
      <returns vsli:raw="An empty immutable hash set.">Set di hash non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item.">Crea un nuovo set di hash non modificabile che contiene l'elemento specificato.</summary>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">Elemento con cui prepopolare il set di hash.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Tipo di elementi nel set di hash non modificabile.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">Nuovo set di hash non modificabile che contiene l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified array of items.">Crea un nuovo set di hash non modificabile che contiene la matrice di elementi specificata.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">Matrice che contiene gli elementi con cui prepopolare il set di hash.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Tipo di elementi nel set di hash non modificabile.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">Nuovo set di hash non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable hash set that uses the specified equality comparer.">Crea un set di hash non modificabile vuoto che usa l'operatore di confronto di uguaglianza specificato.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Oggetto da usare per verificare l'uguaglianza degli oggetti nel set.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Tipo di elementi nel set di hash non modificabile.</typeparam>
      <returns vsli:raw="An empty immutable hash set.">Set di hash non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item and uses the specified equality comparer for the set type.">Crea un nuovo set di hash non modificabile che contiene l'elemento specificato e usa l'operatore di confronto di uguaglianza specificato per il tipo di set.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Oggetto da usare per verificare l'uguaglianza degli oggetti nel set.</param>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">Elemento con cui prepopolare il set di hash.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Tipo di elementi nel set di hash non modificabile.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">Nuovo set di hash non modificabile che contiene l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the items in the specified collection and uses the specified equality comparer for the set type.">Crea un nuovo set di hash non modificabile che contiene gli elementi nella raccolta specificata e usa l'operatore di confronto di uguaglianza specificato per il tipo di set.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Oggetto da usare per verificare l'uguaglianza degli oggetti nel set.</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">Matrice che contiene gli elementi con cui prepopolare il set di hash.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable hash set.">Tipo di elementi archiviati nel set di hash non modificabile.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">Nuovo set di hash non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable hash set builder.">Crea un nuovo generatore di set di hash non modificabile.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Tipo di elementi archiviati dalla raccolta.</typeparam>
      <returns vsli:raw="The immutable hash set builder.">Generatore di set di hash non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable hash set builder.">Crea un nuovo generatore di set di hash non modificabile.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Oggetto da usare per verificare l'uguaglianza degli oggetti nel set.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Tipo di elementi archiviati dalla raccolta.</typeparam>
      <returns vsli:raw="The new immutable hash set builder.">Nuovo generatore di set di hash non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set prefilled with the specified items.">Crea un nuovo set di hash non modificabile precompilato con gli elementi specificati.</summary>
      <param name="items" vsli:raw="The items to add to the hash set.">Elementi da aggiungere al set di hash.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Tipo di elementi archiviati dalla raccolta.</typeparam>
      <returns vsli:raw="The new immutable hash set that contains the specified items.">Nuovo set di hash non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified items and uses the specified equality comparer for the set type.">Crea un nuovo set di hash non modificabile che contiene gli elementi specificati e usa l'operatore di confronto di uguaglianza specificato per il tipo di set.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Oggetto da usare per verificare l'uguaglianza degli oggetti nel set.</param>
      <param name="items" vsli:raw="The items add to the collection before immutability is applied.">Elementi da aggiungere alla raccolta prima che venga applicata l'immutabilità.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the collection.">Tipo di elementi archiviati nella raccolta.</typeparam>
      <returns vsli:raw="The new immutable hash set.">Nuovo set di hash non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable hash set of its contents.">Enumera una sequenza e produce un set di hash non modificabile del relativo contenuto.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Sequenza da enumerare.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo degli elementi nella sequenza.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence.">Set di hash non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable hash set of its contents, and uses the specified equality comparer for the set type.">Enumera una sequenza, produce un set di hash non modificabile del relativo contenuto e usa l'operatore di confronto di uguaglianza specificato per il tipo di set.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Sequenza da enumerare.</param>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Oggetto da usare per verificare l'uguaglianza degli oggetti nel set.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo degli elementi nella sequenza.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence and uses the specified equality comparer.">Set di hash non modificabile che contiene gli elementi nella sequenza specificata e usa l'operatore di confronto di uguaglianza specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable hash set from the current contents of the builder's set.">Crea un set di hash non modificabile dal contenuto corrente del set del generatore.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable hash set from.">Generatore da cui creare il set di hash non modificabile.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the hash set.">Tipo di elementi nel set di hash.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the current contents in the builder's set.">Set di hash non modificabile che contiene il contenuto corrente nel set del generatore.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary vsli:raw="Represents an immutable, unordered hash set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta un set di hash non modificabile e non ordinato.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the hash set.">Tipo di elementi contenuti nel set di hash.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to the hash set.">Aggiunge l'elemento specificato al set di hash.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Elemento da aggiungere all'insieme.</param>
      <returns vsli:raw="A hash set that contains the added value and any values previously held by the  &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; object.">Set di hash che contiene il valore aggiunto e tutti i valori precedentemente usati dall'oggetto <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary vsli:raw="Represents a hash set that mutates with little or no memory allocations and that can produce or build on immutable hash set instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta un set di hash che viene modificato con allocazioni di memoria minime o nulle e in grado di produrre o compilare su istanze di set di hash non modificabili in modo molto efficiente.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable hash set.">Aggiunge l'elemento specificato al set di hash non modificabile.</summary>
      <param name="item" vsli:raw="The item to add.">Elemento da aggiungere.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item did not already belong to the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elemento non appartiene già alla raccolta; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable hash set.">Rimuove tutti gli elementi dal set di hash non modificabile.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The hash set is read-only.">Il set di hash è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable hash set contains a specific value.">Determina se il set di hash non modificabile contiene un valore specifico.</summary>
      <param name="item" vsli:raw="The object to locate in the hash set.">Oggetto da individuare nel set di hash.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the hash set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="item" /> è presente nel set di hash; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable hash set.">Ottiene il numero di elementi contenuti nel set di hash non modificabile.</summary>
      <returns vsli:raw="The number of elements contained in the immutable hash set.">Numero di elementi contenuti nel set di hash non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current hash set.">Rimuove tutti gli elementi della raccolta specificata dal set di hash corrente.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">Raccolta di elementi da rimuovere dal set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable hash set.">Restituisce un enumeratore che consente di scorrere il set di hash non modificabile.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Enumeratore che può essere usato per scorrere il set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Modifica il set corrente in modo che contenga solo elementi inclusi anche in una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">Determina se il set corrente è un subset (strict) appropriato di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un subset appropriato di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">Determina se il set corrente è un superset (strict) appropriato di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un superset appropriato di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">Determina se il set corrente è un subset di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un subset di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">Determina se il set corrente è un superset di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un superset di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Ottiene o imposta l'operatore di confronto della chiave.</summary>
      <returns vsli:raw="The key comparer.">Operatore di confronto della chiave.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">Determina se il set corrente è sovrapposto alla raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente e <paramref name="other" /> condividono almeno un elemento comune; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable hash set.">Rimuove la prima occorrenza di un oggetto specifico dal set di hash non modificabile.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">Oggetto da rimuovere dal set.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original set.">
        <see langword="true" /> se <paramref name="item" /> è stato rimosso correttamente dal set; in caso contrario, <see langword="false" />. Questo metodo restituisce inoltre <see langword="false" /> se <paramref name="item" /> non viene trovato nel set originale.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">Il set è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">Determina se il set corrente e la raccolta specificata contengono gli stessi elementi.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è uguale a <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Modifica il set corrente in modo che contenga solo elementi presenti in tale set o nella raccolta specificata, ma non in entrambi.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the hash set.">Aggiunge un elemento al set di hash.</summary>
      <param name="item" vsli:raw="The object to add to the set.">Oggetto da aggiungere al set.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">Il set è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the hash set to an array, starting at a particular array index.">Copia gli elementi del set di hash in una matrice, iniziando in corrispondenza di un particolare indice di matrice.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the hash set. The array must have zero-based indexing.">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dal set di hash. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable hash set based on the contents of this instance.">Crea un set di hash non modificabile basato sul contenuto di questa istanza.</summary>
      <returns vsli:raw="An immutable set.">Set non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">Modifica il set corrente in modo che contenga tutti gli elementi presenti sia in tale set che nella raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable hash set that has the same sorting and ordering semantics as this instance.">Recupera un set di hash non modificabile vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</summary>
      <returns vsli:raw="An empty hash set that has the same sorting and ordering semantics as this instance.">Set di hash vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable hash set contains the specified element.">Determina se questo set di hash non modificabile contiene l'elemento specificato.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable hash set.">Oggetto da individuare nel set di hash non modificabile.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="item" /> è presente in <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable hash set.">Ottiene il numero di elementi nel set di hash non modificabile.</summary>
      <returns vsli:raw="The number of elements in the hash set.">Numero di elementi nel set di hash.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary vsli:raw="Gets an immutable hash set for this type that uses the default &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Ottiene un set di hash non modificabile per questo tipo che usa l'oggetto <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> predefinito.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable hash set without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera il contenuto del set di hash non modificabile senza allocare memoria.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Ottiene l'elemento in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Elemento in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator&quot; /&gt; class.">Rilascia le risorse usate dall'istanza corrente della classe <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable hash set.">Sposta l'enumeratore all'elemento successivo del set di hash non modificabile.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the hash set.">
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo; <see langword="false" /> se l'enumeratore ha superato la fine del set di hash.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">Il set di hash è stato modificato dopo la creazione dell'enumeratore.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the hash set.">Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento nel set di hash.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">Il set di hash è stato modificato dopo la creazione dell'enumeratore.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">Ottiene l'elemento corrente.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable hash set.">Rimuove gli elementi della raccolta specificata dal set di hash non modificabile corrente.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">Raccolta di elementi da rimuovere da questo set.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Nuovo set con gli elementi rimossi oppure il set originale se nessuno degli elementi era presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains elements that exist in both this set and the specified set.">Crea un set di hash non modificabile che contiene gli elementi esistenti sia in questo set che nel set specificato.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Nuovo set non modificabile che contiene gli elementi esistenti in entrambi i set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the current immutable hash set is empty.">Ottiene un valore che indica se il set di hash non modificabile corrente è vuoto o meno.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'istanza è vuota; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) subset of a specified collection.">Determina se il set di hash non modificabile corrente è un subset (strict) appropriato di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un subset corretto della raccolta specificata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) superset of a specified collection.">Determina se il set di hash non modificabile corrente è un superset (strict) appropriato di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un superset corretto della raccolta specificata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a subset of a specified collection.">Determina se il set di hash non modificabile corrente è un subset di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un subset della raccolta specificata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a superset of a specified collection.">Determina se il set di hash non modificabile corrente è un superset di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un superset della raccolta specificata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary vsli:raw="Gets the object that is used to obtain hash codes for the keys and to check the equality of values in the immutable hash set.">Ottiene l'oggetto usato per ottenere i codici hash per le chiavi e per controllare l'uguaglianza dei valori nel set di hash non modificabile.</summary>
      <returns vsli:raw="The comparer used to obtain hash codes for the keys and check equality.">Operatore di confronto usato per ottenere i codici hash per le chiavi e controllare l'uguaglianza.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set overlaps with the specified collection.">Determina se il set di hash non modificabile corrente è sovrapposto alla raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente e la raccolta specificata condividono almeno un elemento comune; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable hash set.">Rimuove l'elemento specificato da questo set di hash non modificabile.</summary>
      <param name="item" vsli:raw="The element to remove.">Elemento da rimuovere.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Nuovo set con l'elemento specificato rimosso oppure il set corrente se l'elemento non viene trovato nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set and the specified collection contain the same elements.">Determina se il set di hash non modificabile corrente e la raccolta specificata contengono gli stessi elementi.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se i set sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains only elements that are present either in the current set or in the specified collection, but not both.">Crea un set di hash non modificabile che contiene solo elementi presenti in tale set o nella raccolta specificata, ma non in entrambi.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Nuovo set che contiene gli elementi presenti solo in tale set o nella raccolta specificata, ma non in entrambi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the set.">Aggiunge un elemento al set.</summary>
      <param name="item" vsli:raw="The object to add to the set.">Oggetto da aggiungere al set.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">Il set è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from this set.">Rimuove tutti gli elementi dal set.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">Il set è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">Copia gli elementi del set in una matrice, iniziando in corrispondenza di un particolare indice.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Matrice unidimensionale che rappresenta la destinazione degli elementi copiati dal set. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">Vedere l'interfaccia <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">Rimuove la prima occorrenza di un oggetto specifico dal set.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">Oggetto da rimuovere dal set.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elemento viene rimosso correttamente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns vsli:raw="An enumerator that iterates through the collection.">Enumeratore che scorre la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value that indicates whether the element was successfully added.">Aggiunge un elemento al set corrente e restituisce un valore che indica se l'aggiunta è stata eseguita correttamente.</summary>
      <param name="item" vsli:raw="The element to add to the collection.">Elemento da aggiungere alla raccolta.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">
        <see langword="true" /> se l'elemento è stato aggiunto al set; <see langword="false" /> se l'elemento è già presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">Rimuove tutti gli elementi della raccolta specificata dal set corrente.</summary>
      <param name="other" vsli:raw="The collection of items to remove.">Raccolta di elementi da rimuovere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Modifica il set corrente in modo che contenga solo elementi inclusi anche in una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current collection.">Raccolta da confrontare con la raccolta corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Modifica il set corrente in modo che contenga solo elementi presenti in tale set o nella raccolta specificata, ma non in entrambi.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or in the specified collection.">Modifica il set corrente in modo che contenga tutti gli elementi presenti in tale set o nella raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">Copia gli elementi del set in una matrice, iniziando in corrispondenza di un particolare indice.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Matrice unidimensionale che rappresenta la destinazione degli elementi copiati dal set. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">Vedere l'interfaccia <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Vedere <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a set.">Restituisce un enumeratore che scorre un set.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Enumeratore che può essere usato per scorrere il set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Aggiunge l'elemento specificato a questo set non modificabile.</summary>
      <param name="item" vsli:raw="The element to add.">Elemento da aggiungere.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Nuovo set con l'elemento aggiunto o questo set se l'elemento è già presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty set that has the same sorting and ordering semantics as this instance.">Recupera un set vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</summary>
      <returns vsli:raw="An empty set that has the same sorting or ordering semantics as this instance.">Set vuoto con lo stesso ordinamento o la stessa semantica di ordinamento di questa istanza.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current set.">Rimuove gli elementi della raccolta specificata dal set corrente.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">Raccolta di elementi da rimuovere da questo set.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Nuovo set con gli elementi rimossi oppure il set originale se nessuno degli elementi era presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">Crea un set non modificabile che contiene gli elementi esistenti sia in questo set che nel set specificato.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Nuovo set non modificabile che contiene gli elementi esistenti in entrambi i set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Rimuove l'elemento specificato da questo set non modificabile.</summary>
      <param name="item" vsli:raw="The element to remove.">Elemento da rimuovere.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Nuovo set con l'elemento specificato rimosso oppure il set corrente se l'elemento non viene trovato nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Crea un set non modificabile che contiene solo elementi presenti in tale set o nella raccolta specificata, ma non in entrambi.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Nuovo set che contiene gli elementi presenti solo in tale set o nella raccolta specificata, ma non in entrambi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Crea un nuovo set non modificabile che contiene tutti gli elementi presenti in tale set o nella raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Raccolta da cui aggiungere gli elementi.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Nuovo set non modificabile con gli elementi aggiunti oppure il set originale se tutti gli elementi erano già presenti nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary vsli:raw="Creates an immutable hash set that has the same contents as this set and can be efficiently mutated across multiple operations by using standard mutable interfaces.">Crea un set di hash non modificabile con lo stesso contenuto di questo set e che può essere modificato in modo efficiente tra più operazioni tramite interfacce standard modificabili.</summary>
      <returns vsli:raw="A set with the same contents as this set that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Set con lo stesso contenuto di questo set e che può essere modificato in modo efficiente tra più operazioni tramite interfacce standard modificabili.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Cerca un determinato valore nel set e restituisce il valore uguale eventualmente trovato.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">Valore da cercare.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">Valore del set trovato dalla ricerca oppure il valore originale se la ricerca non ha restituito alcuna corrispondenza.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Valore che indica se la ricerca è stata eseguita correttamente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable hash set that contains all elements that are present in either the current set or in the specified collection.">Crea un nuovo set di hash non modificabile che contiene tutti gli elementi presenti in tale set o nella raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Raccolta da cui aggiungere gli elementi.</param>
      <returns vsli:raw="A new immutable hash set with the items added; or the original set if all the items were already in the set.">Nuovo set di hash non modificabile con gli elementi aggiunti oppure il set originale se tutti gli elementi erano già presenti nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable hash set that uses the specified equality comparer for its search methods.">Ottiene un'istanza del set di hash non modificabile che usa l'operatore di confronto di uguaglianza specificato per i metodi di ricerca.</summary>
      <param name="equalityComparer" vsli:raw="The equality comparer to use.">Operatore di confronto di uguaglianza da usare.</param>
      <returns vsli:raw="An instance of this immutable hash set that uses the given comparer.">Istanza di questo set di hash non modificabile che usa l'operatore di confronto specificato.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary vsli:raw="Contains interlocked exchange mechanisms for immutable collections.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Contiene meccanismi di scambio con interlock per le raccolte non modificabili.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">Ottiene il valore da un dizionario dopo averlo aggiunto o avere aggiornato una voce esistente.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">Variabile o campo da aggiornare in modo atomico se l'oggetto specificato non è presente nel dizionario.</param>
      <param name="key" vsli:raw="The key for the value to add or update.">Chiave per il valore da aggiungere o aggiornare.</param>
      <param name="addValue" vsli:raw="The value to use if no previous value exists.">Valore da usare se non esiste alcun valore precedente.</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">Funzione che riceve la chiave e il valore precedente e restituisce il nuovo valore con cui aggiornare il dizionario.</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">Tipo di chiave archiviata dal dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">Tipo di valore archiviato dal dizionario.</typeparam>
      <returns vsli:raw="The added or updated value.">Valore aggiunto o modificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">Ottiene il valore da un dizionario dopo averlo aggiunto o avere aggiornato una voce esistente.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">Variabile o campo da aggiornare in modo atomico se l'oggetto specificato non è presente nel dizionario.</param>
      <param name="key" vsli:raw="The key for the value to add or update.">Chiave per il valore da aggiungere o aggiornare.</param>
      <param name="addValueFactory" vsli:raw="The function that receives the key and returns a new value to add to the dictionary when no value previously exists.">Funzione che riceve la chiave e restituisce un nuovo valore da aggiungere al dizionario quando non esiste alcun valore in precedenza.</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">Funzione che riceve la chiave e il valore precedente e restituisce il nuovo valore con cui aggiornare il dizionario.</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">Tipo di chiave archiviata dal dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">Tipo di valore archiviato dal dizionario.</typeparam>
      <returns vsli:raw="The added or updated value.">Valore aggiunto o modificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary vsli:raw="Atomically enqueues an element to the end of a queue.">Accoda in modo atomico un elemento alla fine di una coda.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">Variabile o campo da aggiornare in modo atomico.</param>
      <param name="value" vsli:raw="The value to enqueue.">Valore da accodare.</param>
      <typeparam name="T" vsli:raw="The type of items contained in the collection.">Tipo di elementi contenuti nella raccolta</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Ottiene il valore per la chiave specificata dal dizionario o aggiunge un nuovo valore al dizionario, se la chiave non viene trovata.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified key is not in the dictionary.">Variabile o campo da aggiornare in modo atomico se la chiave specificata non è presente nel dizionario.</param>
      <param name="key" vsli:raw="The key for the value to get or add.">Chiave per il valore da ottenere o aggiungere.</param>
      <param name="value" vsli:raw="The value to add to the dictionary the key is not found.">Valore da aggiungere al dizionario se la chiave non viene trovata.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Tipo di chiavi contenute nella raccolta.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Tipo di valori contenuti nella raccolta.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">Valore in corrispondenza della chiave specificata o <paramref name="valueFactory" /> se la chiave non è presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Ottiene il valore per la chiave specificata dal dizionario o aggiunge un nuovo valore al dizionario, se la chiave non viene trovata.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">Variabile o campo da aggiornare in modo atomico se l'oggetto specificato non è presente nel dizionario.</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">Chiave per il valore da recuperare o aggiungere.</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found. This delegate will not be invoked more than once.">Funzione da eseguire per ottenere il valore da inserire nel dizionario se la chiave non viene trovata. Questo delegato non verrà richiamato più di una volta.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Tipo di chiavi contenute nella raccolta.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Tipo di valori contenuti nella raccolta.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">Valore in corrispondenza della chiave specificata o <paramref name="valueFactory" /> se la chiave non è presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Ottiene il valore per la chiave specificata dal dizionario o aggiunge un nuovo valore al dizionario, se la chiave non viene trovata.</summary>
      <param name="location" vsli:raw="The variable or field to update if the specified is not in the dictionary.">Variabile o campo da aggiornare se l'oggetto specificato non è presente nel dizionario.</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">Chiave per il valore da recuperare o aggiungere.</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found.">Funzione da eseguire per ottenere il valore da inserire nel dizionario se la chiave non viene trovata.</param>
      <param name="factoryArgument" vsli:raw="The argument to pass to the value factory.">Argomento da passare alla factory del valore.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Tipo di chiavi contenute nella raccolta.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Tipo di valori contenuti nella raccolta.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of the argument supplied to the value factory.">Tipo dell'argomento fornito alla factory del valore.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">Valore in corrispondenza della chiave specificata o <paramref name="valueFactory" /> se la chiave non è presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.">Consente di confrontare due matrici non modificabili per verificarne l'uguaglianza; in caso affermativo, una delle matrici viene sostituita.</summary>
      <param name="location" vsli:raw="The destination, whose value is compared with &lt;paramref name=&quot;comparand&quot; /&gt; and possibly replaced.">Destinazione il cui valore viene confrontato con <paramref name="comparand" /> ed eventualmente sostituito.</param>
      <param name="value" vsli:raw="The value that replaces the destination value if the comparison results in equality.">Valore che sostituisce il valore di destinazione se il confronto rileva l'uguaglianza.</param>
      <param name="comparand" vsli:raw="The value that is compared to the value at &lt;paramref name=&quot;location&quot; /&gt;.">Valore confrontato con il valore in corrispondenza di <paramref name="location" />.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Tipo di elemento memorizzato dalla matrice.</typeparam>
      <returns vsli:raw="The original value in &lt;paramref name=&quot;location&quot; /&gt;.">Valore originale in <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array and returns a reference to the original array, as an atomic operation.">Imposta una matrice sulla matrice specificata e restituisce un riferimento alla matrice originale, come operazione atomica.</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">Matrice da impostare sul valore specificato.</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set.">Valore su cui è impostato il parametro <paramref name="location" />.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Tipo di elemento memorizzato dalla matrice.</typeparam>
      <returns vsli:raw="The original value of &lt;paramref name=&quot;location&quot; /&gt;.">Valore originale di <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array if the array has not been initialized.">Imposta una matrice sulla matrice specificata, se la matrice non è stata inizializzata.</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">Matrice da impostare sul valore specificato.</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set, if it's not initialized.">Valore su cui è impostato il parametro <paramref name="location" />, se non è inizializzato.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Tipo di elemento memorizzato dalla matrice.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array was assigned the specified value;  otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se alla matrice è stato assegnato il valore specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary vsli:raw="Pushes a new element onto the stack.">Inserisce un nuovo elemento nello stack.</summary>
      <param name="location" vsli:raw="The stack to update.">Stack da aggiornare.</param>
      <param name="value" vsli:raw="The value to push on the stack.">Valore da inserire nello stack.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">Tipo di elementi nello stack.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Adds the specified key and value to the dictionary if the key is not in the dictionary.">Aggiunge la chiave e il valore specificati al dizionario se la chiave non è presente nel dizionario.</summary>
      <param name="location" vsli:raw="The dictionary to update with the specified key and value.">Dizionario da aggiornare con la chiave e il valore specificati.</param>
      <param name="key" vsli:raw="The key to add, if is not already defined in the dictionary.">Chiave da aggiungere, se non è già definita nel dizionario.</param>
      <param name="value" vsli:raw="The value to add.">Il valore da aggiungere.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Tipo di chiavi contenute nella raccolta.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Tipo di valori contenuti nella raccolta.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is not in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la chiave non è presente nel dizionario; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary vsli:raw="Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.">Rimuove in modo atomico e restituisce l'elemento specificato all'inizio della coda, se la coda non è vuota.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">Variabile o campo da aggiornare in modo atomico.</param>
      <param name="value" vsli:raw="Set to the value from the head of the queue, if the queue not empty.">Impostato sul valore all'inizio della coda, se la coda non è vuota.</param>
      <typeparam name="T" vsli:raw="The type of items in the queue.">Tipo di elementi nella coda.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the queue is not empty and the head element is removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la coda non è vuota e l'elemento head viene rimosso; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary vsli:raw="Removes an element from the top of the stack, if there is an element to remove.">Rimuove un elemento all'inizio dello stack, se è presente un elemento da rimuovere.</summary>
      <param name="location" vsli:raw="The stack to update.">Stack da aggiornare.</param>
      <param name="value" vsli:raw="Receives the value removed from the stack, if the stack is not empty.">Riceve il valore rimosso dallo stack, se lo stack non è vuoto.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">Tipo di elementi nello stack.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element is removed from the stack; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se un elemento viene rimosso dallo stack; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary vsli:raw="Removes the element with the specified key, if the key exists.">Rimuove l'elemento con la chiave specificata, se la chiave è presente.</summary>
      <param name="location" vsli:raw="The dictionary to update.">Dizionario da aggiornare.</param>
      <param name="key" vsli:raw="The key to remove.">Chiave da rimuovere.</param>
      <param name="value" vsli:raw="Receives the value of the removed item, if the dictionary is not empty.">Riceve il valore dell'elemento rimosso, se il dizionario non è vuoto.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Tipo di chiavi contenute nella raccolta.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Tipo di valori contenuti nella raccolta.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la chiave viene trovata e rimossa; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary vsli:raw="Sets the specified key to the specified value if the specified key already is set to a specific value.">Imposta la chiave specificata sul valore specificato se la chiave specificata è già impostata su un valore specifico.</summary>
      <param name="location" vsli:raw="The dictionary to update.">Dizionario da aggiornare.</param>
      <param name="key" vsli:raw="The key to update.">Chiave da aggiornare.</param>
      <param name="newValue" vsli:raw="The new value to set.">Nuovo valore da impostare.</param>
      <param name="comparisonValue" vsli:raw="The current value for &lt;paramref name=&quot;key&quot; /&gt; in order for the update to succeed.">Valore corrente per <paramref name="key" /> affinché l'aggiornamento venga eseguito correttamente.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Tipo di chiavi contenute nella raccolta.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Tipo di valori contenuti nella raccolta.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; and &lt;paramref name=&quot;comparisonValue&quot; /&gt; are present in the dictionary and comparison was updated to &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="key" /> e <paramref name="comparisonValue" /> sono presenti nel dizionario e il confronto è stato aggiornato in <paramref name="newValue" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">Modifica un valore sul posto con la semantica di transazione bloccante ottimistica tramite una funzione di trasformazione specificata.             La trasformazione viene ritentata il numero di volte necessario per prevalere sulla race condition bloccante ottimistica.</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">Variabile o campo da modificare, accessibile da più thread.</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">Funzione che modifica il valore. Questa funzione deve essere priva di effetti collaterali poiché può essere eseguita più volte quando si verificano race condition con altri thread.</param>
      <typeparam name="T" vsli:raw="The type of data.">Il tipo di dati.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">
        <see langword="true" /> se il valore di location viene modificato applicando il risultato della funzione <paramref name="transformer" />. <see langword="false" /> se il valore di location rimane lo stesso perché l'ultima chiamata di <paramref name="transformer" /> ha restituito il valore esistente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">Modifica un valore sul posto con la semantica di transazione bloccante ottimistica tramite una funzione di trasformazione specificata.             La trasformazione viene ritentata il numero di volte necessario per prevalere sulla race condition bloccante ottimistica.</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">Variabile o campo da modificare, accessibile da più thread.</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">Funzione che modifica il valore. Questa funzione deve essere priva di effetti collaterali poiché può essere eseguita più volte quando si verificano race condition con altri thread.</param>
      <param name="transformerArgument" vsli:raw="The argument to pass to &lt;paramref name=&quot;transformer&quot; /&gt;.">Argomento da passare a <paramref name="transformer" />.</param>
      <typeparam name="T" vsli:raw="The type of data.">Il tipo di dati.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of argument passed to the &lt;paramref name=&quot;transformer&quot; /&gt;.">Tipo di argomento passato a <paramref name="transformer" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">
        <see langword="true" /> se il valore di location viene modificato applicando il risultato della funzione <paramref name="transformer" />. <see langword="false" /> se il valore di location rimane lo stesso perché l'ultima chiamata di <paramref name="transformer" /> ha restituito il valore esistente.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fornisce un set di metodi di inizializzazione per le istanze della classe <see cref="T:System.Collections.Immutable.ImmutableList`1" />.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary vsli:raw="Creates an empty immutable list.">Crea un elenco non modificabile vuoto.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the .">Tipo di elementi da archiviare nell'elenco.</typeparam>
      <returns vsli:raw="An empty immutable list.">Elenco non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable list that contains the specified item.">Crea un nuovo elenco non modificabile che contiene l'elemento specificato.</summary>
      <param name="item" vsli:raw="The item to prepopulate the list with.">Elemento con cui prepopolare l'elenco.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">Tipo di elementi nell'elenco.</typeparam>
      <returns vsli:raw="A new  that contains the specified item.">Nuovo elenco non modificabile che contiene l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable list that contains the specified array of items.">Crea un nuovo elenco non modificabile che contiene la matrice di elementi specificata.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the list with.">Matrice che contiene gli elementi con cui prepopolare l'elenco.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">Tipo di elementi nell'elenco.</typeparam>
      <returns vsli:raw="A new immutable list that contains the specified items.">Nuovo elenco non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable list builder.">Crea un nuovo generatore di elenchi non modificabili.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Tipo di elementi archiviati dalla raccolta.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Generatore di raccolte non modificabili.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable list that contains the specified items.">Crea un nuovo elenco non modificabile che contiene gli elementi specificati.</summary>
      <param name="items" vsli:raw="The items to add to the list.">Elementi da aggiungere all'elenco.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">Tipo di elementi nell'elenco.</typeparam>
      <returns vsli:raw="An immutable list that contains the specified items.">Elenco non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza nell'elenco.</summary>
      <param name="list" vsli:raw="The list to search.">Elenco in cui eseguire la ricerca.</param>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">Oggetto da individuare nell'elenco. Il valore può essere null per i tipi di riferimento.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo di elementi nell'elenco.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that extends from index to the last element, if found; otherwise, -1.">Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco compreso tra l'indice e l'ultimo elemento, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza nell'elenco.</summary>
      <param name="list" vsli:raw="The list to search.">Elenco in cui eseguire la ricerca.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Oggetto da individuare nell'elenco non modificabile. Il valore può essere null per i tipi di riferimento.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo di elementi nell'elenco.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from index to the last element, if found; otherwise, -1.">Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile compreso tra l'indice e l'ultimo elemento, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che è compreso tra l'indice specificato e l'ultimo elemento.</summary>
      <param name="list" vsli:raw="The list to search.">Elenco in cui eseguire la ricerca.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Oggetto da individuare nell'elenco non modificabile. Il valore può essere null per i tipi di riferimento.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo di elementi nell'elenco.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile compreso tra l'indice e l'ultimo elemento, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che è compreso tra l'indice specificato e l'ultimo elemento.</summary>
      <param name="list" vsli:raw="The list to search.">Elenco in cui eseguire la ricerca.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Oggetto da individuare nell'elenco non modificabile. Il valore può essere null per i tipi di riferimento.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo di elementi nell'elenco.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile compreso tra l'indice e l'ultimo elemento, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza nell'intero elenco non modificabile.</summary>
      <param name="list" vsli:raw="The list to search.">Elenco in cui eseguire la ricerca.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Oggetto da individuare nell'elenco non modificabile. Il valore può essere null per i tipi di riferimento.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo di elementi nell'elenco.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">Indice in base zero dell'ultima occorrenza dell'elemento all'interno dell'intero elenco non modificabile, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza nell'intero elenco non modificabile.</summary>
      <param name="list" vsli:raw="The list to search.">Elenco in cui eseguire la ricerca.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Oggetto da individuare nell'elenco non modificabile. Il valore può essere null per i tipi di riferimento.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo di elementi nell'elenco.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">Indice in base zero dell'ultima occorrenza dell'elemento all'interno dell'intero elenco non modificabile, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che è compreso tra il primo elemento e l'indice specificato.</summary>
      <param name="list" vsli:raw="The list to search.">Elenco in cui eseguire la ricerca.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Oggetto da individuare nell'elenco non modificabile. Il valore può essere null per i tipi di riferimento.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Indice iniziale in base zero della ricerca all'indietro.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo di elementi nell'elenco.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">Indice in base zero dell'ultima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile compreso tra il primo elemento e l'indice, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che è compreso tra il primo elemento e l'indice specificato.</summary>
      <param name="list" vsli:raw="The list to search.">Elenco in cui eseguire la ricerca.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Oggetto da individuare nell'elenco non modificabile. Il valore può essere null per i tipi di riferimento.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Indice iniziale in base zero della ricerca all'indietro.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo di elementi nell'elenco.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">Indice in base zero dell'ultima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile compreso tra il primo elemento e l'indice, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Removes the specified value from this list.">Rimuove da questo elenco il valore specificato.</summary>
      <param name="list" vsli:raw="The list to search.">Elenco in cui eseguire la ricerca.</param>
      <param name="value" vsli:raw="The value to remove.">Valore da rimuovere.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo di elementi nell'elenco.</typeparam>
      <returns vsli:raw="A new immutable list with the element removed, or this list if the element is not in this list.">Nuovo elenco non modificabile con l'elemento rimosso o questo elenco se l'elemento non è presente nell'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Removes the specified values from this list.">Rimuove da questo elenco i valori specificati.</summary>
      <param name="list" vsli:raw="The list to search.">Elenco in cui eseguire la ricerca.</param>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Elementi da rimuovere se vengono trovate corrispondenze in questo elenco.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo di elementi nell'elenco.</typeparam>
      <returns vsli:raw="A new immutable list with the elements removed.">Nuovo elenco non modificabile con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary vsli:raw="Replaces the first equal element in the list with the specified element.">Sostituisce il primo elemento uguale nell'elenco con l'elemento specificato.</summary>
      <param name="list" vsli:raw="The list to search.">Elenco in cui eseguire la ricerca.</param>
      <param name="oldValue" vsli:raw="The element to replace.">Elemento da sostituire.</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">Elemento con cui sostituire l'elemento precedente.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Tipo di elementi nell'elenco.</typeparam>
      <returns vsli:raw="The new list -- even if the value being replaced is equal to the new value for that position.">Nuovo elenco, anche se il valore da sostituire è uguale al nuovo valore per tale posizione.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">Generata quando il valore precedente non è incluso nell'elenco.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable list of its contents.">Enumera una sequenza e produce un elenco non modificabile del relativo contenuto.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Sequenza da enumerare.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo degli elementi nella sequenza.</typeparam>
      <returns vsli:raw="An immutable list that contains the items in the specified sequence.">Elenco non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary vsli:raw="Creates an immutable list from the current contents of the builder's collection.">Crea un elenco non modificabile dal contenuto corrente della raccolta del generatore.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable list from.">Generatore da cui creare l'elenco non modificabile.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the list.">Tipo degli elementi nell'elenco.</typeparam>
      <returns vsli:raw="An immutable list that contains the current contents in the builder's collection.">Elenco non modificabile che contiene il contenuto corrente nella raccolta del generatore.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary vsli:raw="Represents an immutable list, which is a strongly typed list of objects that can be accessed by index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta un elenco non modificabile, ovvero un elenco di oggetti fortemente tipizzato accessibile in base all'indice.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">Tipo di elementi contenuti nell'elenco.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary vsli:raw="Adds the specified object to the end of the immutable list.">Aggiunge l'oggetto specificato alla fine dell'elenco non modificabile.</summary>
      <param name="value" vsli:raw="The object to add.">Oggetto da aggiungere.</param>
      <returns vsli:raw="A new immutable list with the object added.">Nuovo elenco non modificabile con l'oggetto aggiunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the elements of the specified collection to the end of the immutable list.">Aggiunge gli elementi della raccolta specificata alla fine dell'elenco non modificabile.</summary>
      <param name="items" vsli:raw="The collection whose elements will be added to the end of the list.">Raccolta i cui elementi verranno aggiunti alla fine dell'elenco.</param>
      <returns vsli:raw="A new immutable list with the elements added.">Nuovo elenco non modificabile con gli elementi aggiunti.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element.">Cerca un elemento nell'intero elenco ordinato usando l'operatore di confronto predefinito e restituisce l'indice in base zero dell'elemento.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Oggetto da individuare. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">Indice in base zero dell'elemento nell'elenco ordinato, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore dell'elemento o, se non è disponibile alcun elemento maggiore, il complemento bit per bit di <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer cannot find a comparer implementation of the for type T.">L'operatore di confronto predefinito non trova un'implementazione di comparer per il tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire sorted list for an element using the specified comparer and returns the zero-based index of the element.">Cerca un elemento nell'intero elenco ordinato usando l'operatore di confronto specificato e restituisce l'indice in base zero dell'elemento.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">Oggetto da individuare. Il valore può essere null per i tipi di riferimento.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements or null to use the default comparer.">Implementazione dell'operatore di confronto da usare durante il confronto di elementi oppure null per usare l'operatore di confronto predefinito.</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">Indice in base zero dell'elemento nell'elenco ordinato, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore dell'elemento o, se non è disponibile alcun elemento maggiore, il complemento bit per bit di <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="comparer is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">comparer è <see langword="null" /> e l'operatore di confronto predefinito non trova un'implementazione di comparer per il tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches a range of elements in the sorted list for an element using the specified comparer and returns the zero-based index of the element.">Cerca un elemento in un intervallo di elementi nell'elenco ordinato usando l'operatore di confronto specificato e restituisce l'indice in base zero dell'elemento.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">Indice iniziale in base zero dell'intervallo in cui eseguire la ricerca.</param>
      <param name="count" vsli:raw="The length of the range to search.">Lunghezza dell'intervallo in cui eseguire la ricerca.</param>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">Oggetto da individuare. Il valore può essere null per i tipi di riferimento.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Implementazione dell'operatore di confronto da usare durante il confronto di elementi oppure <see langword="null" /> per usare l'operatore di confronto predefinito.</param>
      <returns vsli:raw="The zero-based index of item in the sorted list, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;paramref name=&quot;count&quot; /&gt;.">Indice in base zero dell'elemento nell'elenco ordinato, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore dell'elemento o, se non è disponibile alcun elemento maggiore, il complemento bit per bit di <paramref name="count" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="index is less than 0 or &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">index è minore di 0 oppure <paramref name="count" /> è minore di 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="index and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the list.">index e <paramref name="count" /> non identificano un intervallo valido nell'elenco.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">
        <paramref name="comparer" /> è <see langword="null" /> e l'operatore di confronto predefinito non trova un'implementazione di comparer per il tipo T.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary vsli:raw="Represents a list that mutates with little or no memory allocations and that can produce or build on immutable list instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta un elenco che viene modificato con allocazioni di memoria minime o nulle e in grado di produrre o compilare su istanze di elenchi non modificabili in modo molto efficiente.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an item to the immutable list.">Aggiunge un elemento all'elenco non modificabile.</summary>
      <param name="item" vsli:raw="The item to add to the list.">Elemento da aggiungere all'elenco.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a series of elements to the end of this list.">Aggiunge una serie di elementi alla fine di questo elenco.</summary>
      <param name="items" vsli:raw="The elements to add to the end of the list.">Elementi da aggiungere alla fine dell'elenco.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the default comparer and returns the zero-based index of the element.">Cerca un elemento nell'intero <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> usando l'operatore di confronto predefinito e restituisce l'indice in base zero dell'elemento.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">Oggetto da individuare. Il valore può essere null per i tipi di riferimento.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">Indice in base zero dell'elemento in <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore di <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">L'operatore di confronto predefinito <see cref="P:System.Collections.Generic.Comparer`1.Default" /> non riesce a trovare un'implementazione dell'interfaccia generica <see cref="T:System.IComparable`1" /> o dell'interfaccia <see cref="T:System.IComparable" /> per il tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">Cerca un elemento nell'intero <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> usando l'operatore di confronto specificato e restituisce l'indice in base zero dell'elemento.</summary>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">Oggetto da individuare. Questo valore può essere null per i tipi di riferimento.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">Implementazione da usare durante il confronto di elementi oppure <see langword="null" /> per l'operatore di confronto predefinito.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">Indice in base zero dell'elemento in <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore di <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> è <see langword="null" /> e mediante la proprietà <see cref="P:System.Collections.Generic.Comparer`1.Default" /> dell'operatore di confronto predefinito non è possibile rilevare un'implementazione dell'interfaccia generica <see cref="T:System.IComparable`1" /> o dell'interfaccia <see cref="T:System.IComparable" /> per il tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the specified range of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">Cerca un elemento nell'intervallo specificato di <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> usando l'operatore di confronto specificato e restituisce l'indice in base zero dell'elemento.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">Indice iniziale in base zero dell'intervallo in cui eseguire la ricerca.</param>
      <param name="count" vsli:raw="The length of the range to search.">Lunghezza dell'intervallo in cui eseguire la ricerca.</param>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">Oggetto da individuare. Questo valore può essere null per i tipi di riferimento.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">Implementazione da usare durante il confronto di elementi oppure <see langword="null" /> per l'operatore di confronto predefinito.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">Indice in base zero dell'elemento in <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, se l'elemento viene trovato. In caso contrario, un numero negativo che rappresenta il complemento bit per bit dell'indice dell'elemento successivo maggiore di <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> è minore di 0.
In alternativa
<paramref name="count" /> è minore di 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> e <paramref name="count" /> non indicano un intervallo valido nell'oggetto <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> è <see langword="null" /> e mediante la proprietà <see cref="P:System.Collections.Generic.Comparer`1.Default" /> dell'operatore di confronto predefinito non è possibile rilevare un'implementazione dell'interfaccia generica <see cref="T:System.IComparable`1" /> o dell'interfaccia <see cref="T:System.IComparable" /> per il tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Rimuove tutti gli elementi dall'elenco non modificabile.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">Determina se l'elenco non modificabile contiene un valore specifico.</summary>
      <param name="item" vsli:raw="The object to locate in the list.">Oggetto da individuare nell'elenco.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elemento è presente nell'elenco; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Creates a new immutable list from the list represented by this builder by using the converter function.">Crea un nuovo elenco non modificabile dall'elenco rappresentato da questo generatore utilizzando la funzione del convertitore.</summary>
      <param name="converter" vsli:raw="The converter function.">Funzione del convertitore.</param>
      <typeparam name="TOutput" vsli:raw="The type of the output of the delegate converter function.">Tipo dell'output della funzione del convertitore delegato.</typeparam>
      <returns vsli:raw="A new immutable list from the list represented by this builder.">Nuovo elenco non modificabile derivante dall'elenco rappresentato da questo generatore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">Copia l'intero elenco non modificabile in una matrice unidimensionale compatibile, a partire dall'inizio della matrice di destinazione.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'elenco non modificabile. La matrice deve avere un'indicizzazione in base zero.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Copia l'intero elenco non modificabile in una matrice unidimensionale compatibile, a partire dall'indice specificato della matrice di destinazione.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'elenco non modificabile. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">Indice in base zero nella matrice in corrispondenza del quale ha inizio la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Copia l'intero elenco non modificabile in una matrice unidimensionale compatibile, a partire dall'indice specificato della matrice di destinazione.</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">Indice in base zero dell'elenco non modificabile di origine a partire dal quale viene effettuata la copia.</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'elenco non modificabile. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
      <param name="count" vsli:raw="The number of elements to copy.">Numero degli elementi da copiare.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable list.">Ottiene il numero di elementi in questo elenco non modificabile.</summary>
      <returns vsli:raw="The number of elements in this list.">Numero di elementi in questo elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">Determina se l'elenco non modificabile contiene gli elementi che corrispondono alle condizioni definite dal predicato specificato.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Delegato che definisce le condizioni degli elementi da cercare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elenco non modificabile contiene uno o più elementi che corrispondono alle condizioni definite dal predicato specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">Cerca un elemento che soddisfi le condizioni definite nel predicato specificato e restituisce la prima occorrenza all'interno dell'intero elenco non modificabile.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Primo elemento che soddisfa le condizioni definite dal predicato specificato, se trovato; in caso contrario, viene restituito il valore predefinito del tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">Recupera tutti gli elementi che soddisfano le condizioni definite nel predicato specificato.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Delegato che definisce le condizioni degli elementi da cercare.</param>
      <returns vsli:raw="An immutable list containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">Elenco non modificabile contenente tutti gli elementi che corrispondono alle condizioni definite dal predicato specificato, se trovato; in caso contrario, un elenco non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Cerca un elemento che soddisfi le condizioni definite dal predicato specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che inizia dall'indice specificato e contiene il numero indicato di elementi.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Indice iniziale in base zero della ricerca.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Indice in base zero della prima occorrenza di un elemento che corrisponde alle condizioni definite da <paramref name="match" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Cerca un elemento che soddisfi le condizioni definite dal predicato specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile compreso tra l'indice specificato e l'ultimo elemento.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Indice iniziale in base zero della ricerca.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Indice in base zero della prima occorrenza di un elemento che corrisponde alle condizioni definite da <paramref name="match" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">Cerca un elemento che corrisponda alle condizioni definite dal predicato specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'elenco non modificabile.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Indice in base zero della prima occorrenza di un elemento che corrisponde alle condizioni definite da <paramref name="match" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">Cerca un elemento che soddisfi le condizioni definite nel predicato specificato e restituisce l'ultima occorrenza all'interno dell'intero elenco non modificabile.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Ultimo elemento che soddisfa le condizioni definite dal predicato specificato, se trovato; in caso contrario, viene restituito il valore predefinito del tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Cerca un elemento che soddisfi le condizioni definite dal predicato specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che contiene il numero indicato di elementi e termina in corrispondenza dell'indice specificato.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Indice iniziale in base zero della ricerca all'indietro.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Indice in base zero dell'ultima occorrenza di un elemento che corrisponde alle condizioni definite in <paramref name="match" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Cerca un elemento che soddisfi le condizioni definite dal predicato specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile compreso tra il primo elemento e l'indice specificato.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Indice iniziale in base zero della ricerca all'indietro.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Indice in base zero dell'ultima occorrenza di un elemento che corrisponde alle condizioni definite in <paramref name="match" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">Cerca un elemento che corrisponda alle condizioni definite dal predicato specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'elenco non modificabile.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Indice in base zero dell'ultima occorrenza di un elemento che corrisponde alle condizioni definite in <paramref name="match" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the list.">Esegue l'azione specificata su ogni elemento dell'elenco.</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the list.">Delegato da eseguire su ogni elemento dell'elenco.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Enumeratore che può essere usato per scorrere l'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">Crea una copia dei riferimenti di un intervallo di elementi nell'elenco non modificabile di origine.</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">Indice in base zero in corrispondenza del quale inizia la serie.</param>
      <param name="count" vsli:raw="The number of elements in the range.">Numero di elementi nell'intervallo.</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">Copia dei riferimenti di un intervallo di elementi nell'elenco non modificabile di origine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list.">Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza nell'intervallo di elementi nell'elenco non modificabile.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list, if found; otherwise, -1.">Indice in base zero della prima occorrenza di <paramref name="item" /> all'interno dell'intervallo di elementi nell'elenco non modificabile, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che è compreso tra l'indice specificato e l'ultimo elemento.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from &lt;paramref name=&quot;index&quot; /&gt; to the last element, if found; otherwise, -1.">Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile compreso tra <paramref name="index" /> e l'ultimo elemento, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che inizia in corrispondenza dell'indice specificato e contiene il numero di elementi specificato.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1.">Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile che inizia in corrispondenza di <paramref name="index" /> e contiene il numero di elementi corrispondente a <paramref name="count" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; that starts at the specified index and contains the specified number of elements.">Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'oggetto <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> che inizia in corrispondenza dell'indice specificato e contiene il numero di elementi specificato.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <param name="count" vsli:raw="The number of elements to search.">Numero di elementi in cui eseguire la ricerca.</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">Operatore di confronto del valore da usare per confrontare l'uguaglianza degli elementi.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile che inizia in corrispondenza di <paramref name="index" /> e contiene il numero di elementi corrispondente a <paramref name="count" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item to the immutable list at the specified index.">Inserisce un elemento nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Indice in base zero nel quale <paramref name="item" /> deve essere inserito.</param>
      <param name="item" vsli:raw="The object to insert into the immutable list.">Oggetto da inserire nell'elenco non modificabile.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">Inserisce gli elementi di una raccolta nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">Indice in base zero in corrispondenza del quale devono essere inseriti i nuovi elementi.</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted into the immutable list. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are null, if type &lt;c&gt;T&lt;/c&gt; is a reference type.">Raccolta i cui elementi devono essere inseriti nell'elenco non modificabile. La raccolta non può essere <see langword="null" />, ma può contenere elementi Null se il tipo <c>T</c> è un tipo di riferimento.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value for a given index in the list.">Ottiene o imposta il valore per un determinato indice nell'elenco.</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">Indice dell'elemento da ottenere o impostare.</param>
      <returns vsli:raw="The value at the specified index.">Valore in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the value for a given &lt;paramref name=&quot;index&quot; /&gt; into the list.">Ottiene un riferimento di sola lettura al valore per un <paramref name="index" /> specificato nell'elenco.</summary>
      <param name="index" vsli:raw="The index of the desired element.">Indice dell'elemento desiderato.</param>
      <returns vsli:raw="A read-only reference to the value at the specified &lt;paramref name=&quot;index&quot; /&gt;.">Riferimento di sola lettura al valore in corrispondenza dell'<paramref name="index" /> specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza nell'intero elenco non modificabile.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire immutable list, if found; otherwise, -1.">Indice in base zero dell'ultima occorrenza di <paramref name="item" /> all'interno dell'intero elenco non modificabile, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che è compreso tra il primo elemento e l'indice specificato.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Indice iniziale in base zero della ricerca all'indietro.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that extends from the first element to &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">Indice in base zero dell'ultima occorrenza di <paramref name="item" /> all'interno dell'intervallo di elementi dell'elenco non modificabile compreso tra il primo elemento e <paramref name="index" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che contiene il numero di elementi specificato e termina in corrispondenza dell'indice specificato.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Indice iniziale in base zero della ricerca all'indietro.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that contains &lt;paramref name=&quot;count&quot; /&gt; number of elements and ends at &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">Indice in base zero dell'ultima occorrenza di <paramref name="item" /> all'interno dell'intervallo di elementi nell'elenco non modificabile che contiene un numero di elementi corrispondente a <paramref name="count" /> e termina in corrispondenza di <paramref name="index" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che contiene il numero di elementi specificato e termina in corrispondenza dell'indice specificato.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <param name="count" vsli:raw="The number of elements to search.">Numero di elementi in cui eseguire la ricerca.</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">Operatore di confronto del valore da usare per confrontare l'uguaglianza degli elementi.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco non modificabile che inizia in corrispondenza di <paramref name="index" /> e contiene il numero di elementi corrispondente a <paramref name="count" />, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Rimuove la prima occorrenza di un oggetto specifico dall'elenco non modificabile.</summary>
      <param name="item" vsli:raw="The object to remove from the list.">Oggetto da rimuovere dall'elenco.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item is not found in the list.">
        <see langword="true" /> se l'elemento è stato rimosso correttamente dall'elenco; in caso contrario, <see langword="false" />. Questo metodo restituisce inoltre <see langword="false" /> se l'elemento non viene trovato nell'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Rimuove tutti gli elementi che corrispondono alle condizioni definite dal predicato specificato.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Delegato che definisce le condizioni degli elementi da rimuovere.</param>
      <returns vsli:raw="The number of elements removed from the immutable list.">Numero di elementi rimossi dall'elenco non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">Rimuove l'elemento presente nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove from the list.">Indice in base zero dell'elemento da rimuovere dall'elenco.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">Inverte l'ordine degli elementi nell'intero elenco non modificabile.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">Inverte l'ordine degli elementi nell'intervallo specificato dell'elenco non modificabile.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">Indice iniziale in base zero dell'intervallo da invertire.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">Numero di elementi nell'intervallo da invertire.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the default comparer.">Ordina gli elementi nell'intero elenco non modificabile usando l'operatore di confronto predefinito.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparer.">Ordina gli elementi nell'intero elenco non modificabile usando l'operatore di confronto specificato.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Implementazione da usare durante il confronto di elementi oppure <see langword="null" /> per usare l'operatore di confronto predefinito (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparison object.">Ordina gli elementi nell'intero elenco non modificabile usando l'oggetto di confronto specificato.</summary>
      <param name="comparison" vsli:raw="The object to use when comparing elements.">Oggetto da usare quando si confrontano gli elementi.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in a range of elements in the immutable list  by using the specified comparer.">Ordina gli elementi di un intervallo di elementi dell'elenco non modificabile usando l'operatore di confronto specificato.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">Indice iniziale in base zero dell'intervallo da ordinare.</param>
      <param name="count" vsli:raw="The length of the range to sort.">Lunghezza dell'intervallo da ordinare.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Implementazione da usare durante il confronto di elementi oppure <see langword="null" /> per usare l'operatore di confronto predefinito (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">Ottiene un valore che indica se questa istanza è di sola lettura.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">Sempre <c>false</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the list to an array, starting at a particular array index.">Copia gli elementi dell'elenco in una matrice, iniziando in corrispondenza di un particolare indice di matrice.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the list. The array must have zero-based indexing.">Matrice unidimensionale che è la destinazione degli elementi copiati dall'elenco. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Ottiene un valore che indica se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe); in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ottiene un oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the list.">Aggiunge un elemento all'elenco.</summary>
      <param name="value" vsli:raw="The object to add to the list.">Oggetto da aggiungere all'elenco.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">La posizione nella quale è inserito il nuovo elemento o -1 per indicare che l'elemento non è stato inserito nella raccolta.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the list.">Rimuove tutti gli elementi dall'elenco.</summary>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the list contains a specific value.">Determina se l'elenco contiene un valore specifico.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Oggetto da individuare nell'elenco.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Object" /> è presente nell'elenco; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the list.">Determina l'indice di un elemento specifico nell'elenco.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Oggetto da individuare nell'elenco.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Indice di <paramref name="value" />, se presente nell'elenco; in caso contrario, -1.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the list at the specified index.">Inserisce un elemento nell'elenco in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Indice in base zero nel quale <paramref name="value" /> deve essere inserito.</param>
      <param name="value" vsli:raw="The object to insert into the list.">Oggetto da inserire nell'elenco.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Ottiene un valore che indica se le dimensioni dell'oggetto <see cref="T:System.Collections.IList" /> sono fisse.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.IList" /> è di dimensioni fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Ottiene o imposta l'oggetto <see cref="T:System.Object" /> in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index.">Indice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the list.">Rimuove la prima occorrenza di un oggetto specifico dall'elenco.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">Oggetto da rimuovere dall'elenco.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable list based on the contents of this instance.">Crea un elenco non modificabile basato sul contenuto di questa istanza.</summary>
      <returns vsli:raw="An immutable list.">Elenco non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">Determina se ogni elemento nell'elenco non modificabile corrisponde alle condizioni definite dal predicato specificato.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">Delegato che definisce le condizioni per verificare gli elementi.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se ogni elemento nell'elenco non modificabile corrisponde alle condizioni definite dal predicato specificato; in caso contrario, <see langword="false" />. Se l'elenco è privo di elementi, il valore restituito è <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable list.">Rimuove tutti gli elementi dall'elenco non modificabile.</summary>
      <returns vsli:raw="An empty list that retains the same sort or unordered semantics that this instance has.">Elenco vuoto che mantiene lo stesso ordinamento o la stessa semantica non ordinata di questa istanza.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable list contains the specified value.">Determina se questo elenco non modificabile contiene il valore specificato.</summary>
      <param name="value" vsli:raw="The value to locate.">Valore da individuare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elenco contiene il valore specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Converts the elements in the current immutable list to another type, and returns a list containing the converted elements.">Converte gli elementi dell'elenco non modificabile corrente in un altro tipo e restituisce un elenco contenente gli elementi convertiti.</summary>
      <param name="converter" vsli:raw="A delegate that converts each element from one type to another type.">Delegato che converte ogni elemento da un tipo in un altro.</param>
      <typeparam name="TOutput" vsli:raw="The type of the elements of the target array.">Tipo degli elementi della matrice di destinazione.</typeparam>
      <returns vsli:raw="A list of the target type containing the converted elements from the current &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt;.">Elenco del tipo di destinazione contenente gli elementi convertiti dall'oggetto <see cref="T:System.Collections.Immutable.ImmutableList`1" /> corrente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">Copia l'intero elenco non modificabile in una matrice unidimensionale compatibile, a partire dall'inizio della matrice di destinazione.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'elenco non modificabile. La matrice deve avere un'indicizzazione in base zero.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Copia l'intero elenco non modificabile in una matrice unidimensionale compatibile, a partire dall'indice specificato della matrice di destinazione.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'elenco non modificabile. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a range of elements from the immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Copia un intervallo di elementi dall'elenco non modificabile in una matrice unidimensionale compatibile, a partire dall'indice specificato della matrice di destinazione.</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">Indice in base zero dell'elenco non modificabile di origine a partire dal quale viene effettuata la copia.</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'elenco non modificabile. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">Indice in base zero nella matrice in corrispondenza del quale ha inizio la copia.</param>
      <param name="count" vsli:raw="The number of elements to copy.">Numero degli elementi da copiare.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the list.">Ottiene il numero di elementi contenuti nell'elenco.</summary>
      <returns vsli:raw="The number of elements in the list.">Numero di elementi contenuti nell'elenco.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary vsli:raw="Gets an empty immutable list.">Ottiene un set vuoto con l'operatore di confronto di ordinamento predefinito.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera il contenuto di un albero binario.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Ottiene l'elemento in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Elemento in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Enumerator&quot; /&gt; class.">Rilascia le risorse usate dall'istanza corrente della classe <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances enumeration to the next element of the immutable list.">Sposta l'enumerazione all'elemento successivo dell'elenco non modificabile.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the list.">
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo; <see langword="false" /> se l'enumeratore ha superato la fine dell'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable list.">Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento dell'elenco non modificabile.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">L'elemento corrente.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">Determina se l'elenco non modificabile contiene gli elementi che corrispondono alle condizioni definite dal predicato specificato.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Delegato che definisce le condizioni degli elementi da cercare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elenco non modificabile contiene uno o più elementi che corrispondono alle condizioni definite dal predicato specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">Cerca un elemento che soddisfi le condizioni definite nel predicato specificato e restituisce la prima occorrenza all'interno dell'intero elenco non modificabile.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Primo elemento che soddisfa le condizioni definite dal predicato specificato, se trovato; in caso contrario, viene restituito il valore predefinito del tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">Recupera tutti gli elementi che soddisfano le condizioni definite nel predicato specificato.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Delegato che definisce le condizioni degli elementi da cercare.</param>
      <returns vsli:raw="An immutable list that contains all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">Elenco non modificabile contenente tutti gli elementi che corrispondono alle condizioni definite dal predicato specificato, se trovato; in caso contrario, un elenco non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Cerca un elemento che soddisfi le condizioni definite dal predicato specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che inizia dall'indice specificato e contiene il numero indicato di elementi.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Indice iniziale in base zero della ricerca.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">Indice in base zero della prima occorrenza di un elemento che corrisponde alle condizioni definite dalla corrispondenza, se trovato; in caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Cerca un elemento che soddisfi le condizioni definite dal predicato specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile compreso tra l'indice specificato e l'ultimo elemento.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Indice iniziale in base zero della ricerca.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">Indice in base zero della prima occorrenza di un elemento che corrisponde alle condizioni definite dalla corrispondenza, se trovato; in caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">Cerca un elemento che corrisponda alle condizioni definite dal predicato specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'elenco non modificabile.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, -1.">Indice in base zero della prima occorrenza di un elemento che corrisponde alle condizioni definite dalla corrispondenza, se trovato; in caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">Cerca un elemento che soddisfi le condizioni definite nel predicato specificato e restituisce l'ultima occorrenza all'interno dell'intero elenco non modificabile.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Ultimo elemento che soddisfa le condizioni definite dal predicato specificato, se trovato; in caso contrario, viene restituito il valore predefinito del tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Cerca un elemento che soddisfi le condizioni definite dal predicato specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile che contiene il numero indicato di elementi e termina in corrispondenza dell'indice specificato.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Indice iniziale in base zero della ricerca all'indietro.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">Indice in base zero dell'ultima occorrenza di un elemento che corrisponde alle condizioni definite in <paramref name="match" />, se trovato; in caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Cerca un elemento che soddisfi le condizioni definite dal predicato specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco non modificabile compreso tra il primo elemento e l'indice specificato.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Indice iniziale in base zero della ricerca all'indietro.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">Indice in base zero dell'ultima occorrenza di un elemento che corrisponde alle condizioni definite in <paramref name="match" />, se trovato; in caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">Cerca un elemento che corrisponda alle condizioni definite dal predicato specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'elenco non modificabile.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">Indice in base zero dell'ultima occorrenza di un elemento che corrisponde alle condizioni definite in <paramref name="match" />, se trovato; in caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the immutable list.">Esegue l'azione specificata su ciascun elemento dell'elenco non modificabile.</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the immutable list.">Delegato da eseguire su ogni elemento dell'elenco non modificabile.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Restituisce un enumeratore che consente di scorrere l'elenco non modificabile.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the immutable list.">Enumeratore che può essere usato per scorrere l'elenco non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">Crea una copia dei riferimenti di un intervallo di elementi nell'elenco non modificabile di origine.</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">Indice in base zero in corrispondenza del quale inizia la serie.</param>
      <param name="count" vsli:raw="The number of elements in the range.">Numero di elementi nell'intervallo.</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">Copia dei riferimenti di un intervallo di elementi nell'elenco non modificabile di origine.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the entire immutable list.">Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza nell'intero elenco non modificabile.</summary>
      <param name="value" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Oggetto da individuare nell'elenco non modificabile. Il valore può essere <c>null</c> per i tipi di riferimento.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;value&quot; /&gt; within the entire immutable list, if found; otherwise, ?1.">Indice in base zero della prima occorrenza di <paramref name="value" /> all'interno dell'intero elenco non modificabile, se presente; in caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the list that starts at the specified index and contains the specified number of elements.">Cerca l'oggetto specificato e restituisce l'indice in base zero della prima occorrenza all'interno dell'intervallo di elementi nell'elenco che inizia in corrispondenza dell'indice specificato e contiene il numero di elementi specificato.</summary>
      <param name="item" vsli:raw="The object to locate in the list The value can be null for reference types.">Oggetto da individuare nell'elenco. Il valore può essere null per i tipi di riferimento.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Indice iniziale in base zero della ricerca. 0 (zero) è valido in un elenco vuoto.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that starts at index and contains count number of elements, if found; otherwise, -1.">Indice in base zero della prima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco che inizia in corrispondenza dell'indice e contiene il numero di elementi, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified object into the immutable list at the specified index.">Inserisce l'oggetto specificato nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the object.">Indice in base zero in corrispondenza del quale inserire l'oggetto.</param>
      <param name="item" vsli:raw="The object to insert.">Oggetto da inserire.</param>
      <returns vsli:raw="The new immutable list after the object is inserted.">Nuovo elenco non modificabile dopo l'inserimento dell'oggetto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">Inserisce gli elementi di una raccolta nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the elements.">Indice in base zero in corrispondenza del quale inserire gli elementi.</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted.">Raccolta i cui elementi devono essere inseriti.</param>
      <returns vsli:raw="The new immutable list after the elements are inserted.">Nuovo elenco non modificabile dopo l'inserimento degli elementi.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this list is empty.">Ottiene un valore che indica se questo elenco è vuoto.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'elenco è vuoto; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index of the list.">Ottiene l'elemento in corrispondenza dell'indice specificato dell'elenco.</summary>
      <param name="index" vsli:raw="The index of the element to retrieve.">Indice dell'elemento da recuperare.</param>
      <returns vsli:raw="The element at the specified index.">Elemento in corrispondenza dell'indice specificato.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="In a get operation, &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">In un'operazione get <paramref name="index" /> è un valore negativo o non minore di <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Ottiene un riferimento di sola lettura all'elemento del set in corrispondenza dell'<paramref name="index" /> specificato.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Indice in base zero dell'elemento nel set da restituire.</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">Riferimento di sola lettura all'elemento in corrispondenza della posizione specificata.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">
        <paramref name="index" /> è negativo o non minore di <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the list that contains the specified number of elements and ends at the specified index.">Cerca l'oggetto specificato e restituisce l'indice in base zero dell'ultima occorrenza all'interno dell'intervallo di elementi nell'elenco che contiene il numero di elementi specificato e termina in corrispondenza dell'indice specificato.</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">Oggetto da individuare nell'elenco. Il valore può essere null per i tipi di riferimento.</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">Indice iniziale in base zero della ricerca all'indietro.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Numero di elementi nella sezione in cui eseguire la ricerca.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the list that contains count number of elements and ends at index, if found; otherwise, -1.">Indice in base zero dell'ultima occorrenza dell'elemento all'interno dell'intervallo di elementi dell'elenco che contiene il numero di elementi e termina in corrispondenza dell'indice, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from this immutable list.">Rimuove la prima occorrenza dell'oggetto specificato da questo elenco non modificabile.</summary>
      <param name="value" vsli:raw="The object to remove.">Oggetto da rimuovere.</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">Nuovo elenco con l'oggetto rimosso o questo elenco se l'oggetto specificato non è presente nell'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of the object that matches the specified value from this immutable list.">Rimuove la prima occorrenza dell'oggetto che corrisponde al valore specificato da questo elenco non modificabile.</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">Valore dell'elemento da rimuovere dall'elenco.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">Nuovo elenco con l'oggetto rimosso o questo elenco se l'oggetto specificato non è presente nell'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Rimuove tutti gli elementi che corrispondono alle condizioni definite dal predicato specificato.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Delegato che definisce le condizioni degli elementi da rimuovere.</param>
      <returns vsli:raw="The new list with the elements removed.">Nuovo elenco con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index.">Rimuove l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">Indice in base zero dell'elemento da rimuovere.</param>
      <returns vsli:raw="A new list with the element removed.">Nuovo elenco con l'elemento rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list.">Rimuove un intervallo di elementi da questo elenco non modificabile.</summary>
      <param name="items" vsli:raw="The collection whose elements should be removed if matches are found in this list.">Raccolta i cui elementi devono essere rimossi se vengono trovate corrispondenze in questo elenco.</param>
      <returns vsli:raw="A new list with the elements removed.">Nuovo elenco con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified values from this list.">Rimuove da questo elenco i valori specificati.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Elementi da rimuovere se vengono trovate corrispondenze in questo elenco.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns vsli:raw="A new list with the elements removed.">Nuovo elenco con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements, starting from the specified index and containing the specified number of elements, from this immutable list.">Rimuove un intervallo di elementi, a partire dall'indice specificato e che contiene il numero di elementi specificato, da questo elenco non modificabile.</summary>
      <param name="index" vsli:raw="The starting index to begin removal.">Indice iniziale da quale iniziare la rimozione.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Numero di elementi da rimuovere.</param>
      <returns vsli:raw="A new list with the elements removed.">Nuovo elenco con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">Sostituisce l'elemento specificato nell'elenco non modificabile con un nuovo elemento.</summary>
      <param name="oldValue" vsli:raw="The element to replace.">Elemento da sostituire.</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">Elemento con cui sostituire <paramref name="oldValue" />.</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element.">Nuovo elenco con l'elemento sostituito, anche se è uguale all'elemento precedente.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the immutable list.">
        <paramref name="oldValue" /> non esiste nell'elenco non modificabile.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">Sostituisce l'elemento specificato nell'elenco non modificabile con un nuovo elemento.</summary>
      <param name="oldValue" vsli:raw="The element to replace in the list.">Elemento da sostituire nell'elenco.</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">Elemento con cui sostituire <paramref name="oldValue" />.</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to check for equality.">Operatore di confronto da usare per verificare l'uguaglianza.</param>
      <returns vsli:raw="A new list with the object replaced, or this list if the specified object is not in this list.">Nuovo elenco con l'oggetto sostituito o questo elenco se l'oggetto specificato non è presente nell'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">Inverte l'ordine degli elementi nell'intero elenco non modificabile.</summary>
      <returns vsli:raw="The reversed list.">Elenco invertito.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">Inverte l'ordine degli elementi nell'intervallo specificato dell'elenco non modificabile.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">Indice iniziale in base zero dell'intervallo da invertire.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">Numero di elementi nell'intervallo da invertire.</param>
      <returns vsli:raw="The reversed list.">Elenco invertito.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element at a given position in the immutable list with the specified element.">Sostituisce un elemento in una determinata posizione nell'elenco non modificabile con l'elemento specificato.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">Posizione nell'elenco dell'elemento da sostituire.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">Elemento con cui sostituire l'elemento precedente.</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element at that position.">Nuovo elenco con l'elemento sostituito, anche se è uguale all'elemento precedente nella posizione specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the default comparer.">Ordina gli elementi nell'intero elenco non modificabile usando l'operatore di confronto predefinito.</summary>
      <returns vsli:raw="The sorted list.">Elenco ordinato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">Ordina gli elementi nell'intero elenco non modificabile usando l'operatore di confronto specificato.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Implementazione da usare durante il confronto di elementi oppure <see langword="null" /> per usare l'operatore di confronto predefinito (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns vsli:raw="The sorted list.">Elenco ordinato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">Ordina gli elementi nell'intero elenco non modificabile usando l'operatore di confronto specificato.</summary>
      <param name="comparison" vsli:raw="The delegate to use when comparing elements.">Delegato da usare quando si confrontano gli elementi.</param>
      <returns vsli:raw="The sorted list.">Elenco ordinato.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts a range of elements in the immutable list using the specified comparer.">Ordina un intervallo di elementi nell'elenco non modificabile usando l'operatore di confronto specificato.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">Indice iniziale in base zero dell'intervallo da ordinare.</param>
      <param name="count" vsli:raw="The length of the range to sort.">Lunghezza dell'intervallo da ordinare.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Implementazione da usare durante il confronto di elementi oppure <see langword="null" /> per usare l'operatore di confronto predefinito (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns vsli:raw="The sorted list.">Elenco ordinato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable list.">Aggiunge l'elemento specificato all'elenco non modificabile.</summary>
      <param name="item" vsli:raw="The item to add.">Elemento da aggiungere.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Rimuove tutti gli elementi dall'elenco non modificabile.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Rimuove la prima occorrenza di un oggetto specifico dall'elenco non modificabile.</summary>
      <param name="item" vsli:raw="The object to remove.">Oggetto da rimuovere.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original list.">
        <see langword="true" /> se <paramref name="item" /> è stato rimosso correttamente dall'elenco; in caso contrario, <see langword="false" />. Questo metodo restituisce <see langword="false" /> anche se <paramref name="item" /> non viene trovato nell'elenco originale.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Restituisce un enumeratore che consente di scorrere l'elenco non modificabile.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Enumeratore che può essere usato per scorrere l'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an object in the immutable list at the specified index.">Inserisce un oggetto nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Indice in base zero nel quale <paramref name="item" /> deve essere inserito.</param>
      <param name="item" vsli:raw="The object to insert.">Oggetto da inserire.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value at the specified index.">Ottiene o imposta il valore in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">Generata da get quando <paramref name="index" /> è negativo o non minore di <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Generata sempre da set.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the value at the specified index.">Rimuove il valore in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Indice in base zero dell'elemento da rimuovere.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified array index.">Copia l'intero elenco non modificabile in una matrice unidimensionale compatibile, a partire dall'indice della matrice specificato.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from immutable list.">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dall'elenco non modificabile.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="This type is immutable, so it is always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">Vedere l'interfaccia <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Vedere <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Restituisce un enumeratore che consente di scorrere l'elenco non modificabile.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Enumeratore che può essere usato per scorrere l'elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the immutable list.">Aggiunge un elemento all'elenco non modificabile.</summary>
      <param name="value" vsli:raw="The object to add to the list.">Oggetto da aggiungere all'elenco.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the list.">La posizione nella quale è inserito il nuovo elemento o -1 per indicare che l'elemento non è stato inserito nell'elenco.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Sempre generato.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Rimuove tutti gli elementi dall'elenco non modificabile.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Sempre generato.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">Determina se l'elenco non modificabile contiene un valore specifico.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Oggetto da individuare nell'elenco.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto viene trovato nell'elenco; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the immutable list.">Determina l'indice di un elemento specifico nell'elenco non modificabile.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Oggetto da individuare nell'elenco.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Indice di <paramref name="value" />, se presente nell'elenco; in caso contrario, -1.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the immutable list at the specified index.">Inserisce un elemento nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Indice in base zero nel quale <paramref name="value" /> deve essere inserito.</param>
      <param name="value" vsli:raw="The object to insert into the list.">Oggetto da inserire nell'elenco.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Sempre generato.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Ottiene un valore che indica se <see cref="T:System.Collections.IList" /> ha dimensioni fisse.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.IList" /> è di dimensioni fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Ottiene o imposta l'oggetto <see cref="T:System.Object" /> in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index.">Indice.</param>
      <returns vsli:raw="The value at the specified index.">Valore in corrispondenza dell'indice specificato.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">Generata da get quando <paramref name="index" /> è negativo o non minore di <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Generata sempre da set.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Rimuove la prima occorrenza di un oggetto specifico dall'elenco non modificabile.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">Oggetto da rimuovere dall'elenco.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Sempre generato.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">Rimuove l'elemento presente nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Indice in base zero dell'elemento da rimuovere.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Sempre generato.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable list.">Aggiunge il valore specificato a questo elenco non modificabile.</summary>
      <param name="value" vsli:raw="The value to add.">Il valore da aggiungere.</param>
      <returns vsli:raw="A new list with the element added.">Nuovo elenco con l'elemento aggiunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified values to this immutable list.">Aggiunge i valori specificati a questo elenco non modificabile.</summary>
      <param name="items" vsli:raw="The values to add.">Valori da aggiungere.</param>
      <returns vsli:raw="A new list with the elements added.">Nuovo elenco con gli elementi aggiunti.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Retrieves an empty list that has the same sorting and ordering semantics as this instance.">Recupera un elenco vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">Elenco vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">Inserisce l'elemento specificato nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Indice in corrispondenza del quale inserire il valore.</param>
      <param name="item" vsli:raw="The element to insert.">Elemento da inserire.</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">Nuovo elenco non modificabile che include l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">Inserisce gli elementi specificati nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index at which to insert the elements.">Indice in corrispondenza del quale inserire gli elementi.</param>
      <param name="items" vsli:raw="The elements to insert.">Elementi da inserire.</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">Nuovo elenco non modificabile che include gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the element with the specified value from the list.">Rimuove dall'elenco l'elemento con il valore specificato.</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">Valore dell'elemento da rimuovere dall'elenco.</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to compare elements for equality.">Operatore di confronto da usare per verificare l'uguaglianza degli elementi.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; with the specified element removed.">Nuovo <see cref="T:System.Collections.Immutable.ImmutableList`1" /> con l'elemento specificato rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Rimuove tutti gli elementi che corrispondono alle condizioni definite dal predicato specificato.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Delegato che definisce le condizioni degli elementi da rimuovere.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Nuovo elenco non modificabile con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">Rimuove l'elemento presente nell'elenco non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index of the element to remove.">Indice dell'elemento da rimuovere.</param>
      <returns vsli:raw="A new list with the element removed.">Nuovo elenco con l'elemento rimosso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list that match the items specified.">Rimuove da questo elenco non modificabile un intervallo di elementi che corrispondono agli elementi specificati.</summary>
      <param name="items" vsli:raw="The range of items to remove from the list, if found.">Intervallo di elementi da rimuovere dall'elenco, se trovato.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare elements.">Operatore di confronto di uguaglianza da usare per confrontare gli elementi.</param>
      <returns vsli:raw="An immutable list with the items removed.">Elenco non modificabile con gli elementi rimossi.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; or &lt;paramref name=&quot;equalityComparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="items" /> o <paramref name="equalityComparer" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the specified number of elements at the specified location from this list.">Rimuove da questo elenco il numero di elementi specificato nella posizione specificata.</summary>
      <param name="index" vsli:raw="The starting index of the range of elements to remove.">Indice iniziale dell'intervallo di elementi da rimuovere.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Numero di elementi da rimuovere.</param>
      <returns vsli:raw="A new list with the elements removed.">Nuovo elenco con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces an element in the list with the specified element.">Sostituisce un elemento nell'elenco con l'elemento specificato.</summary>
      <param name="oldValue" vsli:raw="The element to replace.">Elemento da sostituire.</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">Elemento con cui sostituire l'elemento precedente.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Operatore di confronto di uguaglianza da usare nella ricerca.</param>
      <returns vsli:raw="The new list.">Nuovo elenco.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">Generata quando il valore precedente non è incluso nell'elenco.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">Sostituisce un elemento in una determinata posizione nell'elenco con l'elemento specificato.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">Posizione nell'elenco dell'elemento da sostituire.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">Elemento con cui sostituire l'elemento precedente.</param>
      <returns vsli:raw="The new list.">Nuovo elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary vsli:raw="Creates a list that has the same contents as this list and can be efficiently mutated across multiple operations using standard mutable interfaces.">Crea un elenco con lo stesso contenuto di questo elenco e che può essere modificato in modo efficiente tra più operazioni tramite interfacce standard modificabili.</summary>
      <returns vsli:raw="The created list with the same contents as this list.">Elenco creato con lo stesso contenuto di questo elenco.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">Determina se ogni elemento nell'elenco non modificabile corrisponde alle condizioni definite dal predicato specificato.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">Delegato che definisce le condizioni per verificare gli elementi.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se ogni elemento nell'elenco non modificabile corrisponde alle condizioni definite dal predicato specificato; in caso contrario, <see langword="false" />. Se l'elenco è privo di elementi, il valore restituito è <see langword="true" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableQueue`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fornisce un set di metodi di inizializzazione per le istanze della classe <see cref="T:System.Collections.Immutable.ImmutableQueue`1" />.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary vsli:raw="Creates an empty immutable queue.">Crea una coda non modificabile vuota.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable queue.">Tipo di elementi da archiviare nella coda non modificabile.</typeparam>
      <returns vsli:raw="An empty immutable queue.">Coda non modificabile vuota.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable queue that contains the specified item.">Crea una nuova coda non modificabile che contiene l'elemento specificato.</summary>
      <param name="item" vsli:raw="The item to prepopulate the queue with.">Elemento con cui prepopolare la coda.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">Tipo di elementi nella coda non modificabile.</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified item.">Nuova coda non modificabile che contiene l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable queue that contains the specified array of items.">Crea una nuova coda non modificabile che contiene la matrice di elementi specificata.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the queue with.">Matrice che contiene gli elementi con cui prepopolare la coda.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">Tipo di elementi nella coda non modificabile.</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified items.">Nuova coda non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable queue that contains the specified items.">Crea una nuova coda non modificabile che contiene gli elementi specificati.</summary>
      <param name="items" vsli:raw="The items to add to the queue before immutability is applied.">Elementi da aggiungere alla coda prima che venga applicata l'immutabilità.</param>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">Tipo di elementi contenuti nella coda.</typeparam>
      <returns vsli:raw="An immutable queue that contains the specified items.">Coda non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">Rimuove l'elemento all'inizio della coda non modificabile e restituisce la nuova coda.</summary>
      <param name="queue" vsli:raw="The queue to remove the item from.">Coda da cui rimuovere l'elemento.</param>
      <param name="value" vsli:raw="When this method returns, contains the item from the beginning of the queue.">Quando termina, questo metodo contiene l'elemento all'inizio della coda.</param>
      <typeparam name="T" vsli:raw="The type of elements in the immutable queue.">Tipo di elementi nella coda non modificabile.</typeparam>
      <returns vsli:raw="The new queue with the item removed.">Nuova coda con l'elemento rimosso.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Lo stack è vuoto.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary vsli:raw="Represents an immutable queue.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta una coda non modificabile.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">Tipo di elementi contenuti nella coda.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable queue.">Rimuove tutti gli oggetti dalla coda non modificabile.</summary>
      <returns vsli:raw="The empty immutable queue.">Coda non modificabile vuota.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">Rimuove l'elemento all'inizio della coda non modificabile e restituisce la nuova coda.</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">Nuova coda non modificabile; il valore non è mai <c>null</c>.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La coda è vuota.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">Rimuove l'elemento all'inizio della coda non modificabile e restituisce la nuova coda.</summary>
      <param name="value" vsli:raw="When this method returns, contains the element from the beginning of the queue.">Quando termina, questo metodo contiene l'elemento all'inizio della coda.</param>
      <returns vsli:raw="The new immutable queue with the beginning element removed.">Nuova coda non modificabile da cui è stato rimosso l'elemento iniziale.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La coda è vuota.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary vsli:raw="Gets an empty immutable queue.">Ottiene una coda non modificabile vuota.</summary>
      <returns vsli:raw="An empty immutable queue.">Coda non modificabile vuota.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Aggiunge un elemento alla fine della coda non modificabile e restituisce la nuova coda.</summary>
      <param name="value" vsli:raw="The element to add.">Elemento da aggiungere.</param>
      <returns vsli:raw="The new immutable queue.">Nuova coda non modificabile.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable queue without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera il contenuto di una coda non modificabile senza allocare memoria.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Ottiene l'elemento in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Elemento in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable queue.">Sposta l'enumeratore all'elemento successivo della coda non modificabile.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the queue.">
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo; <see langword="false" /> se l'enumeratore ha superato la fine della coda.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable queue.">Restituisce un enumeratore che consente di scorrere la coda non modificabile.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the queue.">Enumeratore che può essere usato per scorrere gli elementi della coda.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Ottiene un valore che indica se questa coda non modificabile è vuota o meno.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la coda è vuota; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">Restituisce l'elemento all'inizio della coda non modificabile senza rimuoverlo.</summary>
      <returns vsli:raw="The element at the beginning of the queue.">Elemento all'inizio della coda.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La coda è vuota.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element at the front of the queue.">Ottiene un riferimento di sola lettura all'elemento all'inizio della coda.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">La coda è vuota.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">Oggetto <see cref="T:System.Collections.IEnumerator" /> che può essere usato per eseguire l'iterazione della raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable queue.">Rimuove tutti gli elementi dalla coda non modificabile.</summary>
      <returns vsli:raw="The empty immutable queue.">Coda non modificabile vuota.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">Rimuove l'elemento all'inizio della coda non modificabile e restituisce la nuova coda.</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">Nuova coda non modificabile; il valore non è mai <c>null</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Aggiunge un elemento alla fine della coda non modificabile e restituisce la nuova coda.</summary>
      <param name="value" vsli:raw="The element to add.">Elemento da aggiungere.</param>
      <returns vsli:raw="The new immutable queue.">Nuova coda non modificabile.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fornisce un set di metodi di inizializzazione per le istanze della classe <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" />.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable sorted dictionary.">Crea un dizionario ordinato non modificabile vuoto.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Dizionario ordinato non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key comparer.">Crea un dizionario ordinato non modificabile vuoto che usa l'operatore di confronto della chiave specificato.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Implementazione da usare per determinare l'uguaglianza delle chiavi nel dizionario.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Dizionario ordinato non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key and value comparers.">Crea un dizionario ordinato non modificabile vuoto che usa gli operatori di confronto della chiave e del valore specificati.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Implementazione da usare per determinare l'uguaglianza delle chiavi nel dizionario.</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">Implementazione da usare per determinare l'uguaglianza dei valori nel dizionario.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Dizionario ordinato non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Crea un nuovo generatore di dizionari ordinati non modificabili.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Generatore di raccolte non modificabili.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Crea un nuovo generatore di dizionari ordinati non modificabili.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Operatore di confronto della chiave.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Generatore di raccolte non modificabili.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Crea un nuovo generatore di dizionari ordinati non modificabili.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Operatore di confronto della chiave.</param>
      <param name="valueComparer" vsli:raw="The value comparer.">Operatore di confronto del valore.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Tipo delle chiavi archiviate dal dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Tipo dei valori archiviati dal dizionario.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Generatore di raccolte non modificabili.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key comparer.">Crea un nuovo dizionario ordinato non modificabile dall'intervallo di elementi specificato con l'operatore di confronto della chiave specificato.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to evaluate keys for equality and sorting.">Implementazione dell'operatore di confronto da usare per valutare l'uguaglianza e l'ordinamento delle chiavi.</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary.">Elementi da aggiungere al dizionario ordinato.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">Tipo delle chiavi archiviate nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">Tipo dei valori archiviati nel dizionario.</typeparam>
      <returns vsli:raw="The new immutable sorted dictionary that contains the specified items and uses the specified key comparer.">Nuovo dizionario ordinato non modificabile che contiene gli elementi specificati e usa l'operatore di confronto della chiave specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key and value comparers.">Crea un nuovo dizionario ordinato non modificabile dall'intervallo di elementi specificato con gli operatori di confronto del valore e della chiave specificati.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality and sorting.">Implementazione dell'operatore di confronto da usare per confrontare l'uguaglianza e l'ordinamento delle chiavi.</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">Implementazione dell'operatore di confronto da usare per confrontare l'uguaglianza e l'ordinamento dei valori.</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">Elementi da aggiungere al dizionario ordinato prima che diventi non modificabile.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">Tipo delle chiavi archiviate nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">Tipo dei valori archiviati nel dizionario.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items and uses the specified comparers.">Dizionario ordinato non modificabile che contiene gli elementi specificati e usa gli operatori di confronto specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates an immutable sorted dictionary that contains the specified items and uses the default comparer.">Crea un dizionario ordinato non modificabile che contiene gli elementi specificati e usa l'operatore di confronto predefinito.</summary>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">Elementi da aggiungere al dizionario ordinato prima che diventi non modificabile.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">Tipo delle chiavi archiviate nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">Tipo dei valori archiviati nel dizionario.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items.">Dizionario ordinato non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents.">Enumera una sequenza di coppie chiave/valore e produce un dizionario ordinato non modificabile del relativo contenuto.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Sequenza di coppie chiave/valore da enumerare.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo di valori nel dizionario.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Dizionario ordinato non modificabile che contiene le coppie chiave/valore nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">Enumera una sequenza di coppie chiave/valore e produce un dizionario non modificabile del relativo contenuto usando l'operatore di confronto della chiave specificato.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Sequenza di coppie chiave/valore da enumerare.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Operatore di confronto della chiave da usare durante la compilazione del dizionario non modificabile.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo di valori nel dizionario.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Dizionario ordinato non modificabile che contiene le coppie chiave/valore nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">Enumera una sequenza di coppie chiave/valore e produce un dizionario ordinato non modificabile del relativo contenuto usando gli operatori di confronto della chiave e del valore specificati.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Sequenza di coppie chiave/valore da enumerare.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Operatore di confronto della chiave da usare durante la compilazione del dizionario non modificabile.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">Operatore di confronto del valore da usare per il dizionario non modificabile.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo di valori nel dizionario.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Dizionario ordinato non modificabile che contiene le coppie chiave/valore nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable sorted dictionary from the current contents of the builder's dictionary.">Crea un dizionario ordinato non modificabile dal contenuto corrente del dizionario del generatore.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted dictionary from.">Generatore da cui creare il dizionario ordinato non modificabile.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Tipo di chiavi nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Tipo di valori nel dizionario.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the current contents in the builder's dictionary.">Dizionario ordinato non modificabile che contiene il contenuto corrente nel dizionario del generatore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents.">Enumera e trasforma una sequenza e produce un dizionario ordinato non modificabile del relativo contenuto.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Sequenza da enumerare per generare il dizionario.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Funzione che produrrà la chiave per il dizionario da ogni elemento della sequenza.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Funzione che produrrà il valore per il dizionario da ogni elemento della sequenza.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo degli elementi nella sequenza.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Tipo di chiavi nel dizionario risultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Tipo di valori nel dizionario risultante.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">Dizionario ordinato non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key comparer.">Enumera e trasforma una sequenza e produce un dizionario ordinato non modificabile del relativo contenuto usando l'operatore di confronto della chiave specificato.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Sequenza da enumerare per generare il dizionario.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Funzione che produrrà la chiave per il dizionario da ogni elemento della sequenza.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Funzione che produrrà il valore per il dizionario da ogni elemento della sequenza.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Operatore di confronto della chiave da usare per il dizionario.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo degli elementi nella sequenza.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Tipo di chiavi nel dizionario risultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Tipo di valori nel dizionario risultante.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Dizionario non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">Enumera e trasforma una sequenza e produce un dizionario ordinato non modificabile del relativo contenuto usando gli operatori di confronto della chiave e del valore specificati.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Sequenza da enumerare per generare il dizionario.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Funzione che produrrà la chiave per il dizionario da ogni elemento della sequenza.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Funzione che produrrà il valore per il dizionario da ogni elemento della sequenza.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Operatore di confronto della chiave da usare per il dizionario.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">Operatore di confronto del valore da usare per il dizionario.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo degli elementi nella sequenza.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Tipo di chiavi nel dizionario risultante.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Tipo di valori nel dizionario risultante.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">Dizionario ordinato non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary vsli:raw="Represents an immutable sorted dictionary.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta un dizionario ordinato non modificabile.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="TKey" vsli:raw="The type of the key contained in the dictionary.">Tipo di chiave contenuta nel dizionario.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value contained in the dictionary.">Tipo di valore contenuto nel dizionario.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable sorted dictionary.">Aggiunge un elemento con la chiave e il valore specificati al dizionario ordinato non modificabile.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Chiave della voce da aggiungere.</param>
      <param name="value" vsli:raw="The value of entry to add.">Valore della voce da aggiungere.</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the additional key/value pair.">Nuovo dizionario ordinato non modificabile che contiene la coppia chiave/valore aggiuntiva.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">La chiave specificata esiste già nel dizionario, ma ha un valore diverso.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specific key/value pairs to the immutable sorted dictionary.">Aggiunge le specifiche coppie chiave/valore al dizionario ordinato non modificabile.</summary>
      <param name="items" vsli:raw="The key/value pairs to add.">Coppie chiave/valore da aggiungere.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Nuovo dizionario non modificabile che contiene le coppie chiave/valore aggiuntive.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Una delle chiavi specificate esiste già nel dizionario, ma ha un valore diverso.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary vsli:raw="Represents a sorted dictionary that mutates with little or no memory allocations and that can produce or build on immutable sorted dictionary instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta un dizionario ordinato che viene modificato con allocazioni di memoria minime o nulle e in grado di produrre o compilare su istanze di dizionario ordinato non modificabili in modo molto efficiente.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable sorted dictionary.">Aggiunge un elemento con la chiave e il valore specificati al dizionario ordinato non modificabile.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Chiave dell'elemento da aggiungere.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valore dell'elemento da aggiungere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable sorted dictionary.">Aggiunge l'elemento specificato al dizionario ordinato non modificabile.</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">Oggetto da aggiungere al dizionario.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to the immutable sorted dictionary.">Aggiunge una sequenza di valori al dizionario ordinato non modificabile.</summary>
      <param name="items" vsli:raw="The items to add to the dictionary.">Elementi da aggiungere al dizionario.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable sorted dictionary.">Rimuove tutti gli elementi dal dizionario ordinato non modificabile.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains a specific value.">Determina se il dizionario ordinato non modificabile contiene un valore specifico.</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">Oggetto da individuare nel dizionario.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <paramref name="item" /> viene trovato nel dizionario; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified key.">Determina se il dizionario ordinato non modificabile contiene un elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">Chiave da individuare nel dizionario.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il dizionario contiene un elemento con la chiave; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">Determina se il dizionario ordinato non modificabile contiene un elemento con il valore specificato.</summary>
      <param name="value" vsli:raw="The value to locate in the dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valore da individuare nel dizionario. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable sorted dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il dizionario ordinato non modificabile contiene un elemento con il valore specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable sorted dictionary.">Ottiene il numero di elementi in questo dizionario ordinato non modificabile.</summary>
      <returns vsli:raw="The number of elements in this dictionary.">Numero di elementi in questo dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">Restituisce un enumeratore che consente di scorrere il dizionario ordinato non modificabile.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Enumeratore che può essere usato per scorrere il dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">Ottiene il valore per una determinata chiave se esiste una chiave corrispondente nel dizionario; in caso contrario, il valore predefinito.</summary>
      <param name="key" vsli:raw="The key to search for.">Chiave da ricercare.</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">Valore della chiave oppure <c>default(TValue)</c> se non è stata trovata alcuna chiave corrispondente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">Ottiene il valore per una determinata chiave se esiste una chiave corrispondente nel dizionario; in caso contrario, il valore predefinito.</summary>
      <param name="key" vsli:raw="The key to search for.">Chiave da ricercare.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">Valore predefinito da restituire se non viene trovata alcuna chiave corrispondente nel dizionario.</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">Valore della chiave oppure <paramref name="defaultValue" /> se non è stata trovata alcuna chiave corrispondente.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the value for a specified key in the immutable sorted dictionary.">Ottiene o imposta il valore di una chiave specificata nel dizionario ordinato non modificabile.</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">Chiave di cui recuperare il valore.</param>
      <returns vsli:raw="The value associated with the given key.">Valore associato alla chiave specificata.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Ottiene o imposta l'operatore di confronto della chiave.</summary>
      <returns vsli:raw="The key comparer.">Operatore di confronto della chiave.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a strongly typed, read-only collection of elements.">Ottiene una raccolta di elementi fortemente tipizzata e di sola lettura.</summary>
      <returns vsli:raw="A strongly typed, read-only collection of elements.">Raccolta di elementi fortemente tipizzata e di sola lettura.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable sorted dictionary.">Rimuove dal dizionario ordinato non modificabile l'elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Chiave dell'elemento da rimuovere.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original dictionary.">
        <see langword="true" /> se l'elemento viene rimosso correttamente; in caso contrario, <see langword="false" />. Questo metodo restituisce <see langword="false" /> anche se <paramref name="key" /> non viene trovato nel dizionario originale.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable sorted dictionary.">Rimuove la prima occorrenza di un oggetto specifico dal dizionario ordinato non modificabile.</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">Oggetto da rimuovere dal dizionario.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">
        <see langword="true" /> se <paramref name="item" /> è stato rimosso correttamente dal dizionario; in caso contrario, <see langword="false" />. Questo metodo restituisce <see langword="false" /> anche se <paramref name="item" /> non viene trovato nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable sorted dictionary.">Rimuove dal dizionario ordinato non modificabile tutte le voci con chiavi che corrispondono a quelle presenti nella sequenza specificata.</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">Chiavi per le voci da rimuovere dal dizionario.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Copia gli elementi del dizionario in una matrice, a partire da un indice della matrice specifico.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dal dizionario. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Ottiene un valore che indica se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe); in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ottiene un oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Aggiunge un elemento con la chiave e il valore forniti all'oggetto dizionario.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Chiave dell'elemento da aggiungere.</param>
      <param name="value" vsli:raw="The value of the element to add.">Valore dell'elemento da aggiungere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">Determina se l'oggetto dizionario contiene un elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key to locate.">La chiave da individuare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il dizionario contiene un elemento con la chiave; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Restituisce un oggetto <see cref="T:System.Collections.IDictionaryEnumerator" /> per il dizionario.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Oggetto <see cref="T:System.Collections.IDictionaryEnumerator" /> per il dizionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Ottiene un valore che indica se le dimensioni dell'oggetto <see cref="T:System.Collections.IDictionary" /> sono fisse.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se le dimensioni dell'oggetto <see cref="T:System.Collections.IDictionary" /> sono fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Ottiene o imposta l'elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key.">Chiave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Ottiene <see cref="T:System.Collections.Generic.ICollection`1" /> contenente le chiavi di <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contenente le chiavi dell'oggetto che implementa l'interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">Rimuove dal dizionario l'elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Chiave dell'elemento da rimuovere.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Ottiene <see cref="T:System.Collections.Generic.ICollection`1" /> contenente i valori in <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contenente i valori nell'oggetto che implementa l'interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Oggetto enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted dictionary based on the contents of this instance.">Crea un dizionario ordinato non modificabile basato sul contenuto di questa istanza.</summary>
      <returns vsli:raw="An immutable sorted dictionary.">Dizionario ordinato non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Determina se il dizionario contiene una chiave specificata.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Chiave da ricercare.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">La chiave corrispondente presente nel dizionario, se trovata, oppure <c>equalkey</c> se non viene trovata alcuna corrispondenza.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se viene trovata una corrispondenza per <paramref name="equalKey" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Ottiene il valore associato alla chiave specificata.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Chiave di cui verrà recuperato il valore.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">Quando termina, questo metodo restituisce il valore associato alla chiave specificata nel caso in cui la chiave venga trovata. In caso contrario, restituisce il valore predefinito per il tipo del parametro <paramref name="value" />. Questo parametro viene passato non inizializzato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto che implementa il dizionario contiene un elemento con la chiave specificata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">Ottiene o imposta l'operatore di confronto del valore.</summary>
      <returns vsli:raw="The value comparer.">Operatore di confronto del valore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">Restituisce un riferimento di sola lettura al valore associato all'elemento <paramref name="key" /> specificato.</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">
        <paramref name="key" /> non è presente.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable sorted dictionary.">Ottiene una raccolta contenente i valori presenti nel dizionario ordinato.</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">Raccolta contenente i valori dell'oggetto che implementa il dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable sorted dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Recupera un dizionario ordinato non modificabile vuoto con lo stesso ordinamento e le stesse regole di confronto chiave/valore di questa istanza del dizionario.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Dizionario vuoto con ordinamento e regole di confronto chiave/valore equivalenti.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable sorted dictionary contains the specified key/value pair.">Determina se questo dizionario ordinato non modificabile contiene la coppia chiave/valore specificata.</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">Coppia chiave/valore da individuare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la coppia chiave/valore specificata viene trovata nel dizionario; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether this immutable sorted map contains the specified key.">Determina se questa mappa ordinata non modificabile contiene la chiave specificata.</summary>
      <param name="key" vsli:raw="The key to locate.">La chiave da individuare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il dizionario non modificabile contiene la chiave specificata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">Determina se il dizionario ordinato non modificabile contiene un elemento con il valore specificato.</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Valore da individuare. Il valore può essere <see langword="null" /> per i tipi di riferimento.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il dizionario contiene un elemento con il valore specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable sorted dictionary.">Ottiene il numero di coppie chiave/valore nel dizionario ordinato non modificabile.</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">Numero di coppie chiave/valore nel dizionario.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable sorted dictionary.">Ottiene un dizionario ordinato non modificabile vuoto.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera il contenuto di un albero binario.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Ottiene l'elemento in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Elemento in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator&quot; /&gt; class.">Rilascia le risorse usate dall'istanza corrente della classe <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted dictionary.">Sposta l'enumeratore all'elemento successivo del dizionario ordinato non modificabile.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted dictionary.">
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo; <see langword="false" /> se l'enumeratore ha superato la fine del dizionario ordinato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted dictionary.">Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento nel dizionario ordinato.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">L'elemento corrente.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">Restituisce un enumeratore che consente di scorrere il dizionario ordinato non modificabile.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Enumeratore che può essere usato per scorrere il dizionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable sorted dictionary is empty.">Ottiene un valore che indica se questa istanza del dizionario ordinato non modificabile è vuota o meno.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'istanza è vuota; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">Ottiene l'oggetto <paramref name="TValue" /> associato alla chiave specificata.</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">Chiave di cui recuperare il valore.</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">Valore associato alla chiave specificata. Se non vengono trovati risultati, l'operazione genera un'eccezione.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable sorted dictionary.">Ottiene l'operatore di confronto della chiave per il dizionario ordinato non modificabile.</summary>
      <returns vsli:raw="The key comparer for the dictionary.">Operatore di confronto della chiave per il dizionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable sorted dictionary.">Ottiene le chiavi nel dizionario ordinato non modificabile.</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">Chiavi nel dizionario non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified value from the immutable sorted dictionary.">Rimuove dal dizionario ordinato non modificabile l'elemento con il valore specificato.</summary>
      <param name="value" vsli:raw="The value of the element to remove.">Valore dell'elemento da rimuovere.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified value cannot be found in the dictionary.">Nuovo dizionario non modificabile con l'elemento specificato rimosso oppure questa istanza se il valore specificato non viene trovato nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable sorted dictionary.">Rimuove dal dizionario ordinato non modificabile gli elementi con le chiavi specificate.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">Chiavi degli elementi da rimuovere.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Nuovo dizionario non modificabile con le chiavi specificate rimosse oppure questa istanza se le chiavi specificate non vengono trovate nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable sorted dictionary, possibly overwriting an existing value for the given key.">Imposta la chiave e il valore specificati nel dizionario ordinato non modificabile, eventualmente sovrascrivendo un valore esistente per la chiave specificata.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Chiave della voce da aggiungere.</param>
      <param name="value" vsli:raw="The key value to set.">Valore di chiave da impostare.</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the specified key/value pair.">Nuovo dizionario ordinato non modificabile che contiene la coppia chiave/valore specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable sorted dictionary, possibly overwriting existing values for the keys.">Imposta le coppie chiave/valore specificate nel dizionario ordinato non modificabile, eventualmente sovrascrivendo i valori esistenti per le chiavi.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Coppie chiave/valore da impostare nel dizionario. Se una qualsiasi delle chiavi esiste già nel dizionario, questo metodo sovrascriverà i valori precedenti.</param>
      <returns vsli:raw="An immutable dictionary that contains the specified key/value pairs.">Dizionario non modificabile che contiene la coppia chiave/valore specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The object to use as the key of the element to access." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">Copia gli elementi del dizionario in una matrice, a partire da un indice della matrice specifico.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dal dizionario. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Ottiene un valore che indica se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe); in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ottiene un oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Aggiunge un elemento con la chiave e il valore forniti all'oggetto dizionario.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">Oggetto da usare come chiave dell'elemento da aggiungere.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">Oggetto da usare come valore dell'elemento da aggiungere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">Cancella questa istanza.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">L'oggetto dizionario è di sola lettura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">Determina se l'oggetto dizionario non modificabile contiene un elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">Chiave da individuare nell'oggetto dizionario.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il dizionario contiene un elemento con la chiave; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">Restituisce un oggetto <see cref="T:System.Collections.IDictionaryEnumerator" /> per l'oggetto dizionario non modificabile.</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">Oggetto enumeratore per l'oggetto dizionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Ottiene un valore che indica se le dimensioni dell'oggetto <see cref="T:System.Collections.IDictionary" /> sono fisse.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se le dimensioni dell'oggetto <see cref="T:System.Collections.IDictionary" /> sono fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Ottiene o imposta l'elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key of the element to be accessed.">Chiave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Ottiene <see cref="T:System.Collections.Generic.ICollection`1" /> contenente le chiavi di <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contenente le chiavi dell'oggetto che implementa l'interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">Rimuove dall'oggetto dizionario non modificabile l'elemento con la chiave specificata.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Chiave dell'elemento da rimuovere.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Ottiene <see cref="T:System.Collections.Generic.ICollection`1" /> contenente i valori in <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Interfaccia <see cref="T:System.Collections.Generic.ICollection`1" /> contenente i valori nell'oggetto che implementa l'interfaccia <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Oggetto enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be updated." />
      <param name="value" vsli:raw="Value of entry to be updated." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="A set of key-value pairs to set on the map." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable sorted dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Crea un dizionario ordinato non modificabile con lo stesso contenuto di questo dizionario e che può essere modificato in modo efficiente tra più operazioni tramite interfacce standard modificabili.</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary.">Raccolta con lo stesso contenuto di questo dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Determina se il dizionario contiene una chiave specificata.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Chiave da ricercare.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">La chiave corrispondente presente nel dizionario, se trovata, oppure <c>equalkey</c> se non viene trovata alcuna corrispondenza.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se viene trovata una corrispondenza per <paramref name="equalKey" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Ottiene il valore associato alla chiave specificata.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Chiave di cui verrà recuperato il valore.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">Quando termina, questo metodo restituisce il valore associato alla chiave specificata nel caso in cui la chiave venga trovata. In caso contrario, restituisce il valore predefinito per il tipo del parametro <paramref name="value" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il dizionario contiene un elemento con la chiave specificata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">Ottiene l'operatore di confronto del valore usato per determinare se i valori sono uguali.</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">Operatore di confronto del valore usato per determinare se i valori sono uguali.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">Restituisce un riferimento di sola lettura al valore associato all'elemento <paramref name="key" /> specificato.</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">
        <paramref name="key" /> non è presente.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable sorted dictionary.">Ottiene i valori nel dizionario ordinato non modificabile.</summary>
      <returns vsli:raw="The values in the dictionary.">Valori nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key comparer.">Ottiene un'istanza del dizionario ordinato non modificabile che usa l'operatore di confronto della chiave specificato.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Operatore di confronto della chiave da usare.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">Istanza del dizionario non modificabile che usa l'operatore di confronto specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key and value comparers.">Ottiene un'istanza del dizionario ordinato non modificabile che usa gli operatori di confronto della chiave e del valore specificati.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Operatore di confronto della chiave da usare.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">Operatore di confronto del valore da usare.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">Istanza del dizionario non modificabile che usa gli operatori di confronto specificati.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fornisce un set di metodi di inizializzazione per le istanze della classe <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" />.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary vsli:raw="Creates an empty immutable sorted set.">Crea un set ordinato non modificabile vuoto.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable set.">Tipo di elementi da archiviare nel set non modificabile.</typeparam>
      <returns vsli:raw="An empty immutable sorted set.">Set ordinato non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item.">Crea un nuovo set ordinato non modificabile che contiene l'elemento specificato.</summary>
      <param name="item" vsli:raw="The item to prepopulate the set with.">Elemento con cui prepopolare il set.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Tipo di elementi nel set non modificabile.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">Nuovo set non modificabile che contiene l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items.">Crea un nuovo set ordinato non modificabile che contiene la matrice di elementi specificata.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">Matrice che contiene gli elementi con cui prepopolare il set.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Tipo di elementi nel set non modificabile.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">Nuovo set non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted set that uses the specified comparer.">Crea un set ordinato non modificabile vuoto che usa l'operatore di confronto specificato.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">Implementazione da usare quando si confrontano gli elementi nel set.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Tipo di elementi nel set non modificabile.</typeparam>
      <returns vsli:raw="An empty immutable set.">Set non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item and uses the specified comparer.">Crea un nuovo set ordinato non modificabile che contiene l'elemento specificato e usa l'operatore di confronto specificato.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">Implementazione da usare quando si confrontano gli elementi nel set.</param>
      <param name="item" vsli:raw="The item to prepopulate the set with.">Elemento con cui prepopolare il set.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable set.">Tipo di elementi archiviati nel set non modificabile.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">Nuovo set non modificabile che contiene l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items and uses the specified comparer.">Crea un nuovo set ordinato non modificabile che contiene la matrice di elementi specificata e usa l'operatore di confronto specificato.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">Implementazione da usare quando si confrontano gli elementi nel set.</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">Matrice che contiene gli elementi con cui prepopolare il set.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Tipo di elementi nel set non modificabile.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">Nuovo set non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">Restituisce una raccolta che può essere usata per compilare un set ordinato non modificabile.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Tipo di elementi archiviati dalla raccolta.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Generatore di raccolte non modificabili.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">Restituisce una raccolta che può essere usata per compilare un set ordinato non modificabile.</summary>
      <param name="comparer" vsli:raw="The comparer used to compare items in the set for equality.">Operatore di confronto usato per confrontare l'uguaglianza degli elementi nel set.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Tipo di elementi archiviati dalla raccolta.</typeparam>
      <returns vsli:raw="The immutable collection.">Raccolta non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">Crea una nuova raccolta non modificabile che contiene gli elementi specificati.</summary>
      <param name="comparer" vsli:raw="The comparer to use to compare elements in this set.">Operatore di confronto da usare per confrontare gli elementi di questo set.</param>
      <param name="items" vsli:raw="The items to add to the set before it's immutable.">Elementi da aggiungere al set prima che diventi non modificabile.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Tipo di elementi archiviati dalla raccolta.</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">Nuovo set non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">Crea una nuova raccolta non modificabile che contiene gli elementi specificati.</summary>
      <param name="items" vsli:raw="The items to add to the set with before it's immutable.">Elementi da aggiungere al set prima che diventi non modificabile.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Tipo di elementi archiviati dalla raccolta.</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">Nuovo set non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable sorted set of its contents.">Enumera una sequenza e produce un set ordinato non modificabile del relativo contenuto.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Sequenza da enumerare.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo degli elementi nella sequenza.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">Set ordinato non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable sorted set of its contents, and uses the specified comparer.">Enumera una sequenza, produce un set ordinato non modificabile del relativo contenuto e usa l'operatore di confronto specificato.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Sequenza da enumerare.</param>
      <param name="comparer" vsli:raw="The comparer to use for initializing and adding members to the sorted set.">Operatore di confronto da usare per l'inizializzazione e l'aggiunta di membri a un set ordinato.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Tipo degli elementi nella sequenza.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">Set ordinato non modificabile che contiene gli elementi nella sequenza specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable sorted set from the current contents of the builder's set.">Crea un set ordinato non modificabile dal contenuto corrente del set del generatore.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted set from.">Generatore da cui creare il set ordinato non modificabile.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the immutable sorted set.">Tipo di elementi nel set ordinato non modificabile.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the current contents in the builder's set.">Set ordinato non modificabile che contiene il contenuto corrente nel set del generatore.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary vsli:raw="Represents an immutable sorted set implementation.&#xA;&#xA;NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta l'implementazione di un set ordinato non modificabile.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the set.">Tipo di elementi presenti nel set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable sorted set.">Aggiunge il valore specificato a questo set ordinato non modificabile.</summary>
      <param name="value" vsli:raw="The value to add.">Il valore da aggiungere.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in this set.">Nuovo set con l'elemento aggiunto o questo set se l'elemento è già presente in questo set.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary vsli:raw="Represents a sorted set that enables changes with little or no memory allocations, and efficiently manipulates or builds immutable sorted sets.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta un set ordinato che consente di apportare modifiche con allocazioni di memoria minime o nulle e modifica o compila in modo efficiente set ordinati non modificabili.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">Aggiunge un elemento al set corrente e restituisce un valore che indica se l'aggiunta è stata eseguita correttamente.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Elemento da aggiungere all'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">
        <see langword="true" /> se l'elemento è stato aggiunto al set; <see langword="false" /> se l'elemento è già presente nel set</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary vsli:raw="Removes all elements from this set.">Rimuove tutti gli elementi da questo set.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the set contains the specified object.">Determina se il set contiene l'oggetto specificato.</summary>
      <param name="item" vsli:raw="The object to locate in the set.">Oggetto da individuare nel set.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="item" /> è presente nel set; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">Ottiene il numero di elementi nel set ordinato non modificabile.</summary>
      <returns vsli:raw="The number of elements in this set.">Numero di elementi in questo set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified set of items from the current set.">Rimuove il set di elementi specificato dal set corrente.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">Raccolta di elementi da rimuovere dal set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the set.">Restituisce un enumeratore che scorre il set.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the set.">Enumeratore che può essere usato per scorrere il set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Modifica il set corrente in modo che contenga solo elementi inclusi anche in una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">Determina se il set corrente è un subset (strict) appropriato di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un subset appropriato di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">Determina se il set corrente è un superset (strict) appropriato di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un superset appropriato di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">Determina se il set corrente è un subset di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection is compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un subset di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">Determina se il set corrente è un superset di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un superset di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the set at the given index.">Ottiene l'elemento del set in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Indice in base zero dell'elemento nel set da restituire.</param>
      <returns vsli:raw="The element at the given position.">Elemento in corrispondenza della posizione specificata.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Ottiene un riferimento di sola lettura all'elemento del set in corrispondenza dell'<paramref name="index" /> specificato.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Indice in base zero dell'elemento nel set da restituire.</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">Riferimento di sola lettura all'elemento in corrispondenza della posizione specificata.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the object that is used to determine equality for the values in the immutable sorted set.">Ottiene o imposta l'oggetto che viene usato per determinare l'uguaglianza dei valori nel set ordinato non modificabile.</summary>
      <returns vsli:raw="The comparer that is used to determine equality for the values in the set.">Operatore di confronto usato per determinare l'uguaglianza dei valori nel set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">Ottiene il valore massimo nel set ordinato non modificabile, come definito dall'operatore di confronto.</summary>
      <returns vsli:raw="The maximum value in the set.">Valore massimo nel set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">Ottiene il valore minimo nel set ordinato non modificabile, come definito dall'operatore di confronto.</summary>
      <returns vsli:raw="The minimum value in the set.">Valore minimo nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">Determina se il set corrente è sovrapposto alla raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente e <paramref name="other" /> condividono almeno un elemento comune; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from the set.">Rimuove la prima occorrenza dell'oggetto specificato dal set.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">Oggetto da rimuovere dal set.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was removed from the set; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the set.">
        <see langword="true" /> se <paramref name="item" /> è stato rimosso dal set; <see langword="false" /> se <paramref name="item" /> non è stato trovato nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary vsli:raw="Returns an enumerator that iterates over the immutable sorted set in reverse order.">Restituisce un enumeratore che scorre il set ordinato non modificabile in ordine inverso.</summary>
      <returns vsli:raw="An enumerator that iterates over the set in reverse order.">Enumeratore che scorre il set in ordine inverso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">Determina se il set corrente e la raccolta specificata contengono gli stessi elementi.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è uguale a <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Modifica il set corrente in modo che contenga solo elementi presenti in tale set o nella raccolta specificata, ma non in entrambi.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">Aggiunge un elemento al set corrente e restituisce un valore che indica se l'aggiunta è stata eseguita correttamente.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Elemento da aggiungere all'insieme.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">Copia gli elementi della raccolta in una matrice, a partire da un indice della matrice specifico.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">Matrice unidimensionale che rappresenta la destinazione degli elementi copiati dalla raccolta. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">Ottiene un valore che indica se questa istanza è di sola lettura.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">Sempre <c>false</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">Copia gli elementi del set in una matrice, iniziando in corrispondenza di un particolare indice di matrice.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Matrice unidimensionale che rappresenta la destinazione degli elementi copiati dal set. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe).">Ottiene un valore che indica se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe); in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ottiene un oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted set based on the contents of this instance.">Crea un set ordinato non modificabile basato sul contenuto di questa istanza.</summary>
      <returns vsli:raw="An immutable set.">Set non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">Modifica il set corrente in modo che contenga tutti gli elementi presenti sia in tale set che nella raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current state.">Raccolta da confrontare con lo stato corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable sorted set.">Rimuove tutti gli elementi dal set ordinato non modificabile.</summary>
      <returns vsli:raw="An empty set with the elements removed.">Set vuoto con gli elementi rimossi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable sorted set contains the specified value.">Determina se questo set ordinato non modificabile contiene il valore specificato.</summary>
      <param name="value" vsli:raw="The value to check for.">Valore da controllare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set contiene il valore specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">Ottiene il numero di elementi nel set ordinato non modificabile.</summary>
      <returns vsli:raw="The number of elements in the immutable sorted set.">Numero di elementi nel set ordinato non modificabile.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary vsli:raw="Gets an empty immutable sorted set.">Ottiene un set ordinato non modificabile vuoto.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera il contenuto di un albero binario.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Ottiene l'elemento in corrispondenza della posizione corrente dell'enumeratore.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Elemento in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rilascia le risorse usate dall'istanza corrente della classe <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" />.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Sposta l'enumeratore all'elemento successivo del set ordinato non modificabile.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted set.">
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo, <see langword="false" /> se l'enumeratore ha superato la fine del set ordinato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Imposta l'enumeratore sulla propria posizione iniziale, ovvero prima del primo elemento nel set ordinato.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">L'elemento corrente.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a specified set of items from this immutable sorted set.">Rimuove un set specificato di elementi da questo set ordinato non modificabile.</summary>
      <param name="other" vsli:raw="The items to remove from this set.">Elementi da rimuovere dal set.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Nuovo set con gli elementi rimossi oppure il set originale se nessuno degli elementi era presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted set.">Restituisce un enumeratore che consente di scorrere il set ordinato non modificabile.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Enumeratore che può essere usato per scorrere il set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary vsli:raw="Gets the position within this immutable sorted set that the specified value appears in.">Ottiene la posizione all'interno di questo set ordinato non modificabile in cui viene visualizzato il valore specificato.</summary>
      <param name="item" vsli:raw="The value whose position is being sought.">Valore di cui viene ricercata la posizione.</param>
      <returns vsli:raw="The index of the specified &lt;paramref name=&quot;item&quot; /&gt; in the sorted set, if &lt;paramref name=&quot;item&quot; /&gt; is found. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1.">Indice dell'oggetto <paramref name="item" /> specificato nel set ordinato, se <paramref name="item" /> è stato trovato. Se <paramref name="item" /> non viene trovato ed è minore di uno o più elementi di questo set, questo metodo restituisce un numero negativo che corrisponde al complemento bit per bit dell'indice del primo elemento maggiore del valore. Se <paramref name="item" /> non viene trovato ed è maggiore di qualsiasi elemento del set, questo metodo restituisce un numero negativo che corrisponde al complemento bit per bit dell'indice dell'ultimo elemento più 1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist both in this set and in the specified set.">Crea un set ordinato non modificabile che contiene gli elementi esistenti sia in questo set che nel set specificato.</summary>
      <param name="other" vsli:raw="The set to intersect with this one.">Set da intersecare con questo.</param>
      <returns vsli:raw="A new immutable sorted set that contains any elements that exist in both sets.">Nuovo set ordinato non modificabile che contiene gli elementi esistenti in entrambi i set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable sorted set is empty.">Ottiene un valore che indica se questo set ordinato non modificabile è vuoto o meno.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this set is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set è vuoto; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection.">Determina se il set ordinato non modificabile corrente è un subset (strict) appropriato della raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un subset appropriato di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper superset of a specified collection.">Determina se il set ordinato non modificabile corrente è un superset appropriato di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un superset appropriato di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a subset of a specified collection.">Determina se il set ordinato non modificabile corrente è un subset di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un subset di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a superset of a specified collection.">Determina se il set ordinato non modificabile corrente è un superset di una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente è un superset di <paramref name="other" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the immutable sorted set at the given index.">Ottiene l'elemento del set ordinato non modificabile in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index of the element to retrieve from the sorted set.">Indice dell'elemento da recuperare dal set ordinato.</param>
      <returns vsli:raw="The element at the given index.">Elemento in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference of the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Ottiene un riferimento di sola lettura dell'elemento del set in corrispondenza dell'<paramref name="index" /> specificato.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Indice in base zero dell'elemento nel set da restituire.</param>
      <returns vsli:raw="A read-only reference of the element at the given position.">Riferimento di sola lettura dell'elemento in corrispondenza della posizione specificata.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary vsli:raw="Gets the comparer used to sort keys in the immutable sorted set.">Ottiene l'operatore di confronto usato per ordinare le chiavi nel set ordinato non modificabile.</summary>
      <returns vsli:raw="The comparer used to sort keys.">Operatore di confronto usato per ordinare le chiavi.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">Ottiene il valore massimo nel set ordinato non modificabile, come definito dall'operatore di confronto.</summary>
      <returns vsli:raw="The maximum value in the set.">Valore massimo nel set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">Ottiene il valore minimo nel set ordinato non modificabile, come definito dall'operatore di confronto.</summary>
      <returns vsli:raw="The minimum value in the set.">Valore minimo nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and a specified collection share common elements.">Determina se il set ordinato non modificabile corrente e una raccolta specificata condividono elementi comuni.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il set corrente e <paramref name="other" /> condividono almeno un elemento comune; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified value from this immutable sorted set.">Rimuove il valore specificato da questo set ordinato non modificabile.</summary>
      <param name="value" vsli:raw="The element to remove.">Elemento da rimuovere.</param>
      <returns vsli:raw="A new immutable sorted set with the element removed, or this set if the element was not found in the set.">Nuovo set ordinato non modificabile con l'elemento rimosso oppure questo set se l'elemento non è stato trovato nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that iterates over this immutable sorted set in reverse order.">Restituisce un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> che scorre questo set ordinato non modificabile in ordine inverso.</summary>
      <returns vsli:raw="An enumerator that iterates over the immutable sorted set in reverse order.">Enumeratore che scorre il set ordinato non modificabile in ordine inverso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and the specified collection contain the same elements.">Determina se il set ordinato non modificabile corrente e la raccolta specificata contengono gli stessi elementi.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se i set sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both.">Crea un set ordinato non modificabile che contiene gli elementi esistenti in questo set o in una sequenza specificata, ma non in entrambi.</summary>
      <param name="other" vsli:raw="The other sequence of items.">L'altra sequenza di elementi.</param>
      <returns vsli:raw="The new immutable sorted set.">Nuovo set ordinato non modificabile.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to the collection.">Aggiunge il valore specificato alla raccolta.</summary>
      <param name="item" vsli:raw="The value to add.">Il valore da aggiungere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all the items from the collection.">Rimuove tutti gli elementi dalla raccolta.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">Copia gli elementi della raccolta in una matrice, a partire da un indice della matrice specifico.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">Matrice unidimensionale che rappresenta la destinazione degli elementi copiati dalla raccolta. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Returns true, since immutable collections are always read-only. See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">Vedere l'interfaccia <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">Rimuove la prima occorrenza di un oggetto specifico dalla raccolta.</summary>
      <param name="item" vsli:raw="The object to remove from the collection.">Oggetto da rimuovere dalla raccolta.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <paramref name="item" /> è stato rimosso correttamente dalla raccolta; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the set at the specified index.">Inserisce un elemento nel set in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Indice in base zero nel quale <paramref name="item" /> deve essere inserito.</param>
      <param name="item" vsli:raw="The object to insert into the set.">Oggetto da inserire nel set.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; interface.">Vedere l'interfaccia <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Rimuove l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Indice in base zero dell'elemento da rimuovere.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate if the element was successfully added.">Aggiunge un elemento al set corrente e restituisce un valore che indica se l'aggiunta è stata eseguita correttamente.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Elemento da aggiungere all'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">
        <see langword="true" /> se l'elemento è stato aggiunto al set; <see langword="false" /> se l'elemento è già presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">Rimuove tutti gli elementi della raccolta specificata dal set corrente.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">Raccolta di elementi da rimuovere dal set.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Modifica il set corrente in modo che contenga solo elementi inclusi anche in una raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Modifica il set corrente in modo che contenga solo elementi presenti in tale set o nella raccolta specificata, ma non in entrambi.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or the specified collection.">Modifica il set corrente in modo che contenga tutti gli elementi presenti in tale set o nella raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">Copia gli elementi del set in una matrice, iniziando in corrispondenza di un particolare indice di matrice.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Matrice unidimensionale che rappresenta la destinazione degli elementi copiati dal set. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Returns true, since immutable collections are always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">Vedere l'interfaccia <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Vedere <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Oggetto enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the set.">Aggiunge un elemento al set.</summary>
      <param name="value" vsli:raw="The object to add to the set.">Oggetto da aggiungere al set.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">La posizione nella quale è inserito il nuovo elemento o -1 per indicare che l'elemento non è stato inserito nella raccolta.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">Il set è di sola lettura o ha una dimensione fissa.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the set.">Rimuove tutti gli elementi dal set.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Generata in tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the set contains a specific value.">Determina se il set contiene un valore specifico.</summary>
      <param name="value" vsli:raw="The object to locate in the set.">Oggetto da individuare nel set.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto viene trovato nel set; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the set.">Determina l'indice di un elemento specifico nel set.</summary>
      <param name="value" vsli:raw="The object to locate in the set.">Oggetto da individuare nel set.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Indice di <paramref name="value" />, se presente nell'elenco; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the set at the specified index.">Inserisce un elemento nel set in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Indice in base zero nel quale <paramref name="value" /> deve essere inserito.</param>
      <param name="value" vsli:raw="The object to insert into the set.">Oggetto da inserire nel set.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">Il set è di sola lettura o ha una dimensione fissa.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Ottiene un valore che indica se le dimensioni dell'oggetto <see cref="T:System.Collections.IList" /> sono fisse.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.IList" /> è di dimensioni fisse; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Ottiene un valore che indica se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.Generic.ICollection`1" /> è di sola lettura; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Ottiene o imposta l'oggetto <see cref="T:System.Object" /> in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index.">Indice.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt;.">Oggetto <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">Rimuove la prima occorrenza di un oggetto specifico dal set.</summary>
      <param name="value" vsli:raw="The object to remove from the set.">Oggetto da rimuovere dal set.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">Il set è di sola lettura o ha una dimensione fissa.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the set.">Rimuove dal set l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Indice in base zero dell'elemento da rimuovere.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">Il set è di sola lettura o ha una dimensione fissa.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Aggiunge l'elemento specificato a questo set non modificabile.</summary>
      <param name="value" vsli:raw="The element to add.">Elemento da aggiungere.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Nuovo set con l'elemento aggiunto o questo set se l'elemento è già presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">Recupera un set non modificabile vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">Set vuoto con lo stesso ordinamento e la stessa semantica di ordinamento di questa istanza.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">Rimuove gli elementi della raccolta specificata dal set non modificabile corrente.</summary>
      <param name="other" vsli:raw="The items to remove from this set.">Elementi da rimuovere dal set.</param>
      <returns vsli:raw="The new set with the items removed; or the original set if none of the items were in the set.">Nuovo set con gli elementi rimossi oppure il set originale se nessuno degli elementi era presente nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">Crea un set non modificabile che contiene gli elementi esistenti sia in questo set che nel set specificato.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Nuovo set non modificabile che contiene gli elementi esistenti in entrambi i set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Rimuove l'elemento specificato da questo set non modificabile.</summary>
      <param name="value" vsli:raw="The element to remove.">Elemento da rimuovere.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Nuovo set con l'elemento specificato rimosso oppure il set corrente se l'elemento non viene trovato nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Crea un set non modificabile che contiene solo elementi presenti in tale set o nella raccolta specificata, ma non in entrambi.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Raccolta da confrontare con il set corrente.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Nuovo set che contiene gli elementi presenti solo in tale set o nella raccolta specificata, ma non in entrambi.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Crea un nuovo set non modificabile che contiene tutti gli elementi presenti in tale set o nella raccolta specificata.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Raccolta da cui aggiungere gli elementi.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Nuovo set non modificabile con gli elementi aggiunti oppure il set originale se tutti gli elementi erano già presenti nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary vsli:raw="Creates a collection that has the same contents as this immutable sorted set that can be efficiently manipulated by using standard mutable interfaces.">Crea una raccolta con gli stessi contenuti di questo set ordinato non modificabile che possono essere modificati in modo efficiente utilizzando le interfacce standard modificabili.</summary>
      <returns vsli:raw="The sorted set builder.">Generatore di set ordinati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Cerca un determinato valore nel set e restituisce il valore uguale eventualmente trovato.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">Valore da cercare.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">Valore del set trovato dalla ricerca oppure il valore originale se la ricerca non ha restituito alcuna corrispondenza.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Valore che indica se la ricerca è stata eseguita correttamente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a given set of items to this immutable sorted set.">Aggiunge un set specificato di elementi a questo set ordinato non modificabile.</summary>
      <param name="other" vsli:raw="The items to add.">Elementi da aggiungere.</param>
      <returns vsli:raw="The new set with the items added; or the original set if all the items were already in the set.">Nuovo set con gli elementi aggiunti oppure il set originale se tutti gli elementi erano già presenti nel set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Returns the immutable sorted set that has the specified key comparer.">Restituisce il set ordinato non modificabile con l'operatore di confronto della chiave specificato.</summary>
      <param name="comparer" vsli:raw="The comparer to check for.">Operatore di confronto da cercare.</param>
      <returns vsli:raw="The immutable sorted set that has the specified key comparer.">Set ordinato non modificabile con l'operatore di confronto della chiave specificato.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableStack`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Fornisce un set di metodi di inizializzazione per le istanze della classe <see cref="T:System.Collections.Immutable.ImmutableStack`1" />.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary vsli:raw="Creates an empty immutable stack.">Crea uno stack non modificabile vuoto.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable stack.">Tipo di elementi da archiviare nello stack non modificabile.</typeparam>
      <returns vsli:raw="An empty immutable stack.">Stack non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable stack that contains the specified item.">Crea un nuovo stack non modificabile che contiene l'elemento specificato.</summary>
      <param name="item" vsli:raw="The item to prepopulate the stack with.">Elemento con cui prepopolare lo stack.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">Tipo di elementi nello stack non modificabile.</typeparam>
      <returns vsli:raw="A new immutable collection that contains the specified item.">Nuova raccolta non modificabile che contiene l'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable stack that contains the specified array of items.">Crea un nuovo stack non modificabile che contiene la matrice di elementi specificata.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the stack with.">Matrice che contiene gli elementi con cui prepopolare lo stack.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">Tipo di elementi nello stack non modificabile.</typeparam>
      <returns vsli:raw="A new immutable stack that contains the specified items.">Nuovo stack non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable stack that contains the specified items.">Crea un nuovo stack non modificabile che contiene gli elementi specificati.</summary>
      <param name="items" vsli:raw="The items to add to the stack before it's immutable.">Elementi da aggiungere allo stack prima che diventi non modificabile.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">Tipo di elementi nello stack.</typeparam>
      <returns vsli:raw="An immutable stack that contains the specified items.">Stack non modificabile che contiene gli elementi specificati.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary vsli:raw="Removes the specified item from an immutable stack.">Rimuove l'elemento specificato da uno stack non modificabile.</summary>
      <param name="stack" vsli:raw="The stack to modify.">Stack da modificare.</param>
      <param name="value" vsli:raw="The item to remove from the stack.">Elemento da rimuovere dallo stack.</param>
      <typeparam name="T" vsli:raw="The type of items contained in the stack.">Tipo di elementi contenuti nello stack.</typeparam>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Stack; mai <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Lo stack è vuoto.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary vsli:raw="Represents an immutable stack.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Rappresenta uno stack non modificabile.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="The type of element on the stack.">Tipo di elemento presente nello stack.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">Rimuove tutti gli oggetti dallo stack non modificabile.</summary>
      <returns vsli:raw="An empty immutable stack.">Stack non modificabile vuoto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary vsli:raw="Gets an empty immutable stack.">Ottiene uno stack non modificabile vuoto.</summary>
      <returns vsli:raw="An empty immutable stack.">Stack non modificabile vuoto.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable stack without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Enumera il contenuto di uno stack non modificabile senza allocare memoria.  
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Ottiene l'elemento in corrispondenza della posizione corrente dell'enumeratore.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Elemento in corrispondenza della posizione corrente dell'enumeratore.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable stack.">Sposta l'enumeratore all'elemento successivo dello stack non modificabile.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the stack.">
        <see langword="true" /> se l'enumeratore è stato spostato correttamente in avanti in corrispondenza dell'elemento successivo; <see langword="false" /> se l'enumeratore ha superato la fine dello stack.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable stack.">Restituisce un enumeratore che consente di scorrere lo stack non modificabile.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the stack.">Enumeratore che può essere usato per scorrere gli elementi dello stack.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable stack is empty.">Ottiene un valore che indica se questa istanza dello stack non modificabile è vuoto o meno.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'istanza è vuota; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary vsli:raw="Returns the object at the top of the stack without removing it.">Restituisce l'oggetto all'inizio dello stack senza rimuoverlo.</summary>
      <returns vsli:raw="The object at the top of the stack.">Oggetto all'inizio dello stack.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Lo stack è vuoto.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element on the top of the stack.">Ottiene un riferimento di sola lettura all'elemento all'inizio dello stack.</summary>
      <returns vsli:raw="A read-only reference to the element on the top of the stack.">Riferimento di sola lettura all'elemento all'inizio dello stack.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Generata quando lo stack è vuoto.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the stack after the removal.">Rimuove l'elemento all'inizio dello stack non modificabile e restituisce lo stack dopo la rimozione.</summary>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Stack; mai <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Lo stack è vuoto.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary vsli:raw="Removes the specified element from the immutable stack and returns the stack after the removal.">Rimuove l'elemento specificato dallo stack non modificabile e restituisce lo stack dopo la rimozione.</summary>
      <param name="value" vsli:raw="The value to remove from the stack.">Valore da rimuovere dallo stack.</param>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Stack; mai <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the immutable stack and returns the new stack.">Inserisce un oggetto all'inizio dello stack non modificabile e restituisce il nuovo stack.</summary>
      <param name="value" vsli:raw="The object to push onto the stack.">Oggetto da inserire nello stack.</param>
      <returns vsli:raw="The new stack.">Nuovo stack.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">Oggetto <see cref="T:System.Collections.IEnumerator" /> che può essere usato per eseguire l'iterazione della raccolta.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable stack.">Rimuove tutti gli elementi dallo stack non modificabile.</summary>
      <returns vsli:raw="The empty immutable stack.">Stack non modificabile vuoto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">Rimuove l'elemento all'inizio dello stack non modificabile e restituisce il nuovo stack.</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">Nuovo stack; mai <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">Inserisce un elemento all'inizio dello stack non modificabile e restituisce il nuovo stack.</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">Elemento da inserire nello stack.</param>
      <returns vsli:raw="The new stack.">Nuovo stack.</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary vsli:raw="LINQ extension method overrides that offer greater efficiency for &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; than the standard LINQ methods  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Override dei metodi di estensione LINQ che offrono maggiore efficienza per <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> rispetto ai metodi LINQ standard 
 Pacchetto NuGet: System.Collections.Immutable (informazioni sulle raccolte non modificabili e su come installarle)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Applica una funzione a una sequenza di elementi in modo cumulativo.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">Raccolta a cui applicare la funzione.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Funzione da richiamare su ogni elemento, in modo cumulativo.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The final value after the cumulative function has been applied to all elements.">Valore finale dopo l'applicazione della funzione cumulativa a tutti gli elementi.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Applica una funzione a una sequenza di elementi in modo cumulativo.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">Raccolta a cui applicare la funzione.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Valore iniziale dell'accumulatore.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Funzione da richiamare su ogni elemento, in modo cumulativo.</param>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">Tipo del valore accumulato.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The final accumulator value.">Valore finale dell'accumulatore.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Applica una funzione a una sequenza di elementi in modo cumulativo.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">Raccolta a cui applicare la funzione.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Valore iniziale dell'accumulatore.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Funzione da richiamare su ogni elemento, in modo cumulativo.</param>
      <param name="resultSelector" vsli:raw="A function to transform the final accumulator value into the result type." />
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">Tipo del valore accumulato.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of result returned by the result selector.">Tipo del risultato restituito dal selettore di risultato.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The final accumulator value.">Valore finale dell'accumulatore.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether all elements in this array match a given condition.">Ottiene un valore che indica se tutti gli elementi nella matrice corrispondono a una determinata condizione.</summary>
      <param name="immutableArray" vsli:raw="The array to check for matches.">Matrice in cui cercare le corrispondenze.</param>
      <param name="predicate" vsli:raw="The predicate.">Predicato.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element of the source sequence passes the test in the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se tutti gli elementi della sequenza di origine superano il test per il predicato specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements.">Ottiene un valore che indica se la matrice contiene elementi.</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">Matrice in cui cercare gli elementi.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array contains an elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la matrice contiene elementi; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements that match a specified condition.">Ottiene un valore che indica se la matrice contiene elementi che corrispondono a una condizione specificata.</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">Matrice in cui cercare gli elementi.</param>
      <param name="predicate" vsli:raw="The delegate that defines the condition to match to an element.">Delegato che definisce la condizione a cui deve corrispondere un elemento.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element matches the specified condition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se un elemento corrisponde alla condizione specificata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns a value indicating whether this collection contains any elements.">Restituisce un valore che indica se questa raccolta contiene elementi.</summary>
      <param name="builder" vsli:raw="The builder to check for matches.">Generatore in cui cercare le corrispondenze.</param>
      <typeparam name="T" vsli:raw="The type of elements in the array.">Tipo di elementi nella matrice.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array builder contains any elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il generatore della matrice contiene elementi; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in the array.">Restituisce l'elemento in corrispondenza dell'indice specificato nella matrice.</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">Matrice in cui trovare un elemento.</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">Indice per l'elemento da recuperare.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The item at the specified index.">Elemento in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence or a default value if the index is out of range.">Restituisce l'elemento in corrispondenza di un indice specificato in una sequenza o un valore predefinito se l'indice è esterno all'intervallo.</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">Matrice in cui trovare un elemento.</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">Indice per l'elemento da recuperare.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The item at the specified index, or the default value if the index is not found.">Elemento in corrispondenza dell'indice specificato o il valore predefinito se non viene trovato l'indice.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element in an array.">Restituisce il primo elemento in una matrice.</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">Matrice da cui ottenere un elemento.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The first item in the array.">Primo elemento nella matrice.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Se la matrice è vuota.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element in a sequence that satisfies a specified condition.">Restituisce il primo elemento in una sequenza che soddisfa una condizione specificata.</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">Matrice da cui ottenere un elemento.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The first item in the list if it meets the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Primo elemento nell'elenco, se soddisfa la condizione specificata da <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Se la matrice è vuota.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection.">Restituisce il primo elemento della raccolta.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an item from.">Generatore da cui recuperare un elemento.</param>
      <typeparam name="T" vsli:raw="The type of items in the array.">Tipo di elementi nella matrice.</typeparam>
      <returns vsli:raw="The first item in the list.">Primo elemento nell'elenco.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Se la matrice è vuota.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element of a sequence, or a default value if the sequence contains no elements.">Restituisce il primo elemento di una sequenza o un valore predefinito se la sequenza non contiene elementi.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">Matrice da cui recuperare gli elementi.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">Primo elemento nell'elenco, se trovato; in caso contrario, il valore predefinito per il tipo di elemento.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.">Restituisce il primo elemento della sequenza che soddisfa una condizione specificata o un valore predefinito se tale elemento non viene trovato.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">Matrice da cui recuperare gli elementi.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">Primo elemento nell'elenco, se trovato; in caso contrario, il valore predefinito per il tipo di elemento.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection, or the default value if the collection is empty.">Restituisce il primo elemento nella raccolta o il valore predefinito se la raccolta è vuota.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">Generatore da cui recuperare un elemento.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">Tipo di elemento contenuto nel generatore.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">Primo elemento nell'elenco, se trovato; in caso contrario, il valore predefinito per il tipo di elemento.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of the array.">Restituisce l'ultimo elemento della matrice.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">Matrice da cui recuperare gli elementi.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the array.">Tipo di elemento contenuto dalla matrice.</typeparam>
      <returns vsli:raw="The last element in the array.">Ultimo elemento nella matrice.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Viene generato se la raccolta è vuota.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a specified condition.">Restituisce l'ultimo elemento di una sequenza che soddisfa una condizione specificata.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">Matrice da cui recuperare gli elementi.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to retrieve.">Delegato che definisce le condizioni dell'elemento da recuperare.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The last element of the array that satisfies the &lt;paramref name=&quot;predicate&quot; /&gt; condition.">Ultimo elemento della matrice che soddisfa la condizione <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Viene generato se la raccolta è vuota.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection.">Restituisce l'ultimo elemento della raccolta.</summary>
      <param name="builder" vsli:raw="The builder to retrieve elements from.">Generatore da cui recuperare gli elementi.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">Tipo di elemento contenuto nel generatore.</typeparam>
      <returns vsli:raw="The last element in the builder.">Ultimo elemento nel generatore.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Viene generato se la raccolta è vuota.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of a sequence, or a default value if the sequence contains no elements.">Restituisce l'ultimo elemento di una sequenza o un valore predefinito se la sequenza non contiene elementi.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">Matrice da cui recuperare gli elementi.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">Ultimo elemento di una sequenza o un valore predefinito se la sequenza non contiene elementi.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.">Restituisce l'ultimo elemento di una sequenza che soddisfa una condizione specificata o un valore predefinito se tale elemento non viene trovato.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve an element from.">Matrice da cui recuperare un elemento.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">Delegato che definisce le condizioni dell'elemento da cercare.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">Ultimo elemento di una sequenza o un valore predefinito se la sequenza non contiene elementi.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection, or the default value if the collection is empty.">Restituisce l'ultimo elemento nella raccolta o il valore predefinito se la raccolta è vuota.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">Generatore da cui recuperare un elemento.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">Tipo di elemento contenuto nel generatore.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">Ultimo elemento di una sequenza o un valore predefinito se la sequenza non contiene elementi.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Projects each element of a sequence into a new form.">Proietta ogni elemento di una sequenza in un nuovo form.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to select items from.">Matrice non modificabile da cui selezionare gli elementi.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Funzione di trasformazione da applicare a ogni elemento.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result element.">Tipo di elemento di risultato.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the transform function on each element of source.">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono il risultato ottenuto richiamando una funzione di trasformazione su ogni elemento di origine.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;,             flattens the resulting sequences into one sequence, and invokes a result             selector function on each element therein.">Proietta ogni elemento di una sequenza a un oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" />, semplifica le sequenze risultanti in un'unica sequenza e chiama una funzione del selettore di risultato su ogni elemento al suo interno.</summary>
      <param name="immutableArray" vsli:raw="The immutable array.">Matrice non modificabile.</param>
      <param name="collectionSelector" vsli:raw="A transform function to apply to each element of the input sequence.">Funzione di trasformazione da applicare a ogni elemento della sequenza di input.</param>
      <param name="resultSelector" vsli:raw="A transform function to apply to each element of the intermediate sequence.">Funzione di trasformazione da applicare a ogni elemento della sequenza intermedia.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;immutableArray&quot; /&gt;.">Tipo degli elementi di <paramref name="immutableArray" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">Tipo degli elementi intermedi raccolti da <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">Tipo degli elementi della sequenza risultante.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result             of invoking the one-to-many transform function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each             element of &lt;paramref name=&quot;immutableArray&quot; /&gt; and then mapping each of those sequence elements and their             corresponding source element to a result element.">Oggetto <see cref="T:System.Collections.Generic.IEnumerable`1" /> i cui elementi sono ottenuti chiamando la funzione di trasformazione uno a molti <paramref name="collectionSelector" /> su ogni elemento di <paramref name="immutableArray" /> ed eseguendo quindi il mapping di ogni elemento di tale sequenza e del corrispondente elemento di origine a un elemento di risultato.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Determina se due sequenze sono uguali secondo un operatore di confronto di uguaglianza.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">Matrice da usare per il confronto.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Elementi da usare per il confronto.</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">Operatore di confronto da usare per verificare l'uguaglianza.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">Tipo di elemento nella matrice confrontata.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per indicare che le sequenze sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Determina se due sequenze sono uguali secondo un operatore di confronto di uguaglianza.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">Matrice da usare per il confronto.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Elementi da usare per il confronto.</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">Operatore di confronto da usare per verificare l'uguaglianza.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">Tipo di elemento nella matrice confrontata.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per indicare che le sequenze sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Determina se due sequenze sono uguali secondo un operatore di confronto di uguaglianza.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">Matrice da usare per il confronto.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Elementi da usare per il confronto.</param>
      <param name="predicate" vsli:raw="The comparer to use to check for equality.">Operatore di confronto da usare per verificare l'uguaglianza.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">Tipo di elemento nella matrice confrontata.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per indicare che le sequenze sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.">Restituisce l'unico elemento di una sequenza e genera un'eccezione se nella sequenza non è presente esattamente un elemento.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve the element from.">Matrice da cui recuperare l'elemento.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The element in the sequence.">Elemento nella sequenza.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.">Restituisce l'unico elemento di una sequenza che soddisfa una condizione specificata e genera un'eccezione se esistono più elementi di tale tipo.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to return a single element from." />
      <param name="predicate" vsli:raw="The function to test whether an element should be returned." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Restituisca il valore <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of the array, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.">Restituisce l'unico elemento della matrice o un valore predefinito se la sequenza è vuota. Questo metodo genera un'eccezione se esiste più di un elemento nella sequenza.</summary>
      <param name="immutableArray" vsli:raw="The array.">Matrice.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The element in the array, or the default value if the array is empty.">Elemento nella matrice o il valore predefinito se la matrice è vuota.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains more than one element.">
        <paramref name="source" /> contiene più di un elemento.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.">Restituisce l'unico elemento di una sequenza che soddisfa una condizione specificata o un valore predefinito se tale elemento esiste. Questo metodo genera un'eccezione se più di un elemento soddisfa la condizione.</summary>
      <param name="immutableArray" vsli:raw="The array to get the element from.">Matrice da cui ottenere l'elemento.</param>
      <param name="predicate" vsli:raw="The condition the element must satisfy.">Condizione che l'elemento deve soddisfare.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The element if it satisfies the specified condition; otherwise the default element.">Elemento, se soddisfa la condizione specificata; in caso contrario, l'elemento predefinito.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">Più di un elemento soddisfa la condizione in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Copies the contents of this array to a mutable array.">Copia il contenuto di questa matrice in una matrice modificabile.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to copy into a mutable one." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The newly instantiated array.">Matrice di cui è stata creata la nuova istanza.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Crea un dizionario basato sul contenuto di questa matrice.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Matrice da cui creare un dizionario.</param>
      <param name="keySelector" vsli:raw="The key selector.">Selettore di chiave.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo di chiave.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Dizionario appena inizializzato.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Crea un dizionario basato sul contenuto di questa matrice.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Matrice da cui creare un dizionario.</param>
      <param name="keySelector" vsli:raw="The key selector.">Selettore di chiave.</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">Operatore di confronto con cui inizializzare il dizionario.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo di chiave.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Dizionario appena inizializzato.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Crea un dizionario basato sul contenuto di questa matrice.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Matrice da cui creare un dizionario.</param>
      <param name="keySelector" vsli:raw="The key selector.">Selettore di chiave.</param>
      <param name="elementSelector" vsli:raw="The element selector.">Selettore di elemento.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo di chiave.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">Tipo dell'elemento.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Dizionario appena inizializzato.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Crea un dizionario basato sul contenuto di questa matrice.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Matrice da cui creare un dizionario.</param>
      <param name="keySelector" vsli:raw="The key selector.">Selettore di chiave.</param>
      <param name="elementSelector" vsli:raw="The element selector.">Selettore di elemento.</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">Operatore di confronto con cui inizializzare il dizionario.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Tipo di chiave.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">Tipo dell'elemento.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Dizionario appena inizializzato.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Filters a sequence of values based on a predicate.">Filtra una sequenza di valori in base a un predicato.</summary>
      <param name="immutableArray" vsli:raw="The array to filter.">Matrice da filtrare.</param>
      <param name="predicate" vsli:raw="The condition to use for filtering the array content.">Condizione da usare per filtrare il contenuto della matrice.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Tipo di elemento contenuto dalla raccolta.</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements that meet the condition.">Restituisce <see cref="T:System.Collections.Generic.IEnumerable`1" /> che contiene gli elementi che soddisfano la condizione.</returns>
    </member>
  </members>
</doc>
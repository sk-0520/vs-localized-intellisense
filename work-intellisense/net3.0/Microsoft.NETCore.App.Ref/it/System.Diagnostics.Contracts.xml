<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.Contracts</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.Contracts.Contract">
      <summary vsli:raw="Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.">Contiene metodi statici per la rappresentazione di contratti di programma quali precondizioni, postcondizioni e invarianti dell'oggetto.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set for the analyzer.">Controlla una condizione. Se la condizione è <see langword="false" />, seguono i criteri di escalation impostati per l'analizzatore.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Espressione condizionale da sottoporre a test.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set by the analyzer and displays the specified message.">Controlla una condizione. Se la condizione è <see langword="false" />, seguono i criteri di escalation impostati dall'analizzatore e viene visualizzato un messaggio specificato.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Espressione condizionale da sottoporre a test.</param>
      <param name="userMessage" vsli:raw="A message to display if the condition is not met.">Messaggio da visualizzare se la condizione non è soddisfatta.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
      <summary vsli:raw="Instructs code analysis tools to assume that the specified condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;.">Indica agli strumenti di analisi del codice di presumere che la condizione specificata sia <see langword="true" />, anche se non è possibile provare staticamente che sia sempre <see langword="true" />.</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">Espressione condizionale da presumere che sia <see langword="true" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
      <summary vsli:raw="Instructs code analysis tools to assume that a condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;, and displays a message if the assumption fails.">Indica agli strumenti di analisi del codice di presumere che una condizione sia <see langword="true" />, anche se non è possibile provare staticamente che sia sempre <see langword="true" />. Viene visualizzato un messaggio se l'ipotesi non riesce.</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">Espressione condizionale da presumere che sia <see langword="true" />.</param>
      <param name="userMessage" vsli:raw="The message to post if the assumption fails.">Messaggio da inserire se l'ipotesi non riesce.</param>
    </member>
    <member name="E:System.Diagnostics.Contracts.Contract.ContractFailed">
      <summary vsli:raw="Occurs when a contract fails.">Si verifica quando un contratto ha esito negativo.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
      <summary vsli:raw="Marks the end of the contract section when a method's contracts contain only preconditions in the &lt;see langword=&quot;if&quot; /&gt;-&lt;see langword=&quot;then&quot; /&gt;-&lt;see langword=&quot;throw&quot; /&gt; form.">Contrassegna la fine della sezione del contratto quando i contratti di un metodo contengono solo precondizioni nel formato <see langword="if" />-<see langword="then" />-<see langword="throw" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property.">Specifica un contratto di postcondizione per il metodo o la proprietà contenitore.</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">Espressione condizionale da sottoporre a test. L'espressione potrebbe includere i valori <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" />, <see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" /> e <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract for a provided exit condition and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Specifica un contratto di postcondizione per una condizione di uscita fornita e un messaggio da visualizzare se la condizione è <see langword="false" />.</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">Espressione condizionale da sottoporre a test. L'espressione potrebbe includere i valori <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /> e <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" />.</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is not &lt;see langword=&quot;true&quot; /&gt;.">Messaggio da visualizzare se l'espressione non è <see langword="true" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.">Specifica un contratto di postcondizione per il metodo o la proprietà contenitore in base all'eccezione e alla condizione fornite.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Espressione condizionale da sottoporre a test.</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">Tipo di eccezione che richiama il controllo di postcondizione.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt; for the enclosing method or property, based on the provided exception and condition.">Specifica un contratto di postcondizione e un messaggio da visualizzare se la condizione è <see langword="false" /> per il metodo o la proprietà contenitore in base all'eccezione e alla condizione fornite.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Espressione condizionale da sottoporre a test.</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is &lt;see langword=&quot;false&quot; /&gt;.">Messaggio da visualizzare se l'espressione è <see langword="false" />.</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">Tipo di eccezione che richiama il controllo di postcondizione.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a specified test is true for any integer within a range of integers.">Determina se un test specificato è true per qualsiasi Integer all'interno di un intervallo di Integer.</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Primo Integer da passare a <paramref name="predicate" />.</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Un ulteriore Integer oltre l'ultimo da passare a <paramref name="predicate" /> più uno.</param>
      <param name="predicate" vsli:raw="The function to evaluate for any value of the integer in the specified range.">Funzione da valutare per un valore dell'Integer nell'intervallo specificato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any integer starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">
        <see langword="true" /> se <paramref name="predicate" /> restituisce <see langword="true" /> per qualsiasi Integer a partire da <paramref name="fromInclusive" /> fino a <paramref name="toExclusive" /> - 1.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" /> è minore di <paramref name="fromInclusive" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether an element within a collection of elements exists within a function.">Determina se un elemento all'interno di una raccolta di elementi esiste all'interno di una funzione.</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Raccolta da cui si ottengono gli elementi di tipo <c>T</c> da passare a <paramref name="predicate" />.</param>
      <param name="predicate" vsli:raw="The function to evaluate for an element in &lt;paramref name=&quot;collection&quot; /&gt;.">Funzione da valutare per un elemento in <paramref name="collection" />.</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">Tipo contenuto in <paramref name="collection" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any element of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <see langword="true" /> solo se <paramref name="predicate" /> restituisce <see langword="true" /> per un elemento di tipo <paramref name="T" /> in <paramref name="collection" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a particular condition is valid for all integers in a specified range.">Determina se una particolare condizione è valida per tutti gli Integer in un intervallo specificato.</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Primo Integer da passare a <paramref name="predicate" />.</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Un ulteriore Integer oltre l'ultimo da passare a <paramref name="predicate" /> più uno.</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of the integers in the specified range.">Funzione da valutare per l'esistenza degli Integer nell'intervallo specificato.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all integers starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">
        <see langword="true" /> se <paramref name="predicate" /> restituisce <see langword="true" /> per tutti gli Integer a partire da <paramref name="fromInclusive" /> fino a <paramref name="toExclusive" /> - 1.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" /> è minore di <paramref name="fromInclusive" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether all the elements in a collection exist within a function.">Determina se tutti gli elementi all'interno di una raccolta esistono all'interno di una funzione.</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Raccolta da cui si ottengono gli elementi di tipo <c>T</c> da passare a <paramref name="predicate" />.</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of all the elements in &lt;paramref name=&quot;collection&quot; /&gt;.">Funzione da valutare per l'esistenza di tutti gli elementi in <paramref name="collection" />.</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">Tipo contenuto in <paramref name="collection" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all elements of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <see langword="true" /> se e solo se <paramref name="predicate" /> restituisce <see langword="true" /> per tutti gli elementi di tipo <paramref name="T" /> in <paramref name="collection" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> o <paramref name="predicate" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property.">Specifica un contratto invariante per il metodo o la proprietà contenitore.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Espressione condizionale da sottoporre a test.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.">Specifica un contratto invariante per la proprietà o il metodo contenitore e visualizza un messaggio se la condizione per il contratto ha esito negativo.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Espressione condizionale da sottoporre a test.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Messaggio da visualizzare se la condizione è <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
      <summary vsli:raw="Represents values as they were at the start of a method or property.">Rappresenta i valori come se fossero all'inizio di un metodo o di una proprietà.</summary>
      <param name="value" vsli:raw="The value to represent (field or parameter).">Valore da rappresentare (campo o parametro).</param>
      <typeparam name="T" vsli:raw="The type of value.">Tipo di valore.</typeparam>
      <returns vsli:raw="The value of the parameter or field at the start of a method or property.">Valore del parametro o del campo all'inizio di un metodo o di una proprietà.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property.">Specifica un contratto di precondizione per il metodo o la proprietà contenitore.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Espressione condizionale da sottoporre a test.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.">Specifica un contratto di precondizione per la proprietà o il metodo contenitore e visualizza un messaggio se la condizione per il contratto non riesce.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Espressione condizionale da sottoporre a test.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Messaggio da visualizzare se la condizione è <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.">Specifica un contratto di precondizione per la proprietà o il metodo contenitore e genera un'eccezione se la condizione per il contratto non riesce.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Espressione condizionale da sottoporre a test.</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Eccezione da generare se la condizione è <see langword="false" />.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.">Specifica un contratto di precondizione per la proprietà o il metodo contenitore e genera un'eccezione con il messaggio fornito se la condizione per il contratto non riesce.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Espressione condizionale da sottoporre a test.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Messaggio da visualizzare se la condizione è <see langword="false" />.</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Eccezione da generare se la condizione è <see langword="false" />.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
      <summary vsli:raw="Represents the return value of a method or property.">Rappresenta il valore restituito di un metodo o di una proprietà.</summary>
      <typeparam name="T" vsli:raw="Type of return value of the enclosing method or property.">Tipo di valore restituito del metodo o della proprietà contenitore.</typeparam>
      <returns vsli:raw="Return value of the enclosing method or property.">Valore restituito del metodo o della proprietà contenitore.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
      <summary vsli:raw="Represents the final (output) value of an &lt;see langword=&quot;out&quot; /&gt; parameter when returning from a method.">Rappresenta il valore finale (output) di un parametro <see langword="out" /> in caso di restituzione da un metodo.</summary>
      <param name="value" vsli:raw="The &lt;see langword=&quot;out&quot; /&gt; parameter.">Parametro <see langword="out" />.</param>
      <typeparam name="T" vsli:raw="The type of the &lt;see langword=&quot;out&quot; /&gt; parameter.">Tipo del parametro <see langword="out" />.</typeparam>
      <returns vsli:raw="The output value of the &lt;see langword=&quot;out&quot; /&gt; parameter.">Valore di output del parametro <see langword="out" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
      <summary vsli:raw="Defines abbreviations that you can use in place of the full contract syntax.">Definisce le abbreviazioni che possono essere utilizzate al posto della sintassi completa del contratto.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
      <summary vsli:raw="Enables the factoring of legacy &lt;see langword=&quot;if-then-throw&quot; /&gt; code into separate methods for reuse, and provides full control over thrown exceptions and arguments.">Consente di eseguire il factoring del codice <see langword="if-then-throw" /> legacy in metodi separati da riutilizzare e fornisce il controllo completo sulle eccezioni e sugli argomenti generati.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
      <summary vsli:raw="Specifies that a separate type contains the code contracts for this type.">Specifica che un tipo separato contiene i contratti di codice per questo tipo.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute" />.</summary>
      <param name="typeContainingContracts" vsli:raw="The type that contains the code contracts for this type.">Tipo che contiene i contratti di codice per questo tipo.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
      <summary vsli:raw="Gets the type that contains the code contracts for this type.">Ottiene il tipo che contiene i contratti di codice per questo tipo.</summary>
      <returns vsli:raw="The type that contains the code contracts for this type.">Tipo che contiene i contratti di codice per questo tipo.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
      <summary vsli:raw="Specifies that a class is a contract for a type.">Specifica che una classe è un contratto per un tipo.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassForAttribute&quot; /&gt; class, specifying the type the current class is a contract for.">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute" /> che specifica il tipo di cui la classe corrente è un contratto.</summary>
      <param name="typeContractsAreFor" vsli:raw="The type the current class is a contract for.">Tipo di cui la classe corrente è un contratto.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
      <summary vsli:raw="Gets the type that this code contract applies to.">Ottiene il tipo a cui si applica questo contratto di codice.</summary>
      <returns vsli:raw="The type that this contract applies to.">Tipo a cui si applica questo contratto.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailedEventArgs">
      <summary vsli:raw="Provides methods and data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Fornisce metodi e dati per l'evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Fornisce dati per l'evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the contract that failed.">Uno dei valori di enumerazione che specifica il contratto non riuscito.</param>
      <param name="message" vsli:raw="The message for the event.">Messaggio per l'evento.</param>
      <param name="condition" vsli:raw="The condition for the event.">Condizione per l'evento.</param>
      <param name="originalException" vsli:raw="The exception that caused the event.">Eccezione che ha causato l'evento.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition">
      <summary vsli:raw="Gets the condition for the failure of the contract.">Ottiene la condizione dell'errore del contratto.</summary>
      <returns vsli:raw="The condition for the failure.">Condizione per l'errore.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind">
      <summary vsli:raw="Gets the type of contract that failed.">Ottiene il tipo di contratto non riuscito.</summary>
      <returns vsli:raw="One of the enumeration values that specifies the type of contract that failed.">Uno dei valori di enumerazione che specifica il tipo di contratto non riuscito.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event has been handled.">Indica se l'evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> è stato gestito.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'evento è stato gestito; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message">
      <summary vsli:raw="Gets the message that describes the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Ottiene il messaggio nel quale è descritto l'evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <returns vsli:raw="The message that describes the event.">Messaggio che descrive l'evento.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException">
      <summary vsli:raw="Gets the original exception that caused the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Ottiene l'eccezione originale che ha causato l'evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <returns vsli:raw="The exception that caused the event.">Eccezione che ha causato l'evento.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">Imposta la proprietà <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled" /> su <see langword="true" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">Imposta la proprietà <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind" /> su <see langword="true" />.</summary>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind">
      <summary vsli:raw="Indicates whether the code contract escalation policy should be applied.">Indica se devono essere applicati i criteri di escalation del contratto di codice.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to apply the escalation policy; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per applicare i criteri di escalation. In caso contrario, <see langword="false" />. Il valore predefinito è <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
      <summary vsli:raw="Specifies the type of contract that failed.">Specifica il tipo di contratto che non è riuscito.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assert&quot; /&gt; contract failed.">Contratto <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert" /> non riuscito.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assume&quot; /&gt; contract failed.">Contratto <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume" /> non riuscito.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Invariant&quot; /&gt; contract failed.">Contratto <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant" /> non riuscito.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Ensures&quot; /&gt; contract failed.">Contratto <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures" /> non riuscito.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow&quot; /&gt; contract failed.">Contratto <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow" /> non riuscito.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
      <summary vsli:raw="A &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Requires&quot; /&gt; contract failed.">Contratto <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires" /> non riuscito.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
      <summary vsli:raw="Marks a method as being the invariant method for a class.">Contrassegna un metodo come metodo invariante per una classe.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
      <summary vsli:raw="Enables you to set contract and tool options at assembly, type, or method granularity.">Consente di impostare il contratto e le opzioni dello strumento con granularità a livello di assembly, tipo o metodo.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and enable/disable value.">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> utilizzando la categoria, l'impostazione e il valore abilita/disabilita forniti.</summary>
      <param name="category" vsli:raw="The category for the option to be set.">La categoria per l'opzione da impostare.</param>
      <param name="setting" vsli:raw="The option setting.">Impostazioni dell'opzione.</param>
      <param name="enabled" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enable the option; &lt;see langword=&quot;false&quot; /&gt; to disable the option.">
        <see langword="true" /> per abilitare l'opzione; <see langword="false" /> per disabilitare l'opzione.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and value.">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> utilizzando la categoria, l'impostazione e il valore forniti.</summary>
      <param name="category" vsli:raw="The category of the option to be set.">La categoria dell'opzione da impostare.</param>
      <param name="setting" vsli:raw="The option setting.">Impostazioni dell'opzione.</param>
      <param name="value" vsli:raw="The value for the setting.">Valore dell'impostazione.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Category">
      <summary vsli:raw="Gets the category of the option.">Ottiene la categoria dell'opzione.</summary>
      <returns vsli:raw="The category of the option.">Categoria dell'opzione.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Enabled">
      <summary vsli:raw="Determines if an option is enabled.">Determina se un'opzione è abilitata.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the option is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'opzione è abilitata; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Setting">
      <summary vsli:raw="Gets the setting for the option.">Ottiene l'impostazione per l'opzione.</summary>
      <returns vsli:raw="The setting for the option.">Impostazione per l'opzione.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Value">
      <summary vsli:raw="Gets the value for the option.">Ottiene il valore per l'opzione.</summary>
      <returns vsli:raw="The value for the option.">Valore dell'opzione.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
      <summary vsli:raw="Specifies that a field can be used in method contracts when the field has less visibility than the method.">Specifica che un campo può essere usato nei contratti del metodo quando il campo presenta una visibilità inferiore rispetto al metodo.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute" />.</summary>
      <param name="name" vsli:raw="The property name to apply to the field.">Nome della proprietà da applicare al campo.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the property name to be applied to the field.">Ottiene il nome della proprietà da applicare al campo.</summary>
      <returns vsli:raw="The property name to be applied to the field.">Nome della proprietà da applicare al campo.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
      <summary vsli:raw="Specifies that an assembly is a reference assembly that contains contracts.">Specifica che un assembly è un assembly di riferimento che contiene contratti.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
      <summary vsli:raw="Identifies a member that has no run-time behavior.">Identifica un membro che non presenta un comportamento in fase di esecuzione.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
      <summary vsli:raw="Instructs analysis tools to assume the correctness of an assembly, type, or member without performing static verification.">Indica agli strumenti di analisi di presumere la correttezza di un assembly, un tipo o un membro senza eseguire una verifica statica.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractVerificationAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute" />.</summary>
      <param name="value" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to require verification; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per richiedere la verifica. In caso contrario, <see langword="false" />.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
      <summary vsli:raw="Gets the value that indicates whether to verify the contract of the target.">Ottiene il valore che indica se verificare il contratto della destinazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if verification is required; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la verifica viene richiesta. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
      <summary vsli:raw="Indicates that a type or method is pure, that is, it does not make any visible state changes.">Indica che un tipo o un metodo è puro, ovvero non effettua modifiche visibili dello stato.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.PureAttribute&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.Diagnostics.Contracts.PureAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ContractHelper">
      <summary vsli:raw="Provides methods that the binary rewriter uses to handle contract failures.">Fornisce metodi usati dal rewriter binario per gestire gli errori di contratto.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Used by the binary rewriter to activate the default failure behavior.">Utilizzato dal rewriter binario per attivare il comportamento dell'errore predefinito.</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the type of failure.">Uno dei valori di enumerazione che specifica il tipo di errore.</param>
      <param name="userMessage" vsli:raw="Additional user information.">Informazioni utente aggiuntive.</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">Descrizione della condizione che ha causato l'errore.</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">Eccezione interna che ha causato l'eccezione corrente.</param>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) if the event was handled and should not trigger a failure; otherwise, returns the localized failure message.">Riferimento Null (<see langword="Nothing" /> in Visual Basic) se l'evento è stato gestito e non deve attivare un errore. In caso contrario, restituisce il messaggio di errore localizzato.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;failureKind&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractFailureKind&quot; /&gt; value.">
        <paramref name="failureKind" /> non è un valore valido di <see cref="T:System.Diagnostics.Contracts.ContractFailureKind" />.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
      <summary vsli:raw="Triggers the default failure behavior.">Attiva il comportamento dell'errore predefinito.</summary>
      <param name="kind" vsli:raw="One of the enumeration values that specifies the type of failure.">Uno dei valori di enumerazione che specifica il tipo di errore.</param>
      <param name="displayMessage" vsli:raw="The message to display.">Messaggio da visualizzare.</param>
      <param name="userMessage" vsli:raw="Additional user information.">Informazioni utente aggiuntive.</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">Descrizione della condizione che ha causato l'errore.</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">Eccezione interna che ha causato l'eccezione corrente.</param>
    </member>
  </members>
</doc>
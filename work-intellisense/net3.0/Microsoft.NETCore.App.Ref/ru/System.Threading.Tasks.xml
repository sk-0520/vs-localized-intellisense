<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks</name>
  </assembly>
  <members>
    <member name="T:System.OperationCanceledException">
      <summary>Исключение, которое создается в потоке при отмене операции, которая выполнялась в этом потоке.</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.OperationCanceledException" /> с системным сообщением об ошибке.</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.OperationCanceledException" /> с сериализованными данными.</summary>
      <param name="info">Объект, содержащий сериализованные данные объекта.</param>
      <param name="context">Контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.OperationCanceledException" /> с указанным сообщением об ошибке.</summary>
      <param name="message">Строка <see cref="T:System.String" />, описывающая ошибку.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.OperationCanceledException" /> указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее данное исключение.</summary>
      <param name="message">Сообщение об ошибке, указывающее причину создания исключения.</param>
      <param name="innerException">Исключение, которое является причиной текущего исключения. Если значение параметра <paramref name="innerException" /> не равно <see langword="null" />, текущее исключение сгенерировано в блоке <see langword="catch" />, обрабатывающем внутреннее исключение.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.OperationCanceledException" /> с заданным сообщением об ошибке, ссылкой на внутренней исключение, вызвавшее это исключение, и токен отмены.</summary>
      <param name="message">Сообщение об ошибке, указывающее причину создания исключения.</param>
      <param name="innerException">Исключение, которое является причиной текущего исключения. Если значение параметра <paramref name="innerException" /> не равно <see langword="null" />, текущее исключение сгенерировано в блоке <see langword="catch" />, обрабатывающем внутреннее исключение.</param>
      <param name="token">Токен отмены, связанный с отмененной операцией.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Threading.CancellationToken)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.OperationCanceledException" /> с заданным сообщением об ошибке и токеном отмены.</summary>
      <param name="message">Сообщение об ошибке, указывающее причину создания исключения.</param>
      <param name="token">Токен отмены, связанный с отмененной операцией.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Threading.CancellationToken)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.OperationCanceledException" /> с токеном отмены.</summary>
      <param name="token">Токен отмены, связанный с отмененной операцией.</param>
    </member>
    <member name="P:System.OperationCanceledException.CancellationToken">
      <summary>Получает токен, связанный с отмененной операцией.</summary>
      <returns>Токен, связанный с отмененной операцией, или токен по умолчанию.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder">
      <summary>Представляет конструктор для асинхронных итераторов.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Планирует конечный автомат для перехода к следующему действию по завершении выполнения указанного объекта типа awaiter.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Конечный автомат.</param>
      <typeparam name="TAwaiter">Тип объекта типа awaiter.</typeparam>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Планирует переход конечного автомата к следующему действию по завершении выполнения указанного объекта типа awaiter.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Конечный автомат.</param>
      <typeparam name="TAwaiter">Тип объекта типа awaiter.</typeparam>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Complete">
      <summary>Помечает итерацию как завершенную (успешно или неудачно).</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Create">
      <summary>Создает экземпляр структуры <see cref="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder" />.</summary>
      <returns>Инициализированный экземпляр.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.MoveNext``1(``0@)">
      <summary>Вызывает <see cref="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext" /> для конечного автомата с защитой <see cref="T:System.Threading.ExecutionContext" />.</summary>
      <param name="stateMachine">Экземпляр конечного автомата, переданный ссылкой.</param>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder">
      <summary>Представляет конструктор для асинхронных методов, возвращающих задачу.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Планирует конечный автомат для перехода к следующему действию по завершении выполнения указанного объекта типа awaiter.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Конечный автомат.</param>
      <typeparam name="TAwaiter">Тип объекта типа awaiter.</typeparam>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Планирует переход конечного автомата к следующему действию по завершении выполнения указанного объекта типа awaiter. Этот метод может вызываться из частично доверенного кода.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Конечный автомат.</param>
      <typeparam name="TAwaiter">Тип объекта типа awaiter.</typeparam>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Create">
      <summary>Создает экземпляр класса <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder" />.</summary>
      <returns>Новый экземпляр построителя.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)">
      <summary>Помечает задачу как сбойную и привязывает указанное исключение в задаче.</summary>
      <param name="exception">Исключение для привязки к задаче.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Задача уже завершена.  

или -  

 Построитель не инициализирован.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult">
      <summary>Отмечает задачу как успешно завершенную.</summary>
      <exception cref="T:System.InvalidOperationException">Задача уже завершена.  

или -  

 Построитель не инициализирован.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Связывает построитель с указанным конечным автоматом.</summary>
      <param name="stateMachine">Экземпляр конечного автомата, связываемый с построителем.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="stateMachine" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Конечный автомат был ранее установлен.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start``1(``0@)">
      <summary>Начинает выполнение построителя со связанным конечным автоматом.</summary>
      <param name="stateMachine">Экземпляр конечного автомата, переданный ссылкой.</param>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="stateMachine" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Task">
      <summary>Получает задачу для данного построителя.</summary>
      <returns>Задача для этого построителя.</returns>
      <exception cref="T:System.InvalidOperationException">Построитель не инициализирован.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1">
      <summary>Представляет построитель для асинхронных методов, который возвращает задачу и предоставляет параметр для результата.</summary>
      <typeparam name="TResult">Результат, используемый для выполнения задачи.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Планирует конечный автомат для перехода к следующему действию по завершении выполнения указанного объекта типа awaiter.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Конечный автомат.</param>
      <typeparam name="TAwaiter">Тип объекта типа awaiter.</typeparam>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Планирует переход конечного автомата к следующему действию по завершении выполнения указанного объекта типа awaiter. Этот метод может вызываться из частично доверенного кода.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Конечный автомат.</param>
      <typeparam name="TAwaiter">Тип объекта типа awaiter.</typeparam>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create">
      <summary>Создает экземпляр класса <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1" />.</summary>
      <returns>Новый экземпляр построителя.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
      <summary>Помечает задачу как сбойную и привязывает указанное исключение в задаче.</summary>
      <param name="exception">Исключение для привязки к задаче.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Задача уже завершена.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)">
      <summary>Отмечает задачу как успешно завершенную.</summary>
      <param name="result">Результат, используемый для выполнения задачи.</param>
      <exception cref="T:System.InvalidOperationException">Задача уже завершена.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Связывает построитель с указанным конечным автоматом.</summary>
      <param name="stateMachine">Экземпляр конечного автомата, связываемый с построителем.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="stateMachine" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Конечный автомат был ранее установлен.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)">
      <summary>Начинает выполнение построителя со связанным конечным автоматом.</summary>
      <param name="stateMachine">Экземпляр конечного автомата, переданный ссылкой.</param>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="stateMachine" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task">
      <summary>Получает задачу для данного построителя.</summary>
      <returns>Задача для этого построителя.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
      <summary>Представляет построитель для асинхронных методов, которые не возвращают значение.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Планирует конечный автомат для перехода к следующему действию по завершении выполнения указанного объекта типа awaiter.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Конечный автомат.</param>
      <typeparam name="TAwaiter">Тип объекта типа awaiter.</typeparam>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Планирует переход конечного автомата к следующему действию по завершении выполнения указанного объекта типа awaiter. Этот метод может вызываться из частично доверенного кода.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Конечный автомат.</param>
      <typeparam name="TAwaiter">Тип объекта типа awaiter.</typeparam>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
      <summary>Создает экземпляр класса <see cref="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder" />.</summary>
      <returns>Новый экземпляр построителя.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
      <summary>Привязывает исключение к построителю метода.</summary>
      <param name="exception">Исключение для привязки.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Построитель не инициализирован.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
      <summary>Помечает простроитель метода как успешно завершенный.</summary>
      <exception cref="T:System.InvalidOperationException">Построитель не инициализирован.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Связывает построитель с указанным конечным автоматом.</summary>
      <param name="stateMachine">Экземпляр конечного автомата, связываемый с построителем.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="stateMachine" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Конечный автомат был ранее установлен.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
      <summary>Начинает выполнение построителя со связанным конечным автоматом.</summary>
      <param name="stateMachine">Экземпляр конечного автомата, переданный ссылкой.</param>
      <typeparam name="TStateMachine">Тип конечного автомата.</typeparam>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="stateMachine" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable">
      <summary>Предоставляет тип, с помощью которого можно настраивать выполнение ожиданий для <see cref="T:System.IAsyncDisposable" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredAsyncDisposable.DisposeAsync">
      <summary>Асинхронно освобождает неуправляемые ресурсы, используемые классом <see cref="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable" />.</summary>
      <returns>Задача, представляющая асинхронную операцию закрытия.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1">
      <summary>Предоставляет асинхронное перечисление типа awaitable, которое обеспечивает допускающую отмену итерацию и настроенные ожидания.</summary>
      <typeparam name="T">Тип значений для перечисления.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)">
      <summary>Настраивает способ выполнения ожиданий для задач, возвращаемых из асинхронной итерации.</summary>
      <param name="continueOnCapturedContext">Значение <see langword="true" /> для захвата и маршалинга обратно в текущий контекст; в противном случае значение <see langword="false" />.</param>
      <returns>Настраиваемое перечисление.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator">
      <summary>Предоставляет асинхронный перечислитель типа awaitable, который обеспечивает допускающую отмену итерацию и настроенные ожидания.</summary>
      <typeparam name="T">Тип значений для перечисления.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.Current">
      <summary>Возвращает элемент коллекции, соответствующий текущей позиции перечислителя.</summary>
      <returns>Элемент коллекции, соответствующий текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.DisposeAsync">
      <summary>Выполняет определяемые приложением задачи, связанные с высвобождением или сбросом неуправляемых ресурсов асинхронно.</summary>
      <returns>Задача, представляющая асинхронную операцию закрытия.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.MoveNextAsync">
      <summary>Перемещает перечислитель к следующему элементу коллекции в асинхронном режиме.</summary>
      <returns>Задача <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" />, которая завершается с результатом <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу, или <see langword="false" />, если перечислитель достиг конца коллекции.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>Возвращает перечислитель, который выполняет асинхронный проход по коллекциям, включающим отменяемую итерацию и настроенные ожидания.</summary>
      <returns>Перечислитель для класса <see cref="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)">
      <summary>Задает токен <see cref="T:System.Threading.CancellationToken" />, который необходимо передать в <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> при итерации.</summary>
      <param name="cancellationToken">Токен отмены, который необходимо использовать.</param>
      <returns>Настраиваемое перечисление.</returns>
    </member>
    <member name="T:System.Threading.CancellationTokenSource">
      <summary>Отправляет токену <see cref="T:System.Threading.CancellationToken" /> сигнал отмены.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.CancellationTokenSource" />, который будет отменен после определенной задержка (в миллисекундах).</summary>
      <param name="millisecondsDelay">Интервал времени ожидания в миллисекундах перед отменой этого класса <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="millisecondsDelay" /> меньше -1.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.CancellationTokenSource" />, который будет отменен после определенного периода времени.</summary>
      <param name="delay">Интервал времени ожидания перед отменой этого класса <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" />.<see cref="P:System.TimeSpan.TotalMilliseconds" /> меньше –1 или больше <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel">
      <summary>Передает запрос на отмену.</summary>
      <exception cref="T:System.ObjectDisposedException">Данный объект <see cref="T:System.Threading.CancellationTokenSource" /> был удален.</exception>
      <exception cref="T:System.AggregateException">Статистическое исключение, содержащее все исключения, созданные зарегистрированными обратными вызовами на связанном <see cref="T:System.Threading.CancellationToken" />.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
      <summary>Передает запрос отмены и определяет, будут ли последующие обратные вызовы и отменяемые операции обрабатываться при возникновении исключения.</summary>
      <param name="throwOnFirstException">
        <see langword="true" />, если исключения нужно распространять немедленно; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.ObjectDisposedException">Данный объект <see cref="T:System.Threading.CancellationTokenSource" /> был удален.</exception>
      <exception cref="T:System.AggregateException">Статистическое исключение, содержащее все исключения, созданные зарегистрированными обратными вызовами на связанном <see cref="T:System.Threading.CancellationToken" />.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
      <summary>Планирует операции отмены для данного объекта <see cref="T:System.Threading.CancellationTokenSource" /> после указанного числа миллисекунд.</summary>
      <param name="millisecondsDelay">Интервал времени ожидания перед отменой этого объекта <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ObjectDisposedException">Исключение, возникающее, если этот объект <see cref="T:System.Threading.CancellationTokenSource" /> удален.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, если значение параметра <paramref name="millisecondsDelay" /> меньше -1.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
      <summary>Планирует операции отмены для данного объекта <see cref="T:System.Threading.CancellationTokenSource" /> после указанного промежутка времени.</summary>
      <param name="delay">Интервал времени ожидания перед отменой этого объекта <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ObjectDisposedException">Исключение, возникающее, если этот объект <see cref="T:System.Threading.CancellationTokenSource" /> удален.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Исключение, которое возникает, если <paramref name="delay" /> меньше -1 или больше Int32.MaxValue.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>Создает объект <see cref="T:System.Threading.CancellationTokenSource" />, который будет иметь отмененное состояние, если какой-либо из исходных токенов находится в отмененном состоянии.</summary>
      <param name="token1">Первый токен отмены, который следует контролировать.</param>
      <param name="token2">Второй токен отмены, который следует контролировать.</param>
      <returns>Объект <see cref="T:System.Threading.CancellationTokenSource" />, связанный с исходными токенами.</returns>
      <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Threading.CancellationTokenSource" />, связанный с одним исходным токеном, был удален.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
      <summary>Создает объект <see cref="T:System.Threading.CancellationTokenSource" />, который будет иметь отмененное состояние, если любой из исходных токенов в заданном массиве находится в отмененном состоянии.</summary>
      <param name="tokens">Массив, содержащий экземпляры токена отмены для наблюдения.</param>
      <returns>Объект <see cref="T:System.Threading.CancellationTokenSource" />, связанный с исходными токенами.</returns>
      <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Threading.CancellationTokenSource" />, связанный с одним исходным токеном, был удален.</exception>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="tokens" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="tokens" /> пуст.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose">
      <summary>Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые классом <see cref="T:System.Threading.CancellationTokenSource" /> (при необходимости освобождает и управляемые ресурсы).</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false" /> позволяет освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
      <summary>Получает значение, указывающее, есть ли для данного объекта <see cref="T:System.Threading.CancellationTokenSource" /> запрос на отмену.</summary>
      <returns>Значение <see langword="true" />, если для данного объекта <see cref="T:System.Threading.CancellationTokenSource" /> есть запрос на отмену; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.Token">
      <summary>Возвращает объект <see cref="T:System.Threading.CancellationToken" />, связанный с этим объектом <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
      <returns>Рабочая область метаданных <see cref="T:System.Threading.CancellationToken" />, связанная с этим соединением <see cref="T:System.Threading.CancellationTokenSource" />.</returns>
      <exception cref="T:System.ObjectDisposedException">Источник токена был удален.</exception>
    </member>
    <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair">
      <summary>Предоставляет планировщики задачи, которые координируются для выполнения задач, обеспечивая то, что параллельные задачи могут выполняться одновременно, а эксклюзивные задачи - нет.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />, предназначенный для указанного планировщика.</summary>
      <param name="taskScheduler">Целевой планировщик, на котором должна выполняться эта пара.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />, предназначенный для указанного планировщика с максимальным уровнем параллелизма.</summary>
      <param name="taskScheduler">Целевой планировщик, на котором должна выполняться эта пара.</param>
      <param name="maxConcurrencyLevel">Максимальное количество параллельно выполняемых задач.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />, предназначенный для указанного планировщика с максимальным уровнем параллелизма и максимальным количеством запланированных задач, которые могут обрабатываться как одна единица.</summary>
      <param name="taskScheduler">Целевой планировщик, на котором должна выполняться эта пара.</param>
      <param name="maxConcurrencyLevel">Максимальное количество параллельно выполняемых задач.</param>
      <param name="maxItemsPerTask">Максимальное число задач обработки для каждой базовой запланированной задачи, используемой парой.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete">
      <summary>Информирует пару планировщика, что она больше не должна принимать задачи.</summary>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion">
      <summary>Получает <see cref="T:System.Threading.Tasks.Task" />, который завершится, когда планировщик закончит обработку.</summary>
      <returns>Асинхронная операция, которая завершается при завершении обработки планировщиком.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler">
      <summary>Получает <see cref="T:System.Threading.Tasks.TaskScheduler" />, который можно использовать для планирования задач в этой паре, которая может выполняться параллельно с другими задачами на этой паре.</summary>
      <returns>Объект, который может использоваться для параллельного планирования заданий.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler">
      <summary>Получает <see cref="T:System.Threading.Tasks.TaskScheduler" />, который можно использовать для планирования задач в этой паре, которая должна выполняться исключительно с учетом других задач в этой паре.</summary>
      <returns>Объект, который можно использовать для планирования задач, не выполняющихся параллельно с другими задачами.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskAsyncEnumerableExtensions">
      <summary>Предоставляет набор статических методов для настройки задач, связанных с асинхронными перечислимыми и высвобождаемыми объектами.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait(System.IAsyncDisposable,System.Boolean)">
      <summary>Настраивает способ выполнения ожиданий для задач, возвращаемых из асинхронного высвобождаемого объекта.</summary>
      <param name="source">Высвобождаемый исходный асинхронный объект.</param>
      <param name="continueOnCapturedContext">Значение <see langword="true" /> для захвата и маршалинга обратно в текущий контекст; в противном случае значение <see langword="false" />.</param>
      <returns>Настроенный асинхронный высвобождаемый объект.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean)">
      <summary>Настраивает способ выполнения ожиданий для задач, возвращаемых из асинхронной итерации.</summary>
      <param name="source">Исходный перечисляемый объект для перебора.</param>
      <param name="continueOnCapturedContext">Значение <see langword="true" /> для захвата и маршалинга обратно в текущий контекст; в противном случае значение <see langword="false" />.</param>
      <typeparam name="T">Тип объектов для итерации.</typeparam>
      <returns>Настраиваемое перечисление.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
      <summary>Задает токен <see cref="T:System.Threading.CancellationToken" />, который необходимо передать в <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> при итерации.</summary>
      <param name="source">Исходный перечисляемый объект для перебора.</param>
      <param name="cancellationToken">Токен отмены, который необходимо использовать.</param>
      <typeparam name="T">Тип объектов для итерации.</typeparam>
      <returns>Настраиваемое перечисление.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCanceledException">
      <summary>Представляет исключение, используемое для передачи отмены задачи.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskCanceledException" /> с системным сообщением, содержащим описание ошибки.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskCanceledException" /> с сериализованными данными.</summary>
      <param name="info">Объект, содержащий сериализованные данные объекта.</param>
      <param name="context">Контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskCanceledException" /> с использованием заданного сообщения, содержащего описание ошибки.</summary>
      <param name="message">Сообщение с описанием исключения. Код, вызывающий этот конструктор, должен обеспечить локализацию данной строки в соответствии с текущим языком и региональными параметрами системы.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskCanceledException" /> указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее данное исключение.</summary>
      <param name="message">Сообщение с описанием исключения. Код, вызывающий этот конструктор, должен обеспечить локализацию данной строки в соответствии с текущим языком и региональными параметрами системы.</param>
      <param name="innerException">Исключение, которое является причиной текущего исключения. Если значение параметра <paramref name="innerException" /> не равно <see langword="null" />, текущее исключение сгенерировано в блоке <see langword="catch" />, обрабатывающем внутреннее исключение.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskCanceledException" /> с заданным сообщением об ошибке, ссылкой на внутренней исключение, вызвавшее это исключение, и токен <see cref="T:System.Threading.CancellationToken" />, инициировавший отмену.</summary>
      <param name="message">Сообщение об ошибке, указывающее причину создания исключения.</param>
      <param name="innerException">Исключение, которое является причиной текущего исключения.</param>
      <param name="token">Токен отмены, который инициировал отмену.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Threading.Tasks.Task)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskCanceledException" /> со ссылкой на отмененную задачу <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <param name="task">Отмененная задача.</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskCanceledException.Task">
      <summary>Получает задачу, связанную с данным исключением.</summary>
      <returns>Ссылка на задачу <see cref="T:System.Threading.Tasks.Task" />, связанную с этим исключением.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCompletionSource`1">
      <summary>Представляет сторону производителя задач <see cref="T:System.Threading.Tasks.Task`1" />, не привязанных к делегату и предоставляющих доступ к потребительской стороне через свойство <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />.</summary>
      <typeparam name="TResult">Тип результирующего значения, связанного с этим <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> с указанным состоянием.</summary>
      <param name="state">Состояние, используемое в качестве состояния AsyncState базового объекта <see cref="T:System.Threading.Tasks.Task`1" />.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> с заданным состоянием и параметрами.</summary>
      <param name="state">Состояние, используемое в качестве состояния AsyncState базового объекта <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <param name="creationOptions">Параметры, используемые при создании базовых задач <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> представляет параметры, недопустимые для использования с <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
      <summary>Создает объект <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> с заданными параметрами.</summary>
      <param name="creationOptions">Параметры, используемые при создании базовых задач <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> представляет параметры, недопустимые для использования с <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
      <summary>Переводит базовый объект <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</summary>
      <exception cref="T:System.InvalidOperationException">Базовая <see cref="T:System.Threading.Tasks.Task`1" /> уже находится в одном из трех конечных состояний: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />,  <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> или <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />, если базовая <see cref="T:System.Threading.Tasks.Task`1" /> уже была удалена.</exception>
      <exception cref="T:System.ObjectDisposedException">Элемент <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> удален.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Переводит базовый объект <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> и привязывает к нему коллекцию объектов исключений.</summary>
      <param name="exceptions">Коллекция исключений для привязки к данному объекту <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">Элемент <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="exceptions" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exceptions" /> включает один или несколько элементов со значением null.</exception>
      <exception cref="T:System.InvalidOperationException">Базовый элемент <see cref="T:System.Threading.Tasks.Task`1" /> уже находится в одном из трех конечных состояний: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> или <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
      <summary>Переводит базовый объект <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> и привязывает его к определенному исключению.</summary>
      <param name="exception">Выражение для привязки к данному <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">Элемент <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="exception" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Базовый элемент <see cref="T:System.Threading.Tasks.Task`1" /> уже находится в одном из трех конечных состояний: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> или <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
      <summary>Переводит базовый объект <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.</summary>
      <param name="result">Итоговое значение для привязки к данному <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">Элемент <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> удален.</exception>
      <exception cref="T:System.InvalidOperationException">Базовый элемент <see cref="T:System.Threading.Tasks.Task`1" /> уже находится в одном из трех конечных состояний: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> или <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
      <summary>Получает объект <see cref="T:System.Threading.Tasks.Task`1" />, созданный данным объектом <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
      <returns>Возвращает объект <see cref="T:System.Threading.Tasks.Task`1" />, созданный данным объектом <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
      <summary>Пытается перевести базовый объект <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</summary>
      <returns>Значение true, если операция завершилась успешно; значение false, если не удалось завершить операцию или объект уже был удален.</returns>
      <exception cref="T:System.ObjectDisposedException">Элемент <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> удален.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
      <summary>Пытается перевести базовый объект <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> и позволяет хранить токен отмены в задаче отмены.</summary>
      <param name="cancellationToken">Токен отмены.</param>
      <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Пытается перевести базовый <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> и привязывает к нему коллекцию объектов исключений.</summary>
      <param name="exceptions">Коллекция исключений для привязки к данному объекту <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <returns>Значение true, если операция выполнена успешно; в противном случае — значение false.</returns>
      <exception cref="T:System.ObjectDisposedException">Элемент <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="exceptions" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="exceptions" /> включает один или несколько элементов со значением null.  

или - 
Коллекция <paramref name="exceptions" /> пуста.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
      <summary>Пытается перевести базовый элемент <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> и привязывает его к определенному исключению.</summary>
      <param name="exception">Выражение для привязки к данному <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <returns>Значение true, если операция выполнена успешно; в противном случае — значение false.</returns>
      <exception cref="T:System.ObjectDisposedException">Элемент <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> удален.</exception>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="exception" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
      <summary>Пытается перевести базовый объект <see cref="T:System.Threading.Tasks.Task`1" /> в состояние <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.</summary>
      <param name="result">Итоговое значение для привязки к данному <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <returns>Значение true, если операция выполнена успешно; в противном случае — значение false.</returns>
      <exception cref="T:System.ObjectDisposedException">Элемент <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> удален.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>Предоставляет набор статических методов (Shared в Visual Basic) для работы с определенными типами экземпляров <see cref="T:System.Threading.Tasks.Task" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>Создает прокси-объект <see cref="T:System.Threading.Tasks.Task" />, представляющий асинхронную операцию задачи <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />.</summary>
      <param name="task">
        <see langword="Task&lt;Task&gt;" /> (C#) или <see langword="Task (Of Task)" /> (Visual Basic) для извлечения из оболочки.</param>
      <returns>Задача, представляющая асинхронную операцию предоставленной задачи <see langword="System.Threading.Tasks.Task(Of Task)" />.</returns>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, если аргумент <paramref name="task" /> равен null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>Создает прокси-объект <see cref="T:System.Threading.Tasks.Task" />, представляющий асинхронную операцию задачи <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) или <see langword="Task (Of Task(Of T))" /> (Visual Basic).</summary>
      <param name="task">
        <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) или <see langword="Task (Of Task(Of T))" /> (Visual Basic) для извлечения из оболочки.</param>
      <typeparam name="TResult">Тип результата задачи.</typeparam>
      <returns>Задача <see cref="T:System.Threading.Tasks.Task" />, представляющая асинхронную операцию предоставленной задачи <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) или <see langword="Task (Of Task(Of T))" /> (Visual Basic).</returns>
      <exception cref="T:System.ArgumentNullException">Исключение, которое возникает, если аргумент <paramref name="task" /> равен null.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskSchedulerException">
      <summary>Представляет исключение, используемое для передачи недопустимой операции планировщиком <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> с системным сообщением, содержащим описание ошибки.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Exception)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> с сообщением об ошибке по умолчанию и ссылкой на внутреннее исключение, вызвавшее данное исключение.</summary>
      <param name="innerException">Исключение, которое является причиной текущего исключения.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> с сериализованными данными.</summary>
      <param name="info">Объект, содержащий сериализованные данные объекта.</param>
      <param name="context">Контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> с использованием заданного сообщения, содержащего описание ошибки.</summary>
      <param name="message">Сообщение с описанием исключения. Код, вызывающий этот конструктор, должен обеспечить локализацию данной строки в соответствии с текущим языком и региональными параметрами системы.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее данное исключение.</summary>
      <param name="message">Сообщение с описанием исключения. Код, вызывающий этот конструктор, должен обеспечить локализацию данной строки в соответствии с текущим языком и региональными параметрами системы.</param>
      <param name="innerException">Исключение, которое является причиной текущего исключения. Если значение параметра <paramref name="innerException" /> не равно <see langword="null" />, текущее исключение сгенерировано в блоке <see langword="catch" />, обрабатывающем внутреннее исключение.</param>
    </member>
  </members>
</doc>
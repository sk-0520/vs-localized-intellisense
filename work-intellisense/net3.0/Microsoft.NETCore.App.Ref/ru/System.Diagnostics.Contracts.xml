<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.Contracts</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.Contracts.Contract">
      <summary vsli:raw="Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.">Содержит статические методы для представления контрактов программы, таких как предусловие, постусловие и инвариантность объектов.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set for the analyzer.">Проверяет условие; если условие имеет значение <see langword="false" />, следует политике эскалации, установленной для анализатора.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Условное выражение, которое требуется протестировать.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set by the analyzer and displays the specified message.">Проверяет условие; если условие имеет значение <see langword="false" />, следует политике эскалации, установленной анализатором, и отображает указанное сообщение.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Условное выражение, которое требуется протестировать.</param>
      <param name="userMessage" vsli:raw="A message to display if the condition is not met.">Сообщение, отображаемое при несоответствии условия.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
      <summary vsli:raw="Instructs code analysis tools to assume that the specified condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;.">Инструктирует инструменты анализа кода полагать, что указанным условием является <see langword="true" />, даже если статически невозможно подтвердить постоянное значение <see langword="true" />.</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">Предполагаемое условное выражение <see langword="true" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
      <summary vsli:raw="Instructs code analysis tools to assume that a condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;, and displays a message if the assumption fails.">Инструктирует инструменты анализа кода полагать, что условием является <see langword="true" />, даже если статически невозможно подтвердить постоянное значение <see langword="true" />, и отображает сообщение, если предположение было ошибочным.</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">Предполагаемое условное выражение <see langword="true" />.</param>
      <param name="userMessage" vsli:raw="The message to post if the assumption fails.">Сообщение, создаваемое при ошибочном предположении.</param>
    </member>
    <member name="E:System.Diagnostics.Contracts.Contract.ContractFailed">
      <summary vsli:raw="Occurs when a contract fails.">Происходит, когда контракт не выполняется.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
      <summary vsli:raw="Marks the end of the contract section when a method's contracts contain only preconditions in the &lt;see langword=&quot;if&quot; /&gt;-&lt;see langword=&quot;then&quot; /&gt;-&lt;see langword=&quot;throw&quot; /&gt; form.">Помечает конец раздела контракта, когда контракты метода содержат только предусловия вида <see langword="if" />-<see langword="then" />-<see langword="throw" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property.">Указывает контракт постусловия для включающего метода или свойства.</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">Условное выражение, которое требуется протестировать. Выражение может включать значения <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" />, <see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" /> и <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract for a provided exit condition and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Указывает контракт постусловия для предоставленного выходного условия и сообщение, отображаемое, если условие имеет значение <see langword="false" />.</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">Условное выражение, которое требуется протестировать. Выражение может включать значения <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /> и <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" />.</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is not &lt;see langword=&quot;true&quot; /&gt;.">Сообщение, отображаемое в том случае, если выражение не является <see langword="true" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.">Задает контракт постусловия для включающего метода или свойства на основе предоставленных исключения и состояния.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Условное выражение, которое требуется протестировать.</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">Тип исключения, вызвавшего проверку постусловия.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt; for the enclosing method or property, based on the provided exception and condition.">Задает контракт постусловия и сообщение, которое необходимо отобразить, если условие имеет значение <see langword="false" />, для включающего метода или свойства на основе предоставленных исключения и условия.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Условное выражение, которое требуется протестировать.</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is &lt;see langword=&quot;false&quot; /&gt;.">Отображаемое сообщение при выражении <see langword="false" />.</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">Тип исключения, вызвавшего проверку постусловия.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a specified test is true for any integer within a range of integers.">Определяет, удовлетворяет ли проверке какое-либо целое число в диапазоне целых чисел.</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Первое целое число для передачи в <paramref name="predicate" />.</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Последнее целое число для передачи в <paramref name="predicate" /> плюс один.</param>
      <param name="predicate" vsli:raw="The function to evaluate for any value of the integer in the specified range.">Функция, оцениваемая на предмет любого значения целого числа в указанном диапазоне.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any integer starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">Значение <see langword="true" />, если <paramref name="predicate" /> возвращает <see langword="true" /> для любого целого числа, начиная от <paramref name="fromInclusive" /> до <paramref name="toExclusive" /> минус один.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">Значение <paramref name="toExclusive" /> меньше <paramref name="fromInclusive" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether an element within a collection of elements exists within a function.">Определяет, существует ли в рамках функции элемент в указанной коллекции элементов.</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Коллекция, из которой будут извлекаться элементы типа <c>T</c> для передачи в <paramref name="predicate" />.</param>
      <param name="predicate" vsli:raw="The function to evaluate for an element in &lt;paramref name=&quot;collection&quot; /&gt;.">Функция, оцениваемая на предмет элемента, содержащегося в параметре <paramref name="collection" />.</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">Тип, содержащийся в <paramref name="collection" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any element of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">Значение <see langword="true" />, если и только если <paramref name="predicate" /> возвращает значение <see langword="true" /> для любого из элементов типа <paramref name="T" />, содержащихся в параметре <paramref name="collection" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Значение параметра <paramref name="collection" /> или <paramref name="predicate" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a particular condition is valid for all integers in a specified range.">Определяет, выполняется ли определенное условие для всех целых чисел в указанном диапазоне.</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Первое целое число для передачи в <paramref name="predicate" />.</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Последнее целое число для передачи в <paramref name="predicate" /> плюс один.</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of the integers in the specified range.">Функция, оцениваемая, чтобы установить существование целых чисел в указанном диапазоне.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all integers starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">Значение <see langword="true" />, если <paramref name="predicate" /> возвращает <see langword="true" /> для всех целых чисел, начиная от <paramref name="fromInclusive" /> до <paramref name="toExclusive" /> минус один.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Свойство <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">Значение <paramref name="toExclusive" /> меньше <paramref name="fromInclusive" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether all the elements in a collection exist within a function.">Определяет, существуют ли в рамках функции все элементы в коллекции.</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Коллекция, из которой будут извлекаться элементы типа <c>T</c> для передачи в <paramref name="predicate" />.</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of all the elements in &lt;paramref name=&quot;collection&quot; /&gt;.">Функция, оцениваемая на предмет наличия всех элементов, содержащихся в параметре <paramref name="collection" />.</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">Тип, содержащийся в <paramref name="collection" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all elements of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">Значение <see langword="true" />, если и только если <paramref name="predicate" /> возвращает значение <see langword="true" /> для всех элементов типа <paramref name="T" />, содержащихся в параметре <paramref name="collection" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Параметр <paramref name="collection" /> или <paramref name="predicate" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property.">Задает инвариантный контракт ля включающего метода или свойства.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Условное выражение, которое требуется протестировать.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.">Указывает инвариантный контракт для включающего метода или свойства и отображает сообщение, если условие для контракта не выполняется.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Условное выражение, которое требуется протестировать.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Отображаемое сообщение при условии <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
      <summary vsli:raw="Represents values as they were at the start of a method or property.">Представляет значения, какими они были в начале метода или свойства.</summary>
      <param name="value" vsli:raw="The value to represent (field or parameter).">Представляемое значение (поле или параметр).</param>
      <typeparam name="T" vsli:raw="The type of value.">Тип значения.</typeparam>
      <returns vsli:raw="The value of the parameter or field at the start of a method or property.">Значение параметра или поля при запуске метода или свойства.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property.">Указывает контракт предусловия для включающего метода или свойства.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Условное выражение, которое требуется протестировать.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.">Указывает контракт предусловия для включающего метода или свойства и отображает сообщение, если условие для контракта не выполняется.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Условное выражение, которое требуется протестировать.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Отображаемое сообщение при условии <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.">Указывает контракт предусловия для включающего метода или свойства и выдает исключение, если условие для контракта не выполняется.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Условное выражение, которое требуется протестировать.</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Выдаваемое исключение при условии <see langword="false" />.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.">Задает контракт предусловия для включающего метода или свойства и создает исключение с предоставленным сообщением, если условие для контракта не выполняется.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">Условное выражение, которое требуется протестировать.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Отображаемое сообщение при условии <see langword="false" />.</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Выдаваемое исключение при условии <see langword="false" />.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
      <summary vsli:raw="Represents the return value of a method or property.">Представляет возвращаемое значение метода или свойства.</summary>
      <typeparam name="T" vsli:raw="Type of return value of the enclosing method or property.">Тип возвращаемого значения включающего метода или свойства.</typeparam>
      <returns vsli:raw="Return value of the enclosing method or property.">Возвращаемое значение включающего метода или свойства.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
      <summary vsli:raw="Represents the final (output) value of an &lt;see langword=&quot;out&quot; /&gt; parameter when returning from a method.">Представляет итоговое (выходное) значение параметра <see langword="out" /> по возвращении из метода.</summary>
      <param name="value" vsli:raw="The &lt;see langword=&quot;out&quot; /&gt; parameter.">Параметр <see langword="out" />.</param>
      <typeparam name="T" vsli:raw="The type of the &lt;see langword=&quot;out&quot; /&gt; parameter.">Тип параметра <see langword="out" />.</typeparam>
      <returns vsli:raw="The output value of the &lt;see langword=&quot;out&quot; /&gt; parameter.">Выходное значение параметра <see langword="out" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
      <summary vsli:raw="Defines abbreviations that you can use in place of the full contract syntax.">Определяет аббревиатуры, которые можно использовать вместо полного синтаксиса контракта.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
      <summary vsli:raw="Enables the factoring of legacy &lt;see langword=&quot;if-then-throw&quot; /&gt; code into separate methods for reuse, and provides full control over thrown exceptions and arguments.">Включает факторизацию устаревшего кода <see langword="if-then-throw" /> в отдельные методы для многократного использования, и обеспечивает полный контроль над выброшенными исключениями и аргументами.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
      <summary vsli:raw="Specifies that a separate type contains the code contracts for this type.">Указывает, что отдельный тип содержит контракты кода для этого типа.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute" />.</summary>
      <param name="typeContainingContracts" vsli:raw="The type that contains the code contracts for this type.">Тип, содержащий контракты кода для этого типа.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
      <summary vsli:raw="Gets the type that contains the code contracts for this type.">Получает тип, содержащий контракты кода для этого типа.</summary>
      <returns vsli:raw="The type that contains the code contracts for this type.">Тип, содержащий контракты кода для этого типа.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
      <summary vsli:raw="Specifies that a class is a contract for a type.">Указывает, что класс является контрактом для типа.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassForAttribute&quot; /&gt; class, specifying the type the current class is a contract for.">Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute" /> с заданием типа, для которого текущий класс является контрактом.</summary>
      <param name="typeContractsAreFor" vsli:raw="The type the current class is a contract for.">Тип, для которого текущий класс является контрактом.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
      <summary vsli:raw="Gets the type that this code contract applies to.">Получает тип, к которому применяется этот контракт кода.</summary>
      <returns vsli:raw="The type that this contract applies to.">Тип, к которому применяется этот контракт.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailedEventArgs">
      <summary vsli:raw="Provides methods and data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Предоставляет методы и данные для события <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Предоставляет данные для события <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the contract that failed.">Одно из значений перечисления, указывающее контракт, вызвавший сбой.</param>
      <param name="message" vsli:raw="The message for the event.">Сообщение для события.</param>
      <param name="condition" vsli:raw="The condition for the event.">Условие события.</param>
      <param name="originalException" vsli:raw="The exception that caused the event.">Исключение, которое вызвало событие.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition">
      <summary vsli:raw="Gets the condition for the failure of the contract.">Получает условие сбоя контракта.</summary>
      <returns vsli:raw="The condition for the failure.">Условие сбоя.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind">
      <summary vsli:raw="Gets the type of contract that failed.">Получает тип контракта, вызвавшего сбой.</summary>
      <returns vsli:raw="One of the enumeration values that specifies the type of contract that failed.">Одно из значений перечисления, указывающее тип контракта, вызвавшего сбой.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event has been handled.">Указывает, обработано ли событие <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если событие обработано; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message">
      <summary vsli:raw="Gets the message that describes the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Получает сообщение, описывающее событие <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <returns vsli:raw="The message that describes the event.">Сообщение, описывающее событие.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException">
      <summary vsli:raw="Gets the original exception that caused the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Получает исходное исключение, вызвавшее событие <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <returns vsli:raw="The exception that caused the event.">Исключение, которое вызвало событие.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">Задает для свойства <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled" /> значение <see langword="true" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">Задает для свойства <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind" /> значение <see langword="true" />.</summary>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind">
      <summary vsli:raw="Indicates whether the code contract escalation policy should be applied.">Указывает, должна ли применяться политика эскалации контракта кода.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to apply the escalation policy; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если политика эскалации должна применяться; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
      <summary vsli:raw="Specifies the type of contract that failed.">Указывает тип контракта, вызвавшего сбой.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assert&quot; /&gt; contract failed.">Контракт <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert" /> вызвал сбой.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assume&quot; /&gt; contract failed.">Контракт <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume" /> вызвал сбой.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Invariant&quot; /&gt; contract failed.">Контракт <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant" /> вызвал сбой.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Ensures&quot; /&gt; contract failed.">Контракт <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures" /> вызвал сбой.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow&quot; /&gt; contract failed.">Контракт <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow" /> вызвал сбой.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
      <summary vsli:raw="A &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Requires&quot; /&gt; contract failed.">Контракт <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires" /> вызвал сбой.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
      <summary vsli:raw="Marks a method as being the invariant method for a class.">Помечает метод как инвариантный метод для класса.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
      <summary vsli:raw="Enables you to set contract and tool options at assembly, type, or method granularity.">Позволяет задавать параметры контракта и средств на уровне сборки, типа или метода.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and enable/disable value.">Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" />, используя предоставленную категорию, настройку и значение включения/отключения.</summary>
      <param name="category" vsli:raw="The category for the option to be set.">Категория для задаваемого параметра.</param>
      <param name="setting" vsli:raw="The option setting.">Настройка параметра.</param>
      <param name="enabled" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enable the option; &lt;see langword=&quot;false&quot; /&gt; to disable the option.">Значение <see langword="true" />, чтобы включить параметр; значение <see langword="false" />, чтобы отключить параметр.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and value.">Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" />, используя предоставленную категорию, настройку и значение.</summary>
      <param name="category" vsli:raw="The category of the option to be set.">Категория задаваемого параметра.</param>
      <param name="setting" vsli:raw="The option setting.">Настройка параметра.</param>
      <param name="value" vsli:raw="The value for the setting.">Значение параметра.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Category">
      <summary vsli:raw="Gets the category of the option.">Получает категорию параметра.</summary>
      <returns vsli:raw="The category of the option.">Категория параметра.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Enabled">
      <summary vsli:raw="Determines if an option is enabled.">Определяет, включен ли параметр.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the option is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если параметр включен; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Setting">
      <summary vsli:raw="Gets the setting for the option.">Получает настройку для параметра.</summary>
      <returns vsli:raw="The setting for the option.">Настройка для параметра.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Value">
      <summary vsli:raw="Gets the value for the option.">Получает значение для параметра.</summary>
      <returns vsli:raw="The value for the option.">Значение для параметра.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
      <summary vsli:raw="Specifies that a field can be used in method contracts when the field has less visibility than the method.">Указывает, что поле может использоваться в контрактах методов, если видимость поля меньше, чем видимость метода.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute" />.</summary>
      <param name="name" vsli:raw="The property name to apply to the field.">Имя применяемого к полю свойства.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the property name to be applied to the field.">Получает имя свойства, применяемого к полю.</summary>
      <returns vsli:raw="The property name to be applied to the field.">Имя свойства, которое следует применить к полю.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
      <summary vsli:raw="Specifies that an assembly is a reference assembly that contains contracts.">Указывает на то, что сборка является ссылочной сборкой, которая содержит контракты.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
      <summary vsli:raw="Identifies a member that has no run-time behavior.">Определяет член, для которого нет поведения во время выполнения.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
      <summary vsli:raw="Instructs analysis tools to assume the correctness of an assembly, type, or member without performing static verification.">Указывает, что средствам анализа следует принимать правильность сборки, типа или члена без выполнения статической проверки.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractVerificationAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute" />.</summary>
      <param name="value" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to require verification; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для запроса проверки; в противном случае — значение <see langword="false" />.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
      <summary vsli:raw="Gets the value that indicates whether to verify the contract of the target.">Получает значение, определяющее, следует ли проверять контракт целевого объекта.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if verification is required; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если проверка необходима; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
      <summary vsli:raw="Indicates that a type or method is pure, that is, it does not make any visible state changes.">Указывает на то, что тип или метод являются чистыми, т. е. не вносят каких-либо видимых изменений в состояние.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.PureAttribute&quot; /&gt; class.">Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Contracts.PureAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ContractHelper">
      <summary vsli:raw="Provides methods that the binary rewriter uses to handle contract failures.">Предоставляет методы, которые двоичный метод перезаписи использует для обработки сбоев контракта.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Used by the binary rewriter to activate the default failure behavior.">Используется двоичным методом перезаписи для активации поведения при сбоях по умолчанию.</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the type of failure.">Одно из значений перечисления, определяющее тип сбоя.</param>
      <param name="userMessage" vsli:raw="Additional user information.">Дополнительные сведения о пользователе.</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">Описание условия, вызвавшего сбой.</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">Внутреннее исключение, вызвавшее текущее исключение.</param>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) if the event was handled and should not trigger a failure; otherwise, returns the localized failure message.">Пустая ссылка (<see langword="Nothing" /> в Visual Basic), если событие было обработано и не должно спровоцировать сбой; в противном случае возвращает локализованное сообщение об ошибке.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;failureKind&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractFailureKind&quot; /&gt; value.">
        <paramref name="failureKind" /> не является допустимым значением <see cref="T:System.Diagnostics.Contracts.ContractFailureKind" />.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
      <summary vsli:raw="Triggers the default failure behavior.">Активирует поведение при сбоях по умолчанию.</summary>
      <param name="kind" vsli:raw="One of the enumeration values that specifies the type of failure.">Одно из значений перечисления, определяющее тип сбоя.</param>
      <param name="displayMessage" vsli:raw="The message to display.">Отображаемое сообщение.</param>
      <param name="userMessage" vsli:raw="Additional user information.">Дополнительные сведения о пользователе.</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">Описание условия, вызвавшего сбой.</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">Внутреннее исключение, вызвавшее текущее исключение.</param>
    </member>
  </members>
</doc>
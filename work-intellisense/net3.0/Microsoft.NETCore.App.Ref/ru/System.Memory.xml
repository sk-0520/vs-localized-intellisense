<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Memory</name>
  </assembly>
  <members>
    <member name="T:System.Buffers.ArrayBufferWriter`1">
      <summary vsli:raw="Represents a heap-based, array-backed output sink into which &lt;typeparamref name=&quot;T&quot; /&gt; data can be written.">Представляет приемник выходных данных на основе кучи с резервным массивом, в который <typeparam name="T" /> можно записать данные.</summary>
      <typeparam name="T" vsli:raw="The type of the items in this &lt;see cref=&quot;T:System.Buffers.ArrayBufferWriter`1&quot; /&gt; instance.">Тип элементов в этом <see cref="T:System.Buffers.ArrayBufferWriter`1" /> экземпляре.</typeparam>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor">
      <summary vsli:raw="Creates an instance of an &lt;see cref=&quot;T:System.Buffers.ArrayBufferWriter`1&quot; /&gt; to which data can be written, with the default initial capacity.">Создает экземпляр <see cref="T:System.Buffers.ArrayBufferWriter`1" />, в который можно записать данные, с исходной емкостью по умолчанию.</summary>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor(System.Int32)">
      <summary vsli:raw="Creates an instance of an &lt;see cref=&quot;T:System.Buffers.ArrayBufferWriter`1&quot; /&gt; to which data can be written, with a specified initial capacity.">Создает экземпляр <see cref="T:System.Buffers.ArrayBufferWriter`1" />, в который можно записать данные, с указанной исходной емкостью.</summary>
      <param name="initialCapacity" vsli:raw="The minimum capacity with which to initialize the underlying buffer.">Минимальная емкость, с которой инициализируется базовый буфер.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;initialCapacity&quot; /&gt; is less than or equal to 0.">
        <paramref name="initialCapacity" /> меньше или равно 0.</exception>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.Advance(System.Int32)">
      <summary vsli:raw="Notifies the &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; that &lt;paramref name=&quot;count&quot; /&gt; items were written to the output &lt;see cref=&quot;T:System.Span`1&quot; /&gt;/&lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">Уведомляет <see cref="T:System.Buffers.IBufferWriter`1" /> о том, что элементы <paramref name="count" /> были записаны в выходной объект <see cref="T:System.Span`1" />/<see cref="T:System.Memory`1" />.</summary>
      <param name="count" vsli:raw="The number of items written.">Число записанных элементов.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is negative.">
        <paramref name="count" /> является отрицательным значением.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method call attempts to advance past the end of the underlying buffer.">Вызов метода пытается выйти за пределы базового буфера.</exception>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.Capacity">
      <summary vsli:raw="Gets the total amount of space within the underlying buffer.">Возвращает общий объем места в базовом буфере.</summary>
      <returns vsli:raw="The total capacity of the underlying buffer.">Общая емкость базового буфера.</returns>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.Clear">
      <summary vsli:raw="Clears the data written to the underlying buffer.">Удаляет данные, записанные в базовый буфер.</summary>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.FreeCapacity">
      <summary vsli:raw="Gets the amount of available space that can be written to without forcing the underlying buffer to grow.">Возвращает объем доступного места, которое может заполняться данными без увеличения размера базового буфера.</summary>
      <returns vsli:raw="The space available for writing without forcing the underlying buffer to grow.">Пространство, доступное для записи, без принудительного увеличения размера базового буфера.</returns>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.GetMemory(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; to write to that is at least the length specified by &lt;paramref name=&quot;sizeHint&quot; /&gt;.">Возвращает <see cref="T:System.Memory`1" /> для записи данных с минимальной длиной, указанной в <paramref name="sizeHint" />.</summary>
      <param name="sizeHint" vsli:raw="The minimum requested length of the &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">Минимальная запрошенная длина <see cref="T:System.Memory`1" />.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; whose length is at least &lt;paramref name=&quot;sizeHint&quot; /&gt;.  If &lt;paramref name=&quot;sizeHint&quot; /&gt; is not provided or is equal to 0, some non-empty buffer is returned.">Объект <see cref="T:System.Memory`1" />, длина которого не менее <paramref name="sizeHint" />.  Если значение <paramref name="sizeHint" /> не указано или равно 0, возвращается непустой буфер.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sizeHint&quot; /&gt; is negative.">
        <paramref name="sizeHint" /> является отрицательным значением.</exception>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.GetSpan(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to write to that is at least a specified length.">Возвращает <see cref="T:System.Span`1" /> для записи данных с длиной не менее указанной.</summary>
      <param name="sizeHint" vsli:raw="The minimum requested length of the &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">Минимальная запрошенная длина <see cref="T:System.Span`1" />.</param>
      <returns vsli:raw="A span of at least &lt;paramref name=&quot;sizeHint&quot; /&gt; in length. If &lt;paramref name=&quot;sizeHint&quot; /&gt; is not provided or is equal to 0, some non-empty buffer is returned.">Диапазон длиной не менее <paramref name="sizeHint" />. Если значение <paramref name="sizeHint" /> не указано или равно 0, возвращается непустой буфер.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sizeHint&quot; /&gt; is negative.">
        <paramref name="sizeHint" /> является отрицательным значением.</exception>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenCount">
      <summary vsli:raw="Gets the amount of data written to the underlying buffer.">Возвращает объем данных, записанных в базовый буфер.</summary>
      <returns vsli:raw="The amount of data written to the underlying buffer.">Объем данных, записываемых в базовый буфер.</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenMemory">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; that contains the data written to the underlying buffer so far.">Возвращает объект <see cref="T:System.ReadOnlyMemory`1" />, который содержит данные, записанные в базовый буфер на данный момент.</summary>
      <returns vsli:raw="The data written to the underlying buffer.">Данные, записанные в базовый буфер.</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenSpan">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; that contains the data written to the underlying buffer so far.">Возвращает объект <see cref="T:System.ReadOnlySpan`1" />, который содержит данные, записанные в базовый буфер на данный момент.</summary>
      <returns vsli:raw="The data written to the underlying buffer.">Данные, записанные в базовый буфер.</returns>
    </member>
    <member name="T:System.Buffers.Binary.BinaryPrimitives">
      <summary vsli:raw="Reads bytes as primitives with specific endianness.">Считывает байты как примитивы с конкретным порядок следования байтов.</summary>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">Считывает объект <see cref="T:System.Int16" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span to read.">Доступный только для чтения диапазон для чтения.</param>
      <returns vsli:raw="The big endian value.">Значение с обратным порядком байтов.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">В <paramref name="source" /> не помещается <see cref="T:System.Int16" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">Считывает объект <see cref="T:System.Int16" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span to read.">Доступный только для чтения диапазон для чтения.</param>
      <returns vsli:raw="The little endian value.">Значение с прямым порядком байтов.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">В <paramref name="source" /> не помещается <see cref="T:System.Int16" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">Считывает объект <see cref="T:System.Int32" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span to read.">Доступный только для чтения диапазон для чтения.</param>
      <returns vsli:raw="The big endian value.">Значение с обратным порядком байтов.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">В <paramref name="source" /> не помещается <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">Считывает объект <see cref="T:System.Int32" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span to read.">Доступный только для чтения диапазон для чтения.</param>
      <returns vsli:raw="The little endian value.">Значение с прямым порядком байтов.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">В <paramref name="source" /> не помещается <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">Считывает объект <see cref="T:System.Int64" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span to read.">Доступный только для чтения диапазон для чтения.</param>
      <returns vsli:raw="The big endian value.">Значение с обратным порядком байтов.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">В <paramref name="source" /> не помещается <see cref="T:System.Int64" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">Считывает объект <see cref="T:System.Int64" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span to read.">Доступный только для чтения диапазон для чтения.</param>
      <returns vsli:raw="The little endian value.">Значение с прямым порядком байтов.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">В <paramref name="source" /> не помещается <see cref="T:System.Int64" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">Считывает объект <see cref="T:System.UInt16" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span to read.">Доступный только для чтения диапазон для чтения.</param>
      <returns vsli:raw="The big endian value.">Значение с обратным порядком байтов.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">В <paramref name="source" /> не помещается <see cref="T:System.UInt16" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">Считывает объект <see cref="T:System.UInt16" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span to read.">Доступный только для чтения диапазон для чтения.</param>
      <returns vsli:raw="The little endian value.">Значение с прямым порядком байтов.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">В <paramref name="source" /> не помещается <see cref="T:System.UInt16" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">Считывает объект <see cref="T:System.UInt32" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span to read.">Доступный только для чтения диапазон для чтения.</param>
      <returns vsli:raw="The big endian value.">Значение с обратным порядком байтов.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">В <paramref name="source" /> не помещается <see cref="T:System.UInt32" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">Считывает объект <see cref="T:System.UInt32" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <returns vsli:raw="The little endian value.">Значение с прямым порядком байтов.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">В <paramref name="source" /> не помещается <see cref="T:System.UInt32" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">Считывает объект <see cref="T:System.UInt64" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <returns vsli:raw="The big endian value.">Значение с обратным порядком байтов.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">В <paramref name="source" /> не помещается <see cref="T:System.UInt64" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">Считывает объект <see cref="T:System.UInt64" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <returns vsli:raw="The little endian value.">Значение с прямым порядком байтов.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">В <paramref name="source" /> не помещается <see cref="T:System.UInt64" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Byte)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Byte&quot; /&gt; value, which effectively does nothing for a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Изменяет значение примитива на обратное, изменяя порядок следования байтов указанного значения <see cref="T:System.Byte" />, что фактически никак не влияет на <see cref="T:System.Byte" />.</summary>
      <param name="value" vsli:raw="The value to reverse.">Обращаемое значение.</param>
      <returns vsli:raw="The passed-in value, unmodified.">Переданное значение, неизмененное.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int16)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Int16&quot; /&gt; value.">Изменяет значение примитива на обратное, изменяя порядок следования байтов указанного значения <see cref="T:System.Int16" />.</summary>
      <param name="value" vsli:raw="The value to reverse.">Обращаемое значение.</param>
      <returns vsli:raw="The reversed value.">Обращенное значение.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int32)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Int32&quot; /&gt; value.">Изменяет значение примитива на обратное, изменяя порядок следования байтов указанного значения <see cref="T:System.Int32" />.</summary>
      <param name="value" vsli:raw="The value to reverse.">Обращаемое значение.</param>
      <returns vsli:raw="The reversed value.">Обращенное значение.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int64)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.Int64&quot; /&gt; value.">Изменяет значение примитива на обратное, изменяя порядок следования байтов указанного значения <see cref="T:System.Int64" />.</summary>
      <param name="value" vsli:raw="The value to reverse.">Обращаемое значение.</param>
      <returns vsli:raw="The reversed value.">Обращенное значение.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.SByte)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.SByte&quot; /&gt; value, which effectively does nothing for an &lt;see cref=&quot;T:System.SByte&quot; /&gt;.">Изменяет значение примитива на обратное, изменяя порядок следования байтов указанного значения <see cref="T:System.SByte" />, что фактически никак не влияет на <see cref="T:System.SByte" />.</summary>
      <param name="value" vsli:raw="The value to reverse.">Обращаемое значение.</param>
      <returns vsli:raw="The passed-in value, unmodified.">Переданное значение, неизмененное.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt16)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.UInt16&quot; /&gt; value.">Изменяет значение примитива на обратное, изменяя порядок следования байтов указанного значения <see cref="T:System.UInt16" />.</summary>
      <param name="value" vsli:raw="The value to reverse.">Обращаемое значение.</param>
      <returns vsli:raw="The reversed value.">Обращенное значение.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt32)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.UInt32&quot; /&gt; value.">Изменяет значение примитива на обратное, изменяя порядок следования байтов указанного значения <see cref="T:System.UInt32" />.</summary>
      <param name="value" vsli:raw="The value to reverse.">Обращаемое значение.</param>
      <returns vsli:raw="The reversed value.">Обращенное значение.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt64)">
      <summary vsli:raw="Reverses a primitive value by performing an endianness swap of the specified &lt;see cref=&quot;T:System.UInt64&quot; /&gt; value.">Изменяет значение примитива на обратное, изменяя порядок следования байтов указанного значения <see cref="T:System.UInt64" />.</summary>
      <param name="value" vsli:raw="The value to reverse.">Обращаемое значение.</param>
      <returns vsli:raw="The reversed value.">Обращенное значение.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16BigEndian(System.ReadOnlySpan{System.Byte},System.Int16@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">Считывает объект <see cref="T:System.Int16" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с обратным порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.Int16@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">Считывает объект <see cref="T:System.Int16" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с прямым порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32BigEndian(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">Считывает объект <see cref="T:System.Int32" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с обратным порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">Считывает объект <see cref="T:System.Int32" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с прямым порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64BigEndian(System.ReadOnlySpan{System.Byte},System.Int64@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">Считывает объект <see cref="T:System.Int64" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с обратным порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.Int64@)">
      <summary vsli:raw="Reads an &lt;see cref=&quot;T:System.Int64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">Считывает объект <see cref="T:System.Int64" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с прямым порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16BigEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">Считывает объект <see cref="T:System.UInt16" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с обратным порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">Считывает объект <see cref="T:System.UInt16" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с прямым порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32BigEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">Считывает объект <see cref="T:System.UInt32" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с обратным порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">Считывает объект <see cref="T:System.UInt32" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с прямым порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64BigEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as big endian.">Считывает объект <see cref="T:System.UInt64" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as big endian.">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с обратным порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)">
      <summary vsli:raw="Reads a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; from the beginning of a read-only span of bytes, as little endian.">Считывает объект <see cref="T:System.UInt64" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source" vsli:raw="The read-only span of bytes to read.">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value" vsli:raw="When this method returns, contains the value read out of the read-only span of bytes, as little endian.">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с прямым порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16BigEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as big endian.">Записывает <see cref="T:System.Int16" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16LittleEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as little endian.">Записывает <see cref="T:System.Int16" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32BigEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as big endian.">Записывает <see cref="T:System.Int32" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32LittleEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as little endian.">Записывает <see cref="T:System.Int32" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64BigEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as big endian.">Записывает <see cref="T:System.Int64" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64LittleEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as little endian.">Записывает <see cref="T:System.Int64" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as big endian.">Записывает <see cref="T:System.UInt16" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as little endian.">Записывает <see cref="T:System.UInt16" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as big endian.">Записывает <see cref="T:System.UInt32" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as little endian.">Записывает <see cref="T:System.UInt32" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as big endian.">Записывает <see cref="T:System.UInt64" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as little endian.">Записывает <see cref="T:System.UInt64" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span is large enough to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16BigEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as big endian.">Записывает <see cref="T:System.Int16" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">В <paramref name="destination" /> не помещается <see cref="T:System.Int16" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16LittleEndian(System.Span{System.Byte},System.Int16)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int16&quot; /&gt; into a span of bytes, as little endian.">Записывает <see cref="T:System.Int16" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">В <paramref name="destination" /> не помещается <see cref="T:System.Int16" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32BigEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as big endian.">Записывает <see cref="T:System.Int32" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">В <paramref name="destination" /> не помещается <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32LittleEndian(System.Span{System.Byte},System.Int32)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int32&quot; /&gt; into a span of bytes, as little endian.">Записывает <see cref="T:System.Int32" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">В <paramref name="destination" /> не помещается <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64BigEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as big endian.">Записывает <see cref="T:System.Int64" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">В <paramref name="destination" /> не помещается <see cref="T:System.Int64" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64LittleEndian(System.Span{System.Byte},System.Int64)">
      <summary vsli:raw="Writes an &lt;see cref=&quot;T:System.Int64&quot; /&gt; into a span of bytes, as little endian.">Записывает <see cref="T:System.Int64" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">В <paramref name="destination" /> не помещается <see cref="T:System.Int64" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as big endian.">Записывает <see cref="T:System.UInt16" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">В <paramref name="destination" /> не помещается <see cref="T:System.UInt16" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; into a span of bytes, as little endian.">Записывает <see cref="T:System.UInt16" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">В <paramref name="destination" /> не помещается <see cref="T:System.UInt16" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as big endian.">Записывает <see cref="T:System.UInt32" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">В <paramref name="destination" /> не помещается <see cref="T:System.UInt32" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; into a span of bytes, as little endian.">Записывает <see cref="T:System.UInt32" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">В <paramref name="destination" /> не помещается <see cref="T:System.UInt32" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as big endian.">Записывает <see cref="T:System.UInt64" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as big endian.">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">В <paramref name="destination" /> не помещается <see cref="T:System.UInt64" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; into a span of bytes, as little endian.">Записывает <see cref="T:System.UInt64" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes where the value is to be written, as little endian.">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value" vsli:raw="The value to write into the span of bytes.">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain a &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">В <paramref name="destination" /> не помещается <see cref="T:System.UInt64" />.</exception>
    </member>
    <member name="T:System.Buffers.BuffersExtensions">
      <summary vsli:raw="Provides extension methods for &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Предоставляет методы расширения для <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.CopyTo``1(System.Buffers.ReadOnlySequence{``0},System.Span{``0})">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; to the specified &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">Копирует <see cref="T:System.Buffers.ReadOnlySequence`1" /> в указанный экземпляр <see cref="T:System.Span`1" />.</summary>
      <param name="source" vsli:raw="The source &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Источник <see cref="T:System.Buffers.ReadOnlySequence`1" />.</param>
      <param name="destination" vsli:raw="The destination &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">
        <see cref="T:System.Span`1" /> — объект назначения.</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Тип элементов в <see cref="T:System.Buffers.ReadOnlySequence`1" />.</typeparam>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.PositionOf``1(System.Buffers.ReadOnlySequence{``0},``0)">
      <summary vsli:raw="Returns the position of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Возвращает позицию первого вхождения <paramref name="item" /> в <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
      <param name="source" vsli:raw="The source &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Источник <see cref="T:System.Buffers.ReadOnlySequence`1" />.</param>
      <param name="value" vsli:raw="The item to find in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Элемент, который требуется найти в <see cref="T:System.Buffers.ReadOnlySequence`1" />.</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Тип элементов в <see cref="T:System.Buffers.ReadOnlySequence`1" />.</typeparam>
      <returns vsli:raw="An object whose &lt;see cref=&quot;M:System.SequencePosition.GetInteger&quot; /&gt; method returns the position of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt;, or an object whose &lt;see langword=&quot;Nullable&amp;lt;SequencePosition&amp;gt;.HasValue&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt; .">Объект, чей метод <see cref="M:System.SequencePosition.GetInteger" /> возвращает позицию первого вхождения <paramref name="item" />, или объект, чье свойство <see langword="Nullable&lt;SequencePosition&gt;.HasValue" /> имеет значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.ToArray``1(System.Buffers.ReadOnlySequence{``0})">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; to an array.">Преобразует <see cref="T:System.Buffers.ReadOnlySequence`1" /> в массив.</summary>
      <param name="sequence" vsli:raw="The read-only sequence to convert to an array.">Преобразование последовательности только для чтения в массив.</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Тип элементов в <see cref="T:System.Buffers.ReadOnlySequence`1" />.</typeparam>
      <returns vsli:raw="An array containing the data in the current read-only sequence.">Массив, содержащий данные в текущей последовательности только для чтения.</returns>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.Write``1(System.Buffers.IBufferWriter{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Writes the contents of &lt;paramref name=&quot;value&quot; /&gt; to &lt;paramref name=&quot;writer&quot; /&gt;.">Записывает содержимое <paramref name="value" /> в <paramref name="writer" />.</summary>
      <param name="writer" vsli:raw="The buffer writer to which to write &lt;paramref name=&quot;value&quot; /&gt;.">Средство записи в буфер, в которое необходимо записать <paramref name="value" />.</param>
      <param name="value" vsli:raw="The read-only span to be written to &lt;paramref name=&quot;writer&quot; /&gt;.">Доступный только для чтения объем для записи в <paramref name="writer" />.</param>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">Тип элементов в <see cref="T:System.ReadOnlySpan`1" />.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; is shorter than &lt;paramref name=&quot;value&quot; /&gt;.">Значение параметра <paramref name="writer" /> короче значения параметра <paramref name="value" />.</exception>
    </member>
    <member name="T:System.Buffers.IBufferWriter`1">
      <summary vsli:raw="Represents an output sink into which &lt;typeparamref name=&quot;T&quot; /&gt; data can be written.">Представляет приемник выходных данных, в который можно записать данные <typeparamref name="T" />.</summary>
      <typeparam name="T" vsli:raw="The type of the items in the &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt;.">Тип элементов в <see cref="T:System.Buffers.IBufferWriter`1" />.</typeparam>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.Advance(System.Int32)">
      <summary vsli:raw="Notifies the &lt;see cref=&quot;T:System.Buffers.IBufferWriter`1&quot; /&gt; that &lt;paramref name=&quot;count&quot; /&gt; data items were written to the output &lt;see cref=&quot;T:System.Span`1&quot; /&gt; or &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">Уведомляет <see cref="T:System.Buffers.IBufferWriter`1" /> о том, что элементы данных <paramref name="count" /> записаны в <see cref="T:System.Span`1" /> или <see cref="T:System.Memory`1" /> выходных данных.</summary>
      <param name="count" vsli:raw="The number of data items written to the &lt;see cref=&quot;T:System.Span`1&quot; /&gt; or &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;.">Число элементов данных, записанных в <see cref="T:System.Span`1" /> или <see cref="T:System.Memory`1" />.</param>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.GetMemory(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; to write to that is at least the requested size (specified by &lt;paramref name=&quot;sizeHint&quot; /&gt;).">Возвращает <see cref="T:System.Memory`1" /> для записи минимального запрошенного размера (определяется <paramref name="sizeHint" />).</summary>
      <param name="sizeHint" vsli:raw="The minimum length of the returned &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;. If 0, a non-empty buffer is returned.">Минимальная длина значения <see cref="T:System.Memory`1" />. Если значение равно 0, возвращается непустой буфер.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; of at least the size &lt;paramref name=&quot;sizeHint&quot; /&gt;. If &lt;paramref name=&quot;sizeHint&quot; /&gt; is 0, returns a non-empty buffer.">
        <see cref="T:System.Memory`1" /> с минимальным размером <paramref name="sizeHint" />. Если значение <paramref name="sizeHint" /> равно 0, возвращается непустой буфер.</returns>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The requested buffer size is not available.">Запрошенный размер буфера недоступен.</exception>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.GetSpan(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to write to that is at least the requested size (specified by &lt;paramref name=&quot;sizeHint&quot; /&gt;).">Возвращает <see cref="T:System.Span`1" /> для записи минимального запрошенного размера (определяется <paramref name="sizeHint" />).</summary>
      <param name="sizeHint" vsli:raw="The minimum length of the returned &lt;see cref=&quot;T:System.Span`1&quot; /&gt;. If 0, a non-empty buffer is returned.">Минимальная длина возвращаемого значения <see cref="T:System.Span`1" />. Если значение равно 0, возвращается непустой буфер.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Span`1&quot; /&gt; of at least the size &lt;paramref name=&quot;sizeHint&quot; /&gt;. If &lt;paramref name=&quot;sizeHint&quot; /&gt; is 0, returns a non-empty buffer.">
        <see cref="T:System.Span`1" /> с минимальным размером <paramref name="sizeHint" />. Если значение <paramref name="sizeHint" /> равно 0, возвращается непустой буфер.</returns>
    </member>
    <member name="T:System.Buffers.MemoryPool`1">
      <summary vsli:raw="Represents a pool of memory blocks.">Представляет пул блоков памяти.</summary>
      <typeparam name="T" vsli:raw="The type of the items in the memory pool.">Тип элементов в пуле памяти.</typeparam>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.#ctor">
      <summary vsli:raw="Constructs a new instance of a memory pool.">Создает новый экземпляр исключения пула памяти.</summary>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Dispose">
      <summary vsli:raw="Frees all resources used by the memory pool.">Освобождает все ресурсы, используемые пулом памяти.</summary>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Dispose(System.Boolean)">
      <summary vsli:raw="Frees the unmanaged resources used by the memory pool and optionally releases the managed resources.">Освобождает неуправляемые ресурсы, используемые пулом памяти, а при необходимости освобождает и управляемые ресурсы.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">Значение <see langword="true" /> позволяет освободить управляемые и неуправляемые ресурсы; значение  позволяет освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="P:System.Buffers.MemoryPool`1.MaxBufferSize">
      <summary vsli:raw="Gets the maximum buffer size supported by this pool.">Возвращает максимальный размер буфера, поддерживаемого этим пулом.</summary>
      <returns vsli:raw="The maximum buffer size supported by this pool.">Максимальный размер буфера, поддерживаемый этим пулом.</returns>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Rent(System.Int32)">
      <summary vsli:raw="Returns a memory block capable of holding at least &lt;paramref name=&quot;minBufferSize&quot; /&gt; elements of T.">Возвращает блок памяти, которая может хранить элементы T <paramref name="minBufferSize" />.</summary>
      <param name="minBufferSize" vsli:raw="The minimum number of elements of &lt;typeparamref name=&quot;T&quot; /&gt; that the memory pool can hold. A value of -1 returns a memory pool set to the default size for the pool.">Минимальное число элементов <typeparamref name="T" />, которые могут храниться в пуле памяти. Значение -1 возвращает пул памяти, для которого настроен размер по умолчанию.</param>
      <returns vsli:raw="A memory block capable of holding at least &lt;paramref name=&quot;minBufferSize&quot; /&gt; elements of T.">Блок памяти, которая может хранить элементы T <paramref name="minBufferSize" />.</returns>
    </member>
    <member name="P:System.Buffers.MemoryPool`1.Shared">
      <summary vsli:raw="Gets a singleton instance of a memory pool based on arrays.">Получает отдельный экземпляр пула памяти на основе массивов.</summary>
      <returns vsli:raw="A singleton instance of a memory pool.">Одноэлементный экземпляр пула памяти.</returns>
    </member>
    <member name="T:System.Buffers.OperationStatus">
      <summary>Определяет значения, которые могут быть возвращены операциями на основе объемов с поддержкой обработки входных данных, содержащихся в нескольких несмежных буферах.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.DestinationTooSmall">
      <summary>Входные данные частично обработаны до того объема, который вмещается в буфере назначения. Вызывающий объект может увеличить буфер назначения, фрагментировать его соответствующим образом и повторить попытку.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.Done">
      <summary>Весь входной буфер обработан, и операция завершена.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.InvalidData">
      <summary>Входные данные содержали недопустимые байты, которые не могли быть обработано. Если входные данные частично обработаны, назначение будет содержать частичный результат. Это гарантирует отсутствие дополнительных данных, которые при добавлении к входным данным сделают недопустимую последовательность допустимой.</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.NeedMoreData">
      <summary>Входные данные частично обработаны до последнего допустимого блока, который может использоваться. Вызывающий объект может совместить оставшиеся необработанные входные данные с большим объемом данных, фрагментировать буфер соответствующим образом и повторить попытку.</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySequence`1">
      <summary vsli:raw="Represents a sequence that can read a sequential series of &lt;typeparamref name=&quot;T&quot; /&gt;.">Представляет последовательность, которая может считывать последовательные наборы <typeparamref name="T" />.</summary>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only sequence." />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(`0[])">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from the &lt;paramref name=&quot;array&quot; /&gt;.">Создает экземпляр класса <see cref="T:System.Buffers.ReadOnlySequence`1" /> из <paramref name="array" />.</summary>
      <param name="array" vsli:raw="The array from which to create a read-only sequence.">Массив, из которого будет создана последовательность только для чтения.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from a section of an array.">Создает экземпляр класса <see cref="T:System.Buffers.ReadOnlySequence`1" /> из фрагмента массива.</summary>
      <param name="array" vsli:raw="The array from which to create the read-only sequence.">Массив, из которого будет создана последовательность только для чтения.</param>
      <param name="start" vsli:raw="The zero-based index of the first element in the array to include in the read-only sequence.">Индекс первого элемента в массиве (начиная с нуля), который необходимо включить в последовательность только для чтения.</param>
      <param name="length" vsli:raw="The number of elements to include in the read-only sequence.">Число элементов, добавляемых в последовательность только для чтения.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(System.Buffers.ReadOnlySequenceSegment{`0},System.Int32,System.Buffers.ReadOnlySequenceSegment{`0},System.Int32)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from a linked memory list represented by start and end segments and the corresponding indexes in them.">Создает экземпляр класса <see cref="T:System.Buffers.ReadOnlySequence`1" /> из связанного списка в памяти, который представлен начальным и конечным сегментами и соответствующими индексами для них.</summary>
      <param name="startSegment" vsli:raw="The initial node of the linked memory list." />
      <param name="startIndex" vsli:raw="The position to the start of the sequence inside &lt;paramref name=&quot;startSegment&quot; /&gt;." />
      <param name="endSegment" vsli:raw="The final node of the linked memory list." />
      <param name="endIndex" vsli:raw="The position to the end of the sequence inside &lt;paramref name=&quot;endSegment&quot; /&gt;." />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(System.ReadOnlyMemory{`0})">
      <summary vsli:raw="Creates an instance of &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; from a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">Создает экземпляр класса <see cref="T:System.Buffers.ReadOnlySequence`1" /> из <see cref="T:System.ReadOnlyMemory`1" />.</summary>
      <param name="memory" vsli:raw="A read-only block of memory of elements of type &lt;typeparamref name=&quot;T&quot; /&gt;." />
    </member>
    <member name="F:System.Buffers.ReadOnlySequence`1.Empty">
      <summary vsli:raw="Returns an empty &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Возвращает пустой массив <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.End">
      <summary vsli:raw="Gets the position at the end of the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Получает позицию конца <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySequence`1.Enumerator">
      <summary vsli:raw="Represents an enumerator over a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Представляет объект перечислителя для <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Enumerator.#ctor(System.Buffers.ReadOnlySequence{`0}@)">
      <summary vsli:raw="Initializes the enumerator.">Инициализирует перечислитель.</summary>
      <param name="sequence" vsli:raw="The &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; to enumerate.">Объект <see cref="T:System.Buffers.ReadOnlySequence`1" /> для перечисления.</param>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Enumerator.Current">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">Возвращает текущий <see cref="T:System.ReadOnlyMemory`1" />.</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">Текущий контекст <see cref="T:System.ReadOnlyMemory`1" />.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Enumerator.MoveNext">
      <summary vsli:raw="Moves to the next &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; in the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Переходит к следующему элементу <see cref="T:System.ReadOnlyMemory`1" /> в <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator successfully advanced to the next item; &lt;see langword=&quot;false&quot; /&gt; if the end of the sequence has been reached.">
        <see langword="true" />, если перечислитель успешно перемещен к следующему элементу; <see langword="false" />, если достигнут конец последовательности.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.First">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; from the first segment.">Получает <see cref="T:System.ReadOnlyMemory`1" /> из первого сегмента.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.FirstSpan">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; from the first segment.">Получает <see cref="T:System.ReadOnlySpan`1" /> из первого сегмента.</summary>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator over the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Возвращает перечислитель по коллекции <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
      <returns vsli:raw="Returns an enumerator over the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Возвращает перечислитель по коллекции <see cref="T:System.Buffers.ReadOnlySequence`1" />.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetPosition(System.Int64)">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at an &lt;paramref name=&quot;offset&quot; /&gt; from the start of the sequence.">Возвращает новый экземпляр <see cref="T:System.SequencePosition" /> в положении <paramref name="offset" /> от начала последовательности.</summary>
      <param name="offset" vsli:raw="The offset from the start of the sequence." />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetPosition(System.Int64,System.SequencePosition)">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; starting at the specified offset from the &lt;paramref name=&quot;origin&quot; /&gt; position.">Возвращает новый экземпляр <see cref="T:System.SequencePosition" /> в положении <paramref name="offset" />, считая от <paramref name="origin" />.</summary>
      <param name="offset" vsli:raw="The offset from the specified &lt;paramref name=&quot;origin&quot; /&gt; sequence position." />
      <param name="origin" vsli:raw="A sequence position representing the point from which to initiate the offset." />
      <returns vsli:raw="An object representing the sequence position that starts at the &lt;paramref name=&quot;offset&quot; /&gt; position of the specified &lt;paramref name=&quot;origin&quot; /&gt; position object.">Новый объект, который начинается с позиции <paramref name="offset" /> в исходном объекте.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; is empty.">Получает значение, указывающее, является ли коллекция <see cref="T:System.Buffers.ReadOnlySequence`1" /> пустой.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.IsSingleSegment">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; contains a single &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; segment.">Получает значение, которое обозначает, содержит ли <see cref="T:System.Buffers.ReadOnlySequence`1" /> один сегмент <see cref="T:System.ReadOnlyMemory`1" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read-only sequence is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />значение, если последовательность, доступная только для чтения, пуста; в противном случае —. <see langword="false" /></returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Length">
      <summary vsli:raw="Gets the length of the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Возвращает длину <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
      <returns vsli:raw="The length of the read-only sequence.">Длина последовательности, доступной только для чтения.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int32,System.Int32)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">Формирует из текущего экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с <paramref name="start" /> и содержит элементы <paramref name="length" />.</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">Индекс, с которого нужно начать срез.</param>
      <param name="length" vsli:raw="The length of the slice.">Длина среза.</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at index &lt;paramref name=&quot;start&quot; /&gt;.">Срез, состоящий из элементов <paramref name="length" /> текущего экземпляра, начиная с индекса <paramref name="start" />.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int32,System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt; and ending at &lt;paramref name=&quot;end&quot; /&gt; (exclusive).">Формирует из текущего экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с <paramref name="start" /> и заканчивается <paramref name="end" /> (исключая границы).</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">Индекс, с которого нужно начать срез.</param>
      <param name="end" vsli:raw="The end (exclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; of the slice.">Окончание среза (исключая границы) <see cref="T:System.SequencePosition" />.</param>
      <returns vsli:raw="A slice that consists of items from the &lt;paramref name=&quot;start&quot; /&gt; index to, but not including, the &lt;paramref name=&quot;end&quot; /&gt; sequence position in the current read-only sequence.">Срез, который состоит из элементов, размещенных в текущей последовательности только для чтения между индексом <paramref name="start" /> и позицией <paramref name="end" />, не включая ее.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at a specified index and continuing to the end of the read-only sequence.">Формирует из текущего экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с указанного индекса и продолжается до конца последовательности только для чтения.</summary>
      <param name="start" vsli:raw="The start index at which to begin this slice.">Стартовый индекс, с которого нужно начать этот срез.</param>
      <returns vsli:raw="A slice starting at index &lt;paramref name=&quot;start&quot; /&gt; and continuing to the end of the current read-only sequence.">Срез, который начинается с индекса <paramref name="start" /> и продолжается до конца текущей последовательности только для чтения.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64,System.Int64)">
      <summary vsli:raw="Forms a slice out of the given &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">Формирует из заданного экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с <paramref name="start" /> и содержит элементы <paramref name="length" />.</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">Индекс, с которого нужно начать срез.</param>
      <param name="length" vsli:raw="The length of the slice.">Длина среза.</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at index &lt;paramref name=&quot;start&quot; /&gt;.">Срез, состоящий из элементов <paramref name="length" /> текущего экземпляра, начиная с индекса <paramref name="start" />.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64,System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt; and ending at &lt;paramref name=&quot;end&quot; /&gt; (exclusive).">Формирует из текущего экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с <paramref name="start" /> и заканчивается <paramref name="end" /> (исключая границы).</summary>
      <param name="start" vsli:raw="The index at which to begin this slice.">Индекс, с которого нужно начать срез.</param>
      <param name="end" vsli:raw="The end (exclusive) of the slice.">Окончание среза (исключая границы).</param>
      <returns vsli:raw="A slice that consists of items from the &lt;paramref name=&quot;start&quot; /&gt; index to, but not including, the &lt;paramref name=&quot;end&quot; /&gt; sequence position in the current read-only sequence.">Срез, который состоит из элементов, размещенных в текущей последовательности только для чтения между индексом <paramref name="start" /> и позицией <paramref name="end" />, не включая ее.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at a specified sequence position and continuing to the end of the read-only sequence.">Формирует из текущего экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с указанной позиции последовательности и продолжается до конца последовательности только для чтения.</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">Начальный экземпляр <see cref="T:System.SequencePosition" /> (включительно), с которого нужно начать этот срез.</param>
      <returns vsli:raw="A slice starting at sequence position &lt;paramref name=&quot;start&quot; /&gt; and continuing to the end of the current read-only sequence.">Срез, который начинается с позиции последовательности <paramref name="start" /> и продолжается до конца текущей последовательности только для чтения.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.Int32)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">Формирует из текущего экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с <paramref name="start" /> и содержит элементы <paramref name="length" />.</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">Начальный экземпляр <see cref="T:System.SequencePosition" /> (включительно), с которого нужно начать этот срез.</param>
      <param name="length" vsli:raw="The length of the slice.">Длина среза.</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at sequence position &lt;paramref name=&quot;start&quot; /&gt;.">Срез, состоящий из элементов <paramref name="length" /> текущего экземпляра, начиная с позиции последовательности <paramref name="start" />.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.Int64)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt;, with &lt;paramref name=&quot;length&quot; /&gt; items.">Формирует из текущего экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с <paramref name="start" /> и содержит элементы <paramref name="length" />.</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">Начальный экземпляр <see cref="T:System.SequencePosition" /> (включительно), с которого нужно начать этот срез.</param>
      <param name="length" vsli:raw="The length of the slice.">Длина среза.</param>
      <returns vsli:raw="A slice that consists of &lt;paramref name=&quot;length&quot; /&gt; elements from the current instance starting at sequence position &lt;paramref name=&quot;start&quot; /&gt;.">Срез, состоящий из элементов <paramref name="length" /> текущего экземпляра, начиная с позиции последовательности <paramref name="start" />.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.SequencePosition)">
      <summary vsli:raw="Forms a slice out of the current &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;, beginning at &lt;paramref name=&quot;start&quot; /&gt; and ending at &lt;paramref name=&quot;end&quot; /&gt; (exclusive).">Формирует из текущего экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с <paramref name="start" /> и заканчивается <paramref name="end" /> (исключая границы).</summary>
      <param name="start" vsli:raw="The starting (inclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; at which to begin this slice.">Начальный экземпляр <see cref="T:System.SequencePosition" /> (включительно), с которого нужно начать этот срез.</param>
      <param name="end" vsli:raw="The ending (exclusive) &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; of the slice.">Окончание среза (исключая границы) <see cref="T:System.SequencePosition" />.</param>
      <returns vsli:raw="A slice that consists of items from the &lt;paramref name=&quot;start&quot; /&gt; sequence position to, but not including, the &lt;paramref name=&quot;end&quot; /&gt; sequence position in the current read-only sequence.">Срез, который состоит из элементов, размещенных в текущей последовательности только для чтения между позицией <paramref name="start" />, и позицией <paramref name="end" />, не включая ее.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Start">
      <summary vsli:raw="Gets the position to the start of the &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Получает положение в начале <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.ToString" />
    <member name="M:System.Buffers.ReadOnlySequence`1.TryGet(System.SequencePosition@,System.ReadOnlyMemory{`0}@,System.Boolean)">
      <summary vsli:raw="Tries to retrieve the next segment after &lt;paramref name=&quot;position&quot; /&gt; and returns a value that indicates whether the operation succeeded.">Пытается получить следующий сегмент после <paramref name="position" /> и возвращает значение, которое обозначает успешность выполнения этой операции.</summary>
      <param name="position" vsli:raw="The current sequence position.">Текущее положение в последовательности.</param>
      <param name="memory" vsli:raw="A read-only memory span that contains the next segment after &lt;paramref name=&quot;position&quot; /&gt;.">Доступная только для чтения область памяти, которая содержит следующий сегмент после <paramref name="position" />.</param>
      <param name="advance" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;position&quot; /&gt; should to the beginning of next segment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если <paramref name="position" /> обозначает начало следующего сегмента; в противном случае <see langword="false" />.</param>
      <returns vsli:raw="Returns &lt;see langword=&quot;true&quot; /&gt; if the method returned the next segment, or &lt;see langword=&quot;false&quot; /&gt; if the end of the read-only sequence was reached.">Возвращает <see langword="true" />, если метод вернул следующий сегмент, или <see langword="false" />, если достигнут конец последовательности только для чтения.</returns>
    </member>
    <member name="T:System.Buffers.ReadOnlySequenceSegment`1">
      <summary vsli:raw="Represents a linked list of &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; nodes.">Представляет связанный список узлов <see cref="T:System.ReadOnlyMemory`1" />.</summary>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only sequence segment." />
    </member>
    <member name="M:System.Buffers.ReadOnlySequenceSegment`1.#ctor" />
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.Memory">
      <summary vsli:raw="Gets or sets a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; value for the current node.">Получает или задает значение <see cref="T:System.ReadOnlyMemory`1" /> для текущего узла.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt; value for the current node.">
        <see cref="T:System.ReadOnlyMemory`1" /> Значение для текущего узла.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.Next">
      <summary vsli:raw="Gets or sets the next node.">Получает или задает следующий узел.</summary>
      <returns vsli:raw="The next node.">Следующий узел.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.RunningIndex">
      <summary vsli:raw="Gets or sets the sum of node lengths before the current node.">Получает или задает сумму длин узлов перед текущим узлом.</summary>
      <returns vsli:raw="The sum of node lengths before the current node.">Сумма длин узлов, предшествующих текущему узлу.</returns>
    </member>
    <member name="T:System.Buffers.SequenceReader`1">
      <summary vsli:raw="Provides methods for reading binary and text data out of a &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; with a focus on performance and minimal or zero heap allocations.">Предоставляет методы для чтения двоичных и текстовых данных за пределами <see cref="T:System.Buffers.ReadOnlySequence`1" />, уделяя особое внимание производительности и тому, чтобы количество выделений кучи было минимальным или нулевым.</summary>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">Тип последовательности, доступной только для чтения.</typeparam>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.#ctor(System.Buffers.ReadOnlySequence{`0})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Buffers.SequenceReader`1&quot; /&gt; over a given &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Создает объект <see cref="T:System.Buffers.SequenceReader`1" /> для данной последовательности <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
      <param name="sequence" vsli:raw="The read-only sequence over which to create the &lt;see cref=&quot;T:System.Buffers.SequenceReader`1&quot; /&gt;.">Последовательность только для чтения, для которой требуется создать <see cref="T:System.Buffers.SequenceReader`1" />.</param>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.Advance(System.Int64)">
      <summary vsli:raw="Moves the reader ahead a specified number of items.">Перемещает средство чтения вперед на заданное число элементов.</summary>
      <param name="count" vsli:raw="The number of items to advance.">Количество элементов, на которое необходимо переместиться.</param>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePast(`0)">
      <summary vsli:raw="Advances past consecutive instances of the given &lt;paramref name=&quot;value&quot; /&gt;.">Выполняет перемещение за идущие подряд экземпляры <paramref name="value" />.</summary>
      <param name="value" vsli:raw="The value past which the reader is to advance.">Значение, за которое необходимо переместить средство чтения.</param>
      <returns vsli:raw="The number of positions the reader has advanced.">Количество позиций, на которое переместилось средство чтения.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0)">
      <summary vsli:raw="Advances past consecutive instances of either of two specified values.">Выполняет перемещение за идущие подряд экземпляры одного из двух указанных значений.</summary>
      <param name="value0" vsli:raw="The first value to skip.">Первое пропускаемое значение.</param>
      <param name="value1" vsli:raw="The second value to skip.">Второе пропускаемое значение.</param>
      <returns vsli:raw="The number of positions the reader has advanced.">Количество позиций, на которое переместилось средство чтения.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0)">
      <summary vsli:raw="Advances past consecutive instances of any of three specified values.">Выполняет перемещение за идущие подряд экземпляры одного из трех указанных значений.</summary>
      <param name="value0" vsli:raw="The first value to skip.">Первое пропускаемое значение.</param>
      <param name="value1" vsli:raw="The second value to skip.">Второе пропускаемое значение.</param>
      <param name="value2" vsli:raw="The third value to skip.">Третье пропускаемое значение.</param>
      <returns vsli:raw="The number of positions the reader has advanced.">Количество позиций, на которое переместилось средство чтения.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0,`0)">
      <summary vsli:raw="Advances past consecutive instances of any of four specified values.">Выполняет перемещение за идущие подряд экземпляры одного из четырех указанных значений.</summary>
      <param name="value0" vsli:raw="The first value to skip.">Первое пропускаемое значение.</param>
      <param name="value1" vsli:raw="The second value to skip.">Второе пропускаемое значение.</param>
      <param name="value2" vsli:raw="The third value to skip.">Третье пропускаемое значение.</param>
      <param name="value3" vsli:raw="The fourth value to skip.">Четвертое пропускаемое значение.</param>
      <returns vsli:raw="The number of positions the reader has advanced.">Количество позиций, на которое переместилось средство чтения.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(System.ReadOnlySpan{`0})">
      <summary vsli:raw="Skips consecutive instances of any of the specified &lt;paramref name=&quot;values&quot; /&gt;.">Пропускает идущие подряд экземпляры любых указанных значений <paramref name="values" />.</summary>
      <param name="values" vsli:raw="The values to be skipped.">Пропускаемые значения.</param>
      <returns vsli:raw="The number of positions the reader has advanced.">Количество позиций, на которое переместилось средство чтения.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Consumed">
      <summary vsli:raw="Gets the total number of &lt;typeparamref name=&quot;T&quot; /&gt; values processed by the reader.">Возвращает общее количество значений <typeparamref name="T" />, обработанных средством чтения.</summary>
      <returns vsli:raw="The total number of values processed by the reader.">Общее число значений, обработанных модулем чтения.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.CurrentSpan">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; that contains the current segment in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">Возвращает объект <see cref="T:System.Span`1" />, который содержит текущий сегмент в <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</summary>
      <returns vsli:raw="A span that contains the current segment in the sequence.">Диапазон, содержащий текущий сегмент в последовательности.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.CurrentSpanIndex">
      <summary vsli:raw="Gets the index in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">Возвращает индекс в <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</summary>
      <returns vsli:raw="The index in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">Индекс в <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.End">
      <summary vsli:raw="Gets a value that indicates whether there is no more data in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">Возвращает значение, которое указывает, есть ли еще данные в <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; when there is no more data in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />значение, <see cref="P:System.Buffers.SequenceReader`1.Sequence" /><see langword="false" />если больше нет данных в; в противном случае —.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.IsNext(`0,System.Boolean)">
      <summary vsli:raw="Checks whether a specified value is next in the sequence.">Проверяет, является ли указанное значение следующим в последовательности.</summary>
      <param name="next" vsli:raw="The value to compare the next items to.">Значение, с которым необходимо сравнить следующие элементы.</param>
      <param name="advancePast" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;next&quot; /&gt; values if they are found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> для перемещения за найденные значения <paramref name="next" />; в противном случае — <see langword="false" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are next in sequence; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если значения расположены далее в последовательности; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Checks whether the values specified in a read-only span are next in the sequence.">Проверяет, являются ли значения, указанные в диапазоне только для чтения, следующими в последовательности.</summary>
      <param name="next" vsli:raw="The span to compare the next items to.">Диапазон, с которым необходимо сравнить следующие элементы.</param>
      <param name="advancePast" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;next&quot; /&gt; values if they are found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> для перемещения за найденные значения <paramref name="next" />; в противном случае — <see langword="false" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are next in sequence; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если значения расположены далее в последовательности; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Length">
      <summary vsli:raw="Gets the count of items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">Возвращает число элементов в последовательности <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> средства чтения.</summary>
      <returns vsli:raw="The count of items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">Число элементов в модуле чтения <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Position">
      <summary vsli:raw="Gets the current position in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">Возвращает текущую позицию в <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</summary>
      <returns vsli:raw="The current position in the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">Текущая позицией в <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Remaining">
      <summary vsli:raw="Gets  the remaining items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;.">Возвращает оставшиеся элементы в последовательности <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> средства чтения.</summary>
      <returns vsli:raw="The remaining items in the reader's &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Sequence&quot; /&gt;">Остальные элементы в<see cref="P:System.Buffers.SequenceReader`1.Sequence" /></returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.Rewind(System.Int64)">
      <summary vsli:raw="Moves the reader back the specified number of items.">Перемещает средство чтения назад на заданное число элементов.</summary>
      <param name="count" vsli:raw="The number of items.">Количество элементов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is negative or greater than &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.Consumed&quot; /&gt;.">
        <paramref name="count" /> является отрицательным или больше <see cref="P:System.Buffers.SequenceReader`1.Consumed" />.</exception>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Sequence">
      <summary vsli:raw="Gets the underlying &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt; for the reader.">Возвращает базовый объект <see cref="T:System.Buffers.ReadOnlySequence`1" /> для средства чтения.</summary>
      <returns vsli:raw="The underlying read-only sequence for the reader.">Базовая последовательность только для чтения для модуля чтения.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryAdvanceTo(`0,System.Boolean)">
      <summary vsli:raw="Searches for a specified delimiter and optionally advances past it if it is found.">Ищет указанный разделитель и при необходимости выполняет перемещение за него.</summary>
      <param name="delimiter" vsli:raw="The delimiter to search for.">Искомый разделитель.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if it is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для перемещения за найденный разделитель <paramref name="delimiter" />; в противном случае значение <see langword="false" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если данный разделитель <paramref name="delimiter" /> найден; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryAdvanceToAny(System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Searches for any of a number of specified delimiters and optionally advances past the first one to be found.">Ищет любой из указанных разделителей и при необходимости выполняет перемещение за первый найденный разделитель.</summary>
      <param name="delimiters" vsli:raw="The delimiters to search for.">Искомые разделители.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the first instance of any of the given &lt;paramref name=&quot;delimiters&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to not move past the delimiter.">
        <see langword="true" /> для перемещения за первый экземпляр любого из данных разделителей <paramref name="delimiters" />; , если выполнять перемещение за разделитель не требуется.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the given &lt;paramref name=&quot;delimiters&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если любой из данных разделителей <paramref name="delimiters" /> найден; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryCopyTo(System.Span{`0})">
      <summary vsli:raw="Copies data from the current position to the given destination span if there is enough data to fill it.">Копирует данные из текущей позиции в указанный конечный диапазон, если их достаточно для заполнения этого диапазона.</summary>
      <param name="destination" vsli:raw="Destination span to copy to.">Конечный диапазон, в который выполняется копирование.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is enough data to completely fill the &lt;paramref name=&quot;destination&quot; /&gt; span; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если данных достаточно для полного заполнения диапазона <paramref name="destination" />; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryPeek(`0@)">
      <summary vsli:raw="Peeks at the next value without advancing the reader.">Считывает следующее значение, не перемещая средство чтения.</summary>
      <param name="value" vsli:raw="The next value, or the default value if at the end of the reader.">Следующее значение или значение по умолчанию, если достигнут конец средства чтения.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is not at its end and the peek operation succeeded; &lt;see langword=&quot;false&quot; /&gt; if at the end of the reader.">Значение <see langword="true" />, если не достигнут конец средства чтения и операция считывания была выполнена успешно; значение <see langword="false" />, если достигнут конец средства чтения.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryRead(`0@)">
      <summary vsli:raw="Reads the next value and advance the reader.">Считывает следующее значение и перемещает средство чтения.</summary>
      <param name="value" vsli:raw="The next value, or the default value if at the end of the reader.">Следующее значение или значение по умолчанию, если достигнут конец средства чтения.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is not at its end and the read operation succeeded; &lt;see langword=&quot;false&quot; /&gt; if at the end of the reader.">Значение <see langword="true" />, если не достигнут конец средства чтения и операция считывания была выполнена успешно; значение <see langword="false" />, если достигнут конец средства чтения.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;, ignoring delimiters that are preceded by &lt;paramref name=&quot;delimiterEscape&quot; /&gt;.">Пытается считать все данные до данного разделителя <paramref name="delimiter" />, пропуская разделители, перед которыми указан <paramref name="delimiterEscape" />.</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">При возвращении метода содержит считанные данные, если они имеются.</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">Искомый разделитель.</param>
      <param name="delimiterEscape" vsli:raw="A value that indicates that an immediately following &lt;paramref name=&quot;delimiter&quot; /&gt; is to be skipped.">Значение, которое указывает, что следующий разделитель <paramref name="delimiter" /> необходимо пропустить.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для перемещения за найденный разделитель <paramref name="delimiter" />; в противном случае значение <see langword="false" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если разделитель <paramref name="delimiter" /> был найден; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;.">Пытается считать все данные до указанного разделителя <paramref name="delimiter" />.</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">При возвращении метода содержит считанные данные, если они имеются.</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">Искомый разделитель.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для перемещения за найденный разделитель <paramref name="delimiter" />; в противном случае значение <see langword="false" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если разделитель <paramref name="delimiter" /> был найден; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Tries to read data until the entire delimiter specified as a read-only span matches.">Пытается считать данные до нахождения полного разделителя, указанного как диапазон только для чтения.</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">При возвращении метода содержит считанные данные, если они имеются.</param>
      <param name="delimiter" vsli:raw="A read-only span that contains one or more delimiters.">Диапазон только для чтения, который содержит один или несколько разделителей.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для перемещения за найденный разделитель <paramref name="delimiter" />; в противном случае значение <see langword="false" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если разделитель <paramref name="delimiter" /> был найден; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;, ignoring delimiters that are preceded by &lt;paramref name=&quot;delimiterEscape&quot; /&gt;.">Пытается считать все данные до данного разделителя <paramref name="delimiter" />, пропуская разделители, перед которыми указан <paramref name="delimiterEscape" />.</summary>
      <param name="span" vsli:raw="When the method returns, contains the data read, if any.">При возвращении метода содержит считанные данные, если они имеются.</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">Искомый разделитель.</param>
      <param name="delimiterEscape" vsli:raw="A value that indicates that an immediately following &lt;paramref name=&quot;delimiter&quot; /&gt; is to be skipped.">Значение, которое указывает, что следующий разделитель <paramref name="delimiter" /> необходимо пропустить.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для перемещения за найденный разделитель <paramref name="delimiter" />; в противном случае значение <see langword="false" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если разделитель <paramref name="delimiter" /> был найден; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,System.Boolean)">
      <summary vsli:raw="Tries to read everything up to the given &lt;paramref name=&quot;delimiter&quot; /&gt;.">Пытается считать все данные до указанного разделителя <paramref name="delimiter" />.</summary>
      <param name="span" vsli:raw="When the method returns, contains the data read, if any.">При возвращении метода содержит считанные данные, если они имеются.</param>
      <param name="delimiter" vsli:raw="The delimiter to look for.">Искомый разделитель.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the &lt;paramref name=&quot;delimiter&quot; /&gt; if found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" /> для перемещения за найденный разделитель <paramref name="delimiter" />; в противном случае значение <see langword="false" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;delimiter&quot; /&gt; was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если разделитель <paramref name="delimiter" /> был найден; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadToAny(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Tries to read everything up to any of the specified &lt;paramref name=&quot;delimiters&quot; /&gt;.">Пытается считать все данные до любого из указанных разделителей <paramref name="delimiters" />.</summary>
      <param name="sequence" vsli:raw="When the method returns, contains the data read, if any.">При возвращении метода содержит считанные данные, если они имеются.</param>
      <param name="delimiters" vsli:raw="The delimiters to look for.">Искомые разделители.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the first found instance of any of the given &lt;paramref name=&quot;delimiters&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> для перемещения за первый найденный экземпляр любого из данных разделителей <paramref name="delimiters" />; в противном случае значение <see langword="false" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the &lt;paramref name=&quot;delimiters&quot; /&gt; were found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если был найден любой из разделителей <paramref name="delimiters" />; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadToAny(System.ReadOnlySpan{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary vsli:raw="Tries to read everything up to any of the specified &lt;paramref name=&quot;delimiters&quot; /&gt;.">Пытается считать все данные до любого из указанных разделителей <paramref name="delimiters" />.</summary>
      <param name="span" vsli:raw="When the method returns, contains the data read, if any.">При возвращении метода содержит считанные данные, если они имеются.</param>
      <param name="delimiters" vsli:raw="The delimiters to look for.">Искомые разделители.</param>
      <param name="advancePastDelimiter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to move past the first found instance of any of the given &lt;paramref name=&quot;delimiters&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> для перемещения за первый найденный экземпляр любого из данных разделителей <paramref name="delimiters" />; в противном случае значение <see langword="false" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the &lt;paramref name=&quot;delimiters&quot; /&gt; were found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если был найден любой из разделителей <paramref name="delimiters" />; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.UnreadSpan">
      <summary vsli:raw="Gets the unread portion of the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">Возвращает часть диапазона <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />, которая не была считана.</summary>
      <returns vsli:raw="The unread portion of the &lt;see cref=&quot;P:System.Buffers.SequenceReader`1.CurrentSpan&quot; /&gt;.">Непрочтенная часть <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</returns>
    </member>
    <member name="T:System.Buffers.SequenceReaderExtensions">
      <summary vsli:raw="Provides extended functionality for the &lt;see cref=&quot;T:System.Buffers.SequenceReader`1&quot; /&gt; class that allows reading of endian specific numeric values from binary data.">Предоставляет для класса <see cref="T:System.Buffers.SequenceReader`1" /> расширенные функциональные возможности, позволяющие считывать числовые значения с прямым или обратным порядком байтов из двоичных данных.</summary>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int16@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int16&quot; /&gt; as big endian.">Пытается считать <see cref="T:System.Int16" /> как содержимое с обратным порядком байтов.</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">Экземпляр средства чтения последовательности байтов, из которого считывается значение.</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as big endian.">При возврате метод содержит значение, считанное из средства чтения последовательности байтов, с обратным порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Значение <see langword="true" />, если операция чтения была выполнена успешно; значение <see langword="false" />, если данных для <see cref="T:System.Int16" /> недостаточно.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int32@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int32&quot; /&gt; as big endian.">Пытается считать <see cref="T:System.Int32" /> как содержимое с обратным порядком байтов.</summary>
      <param name="reader" vsli:raw="The byte sequence reader from which to read the value.">Средство чтения последовательности байтов, из которого считывается значение.</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as big endian.">При возврате метод содержит значение, считанное из средства чтения последовательности байтов, с обратным порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Значение <see langword="true" />, если операция чтения была выполнена успешно; значение <see langword="false" />, если данных для <see cref="T:System.Int32" /> недостаточно.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int64@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int64&quot; /&gt; as big endian.">Пытается считать <see cref="T:System.Int64" /> как содержимое с обратным порядком байтов.</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">Экземпляр средства чтения последовательности байтов, из которого считывается значение.</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as big endian.">При возврате метод содержит значение, считанное из средства чтения последовательности байтов, с обратным порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Значение <see langword="true" />, если операция чтения была выполнена успешно; значение <see langword="false" />, если данных для <see cref="T:System.Int64" /> недостаточно.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int16@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int16&quot; /&gt; as little endian.">Пытается считать <see cref="T:System.Int16" /> как содержимое с прямым порядком байтов.</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">Экземпляр средства чтения последовательности байтов, из которого считывается значение.</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as little endian.">При возврате метод содержит значение, считанное из средства чтения последовательности байтов, с прямым порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">Значение <see langword="true" />, если операция чтения была выполнена успешно; значение <see langword="false" />, если данных для <see cref="T:System.Int16" /> недостаточно.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int32@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int32&quot; /&gt; as little endian.">Пытается считать <see cref="T:System.Int32" /> как содержимое с прямым порядком байтов.</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">Экземпляр средства чтения последовательности байтов, из которого считывается значение.</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as little endian.">При возврате метод содержит значение, считанное из средства чтения последовательности байтов, с прямым порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Значение <see langword="true" />, если операция чтения была выполнена успешно; значение <see langword="false" />, если данных для <see cref="T:System.Int32" /> недостаточно.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int64@)">
      <summary vsli:raw="Tries to read an &lt;see cref=&quot;T:System.Int64&quot; /&gt; as little endian.">Пытается считать <see cref="T:System.Int64" /> как содержимое с прямым порядком байтов.</summary>
      <param name="reader" vsli:raw="The byte sequence reader instance from which the value is to be read.">Экземпляр средства чтения последовательности байтов, из которого считывается значение.</param>
      <param name="value" vsli:raw="When the method returns, the value read out of the byte sequence reader, as little endian.">При возврате метод содержит значение, считанное из средства чтения последовательности байтов, с прямым порядком байтов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read operation is successful; &lt;see langword=&quot;false&quot; /&gt; if there isn't enough data for an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">Значение <see langword="true" />, если операция чтения была выполнена успешно; значение <see langword="false" />, если данных для <see cref="T:System.Int64" /> недостаточно.</returns>
    </member>
    <member name="T:System.Buffers.StandardFormat">
      <summary vsli:raw="Represents a standard format string without using an actual string.">Представляет строку стандартного формата без использования фактической строки.</summary>
    </member>
    <member name="M:System.Buffers.StandardFormat.#ctor(System.Char,System.Byte)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; structure.">Инициализирует новый экземпляр структуры <see cref="T:System.Buffers.StandardFormat" />.</summary>
      <param name="symbol" vsli:raw="A type-specific format specifier, such as 'G', 'D', or 'X'.">Описатель формата определенного типа, например G, D или X.</param>
      <param name="precision" vsli:raw="An optional precision ranging from 0 to 99, or the special value &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt; (the default).">Необязательный описатель точности с диапазоном от 0 до 99 или специальное значение <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> (по умолчанию).</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;symbol&quot; /&gt; is not &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;, and its value is greater than &lt;see cref=&quot;F:System.Buffers.StandardFormat.MaxPrecision&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;symbol&quot; /&gt; cannot be converted to a &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">
        <paramref name="symbol" /> не равно <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> и превышает <see cref="F:System.Buffers.StandardFormat.MaxPrecision" />.

или -

Параметр <paramref name="symbol" /> не может быть преобразован в <see cref="T:System.Byte" />.</exception>
    </member>
    <member name="M:System.Buffers.StandardFormat.Equals(System.Buffers.StandardFormat)">
      <summary vsli:raw="Returns a value that indicates whether the specified &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; is equal to the current instance.">Возвращает значение, которое показывает, равен ли текущий экземпляр указанному объекту <see cref="T:System.Buffers.StandardFormat" />.</summary>
      <param name="other" vsli:raw="The format to compare to the current instance.">Формат для сравнения с текущим экземпляром.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если два экземпляра равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the specified object is a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; object that is equal to the current instance.">Возвращает значение, которое показывает, равен ли текущий экземпляр <see cref="T:System.Buffers.StandardFormat" /> указанному объекту.</summary>
      <param name="obj" vsli:raw="An object to compare to the current instance.">Объект, сравниваемый с текущим экземпляром.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если два экземпляра равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="The hash code for this instance.">Хэш-код данного экземпляра.</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.HasPrecision">
      <summary vsli:raw="Gets a value that indicates whether a format has a defined precision.">Получает значение, которое показывает, имеет ли формат заданную точность.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the format has a precision other than &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />значение, если у формата есть точность, <see cref="F:System.Buffers.StandardFormat.NoPrecision" /><see langword="false" />отличная от; в противном случае —.</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.IsDefault">
      <summary vsli:raw="Gets a value that indicates whether the current instance is a default format.">Получает значение, которое показывает, имеет ли текущий экземпляр формат по умолчанию.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current instance is a default format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />значение, если текущий экземпляр является форматом по умолчанию; в противном случае —. <see langword="false" /></returns>
    </member>
    <member name="F:System.Buffers.StandardFormat.MaxPrecision">
      <summary vsli:raw="Defines the maximum valid precision value.">Определяет максимально допустимое значение точности.</summary>
    </member>
    <member name="F:System.Buffers.StandardFormat.NoPrecision">
      <summary vsli:raw="Indicates that a format doesn't use a precision or that the precision is unspecified.">Указывает, что формат не использует точность или что точность не определена.</summary>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Equality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)">
      <summary vsli:raw="Returns a value that indicates whether two &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instances are equal.">Возвращает значение, указывающее, равны ли два экземпляра <see cref="T:System.Buffers.StandardFormat" />.</summary>
      <param name="left" vsli:raw="The first format to compare.">Первый сравниваемый формат.</param>
      <param name="right" vsli:raw="The second format to compare.">Второй сравниваемый формат.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если два экземпляра равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Implicit(System.Char)~System.Buffers.StandardFormat">
      <summary vsli:raw="Converts a character to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance using &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt; precision.">Преобразует символ в экземпляр <see cref="T:System.Buffers.StandardFormat" />, используя точность <see cref="F:System.Buffers.StandardFormat.NoPrecision" />.</summary>
      <param name="symbol" vsli:raw="The character to convert to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; value.">Символ для преобразования в значение <see cref="T:System.Buffers.StandardFormat" />.</param>
      <returns vsli:raw="A format with a &lt;see cref=&quot;P:System.Buffers.StandardFormat.Symbol&quot; /&gt; property equal to &lt;paramref name=&quot;symbol&quot; /&gt; and a &lt;see cref=&quot;P:System.Buffers.StandardFormat.Precision&quot; /&gt; property equal to &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;.">Формат с о свойством<see cref="P:System.Buffers.StandardFormat.Symbol" />, равным <paramref name="symbol" />, и свойством <see cref="P:System.Buffers.StandardFormat.Precision" />, равным <see cref="F:System.Buffers.StandardFormat.NoPrecision" />.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Inequality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instances are unequal.">Определяет неравенство двух экземпляров <see cref="T:System.Buffers.StandardFormat" />.</summary>
      <param name="left" vsli:raw="The first format to compare.">Первый сравниваемый формат.</param>
      <param name="right" vsli:raw="The second format to compare.">Второй сравниваемый формат.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two formats are unequal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если два формата не равны; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Parse(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Converts a &lt;see langword=&quot;ReadOnlySpan&amp;lt;System.Char&amp;gt;&quot; /&gt; into a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance using &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt; precision.">Преобразует <see langword="ReadOnlySpan&lt;System.Char&gt;" /> в экземпляр <see cref="T:System.Buffers.StandardFormat" /> с использованием точности <see cref="F:System.Buffers.StandardFormat.NoPrecision" />.</summary>
      <param name="format" vsli:raw="A read-only span that contains the character to parse.">Область только для чтения, которая содержит символ для синтаксического анализа.</param>
      <returns vsli:raw="A value whose &lt;see cref=&quot;P:System.Buffers.StandardFormat.Symbol&quot; /&gt; property value is the character in &lt;paramref name=&quot;format&quot; /&gt; and whose &lt;see cref=&quot;P:System.Buffers.StandardFormat.Precision&quot; /&gt; property value is &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;.">Значение, значение свойства <see cref="P:System.Buffers.StandardFormat.Symbol" /> которого является символом в <paramref name="format" />, и значение свойства <see cref="P:System.Buffers.StandardFormat.Precision" /> которого является <see cref="F:System.Buffers.StandardFormat.NoPrecision" />.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Parse(System.String)">
      <summary vsli:raw="Converts a classic .NET standard format string to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance.">Преобразует классическую строку стандартного формата .NET в экземпляр <see cref="T:System.Buffers.StandardFormat" />.</summary>
      <param name="format" vsli:raw="A classic .NET standard format string.">Классическая строка стандартного формата .NET.</param>
      <returns vsli:raw="A format.">Формат.</returns>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;format&quot; /&gt; is not a valid standard format string.">Параметр <paramref name="format" /> не является допустимой строкой стандартного формата.</exception>
    </member>
    <member name="P:System.Buffers.StandardFormat.Precision">
      <summary vsli:raw="Gets the precision component of the format.">Получает компонент точности формата.</summary>
      <returns vsli:raw="The precision component, which can be &lt;see cref=&quot;F:System.Buffers.StandardFormat.NoPrecision&quot; /&gt;, or can range from 0 to 9.">Компонент точности, который может иметь значение <see cref="F:System.Buffers.StandardFormat.NoPrecision" />, или может находиться в диапазоне от 0 до 9.</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.Symbol">
      <summary vsli:raw="Gets the character component of the format.">Получает компонент символа формата.</summary>
      <returns vsli:raw="The character component of the format.">Символьный компонент формата.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.ToString">
      <summary vsli:raw="Returns the string representation of this format.">Возвращает строковое представление этого формата.</summary>
      <returns vsli:raw="The string representation of this format.">Строковое представление этого формата.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.TryParse(System.ReadOnlySpan{System.Char},System.Buffers.StandardFormat@)">
      <summary vsli:raw="Attempts to convert a &lt;see langword=&quot;ReadOnlySpan&amp;lt;Char&amp;gt;&quot; /&gt; to a &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance and returns a value that indicates whether the parsing operation succeeded.">Пытается преобразовать <see langword="ReadOnlySpan&lt;Char&gt;" /> в экземпляр <see cref="T:System.Buffers.StandardFormat" /> и возвращает значение, которое указывает, выполнена ли успешно операция синтаксического анализа.</summary>
      <param name="format" vsli:raw="A read-only span that contains the character to convert.">Область только для чтения, которая содержит символ для преобразования.</param>
      <param name="result" vsli:raw="When the method returns, contains the parsed &lt;see cref=&quot;T:System.Buffers.StandardFormat&quot; /&gt; instance if the operation was successful.">При возвращении метода содержит проанализированный экземпляр <see cref="T:System.Buffers.StandardFormat" />, если операция выполнена успешно.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the parsing operation was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если синтаксический анализ выполнен успешно; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="T:System.Buffers.Text.Base64">
      <summary>Преобразует текст между форматами двоичных данных и текста UTF-8, представленного в кодировке Base64.</summary>
    </member>
    <member name="M:System.Buffers.Text.Base64.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <summary>Декодирует диапазон текста UTF-8, представленного в кодировке Base64, в двоичные данные. Если размер исходных данных не кратен 4, декодируется максимально возможный объем текста до ближайшего кратного 4.</summary>
      <param name="utf8">Исходный диапазон, который содержит текст UTF-8 в кодировке Base64, предназначенный для декодирования.</param>
      <param name="bytes">Целевой диапазон, который содержит результат операции, то есть декодированные двоичные данные.</param>
      <param name="bytesConsumed">Число входных байтов, полученных при выполнении операции. Если потребуется, так можно отделить сегмент исходных данных для последующих вызовов.</param>
      <param name="bytesWritten">Число байтов, записанных в целевой диапазон. Если потребуется, так можно отделить сегмент выходных данных для последующих вызовов.</param>
      <param name="isFinalBlock">
        <see langword="true" /> (по умолчанию), если исходный диапазон содержит все данные для декодирования. <see langword="false" />, если входной диапазон содержит только часть данных, продолжение которых будет предоставлено позднее.</param>
      <returns>Одно из значений перечисления, которое указывает результат выполнения операции декодирования.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.DecodeFromUtf8InPlace(System.Span{System.Byte},System.Int32@)">
      <summary>Декодирует (на месте) диапазон текста UTF-8, представленного в кодировке Base64, в двоичные данные. Декодированные данные в двоичном формате занимают меньше места, чем входные данные (эта операция сжимает данные). Если размер исходных данных не кратен 4, метод не выполняет никаких действий.</summary>
      <param name="buffer">Исходный диапазон, который содержит текст в кодировке Base64, предназначенный для декодирования.</param>
      <param name="bytesWritten">Число байтов, записанных в буфер.</param>
      <returns>Одно из значений перечисления, которое указывает результат выполнения операции декодирования.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.EncodeToUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <summary>Кодирует диапазон двоичных данных в текст UTF-8, представленный в кодировке Base64.</summary>
      <param name="bytes">Исходный диапазон, который содержит двоичные данные, предназначенные для кодирования.</param>
      <param name="utf8">Целевой диапазон, который содержит результат операции, то есть текст UTF-8 в кодировке base64.</param>
      <param name="bytesConsumed">Число входных байтов, полученных при выполнении операции. Если потребуется, так можно отделить сегмент исходных данных для последующих вызовов.</param>
      <param name="bytesWritten">Число байтов, записанных в целевой диапазон. Если потребуется, так можно отделить сегмент выходных данных для последующих вызовов.</param>
      <param name="isFinalBlock">
        <see langword="true" /> (по умолчанию), если исходный диапазон содержит все данные для кодирования. <see langword="false" />, если входной диапазон содержит только часть данных, продолжение которых будет предоставлено позднее.</param>
      <returns>Одно из значений перечисления, которое указывает результат выполнения операции кодирования.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.EncodeToUtf8InPlace(System.Span{System.Byte},System.Int32,System.Int32@)">
      <summary>Кодирует (на месте) диапазон двоичных данных в текст UTF-8, представленный в кодировке Base64. Кодированные данные занимают больше места, чем входные данные в двоичном формате (эта операция расширяет данные).</summary>
      <param name="buffer">Исходный диапазон, который содержит двоичные данные, предназначенные для кодирования. Так как этот метод выполняет преобразование на месте, нужен достаточный размер для хранения результата операции.</param>
      <param name="dataLength">Число байтов двоичных данных, содержащихся в буфере и подлежащих кодированию. Это значение не может превышать длину буфера.</param>
      <param name="bytesWritten">Число байтов, записанных в буфер.</param>
      <returns>Одно из значений перечисления, которое указывает результат выполнения операции кодирования.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.GetMaxDecodedFromUtf8Length(System.Int32)">
      <summary>Возвращает максимальную длину результата (в байтах), который будет получен при декодировании текста в кодировке Base64 в диапазоне байтов с указанной длиной.</summary>
      <param name="length">Размер диапазона байтов.</param>
      <returns>Максимальная длина результата (в байтах).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="length" /> меньше 0.</exception>
    </member>
    <member name="M:System.Buffers.Text.Base64.GetMaxEncodedToUtf8Length(System.Int32)">
      <summary>Возвращает максимальную длину результата (в байтах), который будет получен при кодировании двоичных данных в диапазоне байтов с указанной длиной.</summary>
      <param name="length">Размер диапазона байтов.</param>
      <returns>Максимальная длина результата (в байтах).</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="length" /> меньше 0 или больше 1610612733 (так как кодирование увеличивает объем данных в 4/3 раза).</exception>
    </member>
    <member name="T:System.Buffers.Text.Utf8Formatter">
      <summary vsli:raw="Provides static methods to format common data types as Utf8 strings.">Предоставляет статические методы для форматирования распространенных типов данных в виде строк в кодировке UTF-8.</summary>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Boolean,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; as a UTF8 string.">Форматирует значение <see cref="T:System.Boolean" /> как строку UTF-8.</summary>
      <param name="value" vsli:raw="The value to format.">Форматируемое значение.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format" vsli:raw="The standard format to use.">Стандартный формат, который необходимо использовать.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Byte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Byte&quot; /&gt; as a UTF8 string.">Форматирует значение <see cref="T:System.Byte" /> как строку UTF-8.</summary>
      <param name="value" vsli:raw="The value to format.">Форматируемое значение.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format" vsli:raw="The standard format to use.">Стандартный формат, который необходимо использовать.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTime,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; as a UTF8 string.">Форматирует значение <see cref="T:System.DateTime" /> как строку UTF-8.</summary>
      <param name="value" vsli:raw="The value to format.">Форматируемое значение.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format" vsli:raw="The standard format to use.">Стандартный формат, который необходимо использовать.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTimeOffset,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; as a UTF8 string.">Форматирует значение <see cref="T:System.DateTimeOffset" /> как строку UTF-8.</summary>
      <param name="value" vsli:raw="The value to format.">Форматируемое значение.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format" vsli:raw="The standard format to use.">Стандартный формат, который необходимо использовать.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Decimal,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; as a UTF8 string.">Форматирует значение <see cref="T:System.Decimal" /> как строку UTF-8.</summary>
      <param name="value" vsli:raw="The value to format.">Форматируемое значение.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format" vsli:raw="The standard format to use.">Стандартный формат, который необходимо использовать.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Double,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Double&quot; /&gt; as a UTF8 string.">Форматирует значение <see cref="T:System.Double" /> как строку UTF-8.</summary>
      <param name="value" vsli:raw="The value to format.">Форматируемое значение.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format" vsli:raw="The standard format to use.">Стандартный формат, который необходимо использовать.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Guid,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Guid&quot; /&gt; as a UTF8 string.">Форматирует значение <see cref="T:System.Guid" /> как строку UTF-8.</summary>
      <param name="value" vsli:raw="The value to format.">Форматируемое значение.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format" vsli:raw="The standard format to use.">Стандартный формат, который необходимо использовать.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.Int16&quot; /&gt; as a UTF8 string.">Форматирует значение <see cref="T:System.Int16" /> как строку UTF-8.</summary>
      <param name="value" vsli:raw="The value to format.">Форматируемое значение.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format" vsli:raw="The standard format to use.">Стандартный формат, который необходимо использовать.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.Int32&quot; /&gt; as a UTF8 string.">Форматирует значение <see cref="T:System.Int32" /> как строку UTF-8.</summary>
      <param name="value" vsli:raw="The value to format.">Форматируемое значение.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format" vsli:raw="The standard format to use.">Стандартный формат, который необходимо использовать.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.Int64&quot; /&gt; as a UTF8 string.">Форматирует значение <see cref="T:System.Int64" /> как строку UTF-8.</summary>
      <param name="value" vsli:raw="The value to format.">Форматируемое значение.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format" vsli:raw="The standard format to use.">Стандартный формат, который необходимо использовать.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.SByte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats an &lt;see cref=&quot;T:System.SByte&quot; /&gt; as a UTF8 string.">Форматирует значение <see cref="T:System.SByte" /> как строку UTF-8.</summary>
      <param name="value" vsli:raw="The value to format.">Форматируемое значение.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format" vsli:raw="The standard format to use.">Стандартный формат, который необходимо использовать.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Single,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.Single&quot; /&gt; as a UTF8 string.">Форматирует значение <see cref="T:System.Single" /> как строку UTF-8.</summary>
      <param name="value" vsli:raw="The value to format.">Форматируемое значение.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format" vsli:raw="The standard format to use.">Стандартный формат, который необходимо использовать.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.TimeSpan,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; as a UTF8 string.">Форматирует значение <see cref="T:System.TimeSpan" /> как строку UTF-8.</summary>
      <param name="value" vsli:raw="The value to format.">Форматируемое значение.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format" vsli:raw="The standard format to use.">Стандартный формат, который необходимо использовать.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; as a UTF8 string.">Форматирует значение <see cref="T:System.UInt16" /> как строку UTF-8.</summary>
      <param name="value" vsli:raw="The value to format.">Форматируемое значение.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format" vsli:raw="The standard format to use.">Стандартный формат, который необходимо использовать.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; as a UTF8 string.">Форматирует значение <see cref="T:System.UInt32" /> как строку UTF-8.</summary>
      <param name="value" vsli:raw="The value to format.">Форматируемое значение.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format" vsli:raw="The standard format to use.">Стандартный формат, который необходимо использовать.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary vsli:raw="Formats a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; as a UTF8 string.">Форматирует значение <see cref="T:System.UInt64" /> как строку UTF-8.</summary>
      <param name="value" vsli:raw="The value to format.">Форматируемое значение.</param>
      <param name="destination" vsli:raw="The buffer to write the UTF8-formatted value to.">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten" vsli:raw="When the method returns, contains the length of the formatted text in bytes.">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format" vsli:raw="The standard format to use.">Стандартный формат, который необходимо использовать.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the formatting operation succeeds; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;destination&quot; /&gt; is too small.">Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="T:System.Buffers.Text.Utf8Parser">
      <summary vsli:raw="Provides static methods to parse Utf8 strings to common data types.">Предоставляет статические методы для преобразования строк в кодировке UTF-8 в распространенные типы данных.</summary>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; at the start of a Utf8 string.">Анализирует значение <see cref="T:System.Boolean" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Byte&quot; /&gt; at the start of a Utf8 string.">Анализирует значение <see cref="T:System.Byte" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; at the start of a Utf8 string.">Анализирует значение <see cref="T:System.DateTime" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; at the start of a Utf8 string.">Анализирует значение <see cref="T:System.DateTimeOffset" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; at the start of a Utf8 string.">Анализирует значение <see cref="T:System.Decimal" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Double&quot; /&gt; at the start of a Utf8 string.">Анализирует значение <see cref="T:System.Double" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Guid&quot; /&gt; at the start of a Utf8 string.">Анализирует значение <see cref="T:System.Guid" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.Int16&quot; /&gt; at the start of a Utf8 string.">Анализирует значение <see cref="T:System.Int16" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.Int32&quot; /&gt; at the start of a Utf8 string.">Анализирует значение <see cref="T:System.Int32" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.Int64&quot; /&gt; at the start of a Utf8 string.">Анализирует значение <see cref="T:System.Int64" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses an &lt;see cref=&quot;T:System.SByte&quot; /&gt; at the start of a Utf8 string.">Анализирует значение <see cref="T:System.SByte" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.Single&quot; /&gt; at the start of a Utf8 string.">Анализирует значение <see cref="T:System.Single" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; at the start of a Utf8 string.">Анализирует значение <see cref="T:System.TimeSpan" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; at the start of a Utf8 string.">Анализирует значение <see cref="T:System.UInt16" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; at the start of a Utf8 string.">Анализирует значение <see cref="T:System.UInt32" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)">
      <summary vsli:raw="Parses a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; at the start of a Utf8 string.">Анализирует значение <see cref="T:System.UInt64" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source" vsli:raw="The Utf8 string to parse.">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value" vsli:raw="When the method returns, contains the value parsed from &lt;paramref name=&quot;source&quot; /&gt;, if the parsing operation succeeded.">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed" vsli:raw="If the parsing operation was successful, contains the length in bytes of the parsed substring when the method returns. If the method fails, &lt;paramref name=&quot;bytesConsumed&quot; /&gt; is set to 0.">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat" vsli:raw="The expected format of the Utf8 string.">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; for success; &lt;see langword=&quot;false&quot; /&gt; if the string was not syntactically valid or an overflow or underflow occurred.">Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="T:System.MemoryExtensions">
      <summary vsli:raw="Provides extension methods for the memory- and span-related types, such as &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;, &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;, &lt;see cref=&quot;T:System.Span`1&quot; /&gt;, and &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">Предоставляет методы расширения для типов, связанных с памятью и диапазоном, таких как <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" /> и <see cref="T:System.ReadOnlySpan`1" />.</summary>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over the portion of the target string.">Создает новый <see langword="ReadOnlyMemory&lt;Char&gt;" /> для части целевой строки.</summary>
      <param name="text" vsli:raw="The target string.">Целевая строка.</param>
      <returns vsli:raw="The read-only character memory representation of the string, or &lt;see langword=&quot;default&quot; /&gt; if &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Представление строки в памяти только для чтения или <see langword="default" />, если <paramref name="text" /> имеет значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Index)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a portion of the target string starting at a specified index.">Создает новый <see langword="ReadOnlyMemory&lt;Char&gt;" /> на основе части целевой строки, начиная с указанного индекса.</summary>
      <param name="text" vsli:raw="The target string.">Целевая строка.</param>
      <param name="startIndex" vsli:raw="The index at which to begin this slice.">Индекс, с которого нужно начать срез.</param>
      <returns vsli:raw="The read-only character memory representation of the string.">Представление строки в памяти только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Int32)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a portion of the target string starting at a specified character position.">Создает новый <see langword="ReadOnlyMemory&lt;Char&gt;" /> на основе части целевой строки, начиная с указанной позиции символа.</summary>
      <param name="text" vsli:raw="The target string.">Целевая строка.</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">Индекс, с которого нужно начать срез.</param>
      <returns vsli:raw="The read-only character memory representation of the string, or &lt;see langword=&quot;default&quot; /&gt; if &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Представление строки в памяти только для чтения или <see langword="default" />, если <paramref name="text" /> имеет значение <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt; (&lt;paramref name=&quot;start&quot; /&gt; is &amp;lt; 0 or &amp;gt; &lt;c&gt;text.Length&lt;/c&gt;).">
        <paramref name="start" /> не находится в диапазоне <paramref name="text" /> (<paramref name="start" /> имеет значение &lt; 0 или &gt; <c>text.Length</c>).</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a portion of the target string beginning at a specified position with a length.">Создает новый <see langword="ReadOnlyMemory&lt;Char&gt;" /> на основе части целевой строки, начиная с указанной позиции с заданной длиной.</summary>
      <param name="text" vsli:raw="The target string.">Целевая строка.</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">Индекс, с которого нужно начать срез.</param>
      <param name="length" vsli:raw="The desired length for the slice.">Требуемая длина для среза.</param>
      <returns vsli:raw="The read-only character memory representation of the string, or &lt;see langword=&quot;default&quot; /&gt; if &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Представление строки в памяти только для чтения или <see langword="default" />, если <paramref name="text" /> имеет значение <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="text" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Range)">
      <summary vsli:raw="Creates a new &lt;see langword=&quot;ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt; over a specified range of the target string.">Создает новый <see langword="ReadOnlyMemory&lt;Char&gt;" /> с заданным диапазоном целевой строки.</summary>
      <param name="text" vsli:raw="The target string.">Целевая строка.</param>
      <param name="range" vsli:raw="The range that indicates the start and length of the sliced string.">Диапазон, указывающий начало и длину строки среза.</param>
      <returns vsli:raw="The read-only character memory representation of the string.">Представление строки в памяти только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[])">
      <summary vsli:raw="Creates a new memory region over the target array.">Создает новую область памяти для целевого массива.</summary>
      <param name="array" vsli:raw="The array to convert.">Преобразуемый массив.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Тип массива.</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">Представление в памяти всего массива или части массива.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Index)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array starting at a specified index to the end of the array.">Создает новую область памяти для части целевого массива, начиная с указанного индекса и заканчивая концом массива.</summary>
      <param name="array" vsli:raw="The array to convert.">Преобразуемый массив.</param>
      <param name="startIndex" vsli:raw="The first position of the array.">Первая позиция массива.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Тип массива.</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">Представление в памяти всего массива или части массива.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array starting at a specified position to the end of the array.">Создает новую область памяти для части целевого массива, начиная с указанной позиции и заканчивая концом массива.</summary>
      <param name="array" vsli:raw="The target array.">Целевой массив.</param>
      <param name="start" vsli:raw="The index at which to begin the memory.">Индекс, с которого нужно начать память.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Тип массива.</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">Представление в памяти всего массива или части массива.</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">Параметр <paramref name="array" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; index less than 0 or greater than &lt;see langword=&quot;array.Length&quot; /&gt;.">Индекс <paramref name="start" /> имеет значение меньше 0 или больше <see langword="array.Length" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array beginning at a specified position with a specified length.">Создает новую область памяти для части целевого массива, начиная с указанной позиции с учетом заданной длины.</summary>
      <param name="array" vsli:raw="The target array.">Целевой массив.</param>
      <param name="start" vsli:raw="The index at which to begin the memory region.">Индекс, с которого определяется начало области памяти.</param>
      <param name="length" vsli:raw="The number of items in the memory region.">Число элементов в области памяти.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Тип массива.</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">Представление в памяти всего массива или части массива.</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">Параметр <paramref name="array" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="array" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Range)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array beginning at inclusive start index of the range and ending at the exclusive end index of the range.">Создает новую область памяти для части целевого массива, начиная с включающего начального индекса диапазона и заканчивая исключающим конечным индексом диапазона.</summary>
      <param name="array" vsli:raw="The array to convert.">Преобразуемый массив.</param>
      <param name="range" vsli:raw="The range to convert from the array.">Диапазон для преобразования из массива.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Тип массива.</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">Представление в памяти всего массива или части массива.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0})">
      <summary vsli:raw="Creates a new memory region over the portion of the target array segment.">Создает новую область памяти для части целевого сегмента массива.</summary>
      <param name="segment" vsli:raw="The segment to convert.">Преобразуемый сегмент.</param>
      <typeparam name="T" vsli:raw="The type of the segment.">Тип сегмента.</typeparam>
      <returns vsli:raw="The memory representation of the segment.">Представление сегмента в памяти.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array segment starting at a specified position to the end of the segment.">Создает новую область памяти для части сегмента целевого массива, начиная с указанной позиции и заканчивая концом сегмента.</summary>
      <param name="segment" vsli:raw="The target array segment.">Сегмент целевого массива.</param>
      <param name="start" vsli:raw="The index at which to begin the memory.">Индекс, с которого нужно начать память.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Тип массива.</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">Представление в памяти всего массива или части массива.</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the type of &lt;paramref name=&quot;segment&quot; /&gt; is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">Параметр <paramref name="segment" /> является ковариантным, и <paramref name="segment" /> не обязательно будет иметь тип <see langword="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is less than 0 or greater than &lt;see langword=&quot;segment.Count&quot; /&gt;.">Параметр <paramref name="start" /> имеет значение меньше 0 или больше <see langword="segment.Count" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new memory region over the portion of the target array segment beginning at a specified position with a specified length.">Создает новую область памяти для части сегмента целевого массива, начиная с указанной позиции с учетом заданной длины.</summary>
      <param name="segment" vsli:raw="The target array segment.">Сегмент целевого массива.</param>
      <param name="start" vsli:raw="The index at which to begin the memory.">Индекс, с которого нужно начать память.</param>
      <param name="length" vsli:raw="The number of items in the memory.">Число элементов в памяти.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Тип массива.</typeparam>
      <returns vsli:raw="The memory representation of the whole or part of the array.">Представление в памяти всего массива или части массива.</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">Параметр <paramref name="segment" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;segment&quot; /&gt;.">
        <paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="segment" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String)">
      <summary vsli:raw="Creates a new read-only span over a string.">Создает новый диапазон, предназначенный только для чтения, для части целевой строки, начиная с указанной позиции и с учетом заданного числа символов.</summary>
      <param name="text" vsli:raw="The target string.">Целевая строка.</param>
      <returns vsli:raw="The read-only span representation of the string.">Представление строки в диапазоне только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String,System.Int32)">
      <summary vsli:raw="Creates a new read-only span over a portion of the target string from a specified position to the end of the string.">Создает новый диапазон, предназначенный только для чтения, для части целевой строки, начиная с указанной позиции и до конца строки.</summary>
      <param name="text" vsli:raw="The target string.">Целевая строка.</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">Индекс, с которого нужно начать срез.</param>
      <returns vsli:raw="The read-only span representation of the string.">Представление строки в диапазоне только для чтения.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Thrown when &lt;paramref name=&quot;text&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Свойство <paramref name="text" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is less than 0 or greater than &lt;see langword=&quot;text.Length&quot; /&gt;.">Параметр <paramref name="start" /> имеет значение меньше 0 или больше <see langword="text.Length" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new read-only span over a portion of the target string from a specified position for a specified number of characters.">Создает новый диапазон, доступный только для чтения, для строки.</summary>
      <param name="text" vsli:raw="The target string.">Целевая строка.</param>
      <param name="start" vsli:raw="The index at which to begin this slice.">Индекс, с которого нужно начать срез.</param>
      <param name="length" vsli:raw="The desired length for the slice.">Требуемая длина для среза.</param>
      <returns vsli:raw="The read-only span representation of the string.">Представление строки в диапазоне только для чтения.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="text" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[])">
      <summary vsli:raw="Creates a new span over a target array.">Создает новый диапазон для целевого массива.</summary>
      <param name="array" vsli:raw="The array to convert.">Преобразуемый массив.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Тип массива.</typeparam>
      <returns vsli:raw="The span representation of the array.">Представление массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Index)">
      <summary vsli:raw="Creates a new span over the portion of the target array defined by an &lt;see cref=&quot;T:System.Index&quot; /&gt; value.">Создает новый диапазон для части целевого массива, определенного значением <see cref="T:System.Index" />.</summary>
      <param name="array" vsli:raw="The array to convert.">Преобразуемый массив.</param>
      <param name="startIndex" vsli:raw="The starting index.">Начальный индекс.</param>
      <typeparam name="T" vsli:raw="The array type.">Тип массива.</typeparam>
      <returns vsli:raw="The span representation of the array.">Представление массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of the target array starting at a specified position to the end of the array.">Создает новый диапазон для части целевого массива, начиная с указанной позиции и заканчивая концом массива.</summary>
      <param name="array" vsli:raw="The array to convert.">Преобразуемый массив.</param>
      <param name="start" vsli:raw="The initial index from which the array will be converted.">Начальный индекс, с которого будет преобразован массив.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Тип массива.</typeparam>
      <returns vsli:raw="The span representation of the array.">Представление массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new span over the portion of the target array beginning at a specified position for a specified length.">Создает новый диапазон для части целевого массива, начиная с указанной позиции с учетом заданной длины.</summary>
      <param name="array" vsli:raw="The target array.">Целевой массив.</param>
      <param name="start" vsli:raw="The index at which to begin the span.">Индекс, с которого нужно начать диапазон.</param>
      <param name="length" vsli:raw="The number of items in the span.">Число элементов в диапазоне.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Тип массива.</typeparam>
      <returns vsli:raw="The span representation of the array.">Представление массива в диапазоне.</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;&quot;.">Параметр <paramref name="array" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;text&quot; /&gt;.">
        <paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="text" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Range)">
      <summary vsli:raw="Creates a new span over a portion of a target array defined by a &lt;see cref=&quot;T:System.Range&quot; /&gt; value.">Создает новый диапазон для части целевого массива, определенного значением <see cref="T:System.Range" />.</summary>
      <param name="array" vsli:raw="The array to convert.">Преобразуемый массив.</param>
      <param name="range" vsli:raw="The range of the array to convert.">Преобразуемый диапазон массива.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Тип массива.</typeparam>
      <returns vsli:raw="The span representation of the array.">Представление массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0})">
      <summary vsli:raw="Creates a new span over a target array segment.">Создает новый диапазон для сегмента целевого массива.</summary>
      <param name="segment" vsli:raw="The array segment to convert.">Сегмент массива для преобразования.</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">Тип сегмента массива.</typeparam>
      <returns vsli:raw="The span representation of the array segment.">Представление сегмента массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Index)">
      <summary vsli:raw="Creates a new span over a portion of the target array segment beginning at a specified index and ending at the end of the segment.">Создает новый диапазон для части сегмента целевого массива, начиная с указанного индекса и заканчивая концом сегмента.</summary>
      <param name="segment" vsli:raw="The target array segment.">Сегмент целевого массива.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the Span.">Индекс, с которого нужно начать диапазон.</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">Тип сегмента массива.</typeparam>
      <returns vsli:raw="The span representation of the array segment.">Представление сегмента массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of a target array segment from a specified position to the end of the segment.">Создает новый диапазон для части сегмента целевого массива, начиная с указанной позиции и заканчивая концом сегмента.</summary>
      <param name="segment" vsli:raw="The target array segment.">Сегмент целевого массива.</param>
      <param name="start" vsli:raw="The index at which to begin the san.">Индекс, с которого нужно начать диапазон.</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">Тип сегмента массива.</typeparam>
      <returns vsli:raw="The span representation of the array segment.">Представление сегмента массива в диапазоне.</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">Параметр <paramref name="segment" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt; is less than 0 or greater than &lt;see langword=&quot;segment.Count&quot; /&gt;.">Параметр <paramref name="start" /> имеет значение меньше 0 или больше <see langword="segment.Count" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of a target array segment from a specified position for a specified length.">Создает новый диапазон для части сегмента целевого массива, начиная с указанной позиции с учетом заданной длины.</summary>
      <param name="segment" vsli:raw="The target array segment.">Сегмент целевого массива.</param>
      <param name="start" vsli:raw="The index at which to begin the span.">Индекс, с которого нужно начать диапазон.</param>
      <param name="length" vsli:raw="The number of items in the span.">Число элементов в диапазоне.</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">Тип сегмента массива.</typeparam>
      <returns vsli:raw="The span representation of the array.">Представление массива в диапазоне.</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;segment&quot; /&gt; is covariant, and the array's type is not exactly &lt;see langword=&quot;T[]&quot; /&gt;.">Параметр <paramref name="segment" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;start&quot; /&gt;, &lt;paramref name=&quot;length&quot; /&gt;, or &lt;paramref name=&quot;start&quot; /&gt; + &lt;paramref name=&quot;length&quot; /&gt; is not in the range of &lt;paramref name=&quot;segment&quot; /&gt;.">
        <paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="segment" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Range)">
      <summary vsli:raw="Creates a new span over a portion of a target array segment using the range start and end indexes.">Создает новый диапазон для части сегмента целевого массива с использованием начального и конечного индексов диапазона</summary>
      <param name="segment" vsli:raw="The target array segment.">Сегмент целевого массива.</param>
      <param name="range" vsli:raw="The range which has start and end indexes to use for slicing the array.">Диапазон, в котором находятся индексы начала и конца, используемые для разбиения массива на части.</param>
      <typeparam name="T" vsli:raw="The type of the array segment.">Тип сегмента массива.</typeparam>
      <returns vsli:raw="The span representation of the array segment.">Представление сегмента массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``1(System.ReadOnlySpan{``0},System.IComparable{``0})">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; for a value using the specified &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface.">Выполняет поиск значения во всем отсортированном массиве <see cref="T:System.ReadOnlySpan`1" />, используя заданный универсальный интерфейс <see cref="T:System.IComparable`1" />.</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; to search.">Отсортированный массив <see cref="T:System.ReadOnlySpan`1" />, в котором выполняется поиск.</param>
      <param name="comparable" vsli:raw="The &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; to use when comparing.">
        <see cref="T:System.IComparable`1" />, используемый при сравнении.</param>
      <typeparam name="T" vsli:raw="The element type of the span.">Тип элемента диапазона.</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt;.">Отсчитываемый от нуля индекс элемента <paramref name="comparable" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="comparable" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="comparable" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.ReadOnlySpan`1.Length" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Свойство <paramref name="comparable" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; for a value using the specified &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface.">Выполняет поиск значения во всем отсортированном массиве <see cref="T:System.Span`1" />, используя заданный универсальный интерфейс <see cref="T:System.IComparable`1" />.</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to search.">Отсортированный массив <see cref="T:System.Span`1" />, в котором выполняется поиск.</param>
      <param name="comparable" vsli:raw="The &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; to use when comparing.">
        <see cref="T:System.IComparable`1" />, используемый при сравнении.</param>
      <typeparam name="T" vsli:raw="The element type of the span.">Тип элемента диапазона.</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Span`1.Length&quot; /&gt;.">Отсчитываемый от нуля индекс элемента <paramref name="comparable" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="comparable" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="comparable" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Span`1.Length" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``0,``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; for a specified value using the specified &lt;typeparamref name=&quot;TComparer&quot; /&gt; generic type.">Выполняет поиск указанного значения во всем отсортированном массиве <see cref="T:System.ReadOnlySpan`1" />, используя заданный универсальный тип <typeparamref name="TComparer" />.</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; to search.">Отсортированный массив <see cref="T:System.ReadOnlySpan`1" />, в котором выполняется поиск.</param>
      <param name="value" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Искомый объект. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="comparer" vsli:raw="The &lt;typeparamref name=&quot;TComparer&quot; /&gt; to use when comparing.">
        <typeparamref name="TComparer" />, используемый при сравнении.</param>
      <typeparam name="T" vsli:raw="The element type of the span.">Тип элемента диапазона.</typeparam>
      <typeparam name="TComparer" vsli:raw="The specific type of &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">Конкретный тип <see cref="T:System.Collections.Generic.IComparer`1" />.</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;value&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;value&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt;.">Отсчитываемый от нуля индекс элемента <paramref name="value" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="value" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="value" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.ReadOnlySpan`1.Length" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; for a value using the specified &lt;typeparamref name=&quot;TComparable&quot; /&gt; generic type.">Выполняет поиск значения во всем отсортированном массиве <see cref="T:System.ReadOnlySpan`1" />, используя заданный универсальный тип <typeparamref name="TComparable" />.</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; to search.">Отсортированный массив <see cref="T:System.ReadOnlySpan`1" />, в котором выполняется поиск.</param>
      <param name="comparable" vsli:raw="The &lt;typeparamref name=&quot;TComparable&quot; /&gt; to use when comparing.">
        <typeparamref name="TComparable" />, используемый при сравнении.</param>
      <typeparam name="T" vsli:raw="The element type of the span.">Тип элемента диапазона.</typeparam>
      <typeparam name="TComparable" vsli:raw="The specific type of &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt;.">Конкретный тип <see cref="T:System.IComparable`1" />.</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt;.">Отсчитываемый от нуля индекс элемента <paramref name="comparable" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="comparable" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="comparable" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.ReadOnlySpan`1.Length" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; for a specified value using the specified &lt;typeparamref name=&quot;TComparer&quot; /&gt; generic type.">Выполняет поиск указанного значения во всем отсортированном массиве <see cref="T:System.Span`1" />, используя заданный универсальный тип <typeparamref name="TComparer" />.</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to search.">Отсортированный массив <see cref="T:System.Span`1" />, в котором выполняется поиск.</param>
      <param name="value" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Искомый объект. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="comparer" vsli:raw="The &lt;typeparamref name=&quot;TComparer&quot; /&gt; to use when comparing.">
        <typeparamref name="TComparer" />, используемый при сравнении.</param>
      <typeparam name="T" vsli:raw="The element type of the span.">Тип элемента диапазона.</typeparam>
      <typeparam name="TComparer" vsli:raw="The specific type of &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">Конкретный тип <see cref="T:System.Collections.Generic.IComparer`1" />.</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;value&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;value&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Span`1.Length&quot; /&gt;.">Отсчитываемый от нуля индекс элемента <paramref name="value" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="value" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="value" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Span`1.Length" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Свойство <paramref name="comparer" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)">
      <summary vsli:raw="Searches an entire sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; for a value using the specified &lt;typeparamref name=&quot;TComparable&quot; /&gt; generic type.">Выполняет поиск значения во всем отсортированном массиве <see cref="T:System.Span`1" />, используя заданный универсальный тип <typeparamref name="TComparable" />.</summary>
      <param name="span" vsli:raw="The sorted &lt;see cref=&quot;T:System.Span`1&quot; /&gt; to search.">Отсортированный массив <see cref="T:System.Span`1" />, в котором выполняется поиск.</param>
      <param name="comparable" vsli:raw="The &lt;typeparamref name=&quot;TComparable&quot; /&gt; to use when comparing.">
        <typeparamref name="TComparable" />, используемый при сравнении.</param>
      <typeparam name="T" vsli:raw="The element type of the span.">Тип элемента диапазона.</typeparam>
      <typeparam name="TComparable" vsli:raw="The specific type of &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt;.">Конкретный тип <see cref="T:System.IComparable`1" />.</typeparam>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;comparable&quot; /&gt; in the sorted &lt;paramref name=&quot;span&quot; /&gt;, if &lt;paramref name=&quot;comparable&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;comparable&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Span`1.Length&quot; /&gt;.">Отсчитываемый от нуля индекс элемента <paramref name="comparable" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="comparable" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="comparable" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Span`1.Length" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparable&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparable" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.CompareTo(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Compares one character span with another using a specified string comparison, and returns an integer that indicates their relative position in the sort order.">Сравнивает один диапазон символов с другим с помощью указанного сравнения строк и возвращает целое число, которое указывает их относительное расположение в порядке сортировки.</summary>
      <param name="span" vsli:raw="The source span.">Исходный диапазон.</param>
      <param name="other" vsli:raw="The value to compare with the source span.">Значение для сравнения с исходным диапазоном.</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt; are compared.">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="other" />.</param>
      <returns vsli:raw="A signed integer that indicates the relative order of &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;:&lt;br /&gt;   - If less than 0, &lt;paramref name=&quot;span&quot; /&gt; precedes than &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If 0, &lt;paramref name=&quot;span&quot; /&gt; equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If greater than 0, &lt;paramref name=&quot;span&quot; /&gt; follows &lt;paramref name=&quot;other&quot; /&gt;.">Целое число со знаком, представляющее относительный порядок <paramref name="span" /> и <paramref name="other" />:   — Если значение меньше 0, <paramref name="span" /> предшествует <paramref name="other" />.   — Если 0, <paramref name="span" /> равно <paramref name="other" />.   — Если значение больше 0, <paramref name="span" /> стоит после <paramref name="other" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Indicates whether a specified value occurs within a read-only character span.">Указывает, находится ли указанное значение в пределах диапазона символов, доступного только для чтения.</summary>
      <param name="span" vsli:raw="The source span.">Исходный диапазон.</param>
      <param name="value" vsli:raw="The value to seek within the source span.">Значение, которое необходимо найти в исходном диапазоне.</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how the characters in &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">Значение перечисления, определяющее способ сравнения символов в <paramref name="span" /> и <paramref name="value" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; occurs within the span, &lt;see langword=&quot;false&quot; /&gt; otherwise.">Значение <see langword="true" />, если <paramref name="value" /> находится в диапазоне; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Indicates whether a specified value is found in a read-only span. Values are compared using IEquatable{T}.Equals(T).">Указывает, найдено ли указанное значение в диапазоне, доступном только для чтения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value" vsli:raw="The value to search for.">Значение, которое нужно найти.</param>
      <typeparam name="T" vsli:raw="The type of the span.">Тип диапазона.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if found, &lt;see langword=&quot;false&quot; /&gt; otherwise.">Значение <see langword="true" />, если найдено; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains``1(System.Span{``0},``0)">
      <summary vsli:raw="Indicates whether a specified value is found in a span. Values are compared using IEquatable{T}.Equals(T).">Указывает, найдено ли указанное значение в диапазоне. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value" vsli:raw="The value to search for.">Значение, которое нужно найти.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">Тип элементов в диапазоне.</typeparam>
      <returns vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; if found, &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; otherwise.">Значение <see langword="true" />, если найдено; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.CopyTo``1(``0[],System.Memory{``0})">
      <summary vsli:raw="Copies the contents of the array into a memory region.">Копирует содержимое массива в область памяти.</summary>
      <param name="source" vsli:raw="The array to copy items from.">Массив, из которого необходимо скопировать элементы.</param>
      <param name="destination" vsli:raw="The memory to copy items into.">Память, в которую необходимо скопировать элементы.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Тип массива.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination is shorter than the source array.">Место назначения короче исходного массива.</exception>
    </member>
    <member name="M:System.MemoryExtensions.CopyTo``1(``0[],System.Span{``0})">
      <summary vsli:raw="Copies the contents of the array into the span.">Копирует содержимое массива в диапазон.</summary>
      <param name="source" vsli:raw="The array to copy items from.">Массив, из которого необходимо скопировать элементы.</param>
      <param name="destination" vsli:raw="The span to copy items into.">Диапазон для копирования элементов.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Тип массива.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination Span is shorter than the source array.">Диапазон назначения короче исходного массива.</exception>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Determines whether the end of the &lt;paramref name=&quot;span&quot; /&gt; matches the specified &lt;paramref name=&quot;value&quot; /&gt; when compared using the specified &lt;paramref name=&quot;comparisonType&quot; /&gt; option.">Определяет, совпадает ли конец <paramref name="span" /> с заданным <paramref name="value" /> при сравнении с учетом заданного параметра <paramref name="comparisonType" />.</summary>
      <param name="span" vsli:raw="The source span.">Исходный диапазон.</param>
      <param name="value" vsli:raw="The sequence to compare to the end of the source span.">Последовательность, сравниваемая с концом исходного диапазона.</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="value" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the end of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если <paramref name="value" /> соответствует концу <paramref name="span" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether the specified sequence appears at the end of a read-only span.">Определяет, отображается ли указанная последовательность в конце диапазона, доступного только для чтения.</summary>
      <param name="span" vsli:raw="The source span.">Исходный диапазон.</param>
      <param name="value" vsli:raw="The sequence to compare to the end of the source span.">Последовательность, сравниваемая с концом исходного диапазона.</param>
      <typeparam name="T" vsli:raw="The type of the span.">Тип диапазона.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the end of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если <paramref name="value" /> соответствует концу <paramref name="span" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether the specified sequence appears at the end of a span.">Определяет, отображается ли указанная последовательность в конце диапазона.</summary>
      <param name="span" vsli:raw="The source span.">Исходный диапазон.</param>
      <param name="value" vsli:raw="The sequence to compare to the end of the source span.">Последовательность, сравниваемая с концом исходного диапазона.</param>
      <typeparam name="T" vsli:raw="The type of the span.">Тип диапазона.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the end of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если <paramref name="value" /> соответствует концу <paramref name="span" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.EnumerateRunes(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Returns an enumeration of &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; from the provided read-only span.">Возвращает перечисление <see cref="T:System.Text.Rune" /> из предоставленного диапазона, доступного только для чтения.</summary>
      <param name="span" vsli:raw="The source span.">Исходный диапазон.</param>
      <returns vsli:raw="A rune enumerator.">Перечислитель Rune.</returns>
    </member>
    <member name="M:System.MemoryExtensions.EnumerateRunes(System.Span{System.Char})">
      <summary vsli:raw="Returns an enumeration of &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; from the provided span.">Возвращает перечисление <see cref="T:System.Text.Rune" /> из предоставленного диапазона.</summary>
      <param name="span" vsli:raw="The source span.">Исходный диапазон.</param>
      <returns vsli:raw="A rune enumerator.">Перечислитель Rune.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Equals(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Determines whether this &lt;paramref name=&quot;span&quot; /&gt; and the specified &lt;paramref name=&quot;other&quot; /&gt; span have the same characters when compared using the specified &lt;paramref name=&quot;comparisonType&quot; /&gt; option.">Определяет, имеет ли <paramref name="span" /> и указанный диапазон <paramref name="other" /> одинаковые символы при сравнении с использованием указанного параметра <paramref name="comparisonType" />.</summary>
      <param name="span" vsli:raw="The source span.">Исходный диапазон.</param>
      <param name="other" vsli:raw="The value to compare with the source span.">Значение для сравнения с исходным диапазоном.</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt; are compared.">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="other" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if equal, &lt;see langword=&quot;false&quot; /&gt; otherwise.">Значение <see langword="true" />, если объекты равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Reports the zero-based index of the first occurrence of the specified &lt;paramref name=&quot;value&quot; /&gt; in the current &lt;paramref name=&quot;span&quot; /&gt;.">Возвращает индекс с отсчетом от нуля первого вхождения указанного <paramref name="value" /> в текущем <paramref name="span" />.</summary>
      <param name="span" vsli:raw="The source span.">Исходный диапазон.</param>
      <param name="value" vsli:raw="The value to seek within the source span.">Значение, которое необходимо найти в исходном диапазоне.</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="value" />.</param>
      <returns vsli:raw="The index of the occurrence of the value in the span.">Индекс вхождения значения в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">Выполняет поиск указанного значения и возвращает индекс его первого вхождения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value" vsli:raw="The value to search for.">Значение, которое нужно найти.</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">Тип диапазона и значения.</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">Индекс вхождения значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">Выполняет поиск указанной последовательности и возвращает индекс ее первого вхождения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value" vsli:raw="The sequence to search for.">Искомая последовательность.</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">Тип диапазона и значения.</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">Индекс вхождения значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">Выполняет поиск указанного значения и возвращает индекс его первого вхождения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value" vsli:raw="The value to search for.">Значение, которое нужно найти.</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">Тип диапазона и значения.</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">Индекс вхождения значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its first occurrence. Values are compared using IEquatable{T}.Equals(T).">Выполняет поиск указанной последовательности и возвращает индекс ее первого вхождения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value" vsli:raw="The sequence to search for.">Искомая последовательность.</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">Тип диапазона и значения.</typeparam>
      <returns vsli:raw="The index of the occurrence of the value in the span. If not found, returns -1.">Индекс вхождения значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value0" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <param name="value1" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">Тип диапазона и значений.</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">Первый индекс вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value0" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <param name="value1" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <param name="value2" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">Тип диапазона и значений.</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">Первый индекс вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="values" vsli:raw="The set of values to search for.">Набор значений для поиска.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">Тип диапазона и значений.</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">Первый индекс вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value0" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <param name="value1" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">Тип диапазона и значений.</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">Первый индекс вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value0" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <param name="value1" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <param name="value2" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">Тип диапазона и значений.</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">Первый индекс вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the first index of any of the specified values similar to calling IndexOf several times with the logical OR operator.">Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="values" vsli:raw="The set of values to search for.">Набор значений для поиска.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">Тип диапазона и значений.</typeparam>
      <returns vsli:raw="The first index of the occurrence of any of the values in the span. If not found, returns -1.">Первый индекс вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IsWhiteSpace(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Indicates whether the specified span contains only whitespace characters.">Указывает, содержит ли указанный диапазон только символы пробела.</summary>
      <param name="span" vsli:raw="The source span.">Исходный диапазон.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the span contains only whitespace characters, &lt;see langword=&quot;false&quot; /&gt; otherwise.">Значение <see langword="true" />, если диапазон содержит только пробелы, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Reports the zero-based index of the last occurrence of the specified &lt;paramref name=&quot;value&quot; /&gt; in the current &lt;paramref name=&quot;span&quot; /&gt;.">Возвращает индекс с отсчетом от нуля последнего вхождения указанного <paramref name="value" /> в текущем <paramref name="span" />.</summary>
      <param name="span" vsli:raw="The source span.">Исходный диапазон.</param>
      <param name="value" vsli:raw="The value to seek within the source span.">Значение, которое необходимо найти в исходном диапазоне.</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="value" />.</param>
      <returns vsli:raw="The index of the last occurrence of the value in the span.">Индекс последнего вхождения значения в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">Выполняет поиск указанного значения и возвращает индекс его последнего вхождения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value" vsli:raw="The value to search for.">Значение, которое нужно найти.</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">Тип диапазона и значения.</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">Индекс последнего вхождения значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">Выполняет поиск указанной последовательности и возвращает индекс ее последнего вхождения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value" vsli:raw="The sequence to search for.">Искомая последовательность.</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">Тип диапазона и значения.</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">Индекс последнего вхождения значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},``0)">
      <summary vsli:raw="Searches for the specified value and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">Выполняет поиск указанного значения и возвращает индекс его последнего вхождения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value" vsli:raw="The value to search for.">Значение, которое нужно найти.</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">Тип диапазона и значения.</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">Индекс последнего вхождения значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the specified sequence and returns the index of its last occurrence. Values are compared using IEquatable{T}.Equals(T).">Выполняет поиск указанной последовательности и возвращает индекс ее последнего вхождения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value" vsli:raw="The sequence to search for.">Искомая последовательность.</param>
      <typeparam name="T" vsli:raw="The type of the span and value.">Тип диапазона и значения.</typeparam>
      <returns vsli:raw="The index of the last occurrence of the value in the span. If not found, returns -1.">Индекс последнего вхождения значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value0" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <param name="value1" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">Тип диапазона и значений.</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">Индекс последнего вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value0" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <param name="value1" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <param name="value2" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">Тип диапазона и значений.</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">Индекс последнего вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="values" vsli:raw="The set of values to search for.">Набор значений для поиска.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">Тип диапазона и значений.</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">Индекс последнего вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value0" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <param name="value1" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">Тип диапазона и значений.</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">Индекс последнего вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0,``0)">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value0" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <param name="value1" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <param name="value2" vsli:raw="One of the values to search for.">Одно из искомых значений.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">Тип диапазона и значений.</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">Индекс последнего вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Searches for the last index of any of the specified values similar to calling LastIndexOf several times with the logical OR operator.">Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="values" vsli:raw="The set of values to search for.">Набор значений для поиска.</param>
      <typeparam name="T" vsli:raw="The type of the span and values.">Тип диапазона и значений.</typeparam>
      <returns vsli:raw="The index of the last occurrence of any of the values in the span. If not found, returns -1.">Индекс последнего вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether two read-only sequences overlap in memory.">Определяет, перекрываются ли две последовательности только для чтения в памяти.</summary>
      <param name="span" vsli:raw="The first sequence.">Первая последовательность.</param>
      <param name="other" vsli:raw="The second sequence.">Вторая последовательность.</param>
      <typeparam name="T" vsli:raw="The type of elements in the read-only sequence.">Тип елминтс в последовательности, доступной только для чтения.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если две последовательности перекрываются; в противном случае —значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32@)">
      <summary vsli:raw="Determines whether two read-only sequences overlap in memory and outputs the element offset.">Определяет, перекрываются ли две последовательности только для чтения в памяти, и выводит смещение элементов.</summary>
      <param name="span" vsli:raw="The first sequence.">Первая последовательность.</param>
      <param name="other" vsli:raw="The second sequence.">Вторая последовательность.</param>
      <param name="elementOffset" vsli:raw="When the method returns, contains the offset between &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;." />
      <typeparam name="T" vsli:raw="The type of elements in the span.">Тип элементов в диапазоне.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если две последовательности перекрываются; в противном случае —значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a span and a read-only span overlap in memory.">Определяет, перекрываются ли диапазон и диапазон только для чтения в памяти.</summary>
      <param name="span" vsli:raw="The span to compare.">Сравниваемый диапазон.</param>
      <param name="other" vsli:raw="The read-only span to compare.">Доступный только для чтения диапазон для сравнения.</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">Тип элементов в диапазоне.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если две последовательности перекрываются; в противном случае —значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)">
      <summary vsli:raw="Determines whether a span and a read-only span overlap in memory and outputs the element offset.">Определяет, перекрываются ли диапазон и диапазон только для чтения в памяти, и выводит смещение элементов.</summary>
      <param name="span" vsli:raw="The first sequence to compare.">Сравниваемая первая последовательность.</param>
      <param name="other" vsli:raw="The second sequence to compare.">Сравниваемая вторая последовательность.</param>
      <param name="elementOffset" vsli:raw="When the method returns, contains the offset between &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;.">При возврате из метода содержит смещение между <paramref name="span" /> и <paramref name="other" />.</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">Тип элементов в диапазоне.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences overlap; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если две последовательности перекрываются; в противном случае —значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Reverse``1(System.Span{``0})">
      <summary vsli:raw="Reverses the sequence of the elements in the entire span.">Изменяет порядок элементов во всем массиве на обратный.</summary>
      <param name="span" vsli:raw="The span to reverse.">Диапазон для изменения порядка.</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">Тип элементов в диапазоне.</typeparam>
    </member>
    <member name="M:System.MemoryExtensions.SequenceCompareTo``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines the relative order of two read-only sequences by comparing their elements using IComparable{T}.CompareTo(T).">Определяет относительный порядок двух последовательностей только для чтения путем сравнения их элементов с помощью IComparable{T}.CompareTo (T).</summary>
      <param name="span" vsli:raw="The first sequence to compare.">Сравниваемая первая последовательность.</param>
      <param name="other" vsli:raw="The second sequence to compare.">Сравниваемая вторая последовательность.</param>
      <typeparam name="T" vsli:raw="The type of elements in the sequence.">Тип элементов в последовательности.</typeparam>
      <returns vsli:raw="A signed integer that indicates the relative order of &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;:&lt;br /&gt;   - If less than 0, &lt;paramref name=&quot;span&quot; /&gt; precedes than &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If 0, &lt;paramref name=&quot;span&quot; /&gt; equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If greater than 0, &lt;paramref name=&quot;span&quot; /&gt; follows &lt;paramref name=&quot;other&quot; /&gt;.">Целое число со знаком, представляющее относительный порядок <paramref name="span" /> и <paramref name="other" />:   — Если значение меньше 0, <paramref name="span" /> предшествует <paramref name="other" />.   — Если 0, <paramref name="span" /> равно <paramref name="other" />.   — Если значение больше 0, <paramref name="span" /> стоит после <paramref name="other" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceCompareTo``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines the relative order of a span and a read-only span by comparing the elements using IComparable{T}.CompareTo(T).">Определяет относительный порядок диапазона и диапазона только для чтения путем сравнения их элементов с помощью IComparable{T}.CompareTo (T).</summary>
      <param name="span" vsli:raw="The span to compare.">Сравниваемый диапазон.</param>
      <param name="other" vsli:raw="The read-only span to compare.">Доступный только для чтения диапазон для сравнения.</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">Тип элементов в диапазоне.</typeparam>
      <returns vsli:raw="A signed integer that indicates the relative order of &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;other&quot; /&gt;:&lt;br /&gt;   - If less than 0, &lt;paramref name=&quot;span&quot; /&gt; precedes than &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If 0, &lt;paramref name=&quot;span&quot; /&gt; equals &lt;paramref name=&quot;other&quot; /&gt;.&lt;br /&gt;   - If greater than 0, &lt;paramref name=&quot;span&quot; /&gt; follows &lt;paramref name=&quot;other&quot; /&gt;.">Целое число со знаком, представляющее относительный порядок <paramref name="span" /> и <paramref name="other" />:   — Если значение меньше 0, <paramref name="span" /> предшествует <paramref name="other" />.   — Если 0, <paramref name="span" /> равно <paramref name="other" />.   — Если значение больше 0, <paramref name="span" /> стоит после <paramref name="other" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether two read-only sequences are equal by comparing the elements using IEquatable{T}.Equals(T).">Определяет, равны ли две последовательности только для чтения, сравнивая элементы с помощью IEquatable{T}.Equals (T).</summary>
      <param name="span" vsli:raw="The first sequence to compare.">Сравниваемая первая последовательность.</param>
      <param name="other" vsli:raw="The second sequence to compare.">Сравниваемая вторая последовательность.</param>
      <typeparam name="T" vsli:raw="The type of elements in the sequence.">Тип элементов в последовательности.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если две последовательности равны, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a span and a read-only span are equal by comparing the elements using IEquatable{T}.Equals(T).">Определяет, равны ли диапазон и диапазон только для чтения, сравнивая элементы с помощью IEquatable{T}.Equals (T).</summary>
      <param name="span" vsli:raw="The span to compare.">Сравниваемый диапазон.</param>
      <param name="other" vsli:raw="The read-only span to compare.">Доступный только для чтения диапазон для сравнения.</param>
      <typeparam name="T" vsli:raw="The type of elements in the sequence.">Тип элементов в последовательности.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если две последовательности равны, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary vsli:raw="Determines whether a read-only character span begins with a specified value when compared using a specified &lt;see cref=&quot;T:System.StringComparison&quot; /&gt; value.">Определяет, начинается ли диапазон символов только для чтения с указанного значения при сравнении с использованием указанного значения <see cref="T:System.StringComparison" />.</summary>
      <param name="span" vsli:raw="The source span.">Исходный диапазон.</param>
      <param name="value" vsli:raw="The sequence to compare to the beginning of the source span.">Последовательность, сравниваемая с началом исходного диапазона.</param>
      <param name="comparisonType" vsli:raw="An enumeration value that determines how &lt;paramref name=&quot;span&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are compared.">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="value" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the beginning of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если <paramref name="value" /> соответствует началу <paramref name="span" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a specified sequence appears at the start of a read-only span.">Определяет, отображается ли указанная последовательность в начале диапазона, доступного только для чтения.</summary>
      <param name="span" vsli:raw="The read-only character span to search.">Искомый диапазон символов только для чтения.</param>
      <param name="value" vsli:raw="A sequence to search for at the start of &lt;paramref name=&quot;span&quot; /&gt;.">Последовательность для поиска в начале <paramref name="span" />.</param>
      <typeparam name="T" vsli:raw="The type of elements in the span.">Тип элементов в диапазоне.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the beginning of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если <paramref name="value" /> соответствует началу <paramref name="span" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Determines whether a specified sequence appears at the start of a span.">Определяет, отображается ли указанная последовательность в начале диапазона.</summary>
      <param name="span" vsli:raw="The span to search.">Искомый диапазон.</param>
      <param name="value" vsli:raw="A sequence to search for at the start of &lt;paramref name=&quot;span&quot; /&gt;.">Последовательность для поиска в начале <paramref name="span" />.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">Тип элементов в диапазоне.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the beginning of &lt;paramref name=&quot;span&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если <paramref name="value" /> соответствует началу <paramref name="span" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.ToLower(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the specified culture.">Копирует символы из исходного диапазона в место назначения, преобразуя каждый символ в нижний регистр, используя правила учета регистра указанного языка и региональных параметров.</summary>
      <param name="source" vsli:raw="The source span.">Исходный диапазон.</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">Целевой диапазон, содержащий преобразованные символы.</param>
      <param name="culture" vsli:raw="An object that supplies culture-specific casing rules.">Объект, задающий правила определения регистра для языка и региональных параметров.</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">Количество символов, записанных в целевой диапазон. Если целевой диапазон слишком мал, возвращает значение –1.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">Исходный и целевой буферы перекрываются.</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToLowerInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to lowercase, using the casing rules of the invariant culture.">Копирует символы из исходного диапазона в место назначения, преобразуя каждый символ в нижний регистр, используя правила учета регистра инвариантного языка и региональных параметров.</summary>
      <param name="source" vsli:raw="The source span.">Исходный диапазон.</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">Целевой диапазон, содержащий преобразованные символы.</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">Количество символов, записанных в целевой диапазон. Если целевой диапазон слишком мал, возвращает значение –1.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">Исходный и целевой буферы перекрываются.</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToUpper(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to uppercase, using the casing rules of the specified culture.">Копирует символы из исходного диапазона в место назначения, преобразуя каждый символ в верхний регистр, используя правила учета регистра указанного языка и региональных параметров.</summary>
      <param name="source" vsli:raw="The source span.">Исходный диапазон.</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">Целевой диапазон, содержащий преобразованные символы.</param>
      <param name="culture" vsli:raw="An object that supplies culture-specific casing rules.">Объект, задающий правила определения регистра для языка и региональных параметров.</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">Количество символов, записанных в целевой диапазон. Если целевой диапазон слишком мал, возвращает значение –1.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">Исходный и целевой буферы перекрываются.</exception>
    </member>
    <member name="M:System.MemoryExtensions.ToUpperInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <summary vsli:raw="Copies the characters from the source span into the destination, converting each character to uppercase using the casing rules of the invariant culture.">Копирует символы из исходного диапазона в место назначения, преобразуя каждый символ в верхний регистр, используя правила учета регистра инвариантного языка и региональных параметров.</summary>
      <param name="source" vsli:raw="The source span.">Исходный диапазон.</param>
      <param name="destination" vsli:raw="The destination span which contains the transformed characters.">Целевой диапазон, содержащий преобразованные символы.</param>
      <returns vsli:raw="The number of characters written into the destination span. If the destination is too small, returns -1.">Количество символов, записанных в целевой диапазон. Если целевой диапазон слишком мал, возвращает значение –1.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The source and destination buffers overlap.">Исходный и целевой буферы перекрываются.</exception>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.Memory{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a character memory region.">Удаляет все начальные и конечные пробелы из области памяти символов.</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">Исходная память, из которой удаляются символы.</param>
      <returns vsli:raw="The trimmed character memory region.">Область памяти с усеченными символами.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlyMemory{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a read-only character memory region.">Удаляет все начальные и конечные пробелы из области памяти символов только для чтения.</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">Исходная память, из которой удаляются символы.</param>
      <returns vsli:raw="The trimmed character memory region.">Область памяти с усеченными символами.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a read-only character span.">Удаляет все начальные и конечные пробелы из диапазона символов только для чтения.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">Исходный диапазон, из которого удаляются символы.</param>
      <returns vsli:raw="The trimmed read-only character span.">Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.Char)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified character from a read-only character span.">Удаляет все начальные и конечные вхождения указанного символа из диапазона символов, доступного только для чтения.</summary>
      <param name="span" vsli:raw="The source span from which the character is removed.">Исходный диапазон, из которого удаляется символ.</param>
      <param name="trimChar" vsli:raw="The specified character to look for and remove.">Указанный символ для поиска и удаления.</param>
      <returns vsli:raw="The trimmed read-only character span.">Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of characters specified in a read-only span from a read-only character span.">Удаляет все начальные и конечные вхождения набора символов, указанного в диапазоне только для чтения, из диапазона символов, доступного только для чтения.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">Исходный диапазон, из которого удаляются символы.</param>
      <param name="trimChars" vsli:raw="The span which contains the set of characters to remove.">Диапазон, содержащий набор символов для удаления.</param>
      <returns vsli:raw="The trimmed read-only character span.">Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.Span{System.Char})">
      <summary vsli:raw="Removes all leading and trailing whitespace characters from a character span.">Удаляет все начальные и конечные пробелы из диапазона символов.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">Исходный диапазон, из которого удаляются символы.</param>
      <returns vsli:raw="The trimmed character span.">Диапазон усеченных символов.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Memory{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a memory region.">Удаляет все начальные и конечные вхождения указанного элемента из области памяти.</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">Исходная память, из которой удаляется элемент.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">Тип элементов в области памяти.</typeparam>
      <returns vsli:raw="The trimmed memory region.">Область усеченной памяти.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a memory region.">Удаляет все начальные и конечные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти.</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">Исходная память, из которой удаляются элементы.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">Тип элементов в области памяти.</typeparam>
      <returns vsli:raw="The trimmed memory region.">Область усеченной памяти.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a read-only memory region.">Удаляет все начальные и конечные вхождения указанного элемента из области памяти только для чтения.</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">Исходная память, из которой удаляется элемент.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">Тип элементов в области памяти, доступной только для чтения.</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">Усеченная область памяти, доступная только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a read-only memory region.">Удаляет все начальные и конечные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти только для чтения.</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">Исходная память, из которой удаляются элементы.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">Тип элементов в области памяти, доступной только для чтения.</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">Усеченная область памяти, доступная только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a read-only span.">Удаляет все начальные и конечные вхождения указанного элемента из диапазона только для чтения.</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">Исходный диапазон, из которого удаляется элемент.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">Тип элементов в диапазоне, доступном только для чтения.</typeparam>
      <returns vsli:raw="The trimmed read-only span.">Усеченный диапазон, доступный только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a read-only span.">Удаляет все начальные и конечные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона только для чтения.</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">Исходный диапазон, из которого удаляются элементы.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">Тип элементов в диапазоне, доступном только для чтения.</typeparam>
      <returns vsli:raw="The trimmed read-only span.">Усеченный диапазон, доступный только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Span{``0},``0)">
      <summary vsli:raw="Removes all leading and trailing occurrences of a specified element from a span.">Удаляет все начальные и конечные вхождения указанного элемента из диапазона.</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">Исходный диапазон, из которого удаляется элемент.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">Тип элементов в диапазоне.</typeparam>
      <returns vsli:raw="The trimmed span.">Усеченный диапазон.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading and trailing occurrences of a set of elements specified in a read-only span from a span.">Удаляет все начальные и конечные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона.</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">Исходный диапазон, из которого удаляются элементы.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">Тип элементов в диапазоне.</typeparam>
      <returns vsli:raw="The trimmed span.">Усеченный диапазон.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.Memory{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a character memory region.">Удаляет все конечные пробелы из области памяти символов.</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">Исходная память, из которой удаляются символы.</param>
      <returns vsli:raw="The trimmed character memory region.">Область памяти с усеченными символами.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlyMemory{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a read-only character memory region.">Удаляет все конечные пробелы из области памяти символов только для чтения.</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">Исходная память, из которой удаляются символы.</param>
      <returns vsli:raw="The trimmed read-only character span.">Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a read-only character span.">Удаляет все конечные пробелы из диапазона символов только для чтения.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">Исходный диапазон, из которого удаляются символы.</param>
      <returns vsli:raw="The trimmed read-only character span.">Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.Char)">
      <summary vsli:raw="Removes all trailing occurrences of a specified character from a read-only span.">Удаляет все конечные вхождения указанного символа из диапазона только для чтения.</summary>
      <param name="span" vsli:raw="The source span from which the character is removed.">Исходный диапазон, из которого удаляется символ.</param>
      <param name="trimChar" vsli:raw="The specified character to look for and remove.">Указанный символ для поиска и удаления.</param>
      <returns vsli:raw="The trimmed read-only character span.">Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all trailing occurrences of a set of characters specified in a read-only span from a read-only character span.">Удаляет все конечные вхождения набора символов, указанного в диапазоне только для чтения, из диапазона символов, доступного только для чтения.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">Исходный диапазон, из которого удаляются символы.</param>
      <param name="trimChars" vsli:raw="The span which contains the set of characters to remove.">Диапазон, содержащий набор символов для удаления.</param>
      <returns vsli:raw="The trimmed read-only character span.">Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.Span{System.Char})">
      <summary vsli:raw="Removes all trailing whitespace characters from a character span.">Удаляет все конечные пробелы из диапазона символов.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">Исходный диапазон, из которого удаляются символы.</param>
      <returns vsli:raw="The trimmed character span.">Диапазон усеченных символов.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a character memory region.">Удаляет все конечные вхождения указанного элемента из области памяти символов.</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">Исходная память, из которой удаляется элемент.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">Тип элементов в области памяти.</typeparam>
      <returns vsli:raw="The trimmed memory region.">Область усеченной памяти.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a memory region.">Удаляет все конечные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти.</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">Исходная память, из которой удаляются элементы.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">Тип элементов в области памяти.</typeparam>
      <returns vsli:raw="The trimmed memory region.">Область усеченной памяти.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a read-only memory region.">Удаляет все конечные вхождения указанного элемента из области памяти только для чтения.</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">Исходная память, из которой удаляется элемент.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">Тип элементов в области памяти, доступной только для чтения.</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">Усеченная область памяти, доступная только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a read-only memory region.">Удаляет все конечные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти только для чтения.</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">Исходная память, из которой удаляются элементы.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">Тип элементов в области памяти, доступной только для чтения.</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">Усеченная область памяти, доступная только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a read-only span.">Удаляет все конечные вхождения указанного элемента из диапазона только для чтения.</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">Исходный диапазон, из которого удаляется элемент.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">Тип элементов в диапазоне, доступном только для чтения.</typeparam>
      <returns vsli:raw="The trimmed read-only span.">Усеченный диапазон, доступный только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a read-only span.">Удаляет все конечные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона только для чтения.</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">Исходный диапазон, из которого удаляются элементы.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">Тип элементов в диапазоне, доступном только для чтения.</typeparam>
      <returns vsli:raw="The trimmed read-only span.">Усеченный диапазон, доступный только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},``0)">
      <summary vsli:raw="Removes all trailing occurrences of a specified element from a span.">Удаляет все конечные вхождения указанного элемента из диапазона.</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">Исходный диапазон, из которого удаляется элемент.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">Тип элементов в диапазоне.</typeparam>
      <returns vsli:raw="The trimmed span.">Усеченный диапазон.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all trailing occurrences of a set of elements specified in a read-only span from a span.">Удаляет все конечные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона.</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">Исходный диапазон, из которого удаляются элементы.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">Тип элементов в диапазоне.</typeparam>
      <returns vsli:raw="The trimmed span.">Усеченный диапазон.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.Memory{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a memory region.">Удаляет все начальные пробелы из области памяти.</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">Исходная память, из которой удаляются символы.</param>
      <returns vsli:raw="The trimmed character memory region.">Область памяти с усеченными символами.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlyMemory{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a read-only memory region.">Удаляет все начальные пробелы из области памяти только для чтения.</summary>
      <param name="memory" vsli:raw="The source memory from which the characters are removed.">Исходная память, из которой удаляются символы.</param>
      <returns vsli:raw="The trimmed read-only character memory region.">Область памяти усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a read-only span.">Удаляет все начальные пробелы из диапазона только для чтения.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">Исходный диапазон, из которого удаляются символы.</param>
      <returns vsli:raw="The trimmed read-only character span.">Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.Char)">
      <summary vsli:raw="Removes all leading occurrences of a specified character from the span.">Удаляет все начальные вхождения указанного символа из диапазона.</summary>
      <param name="span" vsli:raw="The source span from which the character is removed.">Исходный диапазон, из которого удаляется символ.</param>
      <param name="trimChar" vsli:raw="The specified character to look for and remove.">Указанный символ для поиска и удаления.</param>
      <returns vsli:raw="The trimmed read-only character span.">Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary vsli:raw="Removes all leading occurrences of a set of characters specified in a read-only span from the span.">Удаляет все начальные вхождения набора символов, заданного в диапазоне только для чтения, из диапазона.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">Исходный диапазон, из которого удаляются символы.</param>
      <param name="trimChars" vsli:raw="The span which contains the set of characters to remove.">Диапазон, содержащий набор символов для удаления.</param>
      <returns vsli:raw="The trimmed read-only character span.">Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.Span{System.Char})">
      <summary vsli:raw="Removes all leading whitespace characters from a span.">Удаляет все начальные пробелы из диапазона.</summary>
      <param name="span" vsli:raw="The source span from which the characters are removed.">Исходный диапазон, из которого удаляются символы.</param>
      <returns vsli:raw="The trimmed character span.">Диапазон усеченных символов.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from a memory region.">Удаляет все начальные вхождения указанного элемента из области памяти.</summary>
      <param name="memory" vsli:raw="The source memory region from which the element is removed.">Исходная область памяти, из которой удаляется элемент.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">Тип элементов в области памяти.</typeparam>
      <returns vsli:raw="The trimmed memory region.">Область усеченной памяти.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from a memory region.">Удаляет все начальные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти.</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">Исходная память, из которой удаляются элементы.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the memory region.">Тип элементов в области памяти.</typeparam>
      <returns vsli:raw="The trimmed memory region.">Область усеченной памяти.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from a memory region.">Удаляет все начальные вхождения указанного элемента из области памяти.</summary>
      <param name="memory" vsli:raw="The source memory from which the element is removed.">Исходная память, из которой удаляется элемент.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">Тип элементов в области памяти, доступной только для чтения.</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">Усеченная область памяти, доступная только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from a memory region.">Удаляет все начальные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти.</summary>
      <param name="memory" vsli:raw="The source memory from which the elements are removed.">Исходная память, из которой удаляются элементы.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only memory region.">Тип элементов в области памяти, доступной только для чтения.</typeparam>
      <returns vsli:raw="The trimmed read-only memory region.">Усеченная область памяти, доступная только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from the span.">Удаляет все начальные вхождения указанного элемента из диапазона.</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">Исходный диапазон, из которого удаляется элемент.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">Тип элементов в диапазоне, доступном только для чтения.</typeparam>
      <returns vsli:raw="The trimmed read-only span.">Усеченный диапазон, доступный только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from the span.">Удаляет все начальные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона.</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">Исходный диапазон, из которого удаляются элементы.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the read-only span.">Тип элементов в диапазоне, доступном только для чтения.</typeparam>
      <returns vsli:raw="The trimmed read-only span.">Усеченный диапазон, доступный только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},``0)">
      <summary vsli:raw="Removes all leading occurrences of a specified element from the span.">Удаляет все начальные вхождения указанного элемента из диапазона.</summary>
      <param name="span" vsli:raw="The source span from which the element is removed.">Исходный диапазон, из которого удаляется элемент.</param>
      <param name="trimElement" vsli:raw="The specified element to look for and remove.">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">Тип элементов в диапазоне.</typeparam>
      <returns vsli:raw="The trimmed span.">Усеченный диапазон.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary vsli:raw="Removes all leading occurrences of a set of elements specified in a read-only span from the span.">Удаляет все начальные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона.</summary>
      <param name="span" vsli:raw="The source span from which the elements are removed.">Исходный диапазон, из которого удаляются элементы.</param>
      <param name="trimElements" vsli:raw="The span which contains the set of elements to remove.">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T" vsli:raw="The type of the elements in the span.">Тип элементов в диапазоне.</typeparam>
      <returns vsli:raw="The trimmed span.">Усеченный диапазон.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MemoryMarshal">
      <summary vsli:raw="Provides methods to interoperate with &lt;see cref=&quot;T:System.Memory`1&quot; /&gt;, &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;,  &lt;see cref=&quot;T:System.Span`1&quot; /&gt;, and  &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt;.">Предоставляет методы для взаимодействия с объектами <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" /> и <see cref="T:System.ReadOnlySpan`1" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})">
      <summary vsli:raw="Casts a &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; of one primitive type, &lt;paramref name=&quot;T&quot; /&gt;, to a &lt;see langword=&quot;ReadOnlySpan&amp;lt;Byte&amp;gt;&quot; /&gt;.">Приводит объект <see cref="T:System.ReadOnlySpan`1" /> одного примитивного типа (<paramref name="T" />) к <see langword="ReadOnlySpan&lt;Byte&gt;" />.</summary>
      <param name="span" vsli:raw="The source slice to convert.">Преобразуемый исходный срез.</param>
      <typeparam name="T" vsli:raw="The type of items in the read-only span.">Тип элементов в диапазоне, доступном только для чтения.</typeparam>
      <returns vsli:raw="A read-only span of type &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Массив с доступом только для чтения с типом <see cref="T:System.Byte" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> содержит ссылки или указатели.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt; property of the new &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; would exceed &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;">Свойство <see cref="P:System.ReadOnlySpan`1.Length" /> нового типа <see cref="T:System.ReadOnlySpan`1" /> будет превышать <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})">
      <summary vsli:raw="Casts a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; of one primitive type, &lt;paramref name=&quot;T&quot; /&gt;, to a &lt;see langword=&quot;Span&amp;lt;Byte&amp;gt;&quot; /&gt;.">Приводит объект <see cref="T:System.Span`1" /> одного примитивного типа (<paramref name="T" />) к <see langword="Span&lt;Byte&gt;" />.</summary>
      <param name="span" vsli:raw="The source slice to convert.">Преобразуемый исходный срез.</param>
      <typeparam name="T" vsli:raw="The type of items in the span.">Тип элементов в диапазоне.</typeparam>
      <returns vsli:raw="A span of type &lt;see cref=&quot;T:System.Byte&quot; /&gt;.">Массив с типом <see cref="T:System.Byte" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> содержит ссылки или указатели.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The &lt;see cref=&quot;P:System.ReadOnlySpan`1.Length&quot; /&gt; property of the new &lt;see cref=&quot;T:System.ReadOnlySpan`1&quot; /&gt; would exceed &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;">Свойство <see cref="P:System.Span`1.Length" /> нового типа <see cref="T:System.Span`1" /> будет превышать <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; instance from a &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">Создание экземпляра <see cref="T:System.Memory`1" /> на основе <see cref="T:System.ReadOnlyMemory`1" />.</summary>
      <param name="memory" vsli:raw="The read-only memory buffer.">Буфер памяти с доступом только для чтения.</param>
      <typeparam name="T" vsli:raw="The type of items in the read-only memory buffer.">Тип элементов в буфере памяти, доступном только для чтения.</typeparam>
      <returns vsli:raw="A memory block that represents the same memory as the &lt;see cref=&quot;T:System.ReadOnlyMemory`1&quot; /&gt;.">Блок памяти, который представляет ту же область памяти, что и <see cref="T:System.ReadOnlyMemory`1" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reinterprets a read-only span of bytes as a read-only reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">Повторно интерпретирует массив байтов только для чтения как ссылку только для чтения на структуру типа <paramref name="T" />.</summary>
      <param name="span" vsli:raw="The read-only span to reinterpret.">Повторно интерпретируемый массив с доступом только для чтения.</param>
      <typeparam name="T" vsli:raw="The type of the returned reference.">Тип возвращаемой ссылки.</typeparam>
      <returns vsli:raw="The read-only reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">Ссылка только для чтения на структуру типа <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.Span{System.Byte})">
      <summary vsli:raw="Reinterprets a span of bytes as a reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">Повторно интерпретирует массив байтов как ссылку на структуру типа <paramref name="T" />.</summary>
      <param name="span" vsli:raw="The span to reinterpret.">Повторно интерпретируемая массив.</param>
      <typeparam name="T" vsli:raw="The type of the returned reference.">Тип возвращаемой ссылки.</typeparam>
      <returns vsli:raw="The reference to the structure of type &lt;paramref name=&quot;T&quot; /&gt;.">Ссылка на структуру типа <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})">
      <summary vsli:raw="Casts a read-only span of one primitive type to a read-only span of another primitive type.">Приводит массив с доступом только для чтения с одним примитивным типом к массиву с доступом только для чтения с другим примитивным типом.</summary>
      <param name="span" vsli:raw="The source slice to convert.">Преобразуемый исходный срез.</param>
      <typeparam name="TFrom" vsli:raw="The type of the source span.">Тип исходного диапазона.</typeparam>
      <typeparam name="TTo" vsli:raw="The type of the target span.">Тип целевого диапазона.</typeparam>
      <returns vsli:raw="The converted read-only span.">Преобразованный массив с доступом только для чтения.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;TFrom&quot; /&gt; or &lt;paramref name=&quot;TTo&quot; /&gt; contains managed object references.">
        <paramref name="TFrom" /> или <paramref name="TTo" /> содержит ссылки либо указатели.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})">
      <summary vsli:raw="Casts a span of one primitive type to a span of another primitive type.">Приводит массив одного примитивного типа к массиву другого примитивного типа.</summary>
      <param name="span" vsli:raw="The source slice to convert.">Преобразуемый исходный срез.</param>
      <typeparam name="TFrom" vsli:raw="The type of the source span.">Тип исходного диапазона.</typeparam>
      <typeparam name="TTo" vsli:raw="The type of the target span.">Тип целевого диапазона.</typeparam>
      <returns vsli:raw="The converted span.">Преобразованный массив.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;TFrom&quot; /&gt; or &lt;paramref name=&quot;TTo&quot; /&gt; contains managed object references.">
        <paramref name="TFrom" /> или <paramref name="TTo" /> содержит ссылки либо указатели.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates a new memory buffer over the portion of the pre-pinned target array beginning at the &lt;paramref name=&quot;start&quot; /&gt; index and consisting of &lt;paramref name=&quot;length&quot; /&gt; items.">Создает новый буфер памяти размером, который соответствует части предварительно привязанного целевого массива с начальным индексом <paramref name="start" /> и количеством элементов <paramref name="length" />.</summary>
      <param name="array" vsli:raw="The pre-pinned source array.">Исходный массив с предварительной привязкой.</param>
      <param name="start" vsli:raw="The index of &lt;paramref name=&quot;array&quot; /&gt; at which to begin the memory block.">Индекс <paramref name="array" />, с которого определяется начало блока памяти.</param>
      <param name="length" vsli:raw="The number of items to include in the memory block.">Количество элементов, которые будут включены в блок памяти.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Тип массива.</typeparam>
      <returns vsli:raw="A block of memory over the specified elements of &lt;paramref name=&quot;array&quot; /&gt;. If &lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or if &lt;paramref name=&quot;start&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are 0, the method returns a &lt;see cref=&quot;T:System.Memory`1&quot; /&gt; instance of &lt;see cref=&quot;P:System.Memory`1.Length&quot; /&gt; zero.">Блок памяти, содержащий указанные элементы <paramref name="array" />. Если <paramref name="array" /> имеет значение <see langword="null" />, а <paramref name="start" /> и <paramref name="length" /> — 0, метод возвращает экземпляр <see cref="T:System.Memory`1" /> со свойством <see cref="P:System.Memory`1.Length" />, равным 0.</returns>
      <exception cref="T:System.ArrayTypeMismatchException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is covariant, and the type of &lt;paramref name=&quot;array&quot; /&gt; is not exactly &lt;paramref name=&quot;T[]&quot; /&gt;.">Параметр <paramref name="array" /> является ковариантным, и <paramref name="array" /> не обязательно будет иметь тип <paramref name="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;start&quot; /&gt; or the end index is not in the range of 0 to &lt;see cref=&quot;P:System.Array.Length&quot; /&gt;.">Индекс <paramref name="start" /> или конечный индекс не входит в диапазон от 0 до <see cref="P:System.Array.Length" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)">
      <summary vsli:raw="Creates a new read-only span over a portion of a regular managed object.">Создает новый массив с доступом только для чтения в области памяти, которая соответствует части обычного управляемого объекта.</summary>
      <param name="reference" vsli:raw="A reference to data.">Ссылка на данные.</param>
      <param name="length" vsli:raw="The number of &lt;paramref name=&quot;T&quot; /&gt; elements that &lt;paramref name=&quot;reference&quot; /&gt; contains.">Количество элементов <paramref name="T" />, содержащихся в <paramref name="reference" />.</param>
      <typeparam name="T" vsli:raw="The type of the data items.">Тип элементов данных.</typeparam>
      <returns vsli:raw="A read-only span.">Массив с доступом только для чтения.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)">
      <summary vsli:raw="Creates a new span over a portion of a regular managed object.">Создает массив в области памяти, которая соответствует части обычного управляемого объекта.</summary>
      <param name="reference" vsli:raw="A reference to data.">Ссылка на данные.</param>
      <param name="length" vsli:raw="The number of &lt;paramref name=&quot;T&quot; /&gt; elements that &lt;paramref name=&quot;reference&quot; /&gt; contains.">Количество элементов <paramref name="T" />, содержащихся в <paramref name="reference" />.</param>
      <typeparam name="T" vsli:raw="The type of the data items.">Тип элементов данных.</typeparam>
      <returns vsli:raw="A span.">Массив.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})">
      <summary vsli:raw="Returns a reference to the element of the read-only span at index 0.">Возвращает ссылку на элемент массива с доступом только для чтения с нулевым индексом.</summary>
      <param name="span" vsli:raw="The read-only span from which the reference is retrieved.">Массив с доступом только для чтения, из которого извлекается ссылка.</param>
      <typeparam name="T" vsli:raw="The type of items in the span.">Тип элементов в диапазоне.</typeparam>
      <returns vsli:raw="A reference to the element at index 0.">Ссылка на элемент с нулевым индексом.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})">
      <summary vsli:raw="Returns a reference to the element of the span at index 0.">Возвращает ссылку на элемент массива с нулевым индексом.</summary>
      <param name="span" vsli:raw="The span from which the reference is retrieved.">Массив, из которого извлекается ссылка.</param>
      <typeparam name="T" vsli:raw="The type of items in the span.">Тип элементов в диапазоне.</typeparam>
      <returns vsli:raw="A reference to the element at index 0.">Ссылка на элемент с нулевым индексом.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})">
      <summary vsli:raw="Reads a structure of type &lt;typeparamref name=&quot;T&quot; /&gt; out of a read-only span of bytes.">Считывает структуру типа <param name="T" /> из массива байтов с доступом только для чтения.</summary>
      <param name="source" vsli:raw="A read-only span.">Массив с доступом только для чтения.</param>
      <typeparam name="T" vsli:raw="The type of the item to retrieve from the read-only span.">Тип элемента, извлекаемого из диапазона, доступного только для чтения.</typeparam>
      <returns vsli:raw="The structure retrieved from the read-only span.">Структура, полученная из массива с доступом только для чтения.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> содержит ссылки или указатели.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is smaller than &lt;paramref name=&quot;T&quot; /&gt;'s length in bytes.">
        <paramref name="source" /> меньше <paramref name="T" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; view of the given read-only memory buffer.">Создает представление <see cref="T:System.Collections.Generic.IEnumerable`1" /> для указанного буфера памяти с доступом только для чтения.</summary>
      <param name="memory" vsli:raw="A read-only memory buffer.">Буфер памяти только для чтения.</param>
      <typeparam name="T" vsli:raw="The type of the items in the read-only memory buffer.">Тип элементов в буфере памяти, доступном только для чтения.</typeparam>
      <returns vsli:raw="An enumerable view of &lt;paramref name=&quot;memory&quot; /&gt;.">Представление перечисляемого типа <paramref name="memory" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)">
      <summary vsli:raw="Tries to get an array segment from the underlying memory buffer. The return value indicates the success of the operation.">Предпринимается попытка получить сегмент массива из внутреннего буфера памяти с доступом только для чтения. Возвращаемое значение указывает на успешное выполнение операции.</summary>
      <param name="memory" vsli:raw="A read-only memory buffer.">Буфер памяти только для чтения.</param>
      <param name="segment" vsli:raw="When this method returns, contains the array segment retrieved from the underlying read-only memory buffer. If the method fails, the method returns a default array segment.">При возврате из метода содержит сегмент массива, полученный из внутреннего буфера памяти с доступом только для чтения. Если при выполнении метода произойдет сбой, метод вернет сегмент массива по умолчанию.</param>
      <typeparam name="T" vsli:raw="The type of items in the read-only memory buffer.">Тип элементов в буфере памяти, доступном только для чтения.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method call succeeds; &lt;see langword=&quot;false&quot; /&gt; otherwise.">Если вызов метода выполнен успешно, возвращается значение <see langword="true" />. В противном случае возвращается <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)">
      <summary vsli:raw="Tries to retrieve a &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt; from the underlying read-only memory buffer.">Предпринимается попытка получить <see cref="T:System.Buffers.MemoryManager`1" /> из внутреннего памяти буфера памяти с доступом только для чтения.</summary>
      <param name="memory" vsli:raw="The read-only memory buffer for which to get the memory manager.">Буфер памяти с доступом только для чтения, для которого нужно получить объект диспетчера памяти.</param>
      <param name="manager" vsli:raw="When the method returns, the manager of &lt;paramref name=&quot;memory&quot; /&gt;.">После возврата из метода содержится объект диспетчера <paramref name="memory" />.</param>
      <typeparam name="T" vsli:raw="The type of the items in the read-only memory buffer.">Тип элементов в буфере памяти, доступном только для чтения.</typeparam>
      <typeparam name="TManager" vsli:raw="The type of the &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt; to retrieve.">Тип <see cref="T:System.Buffers.MemoryManager`1" /> извлекаемого объекта.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method retrieved the memory manager; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Если методу удалось получить объект диспетчера памяти, возвращается значение <see langword="true" />. В противном случае возвращается <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)">
      <summary vsli:raw="Tries to retrieve a &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt;, start index, and length from the underlying read-only memory buffer.">Предпринимается попытка получить <see cref="T:System.Buffers.MemoryManager`1" /> (начальный индекс) из внутреннего буфера памяти с доступом только для чтения.</summary>
      <param name="memory" vsli:raw="The read-only memory buffer for which to get the memory manager.">Буфер памяти с доступом только для чтения, для которого нужно получить объект диспетчера памяти.</param>
      <param name="manager" vsli:raw="When the method returns, the manager of &lt;paramref name=&quot;memory&quot; /&gt;.">После возврата из метода содержится объект диспетчера <paramref name="memory" />.</param>
      <param name="start" vsli:raw="When the method returns, the offset from the start of the &lt;paramref name=&quot;manager&quot; /&gt; that the &lt;paramref name=&quot;memory&quot; /&gt; represents.">После возврата из метода этот параметр указывает на смещение от начала <paramref name="manager" />, которое представляет <paramref name="memory" />.</param>
      <param name="length" vsli:raw="When the method returns, the length of the &lt;paramref name=&quot;manager&quot; /&gt; that the &lt;paramref name=&quot;memory&quot; /&gt; represents.">После возврата из метода этот параметр указывает длину <paramref name="manager" />, которое представляет <paramref name="memory" />.</param>
      <typeparam name="T" vsli:raw="The type of the items in the read-only memory buffer.">Тип элементов в буфере памяти, доступном только для чтения.</typeparam>
      <typeparam name="TManager" vsli:raw="The type of the &lt;see cref=&quot;T:System.Buffers.MemoryManager`1&quot; /&gt; to retrieve.">Тип <see cref="T:System.Buffers.MemoryManager`1" /> извлекаемого объекта.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeded; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Если метод выполнен успешно, возвращается значение <see langword="true" />. В противном случае возвращается <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)">
      <summary vsli:raw="Tries to get the underlying string from a &lt;see langword=&quot;System.ReadOnlyMemory&amp;lt;Char&amp;gt;&quot; /&gt;.">Предпринимает попытку получить базовую строку из <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</summary>
      <param name="memory" vsli:raw="Read-only memory containing a block of characters.">Память с доступом только для чтения, содержащая блок символов.</param>
      <param name="text" vsli:raw="When the method returns, the string contained in the memory buffer.">После возврата из метода этот параметр указывает на строку, содержащуюся в буфере памяти.</param>
      <param name="start" vsli:raw="The starting location in &lt;paramref name=&quot;text&quot; /&gt;.">Начальное расположение в <paramref name="text" />.</param>
      <param name="length" vsli:raw="The number of characters in &lt;paramref name=&quot;text&quot; /&gt;.">Количество символов в <paramref name="text" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method successfully retrieves the underlying string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Если метод успешно извлекает базовую строку, возвращается значение <see langword="true" />. В противном случае возвращается <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)">
      <summary vsli:raw="Tries to read a structure of type &lt;paramref name=&quot;T&quot; /&gt; from a read-only span of bytes.">Пытается считать структуру типа <paramref name="T" /> из массива байтов только для чтения.</summary>
      <param name="source" vsli:raw="A read-only span of bytes.">Массив байтов с доступом только для чтения.</param>
      <param name="value" vsli:raw="When the method returns, an instance of &lt;paramref name=&quot;T&quot; /&gt;.">После возврата из метода этот параметр указывает на экземпляр <paramref name="T" />.</param>
      <typeparam name="T" vsli:raw="The type of the structure to retrieve.">Тип извлекаемой структуры.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeds in retrieving an instance of the structure; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Если метод успешно извлекает экземпляр структуры, возвращается значение <see langword="true" />. В противном случае возвращается <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> содержит ссылки или указатели.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)">
      <summary vsli:raw="Tries to write a structure of type &lt;paramref name=&quot;T&quot; /&gt; into a span of bytes.">Предпринимается попытка записать структуру типа <paramref name="T" /> в массив байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes to contain the structure.">Массив байтов, который содержит структуру.</param>
      <param name="value" vsli:raw="The structure to be written to the span.">Структура, которая будет записана в массив.</param>
      <typeparam name="T" vsli:raw="The type of the structure.">Тип структуры.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the write operation succeeded; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The method returns &lt;see langword=&quot;false&quot; /&gt; if the span is too small to contain &lt;paramref name=&quot;T&quot; /&gt;.">Если операция записи выполнена успешно, возвращается значение <see langword="true" />. В противном случае возвращается <see langword="false" />. Метод возвращает <see langword="false" />, если в массив не помещается <paramref name="T" />.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> содержит ссылки или указатели.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)">
      <summary vsli:raw="Writes a structure of type &lt;paramref name=&quot;T&quot; /&gt; into a span of bytes.">Записывает структуру типа <paramref name="T" /> в массив байтов.</summary>
      <param name="destination" vsli:raw="The span of bytes to contain the structure.">Массив байтов, который содержит структуру.</param>
      <param name="value" vsli:raw="The structure to be written to the span.">Структура, которая будет записана в массив.</param>
      <typeparam name="T" vsli:raw="The type of the structure.">Тип структуры.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;T&quot; /&gt; contains managed object references.">
        <paramref name="T" /> содержит ссылки или указатели.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;destination&quot; /&gt; is too small to contain &lt;paramref name=&quot;value&quot; /&gt;.">В <paramref name="destination" /> не помещается <paramref name="value" />.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SequenceMarshal">
      <summary vsli:raw="Provides a collection of methods for interoperating with &lt;see cref=&quot;T:System.Buffers.ReadOnlySequence`1&quot; /&gt;.">Предоставляет коллекцию методов для взаимодействия с <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetArray``1(System.Buffers.ReadOnlySequence{``0},System.ArraySegment{``0}@)">
      <summary vsli:raw="Gets an array segment from the underlying read-only sequence.">Возвращает сегмент массива из базовой последовательности, доступной только для чтения.</summary>
      <param name="sequence" vsli:raw="The read-only sequence from which the array segment will be retrieved.">Доступная только для чтения последовательность, из которой будет извлечен сегмент массива.</param>
      <param name="segment" vsli:raw="The returned array segment.">Возвращаемый сегмент массива.</param>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">Тип последовательности, доступной только для чтения.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if it's possible to retrieve the array segment; otherwise, &lt;see langword=&quot;false&quot; /&gt; and a default array segment is returned.">Значение <see langword="true" />, если можно извлечь сегмент массива; в противном случае — значение <see langword="false" /> и возвращается сегмент массива по умолчанию.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlyMemory``1(System.Buffers.ReadOnlySequence{``0},System.ReadOnlyMemory{``0}@)">
      <summary vsli:raw="Attempts to retrieve a read-only memory from the specified read-only sequence.">Пытается получить доступную только для чтения память из указанной последовательности, доступной только для чтения.</summary>
      <param name="sequence" vsli:raw="The read-only sequence from which the memory will be retrieved.">Доступная только для чтения последовательность, из которой будет извлечена память.</param>
      <param name="memory" vsli:raw="The returned read-only memory of type T.">Возвращенная память только для чтения типа T.</param>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">Тип последовательности, доступной только для чтения.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read-only memory can be retrieved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если можно получить доступную только для чтения память; в противном случае —значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlySequenceSegment``1(System.Buffers.ReadOnlySequence{``0},System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@,System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@)">
      <summary vsli:raw="Attempts to retrieve a read-only sequence segment from the specified read-only sequence.">Пытается получить доступный только для чтения сегмент последовательности из указанной последовательности, доступной только для чтения.</summary>
      <param name="sequence" vsli:raw="The read-only sequence from which the read-only sequence segment will be retrieved.">Доступная только для чтения последовательность, из которой будет извлечен сегмент последовательности только для чтения.</param>
      <param name="startSegment" vsli:raw="The beginning read-only sequence segment.">Начальный сегмент последовательности только для чтения.</param>
      <param name="startIndex" vsli:raw="The initial position.">Начальная позиция.</param>
      <param name="endSegment" vsli:raw="The ending read-only sequence segment.">Конечный сегмент последовательности только для чтения.</param>
      <param name="endIndex" vsli:raw="The final position.">Конечная позиция.</param>
      <typeparam name="T" vsli:raw="The type of the read-only sequence.">Тип последовательности, доступной только для чтения.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read-only sequence segment can be retrieved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если можно получить доступный только для чтения сегмент последовательности; в противном случае —значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryRead``1(System.Buffers.SequenceReader{System.Byte}@,``0@)">
      <summary vsli:raw="Attempts to read the specified type out of the buffer. It's dangerous to use this method with arbitrary structs - see remarks for more information.">Пытается прочитать указанный тип из буфера. Использовать этот метод с произвольными структурами небезопасно — дополнительные сведения см. в примечаниях.</summary>
      <param name="reader" vsli:raw="A reference to the sequence reader.">Ссылка на средство чтения последовательности.</param>
      <param name="value" vsli:raw="The returned value if the read was successful. &lt;paramref name=&quot;value&quot; /&gt; will be &lt;see langword=&quot;default&quot; /&gt; if failed (due to lack of space).">Возвращаемое значение, если чтение прошло успешно. <paramref name="value" /> будет иметь значение <see langword="default" />, если завершится сбоем (из-за нехватки места).</param>
      <typeparam name="T" vsli:raw="The type of the value.">Тип значения.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the read attempt was successful, &lt;see langword=&quot;false&quot; /&gt; otherwise.">Значение <see langword="true" />, если попытка чтения была успешной; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.SequencePosition">
      <summary vsli:raw="Represents a position in a non-contiguous set of memory. Properties of this type should not be interpreted by anything but the type that created it.">Представляет расположение в несмежном наборе памяти. Свойства этого типа должны интерпретироваться только типом, который его создал.</summary>
    </member>
    <member name="M:System.SequencePosition.#ctor(System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; struct.">Инициализирует новый экземпляр структуры <see cref="T:System.SequencePosition" />.</summary>
      <param name="object" vsli:raw="A non-contiguous set of memory.">Несмежный набор памяти.</param>
      <param name="integer" vsli:raw="The position in &lt;paramref name=&quot;object&quot; /&gt;.">Позиция в <paramref name="object" />.</param>
    </member>
    <member name="M:System.SequencePosition.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the current instance is equal to another object.">Возвращает значение, показывающее, равен ли текущий экземпляр другому объекту.</summary>
      <param name="obj" vsli:raw="The object to compare with the current instance.">Объект для сравнения с текущим экземпляром.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is of type &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt; and is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если значение <paramref name="obj" /> имеет тип <see cref="T:System.SequencePosition" /> и равно текущему экземпляру; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.SequencePosition.Equals(System.SequencePosition)">
      <summary vsli:raw="Indicates whether the current instance is equal to another &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt;.">Определяет равенство текущего экземпляра и другого объекта <see cref="T:System.SequencePosition" />.</summary>
      <param name="other" vsli:raw="The sequence position to compare with the current instance.">Расположение последовательности, сравниваемое с текущим экземпляром.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are equal; &lt;see langword=&quot;false&quot; /&gt; otherwise.">
        <see langword="true" />, если два экземпляра равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.SequencePosition.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Возвращает хэш-код данного экземпляра.</summary>
      <returns vsli:raw="The hash code for this instance.">Хэш-код данного экземпляра.</returns>
    </member>
    <member name="M:System.SequencePosition.GetInteger">
      <summary vsli:raw="Returns the integer part of this &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt;.">Возвращает целую часть <see cref="T:System.SequencePosition" />.</summary>
      <returns vsli:raw="The integer part of this sequence position.">Целая часть этой позиции последовательности.</returns>
    </member>
    <member name="M:System.SequencePosition.GetObject">
      <summary vsli:raw="Returns the object part of this &lt;see cref=&quot;T:System.SequencePosition&quot; /&gt;.">Возвращает часть объекта <see cref="T:System.SequencePosition" />.</summary>
      <returns vsli:raw="The object part of this sequence position.">Объектная часть этой позиции последовательности.</returns>
    </member>
    <member name="T:System.Text.SpanRuneEnumerator">
      <summary vsli:raw="Provides an enumerator for the &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; values represented by a span containing UTF-16 text.">Предоставляет перечислитель для значений <see cref="T:System.Text.Rune" />, представленных диапазоном текста в кодировке UTF-16.</summary>
    </member>
    <member name="P:System.Text.SpanRuneEnumerator.Current">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; at the current position of the enumerator.">Возвращает <see cref="T:System.Text.Rune" /> в текущем положении перечислителя.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Text.Rune" /> в текущем положении перечислителя.</returns>
    </member>
    <member name="M:System.Text.SpanRuneEnumerator.GetEnumerator">
      <summary vsli:raw="Returns the current enumerator instance.">Возвращает текущий экземпляр перечислителя.</summary>
      <returns vsli:raw="The current enumerator instance.">Текущий экземпляр перечислителя.</returns>
    </member>
    <member name="M:System.Text.SpanRuneEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next &lt;see cref=&quot;T:System.Text.Rune&quot; /&gt; of the span.">Перемещает перечислитель к следующему элементу <see cref="T:System.Text.Rune" /> диапазона.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator successfully advanced to the next item; &lt;see langword=&quot;false&quot; /&gt; if the end of the span has been reached.">Значение <see langword="true" />, если перечислитель успешно перемещен к следующему элементу. Значение <see langword="false" />, если достигнут конец диапазона.</returns>
    </member>
  </members>
</doc>
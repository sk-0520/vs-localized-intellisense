<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Intrinsics</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Intrinsics.Vector128" />
    <member name="M:System.Runtime.Intrinsics.Vector128.As``2(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> типа <typeparamref name="T" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> типа <typeparamref name="U" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <typeparam name="U">Тип, в котором вектор <paramref name="vector" /> должен интерпретироваться как.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> типа <typeparam name="U" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) или тип целевого объекта (<typeparamref name="U" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsByte``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.Byte" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.Byte" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsDouble``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.Double" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsInt16``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.Int16" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.Int16" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsInt32``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.Int32" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsInt64``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.Int64" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsSByte``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.SByte" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.SByte" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsSingle``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.Single" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.Single" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsUInt16``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.UInt16" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.UInt16" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsUInt32``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.UInt32" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.UInt32" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.AsUInt64``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.UInt64" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector128" /> типа <see cref="T:System.UInt64" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Byte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <param name="e4">Значение, которым будет инициализирован элемент 4.</param>
      <param name="e5">Значение, которым будет инициализирован элемент 5.</param>
      <param name="e6">Значение, которым будет инициализирован элемент 6.</param>
      <param name="e7">Значение, которым будет инициализирован элемент 7.</param>
      <param name="e8">Значение, которым будет инициализирован элемент 8.</param>
      <param name="e9">Значение, которым будет инициализирован элемент 9.</param>
      <param name="e10">Значение, которым будет инициализирован элемент 10.</param>
      <param name="e11">Значение, которым будет инициализирован элемент 11.</param>
      <param name="e12">Значение, которым будет инициализирован элемент 12.</param>
      <param name="e13">Значение, которым будет инициализирован элемент 13.</param>
      <param name="e14">Значение, которым будет инициализирован элемент 14.</param>
      <param name="e15">Значение, которым будет инициализирован элемент 15.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Double)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Double,System.Double)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Int16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <param name="e4">Значение, которым будет инициализирован элемент 4.</param>
      <param name="e5">Значение, которым будет инициализирован элемент 5.</param>
      <param name="e6">Значение, которым будет инициализирован элемент 6.</param>
      <param name="e7">Значение, которым будет инициализирован элемент 7.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Int32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Int64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Int64,System.Int64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.Byte},System.Runtime.Intrinsics.Vector64{System.Byte})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 64 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 64 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.Double},System.Runtime.Intrinsics.Vector64{System.Double})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 64 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 64 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.Int16},System.Runtime.Intrinsics.Vector64{System.Int16})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 64 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 64 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.Int32},System.Runtime.Intrinsics.Vector64{System.Int32})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 64 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 64 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.Int64},System.Runtime.Intrinsics.Vector64{System.Int64})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 64 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 64 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.SByte},System.Runtime.Intrinsics.Vector64{System.SByte})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 64 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 64 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.Single},System.Runtime.Intrinsics.Vector64{System.Single})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 64 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 64 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.UInt16},System.Runtime.Intrinsics.Vector64{System.UInt16})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 64 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 64 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.UInt32},System.Runtime.Intrinsics.Vector64{System.UInt32})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 64 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 64 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Runtime.Intrinsics.Vector64{System.UInt64},System.Runtime.Intrinsics.Vector64{System.UInt64})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 64 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 64 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.SByte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <param name="e4">Значение, которым будет инициализирован элемент 4.</param>
      <param name="e5">Значение, которым будет инициализирован элемент 5.</param>
      <param name="e6">Значение, которым будет инициализирован элемент 6.</param>
      <param name="e7">Значение, которым будет инициализирован элемент 7.</param>
      <param name="e8">Значение, которым будет инициализирован элемент 8.</param>
      <param name="e9">Значение, которым будет инициализирован элемент 9.</param>
      <param name="e10">Значение, которым будет инициализирован элемент 10.</param>
      <param name="e11">Значение, которым будет инициализирован элемент 11.</param>
      <param name="e12">Значение, которым будет инициализирован элемент 12.</param>
      <param name="e13">Значение, которым будет инициализирован элемент 13.</param>
      <param name="e14">Значение, которым будет инициализирован элемент 14.</param>
      <param name="e15">Значение, которым будет инициализирован элемент 15.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Single)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.Single,System.Single,System.Single,System.Single)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.UInt16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <param name="e4">Значение, которым будет инициализирован элемент 4.</param>
      <param name="e5">Значение, которым будет инициализирован элемент 5.</param>
      <param name="e6">Значение, которым будет инициализирован элемент 6.</param>
      <param name="e7">Значение, которым будет инициализирован элемент 7.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.UInt32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.UInt64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.Create(System.UInt64,System.UInt64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.Byte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.Double)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.Int16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.Int32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.Int64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.SByte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.Single)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.UInt16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.UInt32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalar(System.UInt64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.Byte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.Double)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.Int16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.Int32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.Int64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.SByte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.Single)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.UInt16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.UInt32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.CreateScalarUnsafe(System.UInt64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.GetElement``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32)">
      <summary>Получает элемент с указанным индексом.</summary>
      <param name="vector">Вектор, из которого извлекается элемент.</param>
      <param name="index">Индекс элемента, который нужно получить.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Значение элемента по индексу <paramref name="index" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> меньше нуля или больше числа элементов.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.GetLower``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Возвращает значение нижних 64 бит в качестве нового <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</summary>
      <param name="vector">Вектор для получения нижних 64 бит.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Значение нижних 64 бит в качестве нового <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.GetUpper``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Получает значение верхних 64 бит в качестве нового <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</summary>
      <param name="vector">Вектор для получения верхних 64 бит.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Значение верхних 64 бит в качестве нового <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.ToScalar``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Преобразует заданный вектор в скаляр, содержащий значение первого элемента.</summary>
      <param name="vector">Вектор, из которого извлекается первый элемент.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Скаляр <typeparamref name="T" />, содержащий значение первого элемента.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.ToVector256``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Преобразует заданный вектор в новый <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> с нижними 128 битами, равными значению заданного вектора, и верхними 128 битами, равными нулю.</summary>
      <param name="vector">Вектор для расширения.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Новый <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> с нижними 128 битами, равными значению <paramref name="vector" />, и верхними 128 битами, инициализированными нулем.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.ToVector256Unsafe``1(System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Преобразует заданный вектор в новый <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> с нижними 128 битами, равными значению заданного вектора, и неинициализированными верхними 128 битами.</summary>
      <param name="vector">Вектор для расширения.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Новый <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> с нижними 128 битами, равными значению <paramref name="vector" />, и неинициализированными верхними 128 битами.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.WithElement``1(System.Runtime.Intrinsics.Vector128{``0},System.Int32,``0)">
      <summary>Создает новый <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> с элементом по указанному индексу, для которого задано указанное значение, а остальные элементы получают то же значение, что и в данном векторе.</summary>
      <param name="vector">Вектор, из которого нужно получить оставшиеся элементы.</param>
      <param name="index">Задаваемый индекс элемента.</param>
      <param name="value">Значение, для присваивания элементу.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> со значением элемента по индексу <paramref name="index" />, равному <paramref name="value" />, а остальные элементы получают то же значение, что и в <paramref name="vector" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> меньше нуля или больше числа элементов.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.WithLower``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Создает новый <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> с нижними 64 битами, для которых задано указанное значение, и верхними 64 битами, для которых задано же значение, что и в указанном векторе.</summary>
      <param name="vector">Вектор для получения верхних 64 бит.</param>
      <param name="value">Значение нижних 64 бит в качестве <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Новый <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> с нижними 64 битами, для которых задано указанное значение, и верхними 64 битами, для которых задано же значение, что и в заданном <paramref name="vector" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128.WithUpper``1(System.Runtime.Intrinsics.Vector128{``0},System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Создает новый <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> с верхними 64 битами, для которых задано указанное значение, а нижние 64 бит получают то же значение, что и в данном векторе.</summary>
      <param name="vector">Вектор для получения нижних 64 бит.</param>
      <param name="value">Значение верхних 64 бит в качестве <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Новый <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> с верхними 64 битами, для которых задано указанное значение, а нижние 64 бит получают то же значение, что и в <paramref name="vector" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="T:System.Runtime.Intrinsics.Vector128`1">
      <typeparam name="T" />
    </member>
    <member name="P:System.Runtime.Intrinsics.Vector128`1.Count">
      <summary>Возвращает количество объектов <typeparamref name="T" />, содержащихся в <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128`1.Equals(System.Object)">
      <summary>Определяет, равен ли указанный объект текущему экземпляру.</summary>
      <param name="obj">Объект для сравнения с текущим экземпляром.</param>
      <returns>Значение <c>true</c>, если <paramref name="obj" /> является объектом <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, равным текущему экземпляру; в противном случае — значение <c>false</c>.</returns>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128`1.Equals(System.Runtime.Intrinsics.Vector128{`0})">
      <summary>Определяет, равен ли указанный объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> текущему экземпляру.</summary>
      <param name="other">
        <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> для сравнения с текущим экземпляром.</param>
      <returns>Значение <c>true</c>, если <paramref name="other" /> является объектом, равным текущему экземпляру; в противном случае — значение <c>false</c>.</returns>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128`1.GetHashCode">
      <summary>Получает хэш-код для экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector128`1.ToString">
      <summary>Преобразует текущий экземпляр в эквивалентное ему строковое представление.</summary>
      <returns>Эквивалентное строковое представление текущего экземпляра.</returns>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="P:System.Runtime.Intrinsics.Vector128`1.Zero">
      <summary>Возвращает новый объект <see cref="T:System.Runtime.Intrinsics.Vector128`1" />, все элементы которого инициализированы нулевыми значениями.</summary>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="T:System.Runtime.Intrinsics.Vector256" />
    <member name="M:System.Runtime.Intrinsics.Vector256.As``2(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> типа <typeparamref name="T" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> типа <typeparamref name="U" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <typeparam name="U">Тип, в котором вектор <paramref name="vector" /> должен интерпретироваться как.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> типа <typeparam name="U" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) или тип целевого объекта (<typeparamref name="U" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsByte``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.Byte" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.Byte" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsDouble``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.Double" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsInt16``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.Int16" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.Int16" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsInt32``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.Int32" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsInt64``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.Int64" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsSByte``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.SByte" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.SByte" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsSingle``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.Single" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.Single" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsUInt16``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.UInt16" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.UInt16" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsUInt32``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.UInt32" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.UInt32" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.AsUInt64``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.UInt64" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector256" /> типа <see cref="T:System.UInt64" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Byte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <param name="e4">Значение, которым будет инициализирован элемент 4.</param>
      <param name="e5">Значение, которым будет инициализирован элемент 5.</param>
      <param name="e6">Значение, которым будет инициализирован элемент 6.</param>
      <param name="e7">Значение, которым будет инициализирован элемент 7.</param>
      <param name="e8">Значение, которым будет инициализирован элемент 8.</param>
      <param name="e9">Значение, которым будет инициализирован элемент 9.</param>
      <param name="e10">Значение, которым будет инициализирован элемент 10.</param>
      <param name="e11">Значение, которым будет инициализирован элемент 11.</param>
      <param name="e12">Значение, которым будет инициализирован элемент 12.</param>
      <param name="e13">Значение, которым будет инициализирован элемент 13.</param>
      <param name="e14">Значение, которым будет инициализирован элемент 14.</param>
      <param name="e15">Значение, которым будет инициализирован элемент 15.</param>
      <param name="e16">Значение, которым будет инициализирован элемент 16.</param>
      <param name="e17">Значение, которым будет инициализирован элемент 17.</param>
      <param name="e18">Значение, которым будет инициализирован элемент 18.</param>
      <param name="e19">Значение, которым будет инициализирован элемент 19.</param>
      <param name="e20">Значение, которым будет инициализирован элемент 20.</param>
      <param name="e21">Значение, которым будет инициализирован элемент 21.</param>
      <param name="e22">Значение, которым будет инициализирован элемент 22.</param>
      <param name="e23">Значение, которым будет инициализирован элемент 23.</param>
      <param name="e24">Значение, которым будет инициализирован элемент 24.</param>
      <param name="e25">Значение, которым будет инициализирован элемент 25.</param>
      <param name="e26">Значение, которым будет инициализирован элемент 26.</param>
      <param name="e27">Значение, которым будет инициализирован элемент 27.</param>
      <param name="e28">Значение, которым будет инициализирован элемент 28.</param>
      <param name="e29">Значение, которым будет инициализирован элемент 29.</param>
      <param name="e30">Значение, которым будет инициализирован элемент 30.</param>
      <param name="e31">Значение, которым будет инициализирован элемент 31.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Double)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Double,System.Double,System.Double,System.Double)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Int16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <param name="e4">Значение, которым будет инициализирован элемент 4.</param>
      <param name="e5">Значение, которым будет инициализирован элемент 5.</param>
      <param name="e6">Значение, которым будет инициализирован элемент 6.</param>
      <param name="e7">Значение, которым будет инициализирован элемент 7.</param>
      <param name="e8">Значение, которым будет инициализирован элемент 8.</param>
      <param name="e9">Значение, которым будет инициализирован элемент 9.</param>
      <param name="e10">Значение, которым будет инициализирован элемент 10.</param>
      <param name="e11">Значение, которым будет инициализирован элемент 11.</param>
      <param name="e12">Значение, которым будет инициализирован элемент 12.</param>
      <param name="e13">Значение, которым будет инициализирован элемент 13.</param>
      <param name="e14">Значение, которым будет инициализирован элемент 14.</param>
      <param name="e15">Значение, которым будет инициализирован элемент 15.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Int32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <param name="e4">Значение, которым будет инициализирован элемент 4.</param>
      <param name="e5">Значение, которым будет инициализирован элемент 5.</param>
      <param name="e6">Значение, которым будет инициализирован элемент 6.</param>
      <param name="e7">Значение, которым будет инициализирован элемент 7.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Int64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Int64,System.Int64,System.Int64,System.Int64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 128 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 128 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 128 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 128 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 128 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 128 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 128 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 128 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 128 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 128 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 128 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 128 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 128 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 128 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 128 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 128 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 128 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 128 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> на основе двух экземпляров <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="lower">Значение, которым будут инициализированы младшие 128 бит.</param>
      <param name="upper">Значение, которым будут инициализированы старшие 128 бит.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, инициализированный на основе <paramref name="lower" /> и <paramref name="upper" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.SByte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <param name="e4">Значение, которым будет инициализирован элемент 4.</param>
      <param name="e5">Значение, которым будет инициализирован элемент 5.</param>
      <param name="e6">Значение, которым будет инициализирован элемент 6.</param>
      <param name="e7">Значение, которым будет инициализирован элемент 7.</param>
      <param name="e8">Значение, которым будет инициализирован элемент 8.</param>
      <param name="e9">Значение, которым будет инициализирован элемент 9.</param>
      <param name="e10">Значение, которым будет инициализирован элемент 10.</param>
      <param name="e11">Значение, которым будет инициализирован элемент 11.</param>
      <param name="e12">Значение, которым будет инициализирован элемент 12.</param>
      <param name="e13">Значение, которым будет инициализирован элемент 13.</param>
      <param name="e14">Значение, которым будет инициализирован элемент 14.</param>
      <param name="e15">Значение, которым будет инициализирован элемент 15.</param>
      <param name="e16">Значение, которым будет инициализирован элемент 16.</param>
      <param name="e17">Значение, которым будет инициализирован элемент 17.</param>
      <param name="e18">Значение, которым будет инициализирован элемент 18.</param>
      <param name="e19">Значение, которым будет инициализирован элемент 19.</param>
      <param name="e20">Значение, которым будет инициализирован элемент 20.</param>
      <param name="e21">Значение, которым будет инициализирован элемент 21.</param>
      <param name="e22">Значение, которым будет инициализирован элемент 22.</param>
      <param name="e23">Значение, которым будет инициализирован элемент 23.</param>
      <param name="e24">Значение, которым будет инициализирован элемент 24.</param>
      <param name="e25">Значение, которым будет инициализирован элемент 25.</param>
      <param name="e26">Значение, которым будет инициализирован элемент 26.</param>
      <param name="e27">Значение, которым будет инициализирован элемент 27.</param>
      <param name="e28">Значение, которым будет инициализирован элемент 28.</param>
      <param name="e29">Значение, которым будет инициализирован элемент 29.</param>
      <param name="e30">Значение, которым будет инициализирован элемент 30.</param>
      <param name="e31">Значение, которым будет инициализирован элемент 31.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Single)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <param name="e4">Значение, которым будет инициализирован элемент 4.</param>
      <param name="e5">Значение, которым будет инициализирован элемент 5.</param>
      <param name="e6">Значение, которым будет инициализирован элемент 6.</param>
      <param name="e7">Значение, которым будет инициализирован элемент 7.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.UInt16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <param name="e4">Значение, которым будет инициализирован элемент 4.</param>
      <param name="e5">Значение, которым будет инициализирован элемент 5.</param>
      <param name="e6">Значение, которым будет инициализирован элемент 6.</param>
      <param name="e7">Значение, которым будет инициализирован элемент 7.</param>
      <param name="e8">Значение, которым будет инициализирован элемент 8.</param>
      <param name="e9">Значение, которым будет инициализирован элемент 9.</param>
      <param name="e10">Значение, которым будет инициализирован элемент 10.</param>
      <param name="e11">Значение, которым будет инициализирован элемент 11.</param>
      <param name="e12">Значение, которым будет инициализирован элемент 12.</param>
      <param name="e13">Значение, которым будет инициализирован элемент 13.</param>
      <param name="e14">Значение, которым будет инициализирован элемент 14.</param>
      <param name="e15">Значение, которым будет инициализирован элемент 15.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.UInt32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <param name="e4">Значение, которым будет инициализирован элемент 4.</param>
      <param name="e5">Значение, которым будет инициализирован элемент 5.</param>
      <param name="e6">Значение, которым будет инициализирован элемент 6.</param>
      <param name="e7">Значение, которым будет инициализирован элемент 7.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.UInt64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.Create(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.Byte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.Double)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.Int16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.Int32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.Int64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.SByte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.Single)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.UInt16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.UInt32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalar(System.UInt64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.Byte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.Double)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.Int16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.Int32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.Int64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.SByte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.Single)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.UInt16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.UInt32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.CreateScalarUnsafe(System.UInt64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.GetElement``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32)">
      <summary>Получает элемент с указанным индексом.</summary>
      <param name="vector">Вектор, из которого извлекается элемент.</param>
      <param name="index">Индекс элемента, который нужно получить.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Значение элемента по индексу <paramref name="index" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> меньше нуля или больше числа элементов.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.GetLower``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Возвращает значение нижних 128 бит в качестве нового <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="vector">Вектор для получения нижних 128 бит.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Значение нижних 128 бит в качестве нового <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.GetUpper``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Возвращает значение верхних 128 бит в качестве нового <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</summary>
      <param name="vector">Вектор для получения верхних 128 бит.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Значение верхних 128 бит в качестве нового <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.ToScalar``1(System.Runtime.Intrinsics.Vector256{``0})">
      <summary>Преобразует заданный вектор в скаляр, содержащий значение первого элемента.</summary>
      <param name="vector">Вектор, из которого извлекается первый элемент.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Скаляр <typeparamref name="T" />, содержащий значение первого элемента.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.WithElement``1(System.Runtime.Intrinsics.Vector256{``0},System.Int32,``0)">
      <summary>Создает новый <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> с элементом по указанному индексу, для которого задано указанное значение, а остальные элементы получают то же значение, что и в данном векторе.</summary>
      <param name="vector">Вектор, из которого нужно получить оставшиеся элементы.</param>
      <param name="index">Задаваемый индекс элемента.</param>
      <param name="value">Значение, для присваивания элементу.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> со значением элемента по индексу <paramref name="index" />, равному <paramref name="value" />, а остальные элементы получают то же значение, что и в <paramref name="vector" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> меньше нуля или больше числа элементов.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.WithLower``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Создает новый <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> с нижними 128 битами, для которых задано указанное значение, а верхние 128 бит получают то же значение, что и в данном векторе.</summary>
      <param name="vector">Вектор для получения верхних 128 бит.</param>
      <param name="value">Значение нижних 128 бит в качестве <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Новый <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> с нижними 128 битами, для которых задано указанное значение, а верхние 128 бит получают то же значение, что и в <paramref name="vector" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256.WithUpper``1(System.Runtime.Intrinsics.Vector256{``0},System.Runtime.Intrinsics.Vector128{``0})">
      <summary>Создает новый <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> с верхними 128 битами, для которых задано указанное значение, а нижние 128 бит получают то же значение, что и в данном векторе.</summary>
      <param name="vector">Вектор для получения нижних 128 бит.</param>
      <param name="value">Значение верхних 128 бит в качестве <see cref="T:System.Runtime.Intrinsics.Vector128`1" />.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Новый <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> с верхними 128 битами, для которых задано указанное значение, а нижние 128 бит получают то же значение, что и в <paramref name="vector" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="T:System.Runtime.Intrinsics.Vector256`1">
      <typeparam name="T" />
    </member>
    <member name="P:System.Runtime.Intrinsics.Vector256`1.Count">
      <summary>Возвращает количество объектов <typeparamref name="T" />, содержащихся в <see cref="T:System.Runtime.Intrinsics.Vector256`1" />.</summary>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256`1.Equals(System.Object)">
      <summary>Определяет, равен ли указанный объект текущему экземпляру.</summary>
      <param name="obj">Объект для сравнения с текущим экземпляром.</param>
      <returns>Значение <c>true</c>, если <paramref name="obj" /> является объектом <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, равным текущему экземпляру; в противном случае — значение <c>false</c>.</returns>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256`1.Equals(System.Runtime.Intrinsics.Vector256{`0})">
      <summary>Определяет, равен ли указанный объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> текущему экземпляру.</summary>
      <param name="other">
        <see cref="T:System.Runtime.Intrinsics.Vector256`1" /> для сравнения с текущим экземпляром.</param>
      <returns>Значение <c>true</c>, если <paramref name="other" /> является объектом, равным текущему экземпляру; в противном случае — значение <c>false</c>.</returns>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256`1.GetHashCode">
      <summary>Получает хэш-код для экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector256`1.ToString">
      <summary>Преобразует текущий экземпляр в эквивалентное ему строковое представление.</summary>
      <returns>Эквивалентное строковое представление текущего экземпляра.</returns>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="P:System.Runtime.Intrinsics.Vector256`1.Zero">
      <summary>Возвращает новый объект <see cref="T:System.Runtime.Intrinsics.Vector256`1" />, все элементы которого инициализированы нулевыми значениями.</summary>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="T:System.Runtime.Intrinsics.Vector64" />
    <member name="M:System.Runtime.Intrinsics.Vector64.As``2(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> типа <typeparamref name="T" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> типа <typeparamref name="U" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <typeparam name="U">Тип, в котором вектор <paramref name="vector" /> должен интерпретироваться как.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> типа <typeparam name="U" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) или тип целевого объекта (<typeparamref name="U" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsByte``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.Byte" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.Byte" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsDouble``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.Double" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.Double" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsInt16``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.Int16" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.Int16" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsInt32``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.Int32" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.Int32" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsInt64``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.Int64" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.Int64" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsSByte``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.SByte" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.SByte" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsSingle``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.Single" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.Single" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsUInt16``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.UInt16" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.UInt16" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsUInt32``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.UInt32" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.UInt32" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.AsUInt64``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Переинтерпретирует <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.UInt64" />.</summary>
      <param name="vector">Повторно интерпретируемый вектор.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>
        <paramref name="vector" />, переинтерпретированный как новый <see cref="T:System.Runtime.Intrinsics.Vector64" /> типа <see cref="T:System.UInt64" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Byte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <param name="e4">Значение, которым будет инициализирован элемент 4.</param>
      <param name="e5">Значение, которым будет инициализирован элемент 5.</param>
      <param name="e6">Значение, которым будет инициализирован элемент 6.</param>
      <param name="e7">Значение, которым будет инициализирован элемент 7.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Double)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Int16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Int16,System.Int16,System.Int16,System.Int16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Int32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Int32,System.Int32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Int64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.SByte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte,System.SByte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <param name="e4">Значение, которым будет инициализирован элемент 4.</param>
      <param name="e5">Значение, которым будет инициализирован элемент 5.</param>
      <param name="e6">Значение, которым будет инициализирован элемент 6.</param>
      <param name="e7">Значение, которым будет инициализирован элемент 7.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Single)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.Single,System.Single)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.UInt16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <param name="e2">Значение, которым будет инициализирован элемент 2.</param>
      <param name="e3">Значение, которым будет инициализирован элемент 3.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.UInt32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.UInt32,System.UInt32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</summary>
      <param name="e0">Значение, которым будет инициализирован элемент 0.</param>
      <param name="e1">Значение, которым будет инициализирован элемент 1.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, каждый элемент которого инициализируется соответствующим указанным значением.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.Create(System.UInt64)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализируются указанным значением.</summary>
      <param name="value">Значение, которое будет использоваться для инициализации всех элементов.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализированы значением <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.Byte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.Int16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.Int32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.SByte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.Single)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.UInt16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalar(System.UInt32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы инициализируются нулевыми значениями.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы инициализируются нулевыми значениями.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalarUnsafe(System.Byte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalarUnsafe(System.Int16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalarUnsafe(System.Int32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalarUnsafe(System.SByte)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalarUnsafe(System.Single)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalarUnsafe(System.UInt16)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.CreateScalarUnsafe(System.UInt32)">
      <summary>Создает новый экземпляр <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется указанным значением, а остальные элементы остаются неинициализированными.</summary>
      <param name="value">Значение, которым будет инициализирован элемент 0.</param>
      <returns>Новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, первый элемент которого инициализируется значением <paramref name="value" />, а остальные элементы остаются неинициализированными.</returns>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.GetElement``1(System.Runtime.Intrinsics.Vector64{``0},System.Int32)">
      <summary>Получает элемент с указанным индексом.</summary>
      <param name="vector">Вектор, из которого извлекается элемент.</param>
      <param name="index">Индекс элемента, который нужно получить.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Значение элемента по индексу <paramref name="index" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> меньше нуля или больше числа элементов.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.ToScalar``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Преобразует заданный вектор в скаляр, содержащий значение первого элемента.</summary>
      <param name="vector">Вектор, из которого извлекается первый элемент.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Скаляр <typeparamref name="T" />, содержащий значение первого элемента.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.ToVector128``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Преобразует заданный вектор в новый <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> с нижними 64 битами, равными значению заданного вектора, и верхними 64 битами, равными нулю.</summary>
      <param name="vector">Вектор для расширения.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Новый <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> с нижними 64 битами, равными значению <paramref name="vector" />, и верхними 64 битами, инициализированными нулем.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.ToVector128Unsafe``1(System.Runtime.Intrinsics.Vector64{``0})">
      <summary>Преобразует заданный вектор в новый <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> с нижними 64 битами, равными значению заданного вектора, и неинициализированными верхними 64 битами.</summary>
      <param name="vector">Вектор для расширения.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Новый <see cref="T:System.Runtime.Intrinsics.Vector128`1" /> с нижними 64 битами, равными значению <paramref name="vector" />, и неинициализированными верхними 64 битами.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64.WithElement``1(System.Runtime.Intrinsics.Vector64{``0},System.Int32,``0)">
      <summary>Создает новый <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> с элементом по указанному индексу, для которого задано указанное значение, а остальные элементы получают то же значение, что и в данном векторе.</summary>
      <param name="vector">Вектор, из которого нужно получить оставшиеся элементы.</param>
      <param name="index">Задаваемый индекс элемента.</param>
      <param name="value">Значение, для присваивания элементу.</param>
      <typeparam name="T">Тип входного вектора.</typeparam>
      <returns>Объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> со значением элемента по индексу <paramref name="index" />, равному <paramref name="value" />, а остальные элементы получают то же значение, что и в <paramref name="vector" />.</returns>
      <exception cref="T:System.NotSupportedException">Тип <paramref name="vector" /> (<typeparamref name="T" />) не поддерживается.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> меньше нуля или больше числа элементов.</exception>
    </member>
    <member name="T:System.Runtime.Intrinsics.Vector64`1">
      <typeparam name="T" />
    </member>
    <member name="P:System.Runtime.Intrinsics.Vector64`1.Count">
      <summary>Возвращает количество объектов <typeparamref name="T" />, содержащихся в <see cref="T:System.Runtime.Intrinsics.Vector64`1" />.</summary>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64`1.Equals(System.Object)">
      <summary>Определяет, равен ли указанный объект текущему экземпляру.</summary>
      <param name="obj">Объект для сравнения с текущим экземпляром.</param>
      <returns>Значение <c>true</c>, если <paramref name="obj" /> является объектом <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, равным текущему экземпляру; в противном случае — значение <c>false</c>.</returns>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64`1.Equals(System.Runtime.Intrinsics.Vector64{`0})">
      <summary>Определяет, равен ли указанный объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> текущему экземпляру.</summary>
      <param name="other">
        <see cref="T:System.Runtime.Intrinsics.Vector64`1" /> для сравнения с текущим экземпляром.</param>
      <returns>Значение <c>true</c>, если <paramref name="other" /> является объектом, равным текущему экземпляру; в противном случае — значение <c>false</c>.</returns>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64`1.GetHashCode">
      <summary>Получает хэш-код для экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="M:System.Runtime.Intrinsics.Vector64`1.ToString">
      <summary>Преобразует текущий экземпляр в эквивалентное ему строковое представление.</summary>
      <returns>Эквивалентное строковое представление текущего экземпляра.</returns>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="P:System.Runtime.Intrinsics.Vector64`1.Zero">
      <summary>Возвращает новый объект <see cref="T:System.Runtime.Intrinsics.Vector64`1" />, все элементы которого инициализированы нулевыми значениями.</summary>
      <exception cref="T:System.NotSupportedException">Тип текущего экземпляра (<typeparamref name="T" />) не поддерживается.</exception>
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Aes">
      <summary>Этот класс обеспечивает доступ к аппаратным инструкциям Intel AES с помощью встроенных функций.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Aes.Decrypt(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_aesdec_si128 (__m128i a, __m128i RoundKey) AESDEC xmm, xmm/m128</summary>
      <param name="value" />
      <param name="roundKey" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Aes.DecryptLast(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_aesdeclast_si128 (__m128i a, __m128i RoundKey) AESDECLAST xmm, xmm/m128</summary>
      <param name="value" />
      <param name="roundKey" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Aes.Encrypt(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_aesenc_si128 (__m128i a, __m128i RoundKey) AESENC xmm, xmm/m128</summary>
      <param name="value" />
      <param name="roundKey" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Aes.EncryptLast(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_aesenclast_si128 (__m128i a, __m128i RoundKey) AESENCLAST xmm, xmm/m128</summary>
      <param name="value" />
      <param name="roundKey" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Aes.InverseMixColumns(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_aesimc_si128 (__m128i a) AESIMC xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Aes.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Aes.KeygenAssist(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>__m128i _mm_aeskeygenassist_si128 (__m128i a, const int imm8) AESKEYGENASSIST xmm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Avx">
      <summary>Этот класс обеспечивает доступ к аппаратным инструкциям Intel AVX с помощью встроенных функций</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Add(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_add_pd (__m256d a, __m256d b) VADDPD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Add(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_add_ps (__m256 a, __m256 b) VADDPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.AddSubtract(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_addsub_pd (__m256d a, __m256d b) VADDSUBPD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.AddSubtract(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_addsub_ps (__m256 a, __m256 b) VADDSUBPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.And(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_and_pd (__m256d a, __m256d b) VANDPD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.And(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_and_ps (__m256 a, __m256 b) VANDPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.AndNot(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_andnot_pd (__m256d a, __m256d b) VANDNPD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.AndNot(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_andnot_ps (__m256 a, __m256 b) VANDNPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Blend(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
      <summary>__m256d _mm256_blend_pd (__m256d a, __m256d b, const int imm8) VBLENDPD ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Blend(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)">
      <summary>__m256 _mm256_blend_ps (__m256 a, __m256 b, const int imm8) VBLENDPS ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.BlendVariable(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_blendv_pd (__m256d a, __m256d b, __m256d mask) VBLENDVPD ymm, ymm, ymm/m256, ymm</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.BlendVariable(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_blendv_ps (__m256 a, __m256 b, __m256 mask) VBLENDVPS ymm, ymm, ymm/m256, ymm</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.BroadcastScalarToVector128(System.Single*)">
      <summary>__m128 _mm_broadcast_ss (float const * mem_addr) VBROADCASTSS xmm, m32</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.BroadcastScalarToVector256(System.Double*)">
      <summary>__m256d _mm256_broadcast_sd (double const * mem_addr) VBROADCASTSD ymm, m64</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.BroadcastScalarToVector256(System.Single*)">
      <summary>__m256 _mm256_broadcast_ss (float const * mem_addr) VBROADCASTSS ymm, m32</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.BroadcastVector128ToVector256(System.Double*)">
      <summary>__m256d _mm256_broadcast_pd (__m128d const * mem_addr) VBROADCASTF128, ymm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.BroadcastVector128ToVector256(System.Single*)">
      <summary>__m256 _mm256_broadcast_ps (__m128 const * mem_addr) VBROADCASTF128, ymm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Ceiling(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_ceil_pd (__m256d a) VROUNDPD ymm, ymm/m256, imm8(10)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Ceiling(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_ceil_ps (__m256 a) VROUNDPS ymm, ymm/m256, imm8(10)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Compare(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.X86.FloatComparisonMode)">
      <summary>__m128d _mm_cmp_pd (__m128d a, __m128d b, const int imm8) VCMPPD xmm, xmm, xmm/m128, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="mode" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Compare(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.X86.FloatComparisonMode)">
      <summary>__m128 _mm_cmp_ps (__m128 a, __m128 b, const int imm8) VCMPPS xmm, xmm, xmm/m128, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="mode" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Compare(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.X86.FloatComparisonMode)">
      <summary>__m256d _mm256_cmp_pd (__m256d a, __m256d b, const int imm8) VCMPPD ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="mode" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Compare(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.X86.FloatComparisonMode)">
      <summary>__m256 _mm256_cmp_ps (__m256 a, __m256 b, const int imm8) VCMPPS ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="mode" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.X86.FloatComparisonMode)">
      <summary>__m128d _mm_cmp_sd (__m128d a, __m128d b, const int imm8) VCMPSS xmm, xmm, xmm/m32, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="mode" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.CompareScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.X86.FloatComparisonMode)">
      <summary>__m128 _mm_cmp_ss (__m128 a, __m128 b, const int imm8) VCMPSD xmm, xmm, xmm/m64, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="mode" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ConvertToVector128Int32(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m128i _mm256_cvtpd_epi32 (__m256d a) VCVTPD2DQ xmm, ymm/m256</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ConvertToVector128Int32WithTruncation(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m128i _mm256_cvttpd_epi32 (__m256d a) VCVTTPD2DQ xmm, ymm/m256</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ConvertToVector128Single(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m128 _mm256_cvtpd_ps (__m256d a) VCVTPD2PS xmm, ymm/m256</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ConvertToVector256Double(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m256d _mm256_cvtepi32_pd (__m128i a) VCVTDQ2PD ymm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ConvertToVector256Double(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m256d _mm256_cvtps_pd (__m128 a) VCVTPS2PD ymm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ConvertToVector256Int32(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256i _mm256_cvtps_epi32 (__m256 a) VCVTPS2DQ ymm, ymm/m256</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ConvertToVector256Int32WithTruncation(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256i _mm256_cvttps_epi32 (__m256 a) VCVTTPS2DQ ymm, ymm/m256</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ConvertToVector256Single(System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256 _mm256_cvtepi32_ps (__m256i a) VCVTDQ2PS ymm, ymm/m256</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Divide(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_div_pd (__m256d a, __m256d b) VDIVPD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Divide(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_div_ps (__m256 a, __m256 b) VDIVPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.DotProduct(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)">
      <summary>__m256 _mm256_dp_ps (__m256 a, __m256 b, const int imm8) VDPPS ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.DuplicateEvenIndexed(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_movedup_pd (__m256d a) VMOVDDUP ymm, ymm/m256</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.DuplicateEvenIndexed(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_moveldup_ps (__m256 a) VMOVSLDUP ymm, ymm/m256</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.DuplicateOddIndexed(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_movehdup_ps (__m256 a) VMOVSHDUP ymm, ymm/m256</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
      <summary>__m128i _mm256_extractf128_si256 (__m256i a, const int imm8) VEXTRACTF128 xmm/m128, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
      <summary>__m128d _mm256_extractf128_pd (__m256d a, const int imm8) VEXTRACTF128 xmm/m128, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>__m128i _mm256_extractf128_si256 (__m256i a, const int imm8) VEXTRACTF128 xmm/m128, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>__m128i _mm256_extractf128_si256 (__m256i a, const int imm8) VEXTRACTF128 xmm/m128, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m128i _mm256_extractf128_si256 (__m256i a, const int imm8) VEXTRACTF128 xmm/m128, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)">
      <summary>__m128i _mm256_extractf128_si256 (__m256i a, const int imm8) VEXTRACTF128 xmm/m128, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)">
      <summary>__m128 _mm256_extractf128_ps (__m256 a, const int imm8) VEXTRACTF128 xmm/m128, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>__m128i _mm256_extractf128_si256 (__m256i a, const int imm8) VEXTRACTF128 xmm/m128, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>__m128i _mm256_extractf128_si256 (__m256i a, const int imm8) VEXTRACTF128 xmm/m128, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>__m128i _mm256_extractf128_si256 (__m256i a, const int imm8) VEXTRACTF128 xmm/m128, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Floor(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_floor_pd (__m256d a) VROUNDPS ymm, ymm/m256, imm8(9)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Floor(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_floor_ps (__m256 a) VROUNDPS ymm, ymm/m256, imm8(9)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.HorizontalAdd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_hadd_pd (__m256d a, __m256d b) VHADDPD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.HorizontalAdd(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_hadd_ps (__m256 a, __m256 b) VHADDPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.HorizontalSubtract(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_hsub_pd (__m256d a, __m256d b) VHSUBPD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.HorizontalSubtract(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_hsub_ps (__m256 a, __m256 b) VHSUBPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8) VINSERTF128 ymm, ymm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>__m256d _mm256_insertf128_pd (__m256d a, __m128d b, int imm8) VINSERTF128 ymm, ymm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8) VINSERTF128 ymm, ymm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8) VINSERTF128 ymm, ymm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8) VINSERTF128 ymm, ymm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8) VINSERTF128 ymm, ymm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>__m256 _mm256_insertf128_ps (__m256 a, __m128 b, int imm8) VINSERTF128 ymm, ymm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8) VINSERTF128 ymm, ymm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8) VINSERTF128 ymm, ymm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.InsertVector128(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>__m256i _mm256_insertf128_si256 (__m256i a, __m128i b, int imm8) VINSERTF128 ymm, ymm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Avx.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.Byte*)">
      <summary>__m256i _mm256_load_si256 (__m256i const * mem_addr) VMOVDQA ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.Double*)">
      <summary>__m256d _mm256_load_pd (double const * mem_addr) VMOVAPD ymm, ymm/m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.Int16*)">
      <summary>__m256i _mm256_load_si256 (__m256i const * mem_addr) VMOVDQA ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.Int32*)">
      <summary>__m256i _mm256_load_si256 (__m256i const * mem_addr) VMOVDQA ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.Int64*)">
      <summary>__m256i _mm256_load_si256 (__m256i const * mem_addr) VMOVDQA ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.SByte*)">
      <summary>__m256i _mm256_load_si256 (__m256i const * mem_addr) VMOVDQA ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.Single*)">
      <summary>__m256 _mm256_load_ps (float const * mem_addr) VMOVAPS ymm, ymm/m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.UInt16*)">
      <summary>__m256i _mm256_load_si256 (__m256i const * mem_addr) VMOVDQA ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.UInt32*)">
      <summary>__m256i _mm256_load_si256 (__m256i const * mem_addr) VMOVDQA ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadAlignedVector256(System.UInt64*)">
      <summary>__m256i _mm256_load_si256 (__m256i const * mem_addr) VMOVDQA ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadDquVector256(System.Byte*)">
      <summary>__m256i _mm256_lddqu_si256 (__m256i const * mem_addr) VLDDQU ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadDquVector256(System.Int16*)">
      <summary>__m256i _mm256_lddqu_si256 (__m256i const * mem_addr) VLDDQU ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadDquVector256(System.Int32*)">
      <summary>__m256i _mm256_lddqu_si256 (__m256i const * mem_addr) VLDDQU ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadDquVector256(System.Int64*)">
      <summary>__m256i _mm256_lddqu_si256 (__m256i const * mem_addr) VLDDQU ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadDquVector256(System.SByte*)">
      <summary>__m256i _mm256_lddqu_si256 (__m256i const * mem_addr) VLDDQU ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadDquVector256(System.UInt16*)">
      <summary>__m256i _mm256_lddqu_si256 (__m256i const * mem_addr) VLDDQU ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadDquVector256(System.UInt32*)">
      <summary>__m256i _mm256_lddqu_si256 (__m256i const * mem_addr) VLDDQU ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadDquVector256(System.UInt64*)">
      <summary>__m256i _mm256_lddqu_si256 (__m256i const * mem_addr) VLDDQU ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.Byte*)">
      <summary>__m256i _mm256_loadu_si256 (__m256i const * mem_addr) VMOVDQU ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.Double*)">
      <summary>__m256d _mm256_loadu_pd (double const * mem_addr) VMOVUPD ymm, ymm/m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.Int16*)">
      <summary>__m256i _mm256_loadu_si256 (__m256i const * mem_addr) VMOVDQU ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.Int32*)">
      <summary>__m256i _mm256_loadu_si256 (__m256i const * mem_addr) VMOVDQU ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.Int64*)">
      <summary>__m256i _mm256_loadu_si256 (__m256i const * mem_addr) VMOVDQU ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.SByte*)">
      <summary>__m256i _mm256_loadu_si256 (__m256i const * mem_addr) VMOVDQU ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.Single*)">
      <summary>__m256 _mm256_loadu_ps (float const * mem_addr) VMOVUPS ymm, ymm/m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.UInt16*)">
      <summary>__m256i _mm256_loadu_si256 (__m256i const * mem_addr) VMOVDQU ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.UInt32*)">
      <summary>__m256i _mm256_loadu_si256 (__m256i const * mem_addr) VMOVDQU ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.LoadVector256(System.UInt64*)">
      <summary>__m256i _mm256_loadu_si256 (__m256i const * mem_addr) VMOVDQU ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MaskLoad(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_maskload_pd (double const * mem_addr, __m128i mask) VMASKMOVPD xmm, xmm, m128</summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MaskLoad(System.Double*,System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_maskload_pd (double const * mem_addr, __m256i mask) VMASKMOVPD ymm, ymm, m256</summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MaskLoad(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_maskload_ps (float const * mem_addr, __m128i mask) VMASKMOVPS xmm, xmm, m128</summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MaskLoad(System.Single*,System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_maskload_ps (float const * mem_addr, __m256i mask) VMASKMOVPS ymm, ymm, m256</summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MaskStore(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>void _mm_maskstore_pd (double * mem_addr, __m128i mask, __m128d a) VMASKMOVPD m128, xmm, xmm</summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MaskStore(System.Double*,System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>void _mm256_maskstore_pd (double * mem_addr, __m256i mask, __m256d a) VMASKMOVPD m256, ymm, ymm</summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MaskStore(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>void _mm_maskstore_ps (float * mem_addr, __m128i mask, __m128 a) VMASKMOVPS m128, xmm, xmm</summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MaskStore(System.Single*,System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>void _mm256_maskstore_ps (float * mem_addr, __m256i mask, __m256 a) VMASKMOVPS m256, ymm, ymm</summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Max(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_max_pd (__m256d a, __m256d b) VMAXPD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Max(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_max_ps (__m256 a, __m256 b) VMAXPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Min(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_min_pd (__m256d a, __m256d b) VMINPD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Min(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_min_ps (__m256 a, __m256 b) VMINPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MoveMask(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>int _mm256_movemask_pd (__m256d a) VMOVMSKPD reg, ymm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.MoveMask(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>int _mm256_movemask_ps (__m256 a) VMOVMSKPS reg, ymm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Multiply(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_mul_pd (__m256d a, __m256d b) VMULPD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Multiply(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_mul_ps (__m256 a, __m256 b) VMULPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Or(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_or_pd (__m256d a, __m256d b) VORPD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Or(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_or_ps (__m256 a, __m256 b) VORPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute(System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>__m128d _mm_permute_pd (__m128d a, int imm8) VPERMILPD xmm, xmm, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>__m128 _mm_permute_ps (__m128 a, int imm8) VPERMILPS xmm, xmm, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute(System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
      <summary>__m256d _mm256_permute_pd (__m256d a, int imm8) VPERMILPD ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute(System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)">
      <summary>__m256 _mm256_permute_ps (__m256 a, int imm8) VPERMILPS ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
      <summary>__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
      <summary>__m256d _mm256_permute2f128_pd (__m256d a, __m256d b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)">
      <summary>__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)">
      <summary>__m256 _mm256_permute2f128_ps (__m256 a, __m256 b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Permute2x128(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>__m256i _mm256_permute2f128_si256 (__m256i a, __m256i b, int imm8) VPERM2F128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.PermuteVar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128d _mm_permutevar_pd (__m128d a, __m128i b) VPERMILPD xmm, xmm, xmm/m128</summary>
      <param name="left" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.PermuteVar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128 _mm_permutevar_ps (__m128 a, __m128i b) VPERMILPS xmm, xmm, xmm/m128</summary>
      <param name="left" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.PermuteVar(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>__m256d _mm256_permutevar_pd (__m256d a, __m256i b) VPERMILPD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.PermuteVar(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256 _mm256_permutevar_ps (__m256 a, __m256i b) VPERMILPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Reciprocal(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_rcp_ps (__m256 a) VRCPPS ymm, ymm/m256</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.ReciprocalSqrt(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_rsqrt_ps (__m256 a) VRSQRTPS ymm, ymm/m256</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundCurrentDirection(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_round_pd (__m256d a, _MM_FROUND_CUR_DIRECTION) VROUNDPD ymm, ymm/m256, imm8(4)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundCurrentDirection(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_round_ps (__m256 a, _MM_FROUND_CUR_DIRECTION) VROUNDPS ymm, ymm/m256, imm8(4)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundToNearestInteger(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_round_pd (__m256d a, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC) VROUNDPD ymm, ymm/m256, imm8(8)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundToNearestInteger(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_round_ps (__m256 a, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC) VROUNDPS ymm, ymm/m256, imm8(8)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_round_pd (__m256d a, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC) VROUNDPD ymm, ymm/m256, imm8(9)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_round_ps (__m256 a, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC) VROUNDPS ymm, ymm/m256, imm8(9)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_round_pd (__m256d a, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC) VROUNDPD ymm, ymm/m256, imm8(10)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_round_ps (__m256 a, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC) VROUNDPS ymm, ymm/m256, imm8(10)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundToZero(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_round_pd (__m256d a, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC) VROUNDPD ymm, ymm/m256, imm8(11)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.RoundToZero(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_round_ps (__m256 a, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC) VROUNDPS ymm, ymm/m256, imm8(11)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Shuffle(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
      <summary>__m256d _mm256_shuffle_pd (__m256d a, __m256d b, const int imm8) VSHUFPD ymm, ymm, ymm/m256, imm8</summary>
      <param name="value" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Shuffle(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)">
      <summary>__m256 _mm256_shuffle_ps (__m256 a, __m256 b, const int imm8) VSHUFPS ymm, ymm, ymm/m256, imm8</summary>
      <param name="value" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Sqrt(System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_sqrt_pd (__m256d a) VSQRTPD ymm, ymm/m256</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Sqrt(System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_sqrt_ps (__m256 a) VSQRTPS ymm, ymm/m256</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.Byte*,System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a) MOVDQU m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.Double*,System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>void _mm256_storeu_pd (double * mem_addr, __m256d a) MOVUPD m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.Int16*,System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a) MOVDQU m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a) MOVDQU m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.Int64*,System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a) MOVDQU m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.SByte*,System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a) MOVDQU m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.Single*,System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>void _mm256_storeu_ps (float * mem_addr, __m256 a) MOVUPS m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.UInt16*,System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a) MOVDQU m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.UInt32*,System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a) MOVDQU m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Store(System.UInt64*,System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>void _mm256_storeu_si256 (__m256i * mem_addr, __m256i a) MOVDQU m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.Byte*,System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>void _mm256_store_si256 (__m256i * mem_addr, __m256i a) MOVDQA m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.Double*,System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>void _mm256_store_pd (double * mem_addr, __m256d a) VMOVAPD m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.Int16*,System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>void _mm256_store_si256 (__m256i * mem_addr, __m256i a) MOVDQA m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>void _mm256_store_si256 (__m256i * mem_addr, __m256i a) MOVDQA m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.Int64*,System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>void _mm256_store_si256 (__m256i * mem_addr, __m256i a) MOVDQA m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.SByte*,System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>void _mm256_store_si256 (__m256i * mem_addr, __m256i a) MOVDQA m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.Single*,System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>void _mm256_store_ps (float * mem_addr, __m256 a) VMOVAPS m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.UInt16*,System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>void _mm256_store_si256 (__m256i * mem_addr, __m256i a) MOVDQA m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.UInt32*,System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>void _mm256_store_si256 (__m256i * mem_addr, __m256i a) MOVDQA m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAligned(System.UInt64*,System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>void _mm256_store_si256 (__m256i * mem_addr, __m256i a) MOVDQA m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.Byte*,System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>void _mm256_stream_si256 (__m256i * mem_addr, __m256i a) VMOVNTDQ m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.Double*,System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>void _mm256_stream_pd (double * mem_addr, __m256d a) MOVNTPD m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.Int16*,System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>void _mm256_stream_si256 (__m256i * mem_addr, __m256i a) VMOVNTDQ m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>void _mm256_stream_si256 (__m256i * mem_addr, __m256i a) VMOVNTDQ m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.Int64*,System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>void _mm256_stream_si256 (__m256i * mem_addr, __m256i a) VMOVNTDQ m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.SByte*,System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>void _mm256_stream_si256 (__m256i * mem_addr, __m256i a) VMOVNTDQ m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.Single*,System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>void _mm256_stream_ps (float * mem_addr, __m256 a) MOVNTPS m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.UInt16*,System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>void _mm256_stream_si256 (__m256i * mem_addr, __m256i a) VMOVNTDQ m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.UInt32*,System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>void _mm256_stream_si256 (__m256i * mem_addr, __m256i a) VMOVNTDQ m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.StoreAlignedNonTemporal(System.UInt64*,System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>void _mm256_stream_si256 (__m256i * mem_addr, __m256i a) VMOVNTDQ m256, ymm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Subtract(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_sub_pd (__m256d a, __m256d b) VSUBPD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Subtract(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_sub_ps (__m256 a, __m256 b) VSUBPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>int _mm_testc_pd (__m128d a, __m128d b) VTESTPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>int _mm_testc_ps (__m128 a, __m128 b) VTESTPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>int _mm256_testc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>int _mm256_testc_pd (__m256d a, __m256d b) VTESTPS ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>int _mm256_testc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>int _mm256_testc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>int _mm256_testc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>int _mm256_testc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>int _mm256_testc_ps (__m256 a, __m256 b) VTESTPS ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>int _mm256_testc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>int _mm256_testc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestC(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>int _mm256_testc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>int _mm_testnzc_pd (__m128d a, __m128d b) VTESTPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>int _mm_testnzc_ps (__m128 a, __m128 b) VTESTPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>int _mm256_testnzc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>int _mm256_testnzc_pd (__m256d a, __m256d b) VTESTPD ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>int _mm256_testnzc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>int _mm256_testnzc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>int _mm256_testnzc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>int _mm256_testnzc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>int _mm256_testnzc_ps (__m256 a, __m256 b) VTESTPS ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>int _mm256_testnzc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>int _mm256_testnzc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestNotZAndNotC(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>int _mm256_testnzc_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>int _mm_testz_pd (__m128d a, __m128d b) VTESTPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>int _mm_testz_ps (__m128 a, __m128 b) VTESTPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>int _mm256_testz_pd (__m256d a, __m256d b) VTESTPD ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>int _mm256_testz_ps (__m256 a, __m256 b) VTESTPS ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.TestZ(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>int _mm256_testz_si256 (__m256i a, __m256i b) VPTEST ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_unpackhi_pd (__m256d a, __m256d b) VUNPCKHPD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_unpackhi_ps (__m256 a, __m256 b) VUNPCKHPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.UnpackLow(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_unpacklo_pd (__m256d a, __m256d b) VUNPCKLPD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.UnpackLow(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_unpacklo_ps (__m256 a, __m256 b) VUNPCKLPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Xor(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_xor_pd (__m256d a, __m256d b) VXORPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx.Xor(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_xor_ps (__m256 a, __m256 b) VXORPS ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Avx2">
      <summary>Этот класс обеспечивает доступ к аппаратным инструкциям Intel AVX2 с помощью встроенных функций</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Abs(System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_abs_epi16 (__m256i a) VPABSW ymm, ymm/m256</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Abs(System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_abs_epi32 (__m256i a) VPABSD ymm, ymm/m256</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Abs(System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_abs_epi8 (__m256i a) VPABSB ymm, ymm/m256</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_add_epi8 (__m256i a, __m256i b) VPADDB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_add_epi16 (__m256i a, __m256i b) VPADDW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_add_epi32 (__m256i a, __m256i b) VPADDD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>__m256i _mm256_add_epi64 (__m256i a, __m256i b) VPADDQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_add_epi8 (__m256i a, __m256i b) VPADDB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_add_epi16 (__m256i a, __m256i b) VPADDW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_add_epi32 (__m256i a, __m256i b) VPADDD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Add(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>__m256i _mm256_add_epi64 (__m256i a, __m256i b) VPADDQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AddSaturate(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_adds_epu8 (__m256i a, __m256i b) VPADDUSB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AddSaturate(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_adds_epi16 (__m256i a, __m256i b) VPADDSW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AddSaturate(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_adds_epi8 (__m256i a, __m256i b) VPADDSB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AddSaturate(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_adds_epu16 (__m256i a, __m256i b) VPADDUSW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AlignRight(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
      <summary>__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count) VPALIGNR ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AlignRight(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count) VPALIGNR ymm, ymm, ymm/m256, imm8 Эта встроенная функция создает инструкцию VPALIGNR для работы с байтами, а не элементами векторов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AlignRight(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count) VPALIGNR ymm, ymm, ymm/m256, imm8 Эта встроенная функция создает инструкцию VPALIGNR для работы с байтами, а не элементами векторов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AlignRight(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count) VPALIGNR ymm, ymm, ymm/m256, imm8 Эта встроенная функция создает инструкцию VPALIGNR для работы с байтами, а не элементами векторов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AlignRight(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)">
      <summary>__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count) VPALIGNR ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AlignRight(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count) VPALIGNR ymm, ymm, ymm/m256, imm8 Эта встроенная функция создает инструкцию VPALIGNR для работы с байтами, а не элементами векторов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AlignRight(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count) VPALIGNR ymm, ymm, ymm/m256, imm8 Эта встроенная функция создает инструкцию VPALIGNR для работы с байтами, а не элементами векторов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AlignRight(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>__m256i _mm256_alignr_epi8 (__m256i a, __m256i b, const int count) VPALIGNR ymm, ymm, ymm/m256, imm8 Эта встроенная функция создает инструкцию VPALIGNR для работы с байтами, а не элементами векторов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.And(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_and_si256 (__m256i a, __m256i b) VPAND ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.And(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_and_si256 (__m256i a, __m256i b) VPAND ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.And(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_and_si256 (__m256i a, __m256i b) VPAND ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.And(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>__m256i _mm256_and_si256 (__m256i a, __m256i b) VPAND ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.And(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_and_si256 (__m256i a, __m256i b) VPAND ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.And(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_and_si256 (__m256i a, __m256i b) VPAND ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.And(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_and_si256 (__m256i a, __m256i b) VPAND ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.And(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>__m256i _mm256_and_si256 (__m256i a, __m256i b) VPAND ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_andnot_si256 (__m256i a, __m256i b) VPANDN ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_andnot_si256 (__m256i a, __m256i b) VPANDN ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_andnot_si256 (__m256i a, __m256i b) VPANDN ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>__m256i _mm256_andnot_si256 (__m256i a, __m256i b) VPANDN ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_andnot_si256 (__m256i a, __m256i b) VPANDN ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_andnot_si256 (__m256i a, __m256i b) VPANDN ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_andnot_si256 (__m256i a, __m256i b) VPANDN ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.AndNot(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>__m256i _mm256_andnot_si256 (__m256i a, __m256i b) VPANDN ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Average(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_avg_epu8 (__m256i a, __m256i b) VPAVGB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Average(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_avg_epu16 (__m256i a, __m256i b) VPAVGW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Blend(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128i _mm_blend_epi32 (__m128i a, __m128i b, const int imm8) VPBLENDD xmm, xmm, xmm/m128, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Blend(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>__m128i _mm_blend_epi32 (__m128i a, __m128i b, const int imm8) VPBLENDD xmm, xmm, xmm/m128, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Blend(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>__m256i _mm256_blend_epi16 (__m256i a, __m256i b, const int imm8) VPBLENDW ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Blend(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>__m256i _mm256_blend_epi32 (__m256i a, __m256i b, const int imm8) VPBLENDD ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Blend(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>__m256i _mm256_blend_epi16 (__m256i a, __m256i b, const int imm8) VPBLENDW ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Blend(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>__m256i _mm256_blend_epi32 (__m256i a, __m256i b, const int imm8) VPBLENDD ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BlendVariable(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask) VPBLENDVB ymm, ymm, ymm/m256, ymm</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BlendVariable(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask) VPBLENDVB ymm, ymm, ymm/m256, ymm Эта встроенная функция создает инструкцию VPBLENDVB, которой требуется байтовый вектор маски, чтобы пользователи правильно задавали каждый байт маски для выбранных элементов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BlendVariable(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask) VPBLENDVB ymm, ymm, ymm/m256, ymm Эта встроенная функция создает инструкцию VPBLENDVB, которой требуется байтовый вектор маски, чтобы пользователи правильно задавали каждый байт маски для выбранных элементов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BlendVariable(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask) VPBLENDVB ymm, ymm, ymm/m256, ymm Эта встроенная функция создает инструкцию VPBLENDVB, которой требуется байтовый вектор маски, чтобы пользователи правильно задавали каждый байт маски для выбранных элементов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BlendVariable(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask) VPBLENDVB ymm, ymm, ymm/m256, ymm</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BlendVariable(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask) VPBLENDVB ymm, ymm, ymm/m256, ymm Эта встроенная функция создает инструкцию VPBLENDVB, которой требуется байтовый вектор маски, чтобы пользователи правильно задавали каждый байт маски для выбранных элементов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BlendVariable(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask) VPBLENDVB ymm, ymm, ymm/m256, ymm Эта встроенная функция создает инструкцию VPBLENDVB, которой требуется байтовый вектор маски, чтобы пользователи правильно задавали каждый байт маски для выбранных элементов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BlendVariable(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>__m256i _mm256_blendv_epi8 (__m256i a, __m256i b, __m256i mask) VPBLENDVB ymm, ymm, ymm/m256, ymm Эта встроенная функция создает инструкцию VPBLENDVB, которой требуется байтовый вектор маски, чтобы пользователи правильно задавали каждый байт маски для выбранных элементов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Byte*)">
      <summary>__m128i _mm_broadcastb_epi8 (__m128i a) VPBROADCASTB xmm, m8 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Int16*)">
      <summary>__m128i _mm_broadcastw_epi16 (__m128i a) VPBROADCASTW xmm, m16 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Int32*)">
      <summary>__m128i _mm_broadcastd_epi32 (__m128i a) VPBROADCASTD xmm, m32 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Int64*)">
      <summary>__m128i _mm_broadcastq_epi64 (__m128i a) VPBROADCASTQ xmm, m64 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_broadcastb_epi8 (__m128i a) VPBROADCASTB xmm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_broadcastsd_pd (__m128d a) VMOVDDUP xmm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_broadcastw_epi16 (__m128i a) VPBROADCASTW xmm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_broadcastd_epi32 (__m128i a) VPBROADCASTD xmm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128i _mm_broadcastq_epi64 (__m128i a) VPBROADCASTQ xmm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_broadcastb_epi8 (__m128i a) VPBROADCASTB xmm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_broadcastss_ps (__m128 a) VBROADCASTSS xmm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_broadcastw_epi16 (__m128i a) VPBROADCASTW xmm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_broadcastd_epi32 (__m128i a) VPBROADCASTD xmm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_broadcastq_epi64 (__m128i a) VPBROADCASTQ xmm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.SByte*)">
      <summary>__m128i _mm_broadcastb_epi8 (__m128i a) VPBROADCASTB xmm, m8 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.UInt16*)">
      <summary>__m128i _mm_broadcastw_epi16 (__m128i a) VPBROADCASTW xmm, m16 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.UInt32*)">
      <summary>__m128i _mm_broadcastd_epi32 (__m128i a) VPBROADCASTD xmm, m32 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector128(System.UInt64*)">
      <summary>__m128i _mm_broadcastq_epi64 (__m128i a) VPBROADCASTQ xmm, m64 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Byte*)">
      <summary>__m256i _mm256_broadcastb_epi8 (__m128i a) VPBROADCASTB ymm, m8 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Int16*)">
      <summary>__m256i _mm256_broadcastw_epi16 (__m128i a) VPBROADCASTW ymm, m16 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Int32*)">
      <summary>__m256i _mm256_broadcastd_epi32 (__m128i a) VPBROADCASTD ymm, m32 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Int64*)">
      <summary>__m256i _mm256_broadcastq_epi64 (__m128i a) VPBROADCASTQ ymm, m64 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m256i _mm256_broadcastb_epi8 (__m128i a) VPBROADCASTB ymm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m256d _mm256_broadcastsd_pd (__m128d a) VBROADCASTSD ymm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m256i _mm256_broadcastw_epi16 (__m128i a) VPBROADCASTW ymm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m256i _mm256_broadcastd_epi32 (__m128i a) VPBROADCASTD ymm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m256i _mm256_broadcastq_epi64 (__m128i a) VPBROADCASTQ ymm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m256i _mm256_broadcastb_epi8 (__m128i a) VPBROADCASTB ymm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m256 _mm256_broadcastss_ps (__m128 a) VBROADCASTSS ymm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m256i _mm256_broadcastw_epi16 (__m128i a) VPBROADCASTW ymm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m256i _mm256_broadcastd_epi32 (__m128i a) VPBROADCASTD ymm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m256i _mm256_broadcastq_epi64 (__m128i a) VPBROADCASTQ ymm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.SByte*)">
      <summary>__m256i _mm256_broadcastb_epi8 (__m128i a) VPBROADCASTB ymm, m8 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.UInt16*)">
      <summary>__m256i _mm256_broadcastw_epi16 (__m128i a) VPBROADCASTW ymm, m16 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.UInt32*)">
      <summary>__m256i _mm256_broadcastd_epi32 (__m128i a) VPBROADCASTD ymm, m32 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastScalarToVector256(System.UInt64*)">
      <summary>__m256i _mm256_broadcastq_epi64 (__m128i a) VPBROADCASTQ ymm, m64 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastVector128ToVector256(System.Byte*)">
      <summary>__m256i _mm256_broadcastsi128_si256 (__m128i a) VBROADCASTI128 ymm, m128 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastVector128ToVector256(System.Int16*)">
      <summary>__m256i _mm256_broadcastsi128_si256 (__m128i a) VBROADCASTI128 ymm, m128 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastVector128ToVector256(System.Int32*)">
      <summary>__m256i _mm256_broadcastsi128_si256 (__m128i a) VBROADCASTI128 ymm, m128 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastVector128ToVector256(System.Int64*)">
      <summary>__m256i _mm256_broadcastsi128_si256 (__m128i a) VBROADCASTI128 ymm, m128 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastVector128ToVector256(System.SByte*)">
      <summary>__m256i _mm256_broadcastsi128_si256 (__m128i a) VBROADCASTI128 ymm, m128 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastVector128ToVector256(System.UInt16*)">
      <summary>__m256i _mm256_broadcastsi128_si256 (__m128i a) VBROADCASTI128 ymm, m128 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastVector128ToVector256(System.UInt32*)">
      <summary>__m256i _mm256_broadcastsi128_si256 (__m128i a) VBROADCASTI128 ymm, m128 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.BroadcastVector128ToVector256(System.UInt64*)">
      <summary>__m256i _mm256_broadcastsi128_si256 (__m128i a) VBROADCASTI128 ymm, m128 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareEqual(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_cmpeq_epi8 (__m256i a, __m256i b) VPCMPEQB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareEqual(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_cmpeq_epi16 (__m256i a, __m256i b) VPCMPEQW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareEqual(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_cmpeq_epi32 (__m256i a, __m256i b) VPCMPEQD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareEqual(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>__m256i _mm256_cmpeq_epi64 (__m256i a, __m256i b) VPCMPEQQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareEqual(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_cmpeq_epi8 (__m256i a, __m256i b) VPCMPEQB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareEqual(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_cmpeq_epi16 (__m256i a, __m256i b) VPCMPEQW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareEqual(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_cmpeq_epi32 (__m256i a, __m256i b) VPCMPEQD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareEqual(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>__m256i _mm256_cmpeq_epi64 (__m256i a, __m256i b) VPCMPEQQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareGreaterThan(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_cmpgt_epi16 (__m256i a, __m256i b) VPCMPGTW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareGreaterThan(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_cmpgt_epi32 (__m256i a, __m256i b) VPCMPGTD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareGreaterThan(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>__m256i _mm256_cmpgt_epi64 (__m256i a, __m256i b) VPCMPGTQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.CompareGreaterThan(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_cmpgt_epi8 (__m256i a, __m256i b) VPCMPGTB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToInt32(System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>int _mm256_cvtsi256_si32 (__m256i a) MOVD reg/m32, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToUInt32(System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>int _mm256_cvtsi256_si32 (__m256i a) MOVD reg/m32, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int16(System.Byte*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int16(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int16(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m256i _mm256_cvtepi8_epi16 (__m128i a) VPMOVSXBW ymm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int16(System.SByte*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int32(System.Byte*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int32(System.Int16*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int32(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int32(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m256i _mm256_cvtepi16_epi32 (__m128i a) VPMOVSXWD ymm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int32(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m256i _mm256_cvtepi8_epi32 (__m128i a) VPMOVSXBD ymm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int32(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int32(System.SByte*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int32(System.UInt16*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Byte*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Int16*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Int32*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m256i _mm256_cvtepi16_epi64 (__m128i a) VPMOVSXWQ ymm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m256i _mm256_cvtepi32_epi64 (__m128i a) VPMOVSXDQ ymm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m256i _mm256_cvtepi8_epi64 (__m128i a) VPMOVSXBQ ymm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.SByte*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.UInt16*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ConvertToVector256Int64(System.UInt32*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
      <summary>__m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>__m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>__m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)">
      <summary>__m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>__m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>__m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ExtractVector128(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>__m128i _mm256_extracti128_si256 (__m256i a, const int imm8) VEXTRACTI128 xmm, ymm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Double},System.Double*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>__m128d _mm_mask_i32gather_pd (__m128d src, double const* base_addr, __m128i vindex, __m128d mask, const int scale) VGATHERDPD xmm, vm32x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Double},System.Double*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>__m128d _mm_mask_i64gather_pd (__m128d src, double const* base_addr, __m128i vindex, __m128d mask, const int scale) VGATHERQPD xmm, vm64x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Int32},System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128i _mm_mask_i32gather_epi32 (__m128i src, int const* base_addr, __m128i vindex, __m128i mask, const int scale) VPGATHERDD xmm, vm32x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Int32},System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128i _mm_mask_i64gather_epi32 (__m128i src, int const* base_addr, __m128i vindex, __m128i mask, const int scale) VPGATHERQD xmm, vm64x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Int32},System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128i _mm256_mask_i64gather_epi32 (__m128i src, int const* base_addr, __m256i vindex, __m128i mask, const int scale) VPGATHERQD xmm, vm32y, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Int64},System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__m128i _mm_mask_i32gather_epi64 (__m128i src, __int64 const* base_addr, __m128i vindex, __m128i mask, const int scale) VPGATHERDQ xmm, vm32x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Int64},System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__m128i _mm_mask_i64gather_epi64 (__m128i src, __int64 const* base_addr, __m128i vindex, __m128i mask, const int scale) VPGATHERQQ xmm, vm64x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>__m128 _mm_mask_i32gather_ps (__m128 src, float const* base_addr, __m128i vindex, __m128 mask, const int scale) VGATHERDPS xmm, vm32x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>__m128 _mm_mask_i64gather_ps (__m128 src, float const* base_addr, __m128i vindex, __m128 mask, const int scale) VGATHERQPS xmm, vm64x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>__m128 _mm256_mask_i64gather_ps (__m128 src, float const* base_addr, __m256i vindex, __m128 mask, const int scale) VGATHERQPS xmm, vm32y, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.UInt32},System.UInt32*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>__m128i _mm_mask_i32gather_epi32 (__m128i src, int const* base_addr, __m128i vindex, __m128i mask, const int scale) VPGATHERDD xmm, vm32x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.UInt32},System.UInt32*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>__m128i _mm_mask_i64gather_epi32 (__m128i src, int const* base_addr, __m128i vindex, __m128i mask, const int scale) VPGATHERQD xmm, vm64x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.UInt32},System.UInt32*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>__m128i _mm256_mask_i64gather_epi32 (__m128i src, int const* base_addr, __m256i vindex, __m128i mask, const int scale) VPGATHERQD xmm, vm32y, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.UInt64},System.UInt64*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>__m128i _mm_mask_i32gather_epi64 (__m128i src, __int64 const* base_addr, __m128i vindex, __m128i mask, const int scale) VPGATHERDQ xmm, vm32x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector128(System.Runtime.Intrinsics.Vector128{System.UInt64},System.UInt64*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>__m128i _mm_mask_i64gather_epi64 (__m128i src, __int64 const* base_addr, __m128i vindex, __m128i mask, const int scale) VPGATHERQQ xmm, vm64x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
      <summary>__m256d _mm256_mask_i32gather_pd (__m256d src, double const* base_addr, __m128i vindex, __m256d mask, const int scale) VPGATHERDPD ymm, vm32y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.Double},System.Double*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
      <summary>__m256d _mm256_mask_i64gather_pd (__m256d src, double const* base_addr, __m256i vindex, __m256d mask, const int scale) VGATHERQPD ymm, vm32y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.Int32},System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>__m256i _mm256_mask_i32gather_epi32 (__m256i src, int const* base_addr, __m256i vindex, __m256i mask, const int scale) VPGATHERDD ymm, vm32y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.Int64},System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m256i _mm256_mask_i32gather_epi64 (__m256i src, __int64 const* base_addr, __m128i vindex, __m256i mask, const int scale) VPGATHERDQ ymm, vm32y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.Int64},System.Int64*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m256i _mm256_mask_i64gather_epi64 (__m256i src, __int64 const* base_addr, __m256i vindex, __m256i mask, const int scale) VPGATHERQQ ymm, vm32y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.Single},System.Single*,System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Single},System.Byte)">
      <summary>__m256 _mm256_mask_i32gather_ps (__m256 src, float const* base_addr, __m256i vindex, __m256 mask, const int scale) VPGATHERDPS ymm, vm32y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.UInt32},System.UInt32*,System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>__m256i _mm256_mask_i32gather_epi32 (__m256i src, int const* base_addr, __m256i vindex, __m256i mask, const int scale) VPGATHERDD ymm, vm32y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.UInt64},System.UInt64*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>__m256i _mm256_mask_i32gather_epi64 (__m256i src, __int64 const* base_addr, __m128i vindex, __m256i mask, const int scale) VPGATHERDQ ymm, vm32y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherMaskVector256(System.Runtime.Intrinsics.Vector256{System.UInt64},System.UInt64*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>__m256i _mm256_mask_i64gather_epi64 (__m256i src, __int64 const* base_addr, __m256i vindex, __m256i mask, const int scale) VPGATHERQQ ymm, vm32y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="source" />
      <param name="baseAddress" />
      <param name="index" />
      <param name="mask" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Double*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128d _mm_i32gather_pd (double const* base_addr, __m128i vindex, const int scale) VGATHERDPD xmm, vm32x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Double*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__m128d _mm_i64gather_pd (double const* base_addr, __m128i vindex, const int scale) VGATHERQPD xmm, vm64x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128i _mm_i32gather_epi32 (int const* base_addr, __m128i vindex, const int scale) VPGATHERDD xmm, vm32x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__m128i _mm_i64gather_epi32 (int const* base_addr, __m128i vindex, const int scale) VPGATHERQD xmm, vm64x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m128i _mm256_i64gather_epi32 (int const* base_addr, __m256i vindex, const int scale) VPGATHERQD xmm, vm64y, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128i _mm_i32gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale) VPGATHERDQ xmm, vm32x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__m128i _mm_i64gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale) VPGATHERQQ xmm, vm64x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Single*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128 _mm_i32gather_ps (float const* base_addr, __m128i vindex, const int scale) VGATHERDPS xmm, vm32x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Single*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__m128 _mm_i64gather_ps (float const* base_addr, __m128i vindex, const int scale) VGATHERQPS xmm, vm64x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.Single*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m128 _mm256_i64gather_ps (float const* base_addr, __m256i vindex, const int scale) VGATHERQPS xmm, vm64y, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128i _mm_i32gather_epi32 (int const* base_addr, __m128i vindex, const int scale) VPGATHERDD xmm, vm32x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__m128i _mm_i64gather_epi32 (int const* base_addr, __m128i vindex, const int scale) VPGATHERQD xmm, vm64x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.UInt32*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m128i _mm256_i64gather_epi32 (int const* base_addr, __m256i vindex, const int scale) VPGATHERQD xmm, vm64y, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128i _mm_i32gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale) VPGATHERDQ xmm, vm32x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector128(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__m128i _mm_i64gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale) VPGATHERQQ xmm, vm64x, xmm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.Double*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m256d _mm256_i32gather_pd (double const* base_addr, __m128i vindex, const int scale) VGATHERDPD ymm, vm32y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.Double*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m256d _mm256_i64gather_pd (double const* base_addr, __m256i vindex, const int scale) VGATHERQPD ymm, vm64y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>__m256i _mm256_i32gather_epi32 (int const* base_addr, __m256i vindex, const int scale) VPGATHERDD ymm, vm32y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m256i _mm256_i32gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale) VPGATHERDQ ymm, vm32y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.Int64*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m256i _mm256_i64gather_epi64 (__int64 const* base_addr, __m256i vindex, const int scale) VPGATHERQQ ymm, vm64y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.Single*,System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>__m256 _mm256_i32gather_ps (float const* base_addr, __m256i vindex, const int scale) VGATHERDPS ymm, vm32y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.UInt32*,System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>__m256i _mm256_i32gather_epi32 (int const* base_addr, __m256i vindex, const int scale) VPGATHERDD ymm, vm32y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m256i _mm256_i32gather_epi64 (__int64 const* base_addr, __m128i vindex, const int scale) VPGATHERDQ ymm, vm32y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.GatherVector256(System.UInt64*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m256i _mm256_i64gather_epi64 (__int64 const* base_addr, __m256i vindex, const int scale) VPGATHERQQ ymm, vm64y, ymm Параметр scale должен иметь значение 1, 2, 4 или 8, иначе возникнет исключение ArgumentOutOfRangeException.</summary>
      <param name="baseAddress" />
      <param name="index" />
      <param name="scale" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.HorizontalAdd(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_hadd_epi16 (__m256i a, __m256i b) VPHADDW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.HorizontalAdd(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_hadd_epi32 (__m256i a, __m256i b) VPHADDD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.HorizontalAddSaturate(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_hadds_epi16 (__m256i a, __m256i b) VPHADDSW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.HorizontalSubtract(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_hsub_epi16 (__m256i a, __m256i b) VPHSUBW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.HorizontalSubtract(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_hsub_epi32 (__m256i a, __m256i b) VPHSUBD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.HorizontalSubtractSaturate(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_hsubs_epi16 (__m256i a, __m256i b) VPHSUBSW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.InsertVector128(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.InsertVector128(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.InsertVector128(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.InsertVector128(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.InsertVector128(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>__m256i _mm256_inserti128_si256 (__m256i a, __m128i b, const int imm8) VINSERTI128 ymm, ymm, xmm, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Avx2.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.LoadAlignedVector256NonTemporal(System.Byte*)">
      <summary>__m256i _mm256_stream_load_si256 (__m256i const* mem_addr) VMOVNTDQA ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.LoadAlignedVector256NonTemporal(System.Int16*)">
      <summary>__m256i _mm256_stream_load_si256 (__m256i const* mem_addr) VMOVNTDQA ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.LoadAlignedVector256NonTemporal(System.Int32*)">
      <summary>__m256i _mm256_stream_load_si256 (__m256i const* mem_addr) VMOVNTDQA ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.LoadAlignedVector256NonTemporal(System.Int64*)">
      <summary>__m256i _mm256_stream_load_si256 (__m256i const* mem_addr) VMOVNTDQA ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.LoadAlignedVector256NonTemporal(System.SByte*)">
      <summary>__m256i _mm256_stream_load_si256 (__m256i const* mem_addr) VMOVNTDQA ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.LoadAlignedVector256NonTemporal(System.UInt16*)">
      <summary>__m256i _mm256_stream_load_si256 (__m256i const* mem_addr) VMOVNTDQA ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.LoadAlignedVector256NonTemporal(System.UInt32*)">
      <summary>__m256i _mm256_stream_load_si256 (__m256i const* mem_addr) VMOVNTDQA ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.LoadAlignedVector256NonTemporal(System.UInt64*)">
      <summary>__m256i _mm256_stream_load_si256 (__m256i const* mem_addr) VMOVNTDQA ymm, m256</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskLoad(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_maskload_epi32 (int const* mem_addr, __m128i mask) VPMASKMOVD xmm, xmm, m128</summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskLoad(System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_maskload_epi32 (int const* mem_addr, __m256i mask) VPMASKMOVD ymm, ymm, m256</summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskLoad(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128i _mm_maskload_epi64 (__int64 const* mem_addr, __m128i mask) VPMASKMOVQ xmm, xmm, m128</summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskLoad(System.Int64*,System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>__m256i _mm256_maskload_epi64 (__int64 const* mem_addr, __m256i mask) VPMASKMOVQ ymm, ymm, m256</summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskLoad(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_maskload_epi32 (int const* mem_addr, __m128i mask) VPMASKMOVD xmm, xmm, m128</summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskLoad(System.UInt32*,System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_maskload_epi32 (int const* mem_addr, __m256i mask) VPMASKMOVD ymm, ymm, m256</summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskLoad(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_maskload_epi64 (__int64 const* mem_addr, __m128i mask) VPMASKMOVQ xmm, xmm, m128</summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskLoad(System.UInt64*,System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>__m256i _mm256_maskload_epi64 (__int64 const* mem_addr, __m256i mask) VPMASKMOVQ ymm, ymm, m256</summary>
      <param name="address" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskStore(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>void _mm_maskstore_epi32 (int* mem_addr, __m128i mask, __m128i a) VPMASKMOVD m128, xmm, xmm</summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskStore(System.Int32*,System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>void _mm256_maskstore_epi32 (int* mem_addr, __m256i mask, __m256i a) VPMASKMOVD m256, ymm, ymm</summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskStore(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>void _mm_maskstore_epi64 (__int64* mem_addr, __m128i mask, __m128i a) VPMASKMOVQ m128, xmm, xmm</summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskStore(System.Int64*,System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>void _mm256_maskstore_epi64 (__int64* mem_addr, __m256i mask, __m256i a) VPMASKMOVQ m256, ymm, ymm</summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskStore(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>void _mm_maskstore_epi32 (int* mem_addr, __m128i mask, __m128i a) VPMASKMOVD m128, xmm, xmm</summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskStore(System.UInt32*,System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>void _mm256_maskstore_epi32 (int* mem_addr, __m256i mask, __m256i a) VPMASKMOVD m256, ymm, ymm</summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskStore(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>void _mm_maskstore_epi64 (__int64* mem_addr, __m128i mask, __m128i a) VPMASKMOVQ m128, xmm, xmm</summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MaskStore(System.UInt64*,System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>void _mm256_maskstore_epi64 (__int64* mem_addr, __m256i mask, __m256i a) VPMASKMOVQ m256, ymm, ymm</summary>
      <param name="address" />
      <param name="mask" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Max(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_max_epu8 (__m256i a, __m256i b) VPMAXUB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Max(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_max_epi16 (__m256i a, __m256i b) VPMAXSW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Max(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_max_epi32 (__m256i a, __m256i b) VPMAXSD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Max(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_max_epi8 (__m256i a, __m256i b) VPMAXSB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Max(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_max_epu16 (__m256i a, __m256i b) VPMAXUW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Max(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_max_epu32 (__m256i a, __m256i b) VPMAXUD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Min(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_min_epu8 (__m256i a, __m256i b) VPMINUB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Min(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_min_epi16 (__m256i a, __m256i b) VPMINSW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Min(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_min_epi32 (__m256i a, __m256i b) VPMINSD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Min(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_min_epi8 (__m256i a, __m256i b) VPMINSB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Min(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_min_epu16 (__m256i a, __m256i b) VPMINUW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Min(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_min_epu32 (__m256i a, __m256i b) VPMINUD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MoveMask(System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>int _mm256_movemask_epi8 (__m256i a) VPMOVMSKB reg, ymm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MoveMask(System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>int _mm256_movemask_epi8 (__m256i a) VPMOVMSKB reg, ymm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultipleSumAbsoluteDifferences(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
      <summary>__m256i _mm256_mpsadbw_epu8 (__m256i a, __m256i b, const int imm8) VMPSADBW ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Multiply(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_mul_epi32 (__m256i a, __m256i b) VPMULDQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Multiply(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_mul_epu32 (__m256i a, __m256i b) VPMULUDQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyAddAdjacent(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_maddubs_epi16 (__m256i a, __m256i b) VPMADDUBSW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyAddAdjacent(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_madd_epi16 (__m256i a, __m256i b) VPMADDWD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyHigh(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_mulhi_epi16 (__m256i a, __m256i b) VPMULHW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyHigh(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_mulhi_epu16 (__m256i a, __m256i b) VPMULHUW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyHighRoundScale(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_mulhrs_epi16 (__m256i a, __m256i b) VPMULHRSW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyLow(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_mullo_epi16 (__m256i a, __m256i b) VPMULLW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyLow(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_mullo_epi32 (__m256i a, __m256i b) VPMULLD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyLow(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_mullo_epi16 (__m256i a, __m256i b) VPMULLW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.MultiplyLow(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_mullo_epi32 (__m256i a, __m256i b) VPMULLD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Or(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_or_si256 (__m256i a, __m256i b) VPOR ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Or(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_or_si256 (__m256i a, __m256i b) VPOR ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Or(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_or_si256 (__m256i a, __m256i b) VPOR ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Or(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>__m256i _mm256_or_si256 (__m256i a, __m256i b) VPOR ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Or(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_or_si256 (__m256i a, __m256i b) VPOR ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Or(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_or_si256 (__m256i a, __m256i b) VPOR ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Or(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_or_si256 (__m256i a, __m256i b) VPOR ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Or(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>__m256i _mm256_or_si256 (__m256i a, __m256i b) VPOR ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.PackSignedSaturate(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_packs_epi16 (__m256i a, __m256i b) VPACKSSWB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.PackSignedSaturate(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_packs_epi32 (__m256i a, __m256i b) VPACKSSDW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.PackUnsignedSaturate(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_packus_epi16 (__m256i a, __m256i b) VPACKUSWB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.PackUnsignedSaturate(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_packus_epi32 (__m256i a, __m256i b) VPACKUSDW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
      <summary>__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute2x128(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute2x128(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)">
      <summary>__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute2x128(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute2x128(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute2x128(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>__m256i _mm256_permute2x128_si256 (__m256i a, __m256i b, const int imm8) VPERM2I128 ymm, ymm, ymm/m256, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute4x64(System.Runtime.Intrinsics.Vector256{System.Double},System.Byte)">
      <summary>__m256d _mm256_permute4x64_pd (__m256d a, const int imm8) VPERMPD ymm, ymm/m256, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute4x64(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8) VPERMQ ymm, ymm/m256, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Permute4x64(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>__m256i _mm256_permute4x64_epi64 (__m256i a, const int imm8) VPERMQ ymm, ymm/m256, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.PermuteVar8x32(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_permutevar8x32_epi32 (__m256i a, __m256i idx) VPERMD ymm, ymm/m256, ymm</summary>
      <param name="left" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.PermuteVar8x32(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256 _mm256_permutevar8x32_ps (__m256 a, __m256i idx) VPERMPS ymm, ymm/m256, ymm</summary>
      <param name="left" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.PermuteVar8x32(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_permutevar8x32_epi32 (__m256i a, __m256i idx) VPERMD ymm, ymm/m256, ymm</summary>
      <param name="left" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>__m256i _mm256_slli_epi16 (__m256i a, int imm8) VPSLLW ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m256i _mm256_sll_epi16 (__m256i a, __m128i count) VPSLLW ymm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>__m256i _mm256_slli_epi32 (__m256i a, int imm8) VPSLLD ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m256i _mm256_sll_epi32 (__m256i a, __m128i count) VPSLLD ymm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m256i _mm256_slli_epi64 (__m256i a, int imm8) VPSLLQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m256i _mm256_sll_epi64 (__m256i a, __m128i count) VPSLLQ ymm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>__m256i _mm256_slli_epi16 (__m256i a, int imm8) VPSLLW ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m256i _mm256_sll_epi16 (__m256i a, __m128i count) VPSLLW ymm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>__m256i _mm256_slli_epi32 (__m256i a, int imm8) VPSLLD ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m256i _mm256_sll_epi32 (__m256i a, __m128i count) VPSLLD ymm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>__m256i _mm256_slli_epi64 (__m256i a, int imm8) VPSLLQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m256i _mm256_sll_epi64 (__m256i a, __m128i count) VPSLLQ ymm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
      <summary>__m256i _mm256_bslli_epi128 (__m256i a, const int imm8) VPSLLDQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>__m256i _mm256_bslli_epi128 (__m256i a, const int imm8) VPSLLDQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>__m256i _mm256_bslli_epi128 (__m256i a, const int imm8) VPSLLDQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m256i _mm256_bslli_epi128 (__m256i a, const int imm8) VPSLLDQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)">
      <summary>__m256i _mm256_bslli_epi128 (__m256i a, const int imm8) VPSLLDQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>__m256i _mm256_bslli_epi128 (__m256i a, const int imm8) VPSLLDQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>__m256i _mm256_bslli_epi128 (__m256i a, const int imm8) VPSLLDQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>__m256i _mm256_bslli_epi128 (__m256i a, const int imm8) VPSLLDQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_sllv_epi32 (__m128i a, __m128i count) VPSLLVD xmm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_sllv_epi64 (__m128i a, __m128i count) VPSLLVQ xmm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_sllv_epi32 (__m128i a, __m128i count) VPSLLVD xmm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_sllv_epi64 (__m128i a, __m128i count) VPSLLVQ xmm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_sllv_epi32 (__m256i a, __m256i count) VPSLLVD ymm, ymm, ymm/m256</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>__m256i _mm256_sllv_epi64 (__m256i a, __m256i count) VPSLLVQ ymm, ymm, ymm/m256</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_sllv_epi32 (__m256i a, __m256i count) VPSLLVD ymm, ymm, ymm/m256</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftLeftLogicalVariable(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>__m256i _mm256_sllv_epi64 (__m256i a, __m256i count) VPSLLVQ ymm, ymm, ymm/m256</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>__m256i _mm256_srai_epi16 (__m256i a, int imm8) VPSRAW ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>_mm256_sra_epi16 (__m256i a, __m128i count) VPSRAW ymm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>__m256i _mm256_srai_epi32 (__m256i a, int imm8) VPSRAD ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>_mm256_sra_epi32 (__m256i a, __m128i count) VPSRAD ymm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightArithmeticVariable(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_srav_epi32 (__m128i a, __m128i count) VPSRAVD xmm, xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightArithmeticVariable(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_srav_epi32 (__m256i a, __m256i count) VPSRAVD ymm, ymm, ymm/m256</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>__m256i _mm256_srli_epi16 (__m256i a, int imm8) VPSRLW ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m256i _mm256_srl_epi16 (__m256i a, __m128i count) VPSRLW ymm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>__m256i _mm256_srli_epi32 (__m256i a, int imm8) VPSRLD ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m256i _mm256_srl_epi32 (__m256i a, __m128i count) VPSRLD ymm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m256i _mm256_srli_epi64 (__m256i a, int imm8) VPSRLQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m256i _mm256_srl_epi64 (__m256i a, __m128i count) VPSRLQ ymm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>__m256i _mm256_srli_epi16 (__m256i a, int imm8) VPSRLW ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m256i _mm256_srl_epi16 (__m256i a, __m128i count) VPSRLW ymm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>__m256i _mm256_srli_epi32 (__m256i a, int imm8) VPSRLD ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m256i _mm256_srl_epi32 (__m256i a, __m128i count) VPSRLD ymm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>__m256i _mm256_srli_epi64 (__m256i a, int imm8) VPSRLQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m256i _mm256_srl_epi64 (__m256i a, __m128i count) VPSRLQ ymm, ymm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.Byte},System.Byte)">
      <summary>__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8) VPSRLDQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8) VPSRLDQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8) VPSRLDQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.Int64},System.Byte)">
      <summary>__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8) VPSRLDQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.SByte},System.Byte)">
      <summary>__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8) VPSRLDQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8) VPSRLDQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8) VPSRLDQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Byte)">
      <summary>__m256i _mm256_bsrli_epi128 (__m256i a, const int imm8) VPSRLDQ ymm, ymm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_srlv_epi32 (__m128i a, __m128i count) VPSRLVD xmm, xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_srlv_epi64 (__m128i a, __m128i count) VPSRLVQ xmm, xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_srlv_epi32 (__m128i a, __m128i count) VPSRLVD xmm, xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_srlv_epi64 (__m128i a, __m128i count) VPSRLVQ xmm, xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_srlv_epi32 (__m256i a, __m256i count) VPSRLVD ymm, ymm, ymm/m256</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>__m256i _mm256_srlv_epi64 (__m256i a, __m256i count) VPSRLVQ ymm, ymm, ymm/m256</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_srlv_epi32 (__m256i a, __m256i count) VPSRLVD ymm, ymm, ymm/m256</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShiftRightLogicalVariable(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>__m256i _mm256_srlv_epi64 (__m256i a, __m256i count) VPSRLVQ ymm, ymm, ymm/m256</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Shuffle(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256</summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Shuffle(System.Runtime.Intrinsics.Vector256{System.Int32},System.Byte)">
      <summary>__m256i _mm256_shuffle_epi32 (__m256i a, const int imm8) VPSHUFD ymm, ymm/m256, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Shuffle(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_shuffle_epi8 (__m256i a, __m256i b) VPSHUFB ymm, ymm, ymm/m256</summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Shuffle(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Byte)">
      <summary>__m256i _mm256_shuffle_epi32 (__m256i a, const int imm8) VPSHUFD ymm, ymm/m256, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShuffleHigh(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>__m256i _mm256_shufflehi_epi16 (__m256i a, const int imm8) VPSHUFHW ymm, ymm/m256, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShuffleHigh(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>__m256i _mm256_shufflehi_epi16 (__m256i a, const int imm8) VPSHUFHW ymm, ymm/m256, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShuffleLow(System.Runtime.Intrinsics.Vector256{System.Int16},System.Byte)">
      <summary>__m256i _mm256_shufflelo_epi16 (__m256i a, const int imm8) VPSHUFLW ymm, ymm/m256, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.ShuffleLow(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Byte)">
      <summary>__m256i _mm256_shufflelo_epi16 (__m256i a, const int imm8) VPSHUFLW ymm, ymm/m256, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Sign(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_sign_epi16 (__m256i a, __m256i b) VPSIGNW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Sign(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_sign_epi32 (__m256i a, __m256i b) VPSIGND ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Sign(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_sign_epi8 (__m256i a, __m256i b) VPSIGNB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Subtract(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_sub_epi8 (__m256i a, __m256i b) VPSUBB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Subtract(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_sub_epi16 (__m256i a, __m256i b) VPSUBW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Subtract(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_sub_epi32 (__m256i a, __m256i b) VPSUBD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Subtract(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>__m256i _mm256_sub_epi64 (__m256i a, __m256i b) VPSUBQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Subtract(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_sub_epi8 (__m256i a, __m256i b) VPSUBB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Subtract(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_sub_epi16 (__m256i a, __m256i b) VPSUBW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Subtract(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_sub_epi32 (__m256i a, __m256i b) VPSUBD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Subtract(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>__m256i _mm256_sub_epi64 (__m256i a, __m256i b) VPSUBQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.SubtractSaturate(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_subs_epu8 (__m256i a, __m256i b) VPSUBUSB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.SubtractSaturate(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_subs_epi16 (__m256i a, __m256i b) VPSUBSW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.SubtractSaturate(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_subs_epi8 (__m256i a, __m256i b) VPSUBSB ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.SubtractSaturate(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_subs_epu16 (__m256i a, __m256i b) VPSUBUSW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.SumAbsoluteDifferences(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_sad_epu8 (__m256i a, __m256i b) VPSADBW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_unpackhi_epi8 (__m256i a, __m256i b) VPUNPCKHBW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_unpackhi_epi16 (__m256i a, __m256i b) VPUNPCKHWD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_unpackhi_epi32 (__m256i a, __m256i b) VPUNPCKHDQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>__m256i _mm256_unpackhi_epi64 (__m256i a, __m256i b) VPUNPCKHQDQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_unpackhi_epi8 (__m256i a, __m256i b) VPUNPCKHBW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_unpackhi_epi16 (__m256i a, __m256i b) VPUNPCKHWD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_unpackhi_epi32 (__m256i a, __m256i b) VPUNPCKHDQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackHigh(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>__m256i _mm256_unpackhi_epi64 (__m256i a, __m256i b) VPUNPCKHQDQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackLow(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_unpacklo_epi8 (__m256i a, __m256i b) VPUNPCKLBW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackLow(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_unpacklo_epi16 (__m256i a, __m256i b) VPUNPCKLWD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackLow(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_unpacklo_epi32 (__m256i a, __m256i b) VPUNPCKLDQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackLow(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>__m256i _mm256_unpacklo_epi64 (__m256i a, __m256i b) VPUNPCKLQDQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackLow(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_unpacklo_epi8 (__m256i a, __m256i b) VPUNPCKLBW ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackLow(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_unpacklo_epi16 (__m256i a, __m256i b) VPUNPCKLWD ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackLow(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_unpacklo_epi32 (__m256i a, __m256i b) VPUNPCKLDQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.UnpackLow(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>__m256i _mm256_unpacklo_epi64 (__m256i a, __m256i b) VPUNPCKLQDQ ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Xor(System.Runtime.Intrinsics.Vector256{System.Byte},System.Runtime.Intrinsics.Vector256{System.Byte})">
      <summary>__m256i _mm256_xor_si256 (__m256i a, __m256i b) VPXOR ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Xor(System.Runtime.Intrinsics.Vector256{System.Int16},System.Runtime.Intrinsics.Vector256{System.Int16})">
      <summary>__m256i _mm256_xor_si256 (__m256i a, __m256i b) VPXOR ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Xor(System.Runtime.Intrinsics.Vector256{System.Int32},System.Runtime.Intrinsics.Vector256{System.Int32})">
      <summary>__m256i _mm256_xor_si256 (__m256i a, __m256i b) VPXOR ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Xor(System.Runtime.Intrinsics.Vector256{System.Int64},System.Runtime.Intrinsics.Vector256{System.Int64})">
      <summary>__m256i _mm256_xor_si256 (__m256i a, __m256i b) VPXOR ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Xor(System.Runtime.Intrinsics.Vector256{System.SByte},System.Runtime.Intrinsics.Vector256{System.SByte})">
      <summary>__m256i _mm256_xor_si256 (__m256i a, __m256i b) VPXOR ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Xor(System.Runtime.Intrinsics.Vector256{System.UInt16},System.Runtime.Intrinsics.Vector256{System.UInt16})">
      <summary>__m256i _mm256_xor_si256 (__m256i a, __m256i b) VPXOR ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Xor(System.Runtime.Intrinsics.Vector256{System.UInt32},System.Runtime.Intrinsics.Vector256{System.UInt32})">
      <summary>__m256i _mm256_xor_si256 (__m256i a, __m256i b) VPXOR ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Avx2.Xor(System.Runtime.Intrinsics.Vector256{System.UInt64},System.Runtime.Intrinsics.Vector256{System.UInt64})">
      <summary>__m256i _mm256_xor_si256 (__m256i a, __m256i b) VPXOR ymm, ymm, ymm/m256</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Bmi1">
      <summary>Этот класс обеспечивает доступ к аппаратным инструкциям Intel BMI1 с помощью встроенных функций</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.AndNot(System.UInt32,System.UInt32)">
      <summary>unsigned int _andn_u32 (unsigned int a, unsigned int b) ANDN r32a, r32b, reg/m32</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.BitFieldExtract(System.UInt32,System.Byte,System.Byte)">
      <summary>unsigned int _bextr_u32 (unsigned int a, unsigned int start, unsigned int len) BEXTR r32a, reg/m32, r32b</summary>
      <param name="value" />
      <param name="start" />
      <param name="length" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.BitFieldExtract(System.UInt32,System.UInt16)">
      <summary>unsigned int _bextr2_u32 (unsigned int a, unsigned int control) BEXTR r32a, reg/m32, r32b</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.ExtractLowestSetBit(System.UInt32)">
      <summary>unsigned int _blsi_u32 (unsigned int a) BLSI reg, reg/m32</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.GetMaskUpToLowestSetBit(System.UInt32)">
      <summary>unsigned int _blsmsk_u32 (unsigned int a) BLSMSK reg, reg/m32</summary>
      <param name="value" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Bmi1.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.ResetLowestSetBit(System.UInt32)">
      <summary>unsigned int _blsr_u32 (unsigned int a) BLSR reg, reg/m32</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.TrailingZeroCount(System.UInt32)">
      <summary>int _mm_tzcnt_32 (unsigned int a) TZCNT reg, reg/m32</summary>
      <param name="value" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Bmi1.X64" />
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.X64.AndNot(System.UInt64,System.UInt64)">
      <summary>unsigned __int64 _andn_u64 (unsigned __int64 a, unsigned __int64 b) ANDN r64a, r64b, reg/m64 Эта встроенная функция доступна только для 64-разрядных процессов</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.X64.BitFieldExtract(System.UInt64,System.Byte,System.Byte)">
      <summary>unsigned __int64 _bextr_u64 (unsigned __int64 a, unsigned int start, unsigned int len) BEXTR r64a, reg/m64, r64b Эта встроенная функция доступна только для 64-разрядных процессов</summary>
      <param name="value" />
      <param name="start" />
      <param name="length" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.X64.BitFieldExtract(System.UInt64,System.UInt16)">
      <summary>unsigned __int64 _bextr2_u64 (unsigned __int64 a, unsigned __int64 control) BEXTR r64a, reg/m64, r64b Эта встроенная функция доступна только для 64-разрядных процессов</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.X64.ExtractLowestSetBit(System.UInt64)">
      <summary>unsigned __int64 _blsi_u64 (unsigned __int64 a) BLSI reg, reg/m64 Эта встроенная функция доступна только для 64-разрядных процессов</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.X64.GetMaskUpToLowestSetBit(System.UInt64)">
      <summary>unsigned __int64 _blsmsk_u64 (unsigned __int64 a) BLSMSK reg, reg/m64 Эта встроенная функция доступна только для 64-разрядных процессов</summary>
      <param name="value" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Bmi1.X64.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.X64.ResetLowestSetBit(System.UInt64)">
      <summary>unsigned __int64 _blsr_u64 (unsigned __int64 a) BLSR reg, reg/m64 Эта встроенная функция доступна только для 64-разрядных процессов</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi1.X64.TrailingZeroCount(System.UInt64)">
      <summary>__int64 _mm_tzcnt_64 (unsigned __int64 a) TZCNT reg, reg/m64 Эта встроенная функция доступна только для 64-разрядных процессов</summary>
      <param name="value" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Bmi2">
      <summary>Этот класс обеспечивает доступ к аппаратным инструкциям Intel BMI2 с помощью встроенных функций</summary>
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Bmi2.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.MultiplyNoFlags(System.UInt32,System.UInt32)">
      <summary>unsigned int _mulx_u32 (unsigned int a, unsigned int b, unsigned int* hi) MULX r32a, r32b, reg/m32 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.MultiplyNoFlags(System.UInt32,System.UInt32,System.UInt32*)">
      <summary>unsigned int _mulx_u32 (unsigned int a, unsigned int b, unsigned int* hi) MULX r32a, r32b, reg/m32 Приведенная выше собственная сигнатура не соответствует напрямую управляемой сигнатуре.</summary>
      <param name="left" />
      <param name="right" />
      <param name="low" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.ParallelBitDeposit(System.UInt32,System.UInt32)">
      <summary>unsigned int _pdep_u32 (unsigned int a, unsigned int mask) PDEP r32a, r32b, reg/m32</summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.ParallelBitExtract(System.UInt32,System.UInt32)">
      <summary>unsigned int _pext_u32 (unsigned int a, unsigned int mask) PEXT r32a, r32b, reg/m32</summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Bmi2.X64" />
    <member name="P:System.Runtime.Intrinsics.X86.Bmi2.X64.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.X64.MultiplyNoFlags(System.UInt64,System.UInt64)">
      <summary>unsigned __int64 _mulx_u64 (unsigned __int64 a, unsigned __int64 b, unsigned __int64* hi) MULX r64a, r64b, reg/m64 Указанная выше собственная сигнатура не имеет прямого соответствия управляемой сигнатуре. Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.X64.MultiplyNoFlags(System.UInt64,System.UInt64,System.UInt64*)">
      <summary>unsigned __int64 _mulx_u64 (unsigned __int64 a, unsigned __int64 b, unsigned __int64* hi) MULX r64a, r64b, reg/m64 Указанная выше собственная сигнатура не имеет прямого соответствия управляемой сигнатуре. Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="low" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.X64.ParallelBitDeposit(System.UInt64,System.UInt64)">
      <summary>unsigned __int64 _pdep_u64 (unsigned __int64 a, unsigned __int64 mask) PDEP r64a, r64b, reg/m64 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.X64.ParallelBitExtract(System.UInt64,System.UInt64)">
      <summary>unsigned __int64 _pext_u64 (unsigned __int64 a, unsigned __int64 mask) PEXT r64a, r64b, reg/m64 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.X64.ZeroHighBits(System.UInt64,System.UInt64)">
      <summary>unsigned __int64 _bzhi_u64 (unsigned __int64 a, unsigned int index) BZHI r64a, reg/m32, r64b Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Bmi2.ZeroHighBits(System.UInt32,System.UInt32)">
      <summary>unsigned int _bzhi_u32 (unsigned int a, unsigned int index) BZHI r32a, reg/m32, r32b</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.FloatComparisonMode" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedEqualNonSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedEqualSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedFalseNonSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedFalseSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedGreaterThanNonSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedGreaterThanOrEqualNonSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedGreaterThanOrEqualSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedGreaterThanSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedLessThanNonSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedLessThanOrEqualNonSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedLessThanOrEqualSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedLessThanSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedNonSignaling">
      <summary>_CMP_ORD_Q</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedNotEqualNonSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedNotEqualSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.OrderedSignaling">
      <summary>_CMP_ORD_S</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedEqualNonSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedEqualSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNonSignaling">
      <summary>_CMP_UNORD_Q</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotEqualNonSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotEqualSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotGreaterThanNonSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotGreaterThanOrEqualNonSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotGreaterThanOrEqualSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotGreaterThanSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotLessThanNonSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotLessThanOrEqualNonSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotLessThanOrEqualSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedNotLessThanSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedSignaling">
      <summary>_CMP_UNORD_S</summary>
    </member>
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedTrueNonSignaling" />
    <member name="F:System.Runtime.Intrinsics.X86.FloatComparisonMode.UnorderedTrueSignaling" />
    <member name="T:System.Runtime.Intrinsics.X86.Fma">
      <summary>Этот класс обеспечивает доступ к аппаратным инструкциям Intel FMA с помощью встроенных функций.</summary>
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Fma.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_fmadd_pd (__m128d a, __m128d b, __m128d c) VFMADDPD xmm, xmm, xmm/m128</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_fmadd_ps (__m128 a, __m128 b, __m128 c) VFMADDPS xmm, xmm, xmm/m128</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAdd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_fmadd_pd (__m256d a, __m256d b, __m256d c) VFMADDPS ymm, ymm, ymm/m256</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAdd(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_fmadd_ps (__m256 a, __m256 b, __m256 c) VFMADDPS ymm, ymm, ymm/m256</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddNegated(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_fnmadd_pd (__m128d a, __m128d b, __m128d c) VFNMADDPD xmm, xmm, xmm/m128</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddNegated(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_fnmadd_ps (__m128 a, __m128 b, __m128 c) VFNMADDPS xmm, xmm, xmm/m128</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddNegated(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_fnmadd_pd (__m256d a, __m256d b, __m256d c) VFNMADDPD ymm, ymm, ymm/m256</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddNegated(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_fnmadd_ps (__m256 a, __m256 b, __m256 c) VFNMADDPS ymm, ymm, ymm/m256</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddNegatedScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_fnmadd_sd (__m128d a, __m128d b, __m128d c) VFNMADDSD xmm, xmm, xmm/m64</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddNegatedScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_fnmadd_ss (__m128 a, __m128 b, __m128 c) VFNMADDSS xmm, xmm, xmm/m32</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_fmadd_sd (__m128d a, __m128d b, __m128d c) VFMADDSS xmm, xmm, xmm/m64</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_fmadd_ss (__m128 a, __m128 b, __m128 c) VFMADDSS xmm, xmm, xmm/m32</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddSubtract(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_fmaddsub_pd (__m128d a, __m128d b, __m128d c) VFMADDSUBPD xmm, xmm, xmm/m128</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddSubtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_fmaddsub_ps (__m128 a, __m128 b, __m128 c) VFMADDSUBPS xmm, xmm, xmm/m128</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddSubtract(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_fmaddsub_pd (__m256d a, __m256d b, __m256d c) VFMADDSUBPD ymm, ymm, ymm/m256</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplyAddSubtract(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_fmaddsub_ps (__m256 a, __m256 b, __m256 c) VFMADDSUBPS ymm, ymm, ymm/m256</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtract(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_fmsub_pd (__m128d a, __m128d b, __m128d c) VFMSUBPS xmm, xmm, xmm/m128</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_fmsub_ps (__m128 a, __m128 b, __m128 c) VFMSUBPS xmm, xmm, xmm/m128</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtract(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_fmsub_pd (__m256d a, __m256d b, __m256d c) VFMSUBPD ymm, ymm, ymm/m256</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtract(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_fmsub_ps (__m256 a, __m256 b, __m256 c) VFMSUBPS ymm, ymm, ymm/m256</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractAdd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_fmsubadd_pd (__m128d a, __m128d b, __m128d c) VFMSUBADDPD xmm, xmm, xmm/m128</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_fmsubadd_ps (__m128 a, __m128 b, __m128 c) VFMSUBADDPS xmm, xmm, xmm/m128</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractAdd(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_fmsubadd_pd (__m256d a, __m256d b, __m256d c) VFMSUBADDPD ymm, ymm, ymm/m256</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractAdd(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_fmsubadd_ps (__m256 a, __m256 b, __m256 c) VFMSUBADDPS ymm, ymm, ymm/m256</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractNegated(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_fnmsub_pd (__m128d a, __m128d b, __m128d c) VFNMSUBPD xmm, xmm, xmm/m128</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractNegated(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_fnmsub_ps (__m128 a, __m128 b, __m128 c) VFNMSUBPS xmm, xmm, xmm/m128</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractNegated(System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double},System.Runtime.Intrinsics.Vector256{System.Double})">
      <summary>__m256d _mm256_fnmsub_pd (__m256d a, __m256d b, __m256d c) VFNMSUBPD ymm, ymm, ymm/m256</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractNegated(System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single},System.Runtime.Intrinsics.Vector256{System.Single})">
      <summary>__m256 _mm256_fnmsub_ps (__m256 a, __m256 b, __m256 c) VFNMSUBPS ymm, ymm, ymm/m256</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractNegatedScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_fnmsub_sd (__m128d a, __m128d b, __m128d c) VFNMSUBSD xmm, xmm, xmm/m64</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractNegatedScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_fnmsub_ss (__m128 a, __m128 b, __m128 c) VFNMSUBSS xmm, xmm, xmm/m32</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_fmsub_sd (__m128d a, __m128d b, __m128d c) VFMSUBSD xmm, xmm, xmm/m64</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Fma.MultiplySubtractScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_fmsub_ss (__m128 a, __m128 b, __m128 c) VFMSUBSS xmm, xmm, xmm/m32</summary>
      <param name="a" />
      <param name="b" />
      <param name="c" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Lzcnt">
      <summary>Этот класс обеспечивает доступ к аппаратным инструкциям Intel LZCNT с помощью встроенных функций.</summary>
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Lzcnt.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Lzcnt.LeadingZeroCount(System.UInt32)">
      <summary>unsigned int _lzcnt_u32 (unsigned int a) LZCNT reg, reg/m32</summary>
      <param name="value" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Lzcnt.X64" />
    <member name="P:System.Runtime.Intrinsics.X86.Lzcnt.X64.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Lzcnt.X64.LeadingZeroCount(System.UInt64)">
      <summary>unsigned __int64 _lzcnt_u64 (unsigned __int64 a) LZCNT reg, reg/m64 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Pclmulqdq">
      <summary>Этот класс обеспечивает доступ к аппаратным инструкциям Intel PCLMULQDQ с помощью встроенных функций.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Pclmulqdq.CarrylessMultiply(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__m128i _mm_clmulepi64_si128 (__m128i a, __m128i b, const int imm8) PCLMULQDQ xmm, xmm/m128, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Pclmulqdq.CarrylessMultiply(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>__m128i _mm_clmulepi64_si128 (__m128i a, __m128i b, const int imm8) PCLMULQDQ xmm, xmm/m128, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Pclmulqdq.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Popcnt">
      <summary>Этот класс обеспечивает доступ к аппаратным инструкциям Intel POPCNT с помощью встроенных функций.</summary>
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Popcnt.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Popcnt.PopCount(System.UInt32)">
      <summary>int _mm_popcnt_u32 (unsigned int a) POPCNT reg, reg/m32</summary>
      <param name="value" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Popcnt.X64" />
    <member name="P:System.Runtime.Intrinsics.X86.Popcnt.X64.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Popcnt.X64.PopCount(System.UInt64)">
      <summary>__int64 _mm_popcnt_u64 (unsigned __int64 a) POPCNT reg64, reg/m64 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Sse">
      <summary>Этот класс обеспечивает доступ к аппаратным инструкциям Intel SSE с помощью встроенных функций.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Add(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_add_ps (__m128 a,  __m128 b) ADDPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.AddScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_add_ss (__m128 a,  __m128 b) ADDSS xmm, xmm/m32</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.And(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_and_ps (__m128 a, __m128 b) ANDPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.AndNot(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_andnot_ps (__m128 a, __m128 b) ANDNPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_cmpeq_ps (__m128 a,  __m128 b) CMPPS xmm, xmm/m128, imm8(0)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_cmpgt_ps (__m128 a,  __m128 b) CMPPS xmm, xmm/m128, imm8(6)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_cmpge_ps (__m128 a,  __m128 b) CMPPS xmm, xmm/m128, imm8(5)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_cmplt_ps (__m128 a,  __m128 b) CMPPS xmm, xmm/m128, imm8(1)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_cmple_ps (__m128 a,  __m128 b) CMPPS xmm, xmm/m128, imm8(2)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareNotEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_cmpneq_ps (__m128 a,  __m128 b) CMPPS xmm, xmm/m128, imm8(4)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareNotGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_cmpngt_ps (__m128 a,  __m128 b) CMPPS xmm, xmm/m128, imm8(2)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareNotGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_cmpnge_ps (__m128 a,  __m128 b) CMPPS xmm, xmm/m128, imm8(1)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareNotLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_cmpnlt_ps (__m128 a,  __m128 b) CMPPS xmm, xmm/m128, imm8(5)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareNotLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_cmpnle_ps (__m128 a,  __m128 b) CMPPS xmm, xmm/m128, imm8(6)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareOrdered(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_cmpord_ps (__m128 a,  __m128 b) CMPPS xmm, xmm/m128, imm8(7)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarNotEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarNotGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarNotGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarNotLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarNotLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarOrdered(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarOrderedEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarOrderedGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarOrderedGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarOrderedLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarOrderedLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarOrderedNotEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarUnordered(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarUnorderedEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarUnorderedGreaterThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarUnorderedGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarUnorderedLessThan(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarUnorderedLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareScalarUnorderedNotEqual(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.CompareUnordered(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_cmpunord_ps (__m128 a,  __m128 b) CMPPS xmm, xmm/m128, imm8(3)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.ConvertScalarToVector128Single(System.Runtime.Intrinsics.Vector128{System.Single},System.Int32)">
      <summary>__m128 _mm_cvtsi32_ss (__m128 a, int b) CVTSI2SS xmm, reg/m32</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.ConvertToInt32(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>int _mm_cvtss_si32 (__m128 a) CVTSS2SI r32, xmm/m32</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.ConvertToInt32WithTruncation(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>int _mm_cvttss_si32 (__m128 a) CVTTSS2SI r32, xmm/m32</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Divide(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_div_ps (__m128 a,  __m128 b) DIVPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.DivideScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_div_ss (__m128 a,  __m128 b) DIVSS xmm, xmm/m32</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Sse.LoadAlignedVector128(System.Single*)">
      <summary>__m128 _mm_load_ps (float const* mem_address) MOVAPS xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.LoadHigh(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)">
      <summary>__m128 _mm_loadh_pi (__m128 a, __m64 const* mem_addr) MOVHPS xmm, m64</summary>
      <param name="lower" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.LoadLow(System.Runtime.Intrinsics.Vector128{System.Single},System.Single*)">
      <summary>__m128 _mm_loadl_pi (__m128 a, __m64 const* mem_addr) MOVLPS xmm, m64</summary>
      <param name="upper" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.LoadScalarVector128(System.Single*)">
      <summary>__m128 _mm_load_ss (float const* mem_address) MOVSS xmm, m32</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.LoadVector128(System.Single*)">
      <summary>__m128 _mm_loadu_ps (float const* mem_address) MOVUPS xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Max(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_max_ps (__m128 a,  __m128 b) MAXPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.MaxScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_max_ss (__m128 a,  __m128 b) MAXSS xmm, xmm/m32</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Min(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_min_ps (__m128 a,  __m128 b) MINPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.MinScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_min_ss (__m128 a,  __m128 b) MINSS xmm, xmm/m32</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.MoveHighToLow(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_movehl_ps (__m128 a,  __m128 b) MOVHLPS xmm, xmm</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.MoveLowToHigh(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_movelh_ps (__m128 a,  __m128 b) MOVLHPS xmm, xmm</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.MoveMask(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>int _mm_movemask_ps (__m128 a) MOVMSKPS reg, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.MoveScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_move_ss (__m128 a, __m128 b) MOVSS xmm, xmm</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Multiply(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_mul_ps (__m128 a, __m128 b) MULPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.MultiplyScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_mul_ss (__m128 a, __m128 b) MULPS xmm, xmm/m32</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Or(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_or_ps (__m128 a,  __m128 b) ORPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Prefetch0(System.Void*)">
      <summary>void _mm_prefetch(char* p, int i) PREFETCHT0 m8</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Prefetch1(System.Void*)">
      <summary>void _mm_prefetch(char* p, int i) PREFETCHT1 m8</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Prefetch2(System.Void*)">
      <summary>void _mm_prefetch(char* p, int i) PREFETCHT2 m8</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.PrefetchNonTemporal(System.Void*)">
      <summary>void _mm_prefetch(char* p, int i) PREFETCHNTA m8</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Reciprocal(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_rcp_ps (__m128 a) RCPPS xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.ReciprocalScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_rcp_ss (__m128 a) RCPSS xmm, xmm/m32</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.ReciprocalScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_rcp_ss (__m128 a, __m128 b) RCPSS xmm, xmm/m32 Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется с целью обеспечить согласованность с другими скалярными API.</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.ReciprocalSqrt(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_rsqrt_ps (__m128 a) RSQRTPS xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.ReciprocalSqrtScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_rsqrt_ss (__m128 a) RSQRTSS xmm, xmm/m32</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.ReciprocalSqrtScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_rsqrt_ss (__m128 a, __m128 b) RSQRTSS xmm, xmm/m32 Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется с целью обеспечить согласованность с другими скалярными API.</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Shuffle(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>__m128 _mm_shuffle_ps (__m128 a,  __m128 b, unsigned int control) SHUFPS xmm, xmm/m128, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Sqrt(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_sqrt_ps (__m128 a) SQRTPS xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.SqrtScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_sqrt_ss (__m128 a) SQRTSS xmm, xmm/m32</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.SqrtScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_sqrt_ss (__m128 a, __m128 b) SQRTSS xmm, xmm/m32 Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется с целью обеспечить согласованность с другими скалярными API.</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Store(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>void _mm_storeu_ps (float* mem_addr, __m128 a) MOVUPS m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.StoreAligned(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>void _mm_store_ps (float* mem_addr, __m128 a) MOVAPS m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.StoreAlignedNonTemporal(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>void _mm_stream_ps (float* mem_addr, __m128 a) MOVNTPS m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.StoreFence">
      <summary>void _mm_sfence(void) SFENCE</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.StoreHigh(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>void _mm_storeh_pi (__m64* mem_addr, __m128 a) MOVHPS m64, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.StoreLow(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>void _mm_storel_pi (__m64* mem_addr, __m128 a) MOVLPS m64, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.StoreScalar(System.Single*,System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>void _mm_store_ss (float* mem_addr, __m128 a) MOVSS m32, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Subtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128d _mm_sub_ps (__m128d a, __m128d b) SUBPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.SubtractScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_sub_ss (__m128 a, __m128 b) SUBSS xmm, xmm/m32</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_unpackhi_ps (__m128 a,  __m128 b) UNPCKHPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.UnpackLow(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_unpacklo_ps (__m128 a,  __m128 b) UNPCKLPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Sse.X64" />
    <member name="M:System.Runtime.Intrinsics.X86.Sse.X64.ConvertScalarToVector128Single(System.Runtime.Intrinsics.Vector128{System.Single},System.Int64)">
      <summary>__m128 _mm_cvtsi64_ss (__m128 a, __int64 b) CVTSI2SS xmm, reg/m64 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.X64.ConvertToInt64(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__int64 _mm_cvtss_si64 (__m128 a) CVTSS2SI r64, xmm/m32 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse.X64.ConvertToInt64WithTruncation(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__int64 _mm_cvttss_si64 (__m128 a) CVTTSS2SI r64, xmm/m32 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse.X64.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Sse.Xor(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_xor_ps (__m128 a,  __m128 b) XORPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Sse2">
      <summary>Этот класс обеспечивает доступ к аппаратным инструкциям Intel SSE2 с помощью встроенных функций.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_add_epi8 (__m128i a,  __m128i b) PADDB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_add_pd (__m128d a,  __m128d b) ADDPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_add_epi16 (__m128i a,  __m128i b) PADDW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_add_epi32 (__m128i a,  __m128i b) PADDD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128i _mm_add_epi64 (__m128i a,  __m128i b) PADDQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_add_epi8 (__m128i a,  __m128i b) PADDB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_add_epi16 (__m128i a,  __m128i b) PADDW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_add_epi32 (__m128i a,  __m128i b) PADDD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Add(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_add_epi64 (__m128i a,  __m128i b) PADDQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AddSaturate(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_adds_epu8 (__m128i a,  __m128i b) PADDUSB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AddSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_adds_epi16 (__m128i a,  __m128i b) PADDSW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AddSaturate(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_adds_epi8 (__m128i a,  __m128i b) PADDSB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AddSaturate(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_adds_epu16 (__m128i a,  __m128i b) PADDUSW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AddScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_add_sd (__m128d a,  __m128d b) ADDSD xmm, xmm/m64</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_and_si128 (__m128i a,  __m128i b) PAND xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_and_pd (__m128d a, __m128d b) ANDPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_and_si128 (__m128i a,  __m128i b) PAND xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_and_si128 (__m128i a,  __m128i b) PAND xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128i _mm_and_si128 (__m128i a,  __m128i b) PAND xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_and_si128 (__m128i a,  __m128i b) PAND xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_and_si128 (__m128i a,  __m128i b) PAND xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_and_si128 (__m128i a,  __m128i b) PAND xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.And(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_and_si128 (__m128i a,  __m128i b) PAND xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_andnot_si128 (__m128i a,  __m128i b) PANDN xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_andnot_pd (__m128d a, __m128d b) ADDNPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_andnot_si128 (__m128i a,  __m128i b) PANDN xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_andnot_si128 (__m128i a,  __m128i b) PANDN xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128i _mm_andnot_si128 (__m128i a,  __m128i b) PANDN xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_andnot_si128 (__m128i a,  __m128i b) PANDN xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_andnot_si128 (__m128i a,  __m128i b) PANDN xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_andnot_si128 (__m128i a,  __m128i b) PANDN xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.AndNot(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_andnot_si128 (__m128i a,  __m128i b) PANDN xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Average(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_avg_epu8 (__m128i a,  __m128i b) PAVGB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Average(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_avg_epu16 (__m128i a,  __m128i b) PAVGW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_cmpeq_epi8 (__m128i a,  __m128i b) PCMPEQB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_cmpeq_pd (__m128d a,  __m128d b) CMPPD xmm, xmm/m128, imm8(0)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_cmpeq_epi16 (__m128i a,  __m128i b) PCMPEQW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_cmpeq_epi32 (__m128i a,  __m128i b) PCMPEQD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareEqual(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_cmpeq_epi8 (__m128i a,  __m128i b) PCMPEQB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareEqual(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_cmpeq_epi16 (__m128i a,  __m128i b) PCMPEQW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareEqual(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_cmpeq_epi32 (__m128i a,  __m128i b) PCMPEQD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_cmpgt_pd (__m128d a,  __m128d b) CMPPD xmm, xmm/m128, imm8(6)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_cmpgt_epi16 (__m128i a,  __m128i b) PCMPGTW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_cmpgt_epi32 (__m128i a,  __m128i b) PCMPGTD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_cmpgt_epi8 (__m128i a,  __m128i b) PCMPGTB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_cmpge_pd (__m128d a,  __m128d b) CMPPD xmm, xmm/m128, imm8(5)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_cmplt_pd (__m128d a,  __m128d b) CMPPD xmm, xmm/m128, imm8(1)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_cmplt_epi16 (__m128i a,  __m128i b) PCMPGTW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_cmplt_epi32 (__m128i a,  __m128i b) PCMPGTD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareLessThan(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_cmplt_epi8 (__m128i a,  __m128i b) PCMPGTB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_cmple_pd (__m128d a,  __m128d b) CMPPD xmm, xmm/m128, imm8(2)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareNotEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_cmpneq_pd (__m128d a,  __m128d b) CMPPD xmm, xmm/m128, imm8(4)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareNotGreaterThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_cmpngt_pd (__m128d a,  __m128d b) CMPPD xmm, xmm/m128, imm8(2)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareNotGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_cmpnge_pd (__m128d a,  __m128d b) CMPPD xmm, xmm/m128, imm8(1)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareNotLessThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_cmpnlt_pd (__m128d a,  __m128d b) CMPPD xmm, xmm/m128, imm8(5)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareNotLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_cmpnle_pd (__m128d a,  __m128d b) CMPPD xmm, xmm/m128, imm8(6)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareOrdered(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_cmpord_pd (__m128d a,  __m128d b) CMPPD xmm, xmm/m128, imm8(7)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarGreaterThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarLessThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarNotEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarNotGreaterThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarNotGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarNotLessThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarNotLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarOrdered(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarOrderedEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarOrderedGreaterThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarOrderedGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarOrderedLessThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarOrderedLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarOrderedNotEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarUnordered(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarUnorderedEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarUnorderedGreaterThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarUnorderedGreaterThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarUnorderedLessThan(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarUnorderedLessThanOrEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareScalarUnorderedNotEqual(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.CompareUnordered(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_cmpunord_pd (__m128d a,  __m128d b) CMPPD xmm, xmm/m128, imm8(3)</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertScalarToVector128Double(System.Runtime.Intrinsics.Vector128{System.Double},System.Int32)">
      <summary>__m128d _mm_cvtsi32_sd (__m128d a, int b) CVTSI2SD xmm, reg/m32</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertScalarToVector128Double(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128d _mm_cvtss_sd (__m128d a, __m128 b) CVTSS2SD xmm, xmm/m32</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertScalarToVector128Int32(System.Int32)">
      <summary>__m128i _mm_cvtsi32_si128 (int a) MOVD xmm, reg/m32</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertScalarToVector128Single(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128 _mm_cvtsd_ss (__m128 a, __m128d b) CVTSD2SS xmm, xmm/m64</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertScalarToVector128UInt32(System.UInt32)">
      <summary>__m128i _mm_cvtsi32_si128 (int a) MOVD xmm, reg/m32</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToInt32(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>int _mm_cvtsd_si32 (__m128d a) CVTSD2SI r32, xmm/m64</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToInt32(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>int _mm_cvtsi128_si32 (__m128i a) MOVD reg/m32, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToInt32WithTruncation(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>int _mm_cvttsd_si32 (__m128d a) CVTTSD2SI reg, xmm/m64</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToUInt32(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>int _mm_cvtsi128_si32 (__m128i a) MOVD reg/m32, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToVector128Double(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128d _mm_cvtepi32_pd (__m128i a) CVTDQ2PD xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToVector128Double(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128d _mm_cvtps_pd (__m128 a) CVTPS2PD xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToVector128Int32(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128i _mm_cvtpd_epi32 (__m128d a) CVTPD2DQ xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToVector128Int32(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128i _mm_cvtps_epi32 (__m128 a) CVTPS2DQ xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToVector128Int32WithTruncation(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128i _mm_cvttpd_epi32 (__m128d a) CVTTPD2DQ xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToVector128Int32WithTruncation(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128i _mm_cvttps_epi32 (__m128 a) CVTTPS2DQ xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToVector128Single(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128 _mm_cvtpd_ps (__m128d a) CVTPD2PS xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ConvertToVector128Single(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128 _mm_cvtepi32_ps (__m128i a) CVTDQ2PS xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Divide(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_div_pd (__m128d a,  __m128d b) DIVPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.DivideScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_div_sd (__m128d a,  __m128d b) DIVSD xmm, xmm/m64</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Extract(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>int _mm_extract_epi16 (__m128i a,  int immediate) PEXTRW reg, xmm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Insert(System.Runtime.Intrinsics.Vector128{System.Int16},System.Int16,System.Byte)">
      <summary>__m128i _mm_insert_epi16 (__m128i a,  int i, int immediate) PINSRW xmm, reg/m16, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Insert(System.Runtime.Intrinsics.Vector128{System.UInt16},System.UInt16,System.Byte)">
      <summary>__m128i _mm_insert_epi16 (__m128i a,  int i, int immediate) PINSRW xmm, reg/m16, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse2.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.Byte*)">
      <summary>__m128i _mm_load_si128 (__m128i const* mem_address) MOVDQA xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.Double*)">
      <summary>__m128d _mm_load_pd (double const* mem_address) MOVAPD xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.Int16*)">
      <summary>__m128i _mm_load_si128 (__m128i const* mem_address) MOVDQA xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.Int32*)">
      <summary>__m128i _mm_load_si128 (__m128i const* mem_address) MOVDQA xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.Int64*)">
      <summary>__m128i _mm_load_si128 (__m128i const* mem_address) MOVDQA xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.SByte*)">
      <summary>__m128i _mm_load_si128 (__m128i const* mem_address) MOVDQA xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.UInt16*)">
      <summary>__m128i _mm_load_si128 (__m128i const* mem_address) MOVDQA xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.UInt32*)">
      <summary>__m128i _mm_load_si128 (__m128i const* mem_address) MOVDQA xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadAlignedVector128(System.UInt64*)">
      <summary>__m128i _mm_load_si128 (__m128i const* mem_address) MOVDQA xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadFence">
      <summary>void _mm_lfence(void) LFENCE</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadHigh(System.Runtime.Intrinsics.Vector128{System.Double},System.Double*)">
      <summary>__m128d _mm_loadh_pd (__m128d a, double const* mem_addr) MOVHPD xmm, m64</summary>
      <param name="lower" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadLow(System.Runtime.Intrinsics.Vector128{System.Double},System.Double*)">
      <summary>__m128d _mm_loadl_pd (__m128d a, double const* mem_addr) MOVLPD xmm, m64</summary>
      <param name="upper" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadScalarVector128(System.Double*)">
      <summary>__m128d _mm_load_sd (double const* mem_address) MOVSD xmm, m64</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadScalarVector128(System.Int32*)">
      <summary>__m128i _mm_loadl_epi32 (__m128i const* mem_addr) MOVD xmm, reg/m32 Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для полноты.</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadScalarVector128(System.Int64*)">
      <summary>__m128i _mm_loadl_epi64 (__m128i const* mem_addr) MOVQ xmm, reg/m64</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadScalarVector128(System.UInt32*)">
      <summary>__m128i _mm_loadl_epi32 (__m128i const* mem_addr) MOVD xmm, reg/m32 Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для полноты.</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadScalarVector128(System.UInt64*)">
      <summary>__m128i _mm_loadl_epi64 (__m128i const* mem_addr) MOVQ xmm, reg/m64</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.Byte*)">
      <summary>__m128i _mm_loadu_si128 (__m128i const* mem_address) MOVDQU xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.Double*)">
      <summary>__m128d _mm_loadu_pd (double const* mem_address) MOVUPD xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.Int16*)">
      <summary>__m128i _mm_loadu_si128 (__m128i const* mem_address) MOVDQU xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.Int32*)">
      <summary>__m128i _mm_loadu_si128 (__m128i const* mem_address) MOVDQU xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.Int64*)">
      <summary>__m128i _mm_loadu_si128 (__m128i const* mem_address) MOVDQU xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.SByte*)">
      <summary>__m128i _mm_loadu_si128 (__m128i const* mem_address) MOVDQU xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.UInt16*)">
      <summary>__m128i _mm_loadu_si128 (__m128i const* mem_address) MOVDQU xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.UInt32*)">
      <summary>__m128i _mm_loadu_si128 (__m128i const* mem_address) MOVDQU xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.LoadVector128(System.UInt64*)">
      <summary>__m128i _mm_loadu_si128 (__m128i const* mem_address) MOVDQU xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MaskMove(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte*)">
      <summary>void _mm_maskmoveu_si128 (__m128i a,  __m128i mask, char* mem_address) MASKMOVDQU xmm, xmm</summary>
      <param name="source" />
      <param name="mask" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MaskMove(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.SByte*)">
      <summary>void _mm_maskmoveu_si128 (__m128i a,  __m128i mask, char* mem_address) MASKMOVDQU xmm, xmm</summary>
      <param name="source" />
      <param name="mask" />
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Max(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_max_epu8 (__m128i a,  __m128i b) PMAXUB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Max(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_max_pd (__m128d a,  __m128d b) MAXPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Max(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_max_epi16 (__m128i a,  __m128i b) PMAXSW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MaxScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_max_sd (__m128d a,  __m128d b) MAXSD xmm, xmm/m64</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MemoryFence">
      <summary>void _mm_mfence(void) MFENCE</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Min(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_min_epu8 (__m128i a,  __m128i b) PMINUB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Min(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_min_pd (__m128d a,  __m128d b) MINPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Min(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_min_epi16 (__m128i a,  __m128i b) PMINSW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MinScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_min_sd (__m128d a,  __m128d b) MINSD xmm, xmm/m64</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MoveMask(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>int _mm_movemask_epi8 (__m128i a) PMOVMSKB reg, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MoveMask(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>int _mm_movemask_pd (__m128d a) MOVMSKPD reg, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MoveMask(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>int _mm_movemask_epi8 (__m128i a) PMOVMSKB reg, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MoveScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_move_sd (__m128d a, __m128d b) MOVSD xmm, xmm</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MoveScalar(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128i _mm_move_epi64 (__m128i a) MOVQ xmm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MoveScalar(System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_move_epi64 (__m128i a) MOVQ xmm, xmm</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Multiply(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_mul_pd (__m128d a,  __m128d b) MULPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Multiply(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_mul_epu32 (__m128i a,  __m128i b) PMULUDQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MultiplyAddAdjacent(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_madd_epi16 (__m128i a,  __m128i b) PMADDWD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MultiplyHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_mulhi_epi16 (__m128i a,  __m128i b) PMULHW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MultiplyHigh(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_mulhi_epu16 (__m128i a,  __m128i b) PMULHUW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MultiplyLow(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_mullo_epi16 (__m128i a,  __m128i b) PMULLW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MultiplyLow(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_mullo_epi16 (__m128i a,  __m128i b) PMULLW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.MultiplyScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_mul_sd (__m128d a,  __m128d b) MULSD xmm, xmm/m64</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_or_si128 (__m128i a,  __m128i b) POR xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_or_pd (__m128d a,  __m128d b) ORPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_or_si128 (__m128i a,  __m128i b) POR xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_or_si128 (__m128i a,  __m128i b) POR xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128i _mm_or_si128 (__m128i a,  __m128i b) POR xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_or_si128 (__m128i a,  __m128i b) POR xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_or_si128 (__m128i a,  __m128i b) POR xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_or_si128 (__m128i a,  __m128i b) POR xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Or(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_or_si128 (__m128i a,  __m128i b) POR xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.PackSignedSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_packs_epi16 (__m128i a,  __m128i b) PACKSSWB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.PackSignedSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_packs_epi32 (__m128i a,  __m128i b) PACKSSDW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.PackUnsignedSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_packus_epi16 (__m128i a,  __m128i b) PACKUSWB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>__m128i _mm_slli_epi16 (__m128i a,  int immediate) PSLLW xmm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_sll_epi16 (__m128i a, __m128i count) PSLLW xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128i _mm_slli_epi32 (__m128i a,  int immediate) PSLLD xmm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_sll_epi32 (__m128i a, __m128i count) PSLLD xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__m128i _mm_slli_epi64 (__m128i a,  int immediate) PSLLQ xmm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128i _mm_sll_epi64 (__m128i a, __m128i count) PSLLQ xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>__m128i _mm_slli_epi16 (__m128i a,  int immediate) PSLLW xmm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_sll_epi16 (__m128i a,  __m128i count) PSLLW xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>__m128i _mm_slli_epi32 (__m128i a,  int immediate) PSLLD xmm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_sll_epi32 (__m128i a, __m128i count) PSLLD xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>__m128i _mm_slli_epi64 (__m128i a,  int immediate) PSLLQ xmm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_sll_epi64 (__m128i a, __m128i count) PSLLQ xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>__m128i _mm_bslli_si128 (__m128i a, int imm8) PSLLDQ xmm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>__m128i _mm_bslli_si128 (__m128i a, int imm8) PSLLDQ xmm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128i _mm_bslli_si128 (__m128i a, int imm8) PSLLDQ xmm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__m128i _mm_bslli_si128 (__m128i a, int imm8) PSLLDQ xmm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>__m128i _mm_bslli_si128 (__m128i a, int imm8) PSLLDQ xmm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>__m128i _mm_bslli_si128 (__m128i a, int imm8) PSLLDQ xmm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>__m128i _mm_bslli_si128 (__m128i a, int imm8) PSLLDQ xmm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftLeftLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>__m128i _mm_bslli_si128 (__m128i a, int imm8) PSLLDQ xmm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>__m128i _mm_srai_epi16 (__m128i a,  int immediate) PSRAW xmm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_sra_epi16 (__m128i a, __m128i count) PSRAW xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128i _mm_srai_epi32 (__m128i a,  int immediate) PSRAD xmm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightArithmetic(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_sra_epi32 (__m128i a, __m128i count) PSRAD xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>__m128i _mm_srli_epi16 (__m128i a,  int immediate) PSRLW xmm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_srl_epi16 (__m128i a, __m128i count) PSRLW xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128i _mm_srli_epi32 (__m128i a,  int immediate) PSRLD xmm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_srl_epi32 (__m128i a, __m128i count) PSRLD xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__m128i _mm_srli_epi64 (__m128i a,  int immediate) PSRLQ xmm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128i _mm_srl_epi64 (__m128i a, __m128i count) PSRLQ xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>__m128i _mm_srli_epi16 (__m128i a,  int immediate) PSRLW xmm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_srl_epi16 (__m128i a, __m128i count) PSRLW xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>__m128i _mm_srli_epi32 (__m128i a,  int immediate) PSRLD xmm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_srl_epi32 (__m128i a, __m128i count) PSRLD xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>__m128i _mm_srli_epi64 (__m128i a,  int immediate) PSRLQ xmm, imm8</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_srl_epi64 (__m128i a, __m128i count) PSRLQ xmm, xmm/m128</summary>
      <param name="value" />
      <param name="count" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>__m128i _mm_bsrli_si128 (__m128i a, int imm8) PSRLDQ xmm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>__m128i _mm_bsrli_si128 (__m128i a, int imm8) PSRLDQ xmm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128i _mm_bsrli_si128 (__m128i a, int imm8) PSRLDQ xmm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__m128i _mm_bsrli_si128 (__m128i a, int imm8) PSRLDQ xmm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>__m128i _mm_bsrli_si128 (__m128i a, int imm8) PSRLDQ xmm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>__m128i _mm_bsrli_si128 (__m128i a, int imm8) PSRLDQ xmm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>__m128i _mm_bsrli_si128 (__m128i a, int imm8) PSRLDQ xmm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShiftRightLogical128BitLane(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>__m128i _mm_bsrli_si128 (__m128i a, int imm8) PSRLDQ xmm, imm8</summary>
      <param name="value" />
      <param name="numBytes" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Shuffle(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>__m128d _mm_shuffle_pd (__m128d a,  __m128d b, int immediate) SHUFPD xmm, xmm/m128, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Shuffle(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128i _mm_shuffle_epi32 (__m128i a,  int immediate) PSHUFD xmm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Shuffle(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>__m128i _mm_shuffle_epi32 (__m128i a,  int immediate) PSHUFD xmm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShuffleHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>__m128i _mm_shufflehi_epi16 (__m128i a,  int immediate) PSHUFHW xmm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShuffleHigh(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>__m128i _mm_shufflehi_epi16 (__m128i a,  int control) PSHUFHW xmm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShuffleLow(System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>__m128i _mm_shufflelo_epi16 (__m128i a,  int control) PSHUFLW xmm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.ShuffleLow(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>__m128i _mm_shufflelo_epi16 (__m128i a,  int control) PSHUFLW xmm, xmm/m128, imm8</summary>
      <param name="value" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Sqrt(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_sqrt_pd (__m128d a) SQRTPD xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.SqrtScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_sqrt_sd (__m128d a) SQRTSD xmm, xmm/64 Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для рекомендованного варианта использования данной встроенной функции.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.SqrtScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_sqrt_sd (__m128d a, __m128d b) SQRTSD xmm, xmm/64</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.Byte*,System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>void _mm_storeu_si128 (__m128i* mem_addr, __m128i a) MOVDQU m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>void _mm_storeu_pd (double* mem_addr, __m128d a) MOVUPD m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.Int16*,System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>void _mm_storeu_si128 (__m128i* mem_addr, __m128i a) MOVDQU m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>void _mm_storeu_si128 (__m128i* mem_addr, __m128i a) MOVDQU m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>void _mm_storeu_si128 (__m128i* mem_addr, __m128i a) MOVDQU m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.SByte*,System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>void _mm_storeu_si128 (__m128i* mem_addr, __m128i a) MOVDQU m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.UInt16*,System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>void _mm_storeu_si128 (__m128i* mem_addr, __m128i a) MOVDQU m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>void _mm_storeu_si128 (__m128i* mem_addr, __m128i a) MOVDQU m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Store(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>void _mm_storeu_si128 (__m128i* mem_addr, __m128i a) MOVDQU m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.Byte*,System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>void _mm_store_si128 (__m128i* mem_addr, __m128i a) MOVDQA m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>void _mm_store_pd (double* mem_addr, __m128d a) MOVAPD m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.Int16*,System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>void _mm_store_si128 (__m128i* mem_addr, __m128i a) MOVDQA m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>void _mm_store_si128 (__m128i* mem_addr, __m128i a) MOVDQA m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>void _mm_store_si128 (__m128i* mem_addr, __m128i a) MOVDQA m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.SByte*,System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>void _mm_store_si128 (__m128i* mem_addr, __m128i a) MOVDQA m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.UInt16*,System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>void _mm_store_si128 (__m128i* mem_addr, __m128i a) MOVDQA m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>void _mm_store_si128 (__m128i* mem_addr, __m128i a) MOVDQA m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAligned(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>void _mm_store_si128 (__m128i* mem_addr, __m128i a) MOVDQA m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.Byte*,System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>void _mm_stream_si128 (__m128i* mem_addr, __m128i a) MOVNTDQ m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>void _mm_stream_pd (double* mem_addr, __m128d a) MOVNTPD m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.Int16*,System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>void _mm_stream_si128 (__m128i* mem_addr, __m128i a) MOVNTDQ m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.Int32*,System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>void _mm_stream_si128 (__m128i* mem_addr, __m128i a) MOVNTDQ m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>void _mm_stream_si128 (__m128i* mem_addr, __m128i a) MOVNTDQ m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.SByte*,System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>void _mm_stream_si128 (__m128i* mem_addr, __m128i a) MOVNTDQ m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.UInt16*,System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>void _mm_stream_si128 (__m128i* mem_addr, __m128i a) MOVNTDQ m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.UInt32*,System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>void _mm_stream_si128 (__m128i* mem_addr, __m128i a) MOVNTDQ m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreAlignedNonTemporal(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>void _mm_stream_si128 (__m128i* mem_addr, __m128i a) MOVNTDQ m128, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreHigh(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>void _mm_storeh_pd (double* mem_addr, __m128d a) MOVHPD m64, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreLow(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>void _mm_storel_pd (double* mem_addr, __m128d a) MOVLPD m64, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreNonTemporal(System.Int32*,System.Int32)">
      <summary>void _mm_stream_si32(int *p, int a) MOVNTI m32, r32</summary>
      <param name="address" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreNonTemporal(System.UInt32*,System.UInt32)">
      <summary>void _mm_stream_si32(int *p, int a) MOVNTI m32, r32</summary>
      <param name="address" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreScalar(System.Double*,System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>void _mm_store_sd (double* mem_addr, __m128d a) MOVSD m64, xmm</summary>
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreScalar(System.Int64*,System.Runtime.Intrinsics.Vector128{System.Int64})">
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.StoreScalar(System.UInt64*,System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <param name="address" />
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_sub_epi8 (__m128i a,  __m128i b) PSUBB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_sub_pd (__m128d a, __m128d b) SUBPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_sub_epi16 (__m128i a,  __m128i b) PSUBW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_sub_epi32 (__m128i a,  __m128i b) PSUBD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128i _mm_sub_epi64 (__m128i a,  __m128i b) PSUBQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_sub_epi8 (__m128i a,  __m128i b) PSUBB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_sub_epi16 (__m128i a,  __m128i b) PSUBW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_sub_epi32 (__m128i a,  __m128i b) PSUBD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Subtract(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_sub_epi64 (__m128i a,  __m128i b) PSUBQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.SubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_subs_epu8 (__m128i a,  __m128i b) PSUBUSB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.SubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_subs_epi16 (__m128i a,  __m128i b) PSUBSW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.SubtractSaturate(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_subs_epi8 (__m128i a,  __m128i b) PSUBSB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.SubtractSaturate(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_subs_epu16 (__m128i a,  __m128i b) PSUBUSW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.SubtractScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_sub_sd (__m128d a, __m128d b) SUBSD xmm, xmm/m64</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.SumAbsoluteDifferences(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_sad_epu8 (__m128i a,  __m128i b) PSADBW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_unpackhi_epi8 (__m128i a,  __m128i b) PUNPCKHBW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_unpackhi_pd (__m128d a,  __m128d b) UNPCKHPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_unpackhi_epi16 (__m128i a,  __m128i b) PUNPCKHWD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_unpackhi_epi32 (__m128i a,  __m128i b) PUNPCKHDQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128i _mm_unpackhi_epi64 (__m128i a,  __m128i b) PUNPCKHQDQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_unpackhi_epi8 (__m128i a,  __m128i b) PUNPCKHBW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_unpackhi_epi16 (__m128i a,  __m128i b) PUNPCKHWD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_unpackhi_epi32 (__m128i a,  __m128i b) PUNPCKHDQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackHigh(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_unpackhi_epi64 (__m128i a,  __m128i b) PUNPCKHQDQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_unpacklo_epi8 (__m128i a,  __m128i b) PUNPCKLBW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_unpacklo_pd (__m128d a,  __m128d b) UNPCKLPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_unpacklo_epi16 (__m128i a,  __m128i b) PUNPCKLWD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_unpacklo_epi32 (__m128i a,  __m128i b) PUNPCKLDQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128i _mm_unpacklo_epi64 (__m128i a,  __m128i b) PUNPCKLQDQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_unpacklo_epi8 (__m128i a,  __m128i b) PUNPCKLBW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_unpacklo_epi16 (__m128i a,  __m128i b) PUNPCKLWD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_unpacklo_epi32 (__m128i a,  __m128i b) PUNPCKLDQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.UnpackLow(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_unpacklo_epi64 (__m128i a,  __m128i b) PUNPCKLQDQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Sse2.X64" />
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.ConvertScalarToVector128Double(System.Runtime.Intrinsics.Vector128{System.Double},System.Int64)">
      <summary>__m128d _mm_cvtsi64_sd (__m128d a, __int64 b) CVTSI2SD xmm, reg/m64 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.ConvertScalarToVector128Int64(System.Int64)">
      <summary>__m128i _mm_cvtsi64_si128 (__int64 a) MOVQ xmm, reg/m64 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.ConvertScalarToVector128UInt64(System.UInt64)">
      <summary>__m128i _mm_cvtsi64_si128 (__int64 a) MOVQ xmm, reg/m64 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.ConvertToInt64(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__int64 _mm_cvtsd_si64 (__m128d a) CVTSD2SI r64, xmm/m64 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.ConvertToInt64(System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__int64 _mm_cvtsi128_si64 (__m128i a) MOVQ reg/m64, xmm Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.ConvertToInt64WithTruncation(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__int64 _mm_cvttsd_si64 (__m128d a) CVTTSD2SI reg, xmm/m64 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.ConvertToUInt64(System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__int64 _mm_cvtsi128_si64 (__m128i a) MOVQ reg/m64, xmm Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse2.X64.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.StoreNonTemporal(System.Int64*,System.Int64)">
      <summary>void _mm_stream_si64(__int64 *p, __int64 a) MOVNTI m64, r64 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="address" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.X64.StoreNonTemporal(System.UInt64*,System.UInt64)">
      <summary>void _mm_stream_si64(__int64 *p, __int64 a) MOVNTI m64, r64 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="address" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_xor_si128 (__m128i a,  __m128i b) PXOR xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_xor_pd (__m128d a,  __m128d b) XORPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_xor_si128 (__m128i a,  __m128i b) PXOR xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_xor_si128 (__m128i a,  __m128i b) PXOR xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128i _mm_xor_si128 (__m128i a,  __m128i b) PXOR xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_xor_si128 (__m128i a,  __m128i b) PXOR xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_xor_si128 (__m128i a,  __m128i b) PXOR xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_xor_si128 (__m128i a,  __m128i b) PXOR xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse2.Xor(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_xor_si128 (__m128i a,  __m128i b) PXOR xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Sse3">
      <summary>Этот класс обеспечивает доступ к аппаратным инструкциям Intel SSE3 с помощью встроенных функций.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.AddSubtract(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_addsub_pd (__m128d a, __m128d b) ADDSUBPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.AddSubtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_addsub_ps (__m128 a, __m128 b) ADDSUBPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_hadd_pd (__m128d a, __m128d b) HADDPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_hadd_ps (__m128 a, __m128 b) HADDPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.HorizontalSubtract(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_hsub_pd (__m128d a, __m128d b) HSUBPD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.HorizontalSubtract(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_hsub_ps (__m128 a, __m128 b) HSUBPS xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse3.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadAndDuplicateToVector128(System.Double*)">
      <summary>__m128d _mm_loaddup_pd (double const* mem_addr) MOVDDUP xmm, m64</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadDquVector128(System.Byte*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadDquVector128(System.Int16*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadDquVector128(System.Int32*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadDquVector128(System.Int64*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadDquVector128(System.SByte*)">
      <summary>__m128i _mm_lddqu_si128 (__m128i const* mem_addr) LDDQU xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadDquVector128(System.UInt16*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadDquVector128(System.UInt32*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.LoadDquVector128(System.UInt64*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.MoveAndDuplicate(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_movedup_pd (__m128d a) MOVDDUP xmm, xmm/m64</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.MoveHighAndDuplicate(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_movehdup_ps (__m128 a) MOVSHDUP xmm, xmm/m128</summary>
      <param name="source" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse3.MoveLowAndDuplicate(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_moveldup_ps (__m128 a) MOVSLDUP xmm, xmm/m128</summary>
      <param name="source" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Sse41">
      <summary>Этот класс обеспечивает доступ к аппаратным инструкциям Intel SSE4.1 с помощью встроенных функций</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Blend(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>__m128d _mm_blend_pd (__m128d a, __m128d b, const int imm8) BLENDPD xmm, xmm/m128, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Blend(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>__m128i _mm_blend_epi16 (__m128i a, __m128i b, const int imm8) PBLENDW xmm, xmm/m128 imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Blend(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>__m128 _mm_blend_ps (__m128 a, __m128 b, const int imm8) BLENDPS xmm, xmm/m128, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Blend(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>__m128i _mm_blend_epi16 (__m128i a, __m128i b, const int imm8) PBLENDW xmm, xmm/m128 imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_blendv_pd (__m128d a, __m128d b, __m128d mask) BLENDVPD xmm, xmm/m128, xmm0</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm Эта встроенная функция создает инструкцию PBLENDVB, которой требуется байтовый вектор маски, чтобы пользователи правильно задавали каждый байт маски для выбранных элементов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm Эта встроенная функция создает инструкцию PBLENDVB, которой требуется байтовый вектор маски, чтобы пользователи правильно задавали каждый байт маски для выбранных элементов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm Эта встроенная функция создает инструкцию PBLENDVB, которой требуется байтовый вектор маски, чтобы пользователи правильно задавали каждый байт маски для выбранных элементов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_blendv_ps (__m128 a, __m128 b, __m128 mask) BLENDVPS xmm, xmm/m128, xmm0</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm Эта встроенная функция создает инструкцию PBLENDVB, которой требуется байтовый вектор маски, чтобы пользователи правильно задавали каждый байт маски для выбранных элементов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm Эта встроенная функция создает инструкцию PBLENDVB, которой требуется байтовый вектор маски, чтобы пользователи правильно задавали каждый байт маски для выбранных элементов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.BlendVariable(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_blendv_epi8 (__m128i a, __m128i b, __m128i mask) PBLENDVB xmm, xmm/m128, xmm Эта встроенная функция создает инструкцию PBLENDVB, которой требуется байтовый вектор маски, чтобы пользователи правильно задавали каждый байт маски для выбранных элементов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Ceiling(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_ceil_pd (__m128d a) ROUNDPD xmm, xmm/m128, imm8(10)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Ceiling(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_ceil_ps (__m128 a) ROUNDPS xmm, xmm/m128, imm8(10)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.CeilingScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_ceil_sd (__m128d a) ROUNDSD xmm, xmm/m128, imm8(10) Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для рекомендованного варианта использования данной встроенной функции.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.CeilingScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_ceil_sd (__m128d a, __m128d b) ROUNDSD xmm, xmm/m128, imm8(10)</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.CeilingScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_ceil_ss (__m128 a) ROUNDSD xmm, xmm/m128, imm8(10) Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для рекомендованного варианта использования данной встроенной функции.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.CeilingScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_ceil_ss (__m128 a, __m128 b) ROUNDSS xmm, xmm/m128, imm8(10)</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.CompareEqual(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128i _mm_cmpeq_epi64 (__m128i a, __m128i b) PCMPEQQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.CompareEqual(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <summary>__m128i _mm_cmpeq_epi64 (__m128i a, __m128i b) PCMPEQQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int16(System.Byte*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int16(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_cvtepu8_epi16 (__m128i a) PMOVZXBW xmm, xmm/m64</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int16(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_cvtepi8_epi16 (__m128i a) PMOVSXBW xmm, xmm/m64</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int16(System.SByte*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int32(System.Byte*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int32(System.Int16*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int32(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_cvtepu8_epi32 (__m128i a) PMOVZXBD xmm, xmm/m32</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int32(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_cvtepi16_epi32 (__m128i a) PMOVSXWD xmm, xmm/m64</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int32(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_cvtepi8_epi32 (__m128i a) PMOVSXBD xmm, xmm/m32</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int32(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_cvtepu16_epi32 (__m128i a) PMOVZXWD xmm, xmm/m64</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int32(System.SByte*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int32(System.UInt16*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Byte*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Int16*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Int32*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_cvtepu8_epi64 (__m128i a) PMOVZXBQ xmm, xmm/m16</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_cvtepi16_epi64 (__m128i a) PMOVSXWQ xmm, xmm/m32</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_cvtepi32_epi64 (__m128i a) PMOVSXDQ xmm, xmm/m64</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_cvtepi8_epi64 (__m128i a) PMOVSXBQ xmm, xmm/m16</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_cvtepu16_epi64 (__m128i a) PMOVZXWQ xmm, xmm/m32</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_cvtepu32_epi64 (__m128i a) PMOVZXDQ xmm, xmm/m64</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.SByte*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.UInt16*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.ConvertToVector128Int64(System.UInt32*)">
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.DotProduct(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double},System.Byte)">
      <summary>__m128d _mm_dp_pd (__m128d a, __m128d b, const int imm8) DPPD xmm, xmm/m128, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.DotProduct(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>__m128 _mm_dp_ps (__m128 a, __m128 b, const int imm8) DPPS xmm, xmm/m128, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="control" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Extract(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>int _mm_extract_epi8 (__m128i a, const int imm8) PEXTRB reg/m8, xmm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Extract(System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>int _mm_extract_epi32 (__m128i a, const int imm8) PEXTRD reg/m32, xmm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Extract(System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>int _mm_extract_ps (__m128 a, const int imm8) EXTRACTPS xmm, xmm/m32, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Extract(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>int _mm_extract_epi32 (__m128i a, const int imm8) PEXTRD reg/m32, xmm, imm8</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Floor(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_floor_pd (__m128d a) ROUNDPD xmm, xmm/m128, imm8(9)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Floor(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_floor_ps (__m128 a) ROUNDPS xmm, xmm/m128, imm8(9)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.FloorScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_floor_sd (__m128d a) ROUNDSD xmm, xmm/m128, imm8(9) Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для рекомендованного варианта использования данной встроенной функции.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.FloorScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_floor_sd (__m128d a, __m128d b) ROUNDSD xmm, xmm/m128, imm8(9)</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.FloorScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_floor_ss (__m128 a) ROUNDSS xmm, xmm/m128, imm8(9) Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для рекомендованного варианта использования данной встроенной функции.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.FloorScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_floor_ss (__m128 a, __m128 b) ROUNDSS xmm, xmm/m128, imm8(9)</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Insert(System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte,System.Byte)">
      <summary>__m128i _mm_insert_epi8 (__m128i a, int i, const int imm8) PINSRB xmm, reg/m8, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Insert(System.Runtime.Intrinsics.Vector128{System.Int32},System.Int32,System.Byte)">
      <summary>__m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Insert(System.Runtime.Intrinsics.Vector128{System.SByte},System.SByte,System.Byte)">
      <summary>__m128i _mm_insert_epi8 (__m128i a, int i, const int imm8) PINSRB xmm, reg/m8, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Insert(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single},System.Byte)">
      <summary>__m128 _mm_insert_ps (__m128 a, __m128 b, const int imm8) INSERTPS xmm, xmm/m32, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Insert(System.Runtime.Intrinsics.Vector128{System.UInt32},System.UInt32,System.Byte)">
      <summary>__m128i _mm_insert_epi32 (__m128i a, int i, const int imm8) PINSRD xmm, reg/m32, imm8</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse41.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.LoadAlignedVector128NonTemporal(System.Byte*)">
      <summary>__m128i _mm_stream_load_si128 (const __m128i* mem_addr) MOVNTDQA xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.LoadAlignedVector128NonTemporal(System.Int16*)">
      <summary>__m128i _mm_stream_load_si128 (const __m128i* mem_addr) MOVNTDQA xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.LoadAlignedVector128NonTemporal(System.Int32*)">
      <summary>__m128i _mm_stream_load_si128 (const __m128i* mem_addr) MOVNTDQA xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.LoadAlignedVector128NonTemporal(System.Int64*)">
      <summary>__m128i _mm_stream_load_si128 (const __m128i* mem_addr) MOVNTDQA xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.LoadAlignedVector128NonTemporal(System.SByte*)">
      <summary>__m128i _mm_stream_load_si128 (const __m128i* mem_addr) MOVNTDQA xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.LoadAlignedVector128NonTemporal(System.UInt16*)">
      <summary>__m128i _mm_stream_load_si128 (const __m128i* mem_addr) MOVNTDQA xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.LoadAlignedVector128NonTemporal(System.UInt32*)">
      <summary>__m128i _mm_stream_load_si128 (const __m128i* mem_addr) MOVNTDQA xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.LoadAlignedVector128NonTemporal(System.UInt64*)">
      <summary>__m128i _mm_stream_load_si128 (const __m128i* mem_addr) MOVNTDQA xmm, m128</summary>
      <param name="address" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Max(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_max_epi32 (__m128i a, __m128i b) PMAXSD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Max(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_max_epi8 (__m128i a, __m128i b) PMAXSB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Max(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_max_epu16 (__m128i a, __m128i b) PMAXUW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Max(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_max_epu32 (__m128i a, __m128i b) PMAXUD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Min(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_min_epi32 (__m128i a, __m128i b) PMINSD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Min(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_min_epi8 (__m128i a, __m128i b) PMINSB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Min(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_min_epu16 (__m128i a, __m128i b) PMINUW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Min(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_min_epu32 (__m128i a, __m128i b) PMINUD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.MinHorizontal(System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <summary>__m128i _mm_minpos_epu16 (__m128i a) PHMINPOSUW xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.MultipleSumAbsoluteDifferences(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>__m128i _mm_mpsadbw_epu8 (__m128i a, __m128i b, const int imm8) MPSADBW xmm, xmm/m128, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.Multiply(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_mul_epi32 (__m128i a, __m128i b) PMULDQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.MultiplyLow(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_mullo_epi32 (__m128i a, __m128i b) PMULLD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.MultiplyLow(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <summary>__m128i _mm_mullo_epi32 (__m128i a, __m128i b) PMULLD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.PackUnsignedSaturate(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_packus_epi32 (__m128i a, __m128i b) PACKUSDW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundCurrentDirection(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>_MM_FROUND_CUR_DIRECTION; ROUNDPD xmm, xmm/m128, imm8(4)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundCurrentDirection(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>_MM_FROUND_CUR_DIRECTION; ROUNDPS xmm, xmm/m128, imm8(4)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundCurrentDirectionScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_round_sd (__m128d a, _MM_FROUND_CUR_DIRECTION) ROUNDSD xmm, xmm/m128, imm8(4) Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для рекомендованного варианта использования данной встроенной функции.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundCurrentDirectionScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_round_sd (__m128d a, __m128d b, _MM_FROUND_CUR_DIRECTION) ROUNDSD xmm, xmm/m128, imm8(4)</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundCurrentDirectionScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_round_ss (__m128 a, _MM_FROUND_CUR_DIRECTION) ROUNDSS xmm, xmm/m128, imm8(4) Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для рекомендованного варианта использования данной встроенной функции.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundCurrentDirectionScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_round_ss (__m128 a, __m128 b, _MM_FROUND_CUR_DIRECTION) ROUNDSS xmm, xmm/m128, imm8(4)</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNearestInteger(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_round_pd (__m128d a, int rounding) ROUNDPD xmm, xmm/m128, imm8(8) _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNearestInteger(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_round_ps (__m128 a, int rounding) ROUNDPS xmm, xmm/m128, imm8(8) _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNearestIntegerScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_round_sd (__m128d a, _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC) ROUNDSD xmm, xmm/m128, imm8(8) Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для рекомендованного варианта использования данной встроенной функции.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNearestIntegerScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_round_sd (__m128d a, __m128d b, _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC) ROUNDSD xmm, xmm/m128, imm8(8)</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNearestIntegerScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_round_ss (__m128 a, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC) ROUNDSS xmm, xmm/m128, imm8(8) Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для рекомендованного варианта использования данной встроенной функции.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNearestIntegerScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_round_ss (__m128 a, __m128 b, _MM_FROUND_TO_NEAREST_INT | _MM_FROUND_NO_EXC) ROUNDSS xmm, xmm/m128, imm8(8)</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>_MM_FROUND_TO_NEG_INF |_MM_FROUND_NO_EXC; ROUNDPD xmm, xmm/m128, imm8(9)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNegativeInfinity(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>_MM_FROUND_TO_NEG_INF |_MM_FROUND_NO_EXC; ROUNDPS xmm, xmm/m128, imm8(9)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNegativeInfinityScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_round_sd (__m128d a, _MM_FROUND_TO_NEG_INF |_MM_FROUND_NO_EXC) ROUNDSD xmm, xmm/m128, imm8(9) Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для рекомендованного варианта использования данной встроенной функции.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNegativeInfinityScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_round_sd (__m128d a, __m128d b, _MM_FROUND_TO_NEG_INF |_MM_FROUND_NO_EXC) ROUNDSD xmm, xmm/m128, imm8(9)</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNegativeInfinityScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_round_ss (__m128 a, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC) ROUNDSS xmm, xmm/m128, imm8(9) Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для рекомендованного варианта использования данной встроенной функции.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToNegativeInfinityScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_round_ss (__m128 a, __m128 b, _MM_FROUND_TO_NEG_INF | _MM_FROUND_NO_EXC) ROUNDSS xmm, xmm/m128, imm8(9)</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>_MM_FROUND_TO_POS_INF |_MM_FROUND_NO_EXC; ROUNDPD xmm, xmm/m128, imm8(10)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToPositiveInfinity(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>_MM_FROUND_TO_POS_INF |_MM_FROUND_NO_EXC; ROUNDPS xmm, xmm/m128, imm8(10)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToPositiveInfinityScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_round_sd (__m128d a, _MM_FROUND_TO_POS_INF |_MM_FROUND_NO_EXC) ROUNDSD xmm, xmm/m128, imm8(10) Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для рекомендованного варианта использования данной встроенной функции.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToPositiveInfinityScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_round_sd (__m128d a, __m128d b, _MM_FROUND_TO_POS_INF |_MM_FROUND_NO_EXC) ROUNDSD xmm, xmm/m128, imm8(10)</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToPositiveInfinityScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_round_ss (__m128 a, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC) ROUNDSS xmm, xmm/m128, imm8(10) Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для рекомендованного варианта использования данной встроенной функции.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToPositiveInfinityScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_round_ss (__m128 a, __m128 b, _MM_FROUND_TO_POS_INF | _MM_FROUND_NO_EXC) ROUNDSS xmm, xmm/m128, imm8(10)</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToZero(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>_MM_FROUND_TO_ZERO |_MM_FROUND_NO_EXC; ROUNDPD xmm, xmm/m128, imm8(11)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToZero(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>_MM_FROUND_TO_ZERO |_MM_FROUND_NO_EXC; ROUNDPS xmm, xmm/m128, imm8(11)</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToZeroScalar(System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_round_sd (__m128d a, _MM_FROUND_TO_ZERO |_MM_FROUND_NO_EXC) ROUNDSD xmm, xmm/m128, imm8(11) Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для рекомендованного варианта использования данной встроенной функции.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToZeroScalar(System.Runtime.Intrinsics.Vector128{System.Double},System.Runtime.Intrinsics.Vector128{System.Double})">
      <summary>__m128d _mm_round_sd (__m128d a, __m128d b, _MM_FROUND_TO_ZERO |_MM_FROUND_NO_EXC) ROUNDSD xmm, xmm/m128, imm8(11)</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToZeroScalar(System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_round_ss (__m128 a, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC) ROUNDSS xmm, xmm/m128, imm8(11) Указанная выше собственная сигнатура не существует. Эта дополнительная перегрузка предоставляется для рекомендованного варианта использования данной встроенной функции.</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.RoundToZeroScalar(System.Runtime.Intrinsics.Vector128{System.Single},System.Runtime.Intrinsics.Vector128{System.Single})">
      <summary>__m128 _mm_round_ss (__m128 a, __m128 b, _MM_FROUND_TO_ZERO | _MM_FROUND_NO_EXC) ROUNDSS xmm, xmm/m128, imm8(11)</summary>
      <param name="upper" />
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestC(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestC(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestC(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestC(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestC(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>int _mm_testc_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestC(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestC(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestC(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>int _mm_testnzc_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestNotZAndNotC(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestZ(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestZ(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestZ(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestZ(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestZ(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>int _mm_testz_si128 (__m128i a, __m128i b) PTEST xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestZ(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestZ(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.TestZ(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64})">
      <param name="left" />
      <param name="right" />
    </member>
    <member name="T:System.Runtime.Intrinsics.X86.Sse41.X64" />
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.X64.Extract(System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__int64 _mm_extract_epi64 (__m128i a, const int imm8) PEXTRQ reg/m64, xmm, imm8 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.X64.Extract(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>__int64 _mm_extract_epi64 (__m128i a, const int imm8) PEXTRQ reg/m64, xmm, imm8 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.X64.Insert(System.Runtime.Intrinsics.Vector128{System.Int64},System.Int64,System.Byte)">
      <summary>__m128i _mm_insert_epi64 (__m128i a, __int64 i, const int imm8) PINSRQ xmm, reg/m64, imm8 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse41.X64.Insert(System.Runtime.Intrinsics.Vector128{System.UInt64},System.UInt64,System.Byte)">
      <summary>__m128i _mm_insert_epi64 (__m128i a, __int64 i, const int imm8) PINSRQ xmm, reg/m64, imm8 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="value" />
      <param name="data" />
      <param name="index" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse41.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Sse42">
      <summary>Этот класс обеспечивает доступ к аппаратным инструкциям Intel SSE4.2 с помощью встроенных функций.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse42.CompareGreaterThan(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64})">
      <summary>__m128i _mm_cmpgt_epi64 (__m128i a, __m128i b) PCMPGTQ xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse42.Crc32(System.UInt32,System.Byte)">
      <summary>unsigned int _mm_crc32_u8 (unsigned int crc, unsigned char v) CRC32 reg, reg/m8</summary>
      <param name="crc" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse42.Crc32(System.UInt32,System.UInt16)">
      <summary>unsigned int _mm_crc32_u16 (unsigned int crc, unsigned short v) CRC32 reg, reg/m16</summary>
      <param name="crc" />
      <param name="data" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Sse42.Crc32(System.UInt32,System.UInt32)">
      <summary>unsigned int _mm_crc32_u32 (unsigned int crc, unsigned int v) CRC32 reg, reg/m32</summary>
      <param name="crc" />
      <param name="data" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse42.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Sse42.X64" />
    <member name="M:System.Runtime.Intrinsics.X86.Sse42.X64.Crc32(System.UInt64,System.UInt64)">
      <summary>unsigned __int64 _mm_crc32_u64 (unsigned __int64 crc, unsigned __int64 v) CRC32 reg, reg/m64 Эта встроенная функция доступна только для 64-разрядных процессов.</summary>
      <param name="crc" />
      <param name="data" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Sse42.X64.IsSupported" />
    <member name="T:System.Runtime.Intrinsics.X86.Ssse3">
      <summary>Этот класс обеспечивает доступ к аппаратным инструкциям Intel SSSE3 с помощью встроенных функций.</summary>
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.Abs(System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_abs_epi16 (__m128i a) PABSW xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.Abs(System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_abs_epi32 (__m128i a) PABSD xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.Abs(System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_abs_epi8 (__m128i a) PABSB xmm, xmm/m128</summary>
      <param name="value" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte},System.Byte)">
      <summary>__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count) PALIGNR xmm, xmm/m128, imm8 Эта встроенная функция создает инструкцию PALIGNR, которая выполняет операции с байтами вместо элементов векторов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16},System.Byte)">
      <summary>__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count) PALIGNR xmm, xmm/m128, imm8 Эта встроенная функция создает инструкцию PALIGNR, которая выполняет операции с байтами вместо элементов векторов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32},System.Byte)">
      <summary>__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count) PALIGNR xmm, xmm/m128, imm8 Эта встроенная функция создает инструкцию PALIGNR, которая выполняет операции с байтами вместо элементов векторов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.Int64},System.Runtime.Intrinsics.Vector128{System.Int64},System.Byte)">
      <summary>__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count) PALIGNR xmm, xmm/m128, imm8 Эта встроенная функция создает инструкцию PALIGNR, которая выполняет операции с байтами вместо элементов векторов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte},System.Byte)">
      <summary>__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count) PALIGNR xmm, xmm/m128, imm8</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.UInt16},System.Runtime.Intrinsics.Vector128{System.UInt16},System.Byte)">
      <summary>__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count) PALIGNR xmm, xmm/m128, imm8 Эта встроенная функция создает инструкцию PALIGNR, которая выполняет операции с байтами вместо элементов векторов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.UInt32},System.Runtime.Intrinsics.Vector128{System.UInt32},System.Byte)">
      <summary>__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count) PALIGNR xmm, xmm/m128, imm8 Эта встроенная функция создает инструкцию PALIGNR, которая выполняет операции с байтами вместо элементов векторов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.AlignRight(System.Runtime.Intrinsics.Vector128{System.UInt64},System.Runtime.Intrinsics.Vector128{System.UInt64},System.Byte)">
      <summary>__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int count) PALIGNR xmm, xmm/m128, imm8 Эта встроенная функция создает инструкцию PALIGNR, которая выполняет операции с байтами вместо элементов векторов.</summary>
      <param name="left" />
      <param name="right" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_hadd_epi16 (__m128i a, __m128i b) PHADDW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.HorizontalAdd(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_hadd_epi32 (__m128i a, __m128i b) PHADDD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.HorizontalAddSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_hadds_epi16 (__m128i a, __m128i b) PHADDSW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.HorizontalSubtract(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_hsub_epi16 (__m128i a, __m128i b) PHSUBW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.HorizontalSubtract(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_hsub_epi32 (__m128i a, __m128i b) PHSUBD xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.HorizontalSubtractSaturate(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_hsubs_epi16 (__m128i a, __m128i b) PHSUBSW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="P:System.Runtime.Intrinsics.X86.Ssse3.IsSupported" />
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.MultiplyAddAdjacent(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_maddubs_epi16 (__m128i a, __m128i b) PMADDUBSW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.MultiplyHighRoundScale(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_mulhrs_epi16 (__m128i a, __m128i b) PMULHRSW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.Shuffle(System.Runtime.Intrinsics.Vector128{System.Byte},System.Runtime.Intrinsics.Vector128{System.Byte})">
      <summary>__m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128</summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.Shuffle(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_shuffle_epi8 (__m128i a, __m128i b) PSHUFB xmm, xmm/m128</summary>
      <param name="value" />
      <param name="mask" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.Sign(System.Runtime.Intrinsics.Vector128{System.Int16},System.Runtime.Intrinsics.Vector128{System.Int16})">
      <summary>__m128i _mm_sign_epi16 (__m128i a, __m128i b) PSIGNW xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.Sign(System.Runtime.Intrinsics.Vector128{System.Int32},System.Runtime.Intrinsics.Vector128{System.Int32})">
      <summary>__m128i _mm_sign_epi32 (__m128i a, __m128i b) PSIGND xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
    <member name="M:System.Runtime.Intrinsics.X86.Ssse3.Sign(System.Runtime.Intrinsics.Vector128{System.SByte},System.Runtime.Intrinsics.Vector128{System.SByte})">
      <summary>__m128i _mm_sign_epi8 (__m128i a, __m128i b) PSIGNB xmm, xmm/m128</summary>
      <param name="left" />
      <param name="right" />
    </member>
  </members>
</doc>
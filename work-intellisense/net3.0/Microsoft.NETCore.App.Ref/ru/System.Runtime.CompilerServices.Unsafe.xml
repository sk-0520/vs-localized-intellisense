<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.CompilerServices.Unsafe</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.CompilerServices.Unsafe">
      <summary>Содержит универсальные низкоуровневые функции для работы с указателями.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)">
      <summary>Добавляет смещение элемента для данной ссылки.</summary>
      <param name="source">Ссылка, к которой требуется добавить смещение.</param>
      <param name="elementOffset">Добавляемое смещение.</param>
      <typeparam name="T">Тип ссылки.</typeparam>
      <returns>Новая ссылка, получающаяся при добавлении смещения к указателю.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)">
      <summary>Добавляет смещение элемента для данной ссылки.</summary>
      <param name="source">Ссылка, к которой требуется добавить смещение.</param>
      <param name="elementOffset">Добавляемое смещение.</param>
      <typeparam name="T">Тип ссылки.</typeparam>
      <returns>Новая ссылка, получающаяся при добавлении смещения к указателю.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Add``1(System.Void*,System.Int32)">
      <summary>Добавляет смещение элемента для данного пустого указателя.</summary>
      <param name="source">Пустой указатель, к которому требуется добавить смещение.</param>
      <param name="elementOffset">Добавляемое смещение.</param>
      <typeparam name="T">Тип указателя void.</typeparam>
      <returns>Новый пустой указатель, который отражает добавление смещения к указанному указателю.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)">
      <summary>Добавляет смещение в байтах для данной ссылки.</summary>
      <param name="source">Ссылка, к которой требуется добавить смещение.</param>
      <param name="byteOffset">Добавляемое смещение.</param>
      <typeparam name="T">Тип ссылки.</typeparam>
      <returns>Новая ссылка, получающаяся при добавлении смещения в байтах к указателю.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)">
      <summary>Определяет, указывают ли данные ссылки на одно и то же расположение.</summary>
      <param name="left">Первая ссылка для сравнения.</param>
      <param name="right">Вторая ссылка для сравнения.</param>
      <typeparam name="T">Тип ссылки.</typeparam>
      <returns>
        <see langword="true" />, если <paramref name="left" /> и <paramref name="right" /> указывают на одно и то же расположение, иначе <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)">
      <summary>Приводит заданный объект к указанному типу.</summary>
      <param name="o">Объект для приведения.</param>
      <typeparam name="T">Тип, к которому будет приведен объект.</typeparam>
      <returns>Исходный объект, приведенный к заданному типу.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)">
      <summary>Повторно интерпретирует данную ссылку как ссылку на значение типа <typeparamref name="TTo" />.</summary>
      <param name="source">Повторно интерпретируемая ссылка.</param>
      <typeparam name="TFrom">Тип ссылки для переинтерпретации.</typeparam>
      <typeparam name="TTo">Требуемый тип ссылки.</typeparam>
      <returns>Ссылка на значение типа <typeparamref name="TTo" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)">
      <summary>Возвращает указатель на параметр, переданный по ссылке.</summary>
      <param name="value">Объект, на который необходимо получить указатель.</param>
      <typeparam name="T">Тип объекта.</typeparam>
      <returns>Указатель на указанное значение.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(``0@)">
      <summary>Повторно интерпретирует ссылку, доступную только для чтения, как ссылку.</summary>
      <param name="source">Повторно интерпретируемая ссылка с доступом только для чтения.</param>
      <typeparam name="T">Тип ссылки.</typeparam>
      <returns>Ссылка на значение типа <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)">
      <summary>Повторно интерпретирует данное расположение как ссылку на значение типа <typeparamref name="T" />.</summary>
      <param name="source">Расположение значения, на которое указывает ссылка.</param>
      <typeparam name="T">Тип интерпретируемого расположения.</typeparam>
      <returns>Ссылка на значение типа <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)">
      <summary>Определяет смещение в байтах от источника до целевого объекта из данной ссылки.</summary>
      <param name="origin">Ссылка на источник.</param>
      <param name="target">Ссылка на целевой объект.</param>
      <typeparam name="T">Тип ссылки.</typeparam>
      <returns>Смещение в байтах от источника до целевого объекта, то есть <paramref name="target" />  -  <paramref name="origin" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)">
      <summary>Копирует значение типа <typeparamref name="T" /> в заданное расположение.</summary>
      <param name="destination">Расположение для копирования.</param>
      <param name="source">Указатель на значение для копирования.</param>
      <typeparam name="T">Тип копируемого значения.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)">
      <summary>Копирует значение типа <typeparamref name="T" /> в заданное расположение.</summary>
      <param name="destination">Расположение для копирования.</param>
      <param name="source">Ссылка на значение для копирования.</param>
      <typeparam name="T">Тип копируемого значения.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)">
      <summary>Копирует байты из адреса источника в адрес назначения.</summary>
      <param name="destination">Адрес назначения для копирования.</param>
      <param name="source">Адрес источника для копирования.</param>
      <param name="byteCount">Число байт для копирования.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)">
      <summary>Копирует байты из адреса источника в адрес назначения.</summary>
      <param name="destination">Адрес назначения для копирования.</param>
      <param name="source">Адрес источника для копирования.</param>
      <param name="byteCount">Число байт для копирования.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)">
      <summary>Копирует байты из адреса источника в адрес назначения без учета архитектурно зависимого выравнивания адресов.</summary>
      <param name="destination">Адрес назначения для копирования.</param>
      <param name="source">Адрес источника для копирования.</param>
      <param name="byteCount">Число байт для копирования.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)">
      <summary>Копирует байты из адреса источника в адрес назначения без учета архитектурно зависимого выравнивания адресов.</summary>
      <param name="destination">Адрес назначения для копирования.</param>
      <param name="source">Адрес источника для копирования.</param>
      <param name="byteCount">Число байт для копирования.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)">
      <summary>Инициализирует блок памяти в указанном расположении с заданным начальным значением.</summary>
      <param name="startAddress">Адрес начала блока памяти для инициализации.</param>
      <param name="value">Значение для инициализации блока.</param>
      <param name="byteCount">Число байтов для инициализации.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)">
      <summary>Инициализирует блок памяти в указанном расположении с заданным начальным значением.</summary>
      <param name="startAddress">Адрес начала блока памяти для инициализации.</param>
      <param name="value">Значение для инициализации блока.</param>
      <param name="byteCount">Число байтов для инициализации.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)">
      <summary>Инициализирует блок памяти в указанном расположении с заданным начальным значением без учета архитектурно зависимого выравнивания адреса.</summary>
      <param name="startAddress">Адрес начала блока памяти для инициализации.</param>
      <param name="value">Значение для инициализации блока.</param>
      <param name="byteCount">Число байтов для инициализации.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)">
      <summary>Инициализирует блок памяти в указанном расположении с заданным начальным значением без учета архитектурно зависимого выравнивания адреса.</summary>
      <param name="startAddress">Адрес начала блока памяти для инициализации.</param>
      <param name="value">Значение для инициализации блока.</param>
      <param name="byteCount">Число байтов для инициализации.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressGreaterThan``1(``0@,``0@)">
      <summary>Возвращает значение, указывающее, действительно ли заданная ссылка больше другой заданной ссылки.</summary>
      <param name="left">Первое сравниваемое значение.</param>
      <param name="right">Второе сравниваемое значение.</param>
      <typeparam name="T">Тип ссылки.</typeparam>
      <returns>
        <see langword="true" />, если <paramref name="left" /> больше <paramref name="right" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.IsAddressLessThan``1(``0@,``0@)">
      <summary>Возвращает значение, указывающее, действительно ли заданная ссылка меньше другой заданной ссылки.</summary>
      <param name="left">Первое сравниваемое значение.</param>
      <param name="right">Второе сравниваемое значение.</param>
      <typeparam name="T">Тип ссылки.</typeparam>
      <returns>
        <see langword="true" />, если значение <paramref name="left" /> меньше значения <paramref name="right" />; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)">
      <summary>Считывает значение типа <typeparamref name="T" /> из заданного расположения.</summary>
      <param name="source">Расположение, из которого выполняется чтение.</param>
      <typeparam name="T">Считываемый тип.</typeparam>
      <returns>Объект типа <typeparamref name="T" /> считывается из указанного расположения.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)">
      <summary>Считывает значение типа <typeparamref name="T" /> из заданного расположения без учета архитектурно зависимого выравнивания адресов.</summary>
      <param name="source">Расположение, из которого выполняется чтение.</param>
      <typeparam name="T">Считываемый тип.</typeparam>
      <returns>Объект типа <typeparamref name="T" /> считывается из указанного расположения.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)">
      <summary>Считывает значение типа <typeparamref name="T" /> из заданного расположения без учета архитектурно зависимого выравнивания адресов.</summary>
      <param name="source">Расположение, из которого выполняется чтение.</param>
      <typeparam name="T">Считываемый тип.</typeparam>
      <returns>Объект типа <typeparamref name="T" /> считывается из указанного расположения.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1">
      <summary>Возвращает размер объекта данного параметра типа.</summary>
      <typeparam name="T">Тип объекта, размер которого извлекается.</typeparam>
      <returns>Размер объекта типа <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)">
      <summary>Вычитает смещение элемента из данной ссылки.</summary>
      <param name="source">Ссылка, из которой требуется вычесть смещение.</param>
      <param name="elementOffset">Вычитаемое смещение.</param>
      <typeparam name="T">Тип ссылки.</typeparam>
      <returns>Новая ссылка, получающаяся при вычитании смещения из указателя.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)">
      <summary>Вычитает смещение элемента из данной ссылки.</summary>
      <param name="source">Ссылка, из которой требуется вычесть смещение.</param>
      <param name="elementOffset">Вычитаемое смещение.</param>
      <typeparam name="T">Тип ссылки.</typeparam>
      <returns>Новая ссылка, получающаяся при вычитании смещения из указателя.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(System.Void*,System.Int32)">
      <summary>Вычитает смещение элемента из данного пустого указателя.</summary>
      <param name="source">Пустой указатель, из которого требуется вычесть смещение.</param>
      <param name="elementOffset">Вычитаемое смещение.</param>
      <typeparam name="T">Тип указателя void.</typeparam>
      <returns>Новый пустой указатель, который отражает вычитание смещения из указанного указателя.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)">
      <summary>Вычитает смещение в байтах из данной ссылки.</summary>
      <param name="source">Ссылка, из которой требуется вычесть смещение.</param>
      <param name="byteOffset">Вычитаемое смещение.</param>
      <typeparam name="T">Тип ссылки.</typeparam>
      <returns>Новая ссылка, получающаяся при вычитании смещения в байтах из указателя.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Unbox``1(System.Object)">
      <summary>Возвращает ссылку <see langword="mutable ref" /> на упакованное значение.</summary>
      <param name="box">Значение для распаковки.</param>
      <typeparam name="T">Тип для распаковки.</typeparam>
      <returns>Ссылка <see langword="mutable ref" /> на упакованное значение <paramref name="box" />.</returns>
      <exception cref="T:System.NullReferenceException">Значение <paramref name="box" /> — <see langword="null" />, а тип значения <typeparamref name="T" /> не поддерживает значение NULL.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="box" /> не является типом упакованного значения.

или -

<paramref name="box" /> не является упакованным значением <typeparamref name="T" />.</exception>
      <exception cref="T:System.TypeLoadException">
        <typeparamref name="T" /> не найден.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)">
      <summary>Записывает значение типа <typeparamref name="T" /> в заданное расположение.</summary>
      <param name="destination">Расположение для записи.</param>
      <param name="value">Значение для записи.</param>
      <typeparam name="T">Тип записываемого значения.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)">
      <summary>Записывает значение типа <typeparamref name="T" /> в заданное расположение без учета архитектурно зависимого выравнивания адресов.</summary>
      <param name="destination">Расположение для записи.</param>
      <param name="value">Значение для записи.</param>
      <typeparam name="T">Тип записываемого значения.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)">
      <summary>Записывает значение типа <typeparamref name="T" /> в заданное расположение без учета архитектурно зависимого выравнивания адресов.</summary>
      <param name="destination">Расположение для записи.</param>
      <param name="value">Значение для записи.</param>
      <typeparam name="T">Тип записываемого значения.</typeparam>
    </member>
  </members>
</doc>
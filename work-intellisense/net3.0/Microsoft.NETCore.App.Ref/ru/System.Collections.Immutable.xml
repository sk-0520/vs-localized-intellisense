<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable collection of key/value pairs.  &#xA;&#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет неизменяемую коллекцию пар "ключ-значение".  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Тип значений в словаре.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the dictionary.">Добавляет в словарь элемент с указанными ключом и значением.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Ключ добавляемого элемента.</param>
      <param name="value" vsli:raw="The value of the element to add.">Добавляемое значение элемента.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">Новый неизменяемый словарь, который содержит добавленную пару "ключ-значение".</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">Данный ключ уже существует в словаре, но имеет другое значение.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the dictionary.">Добавляет в словарь указанные пары "ключ-значение".</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">Пары "ключ-значение", которые нужно добавить.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Новый неизменяемый словарь, который содержит добавленные пары "ключ-значение".</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Один из указанных ключей уже существует в словаре, но имеет другое значение.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Возвращает пустой словарь с теми же правилами упорядочения элементов и сравнения ключей и значений, что и в исходном экземпляре словаря.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Пустой словарь с такими же правилами упорядочения элементов и сравнения ключей и значений.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains the specified key/value pair.">Определяет, содержит ли неизменяемый словарь указанную пару "ключ-значение".</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">Пара "ключ-значение", которую нужно найти.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если указанная пара "ключ-значение" найдена в словаре; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Удаляет из неизменяемого словаря элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Ключ элемента, который требуется удалить.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">Новый неизменяемый словарь, из которого удален указанный элемент, либо исходный экземпляр, если найти в нем указанный ключ не удалось.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">Удаляет из неизменяемого словаря элементы с указанными ключами.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">Ключи элементов, которые нужно удалить.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Новый неизменяемый словарь, из которого удалены указанные ключи, либо исходный экземпляр, если найти в нем ключи не удалось.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">Устанавливает в неизменяемом словаре пару "ключ-значение" с возможной перезаписью существующего значения для данного ключа.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Ключ записи, которую требуется добавить.</param>
      <param name="value" vsli:raw="The key value to set.">Значение ключа, которое нужно установить.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">Новый неизменяемый словарь, который содержит указанную пару "ключ-значение".</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">Устанавливает в неизменяемом словаре указанные пары "ключ-значение" с возможной перезаписью существующих значений для данных ключей.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Пары "ключ-значение", которые нужно установить в словаре. Если какой-то из ключей уже существует в словаре, этот метод перезапишет его текущее значение.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">Новый неизменяемый словарь, который содержит указанные пары "ключ-значение".</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Определяет, содержится ли в словаре указанный ключ.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Ключ, который нужно найти.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Соответствующий ключ, расположенный в словаре, если он найден, или <c>equalkey</c>, если совпадений нет.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если найдено совпадение для <paramref name="equalKey" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary vsli:raw="Represents a list of elements that cannot be modified.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет список элементов, которые невозможно изменить.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">Тип элементов в списке.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary vsli:raw="Makes a copy of the list, and adds the specified object to the end of the copied list.">Создает копию списка и добавляет указанный объект в ее конец.</summary>
      <param name="value" vsli:raw="The object to add to the list.">Объект, который нужно добавить в список.</param>
      <returns vsli:raw="A new list with the object added.">Новый список с добавленным объектом.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Makes a copy of the list and adds the specified objects to the end of the copied list.">Создает копию списка и добавляет указанные объекты в ее конец.</summary>
      <param name="items" vsli:raw="The objects to add to the list.">Объект, который нужно добавить в список.</param>
      <returns vsli:raw="A new list with the elements added.">Новый список с добавленными элементами.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary vsli:raw="Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.">Создает список, из которого удалены все элементы и в котором используется те же правила сортировки и упорядочения, что и в исходном списке.</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">Пустой список с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов списка <see cref="T:System.Collections.Immutable.IImmutableList`1" />, начинающемся с заданного индекса и содержащем указанное число элементов.</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;. This value can be null for reference types.">Объект для поиска в <see cref="T:System.Collections.Immutable.IImmutableList`1" />. Для ссылочных типов допускается значение null.</param>
      <param name="index" vsli:raw="The zero-based starting indexes of the search. 0 (zero) is valid in an empty list.">Индексы (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;item&quot; /&gt;.">Функция сравнения на равенство, которую нужно использовать для поиска объекта <paramref name="item" />.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements if found; otherwise -1.">Отсчитываемый от нуля индекс первого вхождения объекта <paramref name="item" /> в диапазоне элементов списка <see cref="T:System.Collections.Immutable.IImmutableList`1" />, который начинается с позиции <paramref name="index" /> и содержит <paramref name="count" /> элементов, если искомый объект найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">Вставляет указанный элемент в неизменяемый список по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the value.">Отсчитываемый с нуля индекс, по которому нужно вставить значение.</param>
      <param name="element" vsli:raw="The object to insert.">Вставляемый объект.</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">Новый неизменяемый список с указанным элементом.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">Вставляет указанные элементы в неизменяемый список по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">Отсчитываемый от нуля индекс места вставки новых элементов.</param>
      <param name="items" vsli:raw="The elements to insert.">Вставляемые элементы.</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">Новый неизменяемый список с указанными элементами.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс последнего вхождения в диапазоне элементов списка <see cref="T:System.Collections.Immutable.IImmutableList`1" />, содержащем указанное число элементов и заканчивающемся в позиции с указанным индексом.</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Объект, который нужно найти в списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Индекс (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to match &lt;paramref name=&quot;item&quot; /&gt;.">Функция сравнения на равенство, которую нужно использовать для поиска объекта <paramref name="item" />.</param>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Возвращает <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of a specified object from this immutable list.">Удаляет первое вхождение указанного объекта из неизменяемого списка.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">Объект, который нужно удалить из списка.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to locate &lt;paramref name=&quot;value&quot; /&gt;.">Функция сравнения на равенство, которую нужно использовать для поиска объекта <paramref name="value" />.</param>
      <returns vsli:raw="A new list with the specified object removed.">Новый список, из которого удален указанный объект.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Удаляет все элементы, удовлетворяющие условиям указанного предиката.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Делегат, определяющий условия удаления элементов.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Новый неизменяемый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">Удаляет из неизменяемого списка элемент с указанным индексом.</summary>
      <param name="index" vsli:raw="The index of the element to remove.">Индекс элемента, который должен быть удален.</param>
      <returns vsli:raw="A new list with the element removed.">Новый список, из которого удален указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified object from the list.">Удаляет из списка указанный объект.</summary>
      <param name="items" vsli:raw="The objects to remove from the list.">Объект, который нужно удалить из списка.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to determine if &lt;paramref name=&quot;items&quot; /&gt; match any objects in the list.">Функция сравнения на равенство, которую нужно использовать для сравнения объекта <paramref name="items" /> с элементами списка.</param>
      <returns vsli:raw="A new immutable list with the specified objects removed, if &lt;paramref name=&quot;items&quot; /&gt; matched objects in the list.">Новый неизменяемый список, из которого удалены указанные элементы, если для объекта <paramref name="items" /> были найдены совпадения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements from the &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableList`1&quot; /&gt;.">Удаляет диапазон элементов из списка <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range of elements to remove.">Отсчитываемый от нуля индекс начала диапазона элементов, которые требуется удалить.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Число удаляемых элементов.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Новый неизменяемый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns a new list with the first matching element in the list replaced with the specified element.">Возвращает новый список, в котором первый совпадающий элемент заменен указанным элементом.</summary>
      <param name="oldValue" vsli:raw="The element to be replaced.">Элемент, который нужно заменить.</param>
      <param name="newValue" vsli:raw="The element to replace the first occurrence of &lt;paramref name=&quot;oldValue&quot; /&gt; with.">Элемент, которым нужно заменить первое вхождение объекта <paramref name="oldValue" />.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use for matching &lt;paramref name=&quot;oldValue&quot; /&gt;.">Функция сравнения на равенство, которую нужно использовать для поиска объекта <paramref name="oldValue" />.</param>
      <returns vsli:raw="A new list that contains &lt;paramref name=&quot;newValue&quot; /&gt;, even if &lt;paramref name=&quot;oldvalue&quot; /&gt; is the same as &lt;paramref name=&quot;newValue&quot; /&gt;.">Новый список, который содержит элемент <paramref name="newValue" />, даже если объекты <paramref name="oldvalue" /> и <paramref name="newValue" /> идентичны.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">
        <paramref name="oldValue" /> не существует в списке.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">Заменяет элемент списка в заданной позиции указанным элементом.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">Позиция элемента, который нужно заменить.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">Элемент, которым нужно заменить старый элемент.</param>
      <returns vsli:raw="A new list that contains the new element, even if the element at the specified location is the same as the new element.">Новый список, который содержит новый элемент, даже если он идентичен элементу в указанной позиции.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary vsli:raw="Represents an immutable first-in, first-out collection of objects.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет неизменяемую коллекцию объектов, основанную на принципе ФИФО.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">Тип элементов очереди.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary vsli:raw="Returns a new queue with all the elements removed.">Возвращает новую очередь, из которой удалены все элементы.</summary>
      <returns vsli:raw="An empty immutable queue.">Пустая неизменяемая очередь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the first element in the immutable queue, and returns the new queue.">Удаляет из неизменяемой очереди первый элемент и возвращает новую очередь.</summary>
      <returns vsli:raw="The new immutable queue with the first element removed. This value is never &lt;see langword=&quot;null&quot; /&gt;.">Новая неизменяемая очередь, из которой удален первый элемент. Это значение не может быть равно <c>null</c>.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">Очередь является пустой.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Добавляет элемент в конец неизменяемой очереди и возвращает новую очередь.</summary>
      <param name="value" vsli:raw="The element to add.">Добавляемый элемент.</param>
      <returns vsli:raw="The new immutable queue with the specified element added.">Новая неизменяемая очередь, в которую добавлен указанный элемент.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.">Возвращает значение, указывающее, является ли пустой эта неизменяемая очередь.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если эта очередь пуста; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">Возвращает элемент из начала неизменяемой очереди, не удаляя его.</summary>
      <returns vsli:raw="The element at the beginning of the queue.">Элемент в начале очереди.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">Очередь является пустой.</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary vsli:raw="Represents a set of elements that can only be modified by creating a new instance of the set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет набор элементов, которые можно изменить только путем создания нового экземпляра набора.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="The type of element stored in the set.">Тип элементов, которые хранятся в наборе.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Добавляет в неизменяемый набор указанный элемент.</summary>
      <param name="value" vsli:raw="The element to add.">Добавляемый элемент.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Новый набор, в который добавлен указанный элемент, или исходный набор, если элемент уже присутствует в нем.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">Возвращает пустой неизменяемый набор с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">Пустой набор с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable set contains a specified element.">Определяет, содержит ли неизменяемый набор указанный элемент.</summary>
      <param name="value" vsli:raw="The element to locate in the set.">Элемент, который требуется найти в наборе.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если набор содержит указанное значение, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">Удаляет из текущего неизменяемого набора все элементы указанной коллекции.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">Коллекция элементов, удаляемых из набора.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Новый набор, из которого удалены указанные элементы, или исходный набор, если таких элементов в нем не было.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that exist in this set and the specified set.">Создает неизменяемый набор, который содержит только элементы, существующие как в исходном, так и в указанном наборах.</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Immutable.IImmutableSet`1&quot; /&gt;.">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Immutable.IImmutableSet`1" />.</param>
      <returns vsli:raw="A new immutable set that contains elements that exist in both sets.">Новый неизменяемый набор, который содержит элементы, существующие в обоих наборах.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) subset of the specified collection.">Определяет, является ли текущий неизменяемый набор должным (строгим) подмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является строгим подмножеством указанной коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a proper (strict) superset of the specified collection.">Определяет, является ли текущий набор должным (строгим) надмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является строгим надмножеством указанной коллекции; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a subset of a specified collection.">Определяет, является ли текущий неизменяемый набор подмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является подмножеством указанной коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set is a superset of a specified collection.">Определяет, является ли текущий неизменяемый набор надмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является надмножеством указанной коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set overlaps with the specified collection.">Определяет, пересекаются ли текущий неизменяемый набор и указанная коллекция.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в текущем наборе и указанной коллекции есть хотя бы один общий элемент; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Удаляет указанный элемент из неизменяемого набора.</summary>
      <param name="value" vsli:raw="The element to remove.">Подлежащий удалению элемент.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Новый набор, из которого удален указанный элемент, или текущий набор, если элемент в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable set and the specified collection contain the same elements.">Определяет, содержат ли текущий неизменяемый набор и указанная коллекция одни и те же элементы.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если наборы равны, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Создает неизменяемый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Новый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Determines whether the set contains a specified value.">Определяет, содержит ли набор указанное значение.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">Значение, которое нужно найти.</param>
      <param name="actualValue" vsli:raw="The matching value from the set, if found, or &lt;c&gt;equalvalue&lt;/c&gt; if there are no matches.">Соответствующее значение из набора, если оно найдено, или <c>equalvalue</c>, если совпадений нет.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching value was found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если соответствующее значение найдено; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Создает новый неизменяемый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Коллекция, из которой нужно добавить элементы.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Новый неизменяемый набор, в который добавлены элементы, или исходный набор, если все элементы уже есть в нем.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary vsli:raw="Represents an immutable last-in-first-out (LIFO) collection.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет неизменяемую коллекцию объектов, основанную на принципе ЛИФО.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the stack.">Тип элементов стека.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">Удаляет все объекты из неизменяемого стека.</summary>
      <returns vsli:raw="An empty immutable stack.">Пустой неизменяемый стек.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable stack is empty.">Возвращает значение, указывающее, является ли пустым этот неизменяемый стек.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this stack is empty; otherwise,&lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если стек пуст; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary vsli:raw="Returns the element at the top of the immutable stack without removing it.">Возвращает верхний элемент неизменяемого стека, не удаляя его.</summary>
      <returns vsli:raw="The element at the top of the stack.">Верхний элемент стека.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Стек является пустым.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">Удаляет верхний элемент из неизменяемого стека и возвращает новый стек.</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">Новый стек; никогда не принимает значение <c>null</c></returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Стек является пустым.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">Добавляет верхний элемент в неизменяемый стек и возвращает новый стек.</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">Элемент, который нужно поместить в стек.</param>
      <returns vsli:raw="The new stack.">Новый стек.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary vsli:raw="Provides methods for creating an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Содержит методы для создания неизменяемого массива (это означает, что изменить его после создания невозможно).  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary vsli:raw="Searches the sorted immutable array for a specified element using the default comparer and returns the zero-based index of the element, if it's found.">Выполняет поиск указанного элемента в отсортированном неизменяемом массиве с использованием функции сравнения по умолчанию и в случае успеха возвращает индекс этого элемента, отсчитываемый от нуля.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Отсортированный массив, в котором выполняется поиск.</param>
      <param name="value" vsli:raw="The object to search for.">Объект, который нужно найти.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Отсчитываемый от нуля индекс элемента в массиве, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="value" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> не реализует <see cref="T:System.IComparable" /> или поиск обнаруживает элемент, который не реализует <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">Выполняет поиск указанного элемента в отсортированном неизменяемом массиве и в случае успеха возвращает индекс этого элемента, отсчитываемый от нуля.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Отсортированный массив, в котором выполняется поиск.</param>
      <param name="value" vsli:raw="The object to search for.">Объект, который нужно найти.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or null to use the default comparer.">Реализация функции сравнения, которую нужно использовать при проверке элементов, или null, если следует использовать функцию сравнения по умолчанию.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Отсчитываемый от нуля индекс элемента в массиве, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="value" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> имеет значение null и <paramref name="value" /> не реализует <see cref="T:System.IComparable" /> или поиск обнаруживает элемент, который не реализует <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it's found.">Выполняет поиск указанного элемента в отсортированном неизменяемом массиве и в случае успеха возвращает индекс этого элемента, отсчитываемый от нуля.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Отсортированный массив, в котором выполняется поиск.</param>
      <param name="index" vsli:raw="The starting index of the range to search.">Начальный индекс диапазона поиска.</param>
      <param name="length" vsli:raw="The length of the range to search.">Длина диапазона поиска.</param>
      <param name="value" vsli:raw="The object to search for.">Объект, который нужно найти.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Отсчитываемый от нуля индекс элемента в массиве, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="value" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="value" /> не реализует <see cref="T:System.IComparable" /> или поиск обнаруживает элемент, который не реализует <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> и <paramref name="length" /> не указывают допустимый диапазон в <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> меньше нижней границы массива <paramref name="array" />.
-или-
Значение параметра <paramref name="length" /> меньше нуля.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Searches a sorted immutable array for a specified element and returns the zero-based index of the element.">Выполняет поиск указанного элемента в отсортированном неизменяемом массиве и возвращает индекс этого элемента, отсчитываемый от нуля.</summary>
      <param name="array" vsli:raw="The sorted array to search.">Отсортированный массив, в котором выполняется поиск.</param>
      <param name="index" vsli:raw="The starting index of the range to search.">Начальный индекс диапазона поиска.</param>
      <param name="length" vsli:raw="The length of the range to search.">Длина диапазона поиска.</param>
      <param name="value" vsli:raw="The object to search for.">Объект, который нужно найти.</param>
      <param name="comparer" vsli:raw="The comparer to use when comparing elements for equality or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Функция сравнения, которую нужно использовать при проверке элементов на предмет равенства, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns vsli:raw="The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;value&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.ICollection`1.Count&quot; /&gt;.">Отсчитываемый от нуля индекс элемента в массиве, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="value" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is null and &lt;paramref name=&quot;value&quot; /&gt; does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt; or the search encounters an element that does not implement &lt;see cref=&quot;T:System.IComparable&quot; /&gt;.">
        <paramref name="comparer" /> имеет значение null и <paramref name="value" /> не реализует <see cref="T:System.IComparable" /> или поиск обнаруживает элемент, который не реализует <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; do not specify a valid range in &lt;paramref name=&quot;array&quot; /&gt;.&#xA;        &#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not compatible with the elements of &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> и <paramref name="length" /> не указывают допустимый диапазон в <paramref name="array" />.

или -

<paramref name="comparer" /> имеет значение <see langword="null" />, и <paramref name="value" /> относится к типу, который несовместим с элементами <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the lower bound of &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="index" /> меньше нижней границы массива <paramref name="array" />.

или -

Значение параметра <paramref name="length" /> меньше нуля.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary vsli:raw="Creates an empty immutable array.">Создает пустой неизменяемый массив.</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns vsli:raw="An empty immutable array.">Пустой неизменяемый массив.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified object.">Создает неизменяемый массив, который содержит указанный объект.</summary>
      <param name="item" vsli:raw="The object to store in the array.">Объект, который нужно сохранить в массиве.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified object.">Неизменяемый массив, который содержит указанные объекты.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Создает неизменяемый массив, который содержит указанные объекты.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">Первый объект, который нужно сохранить в массиве.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">Второй объект, который нужно сохранить в массиве.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Неизменяемый массив, который содержит указанные объекты.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Создает неизменяемый массив, который содержит указанные объекты.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">Первый объект, который нужно сохранить в массиве.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">Второй объект, который нужно сохранить в массиве.</param>
      <param name="item3" vsli:raw="The third object to store in the array.">Третий объект, который нужно сохранить в массиве.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Неизменяемый массив, который содержит указанные объекты.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary vsli:raw="Creates an immutable array that contains the specified objects.">Создает неизменяемый массив, который содержит указанные объекты.</summary>
      <param name="item1" vsli:raw="The first object to store in the array.">Первый объект, который нужно сохранить в массиве.</param>
      <param name="item2" vsli:raw="The second object to store in the array.">Второй объект, который нужно сохранить в массиве.</param>
      <param name="item3" vsli:raw="The third object to store in the array.">Третий объект, который нужно сохранить в массиве.</param>
      <param name="item4" vsli:raw="The fourth object to store in the array.">Четвертый объект, который нужно сохранить в массиве.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects.">Неизменяемый массив, который содержит указанные объекты.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary vsli:raw="Creates an immutable array from the specified array of objects.">Создает неизменяемый массив на основе указанного массива объектов.</summary>
      <param name="items" vsli:raw="The array of objects to populate the array with.">Массив объектов, которыми нужно заполнить массив.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns vsli:raw="An immutable array that contains the array of items.">Неизменяемый массив, который содержит указанный массив объектов.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with specified objects from another array.">Создает неизменяемый массив, который содержит указанные объекты из другого массива.</summary>
      <param name="items" vsli:raw="The source array of objects.">Исходный массив объектов.</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">Индекс первого элемента, который нужно скопировать из <paramref name="items" />.</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">Количество элементов из <paramref name="items" />, которые нужно добавить в этот неизменяемый массив.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">Неизменяемый массив, который содержит указанные объекты из исходного массива.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary vsli:raw="Creates an immutable array with the specified objects from another immutable array.">Создает неизменяемый массив, который содержит указанные объекты из другого неизменяемого массива.</summary>
      <param name="items" vsli:raw="The source array of objects.">Исходный массив объектов.</param>
      <param name="start" vsli:raw="The index of the first element to copy from &lt;paramref name=&quot;items&quot; /&gt;.">Индекс первого элемента, который нужно скопировать из <paramref name="items" />.</param>
      <param name="length" vsli:raw="The number of elements from &lt;paramref name=&quot;items&quot; /&gt; to include in this immutable array.">Количество элементов из <paramref name="items" />, которые нужно добавить в этот неизменяемый массив.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the array.">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified objects from the source array.">Неизменяемый массив, который содержит указанные объекты из исходного массива.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">Создает изменяемый массив, который можно преобразовать в <see cref="T:System.Collections.Immutable.ImmutableArray" /> без выделения новой памяти.</summary>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">Тип элементов, которые хранятся в построителе.</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">Изменяемый массив указанного типа, который можно эффективно преобразовать в неизменяемый.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary vsli:raw="Creates a mutable array that can be converted to an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray&quot; /&gt; without allocating new memory.">Создает изменяемый массив, который можно преобразовать в <see cref="T:System.Collections.Immutable.ImmutableArray" /> без выделения новой памяти.</summary>
      <param name="initialCapacity" vsli:raw="The initial capacity of the builder.">Начальная емкость построителя.</param>
      <typeparam name="T" vsli:raw="The type of elements stored in the builder.">Тип элементов, которые хранятся в построителе.</typeparam>
      <returns vsli:raw="A mutable array of the specified type that can be efficiently converted to an immutable array.">Изменяемый массив указанного типа, который можно эффективно преобразовать в неизменяемый.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; populated with the specified items.">Создает новый экземпляр <see cref="T:System.Collections.Immutable.ImmutableArray`1" />, заполненный указанными элементами.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Элементы, которые нужно добавить в массив.</param>
      <typeparam name="T" vsli:raw="The type of element stored in the array.">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified items.">Неизменяемый массив, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Инициализирует новый экземпляр структуры <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Исходный массив, с которым необходимо инициализировать результирующий массив.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">Функция, которую необходимо применить к каждому элементу в исходном массиве.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Инициализирует новый экземпляр структуры <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Исходный массив, с которым необходимо инициализировать результирующий массив.</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">Индекс первого элемента в исходном массиве, который необходимо включить в результирующий массив.</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">Количество элементов из исходного массива, которые нужно добавить в результирующий.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">Функция, которую необходимо применить к каждому элементу исходного массива, включенному в результирующий массив.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Инициализирует новый экземпляр структуры <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Исходный массив, с которым необходимо инициализировать результирующий массив.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array.">Функция, которую необходимо применить к каждому элементу в исходном массиве.</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">Аргумент, который необходимо передать в функцию сопоставления селектора.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to pass to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to store in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct.">Инициализирует новый экземпляр структуры <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items" vsli:raw="The source array to initialize the resulting array with.">Исходный массив, с которым необходимо инициализировать результирующий массив.</param>
      <param name="start" vsli:raw="The index of the first element in the source array to include in the resulting array.">Индекс первого элемента в исходном массиве, который необходимо включить в результирующий массив.</param>
      <param name="length" vsli:raw="The number of elements from the source array to include in the resulting array.">Количество элементов из исходного массива, которые нужно добавить в результирующий.</param>
      <param name="selector" vsli:raw="The function to apply to each element from the source array included in the resulting array.">Функция, которую необходимо применить к каждому элементу исходного массива, включенному в результирующий массив.</param>
      <param name="arg" vsli:raw="An argument to be passed to the selector mapping function.">Аргумент, который необходимо передать в функцию сопоставления селектора.</param>
      <typeparam name="TSource" vsli:raw="The type of element stored in the source array." />
      <typeparam name="TArg" vsli:raw="The type of argument to be passed to the selector mapping function." />
      <typeparam name="TResult" vsli:raw="The type of element to be stored in the target array." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates an immutable array from the specified collection.">Создает неизменяемый массив на основе указанной коллекции.</summary>
      <param name="items" vsli:raw="The collection of objects to copy to the immutable array.">Коллекция объектов, которые нужно скопировать в неизменяемый массив.</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in &lt;paramref name=&quot;items&quot; /&gt;.">Количество элементов в <paramref name="items" />.</typeparam>
      <returns vsli:raw="An immutable array that contains the specified collection of objects.">Неизменяемый массив, который содержит указанную коллекцию объектов.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Creates an immutable array from the current contents of the builder's array.">Создает неизменяемый массив из текущего содержимого массива построителя.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable array from.">Построитель для создания неизменяемого массива.</param>
      <typeparam name="TSource" vsli:raw="The type of elements contained in the immutable array.">Тип элементов, содержащихся в неизменяемом массиве.</typeparam>
      <returns vsli:raw="An immutable array that contains the current contents of the builder's array.">Неизменяемый массив, содержащий текущее содержимое массива построителя.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary vsli:raw="Represents an array that is immutable; meaning it cannot be changed once it is created.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет неизменяемый массив (это означает, что изменить его после создания невозможно).  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Тип элементов, которые хранятся в массиве.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">Возвращает копию исходного массива, в конец которого добавлен указанный элемент.</summary>
      <param name="item" vsli:raw="The item to be added to the end of the array.">Элемент, который нужно добавить в конец массива.</param>
      <returns vsli:raw="A new array with the specified item added to the end.">Новый массив, в конец которого добавлен указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Возвращает копию исходного массива, в конец которого добавлены указанные элементы.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Элементы, которые нужно добавить в массив.</param>
      <returns vsli:raw="A new array with the elements added.">Новый массив, в который добавлены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Возвращает копию исходного массива, в конец которого добавлены указанные элементы.</summary>
      <param name="items" vsli:raw="The elements to add to the array.">Элементы, которые нужно добавить в массив.</param>
      <returns vsli:raw="A new array with the elements added.">Новый массив, в который добавлены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary vsli:raw="Returns a new immutable array that contains the elements of this array cast to a different type.">Возвращает новый неизменяемый массив, который содержит элементы исходного массива. приведенные к другому типу.</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return.">Тип элементов возвращаемого массива.</typeparam>
      <returns vsli:raw="An immutable array that contains the elements of this array, cast to a different type. If the cast fails, returns an array whose &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Неизменяемый массив, который содержит элементы исходного массива. приведенные к другому типу. Если выполнить приведение не удается, возвращает массив, свойство <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> которого имеет значение <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary vsli:raw="Creates a new read-only memory region over this immutable array.">Создает новую область памяти только для чтения над этим неизменяемым массивом.</summary>
      <returns vsli:raw="The read-only memory representation of this immutable array.">Представление этого неизменяемого массива в памяти, доступной только для чтения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary vsli:raw="Creates a new read-only span over this immutable array.">Создает новый диапазон только для чтения над этим неизменяемым массивом.</summary>
      <returns vsli:raw="The read-only span representation of this immutable array.">Представление этого неизменяемого массива в диапазоне, доступном только для чтения.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary vsli:raw="A writable array accessor that can be converted into an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; instance without allocating extra memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Записываемый метод доступа к массиву, который можно преобразовать в экземпляр <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> без выделения дополнительной памяти.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the array.">Добавляет в массив указанный элемент.</summary>
      <param name="item" vsli:raw="The object to add to the array.">Объект, добавляемый в массив.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary vsli:raw="Adds the specified items to the end of the array.">Добавляет указанные элементы в конец массива.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Элементы, которые нужно добавить в массив.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Добавляет указанные элементы в конец массива.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Элементы, которые нужно добавить в массив.</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">Количество элементов исходного массива, которые нужно добавить.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">Добавляет указанные элементы в конец массива.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Элементы, которые нужно добавить в массив.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Adds the specified items to the end of the array.">Добавляет указанные элементы в конец массива.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Элементы, которые нужно добавить в массив.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Добавляет указанные элементы в конец массива.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Элементы, которые нужно добавить в массив.</param>
      <param name="length" vsli:raw="The number of elements from the source array to add.">Количество элементов исходного массива, которые нужно добавить.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary vsli:raw="Adds the specified items to the end of the array.">Добавляет указанные элементы в конец массива.</summary>
      <param name="items" vsli:raw="The items to add to the array.">Элементы, которые нужно добавить в массив.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Добавляет в конец массива указанные элементы, производные от текущего типа элементов массива.</summary>
      <param name="items" vsli:raw="The items to add to end of the array.">Элементы, которые нужно добавить в конец массива.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">Тип, производный от типа элементов, которые находятся в массиве.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Добавляет в конец массива указанные элементы, производные от текущего типа элементов массива.</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">Элементы, которые нужно добавить в конец массива.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">Тип, производный от типа элементов, которые находятся в массиве.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Adds the specified items that derive from the type currently in the array, to the end of the array.">Добавляет в конец массива указанные элементы, производные от текущего типа элементов массива.</summary>
      <param name="items" vsli:raw="The items to add to the end of the array.">Элементы, которые нужно добавить в конец массива.</param>
      <typeparam name="TDerived" vsli:raw="The type that derives from the type of item already in the array.">Тип, производный от типа элементов, которые находятся в массиве.</typeparam>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary vsli:raw="Gets or sets the length of the internal array. When set, the internal array is reallocated to the given capacity if it is not already the specified length.">Возвращает или задает длину внутреннего массива. При установке внутренний массив перераспределяется с учетом заданной емкости, если он еще не имеет указанную длину.</summary>
      <returns vsli:raw="The length of the internal array.">Длина внутреннего массива.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the array.">Удаляет все элементы из массива.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the array contains a specific value.">Определяет, содержит ли массив указанное значение.</summary>
      <param name="item" vsli:raw="The object to locate in the array.">Объект, который нужно найти в массиве.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объект найден; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the current contents to the specified array.">Копирует текущее содержимое в указанный массив.</summary>
      <param name="array" vsli:raw="The array to copy to.">Массив для копирования данных.</param>
      <param name="index" vsli:raw="The index to start the copy operation.">Индекс, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary vsli:raw="Gets or sets the number of items in the array.">Возвращает или устанавливает количество элементов в массиве.</summary>
      <returns vsli:raw="The number of items in the array.">Количество элементов в массиве.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary vsli:raw="Gets an object that can be used to iterate through the collection.">Возвращает объект, который можно использовать для перечисления элементов коллекции.</summary>
      <returns vsli:raw="An object that can be used to iterate through the collection.">Объект, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Determines the index of a specific item in the array.">Определяет индекс заданного элемента в массиве.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Элемент, который нужно найти в массиве.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Индекс элемента <paramref name="item" />, если он найден в списке; в противном случае —значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">Определяет индекс указанного элемента.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Элемент, который нужно найти в массиве.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Начальное положение поиска.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Индекс элемента <paramref name="item" />, если он найден в списке; в противном случае —значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the index of the specified item.">Определяет индекс указанного элемента.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Элемент, который нужно найти в массиве.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Начальное положение поиска.</param>
      <param name="count" vsli:raw="The number of elements to search.">Число искомых элементов.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Индекс элемента <paramref name="item" />, если он найден в списке; в противном случае —значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the index for the specified item.">Определяет индекс указанного элемента.</summary>
      <param name="item" vsli:raw="The item to locate in the array.">Элемент, который нужно найти в массиве.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Индекс, с которого нужно начать поиск.</param>
      <param name="count" vsli:raw="The starting position of the search.">Начальное положение поиска.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if it's found in the list; otherwise, -1.">Индекс элемента <paramref name="item" />, если он найден в списке; в противном случае —значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the array at the specified index.">Вставляет элемент в массив по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">Отсчитываемый с нуля индекс, по которому нужно вставить элемент.</param>
      <param name="item" vsli:raw="The object to insert into the array.">Объект, который нужно вставить в массив.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the item at the specified index.">Возвращает или устанавливает элемент с указанным индексом.</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">Индекс элемента, который нужно получить или установить.</param>
      <returns vsli:raw="The item at the specified index.">Элемент по заданному индексу.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The specified index is not in the array.">Указанный индекс не находится в массиве.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified index.">Возвращает доступную только для чтения ссылку на элемент по указанному индексу.</summary>
      <param name="index" vsli:raw="The item index.">Индекс элемента.</param>
      <returns vsli:raw="The read-only reference to the element at the specified index.">Доступная только для чтения ссылка на элемент по указанному индексу.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is greater or equal to the array count.">Значение <paramref name="index" /> больше или равно длине массива.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Возвращает отсчитываемый с нуля индекс последнего вхождения указанного элемента в массив.</summary>
      <param name="item" vsli:raw="The item to search for.">Искомый элемент.</param>
      <returns vsli:raw="The 0-based index where the item was found; or -1 if it could not be found.">Отсчитываемый от нуля индекс в массиве, по которому обнаружен элемент, или значение -1, если элемент не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Возвращает отсчитываемый с нуля индекс последнего вхождения указанного элемента в массив.</summary>
      <param name="item" vsli:raw="The item to search for.">Искомый элемент.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Начальное положение поиска.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Отсчитываемый от нуля индекс в массиве, по которому обнаружен элемент, или значение -1, если элемент не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Возвращает отсчитываемый с нуля индекс последнего вхождения указанного элемента в массив.</summary>
      <param name="item" vsli:raw="The item to search for.">Искомый элемент.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Начальное положение поиска.</param>
      <param name="count" vsli:raw="The number of elements to search.">Число искомых элементов.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Отсчитываемый от нуля индекс в массиве, по которому обнаружен элемент, или значение -1, если элемент не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Determines the 0-based index of the last occurrence of the specified item in this array.">Возвращает отсчитываемый с нуля индекс последнего вхождения указанного элемента в массив.</summary>
      <param name="item" vsli:raw="The item to search for.">Искомый элемент.</param>
      <param name="startIndex" vsli:raw="The starting position of the search.">Начальное положение поиска.</param>
      <param name="count" vsli:raw="The number of elements to search.">Число искомых элементов.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Отсчитываемый от нуля индекс в массиве, по которому обнаружен элемент, или значение -1, если элемент не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary vsli:raw="Extracts the internal array as an &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; and replaces it              with a zero length array.">Извлекает внутренний массив как <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> и заменяет его на массив нулевой длины.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="When &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Count&quot; /&gt; doesn't              equal &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity&quot; /&gt;.">Если значение <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> не равно <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the specified element.">Удаляет указанный элемент.</summary>
      <param name="element" vsli:raw="The item to remove.">Удаляемый элемент.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;element&quot; /&gt; was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если элемент <paramref name="element" /> был найден и удален; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index from the array.">Удаляет из массива элемент с указанным индексом.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Отсчитываемый от нуля индекс удаляемого элемента.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of elements in the collection.">Изменяет порядок элементов в коллекции.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary vsli:raw="Sorts the contents of the array.">Сортирует содержимое массива.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">Сортирует содержимое массива.</summary>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">Функция сравнения, которую нужно использовать для сортировки. Если функция равна <see langword="null" />, используется функция сравнения по умолчанию для типа элементов массива.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire array using the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">Сортирует элементы во всем массиве, используя указанный <see cref="T:System.Comparison`1" />.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">
        <see cref="T:System.Comparison`1" />, используемый при сравнении элементов.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">Параметр <paramref name="comparison" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the contents of the array.">Сортирует содержимое массива.</summary>
      <param name="index" vsli:raw="The starting index for the sort.">Начальный индекс диапазона сортировки.</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">Количество элементов в сортируемом диапазоне.</param>
      <param name="comparer" vsli:raw="The comparer to use for sorting. If comparer is &lt;see langword=&quot;null&quot; /&gt;, the default comparer for the elements type in the array is used.">Функция сравнения, которую нужно использовать для сортировки. Если функция равна <see langword="null" />, используется функция сравнения по умолчанию для типа элементов массива.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Возвращает значение, которое определяет, является ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> доступной только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Возвращает перечислитель, который выполняет перечисление элементов массива.</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">Перечислитель, который выполняет перечисление элементов массива.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Возвращает перечислитель, который выполняет перечисление элементов массива.</summary>
      <returns vsli:raw="An enumerator that iterates through the array.">Перечислитель, который выполняет перечисление элементов массива.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary vsli:raw="Creates a new array with the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Создает новый массив с текущим содержимым исходного массива <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns vsli:raw="A new array with the contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Новый массив с содержимым исходного массива <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary vsli:raw="Returns an immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Возвращает неизменяемый массив, который содержит текущие элементы исходного объекта <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns vsli:raw="An immutable array that contains the current contents of this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1.Builder&quot; /&gt;.">Неизменяемый массив, который содержит текущие элементы исходного объекта <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct by casting the underlying array to an array of type &lt;typeparamref name=&quot;TOther&quot; /&gt;.">Инициализирует новый экземпляр структуры <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> путем приведения базового массива к массиву типа <paramref name="TOther" />.</summary>
      <typeparam name="TOther" vsli:raw="The type of array element to return." />
      <exception cref="T:System.InvalidCastException" vsli:raw="The cast is illegal.">Выдается, если приведение недопустимо.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; struct based on the contents of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.">Инициализирует новый экземпляр структуры <see cref="T:System.Collections.Immutable.ImmutableArray`1" />, исходя из содержимого существующего экземпляра, позволяя ковариантному статическому приведению использовать существующий массив повторно.</summary>
      <param name="items" vsli:raw="The array to initialize the array with. No copy is made.">Исходный массив для инициализации результирующего. Копирования при этом не происходит.</param>
      <typeparam name="TDerived" vsli:raw="The type of array element to return." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">Возвращает массив, из которого удалены все элементы.</summary>
      <returns vsli:raw="An array with all of the elements removed.">Массив, из которого удалены все элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary vsli:raw="Determines whether the specified item exists in the array.">Определяет, существует ли в массиве указанный элемент.</summary>
      <param name="item" vsli:raw="The item to search for.">Искомый элемент.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified item was found in the array; otherwise &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если указанный элемент был найден в массиве; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the contents of this array to the specified array.">Копирует содержимое исходного массива в указанный массив.</summary>
      <param name="destination" vsli:raw="The array to copy to.">Массив для копирования данных.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the contents of this array to the specified array starting at the specified destination index.">Копирует содержимое исходного массива в заданный массив начиная с указанного индекса конечного массива.</summary>
      <param name="destination" vsli:raw="The array to copy to.">Массив для копирования данных.</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">Индекс в <paramref name="array" />, с которого начинается копирование.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the specified items in this array to the specified array at the specified starting index.">Копирует указанные элементы исходного массива в заданный массив начиная с указанного индекса.</summary>
      <param name="sourceIndex" vsli:raw="The index of this array where copying begins.">Индекс исходного массива, с которого начинается копирование.</param>
      <param name="destination" vsli:raw="The array to copy to.">Массив для копирования данных.</param>
      <param name="destinationIndex" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying begins.">Индекс в <paramref name="array" />, с которого начинается копирование.</param>
      <param name="length" vsli:raw="The number of elements to copy from this array.">Количество элементов, которые нужно скопировать из исходного массива.</param>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary vsli:raw="Gets an empty immutable array.">Возвращает пустой неизменяемый массив.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary vsli:raw="An array enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Перечислитель массива.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary vsli:raw="Gets the current item.">Возвращает текущий элемент.</summary>
      <returns vsli:raw="The current item.">Текущий элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances to the next value in the array.">Выполняет переход к следующему значению в массиве.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if another item exists in the array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в массиве существует еще один элемент; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Indicates whether specified array is equal to this array.">Определяет, равен ли указанный массив исходному массиву.</summary>
      <param name="other" vsli:raw="An object to compare with this object.">Объект, который требуется сравнить с данным объектом.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; is equal to this array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если массив <paramref name="other" /> равен исходному массиву; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary vsli:raw="Determines if this array is equal to the specified object.">Определяет, равен ли исходный объект указанному объекту.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this array.">Объект <see cref="T:System.Object" /> для сравнения с исходным массивом.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this array is equal to &lt;paramref name=&quot;obj&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если исходный массив равен объекту <paramref name="obj" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the contents of the array.">Возвращает перечислитель, который выполняет перечисление элементов массива.</summary>
      <returns vsli:raw="An enumerator.">Перечислитель.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary vsli:raw="Returns a hash code for this instance.">Возвращает хэш-код для данного экземпляра.</summary>
      <returns vsli:raw="A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.">Хэш-код для данного экземпляра, подходящий для использования в алгоритмах хэширования и структурах данных, подобных хэш-таблицам.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item.">Выполняет поиск указанного элемента в массиве.</summary>
      <param name="item" vsli:raw="The item to search for.">Искомый элемент.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Отсчитываемый от нуля индекс элемента, если он найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">Выполняет поиск указанного элемента в массиве.</summary>
      <param name="item" vsli:raw="The item to search for.">Искомый элемент.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Индекс, с которого нужно начать поиск.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Отсчитываемый от нуля индекс элемента, если он найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">Выполняет поиск указанного элемента в массиве.</summary>
      <param name="item" vsli:raw="The item to search for.">Искомый элемент.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Индекс, с которого нужно начать поиск.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Отсчитываемый от нуля индекс элемента, если он найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item.">Выполняет поиск указанного элемента в массиве.</summary>
      <param name="item" vsli:raw="The item to search for.">Искомый элемент.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Индекс, с которого нужно начать поиск.</param>
      <param name="count" vsli:raw="The number of elements to search.">Число искомых элементов.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Отсчитываемый от нуля индекс элемента, если он найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item.">Выполняет поиск указанного элемента в массиве.</summary>
      <param name="item" vsli:raw="The item to search for.">Искомый элемент.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Индекс, с которого нужно начать поиск.</param>
      <param name="count" vsli:raw="The number of elements to search.">Число искомых элементов.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns vsli:raw="The zero-based index position of the item if it is found, or -1 if it is not.">Отсчитываемый от нуля индекс элемента, если он найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">Возвращает новый массив, в указанную позицию которого вставлено заданное значение.</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">Отсчитываемый от нуля индекс в массиве, по которому нужно добавить новый элемент.</param>
      <param name="item" vsli:raw="The item to insert at the start of the array.">Элемент, который нужно вставить в начало массива.</param>
      <returns vsli:raw="A new array with the item inserted at the specified index.">Новый массив, в указанную позицию которого добавлен элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Вставляет указанные значения по указанному индексу.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Индекс, по которому нужно вставить значение.</param>
      <param name="items" vsli:raw="The elements to insert.">Вставляемые элементы.</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">Новый неизменяемый массив, в указанную позицию которого добавлены элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Вставляет указанные значения по указанному индексу.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Индекс, по которому нужно вставить значение.</param>
      <param name="items" vsli:raw="The elements to insert.">Вставляемые элементы.</param>
      <returns vsli:raw="A new immutable array with the items inserted at the specified index.">Новый неизменяемый массив, в указанную позицию которого добавлены элементы.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary vsli:raw="Gets a value indicating whether this array was declared but not initialized.">Возвращает значение, указывающее, был ли массив объявлен, но не инициализирован.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> имеет тип <see langword="null" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty or is not initialized.">Возвращает значение, указывающее, является ли массив <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> пустым или неинициализированным.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.Collections.Immutable.ImmutableArray`1.Empty&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />
        <see langword="null" />
        <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" />, <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> Еслиимеетзначениеили;в<see langword="false" />противном случае —.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty.">Возвращает значение, указывающее, пуст ли массив <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объект <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> пуст; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index in the immutable array.">Возвращает элемент неизменяемого массива по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">Индекс элемента (с нуля), который требуется получить.</param>
      <returns vsli:raw="The element at the specified index in the immutable array.">Элемент неизменяемого массива по указанному индексу.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">Возвращает доступную только для чтения ссылку на элемент по указанному индексу <paramref name="index" /> в списке, доступном только для чтения.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get a reference to.">Отсчитываемый от нуля индекс элемента, ссылку на который нужно получить.</param>
      <returns vsli:raw="A read-only reference to the element at the specified &lt;paramref name=&quot;index&quot; /&gt; in the read-only list.">Доступная только для чтения ссылка на элемент по указанному индексу <paramref name="index" /> в списке, доступном только для чтения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Выполняет поиск указанного элемента в массиве начиная с его конца.</summary>
      <param name="item" vsli:raw="The item to search for.">Искомый элемент.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Отсчитываемый от нуля индекс в массиве, по которому обнаружен элемент, или значение -1, если элемент не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Выполняет поиск указанного элемента в массиве начиная с его конца.</summary>
      <param name="item" vsli:raw="The item to search for.">Искомый элемент.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Индекс, с которого нужно начать поиск.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Отсчитываемый от нуля индекс в массиве, по которому обнаружен элемент, или значение -1, если элемент не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Выполняет поиск указанного элемента в массиве начиная с его конца.</summary>
      <param name="item" vsli:raw="The item to search for.">Искомый элемент.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Индекс, с которого нужно начать поиск.</param>
      <param name="count" vsli:raw="The number of elements to search.">Число искомых элементов.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Отсчитываемый от нуля индекс в массиве, по которому обнаружен элемент, или значение -1, если элемент не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches the array for the specified item; starting at the end of the array.">Выполняет поиск указанного элемента в массиве начиная с его конца.</summary>
      <param name="item" vsli:raw="The item to search for.">Искомый элемент.</param>
      <param name="startIndex" vsli:raw="The index at which to begin the search.">Индекс, с которого нужно начать поиск.</param>
      <param name="count" vsli:raw="The number of elements to search.">Число искомых элементов.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns vsli:raw="The 0-based index into the array where the item was found; or -1 if it could not be found.">Отсчитываемый от нуля индекс в массиве, по которому обнаружен элемент, или значение -1, если элемент не найден.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary vsli:raw="Gets the number of elements in the array.">Возвращает количество элементов в массиве.</summary>
      <returns vsli:raw="The number of elements in the array.">Количество элементов в массиве.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary vsli:raw="Filters the elements of this array to those assignable to the specified type.">Выполняет фильтрацию элементов в массиве, оставляя только те, которые можно назначить определенному типу.</summary>
      <typeparam name="TResult" vsli:raw="The type to filter the elements of the sequence on.">Тип, по которому фильтруются элементы последовательности.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; that contains elements from the input sequence of type of &lt;paramref name=&quot;TResult&quot; /&gt;.">Объект <see cref="T:System.Collections.IEnumerable" />, содержащий элементы входной последовательности типа <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">Возвращает значение, указывающее, равны ли два массива.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">Массив слева от оператора.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">Массив справа от оператора.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если массивы равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Returns a value that indicates if two arrays are equal.">Возвращает значение, указывающее, равны ли два массива.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">Массив слева от оператора.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">Массив справа от оператора.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если массивы равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Returns a value that indicates whether two arrays are not equal.">Возвращает значение, указывающее, различаются ли два массива.</summary>
      <param name="left" vsli:raw="The array to the left of the operator.">Массив слева от оператора.</param>
      <param name="right" vsli:raw="The array to the right of the operator.">Массив справа от оператора.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если массивы не равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary vsli:raw="Checks for inequality between two array.">Проверяет неравенство двух массивов.</summary>
      <param name="left" vsli:raw="The object to the left of the operator.">Объект слева от оператора.</param>
      <param name="right" vsli:raw="The object to the right of the operator.">Объект справа от оператора.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если две массива не равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array. If no match is found, the current array is returned.">Возвращает массив, из которого удалено первое вхождение указанного элемента. Если совпадения не найдены, возвращается текущий массив.</summary>
      <param name="item" vsli:raw="The item to remove.">Удаляемый элемент.</param>
      <returns vsli:raw="A new array with the item removed.">Новый массив, из которого удален элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array.  &#xA;  &#xA; If no match is found, the current array is returned.">Возвращает массив, из которого удалено первое вхождение указанного элемента.  
 Если совпадения не найдены, возвращается текущий массив.</summary>
      <param name="item" vsli:raw="The item to remove.">Удаляемый элемент.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns vsli:raw="A new array with the specified item removed.">Новый массив, из которого удален указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">Удаляет из массива все элементы, отвечающие указанному условию.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Делегат, определяющий условия удаления элементов.</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">Новый массив, из которого удалены элементы, отвечающие указанному условию.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">Возвращает массив, из которого удален элемент в указанной позиции.</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">Отсчитываемый от нуля индекс элемента, который требуется удалить из возвращаемого массива.</param>
      <returns vsli:raw="A new array with the item at the specified index removed.">Новый массив, из которого удален элемент по указанному индексу.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Удаляет из массива указанные элементы.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Элементы, которые нужно удалить, если соответствующие значения будут найдены в списке.</param>
      <returns vsli:raw="A new array with the elements removed.">Новый массив, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Удаляет из массива указанные элементы.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Элементы, которые нужно удалить, если соответствующие значения будут найдены в списке.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns vsli:raw="A new array with the elements removed.">Новый массив, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary vsli:raw="Removes the specified values from this list.">Удаляет из списка указанные значения.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Элементы, которые нужно удалить, если соответствующие значения будут найдены в списке.</param>
      <returns vsli:raw="A new list with the elements removed.">Новый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this list.">Удаляет из списка указанные элементы.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Элементы, которые нужно удалить, если соответствующие значения будут найдены в списке.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns vsli:raw="A new array with the elements removed.">Новый массив, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">Возвращает массив, из которого удалены элементы в указанной позиции.</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">Отсчитываемый от нуля индекс начального элемента, который требуется удалить из массива.</param>
      <param name="length" vsli:raw="The number of elements to remove from the array.">Количество удаляемых из массива элементов.</param>
      <returns vsli:raw="The new array with the specified elements removed.">Новый массив, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Находит в массиве первый элемент, равный заданному значению, и заменяет его значение указанным новым.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">Значение, которое нужно найти и заменить в массиве.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">Значение, на которое необходимо заменить <c>oldvalue</c>.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Новый массив, который содержит <paramref name="newValue" />, даже если старое и новое значения совпадают.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> не найден в массиве.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Находит в массиве первый элемент, равный заданному значению, и заменяет его значение указанным новым.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">Значение, которое нужно найти и заменить в массиве.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">Значение, на которое необходимо заменить <c>oldvalue</c>.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">Компаратор проверки на равенство, используемый для сравнения значений.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Новый массив, который содержит <paramref name="newValue" />, даже если старое и новое значения совпадают.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> не найден в массиве.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Заменяет элемент по заданному индексу указанным элементом.</summary>
      <param name="index" vsli:raw="The index of the item to replace.">Индекс заменяемого элемента.</param>
      <param name="item" vsli:raw="The item to add to the list.">Элемент, который нужно добавить в список.</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">Новый массив, который содержит элемент <paramref name="item" /> по указанному индексу.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary vsli:raw="Sorts the elements in the immutable array using the default comparer.">Сортирует элементы в неизменяемом массиве с помощью функции сравнения по умолчанию.</summary>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Новый неизменяемый массив, содержащий отсортированные элементы исходного.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the immutable array using the specified comparer.">Сортирует элементы в неизменяемом массиве с помощью указанной функции сравнения.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Реализация, которую нужно использовать при сравнении элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию.</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Новый неизменяемый массив, содержащий отсортированные элементы исходного.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; using             the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">Сортирует элементы во всем <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> с использованием указанного <see cref="T:System.Comparison`1" />.</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">
        <see cref="T:System.Comparison`1" />, используемый при сравнении элементов.</param>
      <returns vsli:raw="The sorted list.">Сортируемый список.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is null.">Параметр <paramref name="comparison" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the specified elements in the immutable array using the specified comparer.">Сортирует указанные элементы в неизменяемом массиве с помощью указанной функции сравнения.</summary>
      <param name="index" vsli:raw="The index of the first element to sort.">Индекс первого элемента сортируемого диапазона.</param>
      <param name="count" vsli:raw="The number of elements to include in the sort.">Количество элементов в сортируемом диапазоне.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Реализация, которую нужно использовать при сравнении элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию.</param>
      <returns vsli:raw="A new immutable array that contains the items in this array, in sorted order.">Новый неизменяемый массив, содержащий отсортированные элементы исходного.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The item to add to the end of the array.">Элемент, который нужно добавить в конец массива.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">Возвращает номер массива в коллекции.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Вызывается, если свойство <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> возвращает значение true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">Возвращает значение, указывающее, является ли этот экземпляр доступным только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <c>значение true</c> , если данный экземпляр доступен только для чтения; в противном случае — <c>значение false</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item" vsli:raw="The object to remove from the array.">Объект, который нужно удалить из массива.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the array.">Возвращает перечислитель, который выполняет перечисление элементов массива.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the array.">Перечислитель, который можно использовать для перечисления элементов массива.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index" vsli:raw="The index of the location to insert the item.">Индекс позиции для вставки элемента.</param>
      <param name="item" vsli:raw="The item to insert.">Вставляемый элемент.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index in the read-only list.">Возвращает или задает элемент по указанному индексу в списке, доступном только для чтения.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get.">Индекс элемента (с нуля), который требуется получить.</param>
      <returns vsli:raw="The element at the specified index in the read-only list.">Элемент в коллекции по указанному индексу в списке, доступном только для чтения.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Всегда выдается из метода задания значения.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Вызывается, если свойство <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> возвращает значение true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index" vsli:raw="The index.">Индекс.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary vsli:raw="Gets the number of items in the collection.">Возвращает номер массива в коллекции.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Вызывается, если свойство <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> возвращает значение true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index.">Получает элемент с указанным индексом.</summary>
      <param name="index" vsli:raw="The index.">Индекс.</param>
      <returns vsli:raw="The element.">Элемент.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Вызывается, если свойство <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> возвращает значение true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies this array to another array starting at the specified index.">Копирует исходный массив в другой массив начиная с указанного индекса.</summary>
      <param name="array" vsli:raw="The array to copy this array to.">Массив, в который нужно скопировать исходный.</param>
      <param name="index" vsli:raw="The index in the destination array to start the copy operation.">Индекс в целевом массиве, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the size of the array.">Возвращает размер массива.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Вызывается, если свойство <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> возвращает значение true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface. Always returns &lt;see langword=&quot;true&quot; /&gt; since since immutable collections are thread-safe.">См. интерфейс <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the sync root.">Получает корень синхронизации.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable array.">Возвращает перечислитель, который выполняет перечисление элементов неизменяемого массива.</summary>
      <returns vsli:raw="An enumerator that iterates through the immutable array.">Перечислитель, который выполняет перечисление элементов неизменяемого массива.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Свойство <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> возвращает значение <see langword="true" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value" vsli:raw="The value to add to the array.">Значение, которое нужно добавить в массив.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Создается во всех случаях.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Создается во всех случаях.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value" vsli:raw="The value to check for.">Проверяемое значение.</param>
      <returns vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Gets the value at the specified index.">Возвращает значение по указанному индексу.</summary>
      <param name="value" vsli:raw="The value to return the index of.">Значение, индекс которого нужно вернуть.</param>
      <returns vsli:raw="The value of the element at the specified index.">Значение элемента по указанному индексу.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index" vsli:raw="Index that indicates where to insert the item.">Индекс, указывающий место вставки элемента.</param>
      <param name="value" vsli:raw="The value to insert.">Значение, которое следует вставить.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Создается во всех случаях.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether this instance is fixed size.">Возвращает значение, указывающее, имеет ли этот экземпляр фиксированный размер.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <c>значение true</c> , если данный экземпляр имеет фиксированный размер; в противном случае — <c>значение false</c>.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this instance is read only.">Возвращает значение, указывающее, является ли этот экземпляр доступным только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is read only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <c>значение true</c> , если данный экземпляр доступен только для чтения; в противном случае — <c>значение false</c>.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Возвращает или задает объект <see cref="T:System.Object" /> с заданным индексом.</summary>
      <param name="index" vsli:raw="The index.">Индекс.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Всегда выдается из метода задания значения.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableArray`1.IsDefault&quot; /&gt; property returns &lt;see langword=&quot;true&quot; /&gt;.">Вызывается, если свойство <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> возвращает значение true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value" vsli:raw="The value to remove from the array.">Значение, которое нужно удалить из массива.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Создается во всех случаях.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index" vsli:raw="The index of the item to remove.">Индекс удаляемого элемента.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Создается во всех случаях.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Returns a copy of the original array with the specified item added to the end.">Возвращает копию исходного массива, в конец которого добавлен указанный элемент.</summary>
      <param name="value" vsli:raw="The value to add to the end of the array.">Значение, которое нужно добавить в конец массива.</param>
      <returns vsli:raw="A new array with the specified item added to the end.">Новый массив, в конец которого добавлен указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Returns a copy of the original array with the specified elements added to the end of the array.">Возвращает копию исходного массива, в конец которого добавлены указанные элементы.</summary>
      <param name="items" vsli:raw="The elements to add to the end of the array.">Элементы, которые нужно добавить в конец массива.</param>
      <returns vsli:raw="A new array with the elements added to the end.">Новый массив, в конец которого добавлены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Returns an array with all the elements removed.">Возвращает массив, из которого удалены все элементы.</summary>
      <returns vsli:raw="An array with all the elements removed.">Массив, из которого удалены все элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Returns a new array with the specified value inserted at the specified position.">Возвращает новый массив, в указанную позицию которого вставлено заданное значение.</summary>
      <param name="index" vsli:raw="The 0-based index into the array at which the new item should be added.">Отсчитываемый от нуля индекс в массиве, по которому нужно добавить новый элемент.</param>
      <param name="element" vsli:raw="The item to insert at the start of the array.">Элемент, который нужно вставить в начало массива.</param>
      <returns vsli:raw="A new array with the specified value inserted.">Новый массив, в который вставлено указанное значение.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified values at the specified index.">Вставляет указанные значения по заданному индексу.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Индекс, по которому нужно вставить значение.</param>
      <param name="items" vsli:raw="The elements to insert.">Вставляемые элементы.</param>
      <returns vsli:raw="A new array with the specified values inserted.">Новый массив, в который вставлены указанные значения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an array with the first occurrence of the specified element removed from the array; if no match is found, the current array is returned.">Возвращает массив, из которого удалено первое вхождение указанного элемента, либо текущий массив, если совпадений не найдено.</summary>
      <param name="value" vsli:raw="The value to remove from the array.">Значение, которое нужно удалить из массива.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns vsli:raw="A new array with the value removed.">Новый массив, из которого удалено значение.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the items from the array that meet the specified condition.">Удаляет из массива все элементы, отвечающие указанному условию.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Делегат, определяющий условия удаления элементов.</param>
      <returns vsli:raw="A new array with items that meet the specified condition removed.">Новый массив, из которого удалены элементы, отвечающие указанному условию.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Returns an array with the element at the specified position removed.">Возвращает массив, из которого удален элемент в указанной позиции.</summary>
      <param name="index" vsli:raw="The 0-based index of the element to remove from the returned array.">Отсчитываемый от нуля индекс элемента, который требуется удалить из возвращаемого массива.</param>
      <returns vsli:raw="A new array with the specified item removed.">Новый массив, из которого удален указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified items from this array.">Удаляет из массива указанные элементы.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Элементы, которые нужно удалить, если соответствующие значения будут найдены в списке.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns vsli:raw="A new array with the elements removed.">Новый массив, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Returns an array with the elements at the specified position removed.">Возвращает массив, из которого удалены элементы в указанной позиции.</summary>
      <param name="index" vsli:raw="The 0-based index of the starting element to remove from the array.">Отсчитываемый от нуля индекс начального элемента, который требуется удалить из массива.</param>
      <param name="count" vsli:raw="The number of elements to remove from the array.">Количество удаляемых из массива элементов.</param>
      <returns vsli:raw="The new array with the specified elements removed.">Новый массив, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Finds the first element in the array equal to the specified value and replaces the value with the specified new value.">Находит в массиве первый элемент, равный заданному значению, и заменяет его значение указанным новым.</summary>
      <param name="oldValue" vsli:raw="The value to find and replace in the array.">Значение, которое нужно найти и заменить в массиве.</param>
      <param name="newValue" vsli:raw="The value to replace the &lt;c&gt;oldvalue&lt;/c&gt; with.">Значение, на которое необходимо заменить <c>oldvalue</c>.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare values.">Компаратор проверки на равенство, используемый для сравнения значений.</param>
      <returns vsli:raw="A new array that contains &lt;paramref name=&quot;newValue&quot; /&gt; even if the new and old values are the same.">Новый массив, который содержит <paramref name="newValue" />, даже если старое и новое значения совпадают.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; is not found in the array.">
        <paramref name="oldValue" /> не найден в массиве.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">Заменяет элемент по заданному индексу указанным элементом.</summary>
      <param name="index" vsli:raw="The index of the item to replace.">Индекс заменяемого элемента.</param>
      <param name="value" vsli:raw="The value to add to the list.">Значение, которое нужно добавить в список.</param>
      <returns vsli:raw="The new array that contains &lt;paramref name=&quot;item&quot; /&gt; at the specified index.">Новый массив, который содержит элемент <paramref name="item" /> по указанному индексу.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary vsli:raw="Determines whether the current collection element precedes, occurs in the same position as, or follows another element in the sort order.">Определяет позицию текущего элемента коллекции относительно другого элемента в порядке сортировки (находится перед ним, на одной позиции с ним или после него).</summary>
      <param name="other" vsli:raw="The element to compare with the current instance.">Элемент для сравнения с текущим экземпляром.</param>
      <param name="comparer" vsli:raw="The object used to compare members of the current array with the corresponding members of other array.">Объект, который используется для сравнения элементов текущего массива с соответствующими элементами другого массива.</param>
      <returns vsli:raw="An integer that indicates whether the current element precedes, is in the same position or follows the other element.">Целое число, указывающее позицию текущего элемента относительно другого элемента (находится перед ним, на одной позиции с ним или после него).</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The arrays are not the same length.">Массивы не имеют одинаковую длину.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary vsli:raw="Determines whether this array is structurally equal to the specified array.">Определяет, соблюдается ли структурное равенство между исходным и указанным массивами.</summary>
      <param name="other" vsli:raw="The array to compare with the current instance.">Массив для сравнения с текущим экземпляром.</param>
      <param name="comparer" vsli:raw="An object that determines whether the current instance and other are structurally equal.">Объект, определяющий, соблюдается ли структурное равенство между текущим экземпляром и другим объектом.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two arrays are structurally equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если два массива структурно эквивалентны, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary vsli:raw="Returns a hash code for the current instance.">Возвращает хэш-код текущего экземпляра.</summary>
      <param name="comparer" vsli:raw="An object that computes the hash code of the current object.">Объект, вычисляющий хэш-код текущего объекта.</param>
      <returns vsli:raw="The hash code for the current instance.">Хэш-код для текущего экземпляра.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary vsli:raw="Creates a mutable array that has the same contents as this array and can be efficiently mutated across multiple operations using standard mutable interfaces.">Создает изменяемый массив, который содержит те же объекты, что и исходный, а также может эффективно изменяться различными операциями с использованием стандартных изменяемых интерфейсов.</summary>
      <returns vsli:raw="The new builder with the same contents as this array.">Новый построитель с тем же содержимым, что и исходный массив.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Содержит набор методов инициализации для экземпляров класса <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" />.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Determines whether the specified immutable dictionary contains the specified key/value pair.">Определяет, содержит ли неизменяемый словарь указанную пару "ключ-значение".</summary>
      <param name="map" vsli:raw="The immutable dictionary to search.">Неизменяемый словарь, в котором нужно выполнить поиск.</param>
      <param name="key" vsli:raw="The key to locate in the immutable dictionary.">Ключ, который нужно найти в неизменяемом словаре.</param>
      <param name="value" vsli:raw="The value to locate on the specified key, if the key is found.">Значение, которое нужно найти для указанного ключа, если он будет найден.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the immutable dictionary.">Тип ключей в неизменяемом словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the immutable dictionary.">Тип значений в неизменяемом словаре.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this map contains the specified key/value pair; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если эта карта содержит указанную пару "ключ-значение", в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable dictionary.">Создает пустой неизменяемый словарь.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Тип значений, которые хранятся в словаре.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Пустой неизменяемый словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key comparer.">Создает пустой неизменяемый словарь, который использует указанную функцию сравнения ключей.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Реализация, которую нужно использовать для определения равенства ключей в словаре.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Тип значений, которые хранятся в словаре.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Пустой неизменяемый словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable dictionary that uses the specified key and value comparers.">Создает пустой неизменяемый словарь, который использует указанные функции сравнения ключей и значений.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Реализация, которую нужно использовать для определения равенства ключей в словаре.</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">Реализация, которую нужно использовать для определения равенства значений в словаре.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Тип значений, которые хранятся в словаре.</typeparam>
      <returns vsli:raw="An empty immutable dictionary.">Пустой неизменяемый словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Создает новый построитель неизменяемых словарей.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Тип значений, которые хранятся в словаре.</typeparam>
      <returns vsli:raw="The new builder.">Новый построитель.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Создает новый построитель неизменяемых словарей.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Функция сравнения ключей.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Тип значений, которые хранятся в словаре.</typeparam>
      <returns vsli:raw="The new builder.">Новый построитель.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable dictionary builder.">Создает новый построитель неизменяемых словарей.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Функция сравнения ключей.</param>
      <param name="valueComparer" vsli:raw="The value comparer.">Функция сравнения значений.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Тип значений, которые хранятся в словаре.</typeparam>
      <returns vsli:raw="The new builder.">Новый построитель.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items.">Создает новый неизменяемый словарь, который содержит указанные элементы.</summary>
      <param name="items" vsli:raw="The items used to populate the dictionary before it's immutable.">Элементы, которыми нужно заполнить словарь, прежде чем он станет неизменяемым.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Тип значений в словаре.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items.">Новый неизменяемый словарь, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">Создает новый неизменяемый словарь, который содержит заданные элементы и использует указанную функцию сравнения ключей.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">Реализация функции сравнения, которую нужно использовать для проверки ключей на предмет равенства.</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">Элементы, которые нужно добавить в словарь, прежде чем он станет неизменяемым.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Тип значений в словаре.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">Новый неизменяемый словарь, который содержит заданные элементы и использует указанную функцию сравнения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.">Создает новый неизменяемый словарь, который содержит заданные элементы и использует указанную функцию сравнения ключей.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality.">Реализация функции сравнения, которую нужно использовать для проверки ключей на предмет равенства.</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">Реализация функции сравнения, которую нужно использовать для проверки значений на предмет равенства.</param>
      <param name="items" vsli:raw="The items to add to the dictionary before it's immutable.">Элементы, которые нужно добавить в словарь, прежде чем он станет неизменяемым.</param>
      <typeparam name="TKey" vsli:raw="The type of keys in the dictionary.">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the dictionary.">Тип значений в словаре.</typeparam>
      <returns vsli:raw="A new immutable dictionary that contains the specified items and uses the specified comparer.">Новый неизменяемый словарь, который содержит заданные элементы и использует указанную функцию сравнения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Возвращает значение для указанного ключа, если такой ключ есть в словаре.</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">Словарь, из которого нужно извлечь значение.</param>
      <param name="key" vsli:raw="The key to search for.">Ключ, который нужно найти.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Тип ключа.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">Тип значения.</typeparam>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">Значение для ключа или <c>default(TValue)</c>, если соответствующий ключ не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Возвращает значение для указанного ключа, если такой ключ есть в словаре.</summary>
      <param name="dictionary" vsli:raw="The dictionary to retrieve the value from.">Словарь, из которого нужно извлечь значение.</param>
      <param name="key" vsli:raw="The key to search for.">Ключ, который нужно найти.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">Значение по умолчанию, которое нужно вернуть, если в словаре не найден соответствующий ключ.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Тип ключа.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value.">Тип значения.</typeparam>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">Значение для ключа или <paramref name="defaultValue" />, если такой ключ не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary vsli:raw="Constructs an immutable dictionary from an existing collection of elements, applying a transformation function to the source keys.">Создает неизменяемый словарь на основе существующей коллекции элементов, применяя функцию преобразования к исходным ключам.</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">Исходная коллекция, используемая для создания неизменяемого словаря.</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">Функция, используемая для преобразования ключей для неизменяемого словаря.</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">Тип элементов исходной коллекции.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">Тип ключей в результирующем неизменяемом словаре.</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">Неизменяемый словарь, который содержит элементы из объекта <paramref name="source" /> и ключи которого получены с помощью функции преобразования <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Constructs an immutable dictionary based on some transformation of a sequence.">Создает неизменяемый словарь на основе последовательности, подвергнутой определенному преобразованию.</summary>
      <param name="source" vsli:raw="The source collection used to generate the immutable dictionary.">Исходная коллекция, используемая для создания неизменяемого словаря.</param>
      <param name="keySelector" vsli:raw="The function used to transform keys for the immutable dictionary.">Функция, используемая для преобразования ключей для неизменяемого словаря.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Функция сравнения ключей, которую нужно использовать в словаре.</param>
      <typeparam name="TSource" vsli:raw="The type of element in the source collection.">Тип элементов исходной коллекции.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of key in the resulting immutable dictionary.">Тип ключей в результирующем неизменяемом словаре.</typeparam>
      <returns vsli:raw="The immutable dictionary that contains elements from &lt;paramref name=&quot;source&quot; /&gt;, with keys transformed by applying &lt;paramref name=&quot;keySelector&quot; /&gt;.">Неизменяемый словарь, который содержит элементы из объекта <paramref name="source" /> и ключи которого получены с помощью функции преобразования <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents.">Выполняет перечисление последовательности пар "ключ-значение" и создает неизменяемый словарь на основе ее содержимого.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Последовательность пар "ключ-значение", для которой нужно выполнить перечисление.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Тип значений в словаре.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Неизменяемый словарь, который содержит пары "ключ-значение" в указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">Выполняет перечисление последовательности пар "ключ-значение" и создает на основе ее содержимого неизменяемый словарь с использованием указанной функции сравнения ключей.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Последовательность пар "ключ-значение", для которой нужно выполнить перечисление.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Функция сравнения ключей, которую нужно использовать при создании неизменяемого словаря.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Тип значений в словаре.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Неизменяемый словарь, который содержит пары "ключ-значение" в указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key and value comparers.">Выполняет перечисление последовательности пар "ключ-значение" и создает на основе ее содержимого неизменяемый словарь с использованием указанных функций сравнения ключей и значений.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Последовательность пар "ключ-значение", для которой нужно выполнить перечисление.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Функция сравнения ключей, которую нужно использовать при создании неизменяемого словаря.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">Функция сравнения значений, которую нужно использовать в неизменяемом словаре.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Тип значений в словаре.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the key/value pairs in the specified sequence.">Неизменяемый словарь, который содержит пары "ключ-значение" в указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable dictionary from the current contents of the builder's dictionary.">Создает неизменяемый словарь из текущего содержимого словаря построителя.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable dictionary from.">Построитель для создания неизменяемого словаря.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Тип значений в словаре.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the current contents in the builder's dictionary.">Неизменяемый словарь, содержащий текущее содержимое словаря построителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents.">Выполняет перечисление и преобразование последовательности и создает неизменяемый словарь на основе ее содержимого.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Последовательность, перечисление которой нужно выполнить для создания словаря.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Функция, которая создает ключ для словаря на основе каждого элемента последовательности.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Функция, которая создает значение для словаря на основе каждого элемента последовательности.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Тип элементов последовательности.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Тип ключей в результирующем словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Тип значений в результирующем словаре.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Неизменяемый словарь, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key comparer.">Выполняет перечисление и преобразование последовательности и создает на основе ее содержимого неизменяемый словарь с использованием указанной функции сравнения ключей.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Последовательность, перечисление которой нужно выполнить для создания словаря.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Функция, которая создает ключ для словаря на основе каждого элемента последовательности.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Функция, которая создает значение для словаря на основе каждого элемента последовательности.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Функция сравнения ключей, которую нужно использовать в словаре.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Тип элементов последовательности.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Тип ключей в результирующем словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Тип значений в результирующем словаре.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Неизменяемый словарь, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key and value comparers.">Выполняет перечисление и преобразование последовательности и создает на основе ее содержимого неизменяемый словарь с использованием указанных функций сравнения ключей и значений.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Последовательность, перечисление которой нужно выполнить для создания словаря.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Функция, которая создает ключ для словаря на основе каждого элемента последовательности.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Функция, которая создает значение для словаря на основе каждого элемента последовательности.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Функция сравнения ключей, которую нужно использовать в словаре.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">Функция сравнения значений, которую нужно использовать в словаре.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Тип элементов последовательности.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Тип ключей в результирующем словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Тип значений в результирующем словаре.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Неизменяемый словарь, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary vsli:raw="Represents an immutable, unordered collection of keys and values.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет неизменяемую неупорядоченную коллекцию ключей и значений.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Тип значений в словаре.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable dictionary.">Добавляет в неизменяемый словарь элемент с указанными ключом и значением.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Ключ добавляемого элемента.</param>
      <param name="value" vsli:raw="The value of the element to add.">Добавляемое значение элемента.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pair.">Новый неизменяемый словарь, который содержит добавленную пару "ключ-значение".</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">Данный ключ уже существует в словаре, но имеет другое значение.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specified key/value pairs to the immutable dictionary.">Добавляет в неизменяемый словарь указанные пары "ключ-значение".</summary>
      <param name="pairs" vsli:raw="The key/value pairs to add.">Пары "ключ-значение", которые нужно добавить.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Новый неизменяемый словарь, который содержит добавленные пары "ключ-значение".</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Один из указанных ключей уже существует в словаре, но имеет другое значение.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary vsli:raw="Represents a hash map that mutates with little or no memory allocations and that can produce or build on immutable hash map instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет хэш-карту, для изменения которой не требуется выделение памяти (или выделяется небольшой объем) и с помощью которой можно эффективно создавать или конструировать экземпляры неизменяемых хэш-карт.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable dictionary.">Добавляет в неизменяемый словарь элемент с указанными ключом и значением.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Ключ добавляемого элемента.</param>
      <param name="value" vsli:raw="The value of the element to add.">Добавляемое значение элемента.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">Параметр <paramref name="key" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the dictionary.">Элемент с таким ключом уже существует в словаре.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Словарь доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable dictionary.">Добавляет в неизменяемый словарь указанный элемент.</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">Объект, который нужно добавить в словарь.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Словарь доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to this collection.">Добавляет в коллекцию последовательность значений.</summary>
      <param name="items" vsli:raw="The items to add to this collection.">Элемент, который нужно добавить в коллекцию.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable dictionary.">Удаляет все элементы из неизменяемого словаря.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Словарь доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable dictionary contains a specific value.">Определяет, содержится ли в неизменяемом словаре указанное значение.</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">Объект, который нужно найти в словаре.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если элемент <paramref name="item" /> найден в словаре; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified key.">Определяет, содержится ли в неизменяемом словаре элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">Ключ, который нужно найти в словаре.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в словаре содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">Параметр <paramref name="key" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element that has the specified value.">Определяет, содержится ли в неизменяемом словаре элемент с указанным значением.</summary>
      <param name="value" vsli:raw="The value to locate in the immutable dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Значение, которое нужно найти в словаре. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в словаре содержится элемент с указанным значением; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable dictionary.">Возвращает количество элементов, содержащихся в неизменяемом словаре.</summary>
      <returns vsli:raw="The number of elements contained in the immutable dictionary.">Количество элементов, содержащихся в неизменяемом словаре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">Возвращает перечислитель, который выполняет перечисление элементов неизменяемого словаря.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Возвращает значение для указанного ключа, если такой ключ есть в словаре.</summary>
      <param name="key" vsli:raw="The key to search for.">Ключ, который нужно найти.</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">Значение для ключа или <c>default(TValue)</c>, если соответствующий ключ не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary.">Возвращает значение для указанного ключа, если такой ключ есть в словаре.</summary>
      <param name="key" vsli:raw="The key to search for.">Ключ, который нужно найти.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">Значение по умолчанию, которое нужно вернуть, если в словаре не найден соответствующий ключ.</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">Значение для ключа или <paramref name="defaultValue" />, если такой ключ не найден.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Возвращает или задает элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The element to get or set.">Ключ элемента, который нужно получить или установить.</param>
      <returns vsli:raw="The element that has the specified key.">Элемент с указанным ключом.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> — <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is being retrieved, and &lt;paramref name=&quot;key&quot; /&gt; is not found.">Свойство извлекается и объект <paramref name="key" /> не найден.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The property is being set, and the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">Свойство задается, и объект <see cref="T:System.Collections.Generic.IDictionary`2" /> доступен только для чтения.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Возвращает или задает функцию сравнения ключей.</summary>
      <returns vsli:raw="The key comparer.">Функция сравнения ключей.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a collection that contains the keys of the immutable dictionary.">Возвращает коллекцию, содержащую ключи неизменяемого словаря.</summary>
      <returns vsli:raw="A collection that contains the keys of the object that implements the immutable dictionary.">Коллекция ключей из объекта, который реализует неизменяемый словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Удаляет из неизменяемого словаря элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Ключ элемента, который требуется удалить.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the dictionary.">Значение <see langword="true" />, если элемент успешно удален; в противном случае — значение <see langword="false" />.  Этот метод также возвращает значение <see langword="false" />, если ключ <paramref name="key" /> не найден в словаре.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">Параметр <paramref name="key" /> имеет значение null.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Словарь доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable dictionary.">Удаляет первое вхождение указанного объекта из неизменяемого словаря.</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">Объект, который нужно удалить из словаря.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns false if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">Значение <see langword="true" />, если объект <paramref name="item" /> успешно удален из словаря; в противном случае — значение <see langword="false" />. Этот метод также возвращает значение false, если элемент <paramref name="item" /> не найден в словаре.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary is read-only.">Словарь доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable dictionary.">Удаляет все записи с ключами, которые соответствуют содержащимся в указанной последовательности неизменяемого словаря.</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">Ключи записей, которые нужно удалить из словаря.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, starting at the specified array index.">Копирует элементы словаря в массив типа <see cref="T:System.Collections.Generic.KeyValuePair`2" /> начиная с указанного индекса массива.</summary>
      <param name="array" vsli:raw="The one-dimensional array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Одномерный массив типа <see cref="T:System.Collections.Generic.KeyValuePair`2" />, в который копируются элементы из словаря. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Получает значение, определяющее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если доступ к классу <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Добавляет в объект словаря элемент с указанными ключом и значением.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Ключ добавляемого элемента.</param>
      <param name="value" vsli:raw="The value of the element to add.">Добавляемое значение элемента.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">Определяет, содержится ли в объекте словаря элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key to locate.">Искомый ключ.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в словаре содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Возвращает объект <see cref="T:System.Collections.IDictionaryEnumerator" /> для словаря.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Объект <see cref="T:System.Collections.IDictionaryEnumerator" /> для словаря.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Получает значение, указывающее, имеет ли объект <see cref="T:System.Collections.IDictionary" /> фиксированный размер.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если объект <see cref="T:System.Collections.IDictionary" /> имеет фиксированный размер, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Возвращает значение, которое определяет, является ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> доступной только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Возвращает или задает элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key.">Ключ.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Возвращает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">Удаляет из словаря элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Ключ элемента, который требуется удалить.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Возвращает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения из <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Объект перечислителя, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable dictionary based on the contents of this instance.">Создает неизменяемый словарь на основе содержимого исходного экземпляра.</summary>
      <returns vsli:raw="An immutable dictionary.">Неизменяемый словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Определяет, содержится ли в словаре указанный ключ.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Ключ, который нужно найти.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Соответствующий ключ, расположенный в словаре, если он найден, или <c>equalkey</c>, если совпадений нет.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если найдено совпадение для <paramref name="equalKey" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Returns the value associated with the specified key.">Возвращает значение, связанное с указанным ключом.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Ключ, значение которого нужно получить.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, returns the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">При возврате из метода содержит значение, связанное с указанным ключом, если он найден; в противном случае — значение по умолчанию для типа параметра <paramref name="value" />. Этот параметр передается неинициализированным.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объект, реализующий неизменяемый словарь, содержит элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">Параметр <paramref name="key" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">Возвращает или устанавливает функцию сравнения значений.</summary>
      <returns vsli:raw="The value comparer.">Функция сравнения значений.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable dictionary.">Возвращает коллекцию, содержащую значения неизменяемого словаря.</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">Коллекция значений из объекта, который реализует словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Возвращает пустой неизменяемый словарь с теми же правилами упорядочения элементов и сравнения ключей и значений, что и в исходном экземпляре словаря.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Пустой словарь с такими же правилами упорядочения элементов и сравнения ключей и значений.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable dictionary contains the specified key/value pair.">Определяет, содержит ли неизменяемый словарь указанные пары "ключ-значение".</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">Пара "ключ-значение", которую нужно найти.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если указанная пара "ключ-значение" найдена в словаре; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified key.">Определяет, содержится ли в неизменяемом словаре элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key to locate.">Искомый ключ.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в неизменяемом словаре содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable dictionary contains an element with the specified value.">Определяет, содержится ли в неизменяемом словаре элемент с указанным значением.</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Значение, которое нужно найти. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в словаре содержится элемент с указанным значением; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable dictionary.">Возвращает количество пар "ключ-значение" в неизменяемом словаре.</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">Количество пар "ключ-значение" в словаре.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable dictionary.">Возвращает пустой неизменяемый словарь.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable dictionary without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Выполняет перечисление содержимого неизменяемого словаря без выделения дополнительной памяти.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns vsli:raw="The element in the dictionary at the current position of the enumerator.">Элемент словаря, расположенный в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator&quot; /&gt; class.">Освобождает ресурсы, используемые текущим экземпляром класса <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable dictionary.">Перемещает перечислитель к следующему элементу неизменяемого словаря.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the dictionary.">Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца словаря.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">После создания перечислителя словарь был изменен.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the dictionary.">Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом словаря.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The dictionary was modified after the enumerator was created.">После создания перечислителя словарь был изменен.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">Получает текущий элемент.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable dictionary.">Возвращает перечислитель, который выполняет перечисление элементов неизменяемого словаря.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Перечислитель, который можно использовать для перечисления элементов словаря.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable dictionary is empty.">Возвращает значение, указывающее, является ли пустым этот экземпляр неизменяемого словаря.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если этот экземпляр пуст; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">Возвращает значение <paramref name="TValue" />, связанное с указанным ключом.</summary>
      <param name="key" vsli:raw="The type of the key.">Тип ключа.</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">Значение, связанное с указанным ключом. Если поиск не вернул результатов, операция вызывает исключение.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable dictionary.">Возвращает функцию сравнения ключей для неизменяемого словаря.</summary>
      <returns vsli:raw="The key comparer.">Функция сравнения ключей.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable dictionary.">Возвращает ключи в неизменяемом словаре.</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">Ключи в неизменяемом словаре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary.">Удаляет из неизменяемого словаря элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Ключ элемента, который требуется удалить.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.">Новый неизменяемый словарь, из которого удален указанный элемент, либо исходный экземпляр, если найти в нем указанный ключ не удалось.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable dictionary.">Удаляет из неизменяемого словаря элементы с указанными ключами.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">Ключи элементов, которые нужно удалить.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Новый неизменяемый словарь, из которого удалены указанные ключи, либо исходный экземпляр, если найти в нем ключи не удалось.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.">Устанавливает в неизменяемом словаре пару "ключ-значение" с возможной перезаписью существующего значения для данного ключа.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Ключ записи, которую требуется добавить.</param>
      <param name="value" vsli:raw="The key value to set.">Значение ключа, которое нужно установить.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pair.">Новый неизменяемый словарь, который содержит указанную пару "ключ-значение".</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.">Устанавливает в неизменяемом словаре указанные пары "ключ-значение" с возможной перезаписью существующих значений для данных ключей.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Пары "ключ-значение", которые нужно установить в словаре. Если какой-то из ключей уже существует в словаре, этот метод перезапишет его текущее значение.</param>
      <returns vsli:raw="A new immutable dictionary that contains the specified key/value pairs.">Новый неизменяемый словарь, который содержит указанные пары "ключ-значение".</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The type of the key." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">Копирует элементы из словаря в массив начиная с определенного индекса в массиве.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Одномерный массив, в который копируются элементы словаря. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Возвращает значение, показывающее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если доступ к классу <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the immutable dictionary object.">Добавляет в объект неизменяемого словаря элемент с указанными ключом и значением.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">Объект, используемый в качестве ключа добавляемого элемента.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">Объект, используемый в качестве значения добавляемого элемента.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">Очищает данный экземпляр.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">Объект словаря доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">Определяет, содержится ли в объекте неизменяемого словаря элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">Ключ, который нужно найти в объекте словаря.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в словаре содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">Возвращает объект <see cref="T:System.Collections.IDictionaryEnumerator" /> для объекта неизменяемого словаря.</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">Объект перечислителя для объекта словаря.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Получает значение, показывающее, имеет ли объект <see cref="T:System.Collections.IDictionary" /> фиксированный размер.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если объект <see cref="T:System.Collections.IDictionary" /> имеет фиксированный размер, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Получает значение, указывающее, является ли объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступным только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Возвращает или задает элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key.">Ключ.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Возвращает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">Удаляет из объекта неизменяемого словаря элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Ключ элемента, который требуется удалить.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Возвращает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения из <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Объект перечислителя, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added to the dictionary." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of the entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="The key-value pairs to set on the map. Any keys that conflict with existing keys will replace the previous values." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Создает неизменяемый словарь, который содержит те же объекты, что и исходный словарь, а также может эффективно изменяться различными операциями с использованием стандартных изменяемых интерфейсов.</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Коллекция, которая содержит те же объекты, что и исходный словарь, а также может эффективно изменяться различными операциями с использованием стандартных изменяемых интерфейсов.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Определяет, содержится ли в словаре указанный ключ.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Ключ, который нужно найти.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Соответствующий ключ, расположенный в словаре, если он найден, или <c>equalkey</c>, если совпадений нет.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если найдено совпадение для <paramref name="equalKey" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Получает значение, связанное с заданным ключом.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Ключ, значение которого нужно получить.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">При возврате из метода содержит значение, связанное с указанным ключом, если он найден; в противном случае — значение по умолчанию для типа параметра <paramref name="value" />. Этот параметр передается неинициализированным.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объект, реализующий словарь, содержит элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is null.">Параметр <paramref name="key" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">Возвращает функцию сравнения значений, которая используется для определения их равенства.</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">Функция сравнения значений, которая используется для определения их равенства.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable dictionary.">Возвращает значения в неизменяемом словаре.</summary>
      <returns vsli:raw="The values in the immutable dictionary.">Значения в неизменяемом словаре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key comparer.">Возвращает экземпляр неизменяемого словаря, который использует указанную функцию сравнения ключей.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Функция сравнения ключей, которую нужно использовать.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">Экземпляр неизменяемого словаря, который использует указанную функцию сравнения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable dictionary that uses the specified key and value comparers.">Возвращает экземпляр неизменяемого словаря, который использует указанные функции сравнения ключей и значений.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Функция сравнения ключей, которую нужно использовать.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">Функция сравнения значений, которую нужно использовать.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">Экземпляр неизменяемого словаря, который использует указанные функцию сравнения.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Содержит набор методов инициализации для экземпляров класса <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary vsli:raw="Creates an empty immutable hash set.">Создает пустой неизменяемый набор хэширования.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable hash set.">Тип элементов, которые хранятся в неизменяемом наборе хэширования.</typeparam>
      <returns vsli:raw="An empty immutable hash set.">Пустой неизменяемый набор хэширования.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item.">Создает новый неизменяемый набор хэширования, который содержит указанный элемент.</summary>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">Элемент, которым нужно заполнить набор хэширования.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Тип элементов неизменяемого набора хэширования.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">Новый неизменяемый набор хэширования, который содержит указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified array of items.">Создает новый неизменяемый набор хэширования, который содержит указанный массив элементов.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">Массив элементов, которыми нужно заполнить набор хэширования.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Тип элементов неизменяемого набора хэширования.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">Новый неизменяемый набор хэширования, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates an empty immutable hash set that uses the specified equality comparer.">Создает пустой неизменяемый набор хэширования, который использует указанную функцию сравнения на равенство.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Объект, который нужно использовать для проверки элементов набора на равенство.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Тип элементов неизменяемого набора хэширования.</typeparam>
      <returns vsli:raw="An empty immutable hash set.">Пустой неизменяемый набор хэширования.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified item and uses the specified equality comparer for the set type.">Создает новый неизменяемый набор хэширования, который содержит указанный элемент и использует указанную функцию сравнения для типа набора.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Объект, который нужно использовать для проверки элементов набора на равенство.</param>
      <param name="item" vsli:raw="The item to prepopulate the hash set with.">Элемент, которым нужно заполнить набор хэширования.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable hash set.">Тип элементов неизменяемого набора хэширования.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified item.">Новый неизменяемый набор хэширования, который содержит указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable hash set that contains the items in the specified collection and uses the specified equality comparer for the set type.">Создает новый неизменяемый набор хэширования, который содержит элементы указанной коллекции и использует указанную функцию сравнения для типа набора.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Объект, который нужно использовать для проверки элементов набора на равенство.</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the hash set with.">Массив элементов, которыми нужно заполнить набор хэширования.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable hash set.">Тип элементов, которые хранятся в неизменяемом наборе хэширования.</typeparam>
      <returns vsli:raw="A new immutable hash set that contains the specified items.">Новый неизменяемый набор хэширования, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable hash set builder.">Создает новый построитель неизменяемых наборов хэширования.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns vsli:raw="The immutable hash set builder.">Построитель неизменяемых наборов хэширования.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a new immutable hash set builder.">Создает новый построитель неизменяемых наборов хэширования.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Объект, который нужно использовать для проверки элементов набора на равенство.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns vsli:raw="The new immutable hash set builder.">Новый построитель неизменяемых наборов хэширования.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set prefilled with the specified items.">Создает новый неизменяемый набор хэширования, заполненный указанными элементами.</summary>
      <param name="items" vsli:raw="The items to add to the hash set.">Элементы, которые нужно добавить в набор хэширования.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns vsli:raw="The new immutable hash set that contains the specified items.">Новый неизменяемый набор хэширования, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable hash set that contains the specified items and uses the specified equality comparer for the set type.">Создает новый неизменяемый набор хэширования, который содержит указанные элементы и использует указанную функцию сравнения для типа набора.</summary>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Объект, который нужно использовать для проверки элементов набора на равенство.</param>
      <param name="items" vsli:raw="The items add to the collection before immutability is applied.">Элементы, которые нужно добавить в коллекцию, прежде чем она станет неизменяемой.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the collection.">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns vsli:raw="The new immutable hash set.">Новый неизменяемый набор хэширования.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable hash set of its contents.">Выполняет перечисление последовательности и создает неизменяемый набор хэширования на основе ее содержимого.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Перебираемая последовательность.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Тип элементов последовательности.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence.">Неизменяемый набор хэширования, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable hash set of its contents, and uses the specified equality comparer for the set type.">Выполняет перечисление последовательности, создает неизменяемый набор хэширования на основе ее содержимого и использует указанную функцию сравнения для типа набора.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Перебираемая последовательность.</param>
      <param name="equalityComparer" vsli:raw="The object to use for comparing objects in the set for equality.">Объект, который нужно использовать для проверки элементов набора на равенство.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Тип элементов последовательности.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the items in the specified sequence and uses the specified equality comparer.">Неизменяемый набор хэширования, который содержит элементы указанной последовательности и использует указанную функцию сравнения на равенство.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable hash set from the current contents of the builder's set.">Создает неизменяемый набор хэша из текущего содержимого набора построителя.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable hash set from.">Построитель для создания неизменяемого набора хэша.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the hash set.">Тип элементов в наборе хэширования.</typeparam>
      <returns vsli:raw="An immutable hash set that contains the current contents in the builder's set.">Неизменяемый набор хэша, содержащий текущее содержимое набора построителя.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary vsli:raw="Represents an immutable, unordered hash set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет неизменяемый неупорядоченный набор хэширования.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the hash set.">Тип элементов в коллекции.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to the hash set.">Добавляет в набор хэширования указанный элемент.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Элемент, добавляемый в набор.</param>
      <returns vsli:raw="A hash set that contains the added value and any values previously held by the  &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt; object.">Набор хэширования, который содержит добавленное значение и все значения, которые ранее содержались в объекте <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary vsli:raw="Represents a hash set that mutates with little or no memory allocations and that can produce or build on immutable hash set instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет набор хэширования, для изменения которого не требуется выделение памяти (или выделяется небольшой объем) и с помощью которого можно эффективно создавать или конструировать экземпляры неизменяемых наборов хэширования.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable hash set.">Добавляет указанный элемент в неизменяемый набор хэширования.</summary>
      <param name="item" vsli:raw="The item to add.">Добавляемый элемент.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item did not already belong to the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если элемент не входил в состав коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable hash set.">Удаляет все элементы из неизменяемого набора хэширования.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The hash set is read-only.">Набор хэширования доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable hash set contains a specific value.">Определяет, содержит ли список неизменяемый набор хэширования указанное значение.</summary>
      <param name="item" vsli:raw="The object to locate in the hash set.">Объект, который нужно найти в наборе хэширования.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the hash set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если элемент <paramref name="item" /> найден в наборе хэширования; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements contained in the immutable hash set.">Возвращает количество элементов, содержащихся в неизменяемом наборе хэширования.</summary>
      <returns vsli:raw="The number of elements contained in the immutable hash set.">Количество элементов, содержащихся в неизменяемом наборе хэширования.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current hash set.">Удаляет все элементы указанной коллекции из текущего набора хэширования.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">Коллекция элементов, удаляемых из набора.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable hash set.">Возвращает перечислитель, который выполняет перечисление элементов неизменяемого набора хэширования.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Перечислитель, который можно использовать для перечисления элементов набора.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Изменяет текущий набор, чтобы он содержал только элементы, которые также имеются в заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">Определяет, является ли текущий набор должным (строгим) подмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является строгим подмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">Определяет, является ли текущий набор должным (строгим) подмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является строгим надмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">Определяет, является ли текущий набор подмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является подмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">Определяет, является ли текущий набор надмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является надмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Возвращает или задает функцию сравнения ключей.</summary>
      <returns vsli:raw="The key comparer.">Функция сравнения ключей.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">Определяет, пересекаются ли текущий набор и указанная коллекция.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в текущем наборе и объекте <paramref name="other" /> есть хотя бы один общий элемент; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable hash set.">Удаляет первое вхождение указанного объекта из неизменяемого набора хэширования.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">Объект, который нужно удалить из набора.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the set ; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original set.">Значение <see langword="true" />, если объект <paramref name="item" /> успешно удален из набора; в противном случае — значение <see langword="false" />. Этот метод также возвращает значение <see langword="false" />, если объект <paramref name="item" /> не найден в исходном наборе.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">Набор доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">Определяет, содержат ли текущий набор и указанная коллекция одни и те же элементы.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор совпадает с коллекцией <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Изменяет текущий набор таким образом, чтобы он содержал только элементы, которые есть либо в нем, либо в указанной коллекции, но не одновременно там и там.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the hash set.">Добавляет элемент в набор хэширования.</summary>
      <param name="item" vsli:raw="The object to add to the set.">Объект, который нужно добавить в набор.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">Набор доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the hash set to an array, starting at a particular array index.">Копирует элементы из набора хэширования в массив начиная с определенного индекса массива.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the hash set. The array must have zero-based indexing.">Одномерный массив, в который будут скопированы элементы из набора хэширования. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Получает значение, указывающее, является ли объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступным только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable hash set based on the contents of this instance.">Создает неизменяемый набор хэширования на основе содержимого исходного экземпляра.</summary>
      <returns vsli:raw="An immutable set.">Неизменяемый набор.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">Изменяет текущий набор таким образом, чтобы он содержал все элементы, которые есть и в нем, и в указанной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary vsli:raw="Retrieves an empty immutable hash set that has the same sorting and ordering semantics as this instance.">Возвращает пустой неизменяемый набор хэширования с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</summary>
      <returns vsli:raw="An empty hash set that has the same sorting and ordering semantics as this instance.">Пустой набор хэширования с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable hash set contains the specified element.">Определяет, содержит ли неизменяемый набор хэширования указанный элемент.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable hash set.">Объект, который нужно найти в неизменяемом наборе хэширования.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если параметр <paramref name="item" /> найден в коллекции <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable hash set.">Возвращает количество элементов в неизменяемом наборе хэширования.</summary>
      <returns vsli:raw="The number of elements in the hash set.">Количество элементов в наборе хэширования.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary vsli:raw="Gets an immutable hash set for this type that uses the default &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Возвращает неизменяемый набор хэширования для этого типа, который использует <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> по умолчанию.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of the immutable hash set without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Выполняет перечисление содержимого неизменяемого набора хэширования без выделения дополнительной памяти.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Элемент, расположенный в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator&quot; /&gt; class.">Освобождает ресурсы, используемые текущим экземпляром класса <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable hash set.">Перемещает перечислитель к следующему элементу неизменяемого набора хэширования.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the hash set.">Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца набора хэширования.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">После создания перечислителя набор хэширования был изменен.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the hash set.">Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом набора хэширования.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The hash set was modified after the enumerator was created.">После создания перечислителя набор хэширования был изменен.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the current element.">Получает текущий элемент.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable hash set.">Удаляет из текущего неизменяемого набора хэширования все элементы указанной коллекции.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">Коллекция элементов, удаляемых из набора.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Новый набор, из которого удалены указанные элементы, или исходный набор, если таких элементов в нем не было.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains elements that exist in both this set and the specified set.">Создает неизменяемый набор хэширования, который содержит элементы, существующие как в исходном, так и в указанном наборах.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Новый неизменяемый набор, который содержит все элементы, существующие в обоих наборах.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the current immutable hash set is empty.">Возвращает значение, указывающее, является ли пустым текущий неизменяемый набор хэширования.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если этот экземпляр пуст; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) subset of a specified collection.">Определяет, является ли текущий неизменяемый набор хэширования должным (строгим) подмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является строгим подмножеством указанной коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a proper (strict) superset of a specified collection.">Определяет, является ли текущий набор должным (строгим) надмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является строгим надмножеством указанной коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a subset of a specified collection.">Определяет, является ли текущий неизменяемый набор хэширования подмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является подмножеством указанной коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set is a superset of a specified collection.">Определяет, является ли текущий неизменяемый набор хэширования надмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of the specified collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является надмножеством указанной коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary vsli:raw="Gets the object that is used to obtain hash codes for the keys and to check the equality of values in the immutable hash set.">Возвращает объект, который используется для получения хэш-кодов ключей и для проверки равенства значений в неизменяемом наборе хэширования.</summary>
      <returns vsli:raw="The comparer used to obtain hash codes for the keys and check equality.">Функция сравнения, которая используется для получения хэш-кодов ключей и проверки равенства.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set overlaps with the specified collection.">Определяет, пересекаются ли текущий неизменяемый набор хэширования и указанная коллекция.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and the specified collection share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в текущем наборе и указанной коллекции есть хотя бы один общий элемент; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable hash set.">Удаляет указанный элемент из неизменяемого набора хэширования.</summary>
      <param name="item" vsli:raw="The element to remove.">Подлежащий удалению элемент.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Новый набор, из которого удален указанный элемент, или текущий набор, если элемент в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable hash set and the specified collection contain the same elements.">Определяет, содержат ли текущий неизменяемый набор хэширования и указанная коллекция одни и те же элементы.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если наборы равны, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable hash set that contains only elements that are present either in the current set or in the specified collection, but not both.">Создает неизменяемый набор хэширования, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Новый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to the set.">Добавляет элемент в набор.</summary>
      <param name="item" vsli:raw="The object to add to the set.">Объект, который нужно добавить в набор.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">Набор доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from this set.">Удаляет все элементы из этого набора.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only.">Набор доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">Копирует элементы из набора в массив начиная с определенного индекса.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Одномерный массив, в который копируются элементы из набора. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">См. интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">Удаляет из набора первый экземпляр указанного объекта.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">Объект, который нужно удалить из набора.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если элемент успешно удален; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns vsli:raw="An enumerator that iterates through the collection.">Перечислитель, который выполняет перечисление элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value that indicates whether the element was successfully added.">Добавляет элемент в текущий набор и возвращает значение, указывающее, что элемент был добавлен успешно.</summary>
      <param name="item" vsli:raw="The element to add to the collection.">Элемент, который нужно добавить в коллекцию.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">Значение <see langword="true" />, если элемент добавлен в набор; значение <see langword="false" />, если элемент уже был в наборе.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">Удаляет все элементы указанной коллекции из текущего набора.</summary>
      <param name="other" vsli:raw="The collection of items to remove.">Коллекция элементов, которые нужно удалить.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Изменяет текущий набор, чтобы он содержал только элементы, которые также имеются в заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current collection.">Коллекция для сравнения с текущей коллекцией.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Изменяет текущий набор таким образом, чтобы он содержал только элементы, которые есть либо в нем, либо в указанной коллекции, но не одновременно там и там.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or in the specified collection.">Изменяет текущий набор, чтобы он содержал все элементы, которые имеются как в текущем наборе, так и в указанной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular index.">Копирует элементы из набора в массив начиная с определенного индекса.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Одномерный массив, в который копируются элементы из набора. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">См. интерфейс <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">См. раздел <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a set.">Возвращает перечислитель, который выполняет перечисление элементов набора.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Перечислитель, который можно использовать для перечисления элементов набора.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Добавляет в неизменяемый набор указанный элемент.</summary>
      <param name="item" vsli:raw="The element to add.">Добавляемый элемент.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Новый набор, в который добавлен указанный элемент, или исходный набор, если элемент уже присутствует в нем.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty set that has the same sorting and ordering semantics as this instance.">Возвращает пустой набор с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</summary>
      <returns vsli:raw="An empty set that has the same sorting or ordering semantics as this instance.">Пустой набор с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current set.">Удаляет элементы указанной коллекции из текущего набора.</summary>
      <param name="other" vsli:raw="The collection of items to remove from this set.">Коллекция элементов, удаляемых из набора.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Новый набор, из которого удалены указанные элементы, или исходный набор, если таких элементов в нем не было.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">Создает неизменяемый набор, который содержит элементы, существующие как в исходном, так и в указанном наборах.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Новый неизменяемый набор, который содержит все элементы, существующие в обоих наборах.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Удаляет указанный элемент из неизменяемого набора.</summary>
      <param name="item" vsli:raw="The element to remove.">Подлежащий удалению элемент.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Новый набор, из которого удален указанный элемент, или текущий набор, если элемент в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Создает неизменяемый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Новый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Создает новый неизменяемый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Коллекция, из которой нужно добавить элементы.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Новый неизменяемый набор, в который добавлены элементы, или исходный набор, если все элементы уже есть в нем.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary vsli:raw="Creates an immutable hash set that has the same contents as this set and can be efficiently mutated across multiple operations by using standard mutable interfaces.">Создает неизменяемый набор хэширования, который содержит те же объекты, что и исходный набор, а также может эффективно изменяться различными операциями с использованием стандартных изменяемых интерфейсов.</summary>
      <returns vsli:raw="A set with the same contents as this set that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Набор, которая содержит те же объекты, что и исходный набор, а также может эффективно изменяться различными операциями с использованием стандартных изменяемых интерфейсов.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Выполняет поиск указанного значения в наборе и возвращает равное ему значение, если его удалось найти.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">Значение, которое нужно найти.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">Значение, найденное в наборе, либо исходное значение, если поиск не вернул результатов.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Значение, указывающее, успешно ли был выполнен поиск.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable hash set that contains all elements that are present in either the current set or in the specified collection.">Создает новый неизменяемый набор хэширования, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Коллекция, из которой нужно добавить элементы.</param>
      <returns vsli:raw="A new immutable hash set with the items added; or the original set if all the items were already in the set.">Новый неизменяемый набор хэширования, в который добавлены элементы, или исходный набор, если все элементы уже есть в нем.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable hash set that uses the specified equality comparer for its search methods.">Возвращает экземпляр неизменяемого набора хэширования, который использует указанную функцию сравнения на равенство в методах поиска.</summary>
      <param name="equalityComparer" vsli:raw="The equality comparer to use.">Функция сравнения на равенство, которую нужно использовать.</param>
      <returns vsli:raw="An instance of this immutable hash set that uses the given comparer.">Экземпляр неизменяемого набора хэширования, который использует указанную функцию сравнения.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary vsli:raw="Contains interlocked exchange mechanisms for immutable collections.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Содержит механизмы обмена с взаимоблокировкой для неизменяемых коллекций.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">Возвращает значение из словаря после добавления или изменения существующей записи.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">Переменная или поле, которые нужно обновить атомарным образом, если указанного элемента нет в словаре.</param>
      <param name="key" vsli:raw="The key for the value to add or update.">Ключ для значения, которое нужно добавить или обновить.</param>
      <param name="addValue" vsli:raw="The value to use if no previous value exists.">Значение, которое нужно использовать, если предыдущего значения не существует.</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">Функция, получающая ключ и предыдущее значение и возвращающая новое значение, которым нужно обновить словарь.</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">Тип ключа, хранящегося в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">Тип значения, хранящегося в словаре.</typeparam>
      <returns vsli:raw="The added or updated value.">Добавленное или обновленное значение.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary vsli:raw="Obtains the value from a dictionary after having added it or updated an existing entry.">Возвращает значение из словаря после добавления или изменения существующей записи.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">Переменная или поле, которые нужно обновить атомарным образом, если указанного элемента нет в словаре.</param>
      <param name="key" vsli:raw="The key for the value to add or update.">Ключ для значения, которое нужно добавить или обновить.</param>
      <param name="addValueFactory" vsli:raw="The function that receives the key and returns a new value to add to the dictionary when no value previously exists.">Функция, получающая ключ и возвращающая новое значение, которое нужно добавить в словарь, если такого значения в нем нет.</param>
      <param name="updateValueFactory" vsli:raw="The function that receives the key and prior value and returns the new value with which to update the dictionary.">Функция, получающая ключ и предыдущее значение и возвращающая новое значение, которым нужно обновить словарь.</param>
      <typeparam name="TKey" vsli:raw="The type of key stored by the dictionary.">Тип ключа, хранящегося в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of value stored by the dictionary.">Тип значения, хранящегося в словаре.</typeparam>
      <returns vsli:raw="The added or updated value.">Добавленное или обновленное значение.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary vsli:raw="Atomically enqueues an element to the end of a queue.">Атомарным образом добавляет элемент в конец очереди.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">Переменная или поле, которые нужно обновить атомарным образом.</param>
      <param name="value" vsli:raw="The value to enqueue.">Значение, которое нужно добавить в очередь.</param>
      <typeparam name="T" vsli:raw="The type of items contained in the collection.">Тип элементов коллекции.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Возвращает из словаря значение для указанного ключа или добавляет в него новое значение, если такой ключ не найден.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified key is not in the dictionary.">Переменная или поле, которые нужно обновить атомарным образом, если указанного ключа нет в словаре.</param>
      <param name="key" vsli:raw="The key for the value to get or add.">Ключ для значения, которое нужно получить или добавить.</param>
      <param name="value" vsli:raw="The value to add to the dictionary the key is not found.">Значение, которое нужно добавить в словарь, если ключ не найден.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Тип ключей в коллекции.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Тип значений в коллекции.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">Значение по указанному ключу или <paramref name="valueFactory" />, если ключ не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Возвращает из словаря значение для указанного ключа или добавляет в него новое значение, если такой ключ не найден.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update if the specified  is not in the dictionary.">Переменная или поле, которые нужно обновить атомарным образом, если указанного элемента нет в словаре.</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">Ключ значения, которое нужно получить или добавить.</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found. This delegate will not be invoked more than once.">Функция, выполняемая для получения значения, которое нужно вставить в словарь, если ключ не найден. Этот делегат будет вызван не больше одного раза.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Тип ключей в коллекции.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Тип значений в коллекции.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">Значение по указанному ключу или <paramref name="valueFactory" />, если ключ не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary vsli:raw="Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.">Возвращает из словаря значение для указанного ключа или добавляет в него новое значение, если такой ключ не найден.</summary>
      <param name="location" vsli:raw="The variable or field to update if the specified is not in the dictionary.">Переменная или поле, которые нужно обновить, если указанного элемента нет в словаре.</param>
      <param name="key" vsli:raw="The key for the value to retrieve or add.">Ключ значения, которое нужно получить или добавить.</param>
      <param name="valueFactory" vsli:raw="The function to execute to obtain the value to insert into the dictionary if the key is not found.">Функция, выполняемая для получения значения, которое нужно вставить в словарь, если ключ не найден.</param>
      <param name="factoryArgument" vsli:raw="The argument to pass to the value factory.">Аргумент, передаваемый фабрике значений.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Тип ключей в коллекции.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Тип значений в коллекции.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of the argument supplied to the value factory.">Тип аргумента, переданного в фабрику значений.</typeparam>
      <returns vsli:raw="The value at the specified key or &lt;paramref name=&quot;valueFactory&quot; /&gt; if the key was not present.">Значение по указанному ключу или <paramref name="valueFactory" />, если ключ не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.">Проверяет два неизменяемых массива на равенство и, если они равны, заменяет один из них.</summary>
      <param name="location" vsli:raw="The destination, whose value is compared with &lt;paramref name=&quot;comparand&quot; /&gt; and possibly replaced.">Целевой объект, который нужно сравнить с объектом <paramref name="comparand" /> и, возможно, заменить.</param>
      <param name="value" vsli:raw="The value that replaces the destination value if the comparison results in equality.">Значение, которым будет заменено целевое значение, если проверка покажет равенство.</param>
      <param name="comparand" vsli:raw="The value that is compared to the value at &lt;paramref name=&quot;location&quot; /&gt;.">Значение, которое сравнивается со значением в позиции <paramref name="location" />.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns vsli:raw="The original value in &lt;paramref name=&quot;location&quot; /&gt;.">Исходное значение в позиции <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array and returns a reference to the original array, as an atomic operation.">Задает для массива значение указанного массива и возвращает ссылку на исходный массив (вся операция выполняется атомарным образом).</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">Массив, для которого нужно задать указанное значение.</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set.">Значение, которое задается для параметра <paramref name="location" />.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns vsli:raw="The original value of &lt;paramref name=&quot;location&quot; /&gt;.">Исходное значение <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Sets an array to the specified array if the array has not been initialized.">Задает для массива значение указанного массива, если он не инициализирован.</summary>
      <param name="location" vsli:raw="The array to set to the specified value.">Массив, для которого нужно задать указанное значение.</param>
      <param name="value" vsli:raw="The value to which the &lt;paramref name=&quot;location&quot; /&gt; parameter is set, if it's not initialized.">Значение, которое задается для параметра <paramref name="location" />, если он не инициализирован.</param>
      <typeparam name="T" vsli:raw="The type of element stored by the array.">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array was assigned the specified value;  otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если массиву было присвоено указанное значение; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary vsli:raw="Pushes a new element onto the stack.">Помещает в стек новый элемент.</summary>
      <param name="location" vsli:raw="The stack to update.">Стек, в который вносятся изменения.</param>
      <param name="value" vsli:raw="The value to push on the stack.">Значение, которое нужно поместить в стек.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">Тип элементов стека.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary vsli:raw="Adds the specified key and value to the dictionary if the key is not in the dictionary.">Добавляет в словарь указанные ключ и значение, если такого ключа нет в словаре.</summary>
      <param name="location" vsli:raw="The dictionary to update with the specified key and value.">Словарь, который нужно обновить с использованием указанных ключа и значения.</param>
      <param name="key" vsli:raw="The key to add, if is not already defined in the dictionary.">Ключ, который нужно добавить, если он еще не определен в словаре.</param>
      <param name="value" vsli:raw="The value to add.">Значение для сложения.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Тип ключей в коллекции.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Тип значений в коллекции.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is not in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если ключа нет в словаре; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary vsli:raw="Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.">Атомарным образом удаляет и возвращает указанный элемент в голове очереди, если она не пуста.</summary>
      <param name="location" vsli:raw="The variable or field to atomically update.">Переменная или поле, которые нужно обновить атомарным образом.</param>
      <param name="value" vsli:raw="Set to the value from the head of the queue, if the queue not empty.">Устанавливает значение в голове очереди, если она не пуста.</param>
      <typeparam name="T" vsli:raw="The type of items in the queue.">Тип элементов очереди.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the queue is not empty and the head element is removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если очередь не пуста и из ее головы удален элемент; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary vsli:raw="Removes an element from the top of the stack, if there is an element to remove.">Удаляет верхний элемент стека, если в нем есть элементы для удаления.</summary>
      <param name="location" vsli:raw="The stack to update.">Стек, в который вносятся изменения.</param>
      <param name="value" vsli:raw="Receives the value removed from the stack, if the stack is not empty.">Получает значение, удаленное из стека, если стек не пуст.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">Тип элементов стека.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element is removed from the stack; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если элемент удален из стека; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary vsli:raw="Removes the element with the specified key, if the key exists.">Удаляет элемент с указанным ключом, если такой ключ существует.</summary>
      <param name="location" vsli:raw="The dictionary to update.">Обновляемый словарь.</param>
      <param name="key" vsli:raw="The key to remove.">Удаляемый ключ.</param>
      <param name="value" vsli:raw="Receives the value of the removed item, if the dictionary is not empty.">Получает значение удаленного элемента, если словарь не пуст.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Тип ключей в коллекции.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Тип значений в коллекции.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key was found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если ключ найден и удален; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary vsli:raw="Sets the specified key to the specified value if the specified key already is set to a specific value.">Устанавливает для указанного ключа заданное значение, если для него еще не установлено определенное значение.</summary>
      <param name="location" vsli:raw="The dictionary to update.">Обновляемый словарь.</param>
      <param name="key" vsli:raw="The key to update.">Обновляемый ключ.</param>
      <param name="newValue" vsli:raw="The new value to set.">Устанавливаемое новое значение.</param>
      <param name="comparisonValue" vsli:raw="The current value for &lt;paramref name=&quot;key&quot; /&gt; in order for the update to succeed.">Текущее значение для ключа <paramref name="key" />, чтобы операция была успешно выполнена.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys contained in the collection.">Тип ключей в коллекции.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values contained in the collection.">Тип значений в коллекции.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; and &lt;paramref name=&quot;comparisonValue&quot; /&gt; are present in the dictionary and comparison was updated to &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в словаре есть ключ <paramref name="key" /> и значение <paramref name="comparisonValue" /> и для него было задано новое значение <paramref name="newValue" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">Изменяет текущее значение на семантику транзакции оптимистической блокировки, используя указанную функцию трансформации.             Преобразование извлекается столько раз, сколько требуется для устранения конфликта оптимистической блокировки.</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">Переменная или изменяемое поле, к которым могут обращаться сразу несколько потоков.</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">Функция, изменяющая значение. Эта функция не должна иметь никаких побочных эффектов, поскольку может выполняться сразу несколько раз при конфликтах с другими потоками.</param>
      <typeparam name="T" vsli:raw="The type of data.">Тип данных.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">
        <see langword="true" />, если значение расположения изменилось после применения результата функции <paramref name="transformer" />; <see langword="false" />, если значение расположения осталось неизменным, поскольку последний вызов <paramref name="transformer" /> вернул существующее значение.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary vsli:raw="Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.">Изменяет текущее значение на семантику транзакции оптимистической блокировки, используя указанную функцию трансформации.             Преобразование извлекается столько раз, сколько требуется для устранения конфликта оптимистической блокировки.</summary>
      <param name="location" vsli:raw="The variable or field to be changed, which may be accessed by multiple threads.">Переменная или изменяемое поле, к которым могут обращаться сразу несколько потоков.</param>
      <param name="transformer" vsli:raw="A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.">Функция, изменяющая значение. Эта функция не должна иметь никаких побочных эффектов, поскольку может выполняться сразу несколько раз при конфликтах с другими потоками.</param>
      <param name="transformerArgument" vsli:raw="The argument to pass to &lt;paramref name=&quot;transformer&quot; /&gt;.">Аргумент, передаваемый в <paramref name="transformer" />.</param>
      <typeparam name="T" vsli:raw="The type of data.">Тип данных.</typeparam>
      <typeparam name="TArg" vsli:raw="The type of argument passed to the &lt;paramref name=&quot;transformer&quot; /&gt;.">Тип аргумента, переданного в <paramref name="transformer" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the location's value is changed by applying the result of the &lt;paramref name=&quot;transformer&quot; /&gt; function; &lt;see langword=&quot;false&quot; /&gt; if the location's value remained the same because the last invocation of &lt;paramref name=&quot;transformer&quot; /&gt; returned the existing value.">
        <see langword="true" />, если значение расположения изменилось после применения результата функции <paramref name="transformer" />; <see langword="false" />, если значение расположения осталось неизменным, поскольку последний вызов <paramref name="transformer" /> вернул существующее значение.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Содержит набор методов инициализации для экземпляров класса <see cref="T:System.Collections.Immutable.ImmutableList`1" />.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary vsli:raw="Creates an empty immutable list.">Создает пустой неизменяемый список.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the .">Тип элементов, которые хранятся в списке.</typeparam>
      <returns vsli:raw="An empty immutable list.">Пустой неизменяемый список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable list that contains the specified item.">Создает новый неизменяемый список, который содержит указанный элемент.</summary>
      <param name="item" vsli:raw="The item to prepopulate the list with.">Элемент, которым нужно заполнить список.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">Тип элементов списка.</typeparam>
      <returns vsli:raw="A new  that contains the specified item.">Новый список, который содержит указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable list that contains the specified array of items.">Создает новый неизменяемый список, который содержит указанный массив элементов.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the list with.">Массив элементов, которыми нужно заполнить список.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">Тип элементов списка.</typeparam>
      <returns vsli:raw="A new immutable list that contains the specified items.">Новый неизменяемый список, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary vsli:raw="Creates a new immutable list builder.">Создает новый построитель неизменяемого списка.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Построитель неизменяемых коллекций.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable list that contains the specified items.">Создает новый неизменяемый список, который содержит указанные элементы.</summary>
      <param name="items" vsli:raw="The items to add to the list.">Элементы, которые нужно добавить в список.</param>
      <typeparam name="T" vsli:raw="The type of items in the .">Тип элементов списка.</typeparam>
      <returns vsli:raw="An immutable list that contains the specified items.">Неизменяемый список, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в списке.</summary>
      <param name="list" vsli:raw="The list to search.">Список, в котором требуется выполнить поиск.</param>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">Объект, который нужно найти в списке. Для ссылочных типов допускается значение null.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Тип элементов списка.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that extends from index to the last element, if found; otherwise, -1.">Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов списка начиная с указанного индекса и до конца списка, если элемент найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the list.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в списке.</summary>
      <param name="list" vsli:raw="The list to search.">Список, в котором требуется выполнить поиск.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение null.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Тип элементов списка.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from index to the last element, if found; otherwise, -1.">Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов неизменяемого списка начиная с указанного индекса и до конца списка, если элемент найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка начиная с заданного индекса и до последнего элемента.</summary>
      <param name="list" vsli:raw="The list to search.">Список, в котором требуется выполнить поиск.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение null.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Индекс (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Тип элементов списка.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов неизменяемого списка начиная с указанного индекса и до конца списка, если элемент найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка начиная с заданного индекса и до последнего элемента.</summary>
      <param name="list" vsli:raw="The list to search.">Список, в котором требуется выполнить поиск.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение null.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Индекс (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Тип элементов списка.</typeparam>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, -1.">Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов неизменяемого списка начиная с указанного индекса и до конца списка, если элемент найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его последнего вхождения в пределах всего неизменяемого списка.</summary>
      <param name="list" vsli:raw="The list to search.">Список, в котором требуется выполнить поиск.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение null.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Тип элементов списка.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">Отсчитываемый от нуля индекс последнего вхождения элемента в пределах всего неизменяемого списка, если элемент найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его последнего вхождения в пределах всего неизменяемого списка.</summary>
      <param name="list" vsli:raw="The list to search.">Список, в котором требуется выполнить поиск.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение null.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Тип элементов списка.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, -1.">Отсчитываемый от нуля индекс последнего вхождения элемента в пределах всего неизменяемого списка, если элемент найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его последнего вхождения в диапазоне элементов неизменяемого списка начиная с первого элемента и до заданного индекса.</summary>
      <param name="list" vsli:raw="The list to search.">Список, в котором требуется выполнить поиск.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение null.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Тип элементов списка.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">Отсчитываемый от нуля индекс последнего вхождения элемента в диапазоне элементов неизменяемого списка начиная с первого элемента и до указанной позиции, если элемент найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его последнего вхождения в диапазоне элементов неизменяемого списка начиная с первого элемента и до заданного индекса.</summary>
      <param name="list" vsli:raw="The list to search.">Список, в котором требуется выполнить поиск.</param>
      <param name="item" vsli:raw="The object to locate in the Immutable list. The value can be null for reference types.">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение null.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Тип элементов списка.</typeparam>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, -1.">Отсчитываемый от нуля индекс последнего вхождения элемента в диапазоне элементов неизменяемого списка начиная с первого элемента и до указанной позиции, если элемент найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary vsli:raw="Removes the specified value from this list.">Удаляет из списка указанное значение.</summary>
      <param name="list" vsli:raw="The list to search.">Список, в котором требуется выполнить поиск.</param>
      <param name="value" vsli:raw="The value to remove.">Удаляемое значение.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Тип элементов списка.</typeparam>
      <returns vsli:raw="A new immutable list with the element removed, or this list if the element is not in this list.">Новый неизменяемый список, из которого удален указанный элемент, или исходный список, если элемент в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Removes the specified values from this list.">Удаляет из списка указанные значения.</summary>
      <param name="list" vsli:raw="The list to search.">Список, в котором требуется выполнить поиск.</param>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Элементы, которые нужно удалить, если соответствующие значения будут найдены в списке.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Тип элементов списка.</typeparam>
      <returns vsli:raw="A new immutable list with the elements removed.">Новый неизменяемый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary vsli:raw="Replaces the first equal element in the list with the specified element.">Заменяет первый такой же элемент списка указанным элементом.</summary>
      <param name="list" vsli:raw="The list to search.">Список, в котором требуется выполнить поиск.</param>
      <param name="oldValue" vsli:raw="The element to replace.">Элемент, который нужно заменить.</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">Элемент, которым нужно заменить старый элемент.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Тип элементов списка.</typeparam>
      <returns vsli:raw="The new list -- even if the value being replaced is equal to the new value for that position.">Новый список (даже если замененное значение равно новому значению в этой позиции).</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">Возникает, если старое значение не существует в списке.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable list of its contents.">Выполняет перечисление последовательности и создает неизменяемый список на основе ее содержимого.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Перебираемая последовательность.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Тип элементов последовательности.</typeparam>
      <returns vsli:raw="An immutable list that contains the items in the specified sequence.">Неизменяемый список, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary vsli:raw="Creates an immutable list from the current contents of the builder's collection.">Создает неизменяемый список из текущего содержимого коллекции построителя.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable list from.">Построитель для создания неизменяемого списка.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the list.">Тип элементов в списке.</typeparam>
      <returns vsli:raw="An immutable list that contains the current contents in the builder's collection.">Неизменяемый список, содержащий текущее содержимое коллекции построителя.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary vsli:raw="Represents an immutable list, which is a strongly typed list of objects that can be accessed by index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет строго типизированный неизменяемый список объектов, доступных по индексу.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">Тип элементов в списке.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary vsli:raw="Adds the specified object to the end of the immutable list.">Добавляет указанный объект в конец неизменяемого списка.</summary>
      <param name="value" vsli:raw="The object to add.">Добавляемый объект.</param>
      <returns vsli:raw="A new immutable list with the object added.">Новый неизменяемый список с добавленным объектом.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the elements of the specified collection to the end of the immutable list.">Добавляет элементы указанной коллекции в конец неизменяемого списка.</summary>
      <param name="items" vsli:raw="The collection whose elements will be added to the end of the list.">Коллекция, элементы которой нужно добавить в конец списка.</param>
      <returns vsli:raw="A new immutable list with the elements added.">Новый неизменяемый список с добавленными элементами.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element.">Выполняет поиск элемента по всему отсортированному списку, используя функцию сравнения по умолчанию, и возвращает его индекс, отсчитываемый от нуля.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Искомый объект. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">Отсчитываемый от нуля индекс элемента в отсортированном списке, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем данный элемент, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer cannot find a comparer implementation of the for type T.">Функции сравнения по умолчанию не удается найти реализацию сравнения для типа T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire sorted list for an element using the specified comparer and returns the zero-based index of the element.">Выполняет поиск элемента по всему отсортированному списку, используя указанный компаратор, и возвращает индекс элемента, отсчитываемый от нуля.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">Искомый объект. Для ссылочных типов допускается значение null.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements or null to use the default comparer.">Реализация функции сравнения, которую нужно использовать при проверке элементов, или null, если следует использовать функцию сравнения по умолчанию.</param>
      <returns vsli:raw="The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.ICollection.Count&quot; /&gt;.">Отсчитываемый от нуля индекс элемента в отсортированном списке, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем данный элемент, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="comparer is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">функция сравнения имеет значение <see langword="null" /> и функции сравнения по умолчанию не удается найти реализацию сравнения для типа T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches a range of elements in the sorted list for an element using the specified comparer and returns the zero-based index of the element.">Выполняет поиск элемента в диапазоне элементов отсортированного списка, используя указанную функцию сравнения, и возвращает индекс элемента, отсчитываемый от нуля.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">Отсчитываемый от нуля индекс начала диапазона поиска.</param>
      <param name="count" vsli:raw="The length of the range to search.">Длина диапазона поиска.</param>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">Искомый объект. Для ссылочных типов допускается значение null.</param>
      <param name="comparer" vsli:raw="The comparer implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer.">Реализация функции сравнения, которую нужно использовать при проверке элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию.</param>
      <returns vsli:raw="The zero-based index of item in the sorted list, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of &lt;paramref name=&quot;count&quot; /&gt;.">Отсчитываемый от нуля индекс элемента в отсортированном списке, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем данный элемент, или, если большего элемента не существует, поразрядным дополнением значения <paramref name="count" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="index is less than 0 or &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">индекс меньше 0 или <paramref name="count" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="index and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the list.">индекс и <paramref name="count" /> не указывают допустимый диапазон в списке.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer cannot find an comparer implementation for type T.">
        <paramref name="comparer" /> имеет значение <see langword="null" /> и функции сравнения по умолчанию не удается найти реализацию сравнения для типа T.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary vsli:raw="Represents a list that mutates with little or no memory allocations and that can produce or build on immutable list instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет список, для изменения которого не требуется выделение памяти (или выделяется небольшой объем) и с помощью которого можно эффективно создавать или конструировать экземпляры неизменяемых списков.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an item to the immutable list.">Добавляет элемент в неизменяемый список.</summary>
      <param name="item" vsli:raw="The item to add to the list.">Элемент, который нужно добавить в список.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a series of elements to the end of this list.">Добавляет ряд элементов в конец списка.</summary>
      <param name="items" vsli:raw="The elements to add to the end of the list.">Элементы, которые нужно добавить в конец списка.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the default comparer and returns the zero-based index of the element.">Выполняет поиск элемента по всему списку <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, используя функцию сравнения по умолчанию, и возвращает его индекс, отсчитываемый от нуля.</summary>
      <param name="item" vsli:raw="The object to locate. The value can be null for reference types.">Искомый объект. Для ссылочных типов допускается значение null.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">Отсчитываемый от нуля индекс элемента в списке <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">Функция сравнения по умолчанию <see cref="P:System.Collections.Generic.Comparer`1.Default" /> не может найти реализацию универсального интерфейса <see cref="T:System.IComparable`1" /> или интерфейса <see cref="T:System.IComparable" /> для типа T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">Выполняет поиск элемента по всему списку <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, используя указанную функцию сравнения, и возвращает его индекс, отсчитываемый от нуля.</summary>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">Искомый объект. Для ссылочных типов допускается значение null.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">Реализация, которую нужно использовать при сравнении элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">Отсчитываемый от нуля индекс элемента в списке <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> имеет значение <see langword="null" />, а функция сравнения по умолчанию <see cref="P:System.Collections.Generic.Comparer`1.Default" /> не может найти реализацию универсального интерфейса <see cref="T:System.IComparable`1" /> или интерфейса <see cref="T:System.IComparable" /> для типа T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the specified range of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">Выполняет поиск элемента в указанном диапазоне списка <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, используя указанную функцию сравнения, и возвращает его индекс, отсчитываемый от нуля.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">Отсчитываемый от нуля индекс начала диапазона поиска.</param>
      <param name="count" vsli:raw="The length of the range to search.">Длина диапазона поиска.</param>
      <param name="item" vsli:raw="The object to locate. This value can be null for reference types.">Искомый объект. Для ссылочных типов допускается значение null.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; for the default comparer.">Реализация, которую нужно использовать при сравнении элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию.</param>
      <returns vsli:raw="The zero-based index of item in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt;, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt;.">Отсчитываемый от нуля индекс элемента в списке <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;count&quot; /&gt; is less than 0.">Значение параметра <paramref name="index" /> меньше 0.
-или-
Значение параметра <paramref name="count" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Параметры <paramref name="index" /> и <paramref name="count" /> не указывают допустимый диапазон в <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type T.">
        <paramref name="comparer" /> имеет значение <see langword="null" />, а функция сравнения по умолчанию <see cref="P:System.Collections.Generic.Comparer`1.Default" /> не может найти реализацию универсального интерфейса <see cref="T:System.IComparable`1" /> или интерфейса <see cref="T:System.IComparable" /> для типа T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Удаляет все элементы из неизменяемого списка.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">Определяет, содержит ли неизменяемый список указанное значение.</summary>
      <param name="item" vsli:raw="The object to locate in the list.">Объект, который нужно найти в списке.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если элемент найден в списке; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Creates a new immutable list from the list represented by this builder by using the converter function.">Создает новый неизменяемый список на основе списка, представленного этим построителем, с использованием функции преобразователя.</summary>
      <param name="converter" vsli:raw="The converter function.">Функция преобразователя.</param>
      <typeparam name="TOutput" vsli:raw="The type of the output of the delegate converter function.">Тип выходных данных делегированной функции преобразователя.</typeparam>
      <returns vsli:raw="A new immutable list from the list represented by this builder.">Новый неизменяемый список на основе списка, представленного этим построителем.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">Копирует весь неизменяемый список в совместимый одномерный массив начиная с начала целевого массива.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Одномерный массив, в который копируются элементы неизменяемого списка. Индекс в массиве должен начинаться с нуля.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Копирует весь неизменяемый список в совместимый одномерный массив начиная с указанного индекса.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Одномерный массив, в который копируются элементы неизменяемого списка. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">Отсчитываемый от нуля индекс в массиве, с которого начинается копирование.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Копирует весь неизменяемый список в совместимый одномерный массив начиная с указанного индекса.</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">Отсчитываемый от нуля индекс исходного списка, с которого начинается копирование.</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Одномерный массив, в который копируются элементы неизменяемого списка. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
      <param name="count" vsli:raw="The number of elements to copy.">Число элементов для копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable list.">Возвращает количество элементов в неизменяемом списке.</summary>
      <returns vsli:raw="The number of elements in this list.">Количество элементов в списке.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">Определяет, содержит ли неизменяемый список элементы, удовлетворяющие условиям указанного предиката.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Делегат, определяющий условия поиска элементов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если неизменяемый список содержит один или несколько элементов, удовлетворяющих условиям указанного предиката; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает первое найденное вхождение в пределах всего неизменяемого списка.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Первый элемент, удовлетворяющий условиям указанного предиката, если такой элемент найден; в противном случае — значение по умолчанию для типа <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">Извлекает все элементы, удовлетворяющие условиям указанного предиката.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Делегат, определяющий условия поиска элементов.</param>
      <returns vsli:raw="An immutable list containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">Неизменяемый список, который содержит все элементы, удовлетворяющие условиям указанного предиката, если такие элементы найдены; в противном случае — пустой неизменяемый список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка, начинающемся с заданного индекса и содержащем указанное число элементов.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Индекс (с нуля) начальной позиции поиска.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Отсчитываемый от нуля индекс первого вхождения элемента, отвечающего условиям предиката <paramref name="match" />, если такой элемент найден. В противном случае значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка, начинающемся с заданного индекса и заканчивающимся последним элементом.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Индекс (с нуля) начальной позиции поиска.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Отсчитываемый от нуля индекс первого вхождения элемента, отвечающего условиям предиката <paramref name="match" />, если такой элемент найден. В противном случае значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс первого найденного вхождения в пределах всего неизменяемого списка.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Отсчитываемый от нуля индекс первого вхождения элемента, отвечающего условиям предиката <paramref name="match" />, если такой элемент найден. В противном случае значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает последнее найденное вхождение в пределах всего неизменяемого списка.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Последний элемент, удовлетворяющий условиям указанного предиката, если такой элемент найден; в противном случае — значение по умолчанию для типа <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс последнего вхождения в диапазоне элементов неизменяемого списка, содержащем указанное число элементов и заканчивающемся элементом с заданным индексом.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Отсчитываемый от нуля индекс последнего вхождения элемента, удовлетворяющего условиям предиката <paramref name="match" />, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс его последнего вхождения в диапазоне элементов неизменяемого списка, начинающемся с первого элемента и заканчивающимся указанным индексом.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Отсчитываемый от нуля индекс последнего вхождения элемента, удовлетворяющего условиям предиката <paramref name="match" />, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс последнего найденного вхождения в пределах всего неизменяемого списка.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">Отсчитываемый от нуля индекс последнего вхождения элемента, удовлетворяющего условиям предиката <paramref name="match" />, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the list.">Выполняет указанное действие с каждым элементом списка.</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the list.">Делегат, выполняемый для каждого элемента списка.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Перечислитель, который можно использовать для перечисления элементов списка.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">Создает неполную копию диапазона элементов исходного неизменяемого списка.</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">Отсчитываемый от нуля индекс, с которого начинается диапазон.</param>
      <param name="count" vsli:raw="The number of elements in the range.">Число элементов в диапазоне.</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">Неполная копия диапазона элементов исходного неизменяемого списка.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list, if found; otherwise, -1.">Отсчитываемый от нуля индекс первого вхождения элемента <paramref name="item" /> в диапазоне элементов неизменяемого списка, если элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка начиная с заданного индекса и до последнего элемента.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Индекс (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from &lt;paramref name=&quot;index&quot; /&gt; to the last element, if found; otherwise, -1.">Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов неизменяемого списка начиная с позиции <paramref name="index" /> и до конца списка, если элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка, начинающемся с заданного индекса и содержащем указанное число элементов.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Индекс (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1.">Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов неизменяемого списка, который начинается с позиции <paramref name="index" /> и содержит <paramref name="count" /> элементов, если искомый объект найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Builder&quot; /&gt; that starts at the specified index and contains the specified number of elements.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов списка <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, начинающемся с заданного индекса и содержащем указанное число элементов.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Индекс (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <param name="count" vsli:raw="The number of elements to search.">Число искомых элементов.</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">Функция сравнения значений, которую нужно использовать для проверки элементов на предмет равенства.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов неизменяемого списка, который начинается с позиции <paramref name="index" /> и содержит <paramref name="count" /> элементов, если искомый объект найден; в противном случае — значение –1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item to the immutable list at the specified index.">Вставляет элемент в неизменяемый список по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="item" />.</param>
      <param name="item" vsli:raw="The object to insert into the immutable list.">Объект, который нужно вставить в неизменяемый список.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">Вставляет элементы коллекции в неизменяемый список в позиции с указанным индексом.</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">Отсчитываемый от нуля индекс места вставки новых элементов.</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted into the immutable list. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are null, if type &lt;c&gt;T&lt;/c&gt; is a reference type.">Коллекция, элементы которой нужно вставить в неизменяемый список. Коллекция не может быть задана значением <see langword="null" />, но может содержать пустые элементы, если тип <c>T</c> является ссылочным.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value for a given index in the list.">Возвращает или устанавливает значение в списке по указанному индексу.</summary>
      <param name="index" vsli:raw="The index of the item to get or set.">Индекс элемента, который нужно получить или установить.</param>
      <returns vsli:raw="The value at the specified index.">Значение по указанному индексу.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the value for a given &lt;paramref name=&quot;index&quot; /&gt; into the list.">Возвращает доступную только для чтения ссылку на значение заданного <paramref name="index" /> в списке.</summary>
      <param name="index" vsli:raw="The index of the desired element.">Индекс требуемого элемента.</param>
      <returns vsli:raw="A read-only reference to the value at the specified &lt;paramref name=&quot;index&quot; /&gt;.">Доступная только для чтения ссылка на значение по указанному <paramref name="index" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его последнего вхождения в пределах всего неизменяемого списка.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire immutable list, if found; otherwise, -1.">Отсчитываемый от нуля индекс последнего вхождения <paramref name="item" /> в пределах всего неизменяемого списка, если элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его последнего вхождения в диапазоне элементов неизменяемого списка начиная с первого элемента и до заданного индекса.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that extends from the first element to &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">Отсчитываемый от нуля индекс последнего вхождения элемента <paramref name="item" /> в диапазоне элементов неизменяемого списка начиная с первого элемента и до позиции <paramref name="index" />, если элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс последнего вхождения в диапазоне элементов неизменяемого списка, содержащем указанное число элементов и заканчивающемся в позиции с указанным индексом.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the immutable list that contains &lt;paramref name=&quot;count&quot; /&gt; number of elements and ends at &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">Отсчитываемый от нуля индекс последнего вхождения объекта <paramref name="item" /> в диапазоне элементов неизменяемого списка, состоящем из <paramref name="count" /> элементов и заканчивающемся в позиции <paramref name="index" />, если элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс последнего вхождения в диапазоне элементов неизменяемого списка, содержащем указанное число элементов и заканчивающемся в позиции с указанным индексом.</summary>
      <param name="item" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Индекс (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <param name="count" vsli:raw="The number of elements to search.">Число искомых элементов.</param>
      <param name="equalityComparer" vsli:raw="The value comparer to use for comparing elements for equality.">Функция сравнения значений, которую нужно использовать для проверки элементов на предмет равенства.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the immutable list that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1">Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов неизменяемого списка, который начинается с позиции <paramref name="index" /> и содержит <paramref name="count" /> элементов, если искомый объект найден; в противном случае — значение –1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Удаляет первое вхождение указанного объекта из неизменяемого списка.</summary>
      <param name="item" vsli:raw="The object to remove from the list.">Объект, который нужно удалить из списка.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item is not found in the list.">Значение <see langword="true" />, если элемент был успешно удален из списка; в противном случае — значение <see langword="false" />. Этот метод также возвращает значение <see langword="false" />, если элемент не найден в списке.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Удаляет все элементы, удовлетворяющие условиям указанного предиката.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Делегат, определяющий условия удаления элементов.</param>
      <returns vsli:raw="The number of elements removed from the immutable list.">Количество элементов, удаляемых из неизменяемого списка.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">Удаляет из неизменяемого списка элемент с указанным индексом.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove from the list.">Отсчитываемый от нуля индекс элемента, удаляемого из списка.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">Изменяет порядок элементов во всем неизменяемом списке на обратный.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">Изменяет порядок элементов неизменяемого списка в указанном диапазоне.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">Отсчитываемый от нуля индекс начала диапазона, порядок элементов которого требуется изменить.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">Число элементов в диапазоне, порядок сортировки в котором требуется изменить.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the default comparer.">Сортирует элементы во всем неизменяемом списке с помощью функции сравнения по умолчанию.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparer.">Сортирует элементы во всем неизменяемом списке с помощью указанной функции сравнения.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Реализация, которую нужно использовать при сравнении элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list by using the specified comparison object.">Сортирует элементы во всем неизменяемом списке с помощью указанного объекта сравнения.</summary>
      <param name="comparison" vsli:raw="The object to use when comparing elements.">Объект, используемый при сравнении элементов.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Свойство <paramref name="comparison" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in a range of elements in the immutable list  by using the specified comparer.">Сортирует элементы в диапазоне неизменяемого списка с помощью указанной функции сравнения.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">Индекс (с нуля) начала диапазона, который требуется отсортировать.</param>
      <param name="count" vsli:raw="The length of the range to sort.">Длина диапазона сортировки.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Реализация, которую нужно использовать при сравнении элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">Получает значение, указывающее, доступен ли данный экземпляр только для чтения.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">Всегда <c>имеет значение false</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the list to an array, starting at a particular array index.">Копирует элементы списка в массив начиная с определенного индекса массива.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the list. The array must have zero-based indexing.">Одномерный массив, в который копируются элементы из списка. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Получает значение, определяющее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если доступ к классу <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the list.">Добавляет элемент в список.</summary>
      <param name="value" vsli:raw="The object to add to the list.">Объект, который нужно добавить в список.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">Позиция, в которую вставлен новый элемент, или значение -1, если элемент не вставлен в коллекцию.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the list.">Удаляет все элементы из списка.</summary>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the list contains a specific value.">Определяет, содержит ли список указанное значение.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Объект, который нужно найти в списке.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объект <see cref="T:System.Object" /> найден в списке; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the list.">Определяет индекс указанного элемента в списке.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Объект, который нужно найти в списке.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Индекс <paramref name="value" />, если он найден в списке; в противном случае — значение -1.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the list at the specified index.">Вставляет элемент в список по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="value" />.</param>
      <param name="value" vsli:raw="The object to insert into the list.">Объект, который нужно вставить в список.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Возвращает значение, показывающее, имеет ли объект <see cref="T:System.Collections.IList" /> фиксированный размер.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если словарь <see cref="T:System.Collections.IList" /> имеет фиксированный размер; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Возвращает значение, которое определяет, является ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> доступной только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Возвращает или задает объект <see cref="T:System.Object" /> с заданным индексом.</summary>
      <param name="index" vsli:raw="The index.">Индекс.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the list.">Удаляет из списка первый экземпляр указанного объекта.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">Объект, который нужно удалить из списка.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable list based on the contents of this instance.">Создает неизменяемый список на основе содержимого исходного экземпляра.</summary>
      <returns vsli:raw="An immutable list.">Неизменяемый список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">Определяет, все ли элементы неизменяемого списка удовлетворяют условиям указанного предиката.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">Делегат, который определяет условия, проверяемые для элементов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, если каждый элемент неизменяемого списка удовлетворяет условиям указанного предиката; в противном случае — значение <see langword="false" />. Если в списке нет элементов, возвращается <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable list.">Удаляет все элементы из неизменяемого списка.</summary>
      <returns vsli:raw="An empty list that retains the same sort or unordered semantics that this instance has.">Пустой список, в котором используются те же правила сортировки и упорядочения, что и в исходном экземпляре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable list contains the specified value.">Определяет, содержит ли неизменяемый список указанное значение.</summary>
      <param name="value" vsli:raw="The value to locate.">Значение, которое нужно найти.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если список содержит указанное значение, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary vsli:raw="Converts the elements in the current immutable list to another type, and returns a list containing the converted elements.">Преобразует элементы текущего неизменяемого списка в другой тип и возвращает список преобразованных элементов.</summary>
      <param name="converter" vsli:raw="A delegate that converts each element from one type to another type.">Делегат, преобразующий каждый элемент из одного типа в другой.</param>
      <typeparam name="TOutput" vsli:raw="The type of the elements of the target array.">Тип элементов массива назначения.</typeparam>
      <returns vsli:raw="A list of the target type containing the converted elements from the current &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt;.">Список с элементами конечного типа, преобразованными из текущего <see cref="T:System.Collections.Immutable.ImmutableList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.">Копирует весь неизменяемый список в совместимый одномерный массив начиная с начала целевого массива.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Одномерный массив, в который копируются элементы неизменяемого списка. Индекс в массиве должен начинаться с нуля.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Копирует весь неизменяемый список в совместимый одномерный массив начиная с указанного индекса.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Одномерный массив, в который копируются элементы неизменяемого списка. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a range of elements from the immutable list to a compatible one-dimensional array, starting at the specified index of the target array.">Копирует диапазон элементов неизменяемого списка в совместимый одномерный массив начиная с указанного индекса целевого массива.</summary>
      <param name="index" vsli:raw="The zero-based index in the source immutable list at which copying begins.">Отсчитываемый от нуля индекс исходного списка, с которого начинается копирование.</param>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.">Одномерный массив, в который копируются элементы неизменяемого списка. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in array at which copying begins.">Отсчитываемый от нуля индекс в массиве, с которого начинается копирование.</param>
      <param name="count" vsli:raw="The number of elements to copy.">Число элементов для копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the list.">Возвращает количество элементов в списке.</summary>
      <returns vsli:raw="The number of elements in the list.">Количество элементов в списке.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary vsli:raw="Gets an empty immutable list.">Возвращает пустой список с функцией сортировки по умолчанию.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Выполняет перечисление содержимого двоичного дерева.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Элемент, расположенный в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1.Enumerator&quot; /&gt; class.">Освобождает ресурсы, используемые текущим экземпляром класса <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances enumeration to the next element of the immutable list.">Перемещает перечислитель к следующему элементу неизменяемого списка.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the list.">Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца списка.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable list.">Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом неизменяемого списка.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">Текущий элемент.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.">Определяет, содержит ли неизменяемый список элементы, удовлетворяющие условиям указанного предиката.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Делегат, определяющий условия поиска элементов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если неизменяемый список содержит один или несколько элементов, удовлетворяющих условиям указанного предиката; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.">Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает первое найденное вхождение в пределах всего неизменяемого списка.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Первый элемент, удовлетворяющий условиям указанного предиката, если такой элемент найден; в противном случае — значение по умолчанию для типа <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">Извлекает все элементы, удовлетворяющие условиям указанного предиката.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to search for.">Делегат, определяющий условия поиска элементов.</param>
      <returns vsli:raw="An immutable list that contains all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.">Неизменяемый список, который содержит все элементы, удовлетворяющие условиям указанного предиката, если такие элементы найдены; в противном случае — пустой неизменяемый список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.">Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка, начинающемся с заданного индекса и содержащем указанное число элементов.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Индекс (с нуля) начальной позиции поиска.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">Отсчитываемый от нуля индекс первого вхождения элемента, удовлетворяющего указанным условиям, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.">Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка, начинающемся с заданного индекса и заканчивающимся последним элементом.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">Индекс (с нуля) начальной позиции поиска.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.">Отсчитываемый от нуля индекс первого вхождения элемента, удовлетворяющего указанным условиям, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.">Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс первого найденного вхождения в пределах всего неизменяемого списка.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, -1.">Отсчитываемый от нуля индекс первого вхождения элемента, удовлетворяющего указанным условиям, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.">Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает последнее найденное вхождение в пределах всего неизменяемого списка.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">Последний элемент, удовлетворяющий условиям указанного предиката, если такой элемент найден; в противном случае — значение по умолчанию для типа <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.">Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс последнего вхождения в диапазоне элементов неизменяемого списка, содержащем указанное число элементов и заканчивающемся элементом с заданным индексом.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">Отсчитываемый от нуля индекс последнего вхождения элемента, удовлетворяющего условиям предиката <paramref name="match" />, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.">Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс его последнего вхождения в диапазоне элементов неизменяемого списка, начинающемся с первого элемента и заканчивающимся указанным индексом.</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">Отсчитываемый от нуля индекс последнего вхождения элемента, удовлетворяющего условиям предиката <paramref name="match" />, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.">Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс последнего найденного вхождения в пределах всего неизменяемого списка.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, ?1.">Отсчитываемый от нуля индекс последнего вхождения элемента, удовлетворяющего условиям предиката <paramref name="match" />, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the immutable list.">Выполняет указанное действие с каждым элементом неизменяемого списка.</summary>
      <param name="action" vsli:raw="The delegate to perform on each element of the immutable list.">Делегат, выполняемый для каждого элемента неизменяемого списка.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Возвращает перечислитель, который выполняет перечисление элементов неизменяемого списка.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the immutable list.">Перечислитель, который можно использовать для перечисления элементов неизменяемого списка.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source immutable list.">Создает неполную копию диапазона элементов исходного неизменяемого списка.</summary>
      <param name="index" vsli:raw="The zero-based index at which the range starts.">Отсчитываемый от нуля индекс, с которого начинается диапазон.</param>
      <param name="count" vsli:raw="The number of elements in the range.">Число элементов в диапазоне.</param>
      <returns vsli:raw="A shallow copy of a range of elements in the source immutable list.">Неполная копия диапазона элементов исходного неизменяемого списка.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the entire immutable list.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в пределах всего неизменяемого списка.</summary>
      <param name="value" vsli:raw="The object to locate in the immutable list. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <c>null</c>.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;value&quot; /&gt; within the entire immutable list, if found; otherwise, ?1.">Отсчитываемый от нуля индекс первого вхождения <paramref name="value" /> в пределах всего неизменяемого списка, если элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the list that starts at the specified index and contains the specified number of elements.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс первого вхождения в диапазоне элементов списка, начинающемся с заданного индекса и содержащем указанное число элементов.</summary>
      <param name="item" vsli:raw="The object to locate in the list The value can be null for reference types.">Объект, который нужно найти в списке. Для ссылочных типов допускается значение null.</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">Индекс (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns vsli:raw="The zero-based index of the first occurrence of item within the range of elements in the list that starts at index and contains count number of elements, if found; otherwise, -1.">Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов списка, который начинается с указанного индекса и содержит заданное число элементов, если искомый объект найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified object into the immutable list at the specified index.">Вставляет указанный объект в неизменяемый список по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the object.">Отсчитываемый с нуля индекс, по которому нужно вставить объект.</param>
      <param name="item" vsli:raw="The object to insert.">Вставляемый объект.</param>
      <returns vsli:raw="The new immutable list after the object is inserted.">Новый неизменяемый список после вставки в него объекта.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the immutable list at the specified index.">Вставляет элементы коллекции в неизменяемый список в позиции с указанным индексом.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the elements.">Отсчитываемый с нуля индекс, по которому нужно вставить элементы.</param>
      <param name="items" vsli:raw="The collection whose elements should be inserted.">Коллекция, элементы которой нужно вставить.</param>
      <returns vsli:raw="The new immutable list after the elements are inserted.">Новый неизменяемый список после вставки в него элементов.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this list is empty.">Возвращает значение, указывающее, является ли список пустым.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если список пуст; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified index of the list.">Возвращает элемент по указанному индексу списка.</summary>
      <param name="index" vsli:raw="The index of the element to retrieve.">Индекс извлекаемого элемента.</param>
      <returns vsli:raw="The element at the specified index.">Элемент, расположенный по указанному индексу.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="In a get operation, &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">В операции Get <paramref name="index" /> имеет отрицательное значение или не меньше <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Возвращает доступную только для чтения ссылку на элемент набора в заданной <paramref name="index" />.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Отсчитываемый от нуля индекс элемента в наборе, который необходимо вернуть.</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">Доступная только для чтения ссылка на элемент в заданной позиции.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">
        <paramref name="index" /> имеет отрицательное значение или не меньше <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the list that contains the specified number of elements and ends at the specified index.">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс последнего вхождения в диапазоне элементов списка, содержащем указанное число элементов и заканчивающемся в позиции с указанным индексом.</summary>
      <param name="item" vsli:raw="The object to locate in the list. The value can be null for reference types.">Объект, который нужно найти в списке. Для ссылочных типов допускается значение null.</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns vsli:raw="The zero-based index of the last occurrence of item within the range of elements in the list that contains count number of elements and ends at index, if found; otherwise, -1.">Отсчитываемый от нуля индекс последнего вхождения элемента в диапазоне элементов списка, который содержит заданное число элементов и заканчивается по указанному индексу, если искомый объект найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from this immutable list.">Удаляет первое вхождение указанного объекта из неизменяемого списка.</summary>
      <param name="value" vsli:raw="The object to remove.">Удаляемый объект.</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">Новый список, из которого удален указанный объект, или исходный список, если объект в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the first occurrence of the object that matches the specified value from this immutable list.">Удаляет из неизменяемого списка первое вхождение объекта, который равен указанному значению.</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">Значение элемента, который нужно удалить из списка.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns vsli:raw="A new list with the object removed, or this list if the specified object is not in this list.">Новый список, из которого удален указанный объект, или исходный список, если объект в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Удаляет все элементы, удовлетворяющие условиям указанного предиката.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Делегат, определяющий условия удаления элементов.</param>
      <returns vsli:raw="The new list with the elements removed.">Новый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index.">Удаляет элемент по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">Индекс (с нуля) элемента, который требуется удалить.</param>
      <returns vsli:raw="A new list with the element removed.">Новый список, из которого удален указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list.">Удаляет из неизменяемого списка диапазон элементов.</summary>
      <param name="items" vsli:raw="The collection whose elements should be removed if matches are found in this list.">Коллекция, элементы которой нужно удалить из списка, если в нем будут найдены соответствующие значения.</param>
      <returns vsli:raw="A new list with the elements removed.">Новый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the specified values from this list.">Удаляет из списка указанные значения.</summary>
      <param name="items" vsli:raw="The items to remove if matches are found in this list.">Элементы, которые нужно удалить, если соответствующие значения будут найдены в списке.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns vsli:raw="A new list with the elements removed.">Новый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements, starting from the specified index and containing the specified number of elements, from this immutable list.">Удаляет из неизменяемого списка диапазон объектов, который начинается с указанного индекса и содержит заданное число элементов.</summary>
      <param name="index" vsli:raw="The starting index to begin removal.">Индекс, с которого нужно начать удаление.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Число удаляемых элементов.</param>
      <returns vsli:raw="A new list with the elements removed.">Новый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">Заменяет указанный элемент неизменяемого списка новым.</summary>
      <param name="oldValue" vsli:raw="The element to replace.">Элемент, который нужно заменить.</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">Элемент, которым нужно заменить значение <paramref name="oldValue" />.</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element.">Новый список, в котором заменен указанный элемент (даже если новый элемент равен старому).</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the immutable list.">
        <paramref name="oldValue" /> не существует в неизменяемом списке.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces the specified element in the immutable list with a new element.">Заменяет указанный элемент неизменяемого списка новым.</summary>
      <param name="oldValue" vsli:raw="The element to replace in the list.">Элемент списка, который нужно заменить.</param>
      <param name="newValue" vsli:raw="The element to replace &lt;paramref name=&quot;oldValue&quot; /&gt; with.">Элемент, которым нужно заменить значение <paramref name="oldValue" />.</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to check for equality.">Функция сравнения, которую нужно использовать для проверки на равенство.</param>
      <returns vsli:raw="A new list with the object replaced, or this list if the specified object is not in this list.">Новый список, в котором заменен указанный объект, или исходный список, если объект в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire immutable list.">Изменяет порядок элементов во всем неизменяемом списке на обратный.</summary>
      <returns vsli:raw="The reversed list.">Обращенный список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range of the immutable list.">Изменяет порядок элементов неизменяемого списка в указанном диапазоне.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">Отсчитываемый от нуля индекс начала диапазона, порядок элементов которого требуется изменить.</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">Число элементов в диапазоне, порядок сортировки в котором требуется изменить.</param>
      <returns vsli:raw="The reversed list.">Обращенный список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element at a given position in the immutable list with the specified element.">Заменяет элемент списка в заданной позиции неизменяемого списка указанным элементом.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">Позиция элемента, который нужно заменить.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">Элемент, которым нужно заменить старый элемент.</param>
      <returns vsli:raw="The new list with the replaced element, even if it is equal to the old element at that position.">Новый список, в котором заменен указанный элемент (даже если новый элемент равен старому в заданной позиции).</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the default comparer.">Сортирует элементы во всем неизменяемом списке с помощью функции сравнения по умолчанию.</summary>
      <returns vsli:raw="The sorted list.">Сортируемый список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">Сортирует элементы во всем неизменяемом списке с помощью указанной функции сравнения.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Реализация, которую нужно использовать при сравнении элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns vsli:raw="The sorted list.">Сортируемый список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire immutable list using the specified comparer.">Сортирует элементы во всем неизменяемом списке с помощью указанной функции сравнения.</summary>
      <param name="comparison" vsli:raw="The delegate to use when comparing elements.">Делегат, используемый при сравнении элементов.</param>
      <returns vsli:raw="The sorted list.">Сортируемый список.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Свойство <paramref name="comparison" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts a range of elements in the immutable list using the specified comparer.">Сортирует элементы неизменяемого списка с помощью указанной функции сравнения.</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">Индекс (с нуля) начала диапазона, который требуется отсортировать.</param>
      <param name="count" vsli:raw="The length of the range to sort.">Длина диапазона сортировки.</param>
      <param name="comparer" vsli:raw="The implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer (&lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;).">Реализация, которую нужно использовать при сравнении элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns vsli:raw="The sorted list.">Сортируемый список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified item to the immutable list.">Добавляет в неизменяемый список указанный элемент.</summary>
      <param name="item" vsli:raw="The item to add.">Добавляемый элемент.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Удаляет все элементы из неизменяемого списка.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Получает значение, указывающее, является ли объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступным только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Удаляет первое вхождение указанного объекта из неизменяемого списка.</summary>
      <param name="item" vsli:raw="The object to remove.">Удаляемый объект.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the original list.">Значение <see langword="true" />, если элемент <paramref name="item" /> был успешно удален из списка; в противном случае — значение <see langword="false" />. Этот метод также возвращает значение <see langword="false" />, если значение <paramref name="item" /> не найдено в исходном списке.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Возвращает перечислитель, который выполняет перечисление элементов неизменяемого списка.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Перечислитель, который можно использовать для перечисления элементов списка.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an object in the immutable list at the specified index.">Вставляет объект в неизменяемый список по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="item" />.</param>
      <param name="item" vsli:raw="The object to insert.">Вставляемый объект.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value at the specified index.">Возвращает или задает значение по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">Выдается из метода получения, если <paramref name="index" /> имеет отрицательное значение либо больше или равно <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Всегда выдается из метода задания значения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the value at the specified index.">Удаляет значение по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Отсчитываемый от нуля индекс удаляемого элемента.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire immutable list to a compatible one-dimensional array, starting at the specified array index.">Копирует весь неизменяемый список в совместимый одномерный массив начиная с указанного индекса.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from immutable list.">Одномерный массив, в который копируются элементы неизменяемого списка.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="This type is immutable, so it is always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">См. интерфейс <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">См. раздел <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable list.">Возвращает перечислитель, который выполняет перечисление элементов неизменяемого списка.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the list.">Перечислитель, который можно использовать для перечисления элементов списка.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the immutable list.">Добавляет элемент в неизменяемый список.</summary>
      <param name="value" vsli:raw="The object to add to the list.">Объект, который нужно добавить в список.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the list.">Позиция, в которую вставлен новый элемент, или значение -1, если элемент не вставлен в список.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Создается всегда.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the immutable list.">Удаляет все элементы из неизменяемого списка.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Создается всегда.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable list contains a specific value.">Определяет, содержит ли неизменяемый список указанное значение.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Объект, который нужно найти в списке.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объект найден в списке; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the immutable list.">Определяет индекс указанного элемента в неизменяемом списке.</summary>
      <param name="value" vsli:raw="The object to locate in the list.">Объект, который нужно найти в списке.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Индекс <paramref name="value" />, если он найден в списке; в противном случае — значение -1.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the immutable list at the specified index.">Вставляет элемент в неизменяемый список по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="value" />.</param>
      <param name="value" vsli:raw="The object to insert into the list.">Объект, который нужно вставить в список.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Создается всегда.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Получает значение, указывающее, имеет ли список <see cref="T:System.Collections.IList" /> фиксированный размер.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если словарь <see cref="T:System.Collections.IList" /> имеет фиксированный размер; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Получает значение, указывающее, является ли объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступным только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Возвращает или задает объект <see cref="T:System.Object" /> с заданным индексом.</summary>
      <param name="index" vsli:raw="The index.">Индекс.</param>
      <returns vsli:raw="The value at the specified index.">Значение по указанному индексу.</returns>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="Thrown from getter when &lt;paramref name=&quot;index&quot; /&gt; is negative or not less than &lt;see cref=&quot;P:System.Collections.Immutable.ImmutableList`1.Count&quot; /&gt;.">Выдается из метода получения, если <paramref name="index" /> имеет отрицательное значение либо больше или равно <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown from the setter.">Всегда выдается из метода задания значения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable list.">Удаляет первое вхождение указанного объекта из неизменяемого списка.</summary>
      <param name="value" vsli:raw="The object to remove from the list.">Объект, который нужно удалить из списка.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Создается всегда.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the immutable list.">Удаляет из неизменяемого списка элемент с указанным индексом.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Отсчитываемый от нуля индекс удаляемого элемента.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">Создается всегда.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable list.">Добавляет в неизменяемый список указанное значение.</summary>
      <param name="value" vsli:raw="The value to add.">Значение для сложения.</param>
      <returns vsli:raw="A new list with the element added.">Новый список с добавленным элементом.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the specified values to this immutable list.">Добавляет в неизменяемый список указанные значения.</summary>
      <param name="items" vsli:raw="The values to add.">Значения, которые нужно добавить.</param>
      <returns vsli:raw="A new list with the elements added.">Новый список с добавленными элементами.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary vsli:raw="Retrieves an empty list that has the same sorting and ordering semantics as this instance.">Возвращает пустой список с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</summary>
      <returns vsli:raw="An empty list that has the same sorting and ordering semantics as this instance.">Пустой список с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified element at the specified index in the immutable list.">Вставляет указанный элемент в неизменяемый список по указанному индексу.</summary>
      <param name="index" vsli:raw="The index at which to insert the value.">Индекс, по которому нужно вставить значение.</param>
      <param name="item" vsli:raw="The element to insert.">Элемент, который нужно вставить.</param>
      <returns vsli:raw="A new immutable list that includes the specified element.">Новый неизменяемый список с указанным элементом.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the specified elements at the specified index in the immutable list.">Вставляет указанные элементы в неизменяемый список по указанному индексу.</summary>
      <param name="index" vsli:raw="The index at which to insert the elements.">Индекс, по которому нужно вставить элементы.</param>
      <param name="items" vsli:raw="The elements to insert.">Вставляемые элементы.</param>
      <returns vsli:raw="A new immutable list that includes the specified elements.">Новый неизменяемый список с указанными элементами.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes the element with the specified value from the list.">Удаляет из списка элемент с указанным значением.</summary>
      <param name="value" vsli:raw="The value of the element to remove from the list.">Значение элемента, который нужно удалить из списка.</param>
      <param name="equalityComparer" vsli:raw="The comparer to use to compare elements for equality.">Функция сравнения, которую нужно использовать для проверки элементов на равенство.</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableList`1&quot; /&gt; with the specified element removed.">Новый список <see cref="T:System.Collections.Immutable.ImmutableList`1" />, из которого удален указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">Удаляет все элементы, удовлетворяющие условиям указанного предиката.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">Делегат, определяющий условия удаления элементов.</param>
      <returns vsli:raw="A new immutable list with the elements removed.">Новый неизменяемый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the immutable list.">Удаляет из неизменяемого списка элемент с указанным индексом.</summary>
      <param name="index" vsli:raw="The index of the element to remove.">Индекс элемента, который должен быть удален.</param>
      <returns vsli:raw="A new list with the element removed.">Новый список, из которого удален указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Removes a range of elements from this immutable list that match the items specified.">Удаляет из неизменяемого списка диапазон элементов, которые совпадают с указанными объектами.</summary>
      <param name="items" vsli:raw="The range of items to remove from the list, if found.">Диапазон элементов, которые нужно удалить из списка, если они там есть.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use to compare elements.">Функция сравнения на равенство, которую нужно использовать для проверки элементов.</param>
      <returns vsli:raw="An immutable list with the items removed.">Неизменяемый список, из которого удалены указанные элементы.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; or &lt;paramref name=&quot;equalityComparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Значение параметра <paramref name="items" /> или <paramref name="equalityComparer" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the specified number of elements at the specified location from this list.">Удаляет указанное количество элементов из указанного места списка.</summary>
      <param name="index" vsli:raw="The starting index of the range of elements to remove.">Начальный индекс диапазона элементов, которые необходимо удалить.</param>
      <param name="count" vsli:raw="The number of elements to remove.">Число удаляемых элементов.</param>
      <returns vsli:raw="A new list with the elements removed.">Новый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Replaces an element in the list with the specified element.">Заменяет элемент списка указанным элементом.</summary>
      <param name="oldValue" vsli:raw="The element to replace.">Элемент, который нужно заменить.</param>
      <param name="newValue" vsli:raw="The element to replace the old element with.">Элемент, которым нужно заменить старый элемент.</param>
      <param name="equalityComparer" vsli:raw="The equality comparer to use in the search.">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns vsli:raw="The new list.">Новый список.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;oldValue&quot; /&gt; does not exist in the list.">Возникает, если старое значение не существует в списке.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces an element in the list at a given position with the specified element.">Заменяет элемент списка в заданной позиции указанным элементом.</summary>
      <param name="index" vsli:raw="The position in the list of the element to replace.">Позиция элемента, который нужно заменить.</param>
      <param name="value" vsli:raw="The element to replace the old element with.">Элемент, которым нужно заменить старый элемент.</param>
      <returns vsli:raw="The new list.">Новый список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary vsli:raw="Creates a list that has the same contents as this list and can be efficiently mutated across multiple operations using standard mutable interfaces.">Создает список, который содержит те же объекты, что и исходный, а также может эффективно изменяться различными операциями с использованием стандартных изменяемых интерфейсов.</summary>
      <returns vsli:raw="The created list with the same contents as this list.">Новый список с тем же содержимым, что и исходный.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the immutable list matches the conditions defined by the specified predicate.">Определяет, все ли элементы неизменяемого списка удовлетворяют условиям указанного предиката.</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions to check against the elements.">Делегат, который определяет условия, проверяемые для элементов.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">Значение <see langword="true" />, если каждый элемент неизменяемого списка удовлетворяет условиям указанного предиката; в противном случае — значение <see langword="false" />. Если в списке нет элементов, возвращается <see langword="true" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableQueue`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Содержит набор методов инициализации для экземпляров класса <see cref="T:System.Collections.Immutable.ImmutableQueue`1" />.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary vsli:raw="Creates an empty immutable queue.">Создает пустую неизменяемую очередь.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable queue.">Тип элементов, которые хранятся в неизменяемой очереди.</typeparam>
      <returns vsli:raw="An empty immutable queue.">Пустая неизменяемая очередь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable queue that contains the specified item.">Создает новую неизменяемую очередь, которая содержит указанный элемент.</summary>
      <param name="item" vsli:raw="The item to prepopulate the queue with.">Элемент, которым нужно заполнить очередь.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">Тип элементов неизменяемой очереди.</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified item.">Новая неизменяемая очередь, которая содержит указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable queue that contains the specified array of items.">Создает новую неизменяемую очередь, которая содержит указанный массив элементов.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the queue with.">Массив элементов, которыми нужно заполнить очередь.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable queue.">Тип элементов неизменяемой очереди.</typeparam>
      <returns vsli:raw="A new immutable queue that contains the specified items.">Новая неизменяемая очередь, которая содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable queue that contains the specified items.">Создает новую неизменяемую очередь, которая содержит указанные элементы.</summary>
      <param name="items" vsli:raw="The items to add to the queue before immutability is applied.">Элементы, которые нужно добавить в очередь, прежде чем она станет неизменяемой.</param>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">Тип элементов очереди.</typeparam>
      <returns vsli:raw="An immutable queue that contains the specified items.">Неизменяемая очередь, которая содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">Удаляет элемент из начала неизменяемой очереди и возвращает новую очередь.</summary>
      <param name="queue" vsli:raw="The queue to remove the item from.">Очередь, из которой нужно удалить элементы.</param>
      <param name="value" vsli:raw="When this method returns, contains the item from the beginning of the queue.">При возврате из метода содержит элемент из начала очереди.</param>
      <typeparam name="T" vsli:raw="The type of elements in the immutable queue.">Тип элементов неизменяемой очереди.</typeparam>
      <returns vsli:raw="The new queue with the item removed.">Новая очередь, из которой удален указанный элемент.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Стек является пустым.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary vsli:raw="Represents an immutable queue.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет неизменяемую очередь.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the queue.">Тип элементов очереди.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable queue.">Удаляет все объекты из неизменяемой очереди.</summary>
      <returns vsli:raw="The empty immutable queue.">Пустая неизменяемая очередь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">Удаляет элемент из начала неизменяемой очереди и возвращает новую очередь.</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">Новая неизменяемая очередь; никогда не принимает значение <c>null</c>.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">Очередь является пустой.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary vsli:raw="Removes the item at the beginning of the immutable queue, and returns the new queue.">Удаляет элемент из начала неизменяемой очереди и возвращает новую очередь.</summary>
      <param name="value" vsli:raw="When this method returns, contains the element from the beginning of the queue.">При возврате из метода содержит элемент из начала очереди.</param>
      <returns vsli:raw="The new immutable queue with the beginning element removed.">Новая неизменяемая очередь, из которой удален начальный элемент.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">Очередь является пустой.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary vsli:raw="Gets an empty immutable queue.">Возвращает пустую неизменяемую очередь.</summary>
      <returns vsli:raw="An empty immutable queue.">Пустая неизменяемая очередь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Добавляет элемент в конец неизменяемой очереди и возвращает новую очередь.</summary>
      <param name="value" vsli:raw="The element to add.">Добавляемый элемент.</param>
      <returns vsli:raw="The new immutable queue.">Новая неизменяемая очередь.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable queue without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Выполняет перечисление содержимого неизменяемой очереди без выделения дополнительной памяти.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Элемент, расположенный в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable queue.">Перемещает перечислитель к следующему элементу неизменяемой очереди.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the queue.">Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца очереди.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable queue.">Возвращает перечислитель, который выполняет перечисление элементов неизменяемой очереди.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the queue.">Перечислитель, который можно использовать для перечисления элементов очереди.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable queue is empty.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Возвращает значение, указывающее, является ли пустой эта неизменяемая очередь.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this queue is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если эта очередь пуста; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary vsli:raw="Returns the element at the beginning of the immutable queue without removing it.">Возвращает элемент из начала неизменяемой очереди, не удаляя его.</summary>
      <returns vsli:raw="The element at the beginning of the queue.">Элемент в начале очереди.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">Очередь является пустой.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element at the front of the queue.">Возвращает доступную только для чтения ссылку на элемент в начале очереди.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The queue is empty.">Очередь является пустой.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">Перечислитель, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">Объект <see cref="T:System.Collections.IEnumerator" />, который используется для прохода по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable queue.">Удаляет все элементы из неизменяемой очереди.</summary>
      <returns vsli:raw="The empty immutable queue.">Пустая неизменяемая очередь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary vsli:raw="Removes the element at the beginning of the immutable queue, and returns the new queue.">Удаляет элемент из начала неизменяемой очереди и возвращает новую очередь.</summary>
      <returns vsli:raw="The new immutable queue; never &lt;see langword=&quot;null&quot; /&gt;.">Новая неизменяемая очередь; никогда не принимает значение <c>null</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary vsli:raw="Adds an element to the end of the immutable queue, and returns the new queue.">Добавляет элемент в конец неизменяемой очереди и возвращает новую очередь.</summary>
      <param name="value" vsli:raw="The element to add.">Добавляемый элемент.</param>
      <returns vsli:raw="The new immutable queue.">Новая неизменяемая очередь.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Содержит набор методов инициализации для экземпляров класса <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" />.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary vsli:raw="Creates an empty immutable sorted dictionary.">Создает пустой неизменяемый отсортированный словарь.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Тип значений, которые хранятся в словаре.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Пустой неизменяемый отсортированный словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key comparer.">Создает пустой неизменяемый отсортированный словарь, который использует указанную функцию сравнения ключей.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Реализация, которую нужно использовать для определения равенства ключей в словаре.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Тип значений, которые хранятся в словаре.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Пустой неизменяемый отсортированный словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates an empty immutable sorted dictionary that uses the specified key and value comparers.">Создает пустой неизменяемый отсортированный словарь, который использует указанные функции сравнения ключей и значений.</summary>
      <param name="keyComparer" vsli:raw="The implementation to use to determine the equality of keys in the dictionary.">Реализация, которую нужно использовать для определения равенства ключей в словаре.</param>
      <param name="valueComparer" vsli:raw="The implementation to use to determine the equality of values in the dictionary.">Реализация, которую нужно использовать для определения равенства значений в словаре.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Тип значений, которые хранятся в словаре.</typeparam>
      <returns vsli:raw="An empty immutable sorted dictionary.">Пустой неизменяемый отсортированный словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Создает новый построитель неизменяемых отсортированных словарей.</summary>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Тип значений, которые хранятся в словаре.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Построитель неизменяемых коллекций.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Создает новый построитель неизменяемых отсортированных словарей.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Функция сравнения ключей.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Тип значений, которые хранятся в словаре.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Построитель неизменяемых коллекций.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Creates a new immutable sorted dictionary builder.">Создает новый построитель неизменяемых отсортированных словарей.</summary>
      <param name="keyComparer" vsli:raw="The key comparer.">Функция сравнения ключей.</param>
      <param name="valueComparer" vsli:raw="The value comparer.">Функция сравнения значений.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored by the dictionary.">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored by the dictionary.">Тип значений, которые хранятся в словаре.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Построитель неизменяемых коллекций.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key comparer.">Создает новый неизменяемый отсортированный словарь на основе заданного диапазона элементов с использованием указанной функции сравнения ключей.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to evaluate keys for equality and sorting.">Реализация функции сравнения, которую нужно использовать для проверки ключей на предмет равенства и при сортировке.</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary.">Элементы, которые нужно добавить в отсортированный словарь.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">Тип значений, которые хранятся в словаре.</typeparam>
      <returns vsli:raw="The new immutable sorted dictionary that contains the specified items and uses the specified key comparer.">Новый неизменяемый отсортированный словарь, который содержит заданные элементы и использует указанную функцию сравнения ключей.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates a new immutable sorted dictionary from the specified range of items with the specified key and value comparers.">Создает новый неизменяемый отсортированный словарь на основе заданного диапазона элементов с использованием указанных функций сравнения ключей и значений.</summary>
      <param name="keyComparer" vsli:raw="The comparer implementation to use to compare keys for equality and sorting.">Реализация функции сравнения, которую нужно использовать для проверки ключей на предмет равенства и при сортировке.</param>
      <param name="valueComparer" vsli:raw="The comparer implementation to use to compare values for equality.">Реализация функции сравнения, которую нужно использовать для проверки значений на предмет равенства и при сортировке.</param>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">Элементы, которые нужно добавить в отсортированный словарь, прежде чем он станет неизменяемым.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">Тип значений, которые хранятся в словаре.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items and uses the specified comparers.">Неизменяемый отсортированный словарь, который содержит заданные элементы и использует указанные функции сравнения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Creates an immutable sorted dictionary that contains the specified items and uses the default comparer.">Создает неизменяемый отсортированный словарь, который содержит заданные элементы и использует функцию сравнения по умолчанию.</summary>
      <param name="items" vsli:raw="The items to add to the sorted dictionary before it's immutable.">Элементы, которые нужно добавить в отсортированный словарь, прежде чем он станет неизменяемым.</param>
      <typeparam name="TKey" vsli:raw="The type of keys stored in the dictionary.">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values stored in the dictionary.">Тип значений, которые хранятся в словаре.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the specified items.">Неизменяемый отсортированный словарь, который содержит заданные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents.">Выполняет перечисление последовательности пар "ключ-значение" и создает неизменяемый отсортированный словарь на основе ее содержимого.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Последовательность пар "ключ-значение", для которой нужно выполнить перечисление.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Тип значений в словаре.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Неизменяемый отсортированный словарь, который содержит пары "ключ-значение" в указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.">Выполняет перечисление последовательности пар "ключ-значение" и создает на основе ее содержимого неизменяемый словарь с использованием указанной функции сравнения ключей.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Последовательность пар "ключ-значение", для которой нужно выполнить перечисление.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Функция сравнения ключей, которую нужно использовать при создании неизменяемого словаря.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Тип значений в словаре.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Неизменяемый отсортированный словарь, который содержит пары "ключ-значение" в указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">Выполняет перечисление последовательности пар "ключ-значение" и создает на основе ее содержимого неизменяемый отсортированный словарь с использованием указанных функций сравнения ключей и значений.</summary>
      <param name="source" vsli:raw="The sequence of key/value pairs to enumerate.">Последовательность пар "ключ-значение", для которой нужно выполнить перечисление.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use when building the immutable dictionary.">Функция сравнения ключей, которую нужно использовать при создании неизменяемого словаря.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the immutable dictionary.">Функция сравнения значений, которую нужно использовать в неизменяемом словаре.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Тип значений в словаре.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the key/value pairs in the specified sequence.">Неизменяемый отсортированный словарь, который содержит пары "ключ-значение" в указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary vsli:raw="Creates an immutable sorted dictionary from the current contents of the builder's dictionary.">Создает неизменяемый отсортированный словарь из текущего содержимого словаря построителя.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted dictionary from.">Построитель для создания неизменяемого отсортированного словаря.</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">Тип значений в словаре.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the current contents in the builder's dictionary.">Неизменяемый отсортированный словарь, содержащий текущее содержимое словаря построителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents.">Выполняет перечисление и преобразование последовательности и создает неизменяемый отсортированный словарь на основе ее содержимого.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Последовательность, перечисление которой нужно выполнить для создания словаря.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Функция, которая создает ключ для словаря на основе каждого элемента последовательности.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Функция, которая создает значение для словаря на основе каждого элемента последовательности.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Тип элементов последовательности.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Тип ключей в результирующем словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Тип значений в результирующем словаре.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">Неизменяемый отсортированный словарь, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key comparer.">Выполняет перечисление и преобразование последовательности и создает на основе ее содержимого неизменяемый отсортированный словарь с использованием указанной функции сравнения ключей.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Последовательность, перечисление которой нужно выполнить для создания словаря.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Функция, которая создает ключ для словаря на основе каждого элемента последовательности.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Функция, которая создает значение для словаря на основе каждого элемента последовательности.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Функция сравнения ключей, которую нужно использовать в словаре.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Тип элементов последовательности.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Тип ключей в результирующем словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Тип значений в результирующем словаре.</typeparam>
      <returns vsli:raw="An immutable dictionary that contains the items in the specified sequence.">Неизменяемый словарь, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary vsli:raw="Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.">Выполняет перечисление и преобразование последовательности и создает на основе ее содержимого неизменяемый отсортированный словарь с использованием указанных функций сравнения ключей и значений.</summary>
      <param name="source" vsli:raw="The sequence to enumerate to generate the dictionary.">Последовательность, перечисление которой нужно выполнить для создания словаря.</param>
      <param name="keySelector" vsli:raw="The function that will produce the key for the dictionary from each sequence element.">Функция, которая создает ключ для словаря на основе каждого элемента последовательности.</param>
      <param name="elementSelector" vsli:raw="The function that will produce the value for the dictionary from each sequence element.">Функция, которая создает значение для словаря на основе каждого элемента последовательности.</param>
      <param name="keyComparer" vsli:raw="The key comparer to use for the dictionary.">Функция сравнения ключей, которую нужно использовать в словаре.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use for the dictionary.">Функция сравнения значений, которую нужно использовать в словаре.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Тип элементов последовательности.</typeparam>
      <typeparam name="TKey" vsli:raw="The type of the keys in the resulting dictionary.">Тип ключей в результирующем словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the resulting dictionary.">Тип значений в результирующем словаре.</typeparam>
      <returns vsli:raw="An immutable sorted dictionary that contains the items in the specified sequence.">Неизменяемый отсортированный словарь, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary vsli:raw="Represents an immutable sorted dictionary.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет неизменяемый отсортированный словарь.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="TKey" vsli:raw="The type of the key contained in the dictionary.">Тип ключей, которые содержатся в словаре.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the value contained in the dictionary.">Тип значений, которые содержатся в словаре.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value to the immutable sorted dictionary.">Добавляет в отсортированный словарь элемент с указанными ключом и значением.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Ключ записи, которую требуется добавить.</param>
      <param name="value" vsli:raw="The value of entry to add.">Значение записи, которую нужно добавить.</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the additional key/value pair.">Новый неизменяемый отсортированный словарь, который содержит добавленную пару "ключ-значение".</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="The given key already exists in the dictionary but has a different value.">Данный ключ уже существует в словаре, но имеет другое значение.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds the specific key/value pairs to the immutable sorted dictionary.">Добавляет в неизменяемый отсортированный словарь указанные пары "ключ-значение".</summary>
      <param name="items" vsli:raw="The key/value pairs to add.">Пары "ключ-значение", которые нужно добавить.</param>
      <returns vsli:raw="A new immutable dictionary that contains the additional key/value pairs.">Новый неизменяемый словарь, который содержит добавленные пары "ключ-значение".</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="One of the given keys already exists in the dictionary but has a different value.">Один из указанных ключей уже существует в словаре, но имеет другое значение.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary vsli:raw="Represents a sorted dictionary that mutates with little or no memory allocations and that can produce or build on immutable sorted dictionary instances very efficiently.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет отсортированный словарь, для изменения которого не требуется выделение памяти (или выделяется небольшой объем) и с помощью которого можно эффективно создавать или конструировать экземпляры неизменяемых отсортированных словарей.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary vsli:raw="Adds an element that has the specified key and value to the immutable sorted dictionary.">Добавляет в неизменяемый отсортированный словарь элемент с указанными ключом и значением.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Ключ добавляемого элемента.</param>
      <param name="value" vsli:raw="The value of the element to add.">Добавляемое значение элемента.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified item to the immutable sorted dictionary.">Добавляет в неизменяемый отсортированный словарь указанный элемент.</summary>
      <param name="item" vsli:raw="The object to add to the dictionary.">Объект, который нужно добавить в словарь.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Adds a sequence of values to the immutable sorted dictionary.">Добавляет в неизменяемый отсортированный словарь последовательность значений.</summary>
      <param name="items" vsli:raw="The items to add to the dictionary.">Элементы, которые нужно добавить в словарь.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary vsli:raw="Removes all items from the immutable sorted dictionary.">Удаляет все элементы из неизменяемого отсортированного словаря.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains a specific value.">Определяет, содержится ли в неизменяемом отсортированном словаре указанное значение.</summary>
      <param name="item" vsli:raw="The object to locate in the dictionary.">Объект, который нужно найти в словаре.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если элемент <paramref name="item" /> найден в словаре; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified key.">Определяет, содержится ли в неизменяемом отсортированном словаре элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary.">Ключ, который нужно найти в словаре.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в словаре содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">Определяет, содержится ли в неизменяемом отсортированном словаре элемент с указанным значением.</summary>
      <param name="value" vsli:raw="The value to locate in the dictionary. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Значение, которое нужно найти в словаре. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable sorted dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в неизменяемом отсортированном словаре содержится элемент с указанным значением; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary vsli:raw="Gets the number of elements in this immutable sorted dictionary.">Возвращает количество элементов в неизменяемом отсортированном словаре.</summary>
      <returns vsli:raw="The number of elements in this dictionary.">Количество элементов в словаре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">Возвращает перечислитель, который выполняет перечисление элементов неизменяемого отсортированного словаря.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Перечислитель, который можно использовать для перечисления элементов словаря.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">Возвращает значение для указанного ключа, если такой ключ есть в словаре, либо значение по умолчанию.</summary>
      <param name="key" vsli:raw="The key to search for.">Ключ, который нужно найти.</param>
      <returns vsli:raw="The value for the key, or &lt;c&gt;default(TValue)&lt;/c&gt; if no matching key was found.">Значение для ключа или <c>default(TValue)</c>, если соответствующий ключ не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary vsli:raw="Gets the value for a given key if a matching key exists in the dictionary; otherwise the default value.">Возвращает значение для указанного ключа, если такой ключ есть в словаре, либо значение по умолчанию.</summary>
      <param name="key" vsli:raw="The key to search for.">Ключ, который нужно найти.</param>
      <param name="defaultValue" vsli:raw="The default value to return if no matching key is found in the dictionary.">Значение по умолчанию, которое нужно вернуть, если в словаре не найден соответствующий ключ.</param>
      <returns vsli:raw="The value for the key, or &lt;paramref name=&quot;defaultValue&quot; /&gt; if no matching key was found.">Значение для ключа или <paramref name="defaultValue" />, если такой ключ не найден.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary vsli:raw="Gets or sets the value for a specified key in the immutable sorted dictionary.">Возвращает или устанавливает значение для указанного ключа в неизменяемом отсортированном словаре.</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">Ключ, для которого нужно получить значение.</param>
      <returns vsli:raw="The value associated with the given key.">Значение, связанное с указанным ключом.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the key comparer.">Возвращает или задает функцию сравнения ключей.</summary>
      <returns vsli:raw="The key comparer.">Функция сравнения ключей.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary vsli:raw="Gets a strongly typed, read-only collection of elements.">Возвращает строго типизированную коллекцию элементов, доступную только для чтения.</summary>
      <returns vsli:raw="A strongly typed, read-only collection of elements.">Строго типизированная коллекция элементов, доступная только для чтения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the immutable sorted dictionary.">Удаляет из неизменяемого отсортированного словаря элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Ключ элемента, который требуется удалить.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original dictionary.">Значение <see langword="true" />, если элемент успешно удален; в противном случае — значение <see langword="false" />. Этот метод также возвращает значение <see langword="false" />, если <paramref name="key" /> не удалось найти в исходном словаре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific object from the immutable sorted dictionary.">Удаляет из неизменяемого отсортированного словаря первое вхождение указанного объекта.</summary>
      <param name="item" vsli:raw="The object to remove from the dictionary.">Объект, который нужно удалить из словаря.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the dictionary.">Значение <see langword="true" />, если объект <paramref name="item" /> успешно удален из словаря; в противном случае — значение <see langword="false" />. Этот метод также возвращает значение <see langword="false" />, если ключ <paramref name="item" /> не найден в словаре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes any entries with keys that match those found in the specified sequence from the immutable sorted dictionary.">Удаляет все записи с ключами, которые соответствуют содержащимся в указанной последовательности неизменяемого отсортированного словаря.</summary>
      <param name="keys" vsli:raw="The keys for entries to remove from the dictionary.">Ключи записей, которые нужно удалить из словаря.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Копирует элементы из словаря в массив начиная с определенного индекса в массиве.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Одномерный массив, в который копируются элементы словаря. Индекс в массиве должен начинаться с нуля.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Получает значение, определяющее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если доступ к классу <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Добавляет в объект словаря элемент с указанными ключом и значением.</summary>
      <param name="key" vsli:raw="The key of the element to add.">Ключ добавляемого элемента.</param>
      <param name="value" vsli:raw="The value of the element to add.">Добавляемое значение элемента.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the dictionary object contains an element with the specified key.">Определяет, содержится ли в объекте словаря элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key to locate.">Искомый ключ.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в словаре содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Возвращает объект <see cref="T:System.Collections.IDictionaryEnumerator" /> для словаря.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the dictionary.">Объект <see cref="T:System.Collections.IDictionaryEnumerator" /> для словаря.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Получает значение, указывающее, имеет ли объект <see cref="T:System.Collections.IDictionary" /> фиксированный размер.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если объект <see cref="T:System.Collections.IDictionary" /> имеет фиксированный размер, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Возвращает значение, которое определяет, является ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> доступной только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Возвращает или задает элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key.">Ключ.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Возвращает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the dictionary.">Удаляет из словаря элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Ключ элемента, который требуется удалить.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Возвращает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения из <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Объект перечислителя, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted dictionary based on the contents of this instance.">Создает неизменяемый отсортированный словарь на основе содержимого исходного экземпляра.</summary>
      <returns vsli:raw="An immutable sorted dictionary.">Неизменяемый отсортированный словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Определяет, содержится ли в словаре указанный ключ.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Ключ, который нужно найти.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Соответствующий ключ, расположенный в словаре, если он найден, или <c>equalkey</c>, если совпадений нет.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если найдено совпадение для <paramref name="equalKey" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Получает значение, связанное с заданным ключом.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Ключ, значение которого нужно получить.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">При возврате из метода содержит значение, связанное с указанным ключом, если он найден; в противном случае — значение по умолчанию для типа параметра <paramref name="value" />. Этот параметр передается неинициализированным.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object that implements the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объект, реализующий словарь, содержит элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary vsli:raw="Gets or sets the value comparer.">Возвращает или устанавливает функцию сравнения значений.</summary>
      <returns vsli:raw="The value comparer.">Функция сравнения значений.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">Возвращает доступную только для чтения ссылку на значение, связанное с предоставленным <paramref name="key" />.</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">
        <paramref name="key" /> отсутствует.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary vsli:raw="Gets a collection that contains the values of the immutable sorted dictionary.">Возвращает коллекцию, содержащую значения неизменяемого отсортированного словаря.</summary>
      <returns vsli:raw="A collection that contains the values of the object that implements the dictionary.">Коллекция значений из объекта, который реализует словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary vsli:raw="Retrieves an empty immutable sorted dictionary that has the same ordering and key/value comparison rules as this dictionary instance.">Возвращает пустой неизменяемый отсортированный словарь с теми же правилами упорядочения элементов и сравнения ключей и значений, что и в исходном экземпляре словаря.</summary>
      <returns vsli:raw="An empty dictionary with equivalent ordering and key/value comparison rules.">Пустой словарь с такими же правилами упорядочения элементов и сравнения ключей и значений.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether this immutable sorted dictionary contains the specified key/value pair.">Определяет, содержит ли неизменяемый отсортированный словарь указанные пары "ключ-значение".</summary>
      <param name="pair" vsli:raw="The key/value pair to locate.">Пара "ключ-значение", которую нужно найти.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified key/value pair is found in the dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если указанная пара "ключ-значение" найдена в словаре; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether this immutable sorted map contains the specified key.">Определяет, содержит ли неизменяемая отсортированная карта указанный ключ.</summary>
      <param name="key" vsli:raw="The key to locate.">Искомый ключ.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the immutable dictionary contains the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если неизменяемый словарь содержит заданный ключ; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the immutable sorted dictionary contains an element with the specified value.">Определяет, содержится ли в неизменяемом отсортированном словаре элемент с указанным значением.</summary>
      <param name="value" vsli:raw="The value to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">Значение, которое нужно найти. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в словаре содержится элемент с указанным значением; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs in the immutable sorted dictionary.">Возвращает количество пар "ключ-значение" в неизменяемом отсортированном словаре.</summary>
      <returns vsli:raw="The number of key/value pairs in the dictionary.">Количество пар "ключ-значение" в словаре.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary vsli:raw="Gets an empty immutable sorted dictionary.">Возвращает пустой неизменяемый отсортированный словарь.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Выполняет перечисление содержимого двоичного дерева.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Элемент, расположенный в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator&quot; /&gt; class.">Освобождает ресурсы, используемые текущим экземпляром класса <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted dictionary.">Перемещает перечислитель к следующему элементу неизменяемого отсортированного словаря.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted dictionary.">Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца отсортированного словаря.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted dictionary.">Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом словаря.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">Текущий элемент.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted dictionary.">Возвращает перечислитель, который выполняет перечисление элементов неизменяемого отсортированного словаря.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the dictionary.">Перечислитель, который можно использовать для перечисления элементов словаря.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable sorted dictionary is empty.">Возвращает значение, указывающее, является ли пустым этот экземпляр неизменяемого отсортированного словаря.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если этот экземпляр пуст; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;TValue&quot; /&gt; associated with the specified key.">Возвращает значение <paramref name="TValue" />, связанное с указанным ключом.</summary>
      <param name="key" vsli:raw="The key to retrieve the value for.">Ключ, для которого нужно получить значение.</param>
      <returns vsli:raw="The value associated with the specified key. If no results are found, the operation throws an exception.">Значение, связанное с указанным ключом. Если поиск не вернул результатов, операция вызывает исключение.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary vsli:raw="Gets the key comparer for the immutable sorted dictionary.">Возвращает функцию сравнения ключей для неизменяемого отсортированного словаря.</summary>
      <returns vsli:raw="The key comparer for the dictionary.">Функция сравнения ключей, которую нужно использовать в словаре.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary vsli:raw="Gets the keys in the immutable sorted dictionary.">Возвращает ключи неизменяемого отсортированного словаря.</summary>
      <returns vsli:raw="The keys in the immutable dictionary.">Ключи в неизменяемом словаре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified value from the immutable sorted dictionary.">Удаляет из неизменяемого отсортированного словаря элемент с указанным значением.</summary>
      <param name="value" vsli:raw="The value of the element to remove.">Значение элемента, который нужно удалить.</param>
      <returns vsli:raw="A new immutable dictionary with the specified element removed; or this instance if the specified value cannot be found in the dictionary.">Новый неизменяемый словарь, из которого удален указанный элемент, либо исходный экземпляр, если найти в нем указанное значение не удалось.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements with the specified keys from the immutable sorted dictionary.">Удаляет из неизменяемого отсортированного словаря элементы с указанными ключами.</summary>
      <param name="keys" vsli:raw="The keys of the elements to remove.">Ключи элементов, которые нужно удалить.</param>
      <returns vsli:raw="A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.">Новый неизменяемый словарь, из которого удалены указанные ключи, либо исходный экземпляр, если найти в нем ключи не удалось.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary vsli:raw="Sets the specified key and value in the immutable sorted dictionary, possibly overwriting an existing value for the given key.">Устанавливает в неизменяемом отсортированном словаре пару "ключ-значение" с возможной перезаписью существующего значения для указанного ключа.</summary>
      <param name="key" vsli:raw="The key of the entry to add.">Ключ записи, которую требуется добавить.</param>
      <param name="value" vsli:raw="The key value to set.">Значение ключа, которое нужно установить.</param>
      <returns vsli:raw="A new immutable sorted dictionary that contains the specified key/value pair.">Новый неизменяемый отсортированный словарь, который содержит указанную пару "ключ-значение".</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Sets the specified key/value pairs in the immutable sorted dictionary, possibly overwriting existing values for the keys.">Устанавливает в неизменяемом отсортированном словаре указанные пары "ключ-значение" с возможной перезаписью существующих значений для данных ключей.</summary>
      <param name="items" vsli:raw="The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.">Пары "ключ-значение", которые нужно установить в словаре. Если какой-то из ключей уже существует в словаре, этот метод перезапишет его текущее значение.</param>
      <returns vsli:raw="An immutable dictionary that contains the specified key/value pairs.">Неизменяемый словарь, который содержит указанные пары "ключ-значение".</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing." />
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="The object to use as the key of the element to add." />
      <param name="value" vsli:raw="The object to use as the value of the element to add." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" vsli:raw="The object to use as the key of the element to access." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="The key of the element to remove." />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the dictionary to an array, starting at a particular array index.">Копирует элементы из словаря в массив начиная с определенного индекса в массиве.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the dictionary. The array must have zero-based indexing.">Одномерный массив, в который копируются элементы словаря. Индекс в массиве должен начинаться с нуля.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Возвращает значение, показывающее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если доступ к <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the dictionary object.">Добавляет в объект словаря элемент с указанными ключом и значением.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">Объект, используемый в качестве ключа добавляемого элемента.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">Объект, используемый в качестве значения добавляемого элемента.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Clears this instance.">Очищает данный экземпляр.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The dictionary object is read-only.">Объект словаря доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the immutable dictionary object contains an element with the specified key.">Определяет, содержится ли в объекте неизменяемого словаря элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key to locate in the dictionary object.">Ключ, который нужно найти в объекте словаря.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в словаре содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; object for the immutable dictionary object.">Возвращает объект <see cref="T:System.Collections.IDictionaryEnumerator" /> для объекта неизменяемого словаря.</summary>
      <returns vsli:raw="An enumerator object for the dictionary object.">Объект перечислителя для объекта словаря.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size.">Получает значение, показывающее, имеет ли объект <see cref="T:System.Collections.IDictionary" /> фиксированный размер.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если объект <see cref="T:System.Collections.IDictionary" /> имеет фиксированный размер, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Получает значение, указывающее, является ли объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступным только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">Возвращает или задает элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key of the element to be accessed.">Ключ.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Возвращает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the immutable dictionary object.">Удаляет из объекта неизменяемого словаря элемент с указанным ключом.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">Ключ элемента, который требуется удалить.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Возвращает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения из <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the object that implements &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Объект перечислителя, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" vsli:raw="Key of the entry to be added." />
      <param name="value" vsli:raw="Value of the entry to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" vsli:raw="Sequence of key/value pairs to be added." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" vsli:raw="Key of entry to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" vsli:raw="Sequence of keys to be removed." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" vsli:raw="Key of entry to be updated." />
      <param name="value" vsli:raw="Value of entry to be updated." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" vsli:raw="A set of key-value pairs to set on the map." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary vsli:raw="Creates an immutable sorted dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.">Создает неизменяемый отсортированный словарь, который содержит те же объекты, что и исходный словарь, а также может эффективно изменяться различными операциями с использованием стандартных изменяемых интерфейсов.</summary>
      <returns vsli:raw="A collection with the same contents as this dictionary.">Коллекция с тем же содержимым, что и исходный словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary vsli:raw="Determines whether this dictionary contains a specified key.">Определяет, содержится ли в словаре указанный ключ.</summary>
      <param name="equalKey" vsli:raw="The key to search for.">Ключ, который нужно найти.</param>
      <param name="actualKey" vsli:raw="The matching key located in the dictionary if found, or &lt;c&gt;equalkey&lt;/c&gt; if no match is found.">Соответствующий ключ, расположенный в словаре, если он найден, или <c>equalkey</c>, если совпадений нет.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match for &lt;paramref name=&quot;equalKey&quot; /&gt; is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если найдено совпадение для <paramref name="equalKey" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">Получает значение, связанное с заданным ключом.</summary>
      <param name="key" vsli:raw="The key whose value will be retrieved.">Ключ, значение которого нужно получить.</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">При возврате из метода содержит значение, связанное с указанным ключом, если он найден; в противном случае — значение по умолчанию для типа параметра <paramref name="value" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dictionary contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в словаре содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary vsli:raw="Gets the value comparer used to determine whether values are equal.">Возвращает функцию сравнения значений, которая используется для определения их равенства.</summary>
      <returns vsli:raw="The value comparer used to determine whether values are equal.">Функция сравнения значений, которая используется для определения их равенства.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary vsli:raw="Returns a read-only reference to the value associated with the provided &lt;paramref name=&quot;key&quot; /&gt;.">Возвращает доступную только для чтения ссылку на значение, связанное с предоставленным <paramref name="key" />.</summary>
      <param name="key" vsli:raw="Key of the entry to be looked up." />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The &lt;paramref name=&quot;key&quot; /&gt; is not present.">
        <paramref name="key" /> отсутствует.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary vsli:raw="Gets the values in the immutable sorted dictionary.">Возвращает значения неизменяемого отсортированного словаря.</summary>
      <returns vsli:raw="The values in the dictionary.">Значения в словаре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key comparer.">Возвращает экземпляр неизменяемого отсортированного словаря, который использует указанную функцию сравнения ключей.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Функция сравнения ключей, которую нужно использовать.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparer.">Экземпляр неизменяемого словаря, который использует указанную функцию сравнения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary vsli:raw="Gets an instance of the immutable sorted dictionary that uses the specified key and value comparers.">Возвращает экземпляр неизменяемого отсортированного словаря, который использует указанные функции сравнения ключей и значений.</summary>
      <param name="keyComparer" vsli:raw="The key comparer to use.">Функция сравнения ключей, которую нужно использовать.</param>
      <param name="valueComparer" vsli:raw="The value comparer to use.">Функция сравнения значений, которую нужно использовать.</param>
      <returns vsli:raw="An instance of the immutable dictionary that uses the given comparers.">Экземпляр неизменяемого словаря, который использует указанные функцию сравнения.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Содержит набор методов инициализации для экземпляров класса <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" />.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary vsli:raw="Creates an empty immutable sorted set.">Создает пустой неизменяемый отсортированный набор.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable set.">Тип элементов, которые хранятся в неизменяемом наборе.</typeparam>
      <returns vsli:raw="An empty immutable sorted set.">Пустой неизменяемый отсортированный набор.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item.">Создает новый неизменяемый отсортированный набор, который содержит указанный элемент.</summary>
      <param name="item" vsli:raw="The item to prepopulate the set with.">Элемент, которым нужно заполнить набор.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Тип элементов неизменяемого набора.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">Новый неизменяемый набор, который содержит указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items.">Создает новый неизменяемый отсортированный набор, который содержит указанный массив элементов.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">Массив элементов, которыми нужно заполнить набор.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Тип элементов неизменяемого набора.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">Новый неизменяемый набор, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Creates an empty immutable sorted set that uses the specified comparer.">Создает пустой неизменяемый отсортированный набор, который использует указанную функцию сравнения.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">Реализация, которую нужно использовать при сравнении элементов набора.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Тип элементов неизменяемого набора.</typeparam>
      <returns vsli:raw="An empty immutable set.">Пустой неизменяемый набор.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified item and uses the specified comparer.">Создает новый неизменяемый отсортированный набор, который содержит указанный элемент и использует указанную функцию сравнения.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">Реализация, которую нужно использовать при сравнении элементов набора.</param>
      <param name="item" vsli:raw="The item to prepopulate the set with.">Элемент, которым нужно заполнить набор.</param>
      <typeparam name="T" vsli:raw="The type of items stored in the immutable set.">Тип элементов, которые хранятся в неизменяемом наборе.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified item.">Новый неизменяемый набор, который содержит указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary vsli:raw="Creates a new immutable sorted set that contains the specified array of items and uses the specified comparer.">Создает новый неизменяемый отсортированный набор, который содержит указанный массив элементов и использует указанную функцию сравнения.</summary>
      <param name="comparer" vsli:raw="The implementation to use when comparing items in the set.">Реализация, которую нужно использовать при сравнении элементов набора.</param>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the set with.">Массив элементов, которыми нужно заполнить набор.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable set.">Тип элементов неизменяемого набора.</typeparam>
      <returns vsli:raw="A new immutable set that contains the specified items.">Новый неизменяемый набор, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">Возвращает коллекцию, которую можно использовать для создания неизменяемого отсортированного набора.</summary>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns vsli:raw="The immutable collection builder.">Построитель неизменяемых коллекций.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Returns a collection that can be used to build an immutable sorted set.">Возвращает коллекцию, которую можно использовать для создания неизменяемого отсортированного набора.</summary>
      <param name="comparer" vsli:raw="The comparer used to compare items in the set for equality.">Функция сравнения, используемая для проверки элементов набора на предмет равенства.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns vsli:raw="The immutable collection.">Неизменяемая коллекция.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">Создает новую неизменяемую коллекцию, которая содержит указанные элементы.</summary>
      <param name="comparer" vsli:raw="The comparer to use to compare elements in this set.">Функция, которую нужно использовать для сравнения элементов набора.</param>
      <param name="items" vsli:raw="The items to add to the set before it's immutable.">Элементы, которые нужно добавить в набор, прежде чем он станет неизменяемым.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">Новый неизменяемый набор, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable collection that contains the specified items.">Создает новую неизменяемую коллекцию, которая содержит указанные элементы.</summary>
      <param name="items" vsli:raw="The items to add to the set with before it's immutable.">Элементы, которые нужно добавить в набор, прежде чем он станет неизменяемым.</param>
      <typeparam name="T" vsli:raw="The type of items stored by the collection.">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns vsli:raw="The new immutable set that contains the specified items.">Новый неизменяемый набор, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Enumerates a sequence and produces an immutable sorted set of its contents.">Выполняет перечисление последовательности и создает неизменяемый отсортированный набор на основе ее содержимого.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Перебираемая последовательность.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Тип элементов последовательности.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">Неизменяемый отсортированный набор, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary vsli:raw="Enumerates a sequence, produces an immutable sorted set of its contents, and uses the specified comparer.">Выполняет перечисление последовательности, создает неизменяемый отсортированный набор на основе ее содержимого и использует указанную функцию сравнения.</summary>
      <param name="source" vsli:raw="The sequence to enumerate.">Перебираемая последовательность.</param>
      <param name="comparer" vsli:raw="The comparer to use for initializing and adding members to the sorted set.">Функция сравнения, которую нужно использовать для инициализации и добавления элементов в отсортированный набор.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the sequence.">Тип элементов последовательности.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the items in the specified sequence.">Неизменяемый отсортированный набор, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary vsli:raw="Creates an immutable sorted set from the current contents of the builder's set.">Создает неизменяемый отсортированный набор из текущего содержимого набора построителя.</summary>
      <param name="builder" vsli:raw="The builder to create the immutable sorted set from.">Построитель для создания неизменяемого отсортированного набора.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements in the immutable sorted set.">Тип элементов в неизменяемом отсортированном наборе.</typeparam>
      <returns vsli:raw="An immutable sorted set that contains the current contents in the builder's set.">Неизменяемый отсортированный набор, содержащий текущее содержимое набора построителя.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary vsli:raw="Represents an immutable sorted set implementation.&#xA;&#xA;NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет реализацию неизменяемого отсортированного набора.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="The type of elements in the set.">Тип элементов в наборе.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified value to this immutable sorted set.">Добавляет в неизменяемый отсортированный набор указанное значение.</summary>
      <param name="value" vsli:raw="The value to add.">Значение для сложения.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in this set.">Новый набор, в который добавлен указанный элемент, или исходный набор, если элемент уже присутствует в нем.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary vsli:raw="Represents a sorted set that enables changes with little or no memory allocations, and efficiently manipulates or builds immutable sorted sets.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет отсортированный набор, для изменения которого не требуется выделение памяти (или выделяется небольшой объем) и с помощью которого можно эффективно выполнять операции с неизменяемыми отсортированными наборами или создавать их.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">Добавляет элемент в текущий набор и возвращает значение, указывающее, был ли элемент успешно добавлен.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Элемент, добавляемый в набор.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">Значение <see langword="true" />, если элемент добавлен в набор; значение <see langword="false" />, если элемент уже был в наборе.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary vsli:raw="Removes all elements from this set.">Удаляет из набора все элементы.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary vsli:raw="Determines whether the set contains the specified object.">Определяет, содержится ли в наборе указанный объект.</summary>
      <param name="item" vsli:raw="The object to locate in the set.">Объект, который нужно найти в наборе.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если элемент <paramref name="item" /> найден в наборе; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">Возвращает количество элементов в неизменяемом отсортированном наборе.</summary>
      <returns vsli:raw="The number of elements in this set.">Количество элементов в наборе.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the specified set of items from the current set.">Удаляет из текущего набора указанный набор элементов.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">Коллекция элементов, удаляемых из набора.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the set.">Возвращает перечислитель, который выполняет перечисление элементов набора.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the set.">Перечислитель, который можно использовать для перечисления элементов набора.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Изменяет текущий набор, чтобы он содержал только элементы, которые также имеются в заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) subset of a specified collection.">Определяет, является ли текущий набор должным (строгим) подмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является строгим подмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a proper (strict) superset of a specified collection.">Определяет, является ли текущий набор должным (строгим) подмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является строгим надмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a subset of a specified collection.">Определяет, является ли текущий набор подмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection is compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является подмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set is a superset of a specified collection.">Определяет, является ли текущий набор надмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является надмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the set at the given index.">Возвращает элемент из набора по указанному индексу.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Отсчитываемый от нуля индекс элемента в наборе, который необходимо вернуть.</param>
      <returns vsli:raw="The element at the given position.">Элемент в заданной позиции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference to the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Возвращает доступную только для чтения ссылку на элемент набора в заданной <paramref name="index" />.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Отсчитываемый от нуля индекс элемента в наборе, который необходимо вернуть.</param>
      <returns vsli:raw="A read-only reference to the element at the given position.">Доступная только для чтения ссылка на элемент в заданной позиции.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary vsli:raw="Gets or sets the object that is used to determine equality for the values in the immutable sorted set.">Возвращает или устанавливает объект, используемый для определения равенства значений в неизменяемом отсортированном наборе.</summary>
      <returns vsli:raw="The comparer that is used to determine equality for the values in the set.">Функция сравнения, используемая для проверки значений в наборе на предмет равенства.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">Возвращает максимальное значение в неизменяемом отсортированном наборе, получаемое с помощью функции сравнения.</summary>
      <returns vsli:raw="The maximum value in the set.">Максимальное значение в наборе.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">Возвращает минимальное значение в неизменяемом отсортированном наборе, получаемое с помощью функции сравнения.</summary>
      <returns vsli:raw="The minimum value in the set.">Минимальное значение в наборе.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set overlaps with the specified collection.">Определяет, пересекаются ли текущий набор и указанная коллекция.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в текущем наборе и объекте <paramref name="other" /> есть хотя бы один общий элемент; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified object from the set.">Удаляет из набора первое вхождение указанного объекта.</summary>
      <param name="item" vsli:raw="The object to remove from the set.">Объект, который нужно удалить из набора.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was removed from the set; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the set.">Значение <see langword="true" />, если элемент <paramref name="item" /> был удален из набора; значение <see langword="false" />, если элемент <paramref name="item" /> не найден в наборе.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary vsli:raw="Returns an enumerator that iterates over the immutable sorted set in reverse order.">Возвращает перечислитель, который выполняет перечисление элементов неизменяемого отсортированного набора в обратном порядке.</summary>
      <returns vsli:raw="An enumerator that iterates over the set in reverse order.">Перечислитель, который выполняет перечисление элементов набора в обратном порядке.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current set and the specified collection contain the same elements.">Определяет, содержат ли текущий набор и указанная коллекция одни и те же элементы.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор совпадает с коллекцией <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Изменяет текущий набор таким образом, чтобы он содержал только элементы, которые есть либо в нем, либо в указанной коллекции, но не одновременно там и там.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate whether the element was successfully added.">Добавляет элемент в текущий набор и возвращает значение, указывающее, был ли элемент успешно добавлен.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Элемент, добавляемый в набор.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">Копирует элементы коллекции в массив начиная с определенного индекса в массиве.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">Одномерный массив, куда копируются элементы из коллекции. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this instance is read-only.">Получает значение, указывающее, доступен ли данный экземпляр только для чтения.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">Всегда <c>имеет значение false</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">Перечислитель, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">Копирует элементы из набора в массив начиная с определенного индекса массива.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Одномерный массив, в который копируются элементы из набора. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe).">Получает значение, определяющее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, если доступ к <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns vsli:raw="A enumerator that can be used to iterate through the collection.">Перечислитель, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary vsli:raw="Creates an immutable sorted set based on the contents of this instance.">Создает неизменяемый отсортированный набор на основе содержимого исходного экземпляра.</summary>
      <returns vsli:raw="An immutable set.">Неизменяемый набор.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in both the current set and in the specified collection.">Изменяет текущий набор таким образом, чтобы он содержал все элементы, которые есть и в нем, и в указанной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current state.">Коллекция для сравнения с текущим состоянием.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary vsli:raw="Removes all elements from the immutable sorted set.">Удаляет все элементы из неизменяемого отсортированного набора.</summary>
      <returns vsli:raw="An empty set with the elements removed.">Пустой набор, из которого удалены элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether this immutable sorted set contains the specified value.">Определяет, содержит ли неизменяемый отсортированный набор указанное значение.</summary>
      <param name="value" vsli:raw="The value to check for.">Проверяемое значение.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если набор содержит указанное значение, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the immutable sorted set.">Возвращает количество элементов в неизменяемом отсортированном наборе.</summary>
      <returns vsli:raw="The number of elements in the immutable sorted set.">Количество элементов в неизменяемом отсортированном наборе.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary vsli:raw="Gets an empty immutable sorted set.">Возвращает пустой неизменяемый отсортированный набор.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of a binary tree.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Выполняет перечисление содержимого двоичного дерева.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Возвращает элемент, расположенный в текущей позиции перечислителя.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Элемент, расположенный в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases the resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Освобождает ресурсы, используемые текущим экземпляром класса <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" />.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Перемещает перечислитель к следующему элементу неизменяемого отсортированного набора.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the sorted set.">Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца отсортированного набора.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the immutable sorted set.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом неизменяемого отсортированного набора.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="The current element.">Текущий элемент.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes a specified set of items from this immutable sorted set.">Удаляет из неизменяемого отсортированного набора указанный набор элементов.</summary>
      <param name="other" vsli:raw="The items to remove from this set.">Элементы, которые нужно удалить из набора.</param>
      <returns vsli:raw="A new set with the items removed; or the original set if none of the items were in the set.">Новый набор, из которого удалены указанные элементы, или исходный набор, если таких элементов в нем не было.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable sorted set.">Возвращает перечислитель, который выполняет перечисление элементов неизменяемого отсортированного набора.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the set.">Перечислитель, который можно использовать для перечисления элементов набора.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary vsli:raw="Gets the position within this immutable sorted set that the specified value appears in.">Возвращает позицию указанного значения в неизменяемом отсортированном наборе.</summary>
      <param name="item" vsli:raw="The value whose position is being sought.">Значение, позицию которого нужно определить.</param>
      <returns vsli:raw="The index of the specified &lt;paramref name=&quot;item&quot; /&gt; in the sorted set, if &lt;paramref name=&quot;item&quot; /&gt; is found. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value. If &lt;paramref name=&quot;item&quot; /&gt; is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1.">Индекс указанного <paramref name="item" /> в отсортированном наборе, если этот <paramref name="item" /> найден. Если элемент <paramref name="item" /> не найден и его значение меньше одного или нескольких элементов набора, метод возвращает отрицательное число, которое является побитовым дополнением индекса первого элемента, превышающего по значению указанный элемент. Если элемент <paramref name="item" /> не найден и его значение больше любого из элементов набора, метод возвращает отрицательное число, которое является побитовым дополнением индекса последнего элемента плюс 1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist both in this set and in the specified set.">Создает неизменяемый отсортированный набор, который содержит элементы, существующие как в исходном, так и в указанном наборах.</summary>
      <param name="other" vsli:raw="The set to intersect with this one.">Набор для пересечения с исходным набором.</param>
      <returns vsli:raw="A new immutable sorted set that contains any elements that exist in both sets.">Новый неизменяемый отсортированный набор, который содержит все элементы, существующие в обоих наборах.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this immutable sorted set is empty.">Возвращает значение, указывающее, является ли пустым этот неизменяемый отсортированный набор.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this set is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если набор пуст; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection.">Определяет, является ли текущий неизменяемый отсортированный набор должным (строгим) подмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является строгим подмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a proper superset of a specified collection.">Определяет, является ли текущий неизменяемый отсортированный набор должным надмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является строгим надмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a subset of a specified collection.">Определяет, является ли текущий неизменяемый отсортированный набор подмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является подмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set is a superset of a specified collection.">Определяет, является ли текущий неизменяемый отсортированный набор надмножеством заданной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если текущий набор является надмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary vsli:raw="Gets the element of the immutable sorted set at the given index.">Возвращает элемент с указанным индексом из неизменяемого отсортированного набора.</summary>
      <param name="index" vsli:raw="The index of the element to retrieve from the sorted set.">Индекс элемента, который нужно извлечь из отсортированного набора.</param>
      <returns vsli:raw="The element at the given index.">Элемент с указанным индексом.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary vsli:raw="Gets a read-only reference of the element of the set at the given &lt;paramref name=&quot;index&quot; /&gt;.">Возвращает доступную только для чтения ссылку на элемент набора в заданной <paramref name="index" />.</summary>
      <param name="index" vsli:raw="The 0-based index of the element in the set to return.">Отсчитываемый от нуля индекс элемента в наборе, который необходимо вернуть.</param>
      <returns vsli:raw="A read-only reference of the element at the given position.">Доступная только для чтения ссылка на элемент в заданной позиции.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary vsli:raw="Gets the comparer used to sort keys in the immutable sorted set.">Возвращает функцию сравнения, которая используется для сортировки ключей в неизменяемом отсортированном наборе.</summary>
      <returns vsli:raw="The comparer used to sort keys.">Функция сравнения, которая используется для сортировки ключей.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary vsli:raw="Gets the maximum value in the immutable sorted set, as defined by the comparer.">Возвращает максимальное значение в неизменяемом отсортированном наборе, получаемое с помощью функции сравнения.</summary>
      <returns vsli:raw="The maximum value in the set.">Максимальное значение в наборе.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary vsli:raw="Gets the minimum value in the immutable sorted set, as defined by the comparer.">Возвращает минимальное значение в неизменяемом отсортированном наборе, получаемое с помощью функции сравнения.</summary>
      <returns vsli:raw="The minimum value in the set.">Минимальное значение в наборе.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and a specified collection share common elements.">Определяет, есть ли общие элементы в текущем неизменяемом отсортированном наборе и в указанной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current set and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в текущем наборе и объекте <paramref name="other" /> есть хотя бы один общий элемент; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified value from this immutable sorted set.">Удаляет из неизменяемого отсортированного набора указанное значение.</summary>
      <param name="value" vsli:raw="The element to remove.">Подлежащий удалению элемент.</param>
      <returns vsli:raw="A new immutable sorted set with the element removed, or this set if the element was not found in the set.">Новый неизменяемый отсортированный набор, из которого удален указанный элемент, или исходный набор, если элемент в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that iterates over this immutable sorted set in reverse order.">Возвращает объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который выполняет перечисление элементов неизменяемого отсортированного набора в обратном порядке.</summary>
      <returns vsli:raw="An enumerator that iterates over the immutable sorted set in reverse order.">Перечислитель, который выполняет перечисление элементов неизменяемого отсортированного набора в обратном порядке.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current immutable sorted set and the specified collection contain the same elements.">Определяет, содержат ли текущий неизменяемый отсортированный набор и указанная коллекция одни и те же элементы.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sets are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если наборы равны, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both.">Создает неизменяемый отсортированный набор, который содержит элементы, существующие либо в исходном наборе, либо в указанной последовательности, но не там и там одновременно.</summary>
      <param name="other" vsli:raw="The other sequence of items.">Другая последовательность элементов.</param>
      <returns vsli:raw="The new immutable sorted set.">Новый неизменяемый отсортированный словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds the specified value to the collection.">Добавляет в коллекцию указанное значение.</summary>
      <param name="item" vsli:raw="The value to add.">Значение для сложения.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary vsli:raw="Removes all the items from the collection.">Удаляет из коллекции все элементы.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">Копирует элементы коллекции в массив начиная с определенного индекса в массиве.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from collection. The array must have zero-based indexing.">Одномерный массив, куда копируются элементы из коллекции. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Returns true, since immutable collections are always read-only. See the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; interface.">См. интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">Удаляет первое вхождение конкретного объекта из коллекции.</summary>
      <param name="item" vsli:raw="The object to remove from the collection.">Объект, который должен быть удален из коллекции.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если элемент <paramref name="item" /> был успешно удален из коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an item in the set at the specified index.">Вставляет элемент в набор по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="item" />.</param>
      <param name="item" vsli:raw="The object to insert into the set.">Объект, который нужно вставить в набор.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary vsli:raw="See the &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; interface.">См. интерфейс <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to access." />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">Удаляет элемент с указанным индексом.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Отсчитываемый от нуля индекс удаляемого элемента.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary vsli:raw="Adds an element to the current set and returns a value to indicate if the element was successfully added.">Добавляет элемент в текущий набор и возвращает значение, указывающее, что элемент был добавлен успешно.</summary>
      <param name="item" vsli:raw="The element to add to the set.">Элемент, добавляемый в набор.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the set; &lt;see langword=&quot;false&quot; /&gt; if the element is already in the set.">Значение <see langword="true" />, если элемент добавлен в набор; значение <see langword="false" />, если элемент уже был в наборе.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current set.">Удаляет все элементы указанной коллекции из текущего набора.</summary>
      <param name="other" vsli:raw="The collection of items to remove from the set.">Коллекция элементов, удаляемых из набора.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are also in a specified collection.">Изменяет текущий набор таким образом, чтобы он содержал только элементы, которые также есть в указанной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both.">Изменяет текущий набор таким образом, чтобы он содержал только элементы, которые есть либо в нем, либо в указанной коллекции, но не одновременно там и там.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current set so that it contains all elements that are present in either the current set or the specified collection.">Изменяет текущий набор таким образом, чтобы он содержал все элементы, которые есть либо в нем, либо в указанной коллекции.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the set to an array, starting at a particular array index.">Копирует элементы из набора в массив начиная с определенного индекса массива.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the set. The array must have zero-based indexing.">Одномерный массив, в который копируются элементы из набора. Индекс в массиве должен начинаться с нуля.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Returns true, since immutable collections are always thread-safe. See the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; interface.">См. интерфейс <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="See &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">См. раздел <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns vsli:raw="An enumerator object that can be used to iterate through the collection.">Объект перечислителя, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the set.">Добавляет элемент в набор.</summary>
      <param name="value" vsli:raw="The object to add to the set.">Объект, который нужно добавить в набор.</param>
      <returns vsli:raw="The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.">Позиция, в которую вставлен новый элемент, или значение -1, если элемент не вставлен в коллекцию.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">Набор доступен только для чтения или имеет фиксированный размер.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the set.">Удаляет все элементы из набора.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Thrown in all cases.">Создается во всех случаях.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the set contains a specific value.">Определяет, содержит ли набор указанное значение.</summary>
      <param name="value" vsli:raw="The object to locate in the set.">Объект, который нужно найти в наборе.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is found in the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если объект найден в наборе; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the set.">Определяет индекс указанного элемента в наборе.</summary>
      <param name="value" vsli:raw="The object to locate in the set.">Объект, который нужно найти в наборе.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">Индекс <paramref name="value" />, если он найден в списке; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the set at the specified index.">Вставляет элемент в набор по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="value" />.</param>
      <param name="value" vsli:raw="The object to insert into the set.">Объект, который нужно вставить в набор.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">Набор доступен только для чтения или имеет фиксированный размер.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Возвращает значение, показывающее, имеет ли объект <see cref="T:System.Collections.IList" /> фиксированный размер.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если словарь <see cref="T:System.Collections.IList" /> имеет фиксированный размер; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">Возвращает значение, которое определяет, является ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> доступной только для чтения.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Object&quot; /&gt; at the specified index.">Возвращает или задает объект <see cref="T:System.Object" /> с заданным индексом.</summary>
      <param name="index" vsli:raw="The index.">Индекс.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt;.">
        <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the set.">Удаляет из набора первый экземпляр указанного объекта.</summary>
      <param name="value" vsli:raw="The object to remove from the set.">Объект, который нужно удалить из набора.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">Набор доступен только для чтения или имеет фиксированный размер.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index of the set.">Удаляет из набора элемент по указанному индексу.</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">Отсчитываемый от нуля индекс удаляемого элемента.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The set is read-only or has a fixed size.">Набор доступен только для чтения или имеет фиксированный размер.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary vsli:raw="Adds the specified element to this immutable set.">Добавляет в неизменяемый набор указанный элемент.</summary>
      <param name="value" vsli:raw="The element to add.">Добавляемый элемент.</param>
      <returns vsli:raw="A new set with the element added, or this set if the element is already in the set.">Новый набор, в который добавлен указанный элемент, или исходный набор, если элемент уже присутствует в нем.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary vsli:raw="Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.">Возвращает пустой неизменяемый набор с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</summary>
      <returns vsli:raw="An empty set that has the same sorting and ordering semantics as this instance.">Пустой набор с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes the elements in the specified collection from the current immutable set.">Удаляет из текущего неизменяемого набора все элементы указанной коллекции.</summary>
      <param name="other" vsli:raw="The items to remove from this set.">Элементы, которые нужно удалить из набора.</param>
      <returns vsli:raw="The new set with the items removed; or the original set if none of the items were in the set.">Новый набор, из которого удалены указанные элементы, или исходный набор, если таких элементов в нем не было.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains elements that exist in both this set and the specified set.">Создает неизменяемый набор, который содержит элементы, существующие как в исходном, так и в указанном наборах.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="A new immutable set that contains any elements that exist in both sets.">Новый неизменяемый набор, который содержит все элементы, существующие в обоих наборах.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary vsli:raw="Removes the specified element from this immutable set.">Удаляет указанный элемент из неизменяемого набора.</summary>
      <param name="value" vsli:raw="The element to remove.">Подлежащий удалению элемент.</param>
      <returns vsli:raw="A new set with the specified element removed, or the current set if the element cannot be found in the set.">Новый набор, из которого удален указанный элемент, или текущий набор, если элемент в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.">Создает неизменяемый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</summary>
      <param name="other" vsli:raw="The collection to compare to the current set.">Коллекция для сравнения с текущим набором.</param>
      <returns vsli:raw="A new set that contains the elements that are present only in the current set or in the specified collection, but not both.">Новый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.">Создает новый неизменяемый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции.</summary>
      <param name="other" vsli:raw="The collection to add elements from.">Коллекция, из которой нужно добавить элементы.</param>
      <returns vsli:raw="A new immutable set with the items added; or the original set if all the items were already in the set.">Новый неизменяемый набор, в который добавлены элементы, или исходный набор, если все элементы уже есть в нем.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary vsli:raw="Creates a collection that has the same contents as this immutable sorted set that can be efficiently manipulated by using standard mutable interfaces.">Создает коллекцию, которая содержит те же объекты, что и неизменяемый отсортированный словарь, и с которой можно эффективно выполнять операции с использованием стандартных изменяемых интерфейсов.</summary>
      <returns vsli:raw="The sorted set builder.">Построитель отсортированного набора.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">Выполняет поиск указанного значения в наборе и возвращает равное ему значение, если его удалось найти.</summary>
      <param name="equalValue" vsli:raw="The value to search for.">Значение, которое нужно найти.</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the original value if the search yielded no match.">Значение, найденное в наборе, либо исходное значение, если поиск не вернул результатов.</param>
      <returns vsli:raw="A value indicating whether the search was successful.">Значение, указывающее, успешно ли был выполнен поиск.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds a given set of items to this immutable sorted set.">Добавляет в неизменяемый отсортированный набор указанный набор элементов.</summary>
      <param name="other" vsli:raw="The items to add.">Добавляемые элементы.</param>
      <returns vsli:raw="The new set with the items added; or the original set if all the items were already in the set.">Новый набор, в который добавлены элементы, или исходный набор, если все элементы уже есть в нем.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Returns the immutable sorted set that has the specified key comparer.">Возвращает неизменяемый отсортированный набор с указанной функцией сравнения ключей.</summary>
      <param name="comparer" vsli:raw="The comparer to check for.">Функция сравнения ключей, которую нужно проверить.</param>
      <returns vsli:raw="The immutable sorted set that has the specified key comparer.">Неизменяемый отсортированный набор с указанной функцией сравнения ключей.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary vsli:raw="Provides a set of initialization methods for instances of the &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableStack`1&quot; /&gt; class.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Содержит набор методов инициализации для экземпляров класса <see cref="T:System.Collections.Immutable.ImmutableStack`1" />.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary vsli:raw="Creates an empty immutable stack.">Создает пустой неизменяемый стек.</summary>
      <typeparam name="T" vsli:raw="The type of items to be stored in the immutable stack.">Тип элементов, которые хранятся в неизменяемом стеке.</typeparam>
      <returns vsli:raw="An empty immutable stack.">Пустой неизменяемый стек.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary vsli:raw="Creates a new immutable stack that contains the specified item.">Создает новый неизменяемый стек, который содержит указанный элемент.</summary>
      <param name="item" vsli:raw="The item to prepopulate the stack with.">Элемент, которым нужно заполнить стек.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">Тип элементов неизменяемого стека.</typeparam>
      <returns vsli:raw="A new immutable collection that contains the specified item.">Новая неизменяемая коллекция, которая содержит указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary vsli:raw="Creates a new immutable stack that contains the specified array of items.">Создает новый неизменяемый стек, который содержит указанный массив элементов.</summary>
      <param name="items" vsli:raw="An array that contains the items to prepopulate the stack with.">Массив элементов, которыми нужно заполнить стек.</param>
      <typeparam name="T" vsli:raw="The type of items in the immutable stack.">Тип элементов неизменяемого стека.</typeparam>
      <returns vsli:raw="A new immutable stack that contains the specified items.">Новый неизменяемый стек, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates a new immutable stack that contains the specified items.">Создает новый неизменяемый стек, который содержит указанные элементы.</summary>
      <param name="items" vsli:raw="The items to add to the stack before it's immutable.">Элементы, которые нужно добавить в стек, прежде чем он станет неизменяемым.</param>
      <typeparam name="T" vsli:raw="The type of items in the stack.">Тип элементов стека.</typeparam>
      <returns vsli:raw="An immutable stack that contains the specified items.">Неизменяемый стек, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary vsli:raw="Removes the specified item from an immutable stack.">Удаляет из неизменяемого стека указанный элемент.</summary>
      <param name="stack" vsli:raw="The stack to modify.">Стек, в который вносятся изменения.</param>
      <param name="value" vsli:raw="The item to remove from the stack.">Элемент, который нужно удалить из стека.</param>
      <typeparam name="T" vsli:raw="The type of items contained in the stack.">Тип элементов стека.</typeparam>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Стек; никогда не принимает значения <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Стек является пустым.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary vsli:raw="Represents an immutable stack.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Представляет неизменяемый стек.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="The type of element on the stack.">Тип элемента в стеке.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary vsli:raw="Removes all objects from the immutable stack.">Удаляет все объекты из неизменяемого стека.</summary>
      <returns vsli:raw="An empty immutable stack.">Пустой неизменяемый стек.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary vsli:raw="Gets an empty immutable stack.">Возвращает пустой неизменяемый стек.</summary>
      <returns vsli:raw="An empty immutable stack.">Пустой неизменяемый стек.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary vsli:raw="Enumerates the contents of an immutable stack without allocating any memory.  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Выполняет перечисление содержимого неизменяемого стека без выделения дополнительной памяти.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns vsli:raw="The element at the current position of the enumerator.">Элемент, расположенный в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the immutable stack.">Перемещает перечислитель к следующему элементу неизменяемого стека.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the stack.">Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца стека.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the immutable stack.">Возвращает перечислитель, который выполняет перечисление элементов неизменяемого стека.</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the stack.">Перечислитель, который можно использовать для перечисления элементов стека.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of the immutable stack is empty.">Возвращает значение, указывающее, является ли пустым этот экземпляр неизменяемого стека.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если этот экземпляр пуст; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary vsli:raw="Returns the object at the top of the stack without removing it.">Возвращает верхний объект стека, не удаляя его.</summary>
      <returns vsli:raw="The object at the top of the stack.">Верхний объект стека.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Стек является пустым.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary vsli:raw="Gets a read-only reference to the element on the top of the stack.">Возвращает доступную только для чтения ссылку на элемент в начале стека.</summary>
      <returns vsli:raw="A read-only reference to the element on the top of the stack.">Доступная только для чтения ссылка на элемент в начале стека.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Вызывается, если стек пуст.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the stack after the removal.">Удаляет верхний элемент из неизменяемого стека и возвращает стек после удаления.</summary>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Стек; никогда не принимает значения <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The stack is empty.">Стек является пустым.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary vsli:raw="Removes the specified element from the immutable stack and returns the stack after the removal.">Удаляет указанный элемент из неизменяемого стека и возвращает стек после удаления.</summary>
      <param name="value" vsli:raw="The value to remove from the stack.">Значение, которое необходимо удалить из стека.</param>
      <returns vsli:raw="A stack; never &lt;see langword=&quot;null&quot; /&gt;.">Стек; никогда не принимает значения <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the immutable stack and returns the new stack.">Добавляет верхний объект в неизменяемый стек и возвращает новый стек.</summary>
      <param name="value" vsli:raw="The object to push onto the stack.">Объект, который нужно поместить в стек.</param>
      <returns vsli:raw="The new stack.">Новый стек.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns vsli:raw="An enumerator  that can be used to iterate through the collection.">Перечислитель, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">Объект <see cref="T:System.Collections.IEnumerator" />, который используется для прохода по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary vsli:raw="Removes all elements from the immutable stack.">Удаляет все элементы из неизменяемого стека.</summary>
      <returns vsli:raw="The empty immutable stack.">Пустой неизменяемый стек.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary vsli:raw="Removes the element at the top of the immutable stack and returns the new stack.">Удаляет верхний элемент из неизменяемого стека и возвращает новый стек.</summary>
      <returns vsli:raw="The new stack; never &lt;see langword=&quot;null&quot; /&gt;.">Новый стек; никогда не принимает значения <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary vsli:raw="Inserts an element at the top of the immutable stack and returns the new stack.">Добавляет верхний элемент в неизменяемый стек и возвращает новый стек.</summary>
      <param name="value" vsli:raw="The element to push onto the stack.">Элемент, который нужно поместить в стек.</param>
      <returns vsli:raw="The new stack.">Новый стек.</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary vsli:raw="LINQ extension method overrides that offer greater efficiency for &lt;see cref=&quot;T:System.Collections.Immutable.ImmutableArray`1&quot; /&gt; than the standard LINQ methods  &#xA;  &#xA; NuGet package: System.Collections.Immutable (about immutable collections and how to install)">Переопределения методов расширения LINQ, которые более эффективны при работе с объектами <see cref="T:System.Collections.Immutable.ImmutableArray`1" />, чем стандартные методы LINQ. 
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Агрегатным образом применяет к последовательности элементов функцию.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">Коллекция, к которой нужно применить функцию.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Функция, вызываемая агрегатным образом для каждого элемента.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The final value after the cumulative function has been applied to all elements.">Окончательное значение после применения агрегатной функции ко всем элементам.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Агрегатным образом применяет к последовательности элементов функцию.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">Коллекция, к которой нужно применить функцию.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Начальное агрегатное значение.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Функция, вызываемая агрегатным образом для каждого элемента.</param>
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">Тип агрегатного значения.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The final accumulator value.">Конечное агрегатное значение.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary vsli:raw="Applies a function to a sequence of elements in a cumulative way.">Агрегатным образом применяет к последовательности элементов функцию.</summary>
      <param name="immutableArray" vsli:raw="The collection to apply the function to.">Коллекция, к которой нужно применить функцию.</param>
      <param name="seed" vsli:raw="The initial accumulator value.">Начальное агрегатное значение.</param>
      <param name="func" vsli:raw="A function to be invoked on each element, in a cumulative way.">Функция, вызываемая агрегатным образом для каждого элемента.</param>
      <param name="resultSelector" vsli:raw="A function to transform the final accumulator value into the result type." />
      <typeparam name="TAccumulate" vsli:raw="The type of the accumulated value.">Тип агрегатного значения.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of result returned by the result selector.">Тип результата, возвращенного селектором результатов.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The final accumulator value.">Конечное агрегатное значение.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether all elements in this array match a given condition.">Возвращает значение, указывающее, отвечают ли все элементы массива заданному условию.</summary>
      <param name="immutableArray" vsli:raw="The array to check for matches.">Проверяемый массив.</param>
      <param name="predicate" vsli:raw="The predicate.">Предикат.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element of the source sequence passes the test in the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если каждый элемент исходной последовательности прошел проверку, заданную указанным предикатом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements.">Возвращает значение, указывающее, содержит ли массив какие-либо элементы.</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">Массив, проверяемый на наличие элементов.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array contains an elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в массиве содержатся элементы; в противном случае — значение <see langword="false" /> .</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Gets a value indicating whether the array contains any elements that match a specified condition.">Возвращает значение, указывающее, содержит ли массив какие-либо элементы, отвечающие заданному условию.</summary>
      <param name="immutableArray" vsli:raw="The array to check for elements.">Массив, проверяемый на наличие элементов.</param>
      <param name="predicate" vsli:raw="The delegate that defines the condition to match to an element.">Делегат, определяющий условия проверки элементов.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element matches the specified condition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если элемент соответствует указанному условию; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns a value indicating whether this collection contains any elements.">Возвращает значение, указывающее, содержит ли коллекция какие-либо элементы.</summary>
      <param name="builder" vsli:raw="The builder to check for matches.">Проверяемый построитель.</param>
      <typeparam name="T" vsli:raw="The type of elements in the array.">Тип элементов в массиве.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the array builder contains any elements; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если в построителе массивов содержатся элементы; в противном случае — значение <see langword="false" /> .</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in the array.">Возвращает элемент массива по указанному индексу.</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">Массив, в котором нужно найти элемент.</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">Индекс извлекаемого элемента.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The item at the specified index.">Элемент по заданному индексу.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary vsli:raw="Returns the element at a specified index in a sequence or a default value if the index is out of range.">Возвращает элемент последовательности по указанному индексу или значение по умолчанию, если индекс вне допустимого диапазона.</summary>
      <param name="immutableArray" vsli:raw="The array to find an element in.">Массив, в котором нужно найти элемент.</param>
      <param name="index" vsli:raw="The index for the element to retrieve.">Индекс извлекаемого элемента.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The item at the specified index, or the default value if the index is not found.">Элемент по указанному индексу либо значение по умолчанию, если индекс не найден.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element in an array.">Возвращает первый элемент массива.</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">Массив, из которого извлекается элемент.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The first item in the array.">Первый элемент массива.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Если массив пуст.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element in a sequence that satisfies a specified condition.">Возвращает первый элемент последовательности, удовлетворяющий указанному условию.</summary>
      <param name="immutableArray" vsli:raw="The array to get an item from.">Массив, из которого извлекается элемент.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The first item in the list if it meets the condition specified by &lt;paramref name=&quot;predicate&quot; /&gt;.">Первый элемент списка, если он соответствует условию <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Если массив пуст.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection.">Возвращает первый элемент коллекции.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an item from.">Построитель, из которого извлекается элемент.</param>
      <typeparam name="T" vsli:raw="The type of items in the array.">Тип элементов массива.</typeparam>
      <returns vsli:raw="The first item in the list.">Первый элемент списка.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the array is empty.">Если массив пуст.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the first element of a sequence, or a default value if the sequence contains no elements.">Возвращает первый элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">Массив, из которого извлекаются элементы.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">Первый элемент списка, если он найден; в противном случае — значение по умолчанию для данного типа элементов.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.">Возвращает первый элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">Массив, из которого извлекаются элементы.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">Первый элемент списка, если он найден; в противном случае — значение по умолчанию для данного типа элементов.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the first element in the collection, or the default value if the collection is empty.">Возвращает первый элемент коллекции либо значение по умолчанию, если коллекция пуста.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">Построитель, из которого извлекается элемент.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">Тип элементов построителя.</typeparam>
      <returns vsli:raw="The first item in the list, if found; otherwise the default value for the item type.">Первый элемент списка, если он найден; в противном случае — значение по умолчанию для данного типа элементов.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of the array.">Возвращает последний элемент массива.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">Массив, из которого извлекаются элементы.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the array.">Тип элементов массива.</typeparam>
      <returns vsli:raw="The last element in the array.">Последний элемент массива.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Возникает, если коллекция пуста.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a specified condition.">Возвращает последний элемент последовательности, удовлетворяющий указанному условию.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve elements from.">Массив, из которого извлекаются элементы.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to retrieve.">Делегат, определяющий условия для извлекаемого элемента.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The last element of the array that satisfies the &lt;paramref name=&quot;predicate&quot; /&gt; condition.">Последний элемент массива, удовлетворяющий <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Возникает, если коллекция пуста.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection.">Возвращает последний элемент коллекции.</summary>
      <param name="builder" vsli:raw="The builder to retrieve elements from.">Построитель, из которого извлекаются элементы.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">Тип элементов построителя.</typeparam>
      <returns vsli:raw="The last element in the builder.">Последний элемент построителя.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection is empty.">Возникает, если коллекция пуста.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the last element of a sequence, or a default value if the sequence contains no elements.">Возвращает последний элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve items from.">Массив, из которого извлекаются элементы.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">Последний элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.">Возвращает последний элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve an element from.">Массив, из которого извлекается элемент.</param>
      <param name="predicate" vsli:raw="The delegate that defines the conditions of the element to search for.">Делегат, определяющий условия поиска элемента.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">Последний элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary vsli:raw="Returns the last element in the collection, or the default value if the collection is empty.">Возвращает последний элемент коллекции либо значение по умолчанию, если коллекция пуста.</summary>
      <param name="builder" vsli:raw="The builder to retrieve an element from.">Построитель, из которого извлекается элемент.</param>
      <typeparam name="T" vsli:raw="The type of item in the builder.">Тип элементов построителя.</typeparam>
      <returns vsli:raw="The last element of a sequence, or a default value if the sequence contains no elements.">Последний элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary vsli:raw="Projects each element of a sequence into a new form.">Проецирует каждый элемент последовательности в новую форму.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to select items from.">Неизменяемый массив, из которого нужно выбрать элементы.</param>
      <param name="selector" vsli:raw="A transform function to apply to each element.">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the result element.">Тип результирующего элемента.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result of invoking the transform function on each element of source.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразователя для каждого элемента исходного объекта.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary vsli:raw="Projects each element of a sequence to an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;,             flattens the resulting sequences into one sequence, and invokes a result             selector function on each element therein.">Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, объединяет результирующие последовательности в одну и вызывает функцию селектора результата для каждого элемента этой последовательности.</summary>
      <param name="immutableArray" vsli:raw="The immutable array.">Неизменяемый массив.</param>
      <param name="collectionSelector" vsli:raw="A transform function to apply to each element of the input sequence.">Функция преобразования, применяемая к каждому элементу входной последовательности.</param>
      <param name="resultSelector" vsli:raw="A transform function to apply to each element of the intermediate sequence.">Функция преобразования, применяемая к каждому элементу промежуточной последовательности.</param>
      <typeparam name="TSource" vsli:raw="The type of the elements of &lt;paramref name=&quot;immutableArray&quot; /&gt;.">Тип элементов <paramref name="immutableArray" />.</typeparam>
      <typeparam name="TCollection" vsli:raw="The type of the intermediate elements collected by &lt;paramref name=&quot;collectionSelector&quot; /&gt;.">Тип промежуточных элементов, собранных функцией <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult" vsli:raw="The type of the elements of the resulting sequence.">Тип элементов результирующей последовательности.</typeparam>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are the result             of invoking the one-to-many transform function &lt;paramref name=&quot;collectionSelector&quot; /&gt; on each             element of &lt;paramref name=&quot;immutableArray&quot; /&gt; and then mapping each of those sequence elements and their             corresponding source element to a result element.">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования "один ко многим" <paramref name="collectionSelector" /> для каждого элемента последовательности <paramref name="immutableArray" /> и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему исходного элемента с результирующим элементом.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Определяет, совпадают ли две последовательности, используя функцию сравнения на равенство.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">Массив, используемый для сравнения.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Элементы, используемые для сравнения.</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">Функция сравнения, которую нужно использовать для проверки на равенство.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">Тип элементов сравниваемого массива.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если последовательности равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Определяет, совпадают ли две последовательности, используя функцию сравнения на равенство.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">Массив, используемый для сравнения.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Элементы, используемые для сравнения.</param>
      <param name="comparer" vsli:raw="The comparer to use to check for equality.">Функция сравнения, которую нужно использовать для проверки на равенство.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">Тип элементов сравниваемого массива.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если последовательности равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary vsli:raw="Determines whether two sequences are equal according to an equality comparer.">Определяет, совпадают ли две последовательности, используя функцию сравнения на равенство.</summary>
      <param name="immutableArray" vsli:raw="The array to use for comparison.">Массив, используемый для сравнения.</param>
      <param name="items" vsli:raw="The items to use for comparison.">Элементы, используемые для сравнения.</param>
      <param name="predicate" vsli:raw="The comparer to use to check for equality.">Функция сравнения, которую нужно использовать для проверки на равенство.</param>
      <typeparam name="TDerived" vsli:raw="The type of element in the compared array.">Тип элементов сравниваемого массива.</typeparam>
      <typeparam name="TBase" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the sequences are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Значение <see langword="true" />, если последовательности равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.">Возвращает единственный элемент последовательности и вызывает исключение, если число элементов последовательности отлично от одного.</summary>
      <param name="immutableArray" vsli:raw="The array to retrieve the element from.">Массив, из которого извлекается элемент.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The element in the sequence.">Элемент последовательности.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.">Возвращает единственный элемент последовательности, удовлетворяющий указанному условию, и вызывает исключение, если таких элементов больше одного.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to return a single element from." />
      <param name="predicate" vsli:raw="The function to test whether an element should be returned." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">Возвращает <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Returns the only element of the array, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.">Возвращает единственный элемент массива или значение по умолчанию, если последовательность пуста; если в последовательности более одного элемента, вызывается исключение.</summary>
      <param name="immutableArray" vsli:raw="The array.">Массив.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The element in the array, or the default value if the array is empty.">Элемент массива либо значение по умолчанию, если массив пуст.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; contains more than one element.">
        <paramref name="source" /> содержит больше одного элемента.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.">Возвращает единственный элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если такого элемента не существует; если условию удовлетворяет более одного элемента, вызывается исключение.</summary>
      <param name="immutableArray" vsli:raw="The array to get the element from.">Массив, из которого извлекается элемент.</param>
      <param name="predicate" vsli:raw="The condition the element must satisfy.">Условие, которому должен удовлетворять элемент.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The element if it satisfies the specified condition; otherwise the default element.">Элемент, если он удовлетворяет указанному условию; в противном случае — элемент по умолчанию.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="More than one element satisfies the condition in &lt;paramref name=&quot;predicate&quot; /&gt;.">Условию предиката <paramref name="predicate" /> удовлетворяет более одного элемента.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary vsli:raw="Copies the contents of this array to a mutable array.">Копирует содержимое исходного массива в изменяемый массив.</summary>
      <param name="immutableArray" vsli:raw="The immutable array to copy into a mutable one." />
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The newly instantiated array.">Новый экземпляр массива.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Создает словарь на основе содержимого исходного массива.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Массив, на основе которого создается словарь.</param>
      <param name="keySelector" vsli:raw="The key selector.">Селектор ключей.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Тип ключа.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Новый инициализированный словарь.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Создает словарь на основе содержимого исходного массива.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Массив, на основе которого создается словарь.</param>
      <param name="keySelector" vsli:raw="The key selector.">Селектор ключей.</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">Функция сравнения, с помощью инициализируется словарь.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Тип ключа.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Новый инициализированный словарь.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Создает словарь на основе содержимого исходного массива.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Массив, на основе которого создается словарь.</param>
      <param name="keySelector" vsli:raw="The key selector.">Селектор ключей.</param>
      <param name="elementSelector" vsli:raw="The element selector.">Селектор элементов.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Тип ключа.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">Тип элемента.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Новый инициализированный словарь.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary vsli:raw="Creates a dictionary based on the contents of this array.">Создает словарь на основе содержимого исходного массива.</summary>
      <param name="immutableArray" vsli:raw="The array to create a dictionary from.">Массив, на основе которого создается словарь.</param>
      <param name="keySelector" vsli:raw="The key selector.">Селектор ключей.</param>
      <param name="elementSelector" vsli:raw="The element selector.">Селектор элементов.</param>
      <param name="comparer" vsli:raw="The comparer to initialize the dictionary with.">Функция сравнения, с помощью инициализируется словарь.</param>
      <typeparam name="TKey" vsli:raw="The type of the key.">Тип ключа.</typeparam>
      <typeparam name="TElement" vsli:raw="The type of the element.">Тип элемента.</typeparam>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="The newly initialized dictionary.">Новый инициализированный словарь.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary vsli:raw="Filters a sequence of values based on a predicate.">Выполняет фильтрацию последовательности значений на основе заданного предиката.</summary>
      <param name="immutableArray" vsli:raw="The array to filter.">Массив, который нужно отфильтровать.</param>
      <param name="predicate" vsli:raw="The condition to use for filtering the array content.">Условие, которое нужно использовать для фильтрации содержимого массива.</param>
      <typeparam name="T" vsli:raw="The type of element contained by the collection.">Тип элементов коллекции.</typeparam>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that contains elements that meet the condition.">Возвращает объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы, удовлетворяющие условию.</returns>
    </member>
  </members>
</doc>
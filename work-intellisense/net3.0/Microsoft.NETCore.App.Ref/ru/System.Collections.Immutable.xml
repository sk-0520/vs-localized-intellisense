<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary>Представляет неизменяемую коллекцию пар "ключ-значение".  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="TKey">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue">Тип значений в словаре.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary>Добавляет в словарь элемент с указанными ключом и значением.</summary>
      <param name="key">Ключ добавляемого элемента.</param>
      <param name="value">Добавляемое значение элемента.</param>
      <returns>Новый неизменяемый словарь, который содержит добавленную пару "ключ-значение".</returns>
      <exception cref="T:System.ArgumentException">Данный ключ уже существует в словаре, но имеет другое значение.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Добавляет в словарь указанные пары "ключ-значение".</summary>
      <param name="pairs">Пары "ключ-значение", которые нужно добавить.</param>
      <returns>Новый неизменяемый словарь, который содержит добавленные пары "ключ-значение".</returns>
      <exception cref="T:System.ArgumentException">Один из указанных ключей уже существует в словаре, но имеет другое значение.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary>Возвращает пустой словарь с теми же правилами упорядочения элементов и сравнения ключей и значений, что и в исходном экземпляре словаря.</summary>
      <returns>Пустой словарь с такими же правилами упорядочения элементов и сравнения ключей и значений.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Определяет, содержит ли неизменяемый словарь указанную пару "ключ-значение".</summary>
      <param name="pair">Пара "ключ-значение", которую нужно найти.</param>
      <returns>Значение <see langword="true" />, если указанная пара "ключ-значение" найдена в словаре; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary>Удаляет из неизменяемого словаря элемент с указанным ключом.</summary>
      <param name="key">Ключ элемента, который требуется удалить.</param>
      <returns>Новый неизменяемый словарь, из которого удален указанный элемент, либо исходный экземпляр, если найти в нем указанный ключ не удалось.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет из неизменяемого словаря элементы с указанными ключами.</summary>
      <param name="keys">Ключи элементов, которые нужно удалить.</param>
      <returns>Новый неизменяемый словарь, из которого удалены указанные ключи, либо исходный экземпляр, если найти в нем ключи не удалось.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary>Устанавливает в неизменяемом словаре пару "ключ-значение" с возможной перезаписью существующего значения для данного ключа.</summary>
      <param name="key">Ключ записи, которую требуется добавить.</param>
      <param name="value">Значение ключа, которое нужно установить.</param>
      <returns>Новый неизменяемый словарь, который содержит указанную пару "ключ-значение".</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Устанавливает в неизменяемом словаре указанные пары "ключ-значение" с возможной перезаписью существующих значений для данных ключей.</summary>
      <param name="items">Пары "ключ-значение", которые нужно установить в словаре. Если какой-то из ключей уже существует в словаре, этот метод перезапишет его текущее значение.</param>
      <returns>Новый неизменяемый словарь, который содержит указанные пары "ключ-значение".</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>Определяет, содержится ли в словаре указанный ключ.</summary>
      <param name="equalKey">Ключ, который нужно найти.</param>
      <param name="actualKey">Соответствующий ключ, расположенный в словаре, если он найден, или <c>equalkey</c>, если совпадений нет.</param>
      <returns>Значение <see langword="true" />, если найдено совпадение для <paramref name="equalKey" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary>Представляет список элементов, которые невозможно изменить.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T">Тип элементов в списке.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary>Создает копию списка и добавляет указанный объект в ее конец.</summary>
      <param name="value">Объект, который нужно добавить в список.</param>
      <returns>Новый список с добавленным объектом.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Создает копию списка и добавляет указанные объекты в ее конец.</summary>
      <param name="items">Объект, который нужно добавить в список.</param>
      <returns>Новый список с добавленными элементами.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary>Создает список, из которого удалены все элементы и в котором используется те же правила сортировки и упорядочения, что и в исходном списке.</summary>
      <returns>Пустой список с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов списка <see cref="T:System.Collections.Immutable.IImmutableList`1" />, начинающемся с заданного индекса и содержащем указанное число элементов.</summary>
      <param name="item">Объект для поиска в <see cref="T:System.Collections.Immutable.IImmutableList`1" />. Для ссылочных типов допускается значение null.</param>
      <param name="index">Индексы (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <param name="count">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска объекта <paramref name="item" />.</param>
      <returns>Отсчитываемый от нуля индекс первого вхождения объекта <paramref name="item" /> в диапазоне элементов списка <see cref="T:System.Collections.Immutable.IImmutableList`1" />, который начинается с позиции <paramref name="index" /> и содержит <paramref name="count" /> элементов, если искомый объект найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary>Вставляет указанный элемент в неизменяемый список по указанному индексу.</summary>
      <param name="index">Отсчитываемый с нуля индекс, по которому нужно вставить значение.</param>
      <param name="element">Вставляемый объект.</param>
      <returns>Новый неизменяемый список с указанным элементом.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Вставляет указанные элементы в неизменяемый список по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс места вставки новых элементов.</param>
      <param name="items">Вставляемые элементы.</param>
      <returns>Новый неизменяемый список с указанными элементами.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс последнего вхождения в диапазоне элементов списка <see cref="T:System.Collections.Immutable.IImmutableList`1" />, содержащем указанное число элементов и заканчивающемся в позиции с указанным индексом.</summary>
      <param name="item">Объект, который нужно найти в списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="index">Индекс (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <param name="count">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска объекта <paramref name="item" />.</param>
      <returns>Возвращает <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Удаляет первое вхождение указанного объекта из неизменяемого списка.</summary>
      <param name="value">Объект, который нужно удалить из списка.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска объекта <paramref name="value" />.</param>
      <returns>Новый список, из которого удален указанный объект.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>Удаляет все элементы, удовлетворяющие условиям указанного предиката.</summary>
      <param name="match">Делегат, определяющий условия удаления элементов.</param>
      <returns>Новый неизменяемый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary>Удаляет из неизменяемого списка элемент с указанным индексом.</summary>
      <param name="index">Индекс элемента, который должен быть удален.</param>
      <returns>Новый список, из которого удален указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Удаляет из списка указанный объект.</summary>
      <param name="items">Объект, который нужно удалить из списка.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для сравнения объекта <paramref name="items" /> с элементами списка.</param>
      <returns>Новый неизменяемый список, из которого удалены указанные элементы, если для объекта <paramref name="items" /> были найдены совпадения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Удаляет диапазон элементов из списка <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</summary>
      <param name="index">Отсчитываемый от нуля индекс начала диапазона элементов, которые требуется удалить.</param>
      <param name="count">Число удаляемых элементов.</param>
      <returns>Новый неизменяемый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Возвращает новый список, в котором первый совпадающий элемент заменен указанным элементом.</summary>
      <param name="oldValue">Элемент, который нужно заменить.</param>
      <param name="newValue">Элемент, которым нужно заменить первое вхождение объекта <paramref name="oldValue" />.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска объекта <paramref name="oldValue" />.</param>
      <returns>Новый список, который содержит элемент <paramref name="newValue" />, даже если объекты <paramref name="oldvalue" /> и <paramref name="newValue" /> идентичны.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> не существует в списке.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary>Заменяет элемент списка в заданной позиции указанным элементом.</summary>
      <param name="index">Позиция элемента, который нужно заменить.</param>
      <param name="value">Элемент, которым нужно заменить старый элемент.</param>
      <returns>Новый список, который содержит новый элемент, даже если он идентичен элементу в указанной позиции.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary>Представляет неизменяемую коллекцию объектов, основанную на принципе ФИФО.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T">Тип элементов очереди.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary>Возвращает новую очередь, из которой удалены все элементы.</summary>
      <returns>Пустая неизменяемая очередь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary>Удаляет из неизменяемой очереди первый элемент и возвращает новую очередь.</summary>
      <returns>Новая неизменяемая очередь, из которой удален первый элемент. Это значение не может быть равно <c>null</c>.</returns>
      <exception cref="T:System.InvalidOperationException">Очередь является пустой.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary>Добавляет элемент в конец неизменяемой очереди и возвращает новую очередь.</summary>
      <param name="value">Добавляемый элемент.</param>
      <returns>Новая неизменяемая очередь, в которую добавлен указанный элемент.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary>Возвращает значение, указывающее, является ли пустой эта неизменяемая очередь.</summary>
      <returns>Значение <see langword="true" />, если эта очередь пуста; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary>Возвращает элемент из начала неизменяемой очереди, не удаляя его.</summary>
      <returns>Элемент в начале очереди.</returns>
      <exception cref="T:System.InvalidOperationException">Очередь является пустой.</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary>Представляет набор элементов, которые можно изменить только путем создания нового экземпляра набора.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T">Тип элементов, которые хранятся в наборе.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary>Добавляет в неизменяемый набор указанный элемент.</summary>
      <param name="value">Добавляемый элемент.</param>
      <returns>Новый набор, в который добавлен указанный элемент, или исходный набор, если элемент уже присутствует в нем.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary>Возвращает пустой неизменяемый набор с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</summary>
      <returns>Пустой набор с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary>Определяет, содержит ли неизменяемый набор указанный элемент.</summary>
      <param name="value">Элемент, который требуется найти в наборе.</param>
      <returns>Значение <see langword="true" />, если набор содержит указанное значение, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет из текущего неизменяемого набора все элементы указанной коллекции.</summary>
      <param name="other">Коллекция элементов, удаляемых из набора.</param>
      <returns>Новый набор, из которого удалены указанные элементы, или исходный набор, если таких элементов в нем не было.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Создает неизменяемый набор, который содержит только элементы, существующие как в исходном, так и в указанном наборах.</summary>
      <param name="other">Коллекция для сравнения с текущим объектом <see cref="T:System.Collections.Immutable.IImmutableSet`1" />.</param>
      <returns>Новый неизменяемый набор, который содержит элементы, существующие в обоих наборах.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий неизменяемый набор должным (строгим) подмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является строгим подмножеством указанной коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий набор должным (строгим) надмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является строгим надмножеством указанной коллекции; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий неизменяемый набор подмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является подмножеством указанной коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий неизменяемый набор надмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является надмножеством указанной коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, пересекаются ли текущий неизменяемый набор и указанная коллекция.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если в текущем наборе и указанной коллекции есть хотя бы один общий элемент; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary>Удаляет указанный элемент из неизменяемого набора.</summary>
      <param name="value">Подлежащий удалению элемент.</param>
      <returns>Новый набор, из которого удален указанный элемент, или текущий набор, если элемент в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, содержат ли текущий неизменяемый набор и указанная коллекция одни и те же элементы.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если наборы равны, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Создает неизменяемый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Новый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary>Определяет, содержит ли набор указанное значение.</summary>
      <param name="equalValue">Значение, которое нужно найти.</param>
      <param name="actualValue">Соответствующее значение из набора, если оно найдено, или <c>equalvalue</c>, если совпадений нет.</param>
      <returns>Значение <see langword="true" />, если соответствующее значение найдено; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Создает новый неизменяемый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции.</summary>
      <param name="other">Коллекция, из которой нужно добавить элементы.</param>
      <returns>Новый неизменяемый набор, в который добавлены элементы, или исходный набор, если все элементы уже есть в нем.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary>Представляет неизменяемую коллекцию объектов, основанную на принципе ЛИФО.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T">Тип элементов стека.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary>Удаляет все объекты из неизменяемого стека.</summary>
      <returns>Пустой неизменяемый стек.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary>Возвращает значение, указывающее, является ли пустым этот неизменяемый стек.</summary>
      <returns>Значение <see langword="true" />, если стек пуст; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary>Возвращает верхний элемент неизменяемого стека, не удаляя его.</summary>
      <returns>Верхний элемент стека.</returns>
      <exception cref="T:System.InvalidOperationException">Стек является пустым.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary>Удаляет верхний элемент из неизменяемого стека и возвращает новый стек.</summary>
      <returns>Новый стек; никогда не принимает значение <c>null</c></returns>
      <exception cref="T:System.InvalidOperationException">Стек является пустым.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary>Добавляет верхний элемент в неизменяемый стек и возвращает новый стек.</summary>
      <param name="value">Элемент, который нужно поместить в стек.</param>
      <returns>Новый стек.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary>Содержит методы для создания неизменяемого массива (это означает, что изменить его после создания невозможно).  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary>Выполняет поиск указанного элемента в отсортированном неизменяемом массиве с использованием функции сравнения по умолчанию и в случае успеха возвращает индекс этого элемента, отсчитываемый от нуля.</summary>
      <param name="array">Отсортированный массив, в котором выполняется поиск.</param>
      <param name="value">Объект, который нужно найти.</param>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns>Отсчитываемый от нуля индекс элемента в массиве, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="value" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> не реализует <see cref="T:System.IComparable" /> или поиск обнаруживает элемент, который не реализует <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary>Выполняет поиск указанного элемента в отсортированном неизменяемом массиве и в случае успеха возвращает индекс этого элемента, отсчитываемый от нуля.</summary>
      <param name="array">Отсортированный массив, в котором выполняется поиск.</param>
      <param name="value">Объект, который нужно найти.</param>
      <param name="comparer">Реализация функции сравнения, которую нужно использовать при проверке элементов, или null, если следует использовать функцию сравнения по умолчанию.</param>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns>Отсчитываемый от нуля индекс элемента в массиве, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="value" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> имеет значение null и <paramref name="value" /> не реализует <see cref="T:System.IComparable" /> или поиск обнаруживает элемент, который не реализует <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary>Выполняет поиск указанного элемента в отсортированном неизменяемом массиве и в случае успеха возвращает индекс этого элемента, отсчитываемый от нуля.</summary>
      <param name="array">Отсортированный массив, в котором выполняется поиск.</param>
      <param name="index">Начальный индекс диапазона поиска.</param>
      <param name="length">Длина диапазона поиска.</param>
      <param name="value">Объект, который нужно найти.</param>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns>Отсчитываемый от нуля индекс элемента в массиве, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="value" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> не реализует <see cref="T:System.IComparable" /> или поиск обнаруживает элемент, который не реализует <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> и <paramref name="length" /> не указывают допустимый диапазон в <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> меньше нижней границы массива <paramref name="array" />.
-или-
Значение параметра <paramref name="length" /> меньше нуля.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>Выполняет поиск указанного элемента в отсортированном неизменяемом массиве и возвращает индекс этого элемента, отсчитываемый от нуля.</summary>
      <param name="array">Отсортированный массив, в котором выполняется поиск.</param>
      <param name="index">Начальный индекс диапазона поиска.</param>
      <param name="length">Длина диапазона поиска.</param>
      <param name="value">Объект, который нужно найти.</param>
      <param name="comparer">Функция сравнения, которую нужно использовать при проверке элементов на предмет равенства, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию.</param>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns>Отсчитываемый от нуля индекс элемента в массиве, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="value" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> имеет значение null и <paramref name="value" /> не реализует <see cref="T:System.IComparable" /> или поиск обнаруживает элемент, который не реализует <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> и <paramref name="length" /> не указывают допустимый диапазон в <paramref name="array" />.

или -

<paramref name="comparer" /> имеет значение <see langword="null" />, и <paramref name="value" /> относится к типу, который несовместим с элементами <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> меньше нижней границы массива <paramref name="array" />.

или -

Значение параметра <paramref name="length" /> меньше нуля.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary>Создает пустой неизменяемый массив.</summary>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns>Пустой неизменяемый массив.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary>Создает неизменяемый массив, который содержит указанный объект.</summary>
      <param name="item">Объект, который нужно сохранить в массиве.</param>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns>Неизменяемый массив, который содержит указанные объекты.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary>Создает неизменяемый массив, который содержит указанные объекты.</summary>
      <param name="item1">Первый объект, который нужно сохранить в массиве.</param>
      <param name="item2">Второй объект, который нужно сохранить в массиве.</param>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns>Неизменяемый массив, который содержит указанные объекты.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary>Создает неизменяемый массив, который содержит указанные объекты.</summary>
      <param name="item1">Первый объект, который нужно сохранить в массиве.</param>
      <param name="item2">Второй объект, который нужно сохранить в массиве.</param>
      <param name="item3">Третий объект, который нужно сохранить в массиве.</param>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns>Неизменяемый массив, который содержит указанные объекты.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary>Создает неизменяемый массив, который содержит указанные объекты.</summary>
      <param name="item1">Первый объект, который нужно сохранить в массиве.</param>
      <param name="item2">Второй объект, который нужно сохранить в массиве.</param>
      <param name="item3">Третий объект, который нужно сохранить в массиве.</param>
      <param name="item4">Четвертый объект, который нужно сохранить в массиве.</param>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns>Неизменяемый массив, который содержит указанные объекты.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary>Создает неизменяемый массив на основе указанного массива объектов.</summary>
      <param name="items">Массив объектов, которыми нужно заполнить массив.</param>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns>Неизменяемый массив, который содержит указанный массив объектов.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary>Создает неизменяемый массив, который содержит указанные объекты из другого массива.</summary>
      <param name="items">Исходный массив объектов.</param>
      <param name="start">Индекс первого элемента, который нужно скопировать из <paramref name="items" />.</param>
      <param name="length">Количество элементов из <paramref name="items" />, которые нужно добавить в этот неизменяемый массив.</param>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns>Неизменяемый массив, который содержит указанные объекты из исходного массива.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary>Создает неизменяемый массив, который содержит указанные объекты из другого неизменяемого массива.</summary>
      <param name="items">Исходный массив объектов.</param>
      <param name="start">Индекс первого элемента, который нужно скопировать из <paramref name="items" />.</param>
      <param name="length">Количество элементов из <paramref name="items" />, которые нужно добавить в этот неизменяемый массив.</param>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns>Неизменяемый массив, который содержит указанные объекты из исходного массива.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary>Создает изменяемый массив, который можно преобразовать в <see cref="T:System.Collections.Immutable.ImmutableArray" /> без выделения новой памяти.</summary>
      <typeparam name="T">Тип элементов, которые хранятся в построителе.</typeparam>
      <returns>Изменяемый массив указанного типа, который можно эффективно преобразовать в неизменяемый.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary>Создает изменяемый массив, который можно преобразовать в <see cref="T:System.Collections.Immutable.ImmutableArray" /> без выделения новой памяти.</summary>
      <param name="initialCapacity">Начальная емкость построителя.</param>
      <typeparam name="T">Тип элементов, которые хранятся в построителе.</typeparam>
      <returns>Изменяемый массив указанного типа, который можно эффективно преобразовать в неизменяемый.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Создает новый экземпляр <see cref="T:System.Collections.Immutable.ImmutableArray`1" />, заполненный указанными элементами.</summary>
      <param name="items">Элементы, которые нужно добавить в массив.</param>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns>Неизменяемый массив, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">Исходный массив, с которым необходимо инициализировать результирующий массив.</param>
      <param name="selector">Функция, которую необходимо применить к каждому элементу в исходном массиве.</param>
      <typeparam name="TSource" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">Исходный массив, с которым необходимо инициализировать результирующий массив.</param>
      <param name="start">Индекс первого элемента в исходном массиве, который необходимо включить в результирующий массив.</param>
      <param name="length">Количество элементов из исходного массива, которые нужно добавить в результирующий.</param>
      <param name="selector">Функция, которую необходимо применить к каждому элементу исходного массива, включенному в результирующий массив.</param>
      <typeparam name="TSource" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">Исходный массив, с которым необходимо инициализировать результирующий массив.</param>
      <param name="selector">Функция, которую необходимо применить к каждому элементу в исходном массиве.</param>
      <param name="arg">Аргумент, который необходимо передать в функцию сопоставления селектора.</param>
      <typeparam name="TSource" />
      <typeparam name="TArg" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">Исходный массив, с которым необходимо инициализировать результирующий массив.</param>
      <param name="start">Индекс первого элемента в исходном массиве, который необходимо включить в результирующий массив.</param>
      <param name="length">Количество элементов из исходного массива, которые нужно добавить в результирующий.</param>
      <param name="selector">Функция, которую необходимо применить к каждому элементу исходного массива, включенному в результирующий массив.</param>
      <param name="arg">Аргумент, который необходимо передать в функцию сопоставления селектора.</param>
      <typeparam name="TSource" />
      <typeparam name="TArg" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Создает неизменяемый массив на основе указанной коллекции.</summary>
      <param name="items">Коллекция объектов, которые нужно скопировать в неизменяемый массив.</param>
      <typeparam name="TSource">Количество элементов в <paramref name="items" />.</typeparam>
      <returns>Неизменяемый массив, который содержит указанную коллекцию объектов.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Создает неизменяемый массив из текущего содержимого массива построителя.</summary>
      <param name="builder">Построитель для создания неизменяемого массива.</param>
      <typeparam name="TSource">Тип элементов, содержащихся в неизменяемом массиве.</typeparam>
      <returns>Неизменяемый массив, содержащий текущее содержимое массива построителя.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary>Представляет неизменяемый массив (это означает, что изменить его после создания невозможно).  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary>Возвращает копию исходного массива, в конец которого добавлен указанный элемент.</summary>
      <param name="item">Элемент, который нужно добавить в конец массива.</param>
      <returns>Новый массив, в конец которого добавлен указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Возвращает копию исходного массива, в конец которого добавлены указанные элементы.</summary>
      <param name="items">Элементы, которые нужно добавить в массив.</param>
      <returns>Новый массив, в который добавлены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Возвращает копию исходного массива, в конец которого добавлены указанные элементы.</summary>
      <param name="items">Элементы, которые нужно добавить в массив.</param>
      <returns>Новый массив, в который добавлены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary>Возвращает новый неизменяемый массив, который содержит элементы исходного массива. приведенные к другому типу.</summary>
      <typeparam name="TOther">Тип элементов возвращаемого массива.</typeparam>
      <returns>Неизменяемый массив, который содержит элементы исходного массива. приведенные к другому типу. Если выполнить приведение не удается, возвращает массив, свойство <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> которого имеет значение <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary>Создает новую область памяти только для чтения над этим неизменяемым массивом.</summary>
      <returns>Представление этого неизменяемого массива в памяти, доступной только для чтения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary>Создает новый диапазон только для чтения над этим неизменяемым массивом.</summary>
      <returns>Представление этого неизменяемого массива в диапазоне, доступном только для чтения.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary>Записываемый метод доступа к массиву, который можно преобразовать в экземпляр <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> без выделения дополнительной памяти.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary>Добавляет в массив указанный элемент.</summary>
      <param name="item">Объект, добавляемый в массив.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary>Добавляет указанные элементы в конец массива.</summary>
      <param name="items">Элементы, которые нужно добавить в массив.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary>Добавляет указанные элементы в конец массива.</summary>
      <param name="items">Элементы, которые нужно добавить в массив.</param>
      <param name="length">Количество элементов исходного массива, которые нужно добавить.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Добавляет указанные элементы в конец массива.</summary>
      <param name="items">Элементы, которые нужно добавить в массив.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Добавляет указанные элементы в конец массива.</summary>
      <param name="items">Элементы, которые нужно добавить в массив.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary>Добавляет указанные элементы в конец массива.</summary>
      <param name="items">Элементы, которые нужно добавить в массив.</param>
      <param name="length">Количество элементов исходного массива, которые нужно добавить.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary>Добавляет указанные элементы в конец массива.</summary>
      <param name="items">Элементы, которые нужно добавить в массив.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary>Добавляет в конец массива указанные элементы, производные от текущего типа элементов массива.</summary>
      <param name="items">Элементы, которые нужно добавить в конец массива.</param>
      <typeparam name="TDerived">Тип, производный от типа элементов, которые находятся в массиве.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Добавляет в конец массива указанные элементы, производные от текущего типа элементов массива.</summary>
      <param name="items">Элементы, которые нужно добавить в конец массива.</param>
      <typeparam name="TDerived">Тип, производный от типа элементов, которые находятся в массиве.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Добавляет в конец массива указанные элементы, производные от текущего типа элементов массива.</summary>
      <param name="items">Элементы, которые нужно добавить в конец массива.</param>
      <typeparam name="TDerived">Тип, производный от типа элементов, которые находятся в массиве.</typeparam>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary>Возвращает или задает длину внутреннего массива. При установке внутренний массив перераспределяется с учетом заданной емкости, если он еще не имеет указанную длину.</summary>
      <returns>Длина внутреннего массива.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary>Удаляет все элементы из массива.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary>Определяет, содержит ли массив указанное значение.</summary>
      <param name="item">Объект, который нужно найти в массиве.</param>
      <returns>Значение <see langword="true" />, если объект найден; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>Копирует текущее содержимое в указанный массив.</summary>
      <param name="array">Массив для копирования данных.</param>
      <param name="index">Индекс, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary>Возвращает или устанавливает количество элементов в массиве.</summary>
      <returns>Количество элементов в массиве.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary>Возвращает объект, который можно использовать для перечисления элементов коллекции.</summary>
      <returns>Объект, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary>Определяет индекс заданного элемента в массиве.</summary>
      <param name="item">Элемент, который нужно найти в массиве.</param>
      <returns>Индекс элемента <paramref name="item" />, если он найден в списке; в противном случае —значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary>Определяет индекс указанного элемента.</summary>
      <param name="item">Элемент, который нужно найти в массиве.</param>
      <param name="startIndex">Начальное положение поиска.</param>
      <returns>Индекс элемента <paramref name="item" />, если он найден в списке; в противном случае —значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Определяет индекс указанного элемента.</summary>
      <param name="item">Элемент, который нужно найти в массиве.</param>
      <param name="startIndex">Начальное положение поиска.</param>
      <param name="count">Число искомых элементов.</param>
      <returns>Индекс элемента <paramref name="item" />, если он найден в списке; в противном случае —значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Определяет индекс указанного элемента.</summary>
      <param name="item">Элемент, который нужно найти в массиве.</param>
      <param name="startIndex">Индекс, с которого нужно начать поиск.</param>
      <param name="count">Начальное положение поиска.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns>Индекс элемента <paramref name="item" />, если он найден в списке; в противном случае —значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary>Вставляет элемент в массив по указанному индексу.</summary>
      <param name="index">Отсчитываемый с нуля индекс, по которому нужно вставить элемент.</param>
      <param name="item">Объект, который нужно вставить в массив.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary>Возвращает или устанавливает элемент с указанным индексом.</summary>
      <param name="index">Индекс элемента, который нужно получить или установить.</param>
      <returns>Элемент по заданному индексу.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Указанный индекс не находится в массиве.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary>Возвращает доступную только для чтения ссылку на элемент по указанному индексу.</summary>
      <param name="index">Индекс элемента.</param>
      <returns>Доступная только для чтения ссылка на элемент по указанному индексу.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Значение <paramref name="index" /> больше или равно длине массива.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary>Возвращает отсчитываемый с нуля индекс последнего вхождения указанного элемента в массив.</summary>
      <param name="item">Искомый элемент.</param>
      <returns>Отсчитываемый от нуля индекс в массиве, по которому обнаружен элемент, или значение -1, если элемент не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>Возвращает отсчитываемый с нуля индекс последнего вхождения указанного элемента в массив.</summary>
      <param name="item">Искомый элемент.</param>
      <param name="startIndex">Начальное положение поиска.</param>
      <returns>Отсчитываемый от нуля индекс в массиве, по которому обнаружен элемент, или значение -1, если элемент не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Возвращает отсчитываемый с нуля индекс последнего вхождения указанного элемента в массив.</summary>
      <param name="item">Искомый элемент.</param>
      <param name="startIndex">Начальное положение поиска.</param>
      <param name="count">Число искомых элементов.</param>
      <returns>Отсчитываемый от нуля индекс в массиве, по которому обнаружен элемент, или значение -1, если элемент не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Возвращает отсчитываемый с нуля индекс последнего вхождения указанного элемента в массив.</summary>
      <param name="item">Искомый элемент.</param>
      <param name="startIndex">Начальное положение поиска.</param>
      <param name="count">Число искомых элементов.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns>Отсчитываемый от нуля индекс в массиве, по которому обнаружен элемент, или значение -1, если элемент не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary>Извлекает внутренний массив как <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> и заменяет его на массив нулевой длины.</summary>
      <exception cref="T:System.InvalidOperationException">Если значение <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> не равно <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary>Удаляет указанный элемент.</summary>
      <param name="element">Удаляемый элемент.</param>
      <returns>Значение <see langword="true" />, если элемент <paramref name="element" /> был найден и удален; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary>Удаляет из массива элемент с указанным индексом.</summary>
      <param name="index">Отсчитываемый от нуля индекс удаляемого элемента.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary>Изменяет порядок элементов в коллекции.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary>Сортирует содержимое массива.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Сортирует содержимое массива.</summary>
      <param name="comparer">Функция сравнения, которую нужно использовать для сортировки. Если функция равна <see langword="null" />, используется функция сравнения по умолчанию для типа элементов массива.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary>Сортирует элементы во всем массиве, используя указанный <see cref="T:System.Comparison`1" />.</summary>
      <param name="comparison">
        <see cref="T:System.Comparison`1" />, используемый при сравнении элементов.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="comparison" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Сортирует содержимое массива.</summary>
      <param name="index">Начальный индекс диапазона сортировки.</param>
      <param name="count">Количество элементов в сортируемом диапазоне.</param>
      <param name="comparer">Функция сравнения, которую нужно использовать для сортировки. Если функция равна <see langword="null" />, используется функция сравнения по умолчанию для типа элементов массива.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Возвращает значение, которое определяет, является ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> доступной только для чтения.</summary>
      <returns>Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов массива.</summary>
      <returns>Перечислитель, который выполняет перечисление элементов массива.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов массива.</summary>
      <returns>Перечислитель, который выполняет перечисление элементов массива.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary>Создает новый массив с текущим содержимым исходного массива <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns>Новый массив с содержимым исходного массива <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary>Возвращает неизменяемый массив, который содержит текущие элементы исходного объекта <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns>Неизменяемый массив, который содержит текущие элементы исходного объекта <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> путем приведения базового массива к массиву типа <paramref name="TOther" />.</summary>
      <typeparam name="TOther" />
      <exception cref="T:System.InvalidCastException">Выдается, если приведение недопустимо.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Collections.Immutable.ImmutableArray`1" />, исходя из содержимого существующего экземпляра, позволяя ковариантному статическому приведению использовать существующий массив повторно.</summary>
      <param name="items">Исходный массив для инициализации результирующего. Копирования при этом не происходит.</param>
      <typeparam name="TDerived" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary>Возвращает массив, из которого удалены все элементы.</summary>
      <returns>Массив, из которого удалены все элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary>Определяет, существует ли в массиве указанный элемент.</summary>
      <param name="item">Искомый элемент.</param>
      <returns>Значение <see langword="true" />, если указанный элемент был найден в массиве; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary>Копирует содержимое исходного массива в указанный массив.</summary>
      <param name="destination">Массив для копирования данных.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary>Копирует содержимое исходного массива в заданный массив начиная с указанного индекса конечного массива.</summary>
      <param name="destination">Массив для копирования данных.</param>
      <param name="destinationIndex">Индекс в <paramref name="array" />, с которого начинается копирование.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Копирует указанные элементы исходного массива в заданный массив начиная с указанного индекса.</summary>
      <param name="sourceIndex">Индекс исходного массива, с которого начинается копирование.</param>
      <param name="destination">Массив для копирования данных.</param>
      <param name="destinationIndex">Индекс в <paramref name="array" />, с которого начинается копирование.</param>
      <param name="length">Количество элементов, которые нужно скопировать из исходного массива.</param>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary>Возвращает пустой неизменяемый массив.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary>Перечислитель массива.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary>Возвращает текущий элемент.</summary>
      <returns>Текущий элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary>Выполняет переход к следующему значению в массиве.</summary>
      <returns>Значение <see langword="true" />, если в массиве существует еще один элемент; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Определяет, равен ли указанный массив исходному массиву.</summary>
      <param name="other">Объект, который требуется сравнить с данным объектом.</param>
      <returns>Значение <see langword="true" />, если массив <paramref name="other" /> равен исходному массиву; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary>Определяет, равен ли исходный объект указанному объекту.</summary>
      <param name="obj">Объект <see cref="T:System.Object" /> для сравнения с исходным массивом.</param>
      <returns>Значение <see langword="true" />, если исходный массив равен объекту <paramref name="obj" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов массива.</summary>
      <returns>Перечислитель.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary>Возвращает хэш-код для данного экземпляра.</summary>
      <returns>Хэш-код для данного экземпляра, подходящий для использования в алгоритмах хэширования и структурах данных, подобных хэш-таблицам.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary>Выполняет поиск указанного элемента в массиве.</summary>
      <param name="item">Искомый элемент.</param>
      <returns>Отсчитываемый от нуля индекс элемента, если он найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary>Выполняет поиск указанного элемента в массиве.</summary>
      <param name="item">Искомый элемент.</param>
      <param name="startIndex">Индекс, с которого нужно начать поиск.</param>
      <returns>Отсчитываемый от нуля индекс элемента, если он найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Выполняет поиск указанного элемента в массиве.</summary>
      <param name="item">Искомый элемент.</param>
      <param name="startIndex">Индекс, с которого нужно начать поиск.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns>Отсчитываемый от нуля индекс элемента, если он найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Выполняет поиск указанного элемента в массиве.</summary>
      <param name="item">Искомый элемент.</param>
      <param name="startIndex">Индекс, с которого нужно начать поиск.</param>
      <param name="count">Число искомых элементов.</param>
      <returns>Отсчитываемый от нуля индекс элемента, если он найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Выполняет поиск указанного элемента в массиве.</summary>
      <param name="item">Искомый элемент.</param>
      <param name="startIndex">Индекс, с которого нужно начать поиск.</param>
      <param name="count">Число искомых элементов.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns>Отсчитываемый от нуля индекс элемента, если он найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary>Возвращает новый массив, в указанную позицию которого вставлено заданное значение.</summary>
      <param name="index">Отсчитываемый от нуля индекс в массиве, по которому нужно добавить новый элемент.</param>
      <param name="item">Элемент, который нужно вставить в начало массива.</param>
      <returns>Новый массив, в указанную позицию которого добавлен элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Вставляет указанные значения по указанному индексу.</summary>
      <param name="index">Индекс, по которому нужно вставить значение.</param>
      <param name="items">Вставляемые элементы.</param>
      <returns>Новый неизменяемый массив, в указанную позицию которого добавлены элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Вставляет указанные значения по указанному индексу.</summary>
      <param name="index">Индекс, по которому нужно вставить значение.</param>
      <param name="items">Вставляемые элементы.</param>
      <returns>Новый неизменяемый массив, в указанную позицию которого добавлены элементы.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary>Возвращает значение, указывающее, был ли массив объявлен, но не инициализирован.</summary>
      <returns>Значение <see langword="true" />, если <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> имеет тип <see langword="null" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary>Возвращает значение, указывающее, является ли массив <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> пустым или неинициализированным.</summary>
      <returns>
        <see langword="true" />
        <see langword="null" />
        <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" />, <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> Еслиимеетзначениеили;в<see langword="false" />противном случае —.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary>Возвращает значение, указывающее, пуст ли массив <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <returns>Значение <see langword="true" />, если объект <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> пуст; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary>Возвращает элемент неизменяемого массива по указанному индексу.</summary>
      <param name="index">Индекс элемента (с нуля), который требуется получить.</param>
      <returns>Элемент неизменяемого массива по указанному индексу.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary>Возвращает доступную только для чтения ссылку на элемент по указанному индексу <paramref name="index" /> в списке, доступном только для чтения.</summary>
      <param name="index">Отсчитываемый от нуля индекс элемента, ссылку на который нужно получить.</param>
      <returns>Доступная только для чтения ссылка на элемент по указанному индексу <paramref name="index" /> в списке, доступном только для чтения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary>Выполняет поиск указанного элемента в массиве начиная с его конца.</summary>
      <param name="item">Искомый элемент.</param>
      <returns>Отсчитываемый от нуля индекс в массиве, по которому обнаружен элемент, или значение -1, если элемент не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary>Выполняет поиск указанного элемента в массиве начиная с его конца.</summary>
      <param name="item">Искомый элемент.</param>
      <param name="startIndex">Индекс, с которого нужно начать поиск.</param>
      <returns>Отсчитываемый от нуля индекс в массиве, по которому обнаружен элемент, или значение -1, если элемент не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Выполняет поиск указанного элемента в массиве начиная с его конца.</summary>
      <param name="item">Искомый элемент.</param>
      <param name="startIndex">Индекс, с которого нужно начать поиск.</param>
      <param name="count">Число искомых элементов.</param>
      <returns>Отсчитываемый от нуля индекс в массиве, по которому обнаружен элемент, или значение -1, если элемент не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Выполняет поиск указанного элемента в массиве начиная с его конца.</summary>
      <param name="item">Искомый элемент.</param>
      <param name="startIndex">Индекс, с которого нужно начать поиск.</param>
      <param name="count">Число искомых элементов.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns>Отсчитываемый от нуля индекс в массиве, по которому обнаружен элемент, или значение -1, если элемент не найден.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary>Возвращает количество элементов в массиве.</summary>
      <returns>Количество элементов в массиве.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary>Выполняет фильтрацию элементов в массиве, оставляя только те, которые можно назначить определенному типу.</summary>
      <typeparam name="TResult">Тип, по которому фильтруются элементы последовательности.</typeparam>
      <returns>Объект <see cref="T:System.Collections.IEnumerable" />, содержащий элементы входной последовательности типа <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Возвращает значение, указывающее, равны ли два массива.</summary>
      <param name="left">Массив слева от оператора.</param>
      <param name="right">Массив справа от оператора.</param>
      <returns>Значение <see langword="true" />, если массивы равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>Возвращает значение, указывающее, равны ли два массива.</summary>
      <param name="left">Массив слева от оператора.</param>
      <param name="right">Массив справа от оператора.</param>
      <returns>Значение <see langword="true" />, если массивы равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Возвращает значение, указывающее, различаются ли два массива.</summary>
      <param name="left">Массив слева от оператора.</param>
      <param name="right">Массив справа от оператора.</param>
      <returns>Значение <see langword="true" />, если массивы не равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>Проверяет неравенство двух массивов.</summary>
      <param name="left">Объект слева от оператора.</param>
      <param name="right">Объект справа от оператора.</param>
      <returns>Значение <see langword="true" />, если две массива не равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary>Возвращает массив, из которого удалено первое вхождение указанного элемента. Если совпадения не найдены, возвращается текущий массив.</summary>
      <param name="item">Удаляемый элемент.</param>
      <returns>Новый массив, из которого удален элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Возвращает массив, из которого удалено первое вхождение указанного элемента.  
 Если совпадения не найдены, возвращается текущий массив.</summary>
      <param name="item">Удаляемый элемент.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns>Новый массив, из которого удален указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary>Удаляет из массива все элементы, отвечающие указанному условию.</summary>
      <param name="match">Делегат, определяющий условия удаления элементов.</param>
      <returns>Новый массив, из которого удалены элементы, отвечающие указанному условию.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary>Возвращает массив, из которого удален элемент в указанной позиции.</summary>
      <param name="index">Отсчитываемый от нуля индекс элемента, который требуется удалить из возвращаемого массива.</param>
      <returns>Новый массив, из которого удален элемент по указанному индексу.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет из массива указанные элементы.</summary>
      <param name="items">Элементы, которые нужно удалить, если соответствующие значения будут найдены в списке.</param>
      <returns>Новый массив, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Удаляет из массива указанные элементы.</summary>
      <param name="items">Элементы, которые нужно удалить, если соответствующие значения будут найдены в списке.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns>Новый массив, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Удаляет из списка указанные значения.</summary>
      <param name="items">Элементы, которые нужно удалить, если соответствующие значения будут найдены в списке.</param>
      <returns>Новый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Удаляет из списка указанные элементы.</summary>
      <param name="items">Элементы, которые нужно удалить, если соответствующие значения будут найдены в списке.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns>Новый массив, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Возвращает массив, из которого удалены элементы в указанной позиции.</summary>
      <param name="index">Отсчитываемый от нуля индекс начального элемента, который требуется удалить из массива.</param>
      <param name="length">Количество удаляемых из массива элементов.</param>
      <returns>Новый массив, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary>Находит в массиве первый элемент, равный заданному значению, и заменяет его значение указанным новым.</summary>
      <param name="oldValue">Значение, которое нужно найти и заменить в массиве.</param>
      <param name="newValue">Значение, на которое необходимо заменить <c>oldvalue</c>.</param>
      <returns>Новый массив, который содержит <paramref name="newValue" />, даже если старое и новое значения совпадают.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> не найден в массиве.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Находит в массиве первый элемент, равный заданному значению, и заменяет его значение указанным новым.</summary>
      <param name="oldValue">Значение, которое нужно найти и заменить в массиве.</param>
      <param name="newValue">Значение, на которое необходимо заменить <c>oldvalue</c>.</param>
      <param name="equalityComparer">Компаратор проверки на равенство, используемый для сравнения значений.</param>
      <returns>Новый массив, который содержит <paramref name="newValue" />, даже если старое и новое значения совпадают.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> не найден в массиве.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary>Заменяет элемент по заданному индексу указанным элементом.</summary>
      <param name="index">Индекс заменяемого элемента.</param>
      <param name="item">Элемент, который нужно добавить в список.</param>
      <returns>Новый массив, который содержит элемент <paramref name="item" /> по указанному индексу.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary>Сортирует элементы в неизменяемом массиве с помощью функции сравнения по умолчанию.</summary>
      <returns>Новый неизменяемый массив, содержащий отсортированные элементы исходного.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Сортирует элементы в неизменяемом массиве с помощью указанной функции сравнения.</summary>
      <param name="comparer">Реализация, которую нужно использовать при сравнении элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию.</param>
      <returns>Новый неизменяемый массив, содержащий отсортированные элементы исходного.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary>Сортирует элементы во всем <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> с использованием указанного <see cref="T:System.Comparison`1" />.</summary>
      <param name="comparison">
        <see cref="T:System.Comparison`1" />, используемый при сравнении элементов.</param>
      <returns>Сортируемый список.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="comparison" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Сортирует указанные элементы в неизменяемом массиве с помощью указанной функции сравнения.</summary>
      <param name="index">Индекс первого элемента сортируемого диапазона.</param>
      <param name="count">Количество элементов в сортируемом диапазоне.</param>
      <param name="comparer">Реализация, которую нужно использовать при сравнении элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию.</param>
      <returns>Новый неизменяемый массив, содержащий отсортированные элементы исходного.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">Элемент, который нужно добавить в конец массива.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary>Возвращает номер массива в коллекции.</summary>
      <exception cref="T:System.InvalidOperationException">Вызывается, если свойство <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> возвращает значение true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Возвращает значение, указывающее, является ли этот экземпляр доступным только для чтения.</summary>
      <returns>
        <c>значение true</c> , если данный экземпляр доступен только для чтения; в противном случае — <c>значение false</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">Объект, который нужно удалить из массива.</param>
      <returns>Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов массива.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов массива.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">Индекс позиции для вставки элемента.</param>
      <param name="item">Вставляемый элемент.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Возвращает или задает элемент по указанному индексу в списке, доступном только для чтения.</summary>
      <param name="index">Индекс элемента (с нуля), который требуется получить.</param>
      <returns>Элемент в коллекции по указанному индексу в списке, доступном только для чтения.</returns>
      <exception cref="T:System.NotSupportedException">Всегда выдается из метода задания значения.</exception>
      <exception cref="T:System.InvalidOperationException">Вызывается, если свойство <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> возвращает значение true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">Индекс.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary>Возвращает номер массива в коллекции.</summary>
      <exception cref="T:System.InvalidOperationException">Вызывается, если свойство <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> возвращает значение true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>Получает элемент с указанным индексом.</summary>
      <param name="index">Индекс.</param>
      <returns>Элемент.</returns>
      <exception cref="T:System.InvalidOperationException">Вызывается, если свойство <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> возвращает значение true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует исходный массив в другой массив начиная с указанного индекса.</summary>
      <param name="array">Массив, в который нужно скопировать исходный.</param>
      <param name="index">Индекс в целевом массиве, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary>Возвращает размер массива.</summary>
      <exception cref="T:System.InvalidOperationException">Вызывается, если свойство <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> возвращает значение true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary>См. интерфейс <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary>Получает корень синхронизации.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов неизменяемого массива.</summary>
      <returns>Перечислитель, который выполняет перечисление элементов неизменяемого массива.</returns>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> возвращает значение <see langword="true" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary>Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">Значение, которое нужно добавить в массив.</param>
      <returns>Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</returns>
      <exception cref="T:System.NotSupportedException">Создается во всех случаях.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary>Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Создается во всех случаях.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary>Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">Проверяемое значение.</param>
      <returns>Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Возвращает значение по указанному индексу.</summary>
      <param name="value">Значение, индекс которого нужно вернуть.</param>
      <returns>Значение элемента по указанному индексу.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">Индекс, указывающий место вставки элемента.</param>
      <param name="value">Значение, которое следует вставить.</param>
      <exception cref="T:System.NotSupportedException">Создается во всех случаях.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary>Возвращает значение, указывающее, имеет ли этот экземпляр фиксированный размер.</summary>
      <returns>
        <c>значение true</c> , если данный экземпляр имеет фиксированный размер; в противном случае — <c>значение false</c>.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary>Возвращает значение, указывающее, является ли этот экземпляр доступным только для чтения.</summary>
      <returns>
        <c>значение true</c> , если данный экземпляр доступен только для чтения; в противном случае — <c>значение false</c>.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary>Возвращает или задает объект <see cref="T:System.Object" /> с заданным индексом.</summary>
      <param name="index">Индекс.</param>
      <exception cref="T:System.NotSupportedException">Всегда выдается из метода задания значения.</exception>
      <exception cref="T:System.InvalidOperationException">Вызывается, если свойство <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> возвращает значение true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary>Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">Значение, которое нужно удалить из массива.</param>
      <exception cref="T:System.NotSupportedException">Создается во всех случаях.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Во всех случаях вызывает исключение <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">Индекс удаляемого элемента.</param>
      <exception cref="T:System.NotSupportedException">Создается во всех случаях.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>Возвращает копию исходного массива, в конец которого добавлен указанный элемент.</summary>
      <param name="value">Значение, которое нужно добавить в конец массива.</param>
      <returns>Новый массив, в конец которого добавлен указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Возвращает копию исходного массива, в конец которого добавлены указанные элементы.</summary>
      <param name="items">Элементы, которые нужно добавить в конец массива.</param>
      <returns>Новый массив, в конец которого добавлены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>Возвращает массив, из которого удалены все элементы.</summary>
      <returns>Массив, из которого удалены все элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>Возвращает новый массив, в указанную позицию которого вставлено заданное значение.</summary>
      <param name="index">Отсчитываемый от нуля индекс в массиве, по которому нужно добавить новый элемент.</param>
      <param name="element">Элемент, который нужно вставить в начало массива.</param>
      <returns>Новый массив, в который вставлено указанное значение.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Вставляет указанные значения по заданному индексу.</summary>
      <param name="index">Индекс, по которому нужно вставить значение.</param>
      <param name="items">Вставляемые элементы.</param>
      <returns>Новый массив, в который вставлены указанные значения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Возвращает массив, из которого удалено первое вхождение указанного элемента, либо текущий массив, если совпадений не найдено.</summary>
      <param name="value">Значение, которое нужно удалить из массива.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns>Новый массив, из которого удалено значение.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>Удаляет из массива все элементы, отвечающие указанному условию.</summary>
      <param name="match">Делегат, определяющий условия удаления элементов.</param>
      <returns>Новый массив, из которого удалены элементы, отвечающие указанному условию.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>Возвращает массив, из которого удален элемент в указанной позиции.</summary>
      <param name="index">Отсчитываемый от нуля индекс элемента, который требуется удалить из возвращаемого массива.</param>
      <returns>Новый массив, из которого удален указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Удаляет из массива указанные элементы.</summary>
      <param name="items">Элементы, которые нужно удалить, если соответствующие значения будут найдены в списке.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns>Новый массив, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>Возвращает массив, из которого удалены элементы в указанной позиции.</summary>
      <param name="index">Отсчитываемый от нуля индекс начального элемента, который требуется удалить из массива.</param>
      <param name="count">Количество удаляемых из массива элементов.</param>
      <returns>Новый массив, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Находит в массиве первый элемент, равный заданному значению, и заменяет его значение указанным новым.</summary>
      <param name="oldValue">Значение, которое нужно найти и заменить в массиве.</param>
      <param name="newValue">Значение, на которое необходимо заменить <c>oldvalue</c>.</param>
      <param name="equalityComparer">Компаратор проверки на равенство, используемый для сравнения значений.</param>
      <returns>Новый массив, который содержит <paramref name="newValue" />, даже если старое и новое значения совпадают.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> не найден в массиве.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>Заменяет элемент по заданному индексу указанным элементом.</summary>
      <param name="index">Индекс заменяемого элемента.</param>
      <param name="value">Значение, которое нужно добавить в список.</param>
      <returns>Новый массив, который содержит элемент <paramref name="item" /> по указанному индексу.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Определяет позицию текущего элемента коллекции относительно другого элемента в порядке сортировки (находится перед ним, на одной позиции с ним или после него).</summary>
      <param name="other">Элемент для сравнения с текущим экземпляром.</param>
      <param name="comparer">Объект, который используется для сравнения элементов текущего массива с соответствующими элементами другого массива.</param>
      <returns>Целое число, указывающее позицию текущего элемента относительно другого элемента (находится перед ним, на одной позиции с ним или после него).</returns>
      <exception cref="T:System.ArgumentException">Массивы не имеют одинаковую длину.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Определяет, соблюдается ли структурное равенство между исходным и указанным массивами.</summary>
      <param name="other">Массив для сравнения с текущим экземпляром.</param>
      <param name="comparer">Объект, определяющий, соблюдается ли структурное равенство между текущим экземпляром и другим объектом.</param>
      <returns>Значение <see langword="true" />, если два массива структурно эквивалентны, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Возвращает хэш-код текущего экземпляра.</summary>
      <param name="comparer">Объект, вычисляющий хэш-код текущего объекта.</param>
      <returns>Хэш-код для текущего экземпляра.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary>Создает изменяемый массив, который содержит те же объекты, что и исходный, а также может эффективно изменяться различными операциями с использованием стандартных изменяемых интерфейсов.</summary>
      <returns>Новый построитель с тем же содержимым, что и исходный массив.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary>Содержит набор методов инициализации для экземпляров класса <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" />.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>Определяет, содержит ли неизменяемый словарь указанную пару "ключ-значение".</summary>
      <param name="map">Неизменяемый словарь, в котором нужно выполнить поиск.</param>
      <param name="key">Ключ, который нужно найти в неизменяемом словаре.</param>
      <param name="value">Значение, которое нужно найти для указанного ключа, если он будет найден.</param>
      <typeparam name="TKey">Тип ключей в неизменяемом словаре.</typeparam>
      <typeparam name="TValue">Тип значений в неизменяемом словаре.</typeparam>
      <returns>Значение <see langword="true" />, если эта карта содержит указанную пару "ключ-значение", в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary>Создает пустой неизменяемый словарь.</summary>
      <typeparam name="TKey">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue">Тип значений, которые хранятся в словаре.</typeparam>
      <returns>Пустой неизменяемый словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Создает пустой неизменяемый словарь, который использует указанную функцию сравнения ключей.</summary>
      <param name="keyComparer">Реализация, которую нужно использовать для определения равенства ключей в словаре.</param>
      <typeparam name="TKey">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue">Тип значений, которые хранятся в словаре.</typeparam>
      <returns>Пустой неизменяемый словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает пустой неизменяемый словарь, который использует указанные функции сравнения ключей и значений.</summary>
      <param name="keyComparer">Реализация, которую нужно использовать для определения равенства ключей в словаре.</param>
      <param name="valueComparer">Реализация, которую нужно использовать для определения равенства значений в словаре.</param>
      <typeparam name="TKey">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue">Тип значений, которые хранятся в словаре.</typeparam>
      <returns>Пустой неизменяемый словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary>Создает новый построитель неизменяемых словарей.</summary>
      <typeparam name="TKey">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue">Тип значений, которые хранятся в словаре.</typeparam>
      <returns>Новый построитель.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Создает новый построитель неизменяемых словарей.</summary>
      <param name="keyComparer">Функция сравнения ключей.</param>
      <typeparam name="TKey">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue">Тип значений, которые хранятся в словаре.</typeparam>
      <returns>Новый построитель.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает новый построитель неизменяемых словарей.</summary>
      <param name="keyComparer">Функция сравнения ключей.</param>
      <param name="valueComparer">Функция сравнения значений.</param>
      <typeparam name="TKey">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue">Тип значений, которые хранятся в словаре.</typeparam>
      <returns>Новый построитель.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Создает новый неизменяемый словарь, который содержит указанные элементы.</summary>
      <param name="items">Элементы, которыми нужно заполнить словарь, прежде чем он станет неизменяемым.</param>
      <typeparam name="TKey">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue">Тип значений в словаре.</typeparam>
      <returns>Новый неизменяемый словарь, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Создает новый неизменяемый словарь, который содержит заданные элементы и использует указанную функцию сравнения ключей.</summary>
      <param name="keyComparer">Реализация функции сравнения, которую нужно использовать для проверки ключей на предмет равенства.</param>
      <param name="items">Элементы, которые нужно добавить в словарь, прежде чем он станет неизменяемым.</param>
      <typeparam name="TKey">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue">Тип значений в словаре.</typeparam>
      <returns>Новый неизменяемый словарь, который содержит заданные элементы и использует указанную функцию сравнения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Создает новый неизменяемый словарь, который содержит заданные элементы и использует указанную функцию сравнения ключей.</summary>
      <param name="keyComparer">Реализация функции сравнения, которую нужно использовать для проверки ключей на предмет равенства.</param>
      <param name="valueComparer">Реализация функции сравнения, которую нужно использовать для проверки значений на предмет равенства.</param>
      <param name="items">Элементы, которые нужно добавить в словарь, прежде чем он станет неизменяемым.</param>
      <typeparam name="TKey">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue">Тип значений в словаре.</typeparam>
      <returns>Новый неизменяемый словарь, который содержит заданные элементы и использует указанную функцию сравнения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary>Возвращает значение для указанного ключа, если такой ключ есть в словаре.</summary>
      <param name="dictionary">Словарь, из которого нужно извлечь значение.</param>
      <param name="key">Ключ, который нужно найти.</param>
      <typeparam name="TKey">Тип ключа.</typeparam>
      <typeparam name="TValue">Тип значения.</typeparam>
      <returns>Значение для ключа или <c>default(TValue)</c>, если соответствующий ключ не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>Возвращает значение для указанного ключа, если такой ключ есть в словаре.</summary>
      <param name="dictionary">Словарь, из которого нужно извлечь значение.</param>
      <param name="key">Ключ, который нужно найти.</param>
      <param name="defaultValue">Значение по умолчанию, которое нужно вернуть, если в словаре не найден соответствующий ключ.</param>
      <typeparam name="TKey">Тип ключа.</typeparam>
      <typeparam name="TValue">Тип значения.</typeparam>
      <returns>Значение для ключа или <paramref name="defaultValue" />, если такой ключ не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Создает неизменяемый словарь на основе существующей коллекции элементов, применяя функцию преобразования к исходным ключам.</summary>
      <param name="source">Исходная коллекция, используемая для создания неизменяемого словаря.</param>
      <param name="keySelector">Функция, используемая для преобразования ключей для неизменяемого словаря.</param>
      <typeparam name="TSource">Тип элементов исходной коллекции.</typeparam>
      <typeparam name="TKey">Тип ключей в результирующем неизменяемом словаре.</typeparam>
      <returns>Неизменяемый словарь, который содержит элементы из объекта <paramref name="source" /> и ключи которого получены с помощью функции преобразования <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает неизменяемый словарь на основе последовательности, подвергнутой определенному преобразованию.</summary>
      <param name="source">Исходная коллекция, используемая для создания неизменяемого словаря.</param>
      <param name="keySelector">Функция, используемая для преобразования ключей для неизменяемого словаря.</param>
      <param name="keyComparer">Функция сравнения ключей, которую нужно использовать в словаре.</param>
      <typeparam name="TSource">Тип элементов исходной коллекции.</typeparam>
      <typeparam name="TKey">Тип ключей в результирующем неизменяемом словаре.</typeparam>
      <returns>Неизменяемый словарь, который содержит элементы из объекта <paramref name="source" /> и ключи которого получены с помощью функции преобразования <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Выполняет перечисление последовательности пар "ключ-значение" и создает неизменяемый словарь на основе ее содержимого.</summary>
      <param name="source">Последовательность пар "ключ-значение", для которой нужно выполнить перечисление.</param>
      <typeparam name="TKey">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue">Тип значений в словаре.</typeparam>
      <returns>Неизменяемый словарь, который содержит пары "ключ-значение" в указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Выполняет перечисление последовательности пар "ключ-значение" и создает на основе ее содержимого неизменяемый словарь с использованием указанной функции сравнения ключей.</summary>
      <param name="source">Последовательность пар "ключ-значение", для которой нужно выполнить перечисление.</param>
      <param name="keyComparer">Функция сравнения ключей, которую нужно использовать при создании неизменяемого словаря.</param>
      <typeparam name="TKey">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue">Тип значений в словаре.</typeparam>
      <returns>Неизменяемый словарь, который содержит пары "ключ-значение" в указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Выполняет перечисление последовательности пар "ключ-значение" и создает на основе ее содержимого неизменяемый словарь с использованием указанных функций сравнения ключей и значений.</summary>
      <param name="source">Последовательность пар "ключ-значение", для которой нужно выполнить перечисление.</param>
      <param name="keyComparer">Функция сравнения ключей, которую нужно использовать при создании неизменяемого словаря.</param>
      <param name="valueComparer">Функция сравнения значений, которую нужно использовать в неизменяемом словаре.</param>
      <typeparam name="TKey">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue">Тип значений в словаре.</typeparam>
      <returns>Неизменяемый словарь, который содержит пары "ключ-значение" в указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary>Создает неизменяемый словарь из текущего содержимого словаря построителя.</summary>
      <param name="builder">Построитель для создания неизменяемого словаря.</param>
      <typeparam name="TKey">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue">Тип значений в словаре.</typeparam>
      <returns>Неизменяемый словарь, содержащий текущее содержимое словаря построителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Выполняет перечисление и преобразование последовательности и создает неизменяемый словарь на основе ее содержимого.</summary>
      <param name="source">Последовательность, перечисление которой нужно выполнить для создания словаря.</param>
      <param name="keySelector">Функция, которая создает ключ для словаря на основе каждого элемента последовательности.</param>
      <param name="elementSelector">Функция, которая создает значение для словаря на основе каждого элемента последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей в результирующем словаре.</typeparam>
      <typeparam name="TValue">Тип значений в результирующем словаре.</typeparam>
      <returns>Неизменяемый словарь, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Выполняет перечисление и преобразование последовательности и создает на основе ее содержимого неизменяемый словарь с использованием указанной функции сравнения ключей.</summary>
      <param name="source">Последовательность, перечисление которой нужно выполнить для создания словаря.</param>
      <param name="keySelector">Функция, которая создает ключ для словаря на основе каждого элемента последовательности.</param>
      <param name="elementSelector">Функция, которая создает значение для словаря на основе каждого элемента последовательности.</param>
      <param name="keyComparer">Функция сравнения ключей, которую нужно использовать в словаре.</param>
      <typeparam name="TSource">Тип элементов последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей в результирующем словаре.</typeparam>
      <typeparam name="TValue">Тип значений в результирующем словаре.</typeparam>
      <returns>Неизменяемый словарь, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Выполняет перечисление и преобразование последовательности и создает на основе ее содержимого неизменяемый словарь с использованием указанных функций сравнения ключей и значений.</summary>
      <param name="source">Последовательность, перечисление которой нужно выполнить для создания словаря.</param>
      <param name="keySelector">Функция, которая создает ключ для словаря на основе каждого элемента последовательности.</param>
      <param name="elementSelector">Функция, которая создает значение для словаря на основе каждого элемента последовательности.</param>
      <param name="keyComparer">Функция сравнения ключей, которую нужно использовать в словаре.</param>
      <param name="valueComparer">Функция сравнения значений, которую нужно использовать в словаре.</param>
      <typeparam name="TSource">Тип элементов последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей в результирующем словаре.</typeparam>
      <typeparam name="TValue">Тип значений в результирующем словаре.</typeparam>
      <returns>Неизменяемый словарь, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary>Представляет неизменяемую неупорядоченную коллекцию ключей и значений.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="TKey">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue">Тип значений в словаре.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary>Добавляет в неизменяемый словарь элемент с указанными ключом и значением.</summary>
      <param name="key">Ключ добавляемого элемента.</param>
      <param name="value">Добавляемое значение элемента.</param>
      <returns>Новый неизменяемый словарь, который содержит добавленную пару "ключ-значение".</returns>
      <exception cref="T:System.ArgumentException">Данный ключ уже существует в словаре, но имеет другое значение.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Добавляет в неизменяемый словарь указанные пары "ключ-значение".</summary>
      <param name="pairs">Пары "ключ-значение", которые нужно добавить.</param>
      <returns>Новый неизменяемый словарь, который содержит добавленные пары "ключ-значение".</returns>
      <exception cref="T:System.ArgumentException">Один из указанных ключей уже существует в словаре, но имеет другое значение.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary>Представляет хэш-карту, для изменения которой не требуется выделение памяти (или выделяется небольшой объем) и с помощью которой можно эффективно создавать или конструировать экземпляры неизменяемых хэш-карт.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary>Добавляет в неизменяемый словарь элемент с указанными ключом и значением.</summary>
      <param name="key">Ключ добавляемого элемента.</param>
      <param name="value">Добавляемое значение элемента.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Элемент с таким ключом уже существует в словаре.</exception>
      <exception cref="T:System.NotSupportedException">Словарь доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Добавляет в неизменяемый словарь указанный элемент.</summary>
      <param name="item">Объект, который нужно добавить в словарь.</param>
      <exception cref="T:System.NotSupportedException">Словарь доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Добавляет в коллекцию последовательность значений.</summary>
      <param name="items">Элемент, который нужно добавить в коллекцию.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary>Удаляет все элементы из неизменяемого словаря.</summary>
      <exception cref="T:System.NotSupportedException">Словарь доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Определяет, содержится ли в неизменяемом словаре указанное значение.</summary>
      <param name="item">Объект, который нужно найти в словаре.</param>
      <returns>Значение <see langword="true" />, если элемент <paramref name="item" /> найден в словаре; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary>Определяет, содержится ли в неизменяемом словаре элемент с указанным ключом.</summary>
      <param name="key">Ключ, который нужно найти в словаре.</param>
      <returns>Значение <see langword="true" />, если в словаре содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary>Определяет, содержится ли в неизменяемом словаре элемент с указанным значением.</summary>
      <param name="value">Значение, которое нужно найти в словаре. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <returns>Значение <see langword="true" />, если в словаре содержится элемент с указанным значением; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary>Возвращает количество элементов, содержащихся в неизменяемом словаре.</summary>
      <returns>Количество элементов, содержащихся в неизменяемом словаре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов неизменяемого словаря.</summary>
      <returns>Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>Возвращает значение для указанного ключа, если такой ключ есть в словаре.</summary>
      <param name="key">Ключ, который нужно найти.</param>
      <returns>Значение для ключа или <c>default(TValue)</c>, если соответствующий ключ не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>Возвращает значение для указанного ключа, если такой ключ есть в словаре.</summary>
      <param name="key">Ключ, который нужно найти.</param>
      <param name="defaultValue">Значение по умолчанию, которое нужно вернуть, если в словаре не найден соответствующий ключ.</param>
      <returns>Значение для ключа или <paramref name="defaultValue" />, если такой ключ не найден.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary>Возвращает или задает элемент с указанным ключом.</summary>
      <param name="key">Ключ элемента, который нужно получить или установить.</param>
      <returns>Элемент с указанным ключом.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> — <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Свойство извлекается и объект <paramref name="key" /> не найден.</exception>
      <exception cref="T:System.NotSupportedException">Свойство задается, и объект <see cref="T:System.Collections.Generic.IDictionary`2" /> доступен только для чтения.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary>Возвращает или задает функцию сравнения ключей.</summary>
      <returns>Функция сравнения ключей.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary>Возвращает коллекцию, содержащую ключи неизменяемого словаря.</summary>
      <returns>Коллекция ключей из объекта, который реализует неизменяемый словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary>Удаляет из неизменяемого словаря элемент с указанным ключом.</summary>
      <param name="key">Ключ элемента, который требуется удалить.</param>
      <returns>Значение <see langword="true" />, если элемент успешно удален; в противном случае — значение <see langword="false" />.  Этот метод также возвращает значение <see langword="false" />, если ключ <paramref name="key" /> не найден в словаре.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение null.</exception>
      <exception cref="T:System.NotSupportedException">Словарь доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Удаляет первое вхождение указанного объекта из неизменяемого словаря.</summary>
      <param name="item">Объект, который нужно удалить из словаря.</param>
      <returns>Значение <see langword="true" />, если объект <paramref name="item" /> успешно удален из словаря; в противном случае — значение <see langword="false" />. Этот метод также возвращает значение false, если элемент <paramref name="item" /> не найден в словаре.</returns>
      <exception cref="T:System.NotSupportedException">Словарь доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет все записи с ключами, которые соответствуют содержащимся в указанной последовательности неизменяемого словаря.</summary>
      <param name="keys">Ключи записей, которые нужно удалить из словаря.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы словаря в массив типа <see cref="T:System.Collections.Generic.KeyValuePair`2" /> начиная с указанного индекса массива.</summary>
      <param name="array">Одномерный массив типа <see cref="T:System.Collections.Generic.KeyValuePair`2" />, в который копируются элементы из словаря. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Получает значение, определяющее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>
        <see langword="true" />, если доступ к классу <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Добавляет в объект словаря элемент с указанными ключом и значением.</summary>
      <param name="key">Ключ добавляемого элемента.</param>
      <param name="value">Добавляемое значение элемента.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Определяет, содержится ли в объекте словаря элемент с указанным ключом.</summary>
      <param name="key">Искомый ключ.</param>
      <returns>Значение <see langword="true" />, если в словаре содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.IDictionaryEnumerator" /> для словаря.</summary>
      <returns>Объект <see cref="T:System.Collections.IDictionaryEnumerator" /> для словаря.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>Получает значение, указывающее, имеет ли объект <see cref="T:System.Collections.IDictionary" /> фиксированный размер.</summary>
      <returns>
        <see langword="true" />, если объект <see cref="T:System.Collections.IDictionary" /> имеет фиксированный размер, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>Возвращает значение, которое определяет, является ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> доступной только для чтения.</summary>
      <returns>Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>Возвращает или задает элемент с указанным ключом.</summary>
      <param name="key">Ключ.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>Возвращает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Удаляет из словаря элемент с указанным ключом.</summary>
      <param name="key">Ключ элемента, который требуется удалить.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>Возвращает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения из <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Объект перечислителя, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary>Создает неизменяемый словарь на основе содержимого исходного экземпляра.</summary>
      <returns>Неизменяемый словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>Определяет, содержится ли в словаре указанный ключ.</summary>
      <param name="equalKey">Ключ, который нужно найти.</param>
      <param name="actualKey">Соответствующий ключ, расположенный в словаре, если он найден, или <c>equalkey</c>, если совпадений нет.</param>
      <returns>Значение <see langword="true" />, если найдено совпадение для <paramref name="equalKey" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>Возвращает значение, связанное с указанным ключом.</summary>
      <param name="key">Ключ, значение которого нужно получить.</param>
      <param name="value">При возврате из метода содержит значение, связанное с указанным ключом, если он найден; в противном случае — значение по умолчанию для типа параметра <paramref name="value" />. Этот параметр передается неинициализированным.</param>
      <returns>Значение <see langword="true" />, если объект, реализующий неизменяемый словарь, содержит элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary>Возвращает или устанавливает функцию сравнения значений.</summary>
      <returns>Функция сравнения значений.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary>Возвращает коллекцию, содержащую значения неизменяемого словаря.</summary>
      <returns>Коллекция значений из объекта, который реализует словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary>Возвращает пустой неизменяемый словарь с теми же правилами упорядочения элементов и сравнения ключей и значений, что и в исходном экземпляре словаря.</summary>
      <returns>Пустой словарь с такими же правилами упорядочения элементов и сравнения ключей и значений.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Определяет, содержит ли неизменяемый словарь указанные пары "ключ-значение".</summary>
      <param name="pair">Пара "ключ-значение", которую нужно найти.</param>
      <returns>Значение <see langword="true" />, если указанная пара "ключ-значение" найдена в словаре; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary>Определяет, содержится ли в неизменяемом словаре элемент с указанным ключом.</summary>
      <param name="key">Искомый ключ.</param>
      <returns>Значение <see langword="true" />, если в неизменяемом словаре содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary>Определяет, содержится ли в неизменяемом словаре элемент с указанным значением.</summary>
      <param name="value">Значение, которое нужно найти. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <returns>Значение <see langword="true" />, если в словаре содержится элемент с указанным значением; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary>Возвращает количество пар "ключ-значение" в неизменяемом словаре.</summary>
      <returns>Количество пар "ключ-значение" в словаре.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary>Возвращает пустой неизменяемый словарь.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary>Выполняет перечисление содержимого неизменяемого словаря без выделения дополнительной памяти.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент словаря, расположенный в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary>Освобождает ресурсы, используемые текущим экземпляром класса <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу неизменяемого словаря.</summary>
      <returns>Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца словаря.</returns>
      <exception cref="T:System.InvalidOperationException">После создания перечислителя словарь был изменен.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом словаря.</summary>
      <exception cref="T:System.InvalidOperationException">После создания перечислителя словарь был изменен.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Получает текущий элемент.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов неизменяемого словаря.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов словаря.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary>Возвращает значение, указывающее, является ли пустым этот экземпляр неизменяемого словаря.</summary>
      <returns>Значение <see langword="true" />, если этот экземпляр пуст; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary>Возвращает значение <paramref name="TValue" />, связанное с указанным ключом.</summary>
      <param name="key">Тип ключа.</param>
      <returns>Значение, связанное с указанным ключом. Если поиск не вернул результатов, операция вызывает исключение.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary>Возвращает функцию сравнения ключей для неизменяемого словаря.</summary>
      <returns>Функция сравнения ключей.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary>Возвращает ключи в неизменяемом словаре.</summary>
      <returns>Ключи в неизменяемом словаре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary>Удаляет из неизменяемого словаря элемент с указанным ключом.</summary>
      <param name="key">Ключ элемента, который требуется удалить.</param>
      <returns>Новый неизменяемый словарь, из которого удален указанный элемент, либо исходный экземпляр, если найти в нем указанный ключ не удалось.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет из неизменяемого словаря элементы с указанными ключами.</summary>
      <param name="keys">Ключи элементов, которые нужно удалить.</param>
      <returns>Новый неизменяемый словарь, из которого удалены указанные ключи, либо исходный экземпляр, если найти в нем ключи не удалось.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary>Устанавливает в неизменяемом словаре пару "ключ-значение" с возможной перезаписью существующего значения для данного ключа.</summary>
      <param name="key">Ключ записи, которую требуется добавить.</param>
      <param name="value">Значение ключа, которое нужно установить.</param>
      <returns>Новый неизменяемый словарь, который содержит указанную пару "ключ-значение".</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Устанавливает в неизменяемом словаре указанные пары "ключ-значение" с возможной перезаписью существующих значений для данных ключей.</summary>
      <param name="items">Пары "ключ-значение", которые нужно установить в словаре. Если какой-то из ключей уже существует в словаре, этот метод перезапишет его текущее значение.</param>
      <returns>Новый неизменяемый словарь, который содержит указанные пары "ключ-значение".</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы из словаря в массив начиная с определенного индекса в массиве.</summary>
      <param name="array">Одномерный массив, в который копируются элементы словаря. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Возвращает значение, показывающее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>
        <see langword="true" />, если доступ к классу <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Добавляет в объект неизменяемого словаря элемент с указанными ключом и значением.</summary>
      <param name="key">Объект, используемый в качестве ключа добавляемого элемента.</param>
      <param name="value">Объект, используемый в качестве значения добавляемого элемента.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Очищает данный экземпляр.</summary>
      <exception cref="T:System.NotSupportedException">Объект словаря доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Определяет, содержится ли в объекте неизменяемого словаря элемент с указанным ключом.</summary>
      <param name="key">Ключ, который нужно найти в объекте словаря.</param>
      <returns>Значение <see langword="true" />, если в словаре содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.IDictionaryEnumerator" /> для объекта неизменяемого словаря.</summary>
      <returns>Объект перечислителя для объекта словаря.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Получает значение, показывающее, имеет ли объект <see cref="T:System.Collections.IDictionary" /> фиксированный размер.</summary>
      <returns>
        <see langword="true" />, если объект <see cref="T:System.Collections.IDictionary" /> имеет фиксированный размер, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Получает значение, указывающее, является ли объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступным только для чтения.</summary>
      <returns>Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Возвращает или задает элемент с указанным ключом.</summary>
      <param name="key">Ключ.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Возвращает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Удаляет из объекта неизменяемого словаря элемент с указанным ключом.</summary>
      <param name="key">Ключ элемента, который требуется удалить.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary>Возвращает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения из <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Объект перечислителя, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary>Создает неизменяемый словарь, который содержит те же объекты, что и исходный словарь, а также может эффективно изменяться различными операциями с использованием стандартных изменяемых интерфейсов.</summary>
      <returns>Коллекция, которая содержит те же объекты, что и исходный словарь, а также может эффективно изменяться различными операциями с использованием стандартных изменяемых интерфейсов.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>Определяет, содержится ли в словаре указанный ключ.</summary>
      <param name="equalKey">Ключ, который нужно найти.</param>
      <param name="actualKey">Соответствующий ключ, расположенный в словаре, если он найден, или <c>equalkey</c>, если совпадений нет.</param>
      <returns>Значение <see langword="true" />, если найдено совпадение для <paramref name="equalKey" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary>Получает значение, связанное с заданным ключом.</summary>
      <param name="key">Ключ, значение которого нужно получить.</param>
      <param name="value">При возврате из метода содержит значение, связанное с указанным ключом, если он найден; в противном случае — значение по умолчанию для типа параметра <paramref name="value" />. Этот параметр передается неинициализированным.</param>
      <returns>Значение <see langword="true" />, если объект, реализующий словарь, содержит элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение null.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary>Возвращает функцию сравнения значений, которая используется для определения их равенства.</summary>
      <returns>Функция сравнения значений, которая используется для определения их равенства.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary>Возвращает значения в неизменяемом словаре.</summary>
      <returns>Значения в неизменяемом словаре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Возвращает экземпляр неизменяемого словаря, который использует указанную функцию сравнения ключей.</summary>
      <param name="keyComparer">Функция сравнения ключей, которую нужно использовать.</param>
      <returns>Экземпляр неизменяемого словаря, который использует указанную функцию сравнения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>Возвращает экземпляр неизменяемого словаря, который использует указанные функции сравнения ключей и значений.</summary>
      <param name="keyComparer">Функция сравнения ключей, которую нужно использовать.</param>
      <param name="valueComparer">Функция сравнения значений, которую нужно использовать.</param>
      <returns>Экземпляр неизменяемого словаря, который использует указанные функцию сравнения.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary>Содержит набор методов инициализации для экземпляров класса <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary>Создает пустой неизменяемый набор хэширования.</summary>
      <typeparam name="T">Тип элементов, которые хранятся в неизменяемом наборе хэширования.</typeparam>
      <returns>Пустой неизменяемый набор хэширования.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary>Создает новый неизменяемый набор хэширования, который содержит указанный элемент.</summary>
      <param name="item">Элемент, которым нужно заполнить набор хэширования.</param>
      <typeparam name="T">Тип элементов неизменяемого набора хэширования.</typeparam>
      <returns>Новый неизменяемый набор хэширования, который содержит указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary>Создает новый неизменяемый набор хэширования, который содержит указанный массив элементов.</summary>
      <param name="items">Массив элементов, которыми нужно заполнить набор хэширования.</param>
      <typeparam name="T">Тип элементов неизменяемого набора хэширования.</typeparam>
      <returns>Новый неизменяемый набор хэширования, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Создает пустой неизменяемый набор хэширования, который использует указанную функцию сравнения на равенство.</summary>
      <param name="equalityComparer">Объект, который нужно использовать для проверки элементов набора на равенство.</param>
      <typeparam name="T">Тип элементов неизменяемого набора хэширования.</typeparam>
      <returns>Пустой неизменяемый набор хэширования.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary>Создает новый неизменяемый набор хэширования, который содержит указанный элемент и использует указанную функцию сравнения для типа набора.</summary>
      <param name="equalityComparer">Объект, который нужно использовать для проверки элементов набора на равенство.</param>
      <param name="item">Элемент, которым нужно заполнить набор хэширования.</param>
      <typeparam name="T">Тип элементов неизменяемого набора хэширования.</typeparam>
      <returns>Новый неизменяемый набор хэширования, который содержит указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary>Создает новый неизменяемый набор хэширования, который содержит элементы указанной коллекции и использует указанную функцию сравнения для типа набора.</summary>
      <param name="equalityComparer">Объект, который нужно использовать для проверки элементов набора на равенство.</param>
      <param name="items">Массив элементов, которыми нужно заполнить набор хэширования.</param>
      <typeparam name="T">Тип элементов, которые хранятся в неизменяемом наборе хэширования.</typeparam>
      <returns>Новый неизменяемый набор хэширования, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary>Создает новый построитель неизменяемых наборов хэширования.</summary>
      <typeparam name="T">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns>Построитель неизменяемых наборов хэширования.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Создает новый построитель неизменяемых наборов хэширования.</summary>
      <param name="equalityComparer">Объект, который нужно использовать для проверки элементов набора на равенство.</param>
      <typeparam name="T">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns>Новый построитель неизменяемых наборов хэширования.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Создает новый неизменяемый набор хэширования, заполненный указанными элементами.</summary>
      <param name="items">Элементы, которые нужно добавить в набор хэширования.</param>
      <typeparam name="T">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns>Новый неизменяемый набор хэширования, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Создает новый неизменяемый набор хэширования, который содержит указанные элементы и использует указанную функцию сравнения для типа набора.</summary>
      <param name="equalityComparer">Объект, который нужно использовать для проверки элементов набора на равенство.</param>
      <param name="items">Элементы, которые нужно добавить в коллекцию, прежде чем она станет неизменяемой.</param>
      <typeparam name="T">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns>Новый неизменяемый набор хэширования.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Выполняет перечисление последовательности и создает неизменяемый набор хэширования на основе ее содержимого.</summary>
      <param name="source">Перебираемая последовательность.</param>
      <typeparam name="TSource">Тип элементов последовательности.</typeparam>
      <returns>Неизменяемый набор хэширования, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Выполняет перечисление последовательности, создает неизменяемый набор хэширования на основе ее содержимого и использует указанную функцию сравнения для типа набора.</summary>
      <param name="source">Перебираемая последовательность.</param>
      <param name="equalityComparer">Объект, который нужно использовать для проверки элементов набора на равенство.</param>
      <typeparam name="TSource">Тип элементов последовательности.</typeparam>
      <returns>Неизменяемый набор хэширования, который содержит элементы указанной последовательности и использует указанную функцию сравнения на равенство.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary>Создает неизменяемый набор хэша из текущего содержимого набора построителя.</summary>
      <param name="builder">Построитель для создания неизменяемого набора хэша.</param>
      <typeparam name="TSource">Тип элементов в наборе хэширования.</typeparam>
      <returns>Неизменяемый набор хэша, содержащий текущее содержимое набора построителя.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary>Представляет неизменяемый неупорядоченный набор хэширования.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T">Тип элементов в коллекции.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary>Добавляет в набор хэширования указанный элемент.</summary>
      <param name="item">Элемент, добавляемый в набор.</param>
      <returns>Набор хэширования, который содержит добавленное значение и все значения, которые ранее содержались в объекте <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary>Представляет набор хэширования, для изменения которого не требуется выделение памяти (или выделяется небольшой объем) и с помощью которого можно эффективно создавать или конструировать экземпляры неизменяемых наборов хэширования.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary>Добавляет указанный элемент в неизменяемый набор хэширования.</summary>
      <param name="item">Добавляемый элемент.</param>
      <returns>Значение <see langword="true" />, если элемент не входил в состав коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary>Удаляет все элементы из неизменяемого набора хэширования.</summary>
      <exception cref="T:System.NotSupportedException">Набор хэширования доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary>Определяет, содержит ли список неизменяемый набор хэширования указанное значение.</summary>
      <param name="item">Объект, который нужно найти в наборе хэширования.</param>
      <returns>Значение <see langword="true" />, если элемент <paramref name="item" /> найден в наборе хэширования; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary>Возвращает количество элементов, содержащихся в неизменяемом наборе хэширования.</summary>
      <returns>Количество элементов, содержащихся в неизменяемом наборе хэширования.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет все элементы указанной коллекции из текущего набора хэширования.</summary>
      <param name="other">Коллекция элементов, удаляемых из набора.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов неизменяемого набора хэширования.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов набора.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий набор, чтобы он содержал только элементы, которые также имеются в заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий набор должным (строгим) подмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является строгим подмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий набор должным (строгим) подмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является строгим надмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий набор подмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является подмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий набор надмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является надмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary>Возвращает или задает функцию сравнения ключей.</summary>
      <returns>Функция сравнения ключей.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, пересекаются ли текущий набор и указанная коллекция.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если в текущем наборе и объекте <paramref name="other" /> есть хотя бы один общий элемент; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary>Удаляет первое вхождение указанного объекта из неизменяемого набора хэширования.</summary>
      <param name="item">Объект, который нужно удалить из набора.</param>
      <returns>Значение <see langword="true" />, если объект <paramref name="item" /> успешно удален из набора; в противном случае — значение <see langword="false" />. Этот метод также возвращает значение <see langword="false" />, если объект <paramref name="item" /> не найден в исходном наборе.</returns>
      <exception cref="T:System.NotSupportedException">Набор доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, содержат ли текущий набор и указанная коллекция одни и те же элементы.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор совпадает с коллекцией <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий набор таким образом, чтобы он содержал только элементы, которые есть либо в нем, либо в указанной коллекции, но не одновременно там и там.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Добавляет элемент в набор хэширования.</summary>
      <param name="item">Объект, который нужно добавить в набор.</param>
      <exception cref="T:System.NotSupportedException">Набор доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Копирует элементы из набора хэширования в массив начиная с определенного индекса массива.</summary>
      <param name="array">Одномерный массив, в который будут скопированы элементы из набора хэширования. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Получает значение, указывающее, является ли объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступным только для чтения.</summary>
      <returns>Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns>Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary>Создает неизменяемый набор хэширования на основе содержимого исходного экземпляра.</summary>
      <returns>Неизменяемый набор.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий набор таким образом, чтобы он содержал все элементы, которые есть и в нем, и в указанной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary>Возвращает пустой неизменяемый набор хэширования с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</summary>
      <returns>Пустой набор хэширования с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary>Определяет, содержит ли неизменяемый набор хэширования указанный элемент.</summary>
      <param name="item">Объект, который нужно найти в неизменяемом наборе хэширования.</param>
      <returns>Значение <see langword="true" />, если параметр <paramref name="item" /> найден в коллекции <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary>Возвращает количество элементов в неизменяемом наборе хэширования.</summary>
      <returns>Количество элементов в наборе хэширования.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary>Возвращает неизменяемый набор хэширования для этого типа, который использует <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> по умолчанию.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary>Выполняет перечисление содержимого неизменяемого набора хэширования без выделения дополнительной памяти.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент, расположенный в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary>Освобождает ресурсы, используемые текущим экземпляром класса <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу неизменяемого набора хэширования.</summary>
      <returns>Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца набора хэширования.</returns>
      <exception cref="T:System.InvalidOperationException">После создания перечислителя набор хэширования был изменен.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом набора хэширования.</summary>
      <exception cref="T:System.InvalidOperationException">После создания перечислителя набор хэширования был изменен.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Получает текущий элемент.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет из текущего неизменяемого набора хэширования все элементы указанной коллекции.</summary>
      <param name="other">Коллекция элементов, удаляемых из набора.</param>
      <returns>Новый набор, из которого удалены указанные элементы, или исходный набор, если таких элементов в нем не было.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns>Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Создает неизменяемый набор хэширования, который содержит элементы, существующие как в исходном, так и в указанном наборах.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Новый неизменяемый набор, который содержит все элементы, существующие в обоих наборах.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary>Возвращает значение, указывающее, является ли пустым текущий неизменяемый набор хэширования.</summary>
      <returns>Значение <see langword="true" />, если этот экземпляр пуст; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий неизменяемый набор хэширования должным (строгим) подмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является строгим подмножеством указанной коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий набор должным (строгим) надмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является строгим надмножеством указанной коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий неизменяемый набор хэширования подмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является подмножеством указанной коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий неизменяемый набор хэширования надмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является надмножеством указанной коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary>Возвращает объект, который используется для получения хэш-кодов ключей и для проверки равенства значений в неизменяемом наборе хэширования.</summary>
      <returns>Функция сравнения, которая используется для получения хэш-кодов ключей и проверки равенства.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, пересекаются ли текущий неизменяемый набор хэширования и указанная коллекция.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если в текущем наборе и указанной коллекции есть хотя бы один общий элемент; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary>Удаляет указанный элемент из неизменяемого набора хэширования.</summary>
      <param name="item">Подлежащий удалению элемент.</param>
      <returns>Новый набор, из которого удален указанный элемент, или текущий набор, если элемент в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, содержат ли текущий неизменяемый набор хэширования и указанная коллекция одни и те же элементы.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если наборы равны, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Создает неизменяемый набор хэширования, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Новый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Добавляет элемент в набор.</summary>
      <param name="item">Объект, который нужно добавить в набор.</param>
      <exception cref="T:System.NotSupportedException">Набор доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Удаляет все элементы из этого набора.</summary>
      <exception cref="T:System.NotSupportedException">Набор доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Копирует элементы из набора в массив начиная с определенного индекса.</summary>
      <param name="array">Одномерный массив, в который копируются элементы из набора. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>См. интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Удаляет из набора первый экземпляр указанного объекта.</summary>
      <param name="item">Объект, который нужно удалить из набора.</param>
      <returns>Значение <see langword="true" />, если элемент успешно удален; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns>Перечислитель, который выполняет перечисление элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>Добавляет элемент в текущий набор и возвращает значение, указывающее, что элемент был добавлен успешно.</summary>
      <param name="item">Элемент, который нужно добавить в коллекцию.</param>
      <returns>Значение <see langword="true" />, если элемент добавлен в набор; значение <see langword="false" />, если элемент уже был в наборе.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет все элементы указанной коллекции из текущего набора.</summary>
      <param name="other">Коллекция элементов, которые нужно удалить.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий набор, чтобы он содержал только элементы, которые также имеются в заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущей коллекцией.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий набор таким образом, чтобы он содержал только элементы, которые есть либо в нем, либо в указанной коллекции, но не одновременно там и там.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий набор, чтобы он содержал все элементы, которые имеются как в текущем наборе, так и в указанной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы из набора в массив начиная с определенного индекса.</summary>
      <param name="array">Одномерный массив, в который копируются элементы из набора. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>См. интерфейс <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary>См. раздел <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов набора.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов набора.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>Добавляет в неизменяемый набор указанный элемент.</summary>
      <param name="item">Добавляемый элемент.</param>
      <returns>Новый набор, в который добавлен указанный элемент, или исходный набор, если элемент уже присутствует в нем.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>Возвращает пустой набор с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</summary>
      <returns>Пустой набор с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет элементы указанной коллекции из текущего набора.</summary>
      <param name="other">Коллекция элементов, удаляемых из набора.</param>
      <returns>Новый набор, из которого удалены указанные элементы, или исходный набор, если таких элементов в нем не было.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Создает неизменяемый набор, который содержит элементы, существующие как в исходном, так и в указанном наборах.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Новый неизменяемый набор, который содержит все элементы, существующие в обоих наборах.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>Удаляет указанный элемент из неизменяемого набора.</summary>
      <param name="item">Подлежащий удалению элемент.</param>
      <returns>Новый набор, из которого удален указанный элемент, или текущий набор, если элемент в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Создает неизменяемый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Новый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Создает новый неизменяемый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции.</summary>
      <param name="other">Коллекция, из которой нужно добавить элементы.</param>
      <returns>Новый неизменяемый набор, в который добавлены элементы, или исходный набор, если все элементы уже есть в нем.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary>Создает неизменяемый набор хэширования, который содержит те же объекты, что и исходный набор, а также может эффективно изменяться различными операциями с использованием стандартных изменяемых интерфейсов.</summary>
      <returns>Набор, которая содержит те же объекты, что и исходный набор, а также может эффективно изменяться различными операциями с использованием стандартных изменяемых интерфейсов.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary>Выполняет поиск указанного значения в наборе и возвращает равное ему значение, если его удалось найти.</summary>
      <param name="equalValue">Значение, которое нужно найти.</param>
      <param name="actualValue">Значение, найденное в наборе, либо исходное значение, если поиск не вернул результатов.</param>
      <returns>Значение, указывающее, успешно ли был выполнен поиск.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Создает новый неизменяемый набор хэширования, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции.</summary>
      <param name="other">Коллекция, из которой нужно добавить элементы.</param>
      <returns>Новый неизменяемый набор хэширования, в который добавлены элементы, или исходный набор, если все элементы уже есть в нем.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Возвращает экземпляр неизменяемого набора хэширования, который использует указанную функцию сравнения на равенство в методах поиска.</summary>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать.</param>
      <returns>Экземпляр неизменяемого набора хэширования, который использует указанную функцию сравнения.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary>Содержит механизмы обмена с взаимоблокировкой для неизменяемых коллекций.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary>Возвращает значение из словаря после добавления или изменения существующей записи.</summary>
      <param name="location">Переменная или поле, которые нужно обновить атомарным образом, если указанного элемента нет в словаре.</param>
      <param name="key">Ключ для значения, которое нужно добавить или обновить.</param>
      <param name="addValue">Значение, которое нужно использовать, если предыдущего значения не существует.</param>
      <param name="updateValueFactory">Функция, получающая ключ и предыдущее значение и возвращающая новое значение, которым нужно обновить словарь.</param>
      <typeparam name="TKey">Тип ключа, хранящегося в словаре.</typeparam>
      <typeparam name="TValue">Тип значения, хранящегося в словаре.</typeparam>
      <returns>Добавленное или обновленное значение.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary>Возвращает значение из словаря после добавления или изменения существующей записи.</summary>
      <param name="location">Переменная или поле, которые нужно обновить атомарным образом, если указанного элемента нет в словаре.</param>
      <param name="key">Ключ для значения, которое нужно добавить или обновить.</param>
      <param name="addValueFactory">Функция, получающая ключ и возвращающая новое значение, которое нужно добавить в словарь, если такого значения в нем нет.</param>
      <param name="updateValueFactory">Функция, получающая ключ и предыдущее значение и возвращающая новое значение, которым нужно обновить словарь.</param>
      <typeparam name="TKey">Тип ключа, хранящегося в словаре.</typeparam>
      <typeparam name="TValue">Тип значения, хранящегося в словаре.</typeparam>
      <returns>Добавленное или обновленное значение.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary>Атомарным образом добавляет элемент в конец очереди.</summary>
      <param name="location">Переменная или поле, которые нужно обновить атомарным образом.</param>
      <param name="value">Значение, которое нужно добавить в очередь.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>Возвращает из словаря значение для указанного ключа или добавляет в него новое значение, если такой ключ не найден.</summary>
      <param name="location">Переменная или поле, которые нужно обновить атомарным образом, если указанного ключа нет в словаре.</param>
      <param name="key">Ключ для значения, которое нужно получить или добавить.</param>
      <param name="value">Значение, которое нужно добавить в словарь, если ключ не найден.</param>
      <typeparam name="TKey">Тип ключей в коллекции.</typeparam>
      <typeparam name="TValue">Тип значений в коллекции.</typeparam>
      <returns>Значение по указанному ключу или <paramref name="valueFactory" />, если ключ не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary>Возвращает из словаря значение для указанного ключа или добавляет в него новое значение, если такой ключ не найден.</summary>
      <param name="location">Переменная или поле, которые нужно обновить атомарным образом, если указанного элемента нет в словаре.</param>
      <param name="key">Ключ значения, которое нужно получить или добавить.</param>
      <param name="valueFactory">Функция, выполняемая для получения значения, которое нужно вставить в словарь, если ключ не найден. Этот делегат будет вызван не больше одного раза.</param>
      <typeparam name="TKey">Тип ключей в коллекции.</typeparam>
      <typeparam name="TValue">Тип значений в коллекции.</typeparam>
      <returns>Значение по указанному ключу или <paramref name="valueFactory" />, если ключ не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary>Возвращает из словаря значение для указанного ключа или добавляет в него новое значение, если такой ключ не найден.</summary>
      <param name="location">Переменная или поле, которые нужно обновить, если указанного элемента нет в словаре.</param>
      <param name="key">Ключ значения, которое нужно получить или добавить.</param>
      <param name="valueFactory">Функция, выполняемая для получения значения, которое нужно вставить в словарь, если ключ не найден.</param>
      <param name="factoryArgument">Аргумент, передаваемый фабрике значений.</param>
      <typeparam name="TKey">Тип ключей в коллекции.</typeparam>
      <typeparam name="TValue">Тип значений в коллекции.</typeparam>
      <typeparam name="TArg">Тип аргумента, переданного в фабрику значений.</typeparam>
      <returns>Значение по указанному ключу или <paramref name="valueFactory" />, если ключ не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Проверяет два неизменяемых массива на равенство и, если они равны, заменяет один из них.</summary>
      <param name="location">Целевой объект, который нужно сравнить с объектом <paramref name="comparand" /> и, возможно, заменить.</param>
      <param name="value">Значение, которым будет заменено целевое значение, если проверка покажет равенство.</param>
      <param name="comparand">Значение, которое сравнивается со значением в позиции <paramref name="location" />.</param>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns>Исходное значение в позиции <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Задает для массива значение указанного массива и возвращает ссылку на исходный массив (вся операция выполняется атомарным образом).</summary>
      <param name="location">Массив, для которого нужно задать указанное значение.</param>
      <param name="value">Значение, которое задается для параметра <paramref name="location" />.</param>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns>Исходное значение <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Задает для массива значение указанного массива, если он не инициализирован.</summary>
      <param name="location">Массив, для которого нужно задать указанное значение.</param>
      <param name="value">Значение, которое задается для параметра <paramref name="location" />, если он не инициализирован.</param>
      <typeparam name="T">Тип элементов, которые хранятся в массиве.</typeparam>
      <returns>Значение <see langword="true" />, если массиву было присвоено указанное значение; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary>Помещает в стек новый элемент.</summary>
      <param name="location">Стек, в который вносятся изменения.</param>
      <param name="value">Значение, которое нужно поместить в стек.</param>
      <typeparam name="T">Тип элементов стека.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>Добавляет в словарь указанные ключ и значение, если такого ключа нет в словаре.</summary>
      <param name="location">Словарь, который нужно обновить с использованием указанных ключа и значения.</param>
      <param name="key">Ключ, который нужно добавить, если он еще не определен в словаре.</param>
      <param name="value">Значение для сложения.</param>
      <typeparam name="TKey">Тип ключей в коллекции.</typeparam>
      <typeparam name="TValue">Тип значений в коллекции.</typeparam>
      <returns>Значение <see langword="true" />, если ключа нет в словаре; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary>Атомарным образом удаляет и возвращает указанный элемент в голове очереди, если она не пуста.</summary>
      <param name="location">Переменная или поле, которые нужно обновить атомарным образом.</param>
      <param name="value">Устанавливает значение в голове очереди, если она не пуста.</param>
      <typeparam name="T">Тип элементов очереди.</typeparam>
      <returns>Значение <see langword="true" />, если очередь не пуста и из ее головы удален элемент; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary>Удаляет верхний элемент стека, если в нем есть элементы для удаления.</summary>
      <param name="location">Стек, в который вносятся изменения.</param>
      <param name="value">Получает значение, удаленное из стека, если стек не пуст.</param>
      <typeparam name="T">Тип элементов стека.</typeparam>
      <returns>Значение <see langword="true" />, если элемент удален из стека; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary>Удаляет элемент с указанным ключом, если такой ключ существует.</summary>
      <param name="location">Обновляемый словарь.</param>
      <param name="key">Удаляемый ключ.</param>
      <param name="value">Получает значение удаленного элемента, если словарь не пуст.</param>
      <typeparam name="TKey">Тип ключей в коллекции.</typeparam>
      <typeparam name="TValue">Тип значений в коллекции.</typeparam>
      <returns>Значение <see langword="true" />, если ключ найден и удален; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary>Устанавливает для указанного ключа заданное значение, если для него еще не установлено определенное значение.</summary>
      <param name="location">Обновляемый словарь.</param>
      <param name="key">Обновляемый ключ.</param>
      <param name="newValue">Устанавливаемое новое значение.</param>
      <param name="comparisonValue">Текущее значение для ключа <paramref name="key" />, чтобы операция была успешно выполнена.</param>
      <typeparam name="TKey">Тип ключей в коллекции.</typeparam>
      <typeparam name="TValue">Тип значений в коллекции.</typeparam>
      <returns>Значение <see langword="true" />, если в словаре есть ключ <paramref name="key" /> и значение <paramref name="comparisonValue" /> и для него было задано новое значение <paramref name="newValue" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary>Изменяет текущее значение на семантику транзакции оптимистической блокировки, используя указанную функцию трансформации.             Преобразование извлекается столько раз, сколько требуется для устранения конфликта оптимистической блокировки.</summary>
      <param name="location">Переменная или изменяемое поле, к которым могут обращаться сразу несколько потоков.</param>
      <param name="transformer">Функция, изменяющая значение. Эта функция не должна иметь никаких побочных эффектов, поскольку может выполняться сразу несколько раз при конфликтах с другими потоками.</param>
      <typeparam name="T">Тип данных.</typeparam>
      <returns>
        <see langword="true" />, если значение расположения изменилось после применения результата функции <paramref name="transformer" />; <see langword="false" />, если значение расположения осталось неизменным, поскольку последний вызов <paramref name="transformer" /> вернул существующее значение.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary>Изменяет текущее значение на семантику транзакции оптимистической блокировки, используя указанную функцию трансформации.             Преобразование извлекается столько раз, сколько требуется для устранения конфликта оптимистической блокировки.</summary>
      <param name="location">Переменная или изменяемое поле, к которым могут обращаться сразу несколько потоков.</param>
      <param name="transformer">Функция, изменяющая значение. Эта функция не должна иметь никаких побочных эффектов, поскольку может выполняться сразу несколько раз при конфликтах с другими потоками.</param>
      <param name="transformerArgument">Аргумент, передаваемый в <paramref name="transformer" />.</param>
      <typeparam name="T">Тип данных.</typeparam>
      <typeparam name="TArg">Тип аргумента, переданного в <paramref name="transformer" />.</typeparam>
      <returns>
        <see langword="true" />, если значение расположения изменилось после применения результата функции <paramref name="transformer" />; <see langword="false" />, если значение расположения осталось неизменным, поскольку последний вызов <paramref name="transformer" /> вернул существующее значение.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary>Содержит набор методов инициализации для экземпляров класса <see cref="T:System.Collections.Immutable.ImmutableList`1" />.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary>Создает пустой неизменяемый список.</summary>
      <typeparam name="T">Тип элементов, которые хранятся в списке.</typeparam>
      <returns>Пустой неизменяемый список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary>Создает новый неизменяемый список, который содержит указанный элемент.</summary>
      <param name="item">Элемент, которым нужно заполнить список.</param>
      <typeparam name="T">Тип элементов списка.</typeparam>
      <returns>Новый список, который содержит указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary>Создает новый неизменяемый список, который содержит указанный массив элементов.</summary>
      <param name="items">Массив элементов, которыми нужно заполнить список.</param>
      <typeparam name="T">Тип элементов списка.</typeparam>
      <returns>Новый неизменяемый список, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary>Создает новый построитель неизменяемого списка.</summary>
      <typeparam name="T">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns>Построитель неизменяемых коллекций.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Создает новый неизменяемый список, который содержит указанные элементы.</summary>
      <param name="items">Элементы, которые нужно добавить в список.</param>
      <typeparam name="T">Тип элементов списка.</typeparam>
      <returns>Неизменяемый список, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в списке.</summary>
      <param name="list">Список, в котором требуется выполнить поиск.</param>
      <param name="item">Объект, который нужно найти в списке. Для ссылочных типов допускается значение null.</param>
      <typeparam name="T">Тип элементов списка.</typeparam>
      <returns>Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов списка начиная с указанного индекса и до конца списка, если элемент найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в списке.</summary>
      <param name="list">Список, в котором требуется выполнить поиск.</param>
      <param name="item">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение null.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <typeparam name="T">Тип элементов списка.</typeparam>
      <returns>Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов неизменяемого списка начиная с указанного индекса и до конца списка, если элемент найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка начиная с заданного индекса и до последнего элемента.</summary>
      <param name="list">Список, в котором требуется выполнить поиск.</param>
      <param name="item">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение null.</param>
      <param name="startIndex">Индекс (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <typeparam name="T">Тип элементов списка.</typeparam>
      <returns>Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов неизменяемого списка начиная с указанного индекса и до конца списка, если элемент найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка начиная с заданного индекса и до последнего элемента.</summary>
      <param name="list">Список, в котором требуется выполнить поиск.</param>
      <param name="item">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение null.</param>
      <param name="startIndex">Индекс (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <param name="count">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <typeparam name="T">Тип элементов списка.</typeparam>
      <returns>Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов неизменяемого списка начиная с указанного индекса и до конца списка, если элемент найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его последнего вхождения в пределах всего неизменяемого списка.</summary>
      <param name="list">Список, в котором требуется выполнить поиск.</param>
      <param name="item">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение null.</param>
      <typeparam name="T">Тип элементов списка.</typeparam>
      <returns>Отсчитываемый от нуля индекс последнего вхождения элемента в пределах всего неизменяемого списка, если элемент найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его последнего вхождения в пределах всего неизменяемого списка.</summary>
      <param name="list">Список, в котором требуется выполнить поиск.</param>
      <param name="item">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение null.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <typeparam name="T">Тип элементов списка.</typeparam>
      <returns>Отсчитываемый от нуля индекс последнего вхождения элемента в пределах всего неизменяемого списка, если элемент найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его последнего вхождения в диапазоне элементов неизменяемого списка начиная с первого элемента и до заданного индекса.</summary>
      <param name="list">Список, в котором требуется выполнить поиск.</param>
      <param name="item">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение null.</param>
      <param name="startIndex">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <typeparam name="T">Тип элементов списка.</typeparam>
      <returns>Отсчитываемый от нуля индекс последнего вхождения элемента в диапазоне элементов неизменяемого списка начиная с первого элемента и до указанной позиции, если элемент найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его последнего вхождения в диапазоне элементов неизменяемого списка начиная с первого элемента и до заданного индекса.</summary>
      <param name="list">Список, в котором требуется выполнить поиск.</param>
      <param name="item">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение null.</param>
      <param name="startIndex">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <param name="count">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <typeparam name="T">Тип элементов списка.</typeparam>
      <returns>Отсчитываемый от нуля индекс последнего вхождения элемента в диапазоне элементов неизменяемого списка начиная с первого элемента и до указанной позиции, если элемент найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Удаляет из списка указанное значение.</summary>
      <param name="list">Список, в котором требуется выполнить поиск.</param>
      <param name="value">Удаляемое значение.</param>
      <typeparam name="T">Тип элементов списка.</typeparam>
      <returns>Новый неизменяемый список, из которого удален указанный элемент, или исходный список, если элемент в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Удаляет из списка указанные значения.</summary>
      <param name="list">Список, в котором требуется выполнить поиск.</param>
      <param name="items">Элементы, которые нужно удалить, если соответствующие значения будут найдены в списке.</param>
      <typeparam name="T">Тип элементов списка.</typeparam>
      <returns>Новый неизменяемый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary>Заменяет первый такой же элемент списка указанным элементом.</summary>
      <param name="list">Список, в котором требуется выполнить поиск.</param>
      <param name="oldValue">Элемент, который нужно заменить.</param>
      <param name="newValue">Элемент, которым нужно заменить старый элемент.</param>
      <typeparam name="T">Тип элементов списка.</typeparam>
      <returns>Новый список (даже если замененное значение равно новому значению в этой позиции).</returns>
      <exception cref="T:System.ArgumentException">Возникает, если старое значение не существует в списке.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Выполняет перечисление последовательности и создает неизменяемый список на основе ее содержимого.</summary>
      <param name="source">Перебираемая последовательность.</param>
      <typeparam name="TSource">Тип элементов последовательности.</typeparam>
      <returns>Неизменяемый список, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary>Создает неизменяемый список из текущего содержимого коллекции построителя.</summary>
      <param name="builder">Построитель для создания неизменяемого списка.</param>
      <typeparam name="TSource">Тип элементов в списке.</typeparam>
      <returns>Неизменяемый список, содержащий текущее содержимое коллекции построителя.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary>Представляет строго типизированный неизменяемый список объектов, доступных по индексу.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T">Тип элементов в списке.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary>Добавляет указанный объект в конец неизменяемого списка.</summary>
      <param name="value">Добавляемый объект.</param>
      <returns>Новый неизменяемый список с добавленным объектом.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Добавляет элементы указанной коллекции в конец неизменяемого списка.</summary>
      <param name="items">Коллекция, элементы которой нужно добавить в конец списка.</param>
      <returns>Новый неизменяемый список с добавленными элементами.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary>Выполняет поиск элемента по всему отсортированному списку, используя функцию сравнения по умолчанию, и возвращает его индекс, отсчитываемый от нуля.</summary>
      <param name="item">Искомый объект. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <returns>Отсчитываемый от нуля индекс элемента в отсортированном списке, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем данный элемент, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">Функции сравнения по умолчанию не удается найти реализацию сравнения для типа T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>Выполняет поиск элемента по всему отсортированному списку, используя указанный компаратор, и возвращает индекс элемента, отсчитываемый от нуля.</summary>
      <param name="item">Искомый объект. Для ссылочных типов допускается значение null.</param>
      <param name="comparer">Реализация функции сравнения, которую нужно использовать при проверке элементов, или null, если следует использовать функцию сравнения по умолчанию.</param>
      <returns>Отсчитываемый от нуля индекс элемента в отсортированном списке, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем данный элемент, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">функция сравнения имеет значение <see langword="null" /> и функции сравнения по умолчанию не удается найти реализацию сравнения для типа T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>Выполняет поиск элемента в диапазоне элементов отсортированного списка, используя указанную функцию сравнения, и возвращает индекс элемента, отсчитываемый от нуля.</summary>
      <param name="index">Отсчитываемый от нуля индекс начала диапазона поиска.</param>
      <param name="count">Длина диапазона поиска.</param>
      <param name="item">Искомый объект. Для ссылочных типов допускается значение null.</param>
      <param name="comparer">Реализация функции сравнения, которую нужно использовать при проверке элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию.</param>
      <returns>Отсчитываемый от нуля индекс элемента в отсортированном списке, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем данный элемент, или, если большего элемента не существует, поразрядным дополнением значения <paramref name="count" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">индекс меньше 0 или <paramref name="count" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">индекс и <paramref name="count" /> не указывают допустимый диапазон в списке.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> имеет значение <see langword="null" /> и функции сравнения по умолчанию не удается найти реализацию сравнения для типа T.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary>Представляет список, для изменения которого не требуется выделение памяти (или выделяется небольшой объем) и с помощью которого можно эффективно создавать или конструировать экземпляры неизменяемых списков.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary>Добавляет элемент в неизменяемый список.</summary>
      <param name="item">Элемент, который нужно добавить в список.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Добавляет ряд элементов в конец списка.</summary>
      <param name="items">Элементы, которые нужно добавить в конец списка.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary>Выполняет поиск элемента по всему списку <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, используя функцию сравнения по умолчанию, и возвращает его индекс, отсчитываемый от нуля.</summary>
      <param name="item">Искомый объект. Для ссылочных типов допускается значение null.</param>
      <returns>Отсчитываемый от нуля индекс элемента в списке <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException">Функция сравнения по умолчанию <see cref="P:System.Collections.Generic.Comparer`1.Default" /> не может найти реализацию универсального интерфейса <see cref="T:System.IComparable`1" /> или интерфейса <see cref="T:System.IComparable" /> для типа T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>Выполняет поиск элемента по всему списку <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, используя указанную функцию сравнения, и возвращает его индекс, отсчитываемый от нуля.</summary>
      <param name="item">Искомый объект. Для ссылочных типов допускается значение null.</param>
      <param name="comparer">Реализация, которую нужно использовать при сравнении элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию.</param>
      <returns>Отсчитываемый от нуля индекс элемента в списке <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> имеет значение <see langword="null" />, а функция сравнения по умолчанию <see cref="P:System.Collections.Generic.Comparer`1.Default" /> не может найти реализацию универсального интерфейса <see cref="T:System.IComparable`1" /> или интерфейса <see cref="T:System.IComparable" /> для типа T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>Выполняет поиск элемента в указанном диапазоне списка <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, используя указанную функцию сравнения, и возвращает его индекс, отсчитываемый от нуля.</summary>
      <param name="index">Отсчитываемый от нуля индекс начала диапазона поиска.</param>
      <param name="count">Длина диапазона поиска.</param>
      <param name="item">Искомый объект. Для ссылочных типов допускается значение null.</param>
      <param name="comparer">Реализация, которую нужно использовать при сравнении элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию.</param>
      <returns>Отсчитываемый от нуля индекс элемента в списке <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, если он найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше 0.
-или-
Значение параметра <paramref name="count" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">Параметры <paramref name="index" /> и <paramref name="count" /> не указывают допустимый диапазон в <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> имеет значение <see langword="null" />, а функция сравнения по умолчанию <see cref="P:System.Collections.Generic.Comparer`1.Default" /> не может найти реализацию универсального интерфейса <see cref="T:System.IComparable`1" /> или интерфейса <see cref="T:System.IComparable" /> для типа T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary>Удаляет все элементы из неизменяемого списка.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary>Определяет, содержит ли неизменяемый список указанное значение.</summary>
      <param name="item">Объект, который нужно найти в списке.</param>
      <returns>Значение <see langword="true" />, если элемент найден в списке; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary>Создает новый неизменяемый список на основе списка, представленного этим построителем, с использованием функции преобразователя.</summary>
      <param name="converter">Функция преобразователя.</param>
      <typeparam name="TOutput">Тип выходных данных делегированной функции преобразователя.</typeparam>
      <returns>Новый неизменяемый список на основе списка, представленного этим построителем.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary>Копирует весь неизменяемый список в совместимый одномерный массив начиная с начала целевого массива.</summary>
      <param name="array">Одномерный массив, в который копируются элементы неизменяемого списка. Индекс в массиве должен начинаться с нуля.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>Копирует весь неизменяемый список в совместимый одномерный массив начиная с указанного индекса.</summary>
      <param name="array">Одномерный массив, в который копируются элементы неизменяемого списка. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве, с которого начинается копирование.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Копирует весь неизменяемый список в совместимый одномерный массив начиная с указанного индекса.</summary>
      <param name="index">Отсчитываемый от нуля индекс исходного списка, с которого начинается копирование.</param>
      <param name="array">Одномерный массив, в который копируются элементы неизменяемого списка. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
      <param name="count">Число элементов для копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary>Возвращает количество элементов в неизменяемом списке.</summary>
      <returns>Количество элементов в списке.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary>Определяет, содержит ли неизменяемый список элементы, удовлетворяющие условиям указанного предиката.</summary>
      <param name="match">Делегат, определяющий условия поиска элементов.</param>
      <returns>Значение <see langword="true" />, если неизменяемый список содержит один или несколько элементов, удовлетворяющих условиям указанного предиката; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary>Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает первое найденное вхождение в пределах всего неизменяемого списка.</summary>
      <param name="match">Делегат, определяющий условия поиска элемента.</param>
      <returns>Первый элемент, удовлетворяющий условиям указанного предиката, если такой элемент найден; в противном случае — значение по умолчанию для типа <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary>Извлекает все элементы, удовлетворяющие условиям указанного предиката.</summary>
      <param name="match">Делегат, определяющий условия поиска элементов.</param>
      <returns>Неизменяемый список, который содержит все элементы, удовлетворяющие условиям указанного предиката, если такие элементы найдены; в противном случае — пустой неизменяемый список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка, начинающемся с заданного индекса и содержащем указанное число элементов.</summary>
      <param name="startIndex">Индекс (с нуля) начальной позиции поиска.</param>
      <param name="count">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <param name="match">Делегат, определяющий условия поиска элемента.</param>
      <returns>Отсчитываемый от нуля индекс первого вхождения элемента, отвечающего условиям предиката <paramref name="match" />, если такой элемент найден. В противном случае значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка, начинающемся с заданного индекса и заканчивающимся последним элементом.</summary>
      <param name="startIndex">Индекс (с нуля) начальной позиции поиска.</param>
      <param name="match">Делегат, определяющий условия поиска элемента.</param>
      <returns>Отсчитываемый от нуля индекс первого вхождения элемента, отвечающего условиям предиката <paramref name="match" />, если такой элемент найден. В противном случае значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary>Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс первого найденного вхождения в пределах всего неизменяемого списка.</summary>
      <param name="match">Делегат, определяющий условия поиска элемента.</param>
      <returns>Отсчитываемый от нуля индекс первого вхождения элемента, отвечающего условиям предиката <paramref name="match" />, если такой элемент найден. В противном случае значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary>Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает последнее найденное вхождение в пределах всего неизменяемого списка.</summary>
      <param name="match">Делегат, определяющий условия поиска элемента.</param>
      <returns>Последний элемент, удовлетворяющий условиям указанного предиката, если такой элемент найден; в противном случае — значение по умолчанию для типа <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс последнего вхождения в диапазоне элементов неизменяемого списка, содержащем указанное число элементов и заканчивающемся элементом с заданным индексом.</summary>
      <param name="startIndex">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <param name="count">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <param name="match">Делегат, определяющий условия поиска элемента.</param>
      <returns>Отсчитываемый от нуля индекс последнего вхождения элемента, удовлетворяющего условиям предиката <paramref name="match" />, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс его последнего вхождения в диапазоне элементов неизменяемого списка, начинающемся с первого элемента и заканчивающимся указанным индексом.</summary>
      <param name="startIndex">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <param name="match">Делегат, определяющий условия поиска элемента.</param>
      <returns>Отсчитываемый от нуля индекс последнего вхождения элемента, удовлетворяющего условиям предиката <paramref name="match" />, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary>Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс последнего найденного вхождения в пределах всего неизменяемого списка.</summary>
      <param name="match">Делегат, определяющий условия поиска элемента.</param>
      <returns>Отсчитываемый от нуля индекс последнего вхождения элемента, удовлетворяющего условиям предиката <paramref name="match" />, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary>Выполняет указанное действие с каждым элементом списка.</summary>
      <param name="action">Делегат, выполняемый для каждого элемента списка.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов списка.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary>Создает неполную копию диапазона элементов исходного неизменяемого списка.</summary>
      <param name="index">Отсчитываемый от нуля индекс, с которого начинается диапазон.</param>
      <param name="count">Число элементов в диапазоне.</param>
      <returns>Неполная копия диапазона элементов исходного неизменяемого списка.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка.</summary>
      <param name="item">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <returns>Отсчитываемый от нуля индекс первого вхождения элемента <paramref name="item" /> в диапазоне элементов неизменяемого списка, если элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка начиная с заданного индекса и до последнего элемента.</summary>
      <param name="item">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="index">Индекс (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <returns>Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов неизменяемого списка начиная с позиции <paramref name="index" /> и до конца списка, если элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка, начинающемся с заданного индекса и содержащем указанное число элементов.</summary>
      <param name="item">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="index">Индекс (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <param name="count">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <returns>Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов неизменяемого списка, который начинается с позиции <paramref name="index" /> и содержит <paramref name="count" /> элементов, если искомый объект найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов списка <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, начинающемся с заданного индекса и содержащем указанное число элементов.</summary>
      <param name="item">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="index">Индекс (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <param name="count">Число искомых элементов.</param>
      <param name="equalityComparer">Функция сравнения значений, которую нужно использовать для проверки элементов на предмет равенства.</param>
      <returns>Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов неизменяемого списка, который начинается с позиции <paramref name="index" /> и содержит <paramref name="count" /> элементов, если искомый объект найден; в противном случае — значение –1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary>Вставляет элемент в неизменяемый список по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="item" />.</param>
      <param name="item">Объект, который нужно вставить в неизменяемый список.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Вставляет элементы коллекции в неизменяемый список в позиции с указанным индексом.</summary>
      <param name="index">Отсчитываемый от нуля индекс места вставки новых элементов.</param>
      <param name="items">Коллекция, элементы которой нужно вставить в неизменяемый список. Коллекция не может быть задана значением <see langword="null" />, но может содержать пустые элементы, если тип <c>T</c> является ссылочным.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary>Возвращает или устанавливает значение в списке по указанному индексу.</summary>
      <param name="index">Индекс элемента, который нужно получить или установить.</param>
      <returns>Значение по указанному индексу.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary>Возвращает доступную только для чтения ссылку на значение заданного <paramref name="index" /> в списке.</summary>
      <param name="index">Индекс требуемого элемента.</param>
      <returns>Доступная только для чтения ссылка на значение по указанному <paramref name="index" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его последнего вхождения в пределах всего неизменяемого списка.</summary>
      <param name="item">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <returns>Отсчитываемый от нуля индекс последнего вхождения <paramref name="item" /> в пределах всего неизменяемого списка, если элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его последнего вхождения в диапазоне элементов неизменяемого списка начиная с первого элемента и до заданного индекса.</summary>
      <param name="item">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="startIndex">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <returns>Отсчитываемый от нуля индекс последнего вхождения элемента <paramref name="item" /> в диапазоне элементов неизменяемого списка начиная с первого элемента и до позиции <paramref name="index" />, если элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс последнего вхождения в диапазоне элементов неизменяемого списка, содержащем указанное число элементов и заканчивающемся в позиции с указанным индексом.</summary>
      <param name="item">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="startIndex">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <param name="count">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <returns>Отсчитываемый от нуля индекс последнего вхождения объекта <paramref name="item" /> в диапазоне элементов неизменяемого списка, состоящем из <paramref name="count" /> элементов и заканчивающемся в позиции <paramref name="index" />, если элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс последнего вхождения в диапазоне элементов неизменяемого списка, содержащем указанное число элементов и заканчивающемся в позиции с указанным индексом.</summary>
      <param name="item">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="startIndex">Индекс (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <param name="count">Число искомых элементов.</param>
      <param name="equalityComparer">Функция сравнения значений, которую нужно использовать для проверки элементов на предмет равенства.</param>
      <returns>Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов неизменяемого списка, который начинается с позиции <paramref name="index" /> и содержит <paramref name="count" /> элементов, если искомый объект найден; в противном случае — значение –1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary>Удаляет первое вхождение указанного объекта из неизменяемого списка.</summary>
      <param name="item">Объект, который нужно удалить из списка.</param>
      <returns>Значение <see langword="true" />, если элемент был успешно удален из списка; в противном случае — значение <see langword="false" />. Этот метод также возвращает значение <see langword="false" />, если элемент не найден в списке.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary>Удаляет все элементы, удовлетворяющие условиям указанного предиката.</summary>
      <param name="match">Делегат, определяющий условия удаления элементов.</param>
      <returns>Количество элементов, удаляемых из неизменяемого списка.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary>Удаляет из неизменяемого списка элемент с указанным индексом.</summary>
      <param name="index">Отсчитываемый от нуля индекс элемента, удаляемого из списка.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary>Изменяет порядок элементов во всем неизменяемом списке на обратный.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary>Изменяет порядок элементов неизменяемого списка в указанном диапазоне.</summary>
      <param name="index">Отсчитываемый от нуля индекс начала диапазона, порядок элементов которого требуется изменить.</param>
      <param name="count">Число элементов в диапазоне, порядок сортировки в котором требуется изменить.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary>Сортирует элементы во всем неизменяемом списке с помощью функции сравнения по умолчанию.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Сортирует элементы во всем неизменяемом списке с помощью указанной функции сравнения.</summary>
      <param name="comparer">Реализация, которую нужно использовать при сравнении элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary>Сортирует элементы во всем неизменяемом списке с помощью указанного объекта сравнения.</summary>
      <param name="comparison">Объект, используемый при сравнении элементов.</param>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="comparison" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Сортирует элементы в диапазоне неизменяемого списка с помощью указанной функции сравнения.</summary>
      <param name="index">Индекс (с нуля) начала диапазона, который требуется отсортировать.</param>
      <param name="count">Длина диапазона сортировки.</param>
      <param name="comparer">Реализация, которую нужно использовать при сравнении элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Получает значение, указывающее, доступен ли данный экземпляр только для чтения.</summary>
      <returns>Всегда <c>имеет значение false</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns>Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы списка в массив начиная с определенного индекса массива.</summary>
      <param name="array">Одномерный массив, в который копируются элементы из списка. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Получает значение, определяющее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>
        <see langword="true" />, если доступ к классу <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns>Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary>Добавляет элемент в список.</summary>
      <param name="value">Объект, который нужно добавить в список.</param>
      <returns>Позиция, в которую вставлен новый элемент, или значение -1, если элемент не вставлен в коллекцию.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary>Удаляет все элементы из списка.</summary>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary>Определяет, содержит ли список указанное значение.</summary>
      <param name="value">Объект, который нужно найти в списке.</param>
      <returns>Значение <see langword="true" />, если объект <see cref="T:System.Object" /> найден в списке; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary>Определяет индекс указанного элемента в списке.</summary>
      <param name="value">Объект, который нужно найти в списке.</param>
      <returns>Индекс <paramref name="value" />, если он найден в списке; в противном случае — значение -1.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Вставляет элемент в список по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="value" />.</param>
      <param name="value">Объект, который нужно вставить в список.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary>Возвращает значение, показывающее, имеет ли объект <see cref="T:System.Collections.IList" /> фиксированный размер.</summary>
      <returns>Значение <see langword="true" />, если словарь <see cref="T:System.Collections.IList" /> имеет фиксированный размер; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary>Возвращает значение, которое определяет, является ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> доступной только для чтения.</summary>
      <returns>Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary>Возвращает или задает объект <see cref="T:System.Object" /> с заданным индексом.</summary>
      <param name="index">Индекс.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary>Удаляет из списка первый экземпляр указанного объекта.</summary>
      <param name="value">Объект, который нужно удалить из списка.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary>Создает неизменяемый список на основе содержимого исходного экземпляра.</summary>
      <returns>Неизменяемый список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary>Определяет, все ли элементы неизменяемого списка удовлетворяют условиям указанного предиката.</summary>
      <param name="match">Делегат, который определяет условия, проверяемые для элементов.</param>
      <returns>Значение <see langword="true" />, если каждый элемент неизменяемого списка удовлетворяет условиям указанного предиката; в противном случае — значение <see langword="false" />. Если в списке нет элементов, возвращается <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary>Удаляет все элементы из неизменяемого списка.</summary>
      <returns>Пустой список, в котором используются те же правила сортировки и упорядочения, что и в исходном экземпляре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary>Определяет, содержит ли неизменяемый список указанное значение.</summary>
      <param name="value">Значение, которое нужно найти.</param>
      <returns>Значение <see langword="true" />, если список содержит указанное значение, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary>Преобразует элементы текущего неизменяемого списка в другой тип и возвращает список преобразованных элементов.</summary>
      <param name="converter">Делегат, преобразующий каждый элемент из одного типа в другой.</param>
      <typeparam name="TOutput">Тип элементов массива назначения.</typeparam>
      <returns>Список с элементами конечного типа, преобразованными из текущего <see cref="T:System.Collections.Immutable.ImmutableList`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary>Копирует весь неизменяемый список в совместимый одномерный массив начиная с начала целевого массива.</summary>
      <param name="array">Одномерный массив, в который копируются элементы неизменяемого списка. Индекс в массиве должен начинаться с нуля.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary>Копирует весь неизменяемый список в совместимый одномерный массив начиная с указанного индекса.</summary>
      <param name="array">Одномерный массив, в который копируются элементы неизменяемого списка. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Копирует диапазон элементов неизменяемого списка в совместимый одномерный массив начиная с указанного индекса целевого массива.</summary>
      <param name="index">Отсчитываемый от нуля индекс исходного списка, с которого начинается копирование.</param>
      <param name="array">Одномерный массив, в который копируются элементы неизменяемого списка. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве, с которого начинается копирование.</param>
      <param name="count">Число элементов для копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary>Возвращает количество элементов в списке.</summary>
      <returns>Количество элементов в списке.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary>Возвращает пустой список с функцией сортировки по умолчанию.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary>Выполняет перечисление содержимого двоичного дерева.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент, расположенный в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary>Освобождает ресурсы, используемые текущим экземпляром класса <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу неизменяемого списка.</summary>
      <returns>Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца списка.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом неизменяемого списка.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Текущий элемент.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary>Определяет, содержит ли неизменяемый список элементы, удовлетворяющие условиям указанного предиката.</summary>
      <param name="match">Делегат, определяющий условия поиска элементов.</param>
      <returns>Значение <see langword="true" />, если неизменяемый список содержит один или несколько элементов, удовлетворяющих условиям указанного предиката; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary>Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает первое найденное вхождение в пределах всего неизменяемого списка.</summary>
      <param name="match">Делегат, определяющий условия поиска элемента.</param>
      <returns>Первый элемент, удовлетворяющий условиям указанного предиката, если такой элемент найден; в противном случае — значение по умолчанию для типа <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary>Извлекает все элементы, удовлетворяющие условиям указанного предиката.</summary>
      <param name="match">Делегат, определяющий условия поиска элементов.</param>
      <returns>Неизменяемый список, который содержит все элементы, удовлетворяющие условиям указанного предиката, если такие элементы найдены; в противном случае — пустой неизменяемый список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка, начинающемся с заданного индекса и содержащем указанное число элементов.</summary>
      <param name="startIndex">Индекс (с нуля) начальной позиции поиска.</param>
      <param name="count">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <param name="match">Делегат, определяющий условия поиска элемента.</param>
      <returns>Отсчитываемый от нуля индекс первого вхождения элемента, удовлетворяющего указанным условиям, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс его первого вхождения в диапазоне элементов неизменяемого списка, начинающемся с заданного индекса и заканчивающимся последним элементом.</summary>
      <param name="startIndex">Индекс (с нуля) начальной позиции поиска.</param>
      <param name="match">Делегат, определяющий условия поиска элемента.</param>
      <returns>Отсчитываемый от нуля индекс первого вхождения элемента, удовлетворяющего указанным условиям, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary>Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс первого найденного вхождения в пределах всего неизменяемого списка.</summary>
      <param name="match">Делегат, определяющий условия поиска элемента.</param>
      <returns>Отсчитываемый от нуля индекс первого вхождения элемента, удовлетворяющего указанным условиям, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary>Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает последнее найденное вхождение в пределах всего неизменяемого списка.</summary>
      <param name="match">Делегат, определяющий условия поиска элемента.</param>
      <returns>Последний элемент, удовлетворяющий условиям указанного предиката, если такой элемент найден; в противном случае — значение по умолчанию для типа <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс последнего вхождения в диапазоне элементов неизменяемого списка, содержащем указанное число элементов и заканчивающемся элементом с заданным индексом.</summary>
      <param name="startIndex">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <param name="count">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <param name="match">Делегат, определяющий условия поиска элемента.</param>
      <returns>Отсчитываемый от нуля индекс последнего вхождения элемента, удовлетворяющего условиям предиката <paramref name="match" />, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс его последнего вхождения в диапазоне элементов неизменяемого списка, начинающемся с первого элемента и заканчивающимся указанным индексом.</summary>
      <param name="startIndex">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <param name="match">Делегат, определяющий условия поиска элемента.</param>
      <returns>Отсчитываемый от нуля индекс последнего вхождения элемента, удовлетворяющего условиям предиката <paramref name="match" />, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary>Выполняет поиск элемента, удовлетворяющего условиям указанного предиката, и возвращает отсчитываемый от нуля индекс последнего найденного вхождения в пределах всего неизменяемого списка.</summary>
      <param name="match">Делегат, определяющий условия поиска элемента.</param>
      <returns>Отсчитываемый от нуля индекс последнего вхождения элемента, удовлетворяющего условиям предиката <paramref name="match" />, если такой элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary>Выполняет указанное действие с каждым элементом неизменяемого списка.</summary>
      <param name="action">Делегат, выполняемый для каждого элемента неизменяемого списка.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов неизменяемого списка.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов неизменяемого списка.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary>Создает неполную копию диапазона элементов исходного неизменяемого списка.</summary>
      <param name="index">Отсчитываемый от нуля индекс, с которого начинается диапазон.</param>
      <param name="count">Число элементов в диапазоне.</param>
      <returns>Неполная копия диапазона элементов исходного неизменяемого списка.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс его первого вхождения в пределах всего неизменяемого списка.</summary>
      <param name="value">Объект, который нужно найти в неизменяемом списке. Для ссылочных типов допускается значение <c>null</c>.</param>
      <returns>Отсчитываемый от нуля индекс первого вхождения <paramref name="value" /> в пределах всего неизменяемого списка, если элемент найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс первого вхождения в диапазоне элементов списка, начинающемся с заданного индекса и содержащем указанное число элементов.</summary>
      <param name="item">Объект, который нужно найти в списке. Для ссылочных типов допускается значение null.</param>
      <param name="index">Индекс (с нуля) начальной позиции поиска. Значение 0 (ноль) действительно в пустом списке.</param>
      <param name="count">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns>Отсчитываемый от нуля индекс первого вхождения элемента в диапазоне элементов списка, который начинается с указанного индекса и содержит заданное число элементов, если искомый объект найден; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary>Вставляет указанный объект в неизменяемый список по указанному индексу.</summary>
      <param name="index">Отсчитываемый с нуля индекс, по которому нужно вставить объект.</param>
      <param name="item">Вставляемый объект.</param>
      <returns>Новый неизменяемый список после вставки в него объекта.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Вставляет элементы коллекции в неизменяемый список в позиции с указанным индексом.</summary>
      <param name="index">Отсчитываемый с нуля индекс, по которому нужно вставить элементы.</param>
      <param name="items">Коллекция, элементы которой нужно вставить.</param>
      <returns>Новый неизменяемый список после вставки в него элементов.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary>Возвращает значение, указывающее, является ли список пустым.</summary>
      <returns>Значение <see langword="true" />, если список пуст; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary>Возвращает элемент по указанному индексу списка.</summary>
      <param name="index">Индекс извлекаемого элемента.</param>
      <returns>Элемент, расположенный по указанному индексу.</returns>
      <exception cref="T:System.IndexOutOfRangeException">В операции Get <paramref name="index" /> имеет отрицательное значение или не меньше <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary>Возвращает доступную только для чтения ссылку на элемент набора в заданной <paramref name="index" />.</summary>
      <param name="index">Отсчитываемый от нуля индекс элемента в наборе, который необходимо вернуть.</param>
      <returns>Доступная только для чтения ссылка на элемент в заданной позиции.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> имеет отрицательное значение или не меньше <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс последнего вхождения в диапазоне элементов списка, содержащем указанное число элементов и заканчивающемся в позиции с указанным индексом.</summary>
      <param name="item">Объект, который нужно найти в списке. Для ссылочных типов допускается значение null.</param>
      <param name="index">Индекс (с нуля) начала диапазона поиска в обратном направлении.</param>
      <param name="count">Число элементов в диапазоне, в котором выполняется поиск.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns>Отсчитываемый от нуля индекс последнего вхождения элемента в диапазоне элементов списка, который содержит заданное число элементов и заканчивается по указанному индексу, если искомый объект найден; в противном случае — значение –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary>Удаляет первое вхождение указанного объекта из неизменяемого списка.</summary>
      <param name="value">Удаляемый объект.</param>
      <returns>Новый список, из которого удален указанный объект, или исходный список, если объект в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Удаляет из неизменяемого списка первое вхождение объекта, который равен указанному значению.</summary>
      <param name="value">Значение элемента, который нужно удалить из списка.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns>Новый список, из которого удален указанный объект, или исходный список, если объект в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>Удаляет все элементы, удовлетворяющие условиям указанного предиката.</summary>
      <param name="match">Делегат, определяющий условия удаления элементов.</param>
      <returns>Новый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary>Удаляет элемент по указанному индексу.</summary>
      <param name="index">Индекс (с нуля) элемента, который требуется удалить.</param>
      <returns>Новый список, из которого удален указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет из неизменяемого списка диапазон элементов.</summary>
      <param name="items">Коллекция, элементы которой нужно удалить из списка, если в нем будут найдены соответствующие значения.</param>
      <returns>Новый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Удаляет из списка указанные значения.</summary>
      <param name="items">Элементы, которые нужно удалить, если соответствующие значения будут найдены в списке.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns>Новый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Удаляет из неизменяемого списка диапазон объектов, который начинается с указанного индекса и содержит заданное число элементов.</summary>
      <param name="index">Индекс, с которого нужно начать удаление.</param>
      <param name="count">Число удаляемых элементов.</param>
      <returns>Новый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary>Заменяет указанный элемент неизменяемого списка новым.</summary>
      <param name="oldValue">Элемент, который нужно заменить.</param>
      <param name="newValue">Элемент, которым нужно заменить значение <paramref name="oldValue" />.</param>
      <returns>Новый список, в котором заменен указанный элемент (даже если новый элемент равен старому).</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> не существует в неизменяемом списке.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Заменяет указанный элемент неизменяемого списка новым.</summary>
      <param name="oldValue">Элемент списка, который нужно заменить.</param>
      <param name="newValue">Элемент, которым нужно заменить значение <paramref name="oldValue" />.</param>
      <param name="equalityComparer">Функция сравнения, которую нужно использовать для проверки на равенство.</param>
      <returns>Новый список, в котором заменен указанный объект, или исходный список, если объект в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary>Изменяет порядок элементов во всем неизменяемом списке на обратный.</summary>
      <returns>Обращенный список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary>Изменяет порядок элементов неизменяемого списка в указанном диапазоне.</summary>
      <param name="index">Отсчитываемый от нуля индекс начала диапазона, порядок элементов которого требуется изменить.</param>
      <param name="count">Число элементов в диапазоне, порядок сортировки в котором требуется изменить.</param>
      <returns>Обращенный список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary>Заменяет элемент списка в заданной позиции неизменяемого списка указанным элементом.</summary>
      <param name="index">Позиция элемента, который нужно заменить.</param>
      <param name="value">Элемент, которым нужно заменить старый элемент.</param>
      <returns>Новый список, в котором заменен указанный элемент (даже если новый элемент равен старому в заданной позиции).</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary>Сортирует элементы во всем неизменяемом списке с помощью функции сравнения по умолчанию.</summary>
      <returns>Сортируемый список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Сортирует элементы во всем неизменяемом списке с помощью указанной функции сравнения.</summary>
      <param name="comparer">Реализация, которую нужно использовать при сравнении элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns>Сортируемый список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary>Сортирует элементы во всем неизменяемом списке с помощью указанной функции сравнения.</summary>
      <param name="comparison">Делегат, используемый при сравнении элементов.</param>
      <returns>Сортируемый список.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="comparison" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Сортирует элементы неизменяемого списка с помощью указанной функции сравнения.</summary>
      <param name="index">Индекс (с нуля) начала диапазона, который требуется отсортировать.</param>
      <param name="count">Длина диапазона сортировки.</param>
      <param name="comparer">Реализация, которую нужно использовать при сравнении элементов, или <see langword="null" />, если следует использовать функцию сравнения по умолчанию (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns>Сортируемый список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Добавляет в неизменяемый список указанный элемент.</summary>
      <param name="item">Добавляемый элемент.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Удаляет все элементы из неизменяемого списка.</summary>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Получает значение, указывающее, является ли объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступным только для чтения.</summary>
      <returns>Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Удаляет первое вхождение указанного объекта из неизменяемого списка.</summary>
      <param name="item">Удаляемый объект.</param>
      <returns>Значение <see langword="true" />, если элемент <paramref name="item" /> был успешно удален из списка; в противном случае — значение <see langword="false" />. Этот метод также возвращает значение <see langword="false" />, если значение <paramref name="item" /> не найдено в исходном списке.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов неизменяемого списка.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов списка.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Вставляет объект в неизменяемый список по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="item" />.</param>
      <param name="item">Вставляемый объект.</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Возвращает или задает значение по указанному индексу.</summary>
      <param name="index" />
      <exception cref="T:System.IndexOutOfRangeException">Выдается из метода получения, если <paramref name="index" /> имеет отрицательное значение либо больше или равно <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">Всегда выдается из метода задания значения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Удаляет значение по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс удаляемого элемента.</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует весь неизменяемый список в совместимый одномерный массив начиная с указанного индекса.</summary>
      <param name="array">Одномерный массив, в который копируются элементы неизменяемого списка.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary>См. интерфейс <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary>См. раздел <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов неизменяемого списка.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов списка.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary>Добавляет элемент в неизменяемый список.</summary>
      <param name="value">Объект, который нужно добавить в список.</param>
      <returns>Позиция, в которую вставлен новый элемент, или значение -1, если элемент не вставлен в список.</returns>
      <exception cref="T:System.NotSupportedException">Создается всегда.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary>Удаляет все элементы из неизменяемого списка.</summary>
      <exception cref="T:System.NotSupportedException">Создается всегда.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary>Определяет, содержит ли неизменяемый список указанное значение.</summary>
      <param name="value">Объект, который нужно найти в списке.</param>
      <returns>Значение <see langword="true" />, если объект найден в списке; в противном случае — значение <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Определяет индекс указанного элемента в неизменяемом списке.</summary>
      <param name="value">Объект, который нужно найти в списке.</param>
      <returns>Индекс <paramref name="value" />, если он найден в списке; в противном случае — значение -1.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Вставляет элемент в неизменяемый список по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="value" />.</param>
      <param name="value">Объект, который нужно вставить в список.</param>
      <exception cref="T:System.NotSupportedException">Создается всегда.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary>Получает значение, указывающее, имеет ли список <see cref="T:System.Collections.IList" /> фиксированный размер.</summary>
      <returns>Значение <see langword="true" />, если словарь <see cref="T:System.Collections.IList" /> имеет фиксированный размер; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary>Получает значение, указывающее, является ли объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступным только для чтения.</summary>
      <returns>Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary>Возвращает или задает объект <see cref="T:System.Object" /> с заданным индексом.</summary>
      <param name="index">Индекс.</param>
      <returns>Значение по указанному индексу.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Выдается из метода получения, если <paramref name="index" /> имеет отрицательное значение либо больше или равно <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">Всегда выдается из метода задания значения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary>Удаляет первое вхождение указанного объекта из неизменяемого списка.</summary>
      <param name="value">Объект, который нужно удалить из списка.</param>
      <exception cref="T:System.NotSupportedException">Создается всегда.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Удаляет из неизменяемого списка элемент с указанным индексом.</summary>
      <param name="index">Отсчитываемый от нуля индекс удаляемого элемента.</param>
      <exception cref="T:System.NotSupportedException">Создается всегда.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>Добавляет в неизменяемый список указанное значение.</summary>
      <param name="value">Значение для сложения.</param>
      <returns>Новый список с добавленным элементом.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Добавляет в неизменяемый список указанные значения.</summary>
      <param name="items">Значения, которые нужно добавить.</param>
      <returns>Новый список с добавленными элементами.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>Возвращает пустой список с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</summary>
      <returns>Пустой список с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>Вставляет указанный элемент в неизменяемый список по указанному индексу.</summary>
      <param name="index">Индекс, по которому нужно вставить значение.</param>
      <param name="item">Элемент, который нужно вставить.</param>
      <returns>Новый неизменяемый список с указанным элементом.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Вставляет указанные элементы в неизменяемый список по указанному индексу.</summary>
      <param name="index">Индекс, по которому нужно вставить элементы.</param>
      <param name="items">Вставляемые элементы.</param>
      <returns>Новый неизменяемый список с указанными элементами.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Удаляет из списка элемент с указанным значением.</summary>
      <param name="value">Значение элемента, который нужно удалить из списка.</param>
      <param name="equalityComparer">Функция сравнения, которую нужно использовать для проверки элементов на равенство.</param>
      <returns>Новый список <see cref="T:System.Collections.Immutable.ImmutableList`1" />, из которого удален указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>Удаляет все элементы, удовлетворяющие условиям указанного предиката.</summary>
      <param name="match">Делегат, определяющий условия удаления элементов.</param>
      <returns>Новый неизменяемый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>Удаляет из неизменяемого списка элемент с указанным индексом.</summary>
      <param name="index">Индекс элемента, который должен быть удален.</param>
      <returns>Новый список, из которого удален указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Удаляет из неизменяемого списка диапазон элементов, которые совпадают с указанными объектами.</summary>
      <param name="items">Диапазон элементов, которые нужно удалить из списка, если они там есть.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для проверки элементов.</param>
      <returns>Неизменяемый список, из которого удалены указанные элементы.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="items" /> или <paramref name="equalityComparer" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>Удаляет указанное количество элементов из указанного места списка.</summary>
      <param name="index">Начальный индекс диапазона элементов, которые необходимо удалить.</param>
      <param name="count">Число удаляемых элементов.</param>
      <returns>Новый список, из которого удалены указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Заменяет элемент списка указанным элементом.</summary>
      <param name="oldValue">Элемент, который нужно заменить.</param>
      <param name="newValue">Элемент, которым нужно заменить старый элемент.</param>
      <param name="equalityComparer">Функция сравнения на равенство, которую нужно использовать для поиска.</param>
      <returns>Новый список.</returns>
      <exception cref="T:System.ArgumentException">Возникает, если старое значение не существует в списке.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>Заменяет элемент списка в заданной позиции указанным элементом.</summary>
      <param name="index">Позиция элемента, который нужно заменить.</param>
      <param name="value">Элемент, которым нужно заменить старый элемент.</param>
      <returns>Новый список.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary>Создает список, который содержит те же объекты, что и исходный, а также может эффективно изменяться различными операциями с использованием стандартных изменяемых интерфейсов.</summary>
      <returns>Новый список с тем же содержимым, что и исходный.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary>Определяет, все ли элементы неизменяемого списка удовлетворяют условиям указанного предиката.</summary>
      <param name="match">Делегат, который определяет условия, проверяемые для элементов.</param>
      <returns>Значение <see langword="true" />, если каждый элемент неизменяемого списка удовлетворяет условиям указанного предиката; в противном случае — значение <see langword="false" />. Если в списке нет элементов, возвращается <see langword="true" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary>Содержит набор методов инициализации для экземпляров класса <see cref="T:System.Collections.Immutable.ImmutableQueue`1" />.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary>Создает пустую неизменяемую очередь.</summary>
      <typeparam name="T">Тип элементов, которые хранятся в неизменяемой очереди.</typeparam>
      <returns>Пустая неизменяемая очередь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary>Создает новую неизменяемую очередь, которая содержит указанный элемент.</summary>
      <param name="item">Элемент, которым нужно заполнить очередь.</param>
      <typeparam name="T">Тип элементов неизменяемой очереди.</typeparam>
      <returns>Новая неизменяемая очередь, которая содержит указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary>Создает новую неизменяемую очередь, которая содержит указанный массив элементов.</summary>
      <param name="items">Массив элементов, которыми нужно заполнить очередь.</param>
      <typeparam name="T">Тип элементов неизменяемой очереди.</typeparam>
      <returns>Новая неизменяемая очередь, которая содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Создает новую неизменяемую очередь, которая содержит указанные элементы.</summary>
      <param name="items">Элементы, которые нужно добавить в очередь, прежде чем она станет неизменяемой.</param>
      <typeparam name="T">Тип элементов очереди.</typeparam>
      <returns>Неизменяемая очередь, которая содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary>Удаляет элемент из начала неизменяемой очереди и возвращает новую очередь.</summary>
      <param name="queue">Очередь, из которой нужно удалить элементы.</param>
      <param name="value">При возврате из метода содержит элемент из начала очереди.</param>
      <typeparam name="T">Тип элементов неизменяемой очереди.</typeparam>
      <returns>Новая очередь, из которой удален указанный элемент.</returns>
      <exception cref="T:System.InvalidOperationException">Стек является пустым.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary>Представляет неизменяемую очередь.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T">Тип элементов очереди.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary>Удаляет все объекты из неизменяемой очереди.</summary>
      <returns>Пустая неизменяемая очередь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary>Удаляет элемент из начала неизменяемой очереди и возвращает новую очередь.</summary>
      <returns>Новая неизменяемая очередь; никогда не принимает значение <c>null</c>.</returns>
      <exception cref="T:System.InvalidOperationException">Очередь является пустой.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary>Удаляет элемент из начала неизменяемой очереди и возвращает новую очередь.</summary>
      <param name="value">При возврате из метода содержит элемент из начала очереди.</param>
      <returns>Новая неизменяемая очередь, из которой удален начальный элемент.</returns>
      <exception cref="T:System.InvalidOperationException">Очередь является пустой.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary>Возвращает пустую неизменяемую очередь.</summary>
      <returns>Пустая неизменяемая очередь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary>Добавляет элемент в конец неизменяемой очереди и возвращает новую очередь.</summary>
      <param name="value">Добавляемый элемент.</param>
      <returns>Новая неизменяемая очередь.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary>Выполняет перечисление содержимого неизменяемой очереди без выделения дополнительной памяти.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент, расположенный в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу неизменяемой очереди.</summary>
      <returns>Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца очереди.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов неизменяемой очереди.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов очереди.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary>Возвращает значение, указывающее, является ли пустой эта неизменяемая очередь.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <returns>Значение <see langword="true" />, если эта очередь пуста; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary>Возвращает элемент из начала неизменяемой очереди, не удаляя его.</summary>
      <returns>Элемент в начале очереди.</returns>
      <exception cref="T:System.InvalidOperationException">Очередь является пустой.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary>Возвращает доступную только для чтения ссылку на элемент в начале очереди.</summary>
      <exception cref="T:System.InvalidOperationException">Очередь является пустой.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который используется для прохода по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary>Удаляет все элементы из неизменяемой очереди.</summary>
      <returns>Пустая неизменяемая очередь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary>Удаляет элемент из начала неизменяемой очереди и возвращает новую очередь.</summary>
      <returns>Новая неизменяемая очередь; никогда не принимает значение <c>null</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary>Добавляет элемент в конец неизменяемой очереди и возвращает новую очередь.</summary>
      <param name="value">Добавляемый элемент.</param>
      <returns>Новая неизменяемая очередь.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary>Содержит набор методов инициализации для экземпляров класса <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" />.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary>Создает пустой неизменяемый отсортированный словарь.</summary>
      <typeparam name="TKey">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue">Тип значений, которые хранятся в словаре.</typeparam>
      <returns>Пустой неизменяемый отсортированный словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary>Создает пустой неизменяемый отсортированный словарь, который использует указанную функцию сравнения ключей.</summary>
      <param name="keyComparer">Реализация, которую нужно использовать для определения равенства ключей в словаре.</param>
      <typeparam name="TKey">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue">Тип значений, которые хранятся в словаре.</typeparam>
      <returns>Пустой неизменяемый отсортированный словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает пустой неизменяемый отсортированный словарь, который использует указанные функции сравнения ключей и значений.</summary>
      <param name="keyComparer">Реализация, которую нужно использовать для определения равенства ключей в словаре.</param>
      <param name="valueComparer">Реализация, которую нужно использовать для определения равенства значений в словаре.</param>
      <typeparam name="TKey">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue">Тип значений, которые хранятся в словаре.</typeparam>
      <returns>Пустой неизменяемый отсортированный словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary>Создает новый построитель неизменяемых отсортированных словарей.</summary>
      <typeparam name="TKey">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue">Тип значений, которые хранятся в словаре.</typeparam>
      <returns>Построитель неизменяемых коллекций.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary>Создает новый построитель неизменяемых отсортированных словарей.</summary>
      <param name="keyComparer">Функция сравнения ключей.</param>
      <typeparam name="TKey">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue">Тип значений, которые хранятся в словаре.</typeparam>
      <returns>Построитель неизменяемых коллекций.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает новый построитель неизменяемых отсортированных словарей.</summary>
      <param name="keyComparer">Функция сравнения ключей.</param>
      <param name="valueComparer">Функция сравнения значений.</param>
      <typeparam name="TKey">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue">Тип значений, которые хранятся в словаре.</typeparam>
      <returns>Построитель неизменяемых коллекций.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Создает новый неизменяемый отсортированный словарь на основе заданного диапазона элементов с использованием указанной функции сравнения ключей.</summary>
      <param name="keyComparer">Реализация функции сравнения, которую нужно использовать для проверки ключей на предмет равенства и при сортировке.</param>
      <param name="items">Элементы, которые нужно добавить в отсортированный словарь.</param>
      <typeparam name="TKey">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue">Тип значений, которые хранятся в словаре.</typeparam>
      <returns>Новый неизменяемый отсортированный словарь, который содержит заданные элементы и использует указанную функцию сравнения ключей.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Создает новый неизменяемый отсортированный словарь на основе заданного диапазона элементов с использованием указанных функций сравнения ключей и значений.</summary>
      <param name="keyComparer">Реализация функции сравнения, которую нужно использовать для проверки ключей на предмет равенства и при сортировке.</param>
      <param name="valueComparer">Реализация функции сравнения, которую нужно использовать для проверки значений на предмет равенства и при сортировке.</param>
      <param name="items">Элементы, которые нужно добавить в отсортированный словарь, прежде чем он станет неизменяемым.</param>
      <typeparam name="TKey">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue">Тип значений, которые хранятся в словаре.</typeparam>
      <returns>Неизменяемый отсортированный словарь, который содержит заданные элементы и использует указанные функции сравнения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Создает неизменяемый отсортированный словарь, который содержит заданные элементы и использует функцию сравнения по умолчанию.</summary>
      <param name="items">Элементы, которые нужно добавить в отсортированный словарь, прежде чем он станет неизменяемым.</param>
      <typeparam name="TKey">Тип ключей, которые хранятся в словаре.</typeparam>
      <typeparam name="TValue">Тип значений, которые хранятся в словаре.</typeparam>
      <returns>Неизменяемый отсортированный словарь, который содержит заданные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Выполняет перечисление последовательности пар "ключ-значение" и создает неизменяемый отсортированный словарь на основе ее содержимого.</summary>
      <param name="source">Последовательность пар "ключ-значение", для которой нужно выполнить перечисление.</param>
      <typeparam name="TKey">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue">Тип значений в словаре.</typeparam>
      <returns>Неизменяемый отсортированный словарь, который содержит пары "ключ-значение" в указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary>Выполняет перечисление последовательности пар "ключ-значение" и создает на основе ее содержимого неизменяемый словарь с использованием указанной функции сравнения ключей.</summary>
      <param name="source">Последовательность пар "ключ-значение", для которой нужно выполнить перечисление.</param>
      <param name="keyComparer">Функция сравнения ключей, которую нужно использовать при создании неизменяемого словаря.</param>
      <typeparam name="TKey">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue">Тип значений в словаре.</typeparam>
      <returns>Неизменяемый отсортированный словарь, который содержит пары "ключ-значение" в указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Выполняет перечисление последовательности пар "ключ-значение" и создает на основе ее содержимого неизменяемый отсортированный словарь с использованием указанных функций сравнения ключей и значений.</summary>
      <param name="source">Последовательность пар "ключ-значение", для которой нужно выполнить перечисление.</param>
      <param name="keyComparer">Функция сравнения ключей, которую нужно использовать при создании неизменяемого словаря.</param>
      <param name="valueComparer">Функция сравнения значений, которую нужно использовать в неизменяемом словаре.</param>
      <typeparam name="TKey">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue">Тип значений в словаре.</typeparam>
      <returns>Неизменяемый отсортированный словарь, который содержит пары "ключ-значение" в указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary>Создает неизменяемый отсортированный словарь из текущего содержимого словаря построителя.</summary>
      <param name="builder">Построитель для создания неизменяемого отсортированного словаря.</param>
      <typeparam name="TKey">Тип ключей в словаре.</typeparam>
      <typeparam name="TValue">Тип значений в словаре.</typeparam>
      <returns>Неизменяемый отсортированный словарь, содержащий текущее содержимое словаря построителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Выполняет перечисление и преобразование последовательности и создает неизменяемый отсортированный словарь на основе ее содержимого.</summary>
      <param name="source">Последовательность, перечисление которой нужно выполнить для создания словаря.</param>
      <param name="keySelector">Функция, которая создает ключ для словаря на основе каждого элемента последовательности.</param>
      <param name="elementSelector">Функция, которая создает значение для словаря на основе каждого элемента последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей в результирующем словаре.</typeparam>
      <typeparam name="TValue">Тип значений в результирующем словаре.</typeparam>
      <returns>Неизменяемый отсортированный словарь, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary>Выполняет перечисление и преобразование последовательности и создает на основе ее содержимого неизменяемый отсортированный словарь с использованием указанной функции сравнения ключей.</summary>
      <param name="source">Последовательность, перечисление которой нужно выполнить для создания словаря.</param>
      <param name="keySelector">Функция, которая создает ключ для словаря на основе каждого элемента последовательности.</param>
      <param name="elementSelector">Функция, которая создает значение для словаря на основе каждого элемента последовательности.</param>
      <param name="keyComparer">Функция сравнения ключей, которую нужно использовать в словаре.</param>
      <typeparam name="TSource">Тип элементов последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей в результирующем словаре.</typeparam>
      <typeparam name="TValue">Тип значений в результирующем словаре.</typeparam>
      <returns>Неизменяемый словарь, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Выполняет перечисление и преобразование последовательности и создает на основе ее содержимого неизменяемый отсортированный словарь с использованием указанных функций сравнения ключей и значений.</summary>
      <param name="source">Последовательность, перечисление которой нужно выполнить для создания словаря.</param>
      <param name="keySelector">Функция, которая создает ключ для словаря на основе каждого элемента последовательности.</param>
      <param name="elementSelector">Функция, которая создает значение для словаря на основе каждого элемента последовательности.</param>
      <param name="keyComparer">Функция сравнения ключей, которую нужно использовать в словаре.</param>
      <param name="valueComparer">Функция сравнения значений, которую нужно использовать в словаре.</param>
      <typeparam name="TSource">Тип элементов последовательности.</typeparam>
      <typeparam name="TKey">Тип ключей в результирующем словаре.</typeparam>
      <typeparam name="TValue">Тип значений в результирующем словаре.</typeparam>
      <returns>Неизменяемый отсортированный словарь, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary>Представляет неизменяемый отсортированный словарь.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="TKey">Тип ключей, которые содержатся в словаре.</typeparam>
      <typeparam name="TValue">Тип значений, которые содержатся в словаре.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary>Добавляет в отсортированный словарь элемент с указанными ключом и значением.</summary>
      <param name="key">Ключ записи, которую требуется добавить.</param>
      <param name="value">Значение записи, которую нужно добавить.</param>
      <returns>Новый неизменяемый отсортированный словарь, который содержит добавленную пару "ключ-значение".</returns>
      <exception cref="T:System.ArgumentException">Данный ключ уже существует в словаре, но имеет другое значение.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Добавляет в неизменяемый отсортированный словарь указанные пары "ключ-значение".</summary>
      <param name="items">Пары "ключ-значение", которые нужно добавить.</param>
      <returns>Новый неизменяемый словарь, который содержит добавленные пары "ключ-значение".</returns>
      <exception cref="T:System.ArgumentException">Один из указанных ключей уже существует в словаре, но имеет другое значение.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary>Представляет отсортированный словарь, для изменения которого не требуется выделение памяти (или выделяется небольшой объем) и с помощью которого можно эффективно создавать или конструировать экземпляры неизменяемых отсортированных словарей.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary>Добавляет в неизменяемый отсортированный словарь элемент с указанными ключом и значением.</summary>
      <param name="key">Ключ добавляемого элемента.</param>
      <param name="value">Добавляемое значение элемента.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Добавляет в неизменяемый отсортированный словарь указанный элемент.</summary>
      <param name="item">Объект, который нужно добавить в словарь.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Добавляет в неизменяемый отсортированный словарь последовательность значений.</summary>
      <param name="items">Элементы, которые нужно добавить в словарь.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary>Удаляет все элементы из неизменяемого отсортированного словаря.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Определяет, содержится ли в неизменяемом отсортированном словаре указанное значение.</summary>
      <param name="item">Объект, который нужно найти в словаре.</param>
      <returns>Значение <see langword="true" />, если элемент <paramref name="item" /> найден в словаре; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary>Определяет, содержится ли в неизменяемом отсортированном словаре элемент с указанным ключом.</summary>
      <param name="key">Ключ, который нужно найти в словаре.</param>
      <returns>Значение <see langword="true" />, если в словаре содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary>Определяет, содержится ли в неизменяемом отсортированном словаре элемент с указанным значением.</summary>
      <param name="value">Значение, которое нужно найти в словаре. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <returns>Значение <see langword="true" />, если в неизменяемом отсортированном словаре содержится элемент с указанным значением; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary>Возвращает количество элементов в неизменяемом отсортированном словаре.</summary>
      <returns>Количество элементов в словаре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов неизменяемого отсортированного словаря.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов словаря.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>Возвращает значение для указанного ключа, если такой ключ есть в словаре, либо значение по умолчанию.</summary>
      <param name="key">Ключ, который нужно найти.</param>
      <returns>Значение для ключа или <c>default(TValue)</c>, если соответствующий ключ не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>Возвращает значение для указанного ключа, если такой ключ есть в словаре, либо значение по умолчанию.</summary>
      <param name="key">Ключ, который нужно найти.</param>
      <param name="defaultValue">Значение по умолчанию, которое нужно вернуть, если в словаре не найден соответствующий ключ.</param>
      <returns>Значение для ключа или <paramref name="defaultValue" />, если такой ключ не найден.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary>Возвращает или устанавливает значение для указанного ключа в неизменяемом отсортированном словаре.</summary>
      <param name="key">Ключ, для которого нужно получить значение.</param>
      <returns>Значение, связанное с указанным ключом.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary>Возвращает или задает функцию сравнения ключей.</summary>
      <returns>Функция сравнения ключей.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary>Возвращает строго типизированную коллекцию элементов, доступную только для чтения.</summary>
      <returns>Строго типизированная коллекция элементов, доступная только для чтения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary>Удаляет из неизменяемого отсортированного словаря элемент с указанным ключом.</summary>
      <param name="key">Ключ элемента, который требуется удалить.</param>
      <returns>Значение <see langword="true" />, если элемент успешно удален; в противном случае — значение <see langword="false" />. Этот метод также возвращает значение <see langword="false" />, если <paramref name="key" /> не удалось найти в исходном словаре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Удаляет из неизменяемого отсортированного словаря первое вхождение указанного объекта.</summary>
      <param name="item">Объект, который нужно удалить из словаря.</param>
      <returns>Значение <see langword="true" />, если объект <paramref name="item" /> успешно удален из словаря; в противном случае — значение <see langword="false" />. Этот метод также возвращает значение <see langword="false" />, если ключ <paramref name="item" /> не найден в словаре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет все записи с ключами, которые соответствуют содержащимся в указанной последовательности неизменяемого отсортированного словаря.</summary>
      <param name="keys">Ключи записей, которые нужно удалить из словаря.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы из словаря в массив начиная с определенного индекса в массиве.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <param name="array">Одномерный массив, в который копируются элементы словаря. Индекс в массиве должен начинаться с нуля.</param>
      <param name="index">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Получает значение, определяющее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>
        <see langword="true" />, если доступ к классу <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Добавляет в объект словаря элемент с указанными ключом и значением.</summary>
      <param name="key">Ключ добавляемого элемента.</param>
      <param name="value">Добавляемое значение элемента.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Определяет, содержится ли в объекте словаря элемент с указанным ключом.</summary>
      <param name="key">Искомый ключ.</param>
      <returns>Значение <see langword="true" />, если в словаре содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.IDictionaryEnumerator" /> для словаря.</summary>
      <returns>Объект <see cref="T:System.Collections.IDictionaryEnumerator" /> для словаря.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>Получает значение, указывающее, имеет ли объект <see cref="T:System.Collections.IDictionary" /> фиксированный размер.</summary>
      <returns>
        <see langword="true" />, если объект <see cref="T:System.Collections.IDictionary" /> имеет фиксированный размер, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>Возвращает значение, которое определяет, является ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> доступной только для чтения.</summary>
      <returns>Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>Возвращает или задает элемент с указанным ключом.</summary>
      <param name="key">Ключ.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>Возвращает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Удаляет из словаря элемент с указанным ключом.</summary>
      <param name="key">Ключ элемента, который требуется удалить.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>Возвращает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения из <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Объект перечислителя, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary>Создает неизменяемый отсортированный словарь на основе содержимого исходного экземпляра.</summary>
      <returns>Неизменяемый отсортированный словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>Определяет, содержится ли в словаре указанный ключ.</summary>
      <param name="equalKey">Ключ, который нужно найти.</param>
      <param name="actualKey">Соответствующий ключ, расположенный в словаре, если он найден, или <c>equalkey</c>, если совпадений нет.</param>
      <returns>Значение <see langword="true" />, если найдено совпадение для <paramref name="equalKey" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>Получает значение, связанное с заданным ключом.</summary>
      <param name="key">Ключ, значение которого нужно получить.</param>
      <param name="value">При возврате из метода содержит значение, связанное с указанным ключом, если он найден; в противном случае — значение по умолчанию для типа параметра <paramref name="value" />. Этот параметр передается неинициализированным.</param>
      <returns>Значение <see langword="true" />, если объект, реализующий словарь, содержит элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary>Возвращает или устанавливает функцию сравнения значений.</summary>
      <returns>Функция сравнения значений.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary>Возвращает доступную только для чтения ссылку на значение, связанное с предоставленным <paramref name="key" />.</summary>
      <param name="key" />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="key" /> отсутствует.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary>Возвращает коллекцию, содержащую значения неизменяемого отсортированного словаря.</summary>
      <returns>Коллекция значений из объекта, который реализует словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary>Возвращает пустой неизменяемый отсортированный словарь с теми же правилами упорядочения элементов и сравнения ключей и значений, что и в исходном экземпляре словаря.</summary>
      <returns>Пустой словарь с такими же правилами упорядочения элементов и сравнения ключей и значений.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Определяет, содержит ли неизменяемый отсортированный словарь указанные пары "ключ-значение".</summary>
      <param name="pair">Пара "ключ-значение", которую нужно найти.</param>
      <returns>Значение <see langword="true" />, если указанная пара "ключ-значение" найдена в словаре; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary>Определяет, содержит ли неизменяемая отсортированная карта указанный ключ.</summary>
      <param name="key">Искомый ключ.</param>
      <returns>Значение <see langword="true" />, если неизменяемый словарь содержит заданный ключ; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary>Определяет, содержится ли в неизменяемом отсортированном словаре элемент с указанным значением.</summary>
      <param name="value">Значение, которое нужно найти. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <returns>Значение <see langword="true" />, если в словаре содержится элемент с указанным значением; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary>Возвращает количество пар "ключ-значение" в неизменяемом отсортированном словаре.</summary>
      <returns>Количество пар "ключ-значение" в словаре.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary>Возвращает пустой неизменяемый отсортированный словарь.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary>Выполняет перечисление содержимого двоичного дерева.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент, расположенный в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary>Освобождает ресурсы, используемые текущим экземпляром класса <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу неизменяемого отсортированного словаря.</summary>
      <returns>Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца отсортированного словаря.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом словаря.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Текущий элемент.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов неизменяемого отсортированного словаря.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов словаря.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary>Возвращает значение, указывающее, является ли пустым этот экземпляр неизменяемого отсортированного словаря.</summary>
      <returns>Значение <see langword="true" />, если этот экземпляр пуст; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary>Возвращает значение <paramref name="TValue" />, связанное с указанным ключом.</summary>
      <param name="key">Ключ, для которого нужно получить значение.</param>
      <returns>Значение, связанное с указанным ключом. Если поиск не вернул результатов, операция вызывает исключение.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary>Возвращает функцию сравнения ключей для неизменяемого отсортированного словаря.</summary>
      <returns>Функция сравнения ключей, которую нужно использовать в словаре.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary>Возвращает ключи неизменяемого отсортированного словаря.</summary>
      <returns>Ключи в неизменяемом словаре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary>Удаляет из неизменяемого отсортированного словаря элемент с указанным значением.</summary>
      <param name="value">Значение элемента, который нужно удалить.</param>
      <returns>Новый неизменяемый словарь, из которого удален указанный элемент, либо исходный экземпляр, если найти в нем указанное значение не удалось.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет из неизменяемого отсортированного словаря элементы с указанными ключами.</summary>
      <param name="keys">Ключи элементов, которые нужно удалить.</param>
      <returns>Новый неизменяемый словарь, из которого удалены указанные ключи, либо исходный экземпляр, если найти в нем ключи не удалось.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary>Устанавливает в неизменяемом отсортированном словаре пару "ключ-значение" с возможной перезаписью существующего значения для указанного ключа.</summary>
      <param name="key">Ключ записи, которую требуется добавить.</param>
      <param name="value">Значение ключа, которое нужно установить.</param>
      <returns>Новый неизменяемый отсортированный словарь, который содержит указанную пару "ключ-значение".</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Устанавливает в неизменяемом отсортированном словаре указанные пары "ключ-значение" с возможной перезаписью существующих значений для данных ключей.</summary>
      <param name="items">Пары "ключ-значение", которые нужно установить в словаре. Если какой-то из ключей уже существует в словаре, этот метод перезапишет его текущее значение.</param>
      <returns>Неизменяемый словарь, который содержит указанные пары "ключ-значение".</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы из словаря в массив начиная с определенного индекса в массиве.</summary>
      <param name="array">Одномерный массив, в который копируются элементы словаря. Индекс в массиве должен начинаться с нуля.</param>
      <param name="index">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Возвращает значение, показывающее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>
        <see langword="true" />, если доступ к <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Добавляет в объект словаря элемент с указанными ключом и значением.</summary>
      <param name="key">Объект, используемый в качестве ключа добавляемого элемента.</param>
      <param name="value">Объект, используемый в качестве значения добавляемого элемента.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Очищает данный экземпляр.</summary>
      <exception cref="T:System.NotSupportedException">Объект словаря доступен только для чтения.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Определяет, содержится ли в объекте неизменяемого словаря элемент с указанным ключом.</summary>
      <param name="key">Ключ, который нужно найти в объекте словаря.</param>
      <returns>Значение <see langword="true" />, если в словаре содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.IDictionaryEnumerator" /> для объекта неизменяемого словаря.</summary>
      <returns>Объект перечислителя для объекта словаря.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Получает значение, показывающее, имеет ли объект <see cref="T:System.Collections.IDictionary" /> фиксированный размер.</summary>
      <returns>
        <see langword="true" />, если объект <see cref="T:System.Collections.IDictionary" /> имеет фиксированный размер, в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Получает значение, указывающее, является ли объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступным только для чтения.</summary>
      <returns>Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Возвращает или задает элемент с указанным ключом.</summary>
      <param name="key">Ключ.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Возвращает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий ключи объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Удаляет из объекта неизменяемого словаря элемент с указанным ключом.</summary>
      <param name="key">Ключ элемента, который требуется удалить.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>Возвращает интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения из <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />, содержащий значения объекта, который реализует <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Объект перечислителя, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary>Создает неизменяемый отсортированный словарь, который содержит те же объекты, что и исходный словарь, а также может эффективно изменяться различными операциями с использованием стандартных изменяемых интерфейсов.</summary>
      <returns>Коллекция с тем же содержимым, что и исходный словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary>Определяет, содержится ли в словаре указанный ключ.</summary>
      <param name="equalKey">Ключ, который нужно найти.</param>
      <param name="actualKey">Соответствующий ключ, расположенный в словаре, если он найден, или <c>equalkey</c>, если совпадений нет.</param>
      <returns>Значение <see langword="true" />, если найдено совпадение для <paramref name="equalKey" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>Получает значение, связанное с заданным ключом.</summary>
      <param name="key">Ключ, значение которого нужно получить.</param>
      <param name="value">При возврате из метода содержит значение, связанное с указанным ключом, если он найден; в противном случае — значение по умолчанию для типа параметра <paramref name="value" />.</param>
      <returns>Значение <see langword="true" />, если в словаре содержится элемент с указанным ключом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary>Возвращает функцию сравнения значений, которая используется для определения их равенства.</summary>
      <returns>Функция сравнения значений, которая используется для определения их равенства.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary>Возвращает доступную только для чтения ссылку на значение, связанное с предоставленным <paramref name="key" />.</summary>
      <param name="key" />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
        <paramref name="key" /> отсутствует.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary>Возвращает значения неизменяемого отсортированного словаря.</summary>
      <returns>Значения в словаре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary>Возвращает экземпляр неизменяемого отсортированного словаря, который использует указанную функцию сравнения ключей.</summary>
      <param name="keyComparer">Функция сравнения ключей, которую нужно использовать.</param>
      <returns>Экземпляр неизменяемого словаря, который использует указанную функцию сравнения.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>Возвращает экземпляр неизменяемого отсортированного словаря, который использует указанные функции сравнения ключей и значений.</summary>
      <param name="keyComparer">Функция сравнения ключей, которую нужно использовать.</param>
      <param name="valueComparer">Функция сравнения значений, которую нужно использовать.</param>
      <returns>Экземпляр неизменяемого словаря, который использует указанные функцию сравнения.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary>Содержит набор методов инициализации для экземпляров класса <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" />.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary>Создает пустой неизменяемый отсортированный набор.</summary>
      <typeparam name="T">Тип элементов, которые хранятся в неизменяемом наборе.</typeparam>
      <returns>Пустой неизменяемый отсортированный набор.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary>Создает новый неизменяемый отсортированный набор, который содержит указанный элемент.</summary>
      <param name="item">Элемент, которым нужно заполнить набор.</param>
      <typeparam name="T">Тип элементов неизменяемого набора.</typeparam>
      <returns>Новый неизменяемый набор, который содержит указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary>Создает новый неизменяемый отсортированный набор, который содержит указанный массив элементов.</summary>
      <param name="items">Массив элементов, которыми нужно заполнить набор.</param>
      <typeparam name="T">Тип элементов неизменяемого набора.</typeparam>
      <returns>Новый неизменяемый набор, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary>Создает пустой неизменяемый отсортированный набор, который использует указанную функцию сравнения.</summary>
      <param name="comparer">Реализация, которую нужно использовать при сравнении элементов набора.</param>
      <typeparam name="T">Тип элементов неизменяемого набора.</typeparam>
      <returns>Пустой неизменяемый набор.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary>Создает новый неизменяемый отсортированный набор, который содержит указанный элемент и использует указанную функцию сравнения.</summary>
      <param name="comparer">Реализация, которую нужно использовать при сравнении элементов набора.</param>
      <param name="item">Элемент, которым нужно заполнить набор.</param>
      <typeparam name="T">Тип элементов, которые хранятся в неизменяемом наборе.</typeparam>
      <returns>Новый неизменяемый набор, который содержит указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary>Создает новый неизменяемый отсортированный набор, который содержит указанный массив элементов и использует указанную функцию сравнения.</summary>
      <param name="comparer">Реализация, которую нужно использовать при сравнении элементов набора.</param>
      <param name="items">Массив элементов, которыми нужно заполнить набор.</param>
      <typeparam name="T">Тип элементов неизменяемого набора.</typeparam>
      <returns>Новый неизменяемый набор, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary>Возвращает коллекцию, которую можно использовать для создания неизменяемого отсортированного набора.</summary>
      <typeparam name="T">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns>Построитель неизменяемых коллекций.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary>Возвращает коллекцию, которую можно использовать для создания неизменяемого отсортированного набора.</summary>
      <param name="comparer">Функция сравнения, используемая для проверки элементов набора на предмет равенства.</param>
      <typeparam name="T">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns>Неизменяемая коллекция.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Создает новую неизменяемую коллекцию, которая содержит указанные элементы.</summary>
      <param name="comparer">Функция, которую нужно использовать для сравнения элементов набора.</param>
      <param name="items">Элементы, которые нужно добавить в набор, прежде чем он станет неизменяемым.</param>
      <typeparam name="T">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns>Новый неизменяемый набор, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Создает новую неизменяемую коллекцию, которая содержит указанные элементы.</summary>
      <param name="items">Элементы, которые нужно добавить в набор, прежде чем он станет неизменяемым.</param>
      <typeparam name="T">Тип элементов, которые хранятся в коллекции.</typeparam>
      <returns>Новый неизменяемый набор, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Выполняет перечисление последовательности и создает неизменяемый отсортированный набор на основе ее содержимого.</summary>
      <param name="source">Перебираемая последовательность.</param>
      <typeparam name="TSource">Тип элементов последовательности.</typeparam>
      <returns>Неизменяемый отсортированный набор, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>Выполняет перечисление последовательности, создает неизменяемый отсортированный набор на основе ее содержимого и использует указанную функцию сравнения.</summary>
      <param name="source">Перебираемая последовательность.</param>
      <param name="comparer">Функция сравнения, которую нужно использовать для инициализации и добавления элементов в отсортированный набор.</param>
      <typeparam name="TSource">Тип элементов последовательности.</typeparam>
      <returns>Неизменяемый отсортированный набор, который содержит элементы из указанной последовательности.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary>Создает неизменяемый отсортированный набор из текущего содержимого набора построителя.</summary>
      <param name="builder">Построитель для создания неизменяемого отсортированного набора.</param>
      <typeparam name="TSource">Тип элементов в неизменяемом отсортированном наборе.</typeparam>
      <returns>Неизменяемый отсортированный набор, содержащий текущее содержимое набора построителя.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary>Представляет реализацию неизменяемого отсортированного набора.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T">Тип элементов в наборе.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary>Добавляет в неизменяемый отсортированный набор указанное значение.</summary>
      <param name="value">Значение для сложения.</param>
      <returns>Новый набор, в который добавлен указанный элемент, или исходный набор, если элемент уже присутствует в нем.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary>Представляет отсортированный набор, для изменения которого не требуется выделение памяти (или выделяется небольшой объем) и с помощью которого можно эффективно выполнять операции с неизменяемыми отсортированными наборами или создавать их.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary>Добавляет элемент в текущий набор и возвращает значение, указывающее, был ли элемент успешно добавлен.</summary>
      <param name="item">Элемент, добавляемый в набор.</param>
      <returns>Значение <see langword="true" />, если элемент добавлен в набор; значение <see langword="false" />, если элемент уже был в наборе.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary>Удаляет из набора все элементы.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary>Определяет, содержится ли в наборе указанный объект.</summary>
      <param name="item">Объект, который нужно найти в наборе.</param>
      <returns>Значение <see langword="true" />, если элемент <paramref name="item" /> найден в наборе; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary>Возвращает количество элементов в неизменяемом отсортированном наборе.</summary>
      <returns>Количество элементов в наборе.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет из текущего набора указанный набор элементов.</summary>
      <param name="other">Коллекция элементов, удаляемых из набора.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов набора.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов набора.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий набор, чтобы он содержал только элементы, которые также имеются в заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий набор должным (строгим) подмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является строгим подмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий набор должным (строгим) подмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является строгим надмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий набор подмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является подмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий набор надмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является надмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary>Возвращает элемент из набора по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс элемента в наборе, который необходимо вернуть.</param>
      <returns>Элемент в заданной позиции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary>Возвращает доступную только для чтения ссылку на элемент набора в заданной <paramref name="index" />.</summary>
      <param name="index">Отсчитываемый от нуля индекс элемента в наборе, который необходимо вернуть.</param>
      <returns>Доступная только для чтения ссылка на элемент в заданной позиции.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary>Возвращает или устанавливает объект, используемый для определения равенства значений в неизменяемом отсортированном наборе.</summary>
      <returns>Функция сравнения, используемая для проверки значений в наборе на предмет равенства.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary>Возвращает максимальное значение в неизменяемом отсортированном наборе, получаемое с помощью функции сравнения.</summary>
      <returns>Максимальное значение в наборе.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary>Возвращает минимальное значение в неизменяемом отсортированном наборе, получаемое с помощью функции сравнения.</summary>
      <returns>Минимальное значение в наборе.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, пересекаются ли текущий набор и указанная коллекция.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если в текущем наборе и объекте <paramref name="other" /> есть хотя бы один общий элемент; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary>Удаляет из набора первое вхождение указанного объекта.</summary>
      <param name="item">Объект, который нужно удалить из набора.</param>
      <returns>Значение <see langword="true" />, если элемент <paramref name="item" /> был удален из набора; значение <see langword="false" />, если элемент <paramref name="item" /> не найден в наборе.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов неизменяемого отсортированного набора в обратном порядке.</summary>
      <returns>Перечислитель, который выполняет перечисление элементов набора в обратном порядке.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, содержат ли текущий набор и указанная коллекция одни и те же элементы.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор совпадает с коллекцией <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий набор таким образом, чтобы он содержал только элементы, которые есть либо в нем, либо в указанной коллекции, но не одновременно там и там.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Добавляет элемент в текущий набор и возвращает значение, указывающее, был ли элемент успешно добавлен.</summary>
      <param name="item">Элемент, добавляемый в набор.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Копирует элементы коллекции в массив начиная с определенного индекса в массиве.</summary>
      <param name="array">Одномерный массив, куда копируются элементы из коллекции. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Получает значение, указывающее, доступен ли данный экземпляр только для чтения.</summary>
      <returns>Всегда <c>имеет значение false</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы из набора в массив начиная с определенного индекса массива.</summary>
      <param name="array">Одномерный массив, в который копируются элементы из набора. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Получает значение, определяющее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>
        <see langword="true" />, если доступ к <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary>Создает неизменяемый отсортированный набор на основе содержимого исходного экземпляра.</summary>
      <returns>Неизменяемый набор.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий набор таким образом, чтобы он содержал все элементы, которые есть и в нем, и в указанной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим состоянием.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary>Удаляет все элементы из неизменяемого отсортированного набора.</summary>
      <returns>Пустой набор, из которого удалены элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary>Определяет, содержит ли неизменяемый отсортированный набор указанное значение.</summary>
      <param name="value">Проверяемое значение.</param>
      <returns>Значение <see langword="true" />, если набор содержит указанное значение, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary>Возвращает количество элементов в неизменяемом отсортированном наборе.</summary>
      <returns>Количество элементов в неизменяемом отсортированном наборе.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary>Возвращает пустой неизменяемый отсортированный набор.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary>Выполняет перечисление содержимого двоичного дерева.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <returns>Элемент, расположенный в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary>Освобождает ресурсы, используемые текущим экземпляром класса <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" />.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу неизменяемого отсортированного набора.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <returns>Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца отсортированного набора.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary>Устанавливает перечислитель в его начальное положение, т. е. перед первым элементом неизменяемого отсортированного набора.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Текущий элемент.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет из неизменяемого отсортированного набора указанный набор элементов.</summary>
      <param name="other">Элементы, которые нужно удалить из набора.</param>
      <returns>Новый набор, из которого удалены указанные элементы, или исходный набор, если таких элементов в нем не было.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов неизменяемого отсортированного набора.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов набора.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary>Возвращает позицию указанного значения в неизменяемом отсортированном наборе.</summary>
      <param name="item">Значение, позицию которого нужно определить.</param>
      <returns>Индекс указанного <paramref name="item" /> в отсортированном наборе, если этот <paramref name="item" /> найден. Если элемент <paramref name="item" /> не найден и его значение меньше одного или нескольких элементов набора, метод возвращает отрицательное число, которое является побитовым дополнением индекса первого элемента, превышающего по значению указанный элемент. Если элемент <paramref name="item" /> не найден и его значение больше любого из элементов набора, метод возвращает отрицательное число, которое является побитовым дополнением индекса последнего элемента плюс 1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Создает неизменяемый отсортированный набор, который содержит элементы, существующие как в исходном, так и в указанном наборах.</summary>
      <param name="other">Набор для пересечения с исходным набором.</param>
      <returns>Новый неизменяемый отсортированный набор, который содержит все элементы, существующие в обоих наборах.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary>Возвращает значение, указывающее, является ли пустым этот неизменяемый отсортированный набор.</summary>
      <returns>Значение <see langword="true" />, если набор пуст; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий неизменяемый отсортированный набор должным (строгим) подмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является строгим подмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий неизменяемый отсортированный набор должным надмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является строгим надмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий неизменяемый отсортированный набор подмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является подмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, является ли текущий неизменяемый отсортированный набор надмножеством заданной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если текущий набор является надмножеством объекта <paramref name="other" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary>Возвращает элемент с указанным индексом из неизменяемого отсортированного набора.</summary>
      <param name="index">Индекс элемента, который нужно извлечь из отсортированного набора.</param>
      <returns>Элемент с указанным индексом.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary>Возвращает доступную только для чтения ссылку на элемент набора в заданной <paramref name="index" />.</summary>
      <param name="index">Отсчитываемый от нуля индекс элемента в наборе, который необходимо вернуть.</param>
      <returns>Доступная только для чтения ссылка на элемент в заданной позиции.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary>Возвращает функцию сравнения, которая используется для сортировки ключей в неизменяемом отсортированном наборе.</summary>
      <returns>Функция сравнения, которая используется для сортировки ключей.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary>Возвращает максимальное значение в неизменяемом отсортированном наборе, получаемое с помощью функции сравнения.</summary>
      <returns>Максимальное значение в наборе.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary>Возвращает минимальное значение в неизменяемом отсортированном наборе, получаемое с помощью функции сравнения.</summary>
      <returns>Минимальное значение в наборе.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, есть ли общие элементы в текущем неизменяемом отсортированном наборе и в указанной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если в текущем наборе и объекте <paramref name="other" /> есть хотя бы один общий элемент; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary>Удаляет из неизменяемого отсортированного набора указанное значение.</summary>
      <param name="value">Подлежащий удалению элемент.</param>
      <returns>Новый неизменяемый отсортированный набор, из которого удален указанный элемент, или исходный набор, если элемент в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary>Возвращает объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который выполняет перечисление элементов неизменяемого отсортированного набора в обратном порядке.</summary>
      <returns>Перечислитель, который выполняет перечисление элементов неизменяемого отсортированного набора в обратном порядке.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет, содержат ли текущий неизменяемый отсортированный набор и указанная коллекция одни и те же элементы.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Значение <see langword="true" />, если наборы равны, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Создает неизменяемый отсортированный набор, который содержит элементы, существующие либо в исходном наборе, либо в указанной последовательности, но не там и там одновременно.</summary>
      <param name="other">Другая последовательность элементов.</param>
      <returns>Новый неизменяемый отсортированный словарь.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Добавляет в коллекцию указанное значение.</summary>
      <param name="item">Значение для сложения.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Удаляет из коллекции все элементы.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Копирует элементы коллекции в массив начиная с определенного индекса в массиве.</summary>
      <param name="array">Одномерный массив, куда копируются элементы из коллекции. Индекс в массиве должен начинаться с нуля.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>См. интерфейс <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Удаляет первое вхождение конкретного объекта из коллекции.</summary>
      <param name="item">Объект, который должен быть удален из коллекции.</param>
      <returns>Значение <see langword="true" />, если элемент <paramref name="item" /> был успешно удален из коллекции; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns>Перечислитель, который можно использовать для итерации по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Вставляет элемент в набор по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="item" />.</param>
      <param name="item">Объект, который нужно вставить в набор.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>См. интерфейс <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="index" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Удаляет элемент с указанным индексом.</summary>
      <param name="index">Отсчитываемый от нуля индекс удаляемого элемента.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>Добавляет элемент в текущий набор и возвращает значение, указывающее, что элемент был добавлен успешно.</summary>
      <param name="item">Элемент, добавляемый в набор.</param>
      <returns>Значение <see langword="true" />, если элемент добавлен в набор; значение <see langword="false" />, если элемент уже был в наборе.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет все элементы указанной коллекции из текущего набора.</summary>
      <param name="other">Коллекция элементов, удаляемых из набора.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий набор таким образом, чтобы он содержал только элементы, которые также есть в указанной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий набор таким образом, чтобы он содержал только элементы, которые есть либо в нем, либо в указанной коллекции, но не одновременно там и там.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Изменяет текущий набор таким образом, чтобы он содержал все элементы, которые есть либо в нем, либо в указанной коллекции.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы из набора в массив начиная с определенного индекса массива.</summary>
      <param name="array">Одномерный массив, в который копируются элементы из набора. Индекс в массиве должен начинаться с нуля.</param>
      <param name="index">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>См. интерфейс <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>См. раздел <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Объект перечислителя, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary>Добавляет элемент в набор.</summary>
      <param name="value">Объект, который нужно добавить в набор.</param>
      <returns>Позиция, в которую вставлен новый элемент, или значение -1, если элемент не вставлен в коллекцию.</returns>
      <exception cref="T:System.NotSupportedException">Набор доступен только для чтения или имеет фиксированный размер.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary>Удаляет все элементы из набора.</summary>
      <exception cref="T:System.NotSupportedException">Создается во всех случаях.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary>Определяет, содержит ли набор указанное значение.</summary>
      <param name="value">Объект, который нужно найти в наборе.</param>
      <returns>Значение <see langword="true" />, если объект найден в наборе; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Определяет индекс указанного элемента в наборе.</summary>
      <param name="value">Объект, который нужно найти в наборе.</param>
      <returns>Индекс <paramref name="value" />, если он найден в списке; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Вставляет элемент в набор по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить элемент <paramref name="value" />.</param>
      <param name="value">Объект, который нужно вставить в набор.</param>
      <exception cref="T:System.NotSupportedException">Набор доступен только для чтения или имеет фиксированный размер.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary>Возвращает значение, показывающее, имеет ли объект <see cref="T:System.Collections.IList" /> фиксированный размер.</summary>
      <returns>Значение <see langword="true" />, если словарь <see cref="T:System.Collections.IList" /> имеет фиксированный размер; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary>Возвращает значение, которое определяет, является ли коллекция <see cref="T:System.Collections.Generic.ICollection`1" /> доступной только для чтения.</summary>
      <returns>Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary>Возвращает или задает объект <see cref="T:System.Object" /> с заданным индексом.</summary>
      <param name="index">Индекс.</param>
      <returns>
        <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary>Удаляет из набора первый экземпляр указанного объекта.</summary>
      <param name="value">Объект, который нужно удалить из набора.</param>
      <exception cref="T:System.NotSupportedException">Набор доступен только для чтения или имеет фиксированный размер.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Удаляет из набора элемент по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс удаляемого элемента.</param>
      <exception cref="T:System.NotSupportedException">Набор доступен только для чтения или имеет фиксированный размер.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>Добавляет в неизменяемый набор указанный элемент.</summary>
      <param name="value">Добавляемый элемент.</param>
      <returns>Новый набор, в который добавлен указанный элемент, или исходный набор, если элемент уже присутствует в нем.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>Возвращает пустой неизменяемый набор с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</summary>
      <returns>Пустой набор с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет из текущего неизменяемого набора все элементы указанной коллекции.</summary>
      <param name="other">Элементы, которые нужно удалить из набора.</param>
      <returns>Новый набор, из которого удалены указанные элементы, или исходный набор, если таких элементов в нем не было.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Создает неизменяемый набор, который содержит элементы, существующие как в исходном, так и в указанном наборах.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Новый неизменяемый набор, который содержит все элементы, существующие в обоих наборах.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>Удаляет указанный элемент из неизменяемого набора.</summary>
      <param name="value">Подлежащий удалению элемент.</param>
      <returns>Новый набор, из которого удален указанный элемент, или текущий набор, если элемент в нем не найден.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Создает неизменяемый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</summary>
      <param name="other">Коллекция для сравнения с текущим набором.</param>
      <returns>Новый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции, но не одновременно там и там.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Создает новый неизменяемый набор, содержащий только элементы, которые есть либо в текущем наборе, либо в указанной коллекции.</summary>
      <param name="other">Коллекция, из которой нужно добавить элементы.</param>
      <returns>Новый неизменяемый набор, в который добавлены элементы, или исходный набор, если все элементы уже есть в нем.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary>Создает коллекцию, которая содержит те же объекты, что и неизменяемый отсортированный словарь, и с которой можно эффективно выполнять операции с использованием стандартных изменяемых интерфейсов.</summary>
      <returns>Построитель отсортированного набора.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary>Выполняет поиск указанного значения в наборе и возвращает равное ему значение, если его удалось найти.</summary>
      <param name="equalValue">Значение, которое нужно найти.</param>
      <param name="actualValue">Значение, найденное в наборе, либо исходное значение, если поиск не вернул результатов.</param>
      <returns>Значение, указывающее, успешно ли был выполнен поиск.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Добавляет в неизменяемый отсортированный набор указанный набор элементов.</summary>
      <param name="other">Добавляемые элементы.</param>
      <returns>Новый набор, в который добавлены элементы, или исходный набор, если все элементы уже есть в нем.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary>Возвращает неизменяемый отсортированный набор с указанной функцией сравнения ключей.</summary>
      <param name="comparer">Функция сравнения ключей, которую нужно проверить.</param>
      <returns>Неизменяемый отсортированный набор с указанной функцией сравнения ключей.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary>Содержит набор методов инициализации для экземпляров класса <see cref="T:System.Collections.Immutable.ImmutableStack`1" />.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary>Создает пустой неизменяемый стек.</summary>
      <typeparam name="T">Тип элементов, которые хранятся в неизменяемом стеке.</typeparam>
      <returns>Пустой неизменяемый стек.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary>Создает новый неизменяемый стек, который содержит указанный элемент.</summary>
      <param name="item">Элемент, которым нужно заполнить стек.</param>
      <typeparam name="T">Тип элементов неизменяемого стека.</typeparam>
      <returns>Новая неизменяемая коллекция, которая содержит указанный элемент.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary>Создает новый неизменяемый стек, который содержит указанный массив элементов.</summary>
      <param name="items">Массив элементов, которыми нужно заполнить стек.</param>
      <typeparam name="T">Тип элементов неизменяемого стека.</typeparam>
      <returns>Новый неизменяемый стек, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Создает новый неизменяемый стек, который содержит указанные элементы.</summary>
      <param name="items">Элементы, которые нужно добавить в стек, прежде чем он станет неизменяемым.</param>
      <typeparam name="T">Тип элементов стека.</typeparam>
      <returns>Неизменяемый стек, который содержит указанные элементы.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary>Удаляет из неизменяемого стека указанный элемент.</summary>
      <param name="stack">Стек, в который вносятся изменения.</param>
      <param name="value">Элемент, который нужно удалить из стека.</param>
      <typeparam name="T">Тип элементов стека.</typeparam>
      <returns>Стек; никогда не принимает значения <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">Стек является пустым.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary>Представляет неизменяемый стек.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T">Тип элемента в стеке.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary>Удаляет все объекты из неизменяемого стека.</summary>
      <returns>Пустой неизменяемый стек.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary>Возвращает пустой неизменяемый стек.</summary>
      <returns>Пустой неизменяемый стек.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary>Выполняет перечисление содержимого неизменяемого стека без выделения дополнительной памяти.  
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary>Возвращает элемент, расположенный в текущей позиции перечислителя.</summary>
      <returns>Элемент, расположенный в текущей позиции перечислителя.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу неизменяемого стека.</summary>
      <returns>Значение <see langword="true" />, если перечислитель был успешно перемещен к следующему элементу; значение <see langword="false" />, если перечислитель достиг конца стека.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет перечисление элементов неизменяемого стека.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов стека.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary>Возвращает значение, указывающее, является ли пустым этот экземпляр неизменяемого стека.</summary>
      <returns>Значение <see langword="true" />, если этот экземпляр пуст; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary>Возвращает верхний объект стека, не удаляя его.</summary>
      <returns>Верхний объект стека.</returns>
      <exception cref="T:System.InvalidOperationException">Стек является пустым.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary>Возвращает доступную только для чтения ссылку на элемент в начале стека.</summary>
      <returns>Доступная только для чтения ссылка на элемент в начале стека.</returns>
      <exception cref="T:System.InvalidOperationException">Вызывается, если стек пуст.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary>Удаляет верхний элемент из неизменяемого стека и возвращает стек после удаления.</summary>
      <returns>Стек; никогда не принимает значения <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">Стек является пустым.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary>Удаляет указанный элемент из неизменяемого стека и возвращает стек после удаления.</summary>
      <param name="value">Значение, которое необходимо удалить из стека.</param>
      <returns>Стек; никогда не принимает значения <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary>Добавляет верхний объект в неизменяемый стек и возвращает новый стек.</summary>
      <param name="value">Объект, который нужно поместить в стек.</param>
      <returns>Новый стек.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns>Перечислитель, который можно использовать для перечисления элементов коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который осуществляет итерацию по коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который используется для прохода по коллекции.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary>Удаляет все элементы из неизменяемого стека.</summary>
      <returns>Пустой неизменяемый стек.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary>Удаляет верхний элемент из неизменяемого стека и возвращает новый стек.</summary>
      <returns>Новый стек; никогда не принимает значения <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary>Добавляет верхний элемент в неизменяемый стек и возвращает новый стек.</summary>
      <param name="value">Элемент, который нужно поместить в стек.</param>
      <returns>Новый стек.</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary>Переопределения методов расширения LINQ, которые более эффективны при работе с объектами <see cref="T:System.Collections.Immutable.ImmutableArray`1" />, чем стандартные методы LINQ. 
 Пакет NuGet: System.Collections.Immutable (сведения о неизменяемых коллекциях и способах их установки)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary>Агрегатным образом применяет к последовательности элементов функцию.</summary>
      <param name="immutableArray">Коллекция, к которой нужно применить функцию.</param>
      <param name="func">Функция, вызываемая агрегатным образом для каждого элемента.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Окончательное значение после применения агрегатной функции ко всем элементам.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary>Агрегатным образом применяет к последовательности элементов функцию.</summary>
      <param name="immutableArray">Коллекция, к которой нужно применить функцию.</param>
      <param name="seed">Начальное агрегатное значение.</param>
      <param name="func">Функция, вызываемая агрегатным образом для каждого элемента.</param>
      <typeparam name="TAccumulate">Тип агрегатного значения.</typeparam>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Конечное агрегатное значение.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary>Агрегатным образом применяет к последовательности элементов функцию.</summary>
      <param name="immutableArray">Коллекция, к которой нужно применить функцию.</param>
      <param name="seed">Начальное агрегатное значение.</param>
      <param name="func">Функция, вызываемая агрегатным образом для каждого элемента.</param>
      <param name="resultSelector" />
      <typeparam name="TAccumulate">Тип агрегатного значения.</typeparam>
      <typeparam name="TResult">Тип результата, возвращенного селектором результатов.</typeparam>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Конечное агрегатное значение.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает значение, указывающее, отвечают ли все элементы массива заданному условию.</summary>
      <param name="immutableArray">Проверяемый массив.</param>
      <param name="predicate">Предикат.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Значение <see langword="true" />, если каждый элемент исходной последовательности прошел проверку, заданную указанным предикатом; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Возвращает значение, указывающее, содержит ли массив какие-либо элементы.</summary>
      <param name="immutableArray">Массив, проверяемый на наличие элементов.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Значение <see langword="true" />, если в массиве содержатся элементы; в противном случае — значение <see langword="false" /> .</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает значение, указывающее, содержит ли массив какие-либо элементы, отвечающие заданному условию.</summary>
      <param name="immutableArray">Массив, проверяемый на наличие элементов.</param>
      <param name="predicate">Делегат, определяющий условия проверки элементов.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Значение <see langword="true" />, если элемент соответствует указанному условию; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Возвращает значение, указывающее, содержит ли коллекция какие-либо элементы.</summary>
      <param name="builder">Проверяемый построитель.</param>
      <typeparam name="T">Тип элементов в массиве.</typeparam>
      <returns>Значение <see langword="true" />, если в построителе массивов содержатся элементы; в противном случае — значение <see langword="false" /> .</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>Возвращает элемент массива по указанному индексу.</summary>
      <param name="immutableArray">Массив, в котором нужно найти элемент.</param>
      <param name="index">Индекс извлекаемого элемента.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Элемент по заданному индексу.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>Возвращает элемент последовательности по указанному индексу или значение по умолчанию, если индекс вне допустимого диапазона.</summary>
      <param name="immutableArray">Массив, в котором нужно найти элемент.</param>
      <param name="index">Индекс извлекаемого элемента.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Элемент по указанному индексу либо значение по умолчанию, если индекс не найден.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Возвращает первый элемент массива.</summary>
      <param name="immutableArray">Массив, из которого извлекается элемент.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Первый элемент массива.</returns>
      <exception cref="T:System.InvalidOperationException">Если массив пуст.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает первый элемент последовательности, удовлетворяющий указанному условию.</summary>
      <param name="immutableArray">Массив, из которого извлекается элемент.</param>
      <param name="predicate">Делегат, определяющий условия поиска элемента.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Первый элемент списка, если он соответствует условию <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException">Если массив пуст.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Возвращает первый элемент коллекции.</summary>
      <param name="builder">Построитель, из которого извлекается элемент.</param>
      <typeparam name="T">Тип элементов массива.</typeparam>
      <returns>Первый элемент списка.</returns>
      <exception cref="T:System.InvalidOperationException">Если массив пуст.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Возвращает первый элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <param name="immutableArray">Массив, из которого извлекаются элементы.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Первый элемент списка, если он найден; в противном случае — значение по умолчанию для данного типа элементов.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает первый элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.</summary>
      <param name="immutableArray">Массив, из которого извлекаются элементы.</param>
      <param name="predicate">Делегат, определяющий условия поиска элемента.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Первый элемент списка, если он найден; в противном случае — значение по умолчанию для данного типа элементов.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Возвращает первый элемент коллекции либо значение по умолчанию, если коллекция пуста.</summary>
      <param name="builder">Построитель, из которого извлекается элемент.</param>
      <typeparam name="T">Тип элементов построителя.</typeparam>
      <returns>Первый элемент списка, если он найден; в противном случае — значение по умолчанию для данного типа элементов.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Возвращает последний элемент массива.</summary>
      <param name="immutableArray">Массив, из которого извлекаются элементы.</param>
      <typeparam name="T">Тип элементов массива.</typeparam>
      <returns>Последний элемент массива.</returns>
      <exception cref="T:System.InvalidOperationException">Возникает, если коллекция пуста.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает последний элемент последовательности, удовлетворяющий указанному условию.</summary>
      <param name="immutableArray">Массив, из которого извлекаются элементы.</param>
      <param name="predicate">Делегат, определяющий условия для извлекаемого элемента.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Последний элемент массива, удовлетворяющий <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException">Возникает, если коллекция пуста.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Возвращает последний элемент коллекции.</summary>
      <param name="builder">Построитель, из которого извлекаются элементы.</param>
      <typeparam name="T">Тип элементов построителя.</typeparam>
      <returns>Последний элемент построителя.</returns>
      <exception cref="T:System.InvalidOperationException">Возникает, если коллекция пуста.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Возвращает последний элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <param name="immutableArray">Массив, из которого извлекаются элементы.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Последний элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает последний элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если ни одного такого элемента не найдено.</summary>
      <param name="immutableArray">Массив, из которого извлекается элемент.</param>
      <param name="predicate">Делегат, определяющий условия поиска элемента.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Последний элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Возвращает последний элемент коллекции либо значение по умолчанию, если коллекция пуста.</summary>
      <param name="builder">Построитель, из которого извлекается элемент.</param>
      <typeparam name="T">Тип элементов построителя.</typeparam>
      <returns>Последний элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>Проецирует каждый элемент последовательности в новую форму.</summary>
      <param name="immutableArray">Неизменяемый массив, из которого нужно выбрать элементы.</param>
      <param name="selector">Функция преобразования, применяемая к каждому элементу.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <typeparam name="TResult">Тип результирующего элемента.</typeparam>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразователя для каждого элемента исходного объекта.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Проецирует каждый элемент последовательности в объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, объединяет результирующие последовательности в одну и вызывает функцию селектора результата для каждого элемента этой последовательности.</summary>
      <param name="immutableArray">Неизменяемый массив.</param>
      <param name="collectionSelector">Функция преобразования, применяемая к каждому элементу входной последовательности.</param>
      <param name="resultSelector">Функция преобразования, применяемая к каждому элементу промежуточной последовательности.</param>
      <typeparam name="TSource">Тип элементов <paramref name="immutableArray" />.</typeparam>
      <typeparam name="TCollection">Тип промежуточных элементов, собранных функцией <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Тип элементов результирующей последовательности.</typeparam>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, элементы которого получены в результате вызова функции преобразования "один ко многим" <paramref name="collectionSelector" /> для каждого элемента последовательности <paramref name="immutableArray" /> и последующего сопоставления каждого элемента такой промежуточной последовательности и соответствующего ему исходного элемента с результирующим элементом.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Определяет, совпадают ли две последовательности, используя функцию сравнения на равенство.</summary>
      <param name="immutableArray">Массив, используемый для сравнения.</param>
      <param name="items">Элементы, используемые для сравнения.</param>
      <param name="comparer">Функция сравнения, которую нужно использовать для проверки на равенство.</param>
      <typeparam name="TDerived">Тип элементов сравниваемого массива.</typeparam>
      <typeparam name="TBase">Тип элементов коллекции.</typeparam>
      <returns>Значение <see langword="true" />, если последовательности равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Определяет, совпадают ли две последовательности, используя функцию сравнения на равенство.</summary>
      <param name="immutableArray">Массив, используемый для сравнения.</param>
      <param name="items">Элементы, используемые для сравнения.</param>
      <param name="comparer">Функция сравнения, которую нужно использовать для проверки на равенство.</param>
      <typeparam name="TDerived">Тип элементов сравниваемого массива.</typeparam>
      <typeparam name="TBase">Тип элементов коллекции.</typeparam>
      <returns>Значение <see langword="true" />, если последовательности равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary>Определяет, совпадают ли две последовательности, используя функцию сравнения на равенство.</summary>
      <param name="immutableArray">Массив, используемый для сравнения.</param>
      <param name="items">Элементы, используемые для сравнения.</param>
      <param name="predicate">Функция сравнения, которую нужно использовать для проверки на равенство.</param>
      <typeparam name="TDerived">Тип элементов сравниваемого массива.</typeparam>
      <typeparam name="TBase">Тип элементов коллекции.</typeparam>
      <returns>Значение <see langword="true" />, если последовательности равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Возвращает единственный элемент последовательности и вызывает исключение, если число элементов последовательности отлично от одного.</summary>
      <param name="immutableArray">Массив, из которого извлекается элемент.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Элемент последовательности.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает единственный элемент последовательности, удовлетворяющий указанному условию, и вызывает исключение, если таких элементов больше одного.</summary>
      <param name="immutableArray" />
      <param name="predicate" />
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Возвращает <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Возвращает единственный элемент массива или значение по умолчанию, если последовательность пуста; если в последовательности более одного элемента, вызывается исключение.</summary>
      <param name="immutableArray">Массив.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Элемент массива либо значение по умолчанию, если массив пуст.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> содержит больше одного элемента.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Возвращает единственный элемент последовательности, удовлетворяющий указанному условию, или значение по умолчанию, если такого элемента не существует; если условию удовлетворяет более одного элемента, вызывается исключение.</summary>
      <param name="immutableArray">Массив, из которого извлекается элемент.</param>
      <param name="predicate">Условие, которому должен удовлетворять элемент.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Элемент, если он удовлетворяет указанному условию; в противном случае — элемент по умолчанию.</returns>
      <exception cref="T:System.InvalidOperationException">Условию предиката <paramref name="predicate" /> удовлетворяет более одного элемента.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Копирует содержимое исходного массива в изменяемый массив.</summary>
      <param name="immutableArray" />
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Новый экземпляр массива.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary>Создает словарь на основе содержимого исходного массива.</summary>
      <param name="immutableArray">Массив, на основе которого создается словарь.</param>
      <param name="keySelector">Селектор ключей.</param>
      <typeparam name="TKey">Тип ключа.</typeparam>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Новый инициализированный словарь.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Создает словарь на основе содержимого исходного массива.</summary>
      <param name="immutableArray">Массив, на основе которого создается словарь.</param>
      <param name="keySelector">Селектор ключей.</param>
      <param name="comparer">Функция сравнения, с помощью инициализируется словарь.</param>
      <typeparam name="TKey">Тип ключа.</typeparam>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Новый инициализированный словарь.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary>Создает словарь на основе содержимого исходного массива.</summary>
      <param name="immutableArray">Массив, на основе которого создается словарь.</param>
      <param name="keySelector">Селектор ключей.</param>
      <param name="elementSelector">Селектор элементов.</param>
      <typeparam name="TKey">Тип ключа.</typeparam>
      <typeparam name="TElement">Тип элемента.</typeparam>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Новый инициализированный словарь.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Создает словарь на основе содержимого исходного массива.</summary>
      <param name="immutableArray">Массив, на основе которого создается словарь.</param>
      <param name="keySelector">Селектор ключей.</param>
      <param name="elementSelector">Селектор элементов.</param>
      <param name="comparer">Функция сравнения, с помощью инициализируется словарь.</param>
      <typeparam name="TKey">Тип ключа.</typeparam>
      <typeparam name="TElement">Тип элемента.</typeparam>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Новый инициализированный словарь.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Выполняет фильтрацию последовательности значений на основе заданного предиката.</summary>
      <param name="immutableArray">Массив, который нужно отфильтровать.</param>
      <param name="predicate">Условие, которое нужно использовать для фильтрации содержимого массива.</param>
      <typeparam name="T">Тип элементов коллекции.</typeparam>
      <returns>Возвращает объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, который содержит элементы, удовлетворяющие условию.</returns>
    </member>
  </members>
</doc>
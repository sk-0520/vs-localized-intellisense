<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.CodeDom</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary vsli:raw="Provides access to instances of the C# code generator and code compiler.">Stellt den Zugriff auf Instanzen des C#-Code-Generators und des C#-Codecompilers bereit.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.CSharp.CSharpCodeProvider&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:Microsoft.CSharp.CSharpCodeProvider" />-Klasse.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.CSharp.CSharpCodeProvider&quot; /&gt; class by using the specified provider options.">Initialisiert eine neue Instanz der <see cref="T:Microsoft.CSharp.CSharpCodeProvider" />-Klasse mit den angegebenen Anbieteroptionen.</summary>
      <param name="providerOptions" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; object that contains the provider options.">Ein <see cref="T:System.Collections.Generic.IDictionary`2" />-Objekt, das die Anbieteroptionen aus der Konfigurationsdatei enthält.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary vsli:raw="Gets an instance of the C# code compiler.">Ruft eine Instanz des C#-Codecompilers ab.</summary>
      <returns vsli:raw="An instance of the C# &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; implementation.">Eine Instanz der C#-Implementierung von <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary vsli:raw="Gets an instance of the C# code generator.">Ruft eine Instanz des C#-Code-Generators ab.</summary>
      <returns vsli:raw="An instance of the C# &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; implementation.">Eine Instanz der C#-Implementierung von <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />.</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary vsli:raw="Gets the file name extension to use when creating source code files.">Ruft die beim Erstellen von Quellcodedateien zu verwendende Dateinamenerweiterung ab.</summary>
      <returns vsli:raw="The file name extension to use for generated source code files.">Die für generierte Quellcodedateien zu verwendende Dateierweiterung.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">Generiert Code für den angegebenen Klassenmember unter Verwendung der angegebenen TextWriter- und Code-Generator-Optionen.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to generate code for.">Ein <see cref="T:System.CodeDom.CodeTypeMember" />, für den Code generiert werden soll.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">Der <see cref="T:System.IO.TextWriter" />, in den geschrieben werden soll.</param>
      <param name="options" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; to use when generating the code.">Der beim Generieren von Code zu verwendende <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />.</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type of object.">Ruft einen <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Objekttyp ab.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">Der Objekttyp, für den ein Typkonverter abgerufen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">Ein <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Typ.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary vsli:raw="Provides access to instances of the Visual Basic code generator and code compiler.">Stellt den Zugriff auf Instanzen des Visual Basic-Code-Generators und des Visual Basic-Codecompilers bereit.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.VisualBasic.VBCodeProvider&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.VBCodeProvider" />-Klasse.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.VisualBasic.VBCodeProvider&quot; /&gt; class by using the specified provider options.">Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.VBCodeProvider" />-Klasse mit den angegebenen Anbieteroptionen.</summary>
      <param name="providerOptions" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; object that contains the provider options.">Ein <see cref="T:System.Collections.Generic.IDictionary`2" />-Objekt, das die Anbieteroptionen aus der Konfigurationsdatei enthält.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary vsli:raw="Gets an instance of the Visual Basic code compiler.">Ruft eine Instanz des Visual Basic-Codecompilers ab.</summary>
      <returns vsli:raw="An instance of the Visual Basic &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; implementation.">Eine Instanz der Visual Basic-Implementierung von <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary vsli:raw="Gets an instance of the Visual Basic code generator.">Ruft eine Instanz des Visual Basic-Code-Generators ab.</summary>
      <returns vsli:raw="An instance of the Visual Basic &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; implementation.">Eine Instanz der Visual Basic-Implementierung von <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary vsli:raw="Gets the file name extension to use when creating source code files.">Ruft die beim Erstellen von Quellcodedateien zu verwendende Dateinamenerweiterung ab.</summary>
      <returns vsli:raw="The file name extension to use for generated source code files.">Die für generierte Quellcodedateien zu verwendende Dateierweiterung.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">Generiert Code für den angegebenen Klassenmember unter Verwendung der angegebenen TextWriter- und Code-Generator-Optionen.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to generate code for.">Ein <see cref="T:System.CodeDom.CodeTypeMember" />, für den Code generiert werden soll.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">Der <see cref="T:System.IO.TextWriter" />, in den geschrieben werden soll.</param>
      <param name="options" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; to use when generating the code.">Der beim Generieren von Code zu verwendende <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type of object.">Ruft einen <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Objekttyp ab.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">Der Objekttyp, für den ein Typkonverter abgerufen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">Ein <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Typ.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary vsli:raw="Gets a language features identifier.">Ruft einen Bezeichner für Sprachfeatures ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.LanguageOptions&quot; /&gt; that indicates special features of the language.">
        <see cref="T:System.CodeDom.Compiler.LanguageOptions" />, die bestimmte Features der Sprache angeben.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary vsli:raw="Represents a reference to the value of an argument passed to a method.">Stellt einen Verweis auf den Wert eines Arguments dar, das an eine Methode übergeben wurde.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; class using the specified parameter name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />-Klasse unter Verwendung des angegebenen Parameternamens.</summary>
      <param name="parameterName" vsli:raw="The name of the parameter to reference.">Der Name des Parameters, auf den verwiesen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary vsli:raw="Gets or sets the name of the parameter this expression references.">Ruft den Namen des Parameters ab, auf den dieser Ausdruck verweist, oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the parameter to reference.">Der Name des Parameters, auf den verwiesen werden soll.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary vsli:raw="Represents an expression that creates an array.">Stellt einen Ausdruck dar, der ein Array erstellt.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and code expression indicating the number of indexes for the array.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse unter Verwendung des angegebenen Arraydatentyps und des Codeausdrucks, der die Anzahl der Indizes für das Array angibt.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; indicating the data type of the array to create.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp des zu erstellenden Arrays angibt.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">Ein Ausdruck, der die Anzahl der Indizes des zu erstellenden Arrays angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and initialization expressions.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse unter Verwendung des angegebenen Arraydatentyps und der angegebenen Initialisierungsausdrücke.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the array to create.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp des zu erstellenden Arrays angibt.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">Ein Array von Ausdrücken, die zum Initialisieren des Arrays verwendet werden.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and number of indexes for the array.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse unter Verwendung des angegebenen Arraydatentyps und der Anzahl der Indizes für das Array.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; indicating the data type of the array to create.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp des zu erstellenden Arrays angibt.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">Die Anzahl der Indizes des zu erstellenden Arrays.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and code expression indicating the number of indexes for the array.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse unter Verwendung des angegebenen Namens des Arraydatentyps sowie des Codeausdrucks, der die Anzahl der Indizes für das Array angibt.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">Der Name des Datentyps für das zu erstellende Array.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">Ein Ausdruck, der die Anzahl der Indizes des zu erstellenden Arrays angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and initializers.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse unter Verwendung des angegebenen Namens des Datentyps für das Array sowie der Initialisierungen.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">Der Name des Datentyps für das zu erstellende Array.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">Ein Array von Ausdrücken, die zum Initialisieren des Arrays verwendet werden.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and number of indexes for the array.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse unter Verwendung des angegebenen Namens des Arraydatentyps und der Anzahl der Indizes für das Array.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">Der Name des Datentyps für das zu erstellende Array.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">Die Anzahl der Indizes des zu erstellenden Arrays.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and code expression indicating the number of indexes for the array.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse unter Verwendung des angegebenen Arraydatentyps und des Codeausdrucks, der die Anzahl der Indizes für das Array angibt.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">Der Datentyp des zu erstellenden Arrays.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">Ein Ausdruck, der die Anzahl der Indizes des zu erstellenden Arrays angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and initializers.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse, wobei der angegebene Arraydatentyp und die angegebenen Initialisierungen verwendet werden.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">Der Datentyp des zu erstellenden Arrays.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">Ein Array von Ausdrücken, die zum Initialisieren des Arrays verwendet werden.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and number of indexes for the array.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse unter Verwendung des angegebenen Arraydatentyps und der Anzahl der Indizes für das Array.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">Der Datentyp des zu erstellenden Arrays.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">Die Anzahl der Indizes des zu erstellenden Arrays.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary vsli:raw="Gets or sets the type of array to create.">Ruft den Typ des zu erstellenden Arrays ab oder legt ihn fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array.">Ein <see cref="T:System.CodeDom.CodeTypeReference" />, der den Typ des Arrays angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary vsli:raw="Gets the initializers with which to initialize the array.">Ruft die Initialisierungen ab, mit denen das Array initialisiert werden soll.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the initialization values.">Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />, die die Initialisierungswerte angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary vsli:raw="Gets or sets the number of indexes in the array.">Ruft die Anzahl der Indizes im Array ab oder legt diese fest.</summary>
      <returns vsli:raw="The number of indexes in the array.">Die Anzahl der Indizes im Array.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary vsli:raw="Gets or sets the expression that indicates the size of the array.">Ruft den Ausdruck ab, der die Größe des Arrays angibt, oder legt ihn fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the size of the array.">Eine <see cref="T:System.CodeDom.CodeExpression" />, der die Größe des Arrays angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary vsli:raw="Represents a reference to an index of an array.">Stellt einen Verweis auf den Index eines Arrays dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; class using the specified target object and indexes.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />-Klasse unter Verwendung des angegebenen Zielobjekts und der angegebenen Indizes.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the array the indexer targets.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Zielarray des Indexers angibt.</param>
      <param name="indices" vsli:raw="The index or indexes to reference.">Der Index bzw. die Indizes, auf den bzw. die verwiesen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary vsli:raw="Gets or sets the index or indexes of the indexer expression.">Ruft den Index oder die Indizes des Indexerausdrucks ab oder legt diese fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the index or indexes of the indexer expression.">Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />, die den Index oder die Indizes des Indexerausdrucks angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary vsli:raw="Gets or sets the target object of the array indexer.">Ruft das Zielobjekt des Arrayindexers ab oder legt dieses fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the array being indexed.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Array darstellt, das indiziert wird.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary vsli:raw="Represents a simple assignment statement.">Stellt eine einfache Zuweisungsanweisung dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAssignStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; class using the specified expressions.">Initialisiert unter Verwendung der angegebenen Ausdrücke eine neue Instanz der <see cref="T:System.CodeDom.CodeAssignStatement" />-Klasse.</summary>
      <param name="left" vsli:raw="The variable to assign to.">Die Variable, der ein Wert zugewiesen werden soll.</param>
      <param name="right" vsli:raw="The value to assign.">Der Wert, der zugewiesen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary vsli:raw="Gets or sets the expression representing the object or reference to assign to.">Ruft den Ausdruck ab, der das Objekt oder den Verweis darstellt, dem ein Wert zugewiesen werden soll, oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object or reference to assign to.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt oder den Verweis angibt, dem ein Wert zugewiesen wird.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary vsli:raw="Gets or sets the expression representing the object or reference to assign.">Ruft den Ausdruck ab, der das zuzuweisende Objekt oder den zuzuweisenden Verweis darstellt, oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object or reference to assign.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das zuzuweisende Objekt oder den zuzuweisenden Verweis angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary vsli:raw="Represents a statement that attaches an event-handler delegate to an event.">Stellt eine Anweisung dar, die einen Ereignishandlerdelegaten an ein Ereignis anfügt.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttachEventStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class using the specified event and delegate.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttachEventStatement" />-Klasse mit dem angegebenen Ereignis und Delegaten.</summary>
      <param name="eventRef" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to attach an event handler to.">Eine <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> zur Angabe des Ereignisses, an das ein Ereignishandler angefügt werden soll.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den neuen Ereignishandler angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class using the specified object containing the event, event name, and event-handler delegate.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttachEventStatement" />-Klasse unter Verwendung des angegebenen Objekts mit dem Ereignis, Ereignisnamen und Ereignishandlerdelegaten.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt angibt, in dem das Ereignis enthalten ist.</param>
      <param name="eventName" vsli:raw="The name of the event to attach an event handler to.">Der Name des Ereignisses, an das ein Ereignishandler angefügt werden soll.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den neuen Ereignishandler angibt.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary vsli:raw="Gets or sets the event to attach an event-handler delegate to.">Ruft das Ereignis ab, an das ein Ereignishandlerdelegat angefügt werden soll, oder legt dieses fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to attach an event handler to.">Eine <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> zur Angabe des Ereignisses, an das ein Ereignishandler angefügt werden soll.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary vsli:raw="Gets or sets the new event-handler delegate to attach to the event.">Ruft den neuen Ereignishandlerdelegaten ab, der an das Ereignis angefügt werden soll, oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler to attach.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den neuen anzufügenden Ereignishandler angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary vsli:raw="Represents an argument used in a metadata attribute declaration.">Stellt ein Argument dar, das in einer Deklaration eines Metadatenattributs verwendet wird.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeArgument" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class using the specified value.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeArgument" />-Klasse unter Verwendung des angegebenen Werts.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the value of the argument.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Wert des Arguments darstellt.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class using the specified name and value.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeArgument" />-Klasse unter Verwendung des angegebenen Namens und Werts.</summary>
      <param name="name" vsli:raw="The name of the attribute property the argument applies to.">Der Name der Attributeigenschaft, auf die das Argument angewendet wird.</param>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the value of the argument.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Wert des Arguments darstellt.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary vsli:raw="Gets or sets the name of the attribute.">Ruft den Namen des Attributs ab oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the attribute property the argument is for.">Der Name der Attributeigenschaft, für die das Argument bestimmt ist.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary vsli:raw="Gets or sets the value for the attribute argument.">Ruft den Wert für das Attributargument ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the value for the attribute argument.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Wert für das Attributargument angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekten enthält.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects with which to initialize the collection.">Ein Array von <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Eines oder mehrere Objekte im Array sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; with which to initialize the collection.">Eine <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />, mit der die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to the collection.">Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to add.">Das hinzuzufügende <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; array to the end of the collection.">Kopiert die Elemente des angegebenen <see cref="T:System.CodeDom.CodeAttributeArgument" />-Arrays an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the objects to add to the collection.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeAttributeArgument" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; object to the end of the collection.">Kopiert den Inhalt eines anderen <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />-Objekts an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; that contains the objects to add to the collection.">Eine <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object.">Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to locate in the collection.">Das <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Kopiert die Auflistungsobjekte in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Das Zielarray ist mehrdimensional.  

oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object in the collection, if it exists in the collection.">Ruft den Index des angegebenen <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekts in der Auflistung ab, sofern es in der Auflistung vorhanden ist.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to locate in the collection.">Das <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">Der Index des angegebenen Objekts in der Auflistung, sofern gefunden, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object into the collection at the specified index.">Fügt das angegebene <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Der nullbasierte Index, an dem das angegebene Objekt eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to insert.">Das einzufügende <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object at the specified index in the collection.">Ruft das <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; at each valid index.">Eine <see cref="T:System.CodeDom.CodeAttributeArgument" />-Klasse an jedem gültigen Index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object from the collection.">Entfernt das angegebene <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to remove from the collection.">Das <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary vsli:raw="Represents an attribute declaration.">Stellt eine Attributdeklaration dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified code type reference.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Klasse unter Verwendung des angegebenen Codetypverweises.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the attribute.">Der <see cref="T:System.CodeDom.CodeTypeReference" />, der das Attribut angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified code type reference and arguments.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Klasse unter Verwendung des angegebenen Codetypverweises und der angegebenen Argumente.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the attribute.">Der <see cref="T:System.CodeDom.CodeTypeReference" />, der das Attribut angibt.</param>
      <param name="arguments" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the arguments for the attribute.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeAttributeArgument" />, das die Argumente für das Attribut enthält.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Klasse unter Verwendung des angegebenen Namens.</summary>
      <param name="name" vsli:raw="The name of the attribute.">Der Name des Attributs.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified name and arguments.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Klasse unter Verwendung des angegebenen Namens und Arguments.</summary>
      <param name="name" vsli:raw="The name of the attribute.">Der Name des Attributs.</param>
      <param name="arguments" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the arguments for the attribute.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeAttributeArgument" />, das die Argumente für das Attribut enthält.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary vsli:raw="Gets the arguments for the attribute.">Ruft die Argumente für das Attribut ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; that contains the arguments for the attribute.">Eine <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />, die die Argumente für das Attribut enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary vsli:raw="Gets the code type reference for the code attribute declaration.">Ruft den Codetypverweis für die Deklaration des Codeattributs ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt;.">Ein <see cref="T:System.CodeDom.CodeTypeReference" />, der die <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary vsli:raw="Gets or sets the name of the attribute being declared.">Ruft den Namen des zu deklarierenden Attributs ab oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the attribute.">Der Name des Attributs.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekten enthält.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects with which to initialize the collection.">Ein Array von <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Eines oder mehrere Objekte im Array sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; with which to initialize the collection.">Eine <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, mit der die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object with the specified value to the collection.">Fügt der Auflistung ein <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt mit dem angegebenen Wert hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to add.">Das hinzuzufügende <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; array to the end of the collection.">Kopiert die Elemente des angegebenen <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Arrays an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; that contains the objects to add to the collection.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; object to the end of the collection.">Kopiert den Inhalt eines anderen <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />-Objekts an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that contains the objects to add to the collection.">Eine <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Gets or sets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object.">Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt enthält, oder legt diesen fest.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to locate.">Das zu suchende <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Kopiert die Auflistungsobjekte in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Das Zielarray ist mehrdimensional.  

oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object in the collection, if it exists in the collection.">Ruft den Index des angegebenen <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekts in der Auflistung ab, sofern es in der Auflistung vorhanden ist.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to locate in the collection.">Das <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">Der Index in der Auflistung des angegebenen Objekts, sofern gefunden, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object into the collection at the specified index.">Fügt das angegebene <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Der nullbasierte Index, an dem das angegebene Objekt eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to insert.">Das einzufügende <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object at the specified index.">Ruft das <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt am angegebenen Index ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; at each valid index.">Eine <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Klasse an jedem gültigen Index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object from the collection.">Entfernt das angegebene <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to remove from the collection.">Das <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary vsli:raw="Represents a reference to the base class.">Stellt einen Verweis auf die Basisklasse dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBaseReferenceExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary vsli:raw="Represents an expression that consists of a binary operation between two expressions.">Stellt einen Ausdruck dar, der aus einer binären Operation zwischen zwei Ausdrücken besteht.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; class using the specified parameters.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />-Klasse unter Verwendung der angegebenen Parameter.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; on the left of the operator.">Die <see cref="T:System.CodeDom.CodeExpression" />, die links vom Operator steht.</param>
      <param name="op" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorType&quot; /&gt; indicating the type of operator.">Ein <see cref="T:System.CodeDom.CodeBinaryOperatorType" />, der den Typ des Operators angibt.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; on the right of the operator.">Die <see cref="T:System.CodeDom.CodeExpression" />, die rechts vom Operator steht.</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary vsli:raw="Gets or sets the code expression on the left of the operator.">Ruft den Codeausdruck ab, der links vom Operator steht, oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the left operand.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den linken Operanden angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary vsli:raw="Gets or sets the operator in the binary operator expression.">Ruft den Operator im Ausdruck für binäre Operatoren ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorType&quot; /&gt; that indicates the type of operator in the expression.">Ein <see cref="T:System.CodeDom.CodeBinaryOperatorType" />, der den Typ des Operators im Ausdruck angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary vsli:raw="Gets or sets the code expression on the right of the operator.">Ruft den Codeausdruck ab, der rechts vom Operator steht, oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the right operand.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den rechten Operanden angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary vsli:raw="Defines identifiers for supported binary operators.">Definiert Bezeichner für unterstützte binäre Operatoren.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary vsli:raw="Addition operator.">Additionsoperator</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary vsli:raw="Assignment operator.">Zuweisungsoperator.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary vsli:raw="Bitwise and operator.">Bitweiser Operator AND</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary vsli:raw="Bitwise or operator.">Bitweiser Operator OR</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary vsli:raw="Boolean and operator. This represents a short circuiting operator. A short circuiting operator will evaluate only as many expressions as necessary before returning a correct value.">Boolescher Operator AND Dies stellt einen Kurzschlussoperator dar. Ein Kurzschlussoperator wertet nur die für die Rückgabe eines korrekten Werts erforderliche Anzahl von Ausdrücken aus.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary vsli:raw="Boolean or operator. This represents a short circuiting operator. A short circuiting operator will evaluate only as many expressions as necessary before returning a correct value.">Boolescher Operator OR Dies stellt einen Kurzschlussoperator dar. Ein Kurzschlussoperator wertet nur die für die Rückgabe eines korrekten Werts erforderliche Anzahl von Ausdrücken aus.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary vsli:raw="Division operator.">Divisionsoperator</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary vsli:raw="Greater than operator.">Operator 'Größer als'</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary vsli:raw="Greater than or equal operator.">Operator 'Größer oder gleich'</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary vsli:raw="Identity equal operator.">Operator 'Identität gleich'</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary vsli:raw="Identity not equal operator.">Operator 'Identität ungleich'</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary vsli:raw="Less than operator.">Operator 'Kleiner als'</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary vsli:raw="Less than or equal operator.">Operator 'Kleiner oder gleich'</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary vsli:raw="Modulus operator.">Operator Modulo</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary vsli:raw="Multiplication operator.">Multiplikationsoperator</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary vsli:raw="Subtraction operator.">Subtraktionsoperator</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary vsli:raw="Value equal operator.">Operator 'Wert gleich'</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary vsli:raw="Represents an expression cast to a data type or interface.">Stellt einen Ausdruck dar, der in einen Datentyp oder in eine Schnittstelle umgewandelt wird.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCastExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">Initialisiert unter Verwendung des angegebenen Zieltyps und Ausdrucks eine neue Instanz der <see cref="T:System.CodeDom.CodeCastExpression" />-Klasse.</summary>
      <param name="targetType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the destination type of the cast.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Zieltyp der Typumwandlung angibt.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">Die umzuwandelnde <see cref="T:System.CodeDom.CodeExpression" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">Initialisiert unter Verwendung des angegebenen Zieltyps und Ausdrucks eine neue Instanz der <see cref="T:System.CodeDom.CodeCastExpression" />-Klasse.</summary>
      <param name="targetType" vsli:raw="The name of the destination type of the cast.">Der Name des Zieltyps für die Typumwandlung.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">Die umzuwandelnde <see cref="T:System.CodeDom.CodeExpression" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">Initialisiert unter Verwendung des angegebenen Zieltyps und Ausdrucks eine neue Instanz der <see cref="T:System.CodeDom.CodeCastExpression" />-Klasse.</summary>
      <param name="targetType" vsli:raw="The destination data type of the cast.">Der Zieldatentyp für die Typumwandlung.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">Die umzuwandelnde <see cref="T:System.CodeDom.CodeExpression" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary vsli:raw="Gets or sets the expression to cast.">Ruft den umzuwandelnden Ausdruck ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the code to cast.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den umzuwandelnden Code angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary vsli:raw="Gets or sets the destination type of the cast.">Ruft den Zieltyp der Typumwandlung ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the destination type to cast to.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Zieltyp für die Umwandlung angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary vsli:raw="Represents a &lt;see langword=&quot;catch&quot; /&gt; exception block of a &lt;see langword=&quot;try/catch&quot; /&gt; statement.">Stellt einen <see langword="catch" />-Ausnahmeblock einer <see langword="try/catch" />-Anweisung dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCatchClause" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCatchClause" />-Klasse unter Verwendung des angegebenen Namens der lokalen Variablen für die Ausnahme.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">Der Name der lokalen Variablen, die in der catch-Klausel für die Ausnahme deklariert ist. Dieser ist optional.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception and exception type.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCatchClause" />-Klasse unter Verwendung des angegebenen Namens der lokalen Variablen für die Ausnahme und des Ausnahmetyps.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">Der Name der lokalen Variablen, die in der catch-Klausel für die Ausnahme deklariert ist. Dieser ist optional.</param>
      <param name="catchExceptionType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of exception to catch.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Typ der abzufangenden Ausnahme angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception, exception type and statement collection.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCatchClause" />-Klasse unter Verwendung des angegebenen Namens der lokalen Variablen für die Ausnahme, des Ausnahmetyps und der Anweisungsauflistung.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">Der Name der lokalen Variablen, die in der catch-Klausel für die Ausnahme deklariert ist. Dieser ist optional.</param>
      <param name="catchExceptionType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of exception to catch.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Typ der abzufangenden Ausnahme angibt.</param>
      <param name="statements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that represent the contents of the catch block.">Ein Array von <see cref="T:System.CodeDom.CodeStatement" />-Objekten, die den Inhalt des catch-Blocks darstellen.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary vsli:raw="Gets or sets the type of the exception to handle with the catch block.">Ruft den Typ der Ausnahme ab, die mit dem catch-Block behandelt werden soll, oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the exception to handle.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Typ der zu behandelnden Ausnahme angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary vsli:raw="Gets or sets the variable name of the exception that the &lt;see langword=&quot;catch&quot; /&gt; clause handles.">Ruft den Variablennamen der Ausnahme ab, die von der <see langword="catch" />-Klausel behandelt wird, oder legt diesen fest.</summary>
      <returns vsli:raw="The name for the exception variable that the &lt;see langword=&quot;catch&quot; /&gt; clause handles.">Der Name für die Ausnahmevariable, die von der <see langword="catch" />-Klausel behandelt wird.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary vsli:raw="Gets the statements within the catch block.">Ruft die Anweisungen im catch-Block ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements within the catch block.">Eine <see cref="T:System.CodeDom.CodeStatementCollection" />, die die Anweisungen im catch-Block enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeCatchClause" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCatchClauseCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCatchClauseCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeCatchClause" />-Objekten enthält.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects with which to initialize the collection.">Ein Array von <see cref="T:System.CodeDom.CodeCatchClause" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Eines oder mehrere Objekte im Array sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCatchClauseCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; with which to initialize the collection.">Eine <see cref="T:System.CodeDom.CodeCatchClauseCollection" />, mit der die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to the collection.">Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to add.">Das hinzuzufügende <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; array to the end of the collection.">Kopiert die Elemente des angegebenen <see cref="T:System.CodeDom.CodeCatchClause" />-Arrays an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; that contains the objects to add to the collection.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeCatchClause" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; object to the end of the collection.">Kopiert den Inhalt eines anderen <see cref="T:System.CodeDom.CodeCatchClauseCollection" />-Objekts an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; that contains the objects to add to the collection.">Eine <see cref="T:System.CodeDom.CodeCatchClauseCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object.">Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to locate in the collection.">Das <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Kopiert die Auflistungsobjekte in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Das Zielarray ist mehrdimensional.  

oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object in the collection, if it exists in the collection.">Ruft den Index des angegebenen <see cref="T:System.CodeDom.CodeCatchClause" />-Objekts in der Auflistung ab, sofern es in der Auflistung vorhanden ist.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to locate in the collection.">Das <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">Der Index des angegebenen Objekts in der Auflistung, sofern gefunden, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object into the collection at the specified index.">Fügt das angegebene <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Der nullbasierte Index, an dem das angegebene Objekt eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to insert.">Das einzufügende <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object at the specified index in the collection.">Ruft das <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object at each valid index.">Ein <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt an jedem gültigen Index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object from the collection.">Entfernt das angegebene <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to remove from the collection.">Das <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary vsli:raw="Represents a code checksum pragma code entity.">Stellt eine Pragmacodeentität für Codeprüfsummen dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeChecksumPragma&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeChecksumPragma" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeChecksumPragma&quot; /&gt; class using a file name, a GUID representing the checksum algorithm, and a byte stream representing the checksum data.">Initialisiert unter Verwendung eines Dateinamens, einer GUID, die den Prüfsummenalgorithmus darstellt, und eines Bytestreams, der die Prüfsummendaten darstellt, eine neue Instanz der <see cref="T:System.CodeDom.CodeChecksumPragma" />-Klasse.</summary>
      <param name="fileName" vsli:raw="The path to the checksum file.">Der Pfad der Prüfsummendatei.</param>
      <param name="checksumAlgorithmId" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that identifies the checksum algorithm to use.">Eine <see cref="T:System.Guid" />, die den Prüfsummenalgorithmus kennzeichnet, der verwendet werden soll.</param>
      <param name="checksumData" vsli:raw="A byte array that contains the checksum data.">Ein Bytearray, das die Prüfsummendaten enthält.</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary vsli:raw="Gets or sets a GUID that identifies the checksum algorithm to use.">Ruft eine GUID ab, die den zu verwendenden Prüfsummenalgorithmus bezeichnet, oder legt diese fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that identifies the checksum algorithm to use.">Eine <see cref="T:System.Guid" />, die den Prüfsummenalgorithmus kennzeichnet, der verwendet werden soll.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary vsli:raw="Gets or sets the value of the data for the checksum calculation.">Ruft den Wert der Daten für die Prüfsummenberechnung ab oder legt diesen fest.</summary>
      <returns vsli:raw="A byte array that contains the data for the checksum calculation.">Ein Bytearray, das die Daten für die Prüfsummenberechnung enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary vsli:raw="Gets or sets the path to the checksum file.">Ruft den Pfad der Prüfsummendatei ab oder legt diesen fest.</summary>
      <returns vsli:raw="The path to the checksum file.">Der Pfad der Prüfsummendatei.</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary vsli:raw="Represents a comment.">Stellt einen Kommentar dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeComment" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class with the specified text as contents.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeComment" />-Klasse mit dem angegebenen Text als Inhalt.</summary>
      <param name="text" vsli:raw="The contents of the comment.">Der Inhalt des Kommentars.</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class using the specified text and documentation comment flag.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeComment" />-Klasse unter Verwendung des angegebenen Textes und des angegebenen Flags für Dokumentationskommentare.</summary>
      <param name="text" vsli:raw="The contents of the comment.">Der Inhalt des Kommentars.</param>
      <param name="docComment" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn es sich bei dem Kommentar um einen Dokumentationskommentar handelt, andernfalls <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary vsli:raw="Gets or sets a value that indicates whether the comment is a documentation comment.">Ruft einen Wert ab, der angibt, ob es sich bei dem Kommentar um einen Dokumentationskommentar handelt, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn es sich bei dem Kommentar um einen Dokumentationskommentar handelt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary vsli:raw="Gets or sets the text of the comment.">Ruft den Text des Kommentars ab oder legt diesen fest.</summary>
      <returns vsli:raw="A string containing the comment text.">Eine Zeichenfolge, die den Text des Kommentars enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary vsli:raw="Represents a statement consisting of a single comment.">Stellt eine Anweisung dar, die aus einem einzelnen Kommentar besteht.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCommentStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified comment.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCommentStatement" />-Klasse unter Verwendung des angegebenen Kommentars.</summary>
      <param name="comment" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; that indicates the comment.">Eine <see cref="T:System.CodeDom.CodeComment" />-Klasse, die den Kommentar angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified text as contents.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCommentStatement" />-Klasse mit dem angegebenen Text als Inhalt.</summary>
      <param name="text" vsli:raw="The contents of the comment.">Der Inhalt des Kommentars.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified text and documentation comment flag.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCommentStatement" />-Klasse unter Verwendung des angegebenen Textes und des angegebenen Flags für Dokumentationskommentare.</summary>
      <param name="text" vsli:raw="The contents of the comment.">Der Inhalt des Kommentars.</param>
      <param name="docComment" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn es sich bei dem Kommentar um einen Dokumentationskommentar handelt, andernfalls <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary vsli:raw="Gets or sets the contents of the comment.">Ruft den Inhalt des Kommentars ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; that indicates the comment.">Eine <see cref="T:System.CodeDom.CodeComment" />-Klasse, die den Kommentar angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeCommentStatement" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCommentStatementCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCommentStatementCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekten enthält.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects with which to initialize the collection.">Ein Array von <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Eines oder mehrere Objekte im Array sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCommentStatementCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; with which to initialize the collection.">Eine <see cref="T:System.CodeDom.CodeCommentStatementCollection" />, mit der die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to the collection.">Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to add.">Das hinzuzufügende <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; array to the end of the collection.">Kopiert die Elemente des angegebenen <see cref="T:System.CodeDom.CodeCommentStatement" />-Arrays an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; that contains the objects to add to the collection.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeCommentStatement" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; object to the end of the collection.">Kopiert den Inhalt eines anderen <see cref="T:System.CodeDom.CodeCommentStatementCollection" />-Objekts an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that contains the objects to add to the collection.">Eine <see cref="T:System.CodeDom.CodeCommentStatementCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object.">Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; to search for in the collection.">Das <see cref="T:System.CodeDom.CodeCommentStatement" />, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; beginning at the specified index.">Kopiert die Auflistungsobjekte in das angegebene eindimensionale <see cref="T:System.Array" />, beginnend beim angegebenen Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Das Zielarray ist mehrdimensional.  

oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object in the collection, if it exists in the collection.">Ruft den Index des angegebenen <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekts in der Auflistung ab, sofern es in der Auflistung vorhanden ist.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to locate.">Das zu suchende <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">Der Index des angegebenen Objekts in der Auflistung, sofern gefunden, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Inserts a &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object into the collection at the specified index.">Fügt ein <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index where the item should be inserted.">Der nullbasierte Index, an dem das Element eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to insert.">Das einzufügende <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object at the specified index in the collection.">Ruft das <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object at each valid index.">Ein <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt an jedem gültigen Index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object from the collection.">Entfernt das angegebene <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to remove from the collection.">Das <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary vsli:raw="Provides a container for a CodeDOM program graph.">Stellt einen Container für ein CodeDOM-Programmdiagramm bereit.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCompileUnit" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary vsli:raw="Gets a collection of custom attributes for the generated assembly.">Ruft eine Auflistung von benutzerdefinierten Attributen für die generierte Assembly ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes for the generated assembly.">Eine <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />-Klasse, die die benutzerdefinierten Attribute für die generierte Assembly angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Ruft ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt ab, das Enddirektiven enthält.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt, das Enddirektiven enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary vsli:raw="Gets the collection of namespaces.">Ruft die Auflistung von Namespaces ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; that indicates the namespaces that the compile unit uses.">Eine <see cref="T:System.CodeDom.CodeNamespaceCollection" />-Klasse, die die von der Kompilierungseinheit verwendeten Namespaces angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary vsli:raw="Gets the referenced assemblies.">Ruft die Assemblys ab, auf die verwiesen wird.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.StringCollection&quot; /&gt; that contains the file names of the referenced assemblies.">Eine <see cref="T:System.Collections.Specialized.StringCollection" />-Klasse, die die Dateinamen der Assemblys enthält, auf die verwiesen wird.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Ruft ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt ab, das Startdirektiven enthält.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt, das Startdirektiven enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary vsli:raw="Represents a conditional branch statement, typically represented as an &lt;see langword=&quot;if&quot; /&gt; statement.">Stellt eine bedingte Verzweigungsanweisung dar, die i. d. R. als <see langword="if" />-Anweisung dargestellt wird.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeConditionStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class using the specified condition and statements.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeConditionStatement" />-Klasse unter Verwendung der angegebenen Bedingung und der angegebenen Anweisungen.</summary>
      <param name="condition" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to evaluate.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den auszuwertenden Ausdruck angibt.</param>
      <param name="trueStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;true&quot; /&gt;.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeStatement" />, das die auszuführenden Anweisungen enthält, wenn die Bedingung <see langword="true" /> ist.</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class using the specified condition and statements.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeConditionStatement" />-Klasse unter Verwendung der angegebenen Bedingung und der angegebenen Anweisungen.</summary>
      <param name="condition" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the condition to evaluate.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die die auszuwertende Bedingung angibt.</param>
      <param name="trueStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;true&quot; /&gt;.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeStatement" />, das die auszuführenden Anweisungen enthält, wenn die Bedingung <see langword="true" /> ist.</param>
      <param name="falseStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeStatement" />, das die auszuführenden Anweisungen enthält, wenn die Bedingung <see langword="false" /> ist.</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary vsli:raw="Gets or sets the expression to evaluate &lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">Ruft den Ausdruck ab, um auf <see langword="true" /> oder <see langword="false" /> zu prüfen, oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to evaluate &lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">Eine <see cref="T:System.CodeDom.CodeExpression" />, um auf <see langword="true" /> oder <see langword="false" /> zu prüfen.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary vsli:raw="Gets the collection of statements to execute if the conditional expression evaluates to &lt;see langword=&quot;false&quot; /&gt;.">Ruft die Auflistung von Anweisungen ab, die ausgeführt werden sollen, wenn der bedingte Ausdruck <see langword="false" /> ergibt.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements to execute if the conditional expression evaluates to &lt;see langword=&quot;false&quot; /&gt;.">Eine <see cref="T:System.CodeDom.CodeStatementCollection" /> mit den Anweisungen, die ausgeführt werden sollen, wenn der bedingte Ausdruck <see langword="false" /> ergibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary vsli:raw="Gets the collection of statements to execute if the conditional expression evaluates to &lt;see langword=&quot;true&quot; /&gt;.">Ruft die Auflistung von Anweisungen ab, die ausgeführt werden sollen, wenn der bedingte Ausdruck <see langword="true" /> ergibt.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements to execute if the conditional expression evaluates to &lt;see langword=&quot;true&quot; /&gt;.">Eine <see cref="T:System.CodeDom.CodeStatementCollection" /> mit den Anweisungen, die ausgeführt werden sollen, wenn der bedingte Ausdruck <see langword="true" /> ergibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary vsli:raw="Represents a declaration for an instance constructor of a type.">Stellt eine Deklaration eines Instanzkonstruktors für einen Typ dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConstructor&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeConstructor" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary vsli:raw="Gets the collection of base constructor arguments.">Ruft die Auflistung von Basiskonstruktorargumenten ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the base constructor arguments.">Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />-Klasse, die die Basiskonstruktorargumente enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary vsli:raw="Gets the collection of chained constructor arguments.">Ruft die Auflistung von verketteten Konstruktorargumenten ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the chained constructor arguments.">Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />-Klasse, die die verketteten Konstruktorargumente enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary vsli:raw="Represents a reference to a default value.">Stellt einen Verweis auf einen Standardwert dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDefaultValueExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDefaultValueExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDefaultValueExpression&quot; /&gt; class using the specified code type reference.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDefaultValueExpression" />-Klasse unter Verwendung des angegebenen Codetypverweises.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that specifies the reference to a value type.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse, die den Verweis auf einen Werttyp angibt.</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary vsli:raw="Gets or sets the data type reference for a default value.">Ruft den Datentypverweis für einen Standardwert ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; object representing a data type that has a default value.">Ein <see cref="T:System.CodeDom.CodeTypeReference" />-Objekt, das einen Datentyp darstellt, der über einen Standardwert verfügt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary vsli:raw="Represents an expression that creates a delegate.">Stellt einen Ausdruck dar, der einen Delegaten erstellt.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateCreateExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateCreateExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />-Klasse.</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the delegate.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp des Delegaten angibt.</param>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object containing the event-handler method.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt angibt, das die Ereignishandlermethode enthält.</param>
      <param name="methodName" vsli:raw="The name of the event-handler method.">Der Name der Ereignishandlermethode.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary vsli:raw="Gets or sets the data type of the delegate.">Ruft den Datentyp des Delegaten ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the delegate.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp des Delegaten angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary vsli:raw="Gets or sets the name of the event handler method.">Ruft den Namen der Ereignishandlermethode ab oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the event handler method.">Der Name der Ereignishandlermethode.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the event-handler method.">Ruft das Objekt ab, das die Ereignishandlermethode enthält, oder legt dieses fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object containing the event-handler method.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt angibt, das die Ereignishandlermethode enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary vsli:raw="Represents an expression that raises an event.">Stellt einen Ausdruck dar, der ein Ereignis auslöst.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class using the specified target object.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />-Klasse unter Verwendung des angegebenen Zielobjekts.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Zielobjekt angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class using the specified target object and parameters.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />-Klasse unter Verwendung des angegebenen Zielobjekts und der angegebenen Parameter.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Zielobjekt angibt.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters.">Ein Array von <see cref="T:System.CodeDom.CodeExpression" />-Objekten, die die Parameter angeben.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary vsli:raw="Gets or sets the parameters to pass to the event handling methods attached to the event.">Ruft die Parameter ab, die an die dem Ereignis angefügten Ereignisbehandlungsmethoden übergeben werden sollen, oder legt diese fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the parameters to pass to the event handling methods attached to the event.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die die Parameter angibt, die an die dem Ereignis angefügten Ereignisbehandlungsmethoden übergeben werden sollen.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary vsli:raw="Gets or sets the event to invoke.">Ruft das aufzurufende Ereignis ab oder legt dieses fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event to invoke.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das aufzurufende Ereignis angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary vsli:raw="Represents an expression used as a method invoke parameter along with a reference direction indicator.">Stellt einen Ausdruck dar, der zusammen mit einem Indikator für die Verweisrichtung als Parameter für Methodenaufrufe verwendet wird.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectionExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDirectionExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectionExpression&quot; /&gt; class using the specified field direction and expression.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDirectionExpression" />-Klasse unter Verwendung der angegebenen Feldrichtung und des angegebenen Ausdrucks.</summary>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt; that indicates the field direction of the expression.">Eine <see cref="T:System.CodeDom.FieldDirection" />, die die Feldrichtung des Ausdrucks angibt.</param>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the code expression to represent.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den darzustellenden Codeausdruck angibt.</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary vsli:raw="Gets or sets the field direction for this direction expression.">Ruft die Feldrichtung für diesen Richtungsausdruck ab oder legt diese fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt; that indicates the field direction for this direction expression.">Eine <see cref="T:System.CodeDom.FieldDirection" />, die die Feldrichtung für diesen Richtungsausdruck angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary vsli:raw="Gets or sets the code expression to represent.">Ruft den darzustellenden Codeausdruck ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to represent.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den darzustellenden Ausdruck angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary vsli:raw="Serves as the base class for code directive classes.">Dient als Basisklasse für Codedirektivenklassen.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDirective" />-Klasse.</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeDirective" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class with the code directive objects in the specified array.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Klasse mit den Codedirektivenobjekten im angegebenen Array.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects with which to initialize the collection.">Ein Array von <see cref="T:System.CodeDom.CodeDirective" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class with the elements in the specified code directive collection.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Klasse mit den Elementen in der angegebenen Codedirektivenauflistung.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object with which to initialize the collection.">Ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt, mit dem die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to the collection.">Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeDirective" />-Objekt hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to add.">Das hinzuzufügende <see cref="T:System.CodeDom.CodeDirective" />-Objekt.</param>
      <returns vsli:raw="The index position at which the new element was inserted.">Die Indexposition, an der das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary vsli:raw="Adds an array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to the end of the collection.">Fügt ein Array von <see cref="T:System.CodeDom.CodeDirective" />-Objekten am Ende der Auflistung hinzu.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to add to the collection.">Ein Array von <see cref="T:System.CodeDom.CodeDirective" />-Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object to the end of the collection.">Fügt den Inhalt des angegebenen <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekts am Ende der Auflistung hinzu.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to add to the collection.">Ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt, das die der Auflistung hinzuzufügenden <see cref="T:System.CodeDom.CodeDirective" />-Objekte enthält.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object.">Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeDirective" />-Objekt enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to search for in the collection.">Das <see cref="T:System.CodeDom.CodeDirective" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary vsli:raw="Copies the contents of the collection to a one-dimensional array beginning at the specified index.">Kopiert den Inhalt der Auflistung in ein eindimensionales Array, beginnend am angegebenen Index.</summary>
      <param name="array" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; that is the destination of the values copied from the collection.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeDirective" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index" vsli:raw="The index in the array at which to begin inserting collection objects.">Der Index des Arrays, an dem mit dem Einfügen von Auflistungsobjekten begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; is greater than the available space between the index of the target array specified by &lt;paramref name=&quot;index&quot; /&gt; and the end of the target array.">Das Zielarray ist mehrdimensional.  

oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeDirectiveCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the target array's minimum index.">
        <paramref name="index" /> ist kleiner als der kleinstmögliche Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object, if it exists in the collection.">Ruft den Index in der Auflistung des angegebenen <see cref="T:System.CodeDom.CodeDirective" />-Objekts ab, sofern es in der Auflistung vorhanden ist.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to locate in the collection.">Das <see cref="T:System.CodeDom.CodeDirective" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="The index position in the collection of the specified object, if found; otherwise, -1.">Die Indexposition in der Auflistung des angegebenen Objekts, sofern gefunden, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object into the collection at the specified index.">Fügt das angegebene <see cref="T:System.CodeDom.CodeDirective" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index position where the specified object should be inserted.">Die nullbasierte Indexposition, an der das angegebene Objekt eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to insert.">Das einzufügende <see cref="T:System.CodeDom.CodeDirective" />-Objekt.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.CollectionBase.Count&quot; /&gt;.">
        <paramref name="index" /> ist kleiner als 0.  

oder - 
<paramref name="index" /> ist größer als <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object at the specified index in the collection.">Ruft das <see cref="T:System.CodeDom.CodeDirective" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The index position to access.">Die Indexposition für den Zugriff.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; at the index position.">Die <see cref="T:System.CodeDom.CodeDirective" /> an der Indexposition.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the valid range of index positions for the collection.">
        <paramref name="index" /> liegt außerhalb des gültigen Indexpositionsbereichs für die Auflistung.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object from the collection.">Entfernt das angegebene <see cref="T:System.CodeDom.CodeDirective" />-Objekt aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to remove from the collection.">Das <see cref="T:System.CodeDom.CodeDirective" />-Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary vsli:raw="Represents the entry point method of an executable.">Stellt die Einstiegspunktmethode für eine ausführbare Datei dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEntryPointMethod&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeEntryPointMethod" />-Klasse.</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary vsli:raw="Represents a reference to an event.">Stellt einen Verweis auf ein Ereignis dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeEventReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; class using the specified target object and event name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeEventReferenceExpression" />-Klasse unter Verwendung des angegebenen Zielobjekts und Ereignisnamens.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt angibt, in dem das Ereignis enthalten ist.</param>
      <param name="eventName" vsli:raw="The name of the event to reference.">Der Name des Ereignisses, auf das verwiesen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary vsli:raw="Gets or sets the name of the event.">Ruft den Namen des Ereignisses ab oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the event.">Der Name des Ereignisses.</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the event.">Ruft das Objekt ab, in dem das Ereignis enthalten ist, oder legt dieses fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt angibt, in dem das Ereignis enthalten ist.</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary vsli:raw="Represents a code expression. This is a base class for other code expression objects that is never instantiated.">Stellt einen Codeausdruck dar. Hierbei handelt es sich um eine Basisklasse für andere Codeausdrucksobjekte, die nie instanziiert wird.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeExpression" />-Klasse.</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeExpression" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeExpressionCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeExpressionCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeExpression" />-Objekten enthält.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects with which to initialize the collection.">Ein Array von <see cref="T:System.CodeDom.CodeExpression" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Eines oder mehrere Objekte im Array sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeExpressionCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; with which to initialize the collection.">Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />, mit der die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to the collection.">Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeExpression" />-Objekt hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to add.">Das hinzuzufügende <see cref="T:System.CodeDom.CodeExpression" />-Objekt.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">Kopiert die Elemente des angegebenen Arrays an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that contains the objects to add to the collection.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeExpression" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; object to the end of the collection.">Kopiert den Inhalt eines anderen <see cref="T:System.CodeDom.CodeExpressionCollection" />-Objekts an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the objects to add to the collection.">Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object.">Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeExpression" />-Objekt enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to locate in the collection.">Das <see cref="T:System.CodeDom.CodeExpression" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Kopiert die Auflistungsobjekte in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Das Zielarray ist mehrdimensional.  

oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeExpressionCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object in the collection, if it exists in the collection.">Ruft den Index des angegebenen <see cref="T:System.CodeDom.CodeExpression" />-Objekts in der Auflistung ab, sofern es in der Auflistung vorhanden ist.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to locate in the collection.">Das <see cref="T:System.CodeDom.CodeExpression" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">Der Index des angegebenen Objekts in der Auflistung, sofern gefunden, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object into the collection at the specified index.">Fügt das angegebene <see cref="T:System.CodeDom.CodeExpression" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Der nullbasierte Index, an dem das angegebene Objekt eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to insert.">Das einzufügende <see cref="T:System.CodeDom.CodeExpression" />-Objekt.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object at the specified index in the collection.">Ruft das <see cref="T:System.CodeDom.CodeExpression" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The zero-based index of the collection to access.">Der nullbasierte Index der Auflistung, auf die zugegriffen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object at each valid index.">Ein <see cref="T:System.CodeDom.CodeExpression" />-Objekt an jedem gültigen Index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object from the collection.">Entfernt das angegebene <see cref="T:System.CodeDom.CodeExpression" />-Objekt aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to remove from the collection.">Das <see cref="T:System.CodeDom.CodeExpression" />-Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary vsli:raw="Represents a statement that consists of a single expression.">Stellt eine Anweisung dar, die aus einem einzelnen Ausdruck besteht.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionStatement&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeExpressionStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionStatement&quot; /&gt; class by using the specified expression.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeExpressionStatement" />-Klasse unter Verwendung des angegebenen Ausdrucks.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; for the statement.">Eine <see cref="T:System.CodeDom.CodeExpression" /> für die Anweisung.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary vsli:raw="Gets or sets the expression for the statement.">Ruft den Ausdruck für die Anweisung ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression for the statement.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Ausdruck für die Anweisung angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary vsli:raw="Represents a reference to a field.">Stellt einen Verweis auf ein Feld dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeFieldReferenceExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeFieldReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeFieldReferenceExpression&quot; /&gt; class using the specified target object and field name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeFieldReferenceExpression" />-Klasse unter Verwendung des angegebenen Zielobjekts und Feldnamens.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the field.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt angibt, in dem das Feld enthalten ist.</param>
      <param name="fieldName" vsli:raw="The name of the field.">Der Name des Felds.</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary vsli:raw="Gets or sets the name of the field to reference.">Ruft den Namen des Felds ab, auf das verwiesen werden soll, oder legt diesen fest.</summary>
      <returns vsli:raw="A string containing the field name.">Eine Zeichenfolge, die den Feldnamen enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the field to reference.">Ruft das Objekt mit dem Feld ab, auf das verwiesen werden soll, oder legt dieses fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the field to reference.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt mit dem Feld angibt, auf das verwiesen werden soll.</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;goto&quot; /&gt; statement.">Stellt eine <see langword="goto" />-Anweisung dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeGotoStatement&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeGotoStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeGotoStatement&quot; /&gt; class using the specified label name.">Initialisiert unter Verwendung des angegebenen Sprungmarkennamens eine neue Instanz der <see cref="T:System.CodeDom.CodeGotoStatement" />-Klasse.</summary>
      <param name="label" vsli:raw="The name of the label at which to continue program execution.">Der Name der Sprungmarke, an der die Programmausführung fortgesetzt werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;Label&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="Label" /> ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary vsli:raw="Gets or sets the name of the label at which to continue program execution.">Ruft den Namen der Sprungmarke ab, an der die Programmausführung fortgesetzt werden soll, oder legt diesen fest.</summary>
      <returns vsli:raw="A string that indicates the name of the label at which to continue program execution.">Eine Zeichenfolge, die den Namen der Sprungmarke angibt, an der die Programmausführung fortgesetzt werden soll.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The label cannot be set because &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.">Die Bezeichnung kann nicht festgelegt werden, da <paramref name="value" /><see langword="null" /> oder eine leere Zeichenfolge ist.</exception>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary vsli:raw="Represents a reference to an indexer property of an object.">Stellt einen Verweis auf eine Indexereigenschaft eines Objekts dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIndexerExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeIndexerExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIndexerExpression&quot; /&gt; class using the specified target object and index.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeIndexerExpression" />-Klasse unter Verwendung des angegebenen Zielobjekts und Indexes.</summary>
      <param name="targetObject" vsli:raw="The target object.">Das Zielobjekt.</param>
      <param name="indices" vsli:raw="The index or indexes of the indexer expression.">Der Index oder die Indizes des Indexerausdrucks.</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary vsli:raw="Gets the collection of indexes of the indexer expression.">Ruft die Auflistung von Indizes des Indexerausdrucks ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the index or indexes of the indexer expression.">Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />, die den Index oder die Indizes des Indexerausdrucks angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary vsli:raw="Gets or sets the target object that can be indexed.">Ruft das Zielobjekt ab, das indiziert werden kann, oder legt dieses fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the indexer object.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Indexerobjekt angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;for&quot; /&gt; statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop.">Stellt eine <see langword="for" />-Anweisung oder eine Schleife durch einen Anweisungsblock dar, wobei ein Testausdruck als Bedingung für die Fortsetzung der Schleife verwendet wird.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIterationStatement&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeIterationStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIterationStatement&quot; /&gt; class using the specified parameters.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeIterationStatement" />-Klasse unter Verwendung der angegebenen Parameter.</summary>
      <param name="initStatement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the loop initialization statement.">Ein <see cref="T:System.CodeDom.CodeStatement" />, das die Anweisung zum Initialisieren der Schleife enthält.</param>
      <param name="testExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; containing the expression to test for exit condition.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die die Anweisung enthält, die auf Exitbedingungen getestet werden soll.</param>
      <param name="incrementStatement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the per-cycle increment statement.">Ein <see cref="T:System.CodeDom.CodeStatement" />, das die Anweisung für das Inkrement pro Durchlauf enthält.</param>
      <param name="statements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements within the loop.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeStatement" /> mit den Anweisungen in der Schleife.</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary vsli:raw="Gets or sets the statement that is called after each loop cycle.">Ruft die Anweisung ab, die nach jedem Schleifendurchlauf aufgerufen wird, oder legt diese fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the per cycle increment statement.">Ein <see cref="T:System.CodeDom.CodeStatement" />, das die Anweisung für das Inkrement pro Durchlauf angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary vsli:raw="Gets or sets the loop initialization statement.">Ruft die Anweisung zum Initialisieren der Schleife ab oder legt diese fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the loop initialization statement.">Ein <see cref="T:System.CodeDom.CodeStatement" />, das die Anweisung zum Initialisieren der Schleife angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary vsli:raw="Gets the collection of statements to be executed within the loop.">Ruft die Auflistung von Anweisungen ab, die in der Schleife ausgeführt werden sollen.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the statements within the loop.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeStatement" />, das die Anweisungen in der Schleife angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary vsli:raw="Gets or sets the expression to test as the condition that continues the loop.">Ruft den Ausdruck ab, der als Bedingung zum Fortsetzen der Schleife getestet werden soll, oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to test.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den zu testenden Ausdruck angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary vsli:raw="Represents a labeled statement or a stand-alone label.">Stellt eine Anweisung mit Marke oder eine eigenständige Marke dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeLabeledStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class using the specified label name.">Initialisiert unter Verwendung des angegebenen Sprungmarkennamens eine neue Instanz der <see cref="T:System.CodeDom.CodeLabeledStatement" />-Klasse.</summary>
      <param name="label" vsli:raw="The name of the label.">Der Name der Sprungmarke.</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class using the specified label name and statement.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeLabeledStatement" />-Klasse unter Verwendung des angegebenen Sprungmarkennamens und der angegebenen Anweisung.</summary>
      <param name="label" vsli:raw="The name of the label.">Der Name der Sprungmarke.</param>
      <param name="statement" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to associate with the label.">Das <see cref="T:System.CodeDom.CodeStatement" />, das der Sprungmarke zugeordnet werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary vsli:raw="Gets or sets the name of the label.">Ruft den Namen der Sprungmarke ab oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the label.">Der Name der Sprungmarke.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary vsli:raw="Gets or sets the optional associated statement.">Ruft die optionale zugeordnete Anweisung ab oder legt diese fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the statement associated with the label.">Ein <see cref="T:System.CodeDom.CodeStatement" />, das die der Sprungmarke zugeordnete Anweisung angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary vsli:raw="Represents a specific location within a specific file.">Stellt eine bestimmte Position innerhalb einer bestimmten Datei dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeLinePragma" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeLinePragma" />-Klasse.</summary>
      <param name="fileName" vsli:raw="The file name of the associated file.">Der Dateiname der zugeordneten Datei.</param>
      <param name="lineNumber" vsli:raw="The line number to store a reference to.">Die Zeilennummer, für die ein Verweis gespeichert werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary vsli:raw="Gets or sets the name of the associated file.">Ruft den Namen der zugeordneten Datei ab oder legt diesen fest.</summary>
      <returns vsli:raw="The file name of the associated file.">Der Dateiname der zugeordneten Datei.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary vsli:raw="Gets or sets the line number of the associated reference.">Ruft die Zeilennummer des zugeordneten Verweises ab oder legt sie fest.</summary>
      <returns vsli:raw="The line number.">Die Zeilennummer.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary vsli:raw="Represents a declaration for an event of a type.">Stellt eine Deklaration eines Ereignisses für einen Typ dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberEvent&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMemberEvent" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary vsli:raw="Gets or sets the data type that the member event implements.">Ruft den Datentyp ab, den das Memberereignis implementiert, oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the data type or types that the member event implements.">Eine <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, die den Datentyp oder die Datentypen angibt, die vom Memberereignis implementiert werden.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the privately implemented data type, if any.">Ruft den ggf. als private implementierten Datentyp ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type that the event privately implements.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp angibt, den das Ereignis als private implementiert.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary vsli:raw="Gets or sets the data type of the delegate type that handles the event.">Ruft den Datentyp des Delegattyps ab, der das Ereignis behandelt, oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the delegate type that handles the event.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Delegattyp angibt, der das Ereignis behandelt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary vsli:raw="Represents a declaration for a field of a type.">Stellt eine Deklaration eines Felds für einen Typ dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMemberField" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">Initialisiert unter Verwendung des angegebenen Feldtyps und des Feldnamens eine neue Instanz der <see cref="T:System.CodeDom.CodeMemberField" />-Klasse.</summary>
      <param name="type" vsli:raw="An object that indicates the type of the field.">Ein Objekt, das den Typ des Felds angibt.</param>
      <param name="name" vsli:raw="The name of the field.">Der Name des Felds.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">Initialisiert unter Verwendung des angegebenen Feldtyps und des Feldnamens eine neue Instanz der <see cref="T:System.CodeDom.CodeMemberField" />-Klasse.</summary>
      <param name="type" vsli:raw="The type of the field.">Der Typ des Felds.</param>
      <param name="name" vsli:raw="The name of the field.">Der Name des Felds.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">Initialisiert unter Verwendung des angegebenen Feldtyps und des Feldnamens eine neue Instanz der <see cref="T:System.CodeDom.CodeMemberField" />-Klasse.</summary>
      <param name="type" vsli:raw="The type of the field.">Der Typ des Felds.</param>
      <param name="name" vsli:raw="The name of the field.">Der Name des Felds.</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary vsli:raw="Gets or sets the initialization expression for the field.">Ruft den Initialisierungsausdruck für das Feld ab oder legt diesen fest.</summary>
      <returns vsli:raw="The initialization expression for the field.">Der Initialisierungsausdruck für das Feld.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary vsli:raw="Gets or sets the type of the field.">Ruft den Typ des Felds ab oder legt diesen fest.</summary>
      <returns vsli:raw="The type of the field.">Der Typ des Felds.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary vsli:raw="Represents a declaration for a method of a type.">Stellt eine Deklaration einer Methode für einen Typ dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberMethod&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMemberMethod" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary vsli:raw="Gets the data types of the interfaces implemented by this method, unless it is a private method implementation, which is indicated by the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.PrivateImplementationType&quot; /&gt; property.">Ruft die Datentypen der von dieser Methode implementierten Schnittstellen ab, sofern es sich nicht um die Implementierung einer privaten Methode handelt. Dies wird durch die <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" />-Eigenschaft angegeben.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the interfaces implemented by this method.">Eine <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, die die von dieser Methode implementierten Schnittstellen angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary vsli:raw="Gets the parameter declarations for the method.">Ruft die Parameterdeklarationen für die Methode ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the method parameters.">Eine <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, die die Methodenparameter angibt.</returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.ImplementationTypes&quot; /&gt; collection is accessed.">Ein Ereignis, das beim ersten Zugriff auf die <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" />-Auflistung ausgelöst wird.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.Parameters&quot; /&gt; collection is accessed.">Ein Ereignis, das beim ersten Zugriff auf die <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" />-Auflistung ausgelöst wird.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.Statements&quot; /&gt; collection is accessed.">Ein Ereignis, das beim ersten Zugriff auf die <see cref="P:System.CodeDom.CodeMemberMethod.Statements" />-Auflistung ausgelöst wird.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the data type of the interface this method, if private, implements a method of, if any.">Ruft den Datentyp der Schnittstelle ab, für die diese Methode (sofern es sich um eine private Methode handelt) ggf. eine Methode implementiert, oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the interface with the method that the private method whose declaration is represented by this &lt;see cref=&quot;T:System.CodeDom.CodeMemberMethod&quot; /&gt; implements.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp der Schnittstelle mit der Methode angibt, die von der privaten Methode implementiert wird, deren Deklaration von dieser <see cref="T:System.CodeDom.CodeMemberMethod" /> dargestellt wird.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary vsli:raw="Gets or sets the data type of the return value of the method.">Ruft den Datentyp des Rückgabewerts der Methode ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the value returned by the method.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp des von der Methode zurückgegebenen Werts angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the return type of the method.">Ruft die benutzerdefinierten Attribute des Rückgabetyps der Methode ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes.">Eine <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, die die benutzerdefinierten Attribute angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary vsli:raw="Gets the statements within the method.">Ruft die Anweisungen in der Methode ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the statements within the method.">Eine <see cref="T:System.CodeDom.CodeStatementCollection" />, die die Anweisungen innerhalb der Methode angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary vsli:raw="Gets the type parameters for the current generic method.">Ruft die Typparameter für die aktuelle generische Methode ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; that contains the type parameters for the generic method.">Eine <see cref="T:System.CodeDom.CodeTypeParameterCollection" />, die die Typparameter für die generische Methode enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary vsli:raw="Represents a declaration for a property of a type.">Stellt eine Deklaration für eine Eigenschaft eines Typs dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberProperty&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMemberProperty" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary vsli:raw="Gets the collection of &lt;see langword=&quot;get&quot; /&gt; statements for the property.">Ruft die Auflistung von <see langword="get" />-Anweisungen für die Eigenschaft ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that contains the &lt;see langword=&quot;get&quot; /&gt; statements for the member property.">Eine <see cref="T:System.CodeDom.CodeStatementCollection" />, die die <see langword="get" />-Anweisungen für die Membereigenschaft enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary vsli:raw="Gets or sets a value indicating whether the property has a &lt;see langword=&quot;get&quot; /&gt; method accessor.">Ruft einen Wert ab, der angibt, ob die Eigenschaft über einen Accessor für die <see langword="get" />-Methode verfügt, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see langword=&quot;Count&quot; /&gt; property of the &lt;see cref=&quot;P:System.CodeDom.CodeMemberProperty.GetStatements&quot; /&gt; collection is non-zero, or if the value of this property has been set to &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die <see langword="Count" />-Eigenschaft der <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" />-Auflistung nicht 0 ist, oder wenn der Wert dieser Eigenschaft auf <see langword="true" /> festgelegt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary vsli:raw="Gets or sets a value indicating whether the property has a &lt;see langword=&quot;set&quot; /&gt; method accessor.">Ruft einen Wert ab, der angibt, ob die Eigenschaft über einen Accessor für die <see langword="set" />-Methode verfügt, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Collections.CollectionBase.Count&quot; /&gt; property of the &lt;see cref=&quot;P:System.CodeDom.CodeMemberProperty.SetStatements&quot; /&gt; collection is non-zero; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die <see cref="P:System.Collections.CollectionBase.Count" />-Eigenschaft der <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" />-Auflistung nicht 0 ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary vsli:raw="Gets the data types of any interfaces that the property implements.">Ruft die Datentypen aller Schnittstellen ab, die von der Eigenschaft implementiert werden.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the data types the property implements.">Eine <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, die die von dieser Eigenschaft implementierten Datentypen angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary vsli:raw="Gets the collection of declaration expressions for the property.">Ruft die Auflistung von Deklarationsausdrücken für die Eigenschaft ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the declaration expressions for the property.">Eine <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, die die Deklarationsausdrücke für die Eigenschaft angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the data type of the interface, if any, this property, if private, implements.">Ruft ggf. den Datentyp der Schnittstelle ab, die von dieser Eigenschaft implementiert wird, sofern es sich um eine private Eigenschaft handelt, oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the interface, if any, the property, if private, implements.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die ggf. den Datentyp der Schnittstelle angibt, die von der Eigenschaft implementiert wird, sofern es sich um eine private Eigenschaft handelt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary vsli:raw="Gets the collection of &lt;see langword=&quot;set&quot; /&gt; statements for the property.">Ruft die Auflistung von <see langword="set" />-Anweisungen für die Eigenschaft ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that contains the &lt;see langword=&quot;set&quot; /&gt; statements for the member property.">Eine <see cref="T:System.CodeDom.CodeStatementCollection" />, die die <see langword="set" />-Anweisungen für die Membereigenschaft enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary vsli:raw="Gets or sets the data type of the property.">Ruft den Datentyp der Eigenschaft ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the property.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp der Eigenschaft angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary vsli:raw="Represents an expression that invokes a method.">Stellt einen Ausdruck dar, der eine Methode aufruft.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class using the specified target object, method name, and parameters.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />-Klasse unter Verwendung der Angaben für Zielobjekt, Methodennamen und Parameter.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object with the method to invoke.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Zielobjekt mit der aufzurufenden Methode angibt.</param>
      <param name="methodName" vsli:raw="The name of the method to invoke.">Der Name der aufzurufenden Methode.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters to call the method with.">Ein Array von <see cref="T:System.CodeDom.CodeExpression" />-Objekten, die die Parameter angeben, mit denen die Methode aufgerufen werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class using the specified method and parameters.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />-Klasse unter Verwendung der angegebenen Methode und Parameter.</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; that indicates the method to invoke.">Eine <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />, die die aufzurufende Methode angibt.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters with which to invoke the method.">Ein Array von <see cref="T:System.CodeDom.CodeExpression" />-Objekten, die die Parameter angeben, mit denen die Methode aufgerufen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary vsli:raw="Gets or sets the method to invoke.">Ruft die aufzurufende Methode ab oder legt diese fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; that indicates the method to invoke.">Eine <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />, die die aufzurufende Methode angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary vsli:raw="Gets the parameters to invoke the method with.">Ruft die Parameter ab, mit denen die Methode aufgerufen werden soll.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the parameters to invoke the method with.">Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />, die die Parameter angibt, mit denen die Methode aufgerufen wird.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary vsli:raw="Represents a reference to a method.">Stellt einen Verweis auf eine Methode dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class using the specified target object and method name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />-Klasse unter Verwendung des angegebenen Zielobjekts und Methodennamens.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object to target.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Zielobjekt angibt.</param>
      <param name="methodName" vsli:raw="The name of the method to call.">Der Name der aufzurufenden Methode.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class using the specified target object, method name, and generic type arguments.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />-Klasse unter Verwendung der Angaben für Zielobjekt, Methodennamen und generische Typargumente.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object to target.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Zielobjekt angibt.</param>
      <param name="methodName" vsli:raw="The name of the method to call.">Der Name der aufzurufenden Methode.</param>
      <param name="typeParameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; values that specify the &lt;see cref=&quot;P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments&quot; /&gt; for this &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt;.">Ein Array von <see cref="T:System.CodeDom.CodeTypeReference" />-Werten, die das <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" /> für diese <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> angeben.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary vsli:raw="Gets or sets the name of the method to reference.">Ruft den Namen der Methode ab, auf die verwiesen werden soll, oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the method to reference.">Der Name der Methode, auf die verwiesen werden soll.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the expression that indicates the method to reference.">Ruft den Ausdruck ab, der die Methode angibt, auf die verwiesen werden soll, oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the method to reference.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die die Methode darstellt, auf die verwiesen werden soll.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary vsli:raw="Gets the type arguments for the current generic method reference expression.">Ruft die Typargumente für den Verweisausdruck der aktuellen generischen Methode ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the type arguments for the current code &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt;.">Eine <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, die die Typargumente für die aktuelle Code-<see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary vsli:raw="Represents a return value statement.">Stellt eine Rückgabewertanweisung dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReturnStatement&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMethodReturnStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReturnStatement&quot; /&gt; class using the specified expression.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMethodReturnStatement" />-Klasse unter Verwendung des angegebenen Ausdrucks.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the return value.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Rückgabewert angibt.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary vsli:raw="Gets or sets the return value.">Ruft den Rückgabewert ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the value to return for the return statement, or &lt;see langword=&quot;null&quot; /&gt; if the statement is part of a subroutine.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den für die return-Anweisung zurückzugebenden Wert angibt, oder <see langword="null" />, wenn die Anweisung Teil einer Unterroutine ist.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary vsli:raw="Represents a namespace declaration.">Stellt eine Namespacedeklaration dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeNamespace" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; class using the specified name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeNamespace" />-Klasse unter Verwendung des angegebenen Namens.</summary>
      <param name="name" vsli:raw="The name of the namespace being declared.">Der Name des zu deklarierenden Namespaces.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary vsli:raw="Gets the comments for the namespace.">Ruft die Kommentare für den Namespace ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that indicates the comments for the namespace.">Eine <see cref="T:System.CodeDom.CodeCommentStatementCollection" />, die die Kommentare für den Namespace angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary vsli:raw="Gets the collection of namespace import directives used by the namespace.">Ruft die Auflistung der Direktiven für den Namespaceimport ab, die vom Namespace verwendet werden.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImportCollection&quot; /&gt; that indicates the namespace import directives used by the namespace.">Eine <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />, die die Direktiven für den Namespaceimport angibt, die vom Namespace verwendet werden.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary vsli:raw="Gets or sets the name of the namespace.">Ruft den Namen des Namespaces ab oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the namespace.">Der Name des Namespaces.</returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Comments&quot; /&gt; collection is accessed.">Ein Ereignis, das beim ersten Zugriff auf die <see cref="P:System.CodeDom.CodeNamespace.Comments" />-Auflistung ausgelöst wird.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Imports&quot; /&gt; collection is accessed.">Ein Ereignis, das beim ersten Zugriff auf die <see cref="P:System.CodeDom.CodeNamespace.Imports" />-Auflistung ausgelöst wird.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Types&quot; /&gt; collection is accessed.">Ein Ereignis, das beim ersten Zugriff auf die <see cref="P:System.CodeDom.CodeNamespace.Types" />-Auflistung ausgelöst wird.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary vsli:raw="Gets the collection of types that the namespace contains.">Ruft die Auflistung der im Namespace enthaltenen Typen ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; that indicates the types contained in the namespace.">Eine <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />, die die im Namespace enthaltenen Typen angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeNamespace" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeNamespaceCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeNamespaceCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeNamespace" />-Objekten enthält.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects with which to initialize the collection.">Ein Array von <see cref="T:System.CodeDom.CodeNamespace" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Eines oder mehrere Objekte im Array sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class that contains the elements of the specified source collection.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeNamespaceCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; with which to initialize the collection.">Eine <see cref="T:System.CodeDom.CodeNamespaceCollection" />, mit der die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object to the collection.">Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeNamespace" />-Objekt hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to add.">Das hinzuzufügende <see cref="T:System.CodeDom.CodeNamespace" />.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; array to the end of the collection.">Kopiert die Elemente des angegebenen <see cref="T:System.CodeDom.CodeNamespace" />-Arrays an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; that contains the objects to add to the collection.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeNamespace" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; object to the end of the collection.">Fügt den Inhalt des angegebenen <see cref="T:System.CodeDom.CodeNamespaceCollection" />-Objekts am Ende der Auflistung hinzu.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; that contains the objects to add to the collection.">Eine <see cref="T:System.CodeDom.CodeNamespaceCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object.">Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeNamespace" />-Objekt enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to search for in the collection.">Das <see cref="T:System.CodeDom.CodeNamespace" />, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="T:System.CodeDom.CodeNamespace" /> in der Auflistung enthalten ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">Kopiert die Auflistungsobjekte in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Das Zielarray ist mehrdimensional.  

oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeNamespaceCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt;, if it exists in the collection.">Ruft den Index des angegebenen <see cref="T:System.CodeDom.CodeNamespace" />-Objekts in der <see cref="T:System.CodeDom.CodeNamespaceCollection" /> ab, sofern dieses in der Auflistung vorhanden ist.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to locate.">Die zu suchende <see cref="T:System.CodeDom.CodeNamespace" />.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt;, if it is found, in the collection; otherwise, -1.">Der Index des angegebenen <see cref="T:System.CodeDom.CodeNamespace" />, wenn dieser in der Auflistung gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object into the collection at the specified index.">Fügt das angegebene <see cref="T:System.CodeDom.CodeNamespace" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index where the new item should be inserted.">Der nullbasierte Index, an dem das neue Element eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to insert.">Der einzufügende <see cref="T:System.CodeDom.CodeNamespace" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; object at the specified index in the collection.">Ruft das <see cref="T:System.CodeDom.CodeNamespaceCollection" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; at each valid index.">Eine <see cref="T:System.CodeDom.CodeNamespace" />-Klasse an jedem gültigen Index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object from the collection.">Entfernt das angegebene <see cref="T:System.CodeDom.CodeNamespace" />-Objekt aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to remove from the collection.">Die aus der Auflistung zu entfernende <see cref="T:System.CodeDom.CodeNamespace" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary vsli:raw="Represents a namespace import directive that indicates a namespace to use.">Stellt eine Direktive für den Namespaceimport dar, die einen zu verwendenden Namespace angibt.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeNamespaceImport" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; class using the specified namespace to import.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeNamespaceImport" />-Klasse unter Verwendung des angegebenen Namespaces, der importiert werden soll.</summary>
      <param name="nameSpace" vsli:raw="The name of the namespace to import.">Der Name des zu importierenden Namespaces.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary vsli:raw="Gets or sets the line and file the statement occurs on.">Ruft die Zeile und Datei ab, in der die Anweisung auftritt, oder legt diese fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; that indicates the context of the statement.">Ein <see cref="T:System.CodeDom.CodeLinePragma" />, das den Kontext der Anweisung angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary vsli:raw="Gets or sets the namespace to import.">Ruft den zu importierenden Namespace ab oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the namespace to import.">Der Name des zu importierenden Namespaces.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeNamespaceImport" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImportCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object to the collection.">Fügt der Auflistung ein <see cref="T:System.CodeDom.CodeNamespaceImport" />-Objekt hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object to add to the collection.">Das <see cref="T:System.CodeDom.CodeNamespaceImport" />-Objekt, das zur Auflistung hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary vsli:raw="Adds a set of &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; objects to the collection.">Fügt der Auflistung eine Gruppe von <see cref="T:System.CodeDom.CodeNamespaceImport" />-Objekten hinzu.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; that contains the objects to add to the collection.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeNamespaceImport" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary vsli:raw="Clears the collection of members.">Löscht die Auflistung der Member.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary vsli:raw="Gets the number of namespaces in the collection.">Ruft die Anzahl der Namespaces in der Auflistung ab.</summary>
      <returns vsli:raw="The number of namespaces in the collection.">Die Anzahl von Namespaces in der Auflistung.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that enumerates the collection members.">Ruft einen Enumerator ab, der die Member der Auflistung aufzählt.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that indicates the collection members.">Ein <see cref="T:System.Collections.IEnumerator" />, der die Auflistungsmember angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object at the specified index in the collection.">Ruft das <see cref="T:System.CodeDom.CodeNamespaceImport" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object at each valid index.">Ein <see cref="T:System.CodeDom.CodeNamespaceImport" />-Objekt an jedem gültigen Index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Kopiert die Elemente der <see cref="T:System.Collections.ICollection" /> in ein <see cref="T:System.Array" />, beginnend bei einem bestimmten <see cref="T:System.Array" />-Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der <see cref="T:System.Collections.ICollection" /> kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ruft die Anzahl der Elemente ab, die in <see cref="T:System.Collections.ICollection" /> enthalten sind.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Die Anzahl der Elemente, die in <see cref="T:System.Collections.ICollection" /> enthalten sind.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Ruft einen Wert ab, der angibt, ob der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;. This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Zugriff auf das <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />. Diese Eigenschaft gibt immer <see langword="false" /> zurück.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ruft ein Objekt ab, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  This property always returns &lt;see langword=&quot;null&quot; /&gt;.">Ein Objekt, mit dem der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.  Diese Eigenschaft gibt immer <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through a collection.">Gibt einen Enumerator zurück, der eine Auflistung durchlaufen kann.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Ein <see cref="T:System.Collections.IEnumerator" />, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an object to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Fügt der <see cref="T:System.Collections.IList" /> ein Objekt hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Das <see cref="T:System.Object" />, das in <see cref="T:System.Collections.IList" /> eingefügt werden soll.</param>
      <returns vsli:raw="The position at which the new element was inserted.">Die Position, an der das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Entfernt alle Elemente aus <see cref="T:System.Collections.IList" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; contains a specific value.">Ermittelt, ob die <see cref="T:System.Collections.IList" /> einen bestimmten Wert enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Das <see cref="T:System.Object" />, das in der <see cref="T:System.Collections.IList" /> gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Wert in der Liste vorhanden ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Bestimmt den Index eines bestimmten Elements in der <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Das <see cref="T:System.Object" />, das in der <see cref="T:System.Collections.IList" /> gesucht werden soll.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if it is found in the list; otherwise, -1.">Der Index von <paramref name="value" />, wenn das Element in der Liste gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; at the specified position.">Fügt ein Element an der angegebenen Position in die <see cref="T:System.Collections.IList" /> ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Der nullbasierte Index, an dem <paramref name="value" /> eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Die <see cref="T:System.Object" />, die in die <see cref="T:System.Collections.IList" /> eingefügt werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IList" /> eine feste Größe aufweist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.IList" /> eine feste Größe aufweist, andernfalls <see langword="false" />.  Diese Eigenschaft gibt immer <see langword="false" /> zurück.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only.">Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IList" /> schreibgeschützt ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.Collections.IList" /> schreibgeschützt ist, andernfalls <see langword="false" />.  Diese Eigenschaft gibt immer <see langword="false" /> zurück.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Ruft das Element am angegebenen Index ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">Der nullbasierte Index des Elements, das abgerufen oder festgelegt werden soll.</param>
      <returns vsli:raw="The element at the specified index.">Das Element am angegebenen Index.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Entfernt das erste Vorkommen eines angegebenen Objekts aus der <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Der <see cref="T:System.Object" />, der aus der <see cref="T:System.Collections.IList" /> entfernt werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Entfernt das Element am angegebenen Index aus der <see cref="T:System.Collections.IList" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">Der nullbasierte Index des zu entfernenden Elements.</param>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary vsli:raw="Provides a common base class for most Code Document Object Model (CodeDOM) objects.">Stellt eine allgemeine Basisklasse für die meisten CodeDOM-Objekte (Code Document Object Model) bereit.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeObject" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary vsli:raw="Gets the user-definable data for the current object.">Ruft die benutzerdefinierbaren Daten für das aktuelle Objekt ab.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing user data for the current object.">Ein <see cref="T:System.Collections.IDictionary" />, das Benutzerdaten für das aktuelle Objekt enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary vsli:raw="Represents an expression that creates a new instance of a type.">Stellt einen Ausdruck dar, der eine neue Instanz eines Typs erstellt.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeObjectCreateExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeObjectCreateExpression" />-Klasse unter Verwendung des angegebenen Typs und der angegebenen Parameter.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the object to create.">Ein <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp des zu erstellenden Objekts angibt.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">Ein Array von <see cref="T:System.CodeDom.CodeExpression" />-Objekten, das die Parameter angibt, die beim Erstellen des Objekts verwendet werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeObjectCreateExpression" />-Klasse unter Verwendung des angegebenen Typs und der angegebenen Parameter.</summary>
      <param name="createType" vsli:raw="The name of the data type of object to create.">Der Name des Datentyps für das zu erstellende Objekt.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">Ein Array von <see cref="T:System.CodeDom.CodeExpression" />-Objekten, das die Parameter angibt, die beim Erstellen des Objekts verwendet werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeObjectCreateExpression" />-Klasse unter Verwendung des angegebenen Typs und der angegebenen Parameter.</summary>
      <param name="createType" vsli:raw="The data type of the object to create.">Der Datentyp des zu erstellenden Objekts.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">Ein Array von <see cref="T:System.CodeDom.CodeExpression" />-Objekten, das die Parameter angibt, die beim Erstellen des Objekts verwendet werden sollen.</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary vsli:raw="Gets or sets the data type of the object to create.">Ruft den Datentyp des zu erstellenden Objekts ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the data type of the object to create.">Ein Verweis des Typs <see cref="T:System.CodeDom.CodeTypeReference" /> auf den Datentyp des zu erstellenden Objekts.</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary vsli:raw="Gets or sets the parameters to use in creating the object.">Ruft die für die Objekterstellung zu verwendenden Parameter ab oder legt diese fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the parameters to use when creating the object.">Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />, die die Parameter angibt, die beim Erstellen des Objekts verwendet werden sollen.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary vsli:raw="Represents a parameter declaration for a method, property, or constructor.">Stellt eine Parameterdeklaration für eine Methode, eine Eigenschaft oder einen Konstruktor dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Klasse unter Verwendung des angegebenen Parametertyps und -namens.</summary>
      <param name="type" vsli:raw="An object that indicates the type of the parameter to declare.">Ein Objekt, das den Typ des zu deklarierenden Parameters angibt.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">Der Name des zu deklarierenden Parameters.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Klasse unter Verwendung des angegebenen Parametertyps und -namens.</summary>
      <param name="type" vsli:raw="The type of the parameter to declare.">Der Typ des zu deklarierenden Parameters.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">Der Name des zu deklarierenden Parameters.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Klasse unter Verwendung des angegebenen Parametertyps und -namens.</summary>
      <param name="type" vsli:raw="The type of the parameter to declare.">Der Typ des zu deklarierenden Parameters.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">Der Name des zu deklarierenden Parameters.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary vsli:raw="Gets or sets the custom attributes for the parameter declaration.">Ruft die benutzerdefinierten Attribute für die Parameterdeklaration ab oder legt diese fest.</summary>
      <returns vsli:raw="An object that indicates the custom attributes.">Ein Objekt, das die benutzerdefinierten Attribute angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary vsli:raw="Gets or sets the direction of the field.">Ruft die Richtung des Felds ab oder legt diese fest.</summary>
      <returns vsli:raw="An object that indicates the direction of the field.">Ein Objekt, das die Richtung des Felds angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary vsli:raw="Gets or sets the name of the parameter.">Ruft den Namen des Parameters ab oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the parameter.">Der Name des Parameters.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary vsli:raw="Gets or sets the type of the parameter.">Ruft den Typ des Parameters ab oder legt diesen fest.</summary>
      <returns vsli:raw="The type of the parameter.">Der Typ des Parameters.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Objekten enthält.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects with which to initialize the collection.">Ein Array von <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="one or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Eines oder mehrere Objekte im Array sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; with which to initialize the collection.">Eine <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, mit der die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to the collection.">Fügt der Auflistung den angegebenen <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to add.">Das hinzuzufügende <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">Kopiert die Elemente des angegebenen Arrays an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; containing the objects to add to the collection.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; to the end of the collection.">Fügt den Inhalt einer anderen <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> am Ende der Auflistung hinzu.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; containing the objects to add to the collection.">Eine <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt;.">Ruft einen Wert ab, der angibt, ob die Auflistung die angegebene <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> enthält.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to search for in the collection.">Eine <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />, die in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Kopiert die Auflistungsobjekte in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Das Zielarray ist mehrdimensional.  

oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt;, if it exists in the collection.">Ruft den Index in der Auflistung der angegebenen <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> ab, sofern sie in der Auflistung vorhanden ist.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to locate in the collection.">Die <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />, die in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">Der Index in der Auflistung des angegebenen Objekts, sofern gefunden, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; into the collection at the specified index.">Fügt die angegebene <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Klasse am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Der nullbasierte Index, an dem das angegebene Objekt eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to insert.">Der einzufügende <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; at the specified index in the collection.">Ruft eine <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> am angegebenen Index in der Auflistung ab oder legt diese fest.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; at each valid index.">Eine <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Klasse an jedem gültigen Index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; from the collection.">Entfernt den angegebenen <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to remove from the collection.">Die aus der Auflistung zu entfernende <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary vsli:raw="Represents a primitive data type value.">Stellt den Wert eines primitiven Datentyps dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePrimitiveExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodePrimitiveExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePrimitiveExpression&quot; /&gt; class using the specified object.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodePrimitiveExpression" />-Klasse unter Verwendung des angegebenen Objekts.</summary>
      <param name="value" vsli:raw="The object to represent.">Das darzustellende Objekt.</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary vsli:raw="Gets or sets the primitive data type to represent.">Ruft den darzustellenden primitiven Datentyp ab oder legt diesen fest.</summary>
      <returns vsli:raw="The primitive data type instance to represent the value of.">Die Instanz des primitiven Datentyps, dessen Wert dargestellt werden soll.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary vsli:raw="Represents a reference to the value of a property.">Stellt einen Verweis auf den Wert einer Eigenschaft dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertyReferenceExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodePropertyReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertyReferenceExpression&quot; /&gt; class using the specified target object and property name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodePropertyReferenceExpression" />-Klasse unter Verwendung des angegebenen Zielobjekts und Eigenschaftennamens.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the property to reference.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt mit der Eigenschaft angibt, auf die verwiesen werden soll.</param>
      <param name="propertyName" vsli:raw="The name of the property to reference.">Der Name der Eigenschaft, auf die verwiesen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary vsli:raw="Gets or sets the name of the property to reference.">Ruft den Namen der Eigenschaft ab, auf die verwiesen werden soll, oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the property to reference.">Der Name der Eigenschaft, auf die verwiesen werden soll.</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the property to reference.">Ruft das Objekt mit der Eigenschaft ab, auf die verwiesen werden soll, oder legt dieses fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the property to reference.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt mit der Eigenschaft angibt, auf die verwiesen werden soll.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary vsli:raw="Represents the value argument of a property set method call within a property set method.">Stellt das Wertargument eines Methodenaufrufs für ein Eigenschaftenset in einer Methode für Eigenschaftensets dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertySetValueReferenceExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary vsli:raw="Specifies the name and mode for a code region.">Gibt den Namen und den Modus für einen Codebereich an.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionDirective&quot; /&gt; class with default values.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeRegionDirective" />-Klasse mit Standardwerten.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionDirective&quot; /&gt; class, specifying its mode and name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeRegionDirective" />-Klasse und gibt deren Namen und Modus an.</summary>
      <param name="regionMode" vsli:raw="One of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionMode&quot; /&gt; values.">Einer der <see cref="T:System.CodeDom.CodeRegionMode" />-Werte.</param>
      <param name="regionText" vsli:raw="The name for the region.">Der Name für den Bereich.</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary vsli:raw="Gets or sets the mode for the region directive.">Ruft den Modus für die Bereichsdirektive ab oder legt diesen fest.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionMode&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.CodeDom.CodeRegionMode.None&quot; /&gt;.">Einer der <see cref="T:System.CodeDom.CodeRegionMode" />-Werte. Die Standardeinstellung ist <see cref="F:System.CodeDom.CodeRegionMode.None" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary vsli:raw="Gets or sets the name of the region.">Ruft den Namen des Bereichs ab oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the region.">Der Name der Region.</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary vsli:raw="Specifies the start or end of a code region.">Gibt den Anfang oder das Ende eines Codebereichs an.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary vsli:raw="End of the region.">Ende des Bereichs.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary vsli:raw="Not used.">Nicht verwendet.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary vsli:raw="Start of the region.">Anfang des Bereichs.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary vsli:raw="Represents a statement that removes an event handler.">Stellt eine Anweisung dar, die einen Ereignishandler entfernt.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeRemoveEventStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class with the specified event and event handler.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeRemoveEventStatement" />-Klasse mit dem angegebenen Ereignis und Ereignishandler.</summary>
      <param name="eventRef" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to detach the event handler from.">Eine <see cref="T:System.CodeDom.CodeEventReferenceExpression" />, die das Ereignis angibt, von dem der Ereignishandler getrennt werden soll.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den zu entfernenden Ereignishandler angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class using the specified target object, event name, and event handler.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeRemoveEventStatement" />-Klasse unter Verwendung des angegebenen Zielobjekts, des Ereignisnamens und des Ereignishandlers.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt angibt, in dem das Ereignis enthalten ist.</param>
      <param name="eventName" vsli:raw="The name of the event.">Der Name des Ereignisses.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den zu entfernenden Ereignishandler angibt.</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary vsli:raw="Gets or sets the event to remove a listener from.">Ruft das Ereignis ab, von dem ein Listener entfernt werden soll, oder legt dieses fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to remove a listener from.">Eine <see cref="T:System.CodeDom.CodeEventReferenceExpression" />, die das Ereignis angibt, von dem ein Listener entfernt werden soll.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary vsli:raw="Gets or sets the event handler to remove.">Ruft den zu entfernenden Ereignishandler ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den zu entfernenden Ereignishandler angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary vsli:raw="Represents a literal code fragment that can be compiled.">Stellt ein literales Codefragment dar, das kompiliert werden kann.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetCompileUnit&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetCompileUnit&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />-Klasse.</summary>
      <param name="value" vsli:raw="The literal code fragment to represent.">Das darzustellende literale Codefragment.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary vsli:raw="Gets or sets the line and file information about where the code is located in a source code document.">Ruft die Zeilen- und Dateiinformationen über die Position von Code in einem Quellcodedokument ab oder legt diese fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; that indicates the position of the code fragment.">Ein <see cref="T:System.CodeDom.CodeLinePragma" />, das die Position des Codefragments angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary vsli:raw="Gets or sets the literal code fragment to represent.">Ruft das darzustellende literale Codefragment ab oder legt dieses fest.</summary>
      <returns vsli:raw="The literal code fragment.">Das literale Codefragment.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary vsli:raw="Represents a literal expression.">Stellt einen literalen Ausdruck dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeSnippetExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetExpression&quot; /&gt; class using the specified literal expression.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeSnippetExpression" />-Klasse unter Verwendung des angegebenen literalen Ausdrucks.</summary>
      <param name="value" vsli:raw="The literal expression to represent.">Der darzustellende literale Ausdruck.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary vsli:raw="Gets or sets the literal string of code.">Ruft das Zeichenfolgenliteral von Code ab oder legt dieses fest.</summary>
      <returns vsli:raw="The literal string.">Das Zeichenfolgenliteral.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary vsli:raw="Represents a statement using a literal code fragment.">Stellt eine Anweisung mit einem literalen Codefragment dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetStatement&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeSnippetStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetStatement&quot; /&gt; class using the specified code fragment.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeSnippetStatement" />-Klasse unter Verwendung des angegebenen Codefragments.</summary>
      <param name="value" vsli:raw="The literal code fragment of the statement to represent.">Das literale Codefragment der darzustellenden Anweisung.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary vsli:raw="Gets or sets the literal code fragment statement.">Ruft das literale Codefragment der Anweisung ab oder legt dieses fest.</summary>
      <returns vsli:raw="The literal code fragment statement.">Das literale Codefragment der Anweisung.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary vsli:raw="Represents a member of a type using a literal code fragment.">Stellt mithilfe eines literalen Codefragments einen Member eines Typs dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetTypeMember&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeSnippetTypeMember" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetTypeMember&quot; /&gt; class using the specified text.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeSnippetTypeMember" />-Klasse unter Verwendung des angegebenen Textes.</summary>
      <param name="text" vsli:raw="The literal code fragment for the type member.">Das literale Codefragment für den Typmember.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary vsli:raw="Gets or sets the literal code fragment for the type member.">Ruft das literale Codefragment für den Typmember ab oder legt dieses fest.</summary>
      <returns vsli:raw="The literal code fragment for the type member.">Das literale Codefragment für den Typmember.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary vsli:raw="Represents the &lt;see langword=&quot;abstract&quot; /&gt; base class from which all code statements derive.">Stellt die <see langword="abstract" />-Basisklasse dar, von der alle Codeanweisungen abgeleitet werden.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeStatement" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object that contains end directives.">Ruft ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt ab, das Enddirektiven enthält.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt, das Enddirektiven enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary vsli:raw="Gets or sets the line on which the code statement occurs.">Ruft die Zeile ab, in der die Codeanweisung auftritt, oder legt diese fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; object that indicates the context of the code statement.">Ein <see cref="T:System.CodeDom.CodeLinePragma" />-Objekt, das den Kontext der Codeanweisung angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object that contains start directives.">Ruft ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt ab, das Startdirektiven enthält.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt, das Startdirektiven enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeStatement" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeStatementCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeStatementCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeStatement" />-Objekten enthält.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects with which to initialize the collection.">Ein Array von <see cref="T:System.CodeDom.CodeStatement" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class that contains the elements of the specified source collection.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeStatementCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object with which to initialize the collection.">Ein <see cref="T:System.CodeDom.CodeStatementCollection" />-Objekt, mit dem die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to the collection.">Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeExpression" />-Objekt hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to add.">Das hinzuzufügende <see cref="T:System.CodeDom.CodeExpression" />-Objekt.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to the collection.">Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeStatement" />-Objekt hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to add.">Das hinzuzufügende <see cref="T:System.CodeDom.CodeStatement" />-Objekt.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Adds a set of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects to the collection.">Fügt der Auflistung eine Gruppe von <see cref="T:System.CodeDom.CodeStatement" />-Objekten hinzu.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects to add to the collection.">Ein Array von <see cref="T:System.CodeDom.CodeStatement" />-Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object to the end of the collection.">Fügt den Inhalt eines anderen <see cref="T:System.CodeDom.CodeStatementCollection" />-Objekts am Ende der Auflistung hinzu.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object that contains the objects to add to the collection.">Ein <see cref="T:System.CodeDom.CodeStatementCollection" />-Objekt, das die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object.">Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeStatement" />-Objekt enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to search for in the collection.">Das <see cref="T:System.CodeDom.CodeStatement" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">Kopiert alle Elemente des <see cref="T:System.CodeDom.CodeStatementCollection" />-Objekts in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Das Zielarray ist mehrdimensional.  

oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeStatementCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt;, if it exists in the collection.">Ruft den Index des angegebenen <see cref="T:System.CodeDom.CodeStatement" />-Objekts in der <see cref="T:System.CodeDom.CodeStatementCollection" /> ab, sofern dieses in der Auflistung vorhanden ist.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to locate in the collection.">Die <see cref="T:System.CodeDom.CodeStatement" />, die in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="The index of the specified object, if it is found, in the collection; otherwise, -1.">Der Index der angegebenen Objekts, wenn sich dieses in der Auflistung befindet, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object into the collection at the specified index.">Fügt das angegebene <see cref="T:System.CodeDom.CodeStatement" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Der nullbasierte Index, an dem das angegebene Objekt eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to insert.">Das einzufügende <see cref="T:System.CodeDom.CodeStatement" />-Objekt.</param>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object at the specified index in the collection.">Ruft das <see cref="T:System.CodeDom.CodeStatement" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; at each valid index.">Eine <see cref="T:System.CodeDom.CodeStatement" />-Klasse an jedem gültigen Index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object from the collection.">Entfernt das angegebene <see cref="T:System.CodeDom.CodeStatement" />-Objekt aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to remove from the collection.">Die aus der Auflistung zu entfernende <see cref="T:System.CodeDom.CodeStatement" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary vsli:raw="Represents a reference to the current local class instance.">Stellt einen Verweis auf die aktuelle lokale Instanz der Klasse dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThisReferenceExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeThisReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary vsli:raw="Represents a statement that throws an exception.">Stellt eine Anweisung dar, die eine Ausnahme auslöst.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThrowExceptionStatement&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeThrowExceptionStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThrowExceptionStatement&quot; /&gt; class with the specified exception type instance.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeThrowExceptionStatement" />-Klasse unter Verwendung der angegebenen Ausnahmetypinstanz.</summary>
      <param name="toThrow" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the exception to throw.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die die auszulösende Ausnahme angibt.</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary vsli:raw="Gets or sets the exception to throw.">Ruft die auszulösende Ausnahme ab oder legt diese fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; representing an instance of the exception to throw.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die eine Instanz der auszulösenden Ausnahme darstellt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;try&quot; /&gt; block with any number of &lt;see langword=&quot;catch&quot; /&gt; clauses and, optionally, a &lt;see langword=&quot;finally&quot; /&gt; block.">Stellt einen <see langword="try" />-Block mit einer beliebigen Anzahl von <see langword="catch" />-Klauseln und einem optionalen <see langword="finally" />-Block dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class using the specified statements for try and catch clauses.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />-Klasse unter Verwendung der angegebenen try-Anweisungen und catch-Abschnitte.</summary>
      <param name="tryStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the statements to try.">Ein Array von <see cref="T:System.CodeDom.CodeStatement" />-Objekten, die die try-Anweisungen angeben.</param>
      <param name="catchClauses" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects that indicate the clauses to catch.">Ein Array von <see cref="T:System.CodeDom.CodeCatchClause" />-Objekten, die die catch-Abschnitte angeben.</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class using the specified statements for try, catch clauses, and finally statements.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />-Klasse unter Verwendung der angegebenen try-Anweisungen, catch-Abschnitte und finally-Anweisungen.</summary>
      <param name="tryStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the statements to try.">Ein Array von <see cref="T:System.CodeDom.CodeStatement" />-Objekten, die die try-Anweisungen angeben.</param>
      <param name="catchClauses" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects that indicate the clauses to catch.">Ein Array von <see cref="T:System.CodeDom.CodeCatchClause" />-Objekten, die die catch-Abschnitte angeben.</param>
      <param name="finallyStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the finally statements to use.">Ein Array von <see cref="T:System.CodeDom.CodeStatement" />-Objekten, die die zu verwendenden finally-Anweisungen angeben.</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary vsli:raw="Gets the catch clauses to use.">Ruft die zu verwendenden catch-Klauseln ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; that indicates the catch clauses to use.">Eine <see cref="T:System.CodeDom.CodeCatchClauseCollection" />, die die zu verwendenden catch-Abschnitte angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary vsli:raw="Gets the finally statements to use.">Ruft die zu verwendenden finally-Anweisungen ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the finally statements.">Eine <see cref="T:System.CodeDom.CodeStatementCollection" />, die die finally-Anweisungen angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary vsli:raw="Gets the statements to try.">Ruft die try-Anweisungen ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the statements to try.">Eine <see cref="T:System.CodeDom.CodeStatementCollection" />, die die try-Anweisungen angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary vsli:raw="Represents a static constructor for a class.">Stellt einen statischen Konstruktor für eine Klasse dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeConstructor&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeConstructor" />-Klasse.</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary vsli:raw="Represents a type declaration for a class, structure, interface, or enumeration.">Stellt eine Typdeklaration für eine Klasse, Struktur, Schnittstelle oder Enumeration dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; class with the specified name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Klasse mit dem angegebenen Namen.</summary>
      <param name="name" vsli:raw="The name for the new type.">Der Name für den neuen Typ.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary vsli:raw="Gets the base types of the type.">Ruft die Basistypen des Typs ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; object that indicates the base types of the type.">Ein <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />-Objekt, das die Basistypen des Typs angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary vsli:raw="Gets or sets a value indicating whether the type is a class or reference type.">Ruft einen Wert ab, der angibt, ob es sich bei dem Typ um eine Klasse oder einen Verweistyp handelt, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a class or reference type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Typ eine Klasse oder ein Verweistyp ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary vsli:raw="Gets or sets a value indicating whether the type is an enumeration.">Ruft einen Wert ab, der angibt, ob der Typ eine Enumeration ist, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an enumeration; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Typ eine Enumeration ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary vsli:raw="Gets or sets a value indicating whether the type is an interface.">Ruft einen Wert ab, der angibt, ob der Typ eine Schnittstelle ist, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Typ eine Schnittstelle ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary vsli:raw="Gets or sets a value indicating whether the type declaration is complete or partial.">Ruft einen Wert ab, der angibt, ob die Typdeklaration vollständig oder partiell ist, oder legt diesen Wert fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class or structure declaration is a partial representation of the implementation; &lt;see langword=&quot;false&quot; /&gt; if the declaration is a complete implementation of the class or structure. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Klassen- oder Strukturdeklaration eine partielle Repräsentation der Implementierung darstellt, und <see langword="false" />, wenn die Deklaration eine vollständige Implementierung der Klasse oder der Struktur ist. Die Standardeinstellung ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary vsli:raw="Gets or sets a value indicating whether the type is a value type (struct).">Ruft einen Wert ab, der angibt, ob es sich bei dem Typ um einen Werttyp (Struktur) handelt, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a value type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Typ ein Werttyp ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary vsli:raw="Gets the collection of class members for the represented type.">Ruft die Auflistung der Klassenmember für den dargestellten Typ ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; object that indicates the class members.">Ein <see cref="T:System.CodeDom.CodeTypeMemberCollection" />-Objekt, das die Klassenmember angibt.</returns>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.CodeDom.CodeTypeDeclaration.BaseTypes&quot; /&gt; collection is accessed for the first time.">Erfolgt beim erstmaligen Zugriff auf die <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />-Auflistung.</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.CodeDom.CodeTypeDeclaration.Members&quot; /&gt; collection is accessed for the first time.">Erfolgt beim erstmaligen Zugriff auf die <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" />-Auflistung.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary vsli:raw="Gets or sets the attributes of the type.">Ruft die Attribute des Typs ab oder legt diese fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.TypeAttributes&quot; /&gt; object that indicates the attributes of the type.">Ein <see cref="T:System.Reflection.TypeAttributes" />-Objekt, das die Attribute des Typs angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary vsli:raw="Gets the type parameters for the type declaration.">Ruft die Typparameter für die Typdeklaration ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; that contains the type parameters for the type declaration.">Eine <see cref="T:System.CodeDom.CodeTypeParameterCollection" />-Klasse, die die Typparameter für die Typdeklaration enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekten enthält.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects with which to initialize the collection.">Ein Array von <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class that contains the elements of the specified source collection.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object with which to initialize the collection.">Ein <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />-Objekt, mit dem die Auflistung initialisiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to the collection.">Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekt hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to add.">Das hinzuzufügende <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekt.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">Kopiert die Elemente des angegebenen Arrays an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; that contains the objects to add to the collection.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeTypeDeclaration" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object to the end of the collection.">Fügt den Inhalt eines anderen <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />-Objekts am Ende der Auflistung hinzu.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object that contains the objects to add to the collection.">Ein <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />-Objekt, das die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object.">Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekt enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to search for in the collection.">Das <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary vsli:raw="Copies the elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">Kopiert die Elemente im <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />-Objekt in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Das Zielarray ist mehrdimensional.  

oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt;, if it exists in the collection.">Ruft den Index des angegebenen <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekts in der <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> ab, sofern dieses in der Auflistung vorhanden ist.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; to locate in the collection.">Die <see cref="T:System.CodeDom.CodeTypeDeclaration" />, die in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="The index of the specified object, if it is found, in the collection; otherwise, -1.">Der Index der angegebenen Objekts, wenn sich dieses in der Auflistung befindet, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object into the collection at the specified index.">Fügt das angegebene <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Der nullbasierte Index, an dem das angegebene Objekt eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to insert.">Das einzufügende <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekt.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object at the specified index in the collection.">Ruft das <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; at each valid index.">Eine <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Klasse an jedem gültigen Index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object from the collection.">Entfernt das angegebene <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekt aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; to remove from the collection.">Die aus der Auflistung zu entfernende <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary vsli:raw="Represents a delegate declaration.">Stellt eine Delegatdeklaration dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDelegate&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeDelegate" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDelegate&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeDelegate" />-Klasse.</summary>
      <param name="name" vsli:raw="The name of the delegate.">Der Name des Delegaten.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary vsli:raw="Gets the parameters of the delegate.">Ruft die Parameter des Delegaten ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the parameters of the delegate.">Eine <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, die die Parameter für den Delegaten angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary vsli:raw="Gets or sets the return type of the delegate.">Ruft den Rückgabetyp des Delegaten ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the return type of the delegate.">Ein <see cref="T:System.CodeDom.CodeTypeReference" />, der den Rückgabetyp des Delegaten angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary vsli:raw="Provides a base class for a member of a type. Type members include fields, methods, properties, constructors and nested types.">Stellt eine Basisklasse für einen Member eines Typs bereit. Typmember sind u. a. Felder, Methoden, Eigenschaften, Konstruktoren und geschachtelte Typen.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeMember" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary vsli:raw="Gets or sets the attributes of the member.">Ruft die Attribute des Members ab oder legt diese fest.</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.CodeDom.MemberAttributes&quot; /&gt; values used to indicate the attributes of the member. The default value is &lt;see cref=&quot;F:System.CodeDom.MemberAttributes.Private&quot; /&gt; | &lt;see cref=&quot;F:System.CodeDom.MemberAttributes.Final&quot; /&gt;.">Mit einer bitweisen Kombination der <see cref="T:System.CodeDom.MemberAttributes" />-Werte werden die Attribute des Members angegeben. Der Standardwert ist <see cref="F:System.CodeDom.MemberAttributes.Private" /> | <see cref="F:System.CodeDom.MemberAttributes.Final" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary vsli:raw="Gets the collection of comments for the type member.">Ruft die Auflistung der Kommentare für den Typmember ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that indicates the comments for the member.">Eine <see cref="T:System.CodeDom.CodeCommentStatementCollection" />-Klasse, die die Kommentare für den Member angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary vsli:raw="Gets or sets the custom attributes of the member.">Ruft die benutzerdefinierten Attribute des Members ab oder legt diese fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes of the member.">Eine <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />-Klasse, die die benutzerdefinierten Attribute des Members angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary vsli:raw="Gets the end directives for the member.">Ruft die Enddirektiven für den Member ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt, das Enddirektiven enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary vsli:raw="Gets or sets the line on which the type member statement occurs.">Ruft die Zeile ab oder oder legt die Zeile fest, auf der die Typmemberanweisung auftritt.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; object that indicates the location of the type member declaration.">Ein <see cref="T:System.CodeDom.CodeLinePragma" />-Objekt, das die Position der Typmemberdeklaration angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary vsli:raw="Gets or sets the name of the member.">Ruft den Namen des Members ab oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the member.">Der Name des Members.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary vsli:raw="Gets the start directives for the member.">Ruft die Startdirektiven für den Member ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt, das Startdirektiven enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeTypeMember" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeMemberCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeMemberCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeTypeMember" />-Objekten enthält.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects with which to initialize the collection.">Ein Array von <see cref="T:System.CodeDom.CodeTypeMember" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeMemberCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; with which to initialize the collection.">Eine <see cref="T:System.CodeDom.CodeTypeMemberCollection" />, mit der die Auflistung initialisiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; with the specified value to the collection.">Fügt der Auflistung eine <see cref="T:System.CodeDom.CodeTypeMember" /> mit dem angegebenen Wert hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to add.">Das hinzuzufügende <see cref="T:System.CodeDom.CodeTypeMember" />.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; array to the end of the collection.">Kopiert die Elemente des angegebenen <see cref="T:System.CodeDom.CodeTypeMember" />-Arrays an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; containing the objects to add to the collection.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeTypeMember" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; to the end of the collection.">Fügt den Inhalt einer anderen <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> am Ende der Auflistung hinzu.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; containing the objects to add to the collection.">Eine <see cref="T:System.CodeDom.CodeTypeMemberCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt;.">Ruft einen Wert ab, der angibt, ob die Auflistung die angegebene <see cref="T:System.CodeDom.CodeTypeMember" /> enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to search for in the collection.">Das <see cref="T:System.CodeDom.CodeTypeMember" />, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, beginning at the specified index.">Kopiert die Auflistungsobjekte in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Das Zielarray ist mehrdimensional.  

oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt;, if it exists in the collection.">Ruft den Index in der Auflistung der angegebenen <see cref="T:System.CodeDom.CodeTypeMember" /> ab, sofern sie in der Auflistung vorhanden ist.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to locate in the collection.">Die <see cref="T:System.CodeDom.CodeTypeMember" />, die in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">Der Index in der Auflistung des angegebenen Objekts, sofern gefunden, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; into the collection at the specified index.">Fügt die angegebene <see cref="T:System.CodeDom.CodeTypeMember" />-Klasse am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Der nullbasierte Index, an dem das angegebene Objekt eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to insert.">Der einzufügende <see cref="T:System.CodeDom.CodeTypeMember" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; at the specified index in the collection.">Ruft eine <see cref="T:System.CodeDom.CodeTypeMember" /> am angegebenen Index in der Auflistung ab oder legt diese fest.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; at each valid index.">Eine <see cref="T:System.CodeDom.CodeTypeMember" />-Klasse an jedem gültigen Index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Removes a specific &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; from the collection.">Entfernt eine bestimmte <see cref="T:System.CodeDom.CodeTypeMember" />-Klasse aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to remove from the collection.">Die aus der Auflistung zu entfernende <see cref="T:System.CodeDom.CodeTypeMember" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary vsli:raw="Represents a &lt;see langword=&quot;typeof&quot; /&gt; expression, an expression that returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; for a specified type name.">Stellt einen <see langword="typeof" />-Ausdruck dar. Dies ist ein Ausdruck, der einen <see cref="T:System.Type" /> für einen angegebenen Typnamen zurückgibt.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeOfExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeOfExpression" />-Klasse.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type for the &lt;see langword=&quot;typeof&quot; /&gt; expression.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp für den <see langword="typeof" />-Ausdruck angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class using the specified type.">Initialisiert mithilfe des angegebenen Typs eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeOfExpression" />-Klasse.</summary>
      <param name="type" vsli:raw="The name of the data type for the &lt;see langword=&quot;typeof&quot; /&gt; expression.">Der Name des Datentyps für den <see langword="typeof" />-Ausdruck.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class using the specified type.">Initialisiert mithilfe des angegebenen Typs eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeOfExpression" />-Klasse.</summary>
      <param name="type" vsli:raw="The data type of the data type of the &lt;see langword=&quot;typeof&quot; /&gt; expression.">Der Datentyp für den Datentyp des <see langword="typeof" />-Ausdrucks.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary vsli:raw="Gets or sets the data type referenced by the &lt;see langword=&quot;typeof&quot; /&gt; expression.">Ruft den Datentyp ab, auf den mit dem <see langword="typeof" />-Ausdruck verwiesen wird, oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type referenced by the &lt;see langword=&quot;typeof&quot; /&gt; expression. This property will never return &lt;see langword=&quot;null&quot; /&gt;, and defaults to the &lt;see cref=&quot;T:System.Void&quot; /&gt; type.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp angibt, auf den mit dem <see langword="typeof" />-Ausdruck verwiesen wird. Diese Eigenschaft gibt nie <see langword="null" /> zurück, und ihre Standardeinstellung ist der <see cref="T:System.Void" />-Typ.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary vsli:raw="Represents a type parameter of a generic type or method.">Stellt einen Typparameter eines generischen Typs oder einer generischen Methode dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeParameter" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; class with the specified type parameter name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeParameter" />-Klasse mit dem angegebenen Typparameternamen.</summary>
      <param name="name" vsli:raw="The name of the type parameter.">Der Name des Typparameters.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary vsli:raw="Gets the constraints for the type parameter.">Ruft die Einschränkungen für den Typparameter ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; object that contains the constraints for the type parameter.">Ein <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />-Objekt, das die Einschränkungen für den Typparameter enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the type parameter.">Ruft die benutzerdefinierten Attribute des Typparameters ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes of the type parameter. The default is &lt;see langword=&quot;null&quot; /&gt;.">Eine <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />-Klasse, die die benutzerdefinierten Attribute des Typparameters angibt. Die Standardeinstellung ist <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary vsli:raw="Gets or sets a value indicating whether the type parameter has a constructor constraint.">Ruft einen Wert ab, der angibt, ob der Typparameter eine Konstruktoreinschränkung hat, oder legt diesen Wert fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type parameter has a constructor constraint; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Typparameter eine Konstruktoreinschränkung aufweist, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary vsli:raw="Gets or sets the name of the type parameter.">Ruft den Namen des Typparameters ab oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the type parameter. The default is an empty string (&quot;&quot;).">Der Name des Typparameters. Der Standardwert ist eine leere Zeichenfolge ("").</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeTypeParameter" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary vsli:raw="Initializes a new, empty instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class.">Initialisiert eine neue leere Instanz der <see cref="T:System.CodeDom.CodeTypeParameterCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeParameterCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekten enthält.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects with which to initialize the collection.">Ein Array von <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeParameterCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; with which to initialize the collection.">Eine <see cref="T:System.CodeDom.CodeTypeParameterCollection" />, mit der die Auflistung initialisiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection.">Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; to add.">Das hinzuzufügende <see cref="T:System.CodeDom.CodeTypeParameter" />.</param>
      <returns vsli:raw="The zero-based index at which the new element was inserted.">Der nullbasierte Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection using the specified data type name.">Fügt der Auflistung unter Verwendung des angegebenen Datentypnamens das angegebene <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt hinzu.</summary>
      <param name="value" vsli:raw="The name of a data type for which to add the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection.">Der Name des Datentyps, für den der Auflistung das <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; array to the end of the collection.">Kopiert die Elemente des angegebenen <see cref="T:System.CodeDom.CodeTypeParameter" />-Arrays an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; containing the objects to add to the collection.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeTypeParameter" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; to the end of the collection.">Kopiert die Elemente der angegebenen <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; containing the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects to add to the collection.">Eine <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> mit den <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Determines whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object.">Bestimmt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to search for in the collection.">Das <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt in der Auflistung enthalten ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary vsli:raw="Copies the items in the collection to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; at the specified index.">Kopiert die Elemente in der Auflistung in das angegebene eindimensionale <see cref="T:System.Array" />, beginnend beim angegebenen Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; is greater than the available space between the index of the target array specified by &lt;paramref name=&quot;index&quot; /&gt; and the end of the target array.">
        <paramref name="array" /> ist mehrdimensional.  

oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the target array's lowest index.">
        <paramref name="index" /> ist kleiner als der niedrigste Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object, if it exists in the collection.">Ruft den Index in der Auflistung des angegebenen <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekts ab, sofern es in der Auflistung vorhanden ist.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to locate in the collection.">Das <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="The zero-based index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object in the collection if found; otherwise, -1.">Der nullbasierte Index des angegebenen <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekts in der Auflistung, sofern es gefunden wurde, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object into the collection at the specified index.">Fügt das angegebene <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">Der nullbasierte Index, an dem das Element eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to insert.">Das einzufügende <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object at the specified index in the collection.">Ruft das <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The zero-based index of the collection object to access.">Der nullbasierte Index des Auflistungsobjekts, auf das zugegriffen werden soll.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object at the specified index.">Das <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt am angegebenen Index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the valid range of indexes for the collection.">
        <paramref name="index" /> liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object from the collection.">Entfernt das angegebene <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to remove from the collection.">Das <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary vsli:raw="Represents a reference to a type.">Stellt einen Verweis auf einen Typ dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified code type parameter.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse unter Verwendung des angegebenen Codetypparameters.</summary>
      <param name="typeParameter" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; that represents the type of the type parameter.">Ein <see cref="T:System.CodeDom.CodeTypeParameter" />, der den Typ des Typparameters darstellt.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified array type and rank.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse unter Verwendung des angegebenen Arraytyps und -namens.</summary>
      <param name="arrayType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array.">Ein <see cref="T:System.CodeDom.CodeTypeReference" />, der den Typ des Arrays angibt.</param>
      <param name="rank" vsli:raw="The number of dimensions in the array.">Die Anzahl der Dimensionen im Array.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse mit dem angegebenen Typnamen.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">Der Name des Typs, auf den verwiesen werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name and type arguments.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse unter Verwendung des angegebenen Typnamens und Typarguments.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">Der Name des Typs, auf den verwiesen werden soll.</param>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; values.">Ein Array von <see cref="T:System.CodeDom.CodeTypeReference" />-Werten.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name and code type reference option.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse unter Verwendung des angegebenen Typnamens und der angegebenen Codetypverweis-Option.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">Der Name des Typs, auf den verwiesen werden soll.</param>
      <param name="codeTypeReferenceOption" vsli:raw="The code type reference option, one of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">Die Codetypverweis-Option, einer der <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />-Werte.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified array type name and rank.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse unter Verwendung des angegebenen Arraytypnamens und -rangs.</summary>
      <param name="baseType" vsli:raw="The name of the type of the elements of the array.">Der Name des Typs der Arrayelemente.</param>
      <param name="rank" vsli:raw="The number of dimensions of the array.">Die Anzahl der Dimensionen des Arrays.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type.">Initialisiert mithilfe des angegebenen Typs eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to reference.">Das <see cref="T:System.Type" />, auf das verwiesen werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type and code type reference.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse unter Verwendung des angegebenen Typs und des angegebenen Codetypverweises.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to reference.">Das <see cref="T:System.Type" />, auf das verwiesen werden soll.</param>
      <param name="codeTypeReferenceOption" vsli:raw="The code type reference option, one of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">Die Codetypverweis-Option, einer der <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />-Werte.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary vsli:raw="Gets or sets the type of the elements in the array.">Ruft den Typ der Elemente im Array ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array elements.">Ein <see cref="T:System.CodeDom.CodeTypeReference" />, der den Typ der Arrayelemente angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary vsli:raw="Gets or sets the array rank of the array.">Ruft den Arrayrang des Arrays ab oder legt diesen fest.</summary>
      <returns vsli:raw="The number of dimensions of the array.">Die Anzahl der Dimensionen des Arrays.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary vsli:raw="Gets or sets the name of the type being referenced.">Ruft den Namen des Typs ab, auf den verwiesen wird, oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the type being referenced.">Der Name der Typbibliothek, auf die verwiesen wird.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary vsli:raw="Gets or sets the code type reference option.">Ruft die Codetypverweis-Option ab oder legt diese fest.</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">Eine bitweise Kombination der <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />-Werte.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary vsli:raw="Gets the type arguments for the current generic type reference.">Ruft die Typargumente für den aktuellen generischen Typverweis ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the type arguments for the current &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; object.">Eine <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, die die Typargumente für das aktuelle <see cref="T:System.CodeDom.CodeTypeReference" />-Objekt enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeTypeReference" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeTypeReference" />-Objekten enthält.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects with which to initialize the collection.">Ein Array von <see cref="T:System.CodeDom.CodeTypeReference" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class containing the elements of the specified source collection.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; with which to initialize the collection.">Eine <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, mit der die Auflistung initialisiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">Fügt der Auflistung den angegebenen <see cref="T:System.CodeDom.CodeTypeReference" /> hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to add.">Das hinzuzufügende <see cref="T:System.CodeDom.CodeTypeReference" />.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection using the specified data type name.">Fügt der Auflistung unter Verwendung des angegebenen Datentypnamens einen <see cref="T:System.CodeDom.CodeTypeReference" /> hinzu.</summary>
      <param name="value" vsli:raw="The name of a data type for which to add a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">Der Name des Datentyps, für den der Auflistung eine <see cref="T:System.CodeDom.CodeTypeReference" /> hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection using the specified data type.">Fügt der Auflistung unter Verwendung des angegebenen Datentyps einen <see cref="T:System.CodeDom.CodeTypeReference" /> hinzu.</summary>
      <param name="value" vsli:raw="The data type for which to add a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">Der Datentyp, für den der Auflistung eine <see cref="T:System.CodeDom.CodeTypeReference" /> hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; array to the end of the collection.">Kopiert die Elemente des angegebenen <see cref="T:System.CodeDom.CodeTypeReference" />-Arrays an das Ende der Auflistung.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; containing the objects to add to the collection.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeTypeReference" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; to the end of the collection.">Fügt den Inhalt der angegebenen <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> am Ende der Auflistung hinzu.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the objects to add to the collection.">Eine <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Ruft einen Wert ab, der angibt, ob die Auflistung die angegebene <see cref="T:System.CodeDom.CodeTypeReference" /> enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to search for in the collection.">Das <see cref="T:System.CodeDom.CodeTypeReference" />, das in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="T:System.CodeDom.CodeTypeReference" /> in der Auflistung enthalten ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary vsli:raw="Copies the items in the collection to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; at the specified index.">Kopiert die Elemente in der Auflistung in das angegebene eindimensionale <see cref="T:System.Array" />, beginnend beim angegebenen Index.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Der <paramref name="array" />-Parameter ist mehrdimensional.  

oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;, if it exists in the collection.">Ruft den Index in der Auflistung der angegebenen <see cref="T:System.CodeDom.CodeTypeReference" /> ab, sofern sie in der Auflistung vorhanden ist.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to locate in the collection.">Die <see cref="T:System.CodeDom.CodeTypeReference" />, die in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; in the collection if found; otherwise, -1.">Der Index der angegebenen <see cref="T:System.CodeDom.CodeTypeReference" /> in der Auflistung, sofern diese gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Inserts a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; into the collection at the specified index.">Fügt eine <see cref="T:System.CodeDom.CodeTypeReference" /> am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index where the item should be inserted.">Der nullbasierte Index, an dem das Element eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to insert.">Der einzufügende <see cref="T:System.CodeDom.CodeTypeReference" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; at the specified index in the collection.">Ruft eine <see cref="T:System.CodeDom.CodeTypeReference" /> am angegebenen Index in der Auflistung ab oder legt diese fest.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; at each valid index.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse an jedem gültigen Index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; from the collection.">Entfernt den angegebenen <see cref="T:System.CodeDom.CodeTypeReference" /> aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to remove from the collection.">Die aus der Auflistung zu entfernende <see cref="T:System.CodeDom.CodeTypeReference" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary vsli:raw="Represents a reference to a data type.">Stellt einen Verweis auf einen Datentyp dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified type.">Initialisiert mithilfe des angegebenen Typs eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />-Klasse.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type to reference.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp angibt, auf den verwiesen werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified data type name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />-Klasse unter Verwendung des angegebenen Datentypnamens.</summary>
      <param name="type" vsli:raw="The name of the data type to reference.">Der Name des Datentyps, auf den verwiesen werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified data type.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />-Klasse unter Verwendung des angegebenen Datentyps.</summary>
      <param name="type" vsli:raw="An instance of the data type to reference.">Eine Instanz des Datentyps, auf den verwiesen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary vsli:raw="Gets or sets the data type to reference.">Ruft den Datentyp ab, auf den verwiesen werden soll, oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type to reference.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp angibt, auf den verwiesen werden soll.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary vsli:raw="Specifies how the code type reference is to be resolved.">Gibt an, wie der Codetypverweis aufgelöst werden soll.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary vsli:raw="Resolve the type from the type parameter.">Löst den Typ vom Typparameter auf.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary vsli:raw="Resolve the type from the root namespace.">Löst den Typ vom Stammnamespace auf.</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary vsli:raw="Represents a variable declaration.">Stellt eine Variablendeklaration dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified type and name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />-Klasse unter Verwendung des angegebenen Typs und Namens.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the variable.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp der Variablen angibt.</param>
      <param name="name" vsli:raw="The name of the variable.">Der Name der Variablen.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />-Klasse unter Verwendung des angegebenen Datentyps, Variablennamens und Initialisierungsausdrucks.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the variable.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Typ der Variablen angibt.</param>
      <param name="name" vsli:raw="The name of the variable.">Der Name der Variablen.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Initialisierungsausdruck für die Variable angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type name and variable name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />-Klasse unter Verwendung des angegebenen Datentyp- und Variablennamens.</summary>
      <param name="type" vsli:raw="The name of the data type of the variable.">Der Name für den Datentyp der Variablen.</param>
      <param name="name" vsli:raw="The name of the variable.">Der Name der Variablen.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />-Klasse unter Verwendung des angegebenen Datentyps, Variablennamens und Initialisierungsausdrucks.</summary>
      <param name="type" vsli:raw="The name of the data type of the variable.">Der Name für den Datentyp der Variablen.</param>
      <param name="name" vsli:raw="The name of the variable.">Der Name der Variablen.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Initialisierungsausdruck für die Variable angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type and variable name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />-Klasse unter Verwendung des angegebenen Datentyps und Variablennamens.</summary>
      <param name="type" vsli:raw="The data type for the variable.">Der Datentyp für die Variable.</param>
      <param name="name" vsli:raw="The name of the variable.">Der Name der Variablen.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />-Klasse unter Verwendung des angegebenen Datentyps, Variablennamens und Initialisierungsausdrucks.</summary>
      <param name="type" vsli:raw="The data type of the variable.">Der Datentyp der Variable.</param>
      <param name="name" vsli:raw="The name of the variable.">Der Name der Variablen.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Initialisierungsausdruck für die Variable angibt.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary vsli:raw="Gets or sets the initialization expression for the variable.">Ruft den Initialisierungsausdruck für die Variable ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Initialisierungsausdruck für die Variable angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary vsli:raw="Gets or sets the name of the variable.">Ruft den Namen der Variablen ab oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the variable.">Der Name der Variablen.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary vsli:raw="Gets or sets the data type of the variable.">Ruft den Datentyp der Variablen ab oder legt diesen fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the variable.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp der Variablen angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary vsli:raw="Represents a reference to a local variable.">Stellt einen Verweis auf eine lokale Variable dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableReferenceExpression&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableReferenceExpression&quot; /&gt; class using the specified local variable name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableReferenceExpression" />-Klasse unter Verwendung des angegebenen Namens der lokalen Variablen.</summary>
      <param name="variableName" vsli:raw="The name of the local variable to reference.">Der Name der lokalen Variablen, auf die verwiesen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary vsli:raw="Gets or sets the name of the local variable to reference.">Ruft den Namen der lokalen Variablen ab, auf die verwiesen werden soll, oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the local variable to reference.">Der Name der lokalen Variablen, auf die verwiesen werden soll.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary vsli:raw="Provides an example implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; interface.">Stellt eine Beispielimplementierung der <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeCompiler&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CodeCompiler" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary vsli:raw="Gets the command arguments to be passed to the compiler from the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt;.">Ruft die Befehlsargumente vom angegebenen <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> ab, die an den Compiler übergeben werden sollen.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; that indicates the compiler options.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, das die Compileroptionen angibt.</param>
      <returns vsli:raw="The command arguments.">Die Befehlsargumente.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary vsli:raw="Gets the name of the compiler executable.">Ruft den Namen der ausführbaren Compilerdatei ab.</summary>
      <returns vsli:raw="The name of the compiler executable.">Der Name der ausführbaren Compilerdatei.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary vsli:raw="Gets the file name extension to use for source files.">Ruft die für Quelldateien zu verwendende Dateinamenerweiterung ab.</summary>
      <returns vsli:raw="The file name extension to use for source files.">Die für Quelldateien zu verwendende Dateinamenerweiterung.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Compiles the specified compile unit using the specified options, and returns the results from the compilation.">Kompiliert die angegebene Kompilierungseinheit mit den angegebenen Optionen und gibt die Ergebnisse der Kompilierung zurück.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; object that indicates the source to compile.">Eine <see cref="T:System.CodeDom.CodeCompileUnit" />-Objekt, das die Quelle für die Kompilierung angibt.</param>
      <returns vsli:raw="The results of compilation.">Die Ergebnisse der Kompilierung.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles the specified compile units using the specified options, and returns the results from the compilation.">Kompiliert die angegebenen Kompilierungseinheiten mit den angegebenen Optionen und gibt die Ergebnisse der Kompilierung zurück.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="ea" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects that indicates the source to compile.">Ein Array von <see cref="T:System.CodeDom.CodeCompileUnit" />-Objekten, das die Quelle für die Kompilierung angibt.</param>
      <returns vsli:raw="The results of compilation.">Die Ergebnisse der Kompilierung.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;ea&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> ist <see langword="null" />.  

oder - 
<paramref name="ea" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles the specified file using the specified options, and returns the results from the compilation.">Kompiliert die angegebene Datei mit den angegebenen Optionen und gibt die Ergebnisse der Kompilierung zurück.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="fileName" vsli:raw="The file name to compile.">Der Name der zu kompilierenden Datei.</param>
      <returns vsli:raw="The results of compilation.">Die Ergebnisse der Kompilierung.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> ist <see langword="null" />.  

oder - 
<paramref name="fileName" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles the specified files using the specified options, and returns the results from the compilation.">Kompiliert die angegebenen Dateien mit den angegebenen Optionen und gibt die Ergebnisse der Kompilierung zurück.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="fileNames" vsli:raw="An array of strings that indicates the file names of the files to compile.">Ein Array von Zeichenfolgen, das die Dateinamen der zu kompilierenden Dateien angibt.</param>
      <returns vsli:raw="The results of compilation.">Die Ergebnisse der Kompilierung.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileNames&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> ist <see langword="null" />.  

oder - 
<paramref name="fileNames" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles the specified source code string using the specified options, and returns the results from the compilation.">Kompiliert die angegebene Quellcodezeichenfolge mit den angegebenen Optionen und gibt die Ergebnisse der Kompilierung zurück.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="source" vsli:raw="The source code string to compile.">Die zu kompilierende Quellcodezeichenfolge.</param>
      <returns vsli:raw="The results of compilation.">Die Ergebnisse der Kompilierung.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles the specified source code strings using the specified options, and returns the results from the compilation.">Kompiliert die angegebenen Quellcodezeichenfolgen mit den angegebenen Optionen und gibt die Ergebnisse der Kompilierung zurück.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="sources" vsli:raw="An array of strings containing the source code to compile.">Ein Array mit Zeichenfolgen, das den zu kompilierenden Quellcode enthält.</param>
      <returns vsli:raw="The results of compilation.">Die Ergebnisse der Kompilierung.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;sources&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> ist <see langword="null" />.  

oder - 
<paramref name="sources" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Gets the command arguments to use when invoking the compiler to generate a response file.">Ruft die Befehlsargumente ab, mit denen der Compiler aufgerufen wird, wenn eine Antwortdatei generiert werden soll.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="cmdArgs" vsli:raw="A command arguments string.">Eine Zeichenfolge mit Befehlsargumenten.</param>
      <returns vsli:raw="The command arguments to use to generate a response file, or &lt;see langword=&quot;null&quot; /&gt; if there are no response file arguments.">Die Befehlsargumente zum Generieren einer Antwortdatei oder <see langword="null" />, wenn keine Argumente für Antwortdateien vorhanden sind.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary vsli:raw="Joins the specified string arrays.">Verknüpft die angegebenen Zeichenfolgenarrays.</summary>
      <param name="sa" vsli:raw="The array of strings to join.">Das Array mit den zu verknüpfenden Zeichenfolgen.</param>
      <param name="separator" vsli:raw="The separator to use.">Das zu verwendende Trennzeichen.</param>
      <returns vsli:raw="The concatenated string.">Die verkettete Zeichenfolge.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary vsli:raw="Processes the specified line from the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt;.">Verarbeitet die angegebene Zeile aus dem angegebenen <see cref="T:System.CodeDom.Compiler.CompilerResults" />.</summary>
      <param name="results" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; that indicates the results of compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />, das die Ergebnisse der Kompilierung angibt.</param>
      <param name="line" vsli:raw="The line to process.">Die zu verarbeitende Zeile.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)&quot; /&gt;.">Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the source to compile.">Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, die die Quelle für die Kompilierung angibt.</param>
      <returns vsli:raw="The results of compilation.">Die Ergebnisse der Kompilierung.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])&quot; /&gt;.">Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="ea" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects that indicates the source to compile.">Ein Array von <see cref="T:System.CodeDom.CodeCompileUnit" />-Objekten, das die Quelle für die Kompilierung angibt.</param>
      <returns vsli:raw="The results of compilation.">Die Ergebnisse der Kompilierung.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)&quot; /&gt;.">Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="fileName" vsli:raw="The file name to compile.">Der Name der zu kompilierenden Datei.</param>
      <returns vsli:raw="The results of compilation.">Die Ergebnisse der Kompilierung.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])&quot; /&gt;.">Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="fileNames" vsli:raw="An array of strings that indicates the file names to compile.">Ein Array von Zeichenfolgen, das die Namen der zu kompilierenden Dateien angibt.</param>
      <returns vsli:raw="The results of compilation.">Die Ergebnisse der Kompilierung.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)&quot; /&gt;.">Eine Beschreibung dieses Members finden Sie unter <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="source" vsli:raw="A string that indicates the source code to compile.">Eine Zeichenfolge, die den zu kompilierenden Quellcode angibt.</param>
      <returns vsli:raw="The results of compilation.">Die Ergebnisse der Kompilierung.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])&quot; /&gt;.">Eine Beschreibung dieses Members finden Sie unter <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="sources" vsli:raw="An array of strings that indicates the source code to compile.">Ein Array mit Zeichenfolgen, das den zu kompilierenden Quellcode angibt.</param>
      <returns vsli:raw="The results of compilation.">Die Ergebnisse der Kompilierung.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> ist <see langword="null" />.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary vsli:raw="Provides a base class for &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementations. This class is abstract.">Stellt eine Basisklasse für <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierungen bereit. Diese Klasse ist abstrakt.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles an assembly based on the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; trees contained in the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects, using the specified compiler settings.">Kompiliert eine Assembly auf Grundlage der <see cref="N:System.CodeDom" />-Strukturen im angegebenen Array von <see cref="T:System.CodeDom.CodeCompileUnit" />-Objekten mit den angegebenen Compilereinstellungen.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for the compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
      <param name="compilationUnits" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeCompileUnit" />, das den zu kompilierenden Code angibt.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of the compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.">Kompiliert eine Assembly aus dem in den angegebenen Dateien enthaltenen Quellcode mit den angegebenen Compilereinstellungen.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for the compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
      <param name="fileNames" vsli:raw="An array of the names of the files to compile.">Ein Array mit den Namen der zu kompilierenden Dateien.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.">Kompiliert eine Assembly aus dem angegebenen Array von Zeichenfolgen mit Quellcode und unter Verwendung der angegebenen Compilereinstellungen.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler settings for this compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compilereinstellungen für die Kompilierung angibt.</param>
      <param name="sources" vsli:raw="An array of source code strings to compile.">Ein Array von zu kompilierenden Quellcodezeichenfolgen.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary vsli:raw="When overridden in a derived class, creates a new code compiler.">Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codecompiler.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; that can be used for compilation of &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">Ein <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> zum Kompilieren von <see cref="N:System.CodeDom" />-basierten Quellcodedarstellungen.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Erstellt einen mit einem Escapezeichen versehenen Bezeichner für den angegebenen Wert.</summary>
      <param name="value" vsli:raw="The string for which to create an escaped identifier.">Die Zeichenfolge, für die ein mit einem Escapezeichen versehener Bezeichner generiert werden soll.</param>
      <returns vsli:raw="The escaped identifier for the value.">Der mit einem Escapezeichen versehene Bezeichner für den Wert.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator.">Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codegenerator.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">Ein <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> zum Generieren von <see cref="N:System.CodeDom" />-basierten Quellcodedarstellungen.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator using the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; for output.">Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codegenerator unter Verwendung des angegebenen <see cref="T:System.IO.TextWriter" /> für die Ausgabe.</summary>
      <param name="output" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to use to output.">Ein <see cref="T:System.IO.TextWriter" />, der für die Ausgabe verwendet werden soll.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">Ein <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> zum Generieren von <see cref="N:System.CodeDom" />-basierten Quellcodedarstellungen.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator using the specified file name for output.">Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codegenerator unter Verwendung des angegebenen Dateinamens für die Ausgabe.</summary>
      <param name="fileName" vsli:raw="The file name to output to.">Der Dateiname für die Ausgabe.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">Ein <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> zum Generieren von <see cref="N:System.CodeDom" />-basierten Quellcodedarstellungen.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary vsli:raw="When overridden in a derived class, creates a new code parser.">Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codeparser.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeParser&quot; /&gt; that can be used to parse source code. The base implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.CodeDom.Compiler.ICodeParser" /> zum Analysieren von Quellcode. Die Basisimplementierung gibt immer <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the specified language.">Ruft eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Instanz für die angegebene Sprache ab.</summary>
      <param name="language" vsli:raw="The language name.">Der Sprachname.</param>
      <returns vsli:raw="A CodeDOM provider that is implemented for the specified language name.">Ein CodeDOM-Anbieter, der für den angegebenen Sprachnamen implementiert wird.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; does not have a configured provider on this computer.">
        <paramref name="language" /> verfügt auf diesem Computer über keinen konfigurierten Anbieter.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="language" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the specified language and provider options.">Ruft eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Instanz für die angegebenen Sprach- und Anbieteroptionen ab.</summary>
      <param name="language" vsli:raw="The language name.">Der Sprachname.</param>
      <param name="providerOptions" vsli:raw="A collection of provider options from the configuration file.">Eine Auflistung der Anbieteroptionen aus der Konfigurationsdatei.</param>
      <returns vsli:raw="A CodeDOM provider that is implemented for the specified language name and options.">Ein CodeDOM-Anbieter, der für den angegebenen Sprachnamen und die angegebenen Optionen implementiert wird.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Erstellt einen gültigen Bezeichner für den angegebenen Wert.</summary>
      <param name="value" vsli:raw="The string for which to generate a valid identifier.">Die Zeichenfolge, für die ein gültiger Bezeichner generiert werden soll.</param>
      <returns vsli:raw="A valid identifier for the specified value.">Ein gültiger Bezeichner für den angegebenen Wert.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary vsli:raw="Gets the default file name extension to use for source code files in the current language.">Ruft die Standarddateinamenerweiterung ab, die für Quellcodedateien in der aktuellen Sprache verwendet werden soll.</summary>
      <returns vsli:raw="A file name extension corresponding to the extension of the source files of the current language. The base implementation always returns &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.">Eine Dateinamenerweiterung, die der Erweiterung der Quelldateien für die aktuelle Sprache entspricht. Die Basisimplementierung gibt immer <see cref="F:System.String.Empty" /> zurück.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.">Generiert Code für die angegebene CodeDOM-Kompilierungseinheit (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
      <param name="compileUnit" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; for which to generate code.">Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, für die Code generiert werden soll.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which the output code is sent.">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.">Generiert Code für den angegebenen CodeDOM-Ausdruck (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object that indicates the expression for which to generate code.">Ein <see cref="T:System.CodeDom.CodeExpression" />-Objekt, dass den Ausdruck angibt, für den Code generiert werden soll.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.">Generiert Code für die angegebene CodeDOM-Memberdeklaration (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; object that indicates the member for which to generate code.">Ein <see cref="T:System.CodeDom.CodeTypeMember" />, der den Member angibt, für den Code generiert werden soll.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="This method is not overridden in a derived class.">Diese Methode wird in einer abgeleiteten Klasse nicht überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.">Generiert Code für den angegebenen CodeDOM-Namespace (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
      <param name="codeNamespace" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object that indicates the namespace for which to generate code.">Ein <see cref="T:System.CodeDom.CodeNamespace" />-Objekt, das den Namespace angibt, für den Code generiert werden soll.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.">Generiert Code für die angegebene CodeDOM-Anweisung (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
      <param name="statement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the CodeDOM elements for which to generate code.">Eine <see cref="T:System.CodeDom.CodeStatement" />, die die CodeDOM-Elemente enthält, für die Code generiert werden soll.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.">Generiert Code für die angegebene CodeDOM-Typdeklaration (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
      <param name="codeType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object that indicates the type for which to generate code.">Eine <see cref="T:System.CodeDom.CodeTypeDeclaration" />, die den Typ angibt, für den Code generiert werden soll.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary vsli:raw="Returns the language provider and compiler configuration settings for this computer.">Gibt den Sprachanbieter und die Compilerkonfigurationseinstellungen für diesen Computer zurück.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; representing the settings of all configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementations.">Ein Array vom Typ <see cref="T:System.CodeDom.Compiler.CompilerInfo" />, das die Einstellungen aller konfigurierten <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierungen darstellt.</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary vsli:raw="Returns the language provider and compiler configuration settings for the specified language.">Gibt die Sprachanbieter- und Compilerkonfigurationseinstellungen für die angegebene Sprache zurück.</summary>
      <param name="language" vsli:raw="A language name.">Der Name einer Sprache.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; object populated with settings of the configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation.">Ein mit Einstellungen der konfigurierten <see cref="T:System.CodeDom.Compiler.CompilerInfo" />-Implementierung aufgefülltes <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Objekt.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; does not have a configured provider on this computer.">
        <paramref name="language" /> verfügt auf diesem Computer über keinen konfigurierten Anbieter.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="language" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified data type.">Ruft einen <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Datentyp ab.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">Der Objekttyp, für den ein Typkonverter abgerufen werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type, or &lt;see langword=&quot;null&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type cannot be found.">Ein <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Typ oder <see langword="null" />, wenn für den angegebenen Typ kein <see cref="T:System.ComponentModel.TypeConverter" /> gefunden werden kann.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary vsli:raw="Returns a language name associated with the specified file name extension, as configured in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; compiler configuration section.">Gibt, wie im <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Compilerkonfigurationsabschnitt konfiguriert, einen der angegebenen Dateinamenerweiterung zugeordneten Sprachnamen zurück.</summary>
      <param name="extension" vsli:raw="A file name extension.">Eine Dateinamenerweiterung.</param>
      <returns vsli:raw="A language name associated with the file name extension, as configured in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; compiler configuration settings.">Ein der Dateinamenerweiterung zugeordneter Sprachname, wie in den <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Compilerkonfigurationseinstellungen konfiguriert.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; does not have a configured language provider on this computer.">
        <paramref name="extension" /> verfügt auf diesem Computer über keinen konfigurierten Sprachanbieter.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="extension" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Ruft den durch die angegebene <see cref="T:System.CodeDom.CodeTypeReference" /> angegebenen Typ ab.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type to return.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den zurückzugebenden Typ angibt.</param>
      <returns vsli:raw="A text representation of the specified type, formatted for the language in which code is generated by this code generator. In Visual Basic, for example, passing in a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type will return &quot;Integer&quot;.">Eine Textdarstellung des angegebenen Typs, der für die Sprache formatiert ist, in der Code von diesem Codegenerator generiert wird. In Visual Basic wird z. B. beim Übergeben eines <see cref="T:System.CodeDom.CodeTypeReference" /> für den <see cref="T:System.Int32" />-Typ "Integer" zurückgegeben.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary vsli:raw="Tests whether a file name extension has an associated &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation configured on the computer.">Testet, ob eine Dateinamenerweiterung über eine ihr zugeordnete, auf dem Computer konfigurierte <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung verfügt.</summary>
      <param name="extension" vsli:raw="A file name extension.">Eine Dateinamenerweiterung.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation is configured for the specified file name extension; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn für die angegebene Dateinamenerweiterung eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung konfiguriert ist, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="extension" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary vsli:raw="Tests whether a language has a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation configured on the computer.">Testet, ob eine Sprache über eine auf dem Computer konfigurierte <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung verfügt.</summary>
      <param name="language" vsli:raw="The language name.">Der Sprachname.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation is configured for the specified language; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn für die angegebene Sprache eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung konfiguriert ist, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="language" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary vsli:raw="Returns a value that indicates whether the specified value is a valid identifier for the current language.">Gibt einen Wert zurück, der angibt, ob der angegebene Wert ein gültiger Bezeichner für die aktuelle Sprache ist.</summary>
      <param name="value" vsli:raw="The value to verify as a valid identifier.">Der Wert, der als gültiger Bezeichner validiert werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der <paramref name="value" />-Parameter ein gültiger Bezeichner ist, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary vsli:raw="Gets a language features identifier.">Ruft einen Bezeichner für Sprachfeatures ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.LanguageOptions&quot; /&gt; that indicates special features of the language.">
        <see cref="T:System.CodeDom.Compiler.LanguageOptions" />, die bestimmte Features der Sprache angeben.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary vsli:raw="Compiles the code read from the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Kompiliert den aus dem angegebenen Textstream gelesenen Code in einer <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; object that is used to read the code to be parsed.">Ein <see cref="T:System.IO.TextReader" />-Objekt, das zum Lesen des zu analysierenden Codes verwendet wird.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that contains a representation of the parsed code.">Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, die eine Darstellung des analysierten Code enthält.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Returns a value indicating whether the specified code generation support is provided.">Gibt einen Wert zurück, der angibt, ob die angegebene Unterstützung für die Codegenerierung verfügbar ist.</summary>
      <param name="generatorSupport" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object that indicates the type of code generation support to verify.">Ein <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />-Objekt, das den Typ der Unterstützung für die Codegenerierung angibt, der geprüft werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified code generation support is provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die angegebene Unterstützung für die Codegenerierung verfügbar ist, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary vsli:raw="Provides an example implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; interface. This class is abstract.">Stellt eine Beispielimplementierung der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />-Schnittstelle bereit. Diese Klasse ist abstrakt.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGenerator&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CodeGenerator" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary vsli:raw="Generates a line-continuation character and outputs the specified string on a new line.">Generiert ein Zeilenfortsetzungszeichen und gibt die angegebene Zeichenfolge in einer neuen Zeile aus.</summary>
      <param name="st" vsli:raw="The string to write on the new line.">Die Zeichenfolge, die in die neue Zeile geschrieben werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Erstellt einen mit einem Escapezeichen versehenen Bezeichner für den angegebenen Wert.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">Die Zeichenfolge, für die ein mit einem Escapezeichen versehener Bezeichner generiert werden soll.</param>
      <returns vsli:raw="The escaped identifier for the value.">Der mit einem Escapezeichen versehene Bezeichner für den Wert.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Erstellt einen gültigen Bezeichner für den angegebenen Wert.</summary>
      <param name="value" vsli:raw="A string to create a valid identifier for.">Eine Zeichenfolge, für die ein gültiger Bezeichner erstellt werden soll.</param>
      <returns vsli:raw="A valid identifier for the value.">Ein gültiger Bezeichner für den Wert.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary vsli:raw="Gets the code type declaration for the current class.">Ruft die Codetypdeklaration für die aktuelle Klasse ab.</summary>
      <returns vsli:raw="The code type declaration for the current class.">Die Codetypdeklaration für die aktuelle Klasse.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary vsli:raw="Gets the current member of the class.">Ruft den aktuellen Member der Klasse ab.</summary>
      <returns vsli:raw="The current member of the class.">Der aktuelle Member der Klasse.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary vsli:raw="Gets the current member name.">Ruft den Namen des aktuellen Members ab.</summary>
      <returns vsli:raw="The name of the current member.">Der Name des aktuellen Members.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary vsli:raw="Gets the current class name.">Ruft den Namen der aktuellen Klasse ab.</summary>
      <returns vsli:raw="The current class name.">Der aktuelle Klassenname.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary vsli:raw="Generates code for the specified argument reference expression.">Generiert Code für den angegebenen Verweisausdruck von Argumenten.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; that indicates the expression to generate code for.">Ein <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />, der den Ausdruck angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary vsli:raw="Generates code for the specified array creation expression.">Generiert Code für den angegebenen Ausdruck für die Arrayerstellung.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; that indicates the expression to generate code for.">Ein <see cref="T:System.CodeDom.CodeArrayCreateExpression" />, der den Ausdruck angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary vsli:raw="Generates code for the specified array indexer expression.">Generiert Code für den angegebenen Ausdruck für die Arrayindizierung.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; that indicates the expression to generate code for.">Ein <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />, der den Ausdruck angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary vsli:raw="Generates code for the specified assignment statement.">Generiert Code für die angegebene Zuweisungsanweisung.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; that indicates the statement to generate code for.">Ein <see cref="T:System.CodeDom.CodeAssignStatement" />, das die Anweisung angibt, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary vsli:raw="Generates code for the specified attach event statement.">Generiert Code für die angegebene Anweisung zum Anfügen von Ereignissen.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; that indicates the statement to generate code for.">Ein <see cref="T:System.CodeDom.CodeAttachEventStatement" />, das die Anweisung angibt, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute block end.">Generiert Code für das angegebene Attributblockende.</summary>
      <param name="attributes" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the end of the attribute block to generate code for.">Eine <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, die das Ende des Attributblocks angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute block start.">Generiert Code für den angegebenen Attributblockanfang.</summary>
      <param name="attributes" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the start of the attribute block to generate code for.">Eine <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, die den Anfang des Attributblocks angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary vsli:raw="Generates code for the specified base reference expression.">Generiert Code für den angegebenen Basisverweisausdruck.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBaseReferenceExpression&quot; /&gt; that indicates the expression to generate code for.">Ein <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />, der den Ausdruck angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary vsli:raw="Generates code for the specified binary operator expression.">Generiert Code für den angegebenen Ausdruck für binäre Operatoren.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; that indicates the expression to generate code for.">Ein <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />, der den Ausdruck angibt, für den Code generiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary vsli:raw="Generates code for the specified cast expression.">Generiert Code für den angegebenen Umwandlungsausdruck.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; that indicates the expression to generate code for.">Ein <see cref="T:System.CodeDom.CodeCastExpression" />, der den Ausdruck angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">Generiert Code für den angegebenen Klassenmember unter Verwendung der angegebenen TextWriter- und Code-Generator-Optionen.</summary>
      <param name="member" vsli:raw="The class member to generate code for.">Der Klassenmember, für den Code generiert werden soll.</param>
      <param name="writer" vsli:raw="The text writer to output code to.">Der TextWriter, an den der Code ausgegeben werden soll.</param>
      <param name="options" vsli:raw="The options to use when generating the code.">Die beim Generieren von Code zu verwendenden Optionen.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.CodeDom.Compiler.CodeGenerator.Output&quot; /&gt; property is not &lt;see langword=&quot;null&quot; /&gt;.">Die <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" />-Eigenschaft ist nicht gleich <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary vsli:raw="Generates code for the specified comment.">Generiert Code für den angegebenen Kommentar.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; to generate code for.">Ein <see cref="T:System.CodeDom.CodeComment" />, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Generates code for the specified comment statement.">Generiert Code für die angegebene Kommentaranweisung.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Die Anweisung, für die Code generiert werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.CodeDom.CodeCommentStatement.Comment&quot; /&gt; property of &lt;paramref name=&quot;e&quot; /&gt; is not set.">Die <see cref="P:System.CodeDom.CodeCommentStatement.Comment" />-Eigenschaft von <paramref name="e" /> ist nicht festgelegt.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Generates code for the specified comment statements.">Generiert Code für die angegebenen Kommentaranweisungen.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the specified compile unit.">Generiert Code für die angegebene Kompilierungseinheit.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">Die Kompilierungseinheit, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the end of a compile unit.">Generiert Code für das Ende einer Kompilierungseinheit.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">Die Kompilierungseinheit, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the start of a compile unit.">Generiert Code für den Anfang einer Kompilierungseinheit.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">Die Kompilierungseinheit, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary vsli:raw="Generates code for the specified conditional statement.">Generiert Code für die angegebene Bedingungsanweisung.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified constructor.">Generiert Code für den angegebenen Konstruktor.</summary>
      <param name="e" vsli:raw="The constructor to generate code for.">Der Konstruktor, für den Code generiert werden soll.</param>
      <param name="c" vsli:raw="The type of the object that this constructor constructs.">Der Objekttyp, den dieser Konstruktor erstellt.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary vsli:raw="Generates code for the specified decimal value.">Generiert Code für den angegebenen Dezimalwert.</summary>
      <param name="d" vsli:raw="The decimal value to generate code for.">Der Dezimalwert, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary vsli:raw="Generates code for the specified reference to a default value.">Generiert Code für den angegebenen Verweis auf einen Standardwert.</summary>
      <param name="e" vsli:raw="The reference to generate code for.">Der Verweis, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary vsli:raw="Generates code for the specified delegate creation expression.">Generiert Code für den angegebenen Ausdruck für die Delegatenerstellung.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary vsli:raw="Generates code for the specified delegate invoke expression.">Generiert Code für den angegebenen Ausdruck für Delegatenaufrufe.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary vsli:raw="Generates code for the specified direction expression.">Generiert Code für den angegebenen Richtungsausdruck.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Generates code for the specified code directives.">Generiert Code für die angegebenen Codedirektiven.</summary>
      <param name="directives" vsli:raw="The code directives to generate code for.">Die Codedirektiven, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary vsli:raw="Generates code for a double-precision floating point number.">Generiert Code für eine Gleitkommazahl mit doppelter Genauigkeit.</summary>
      <param name="d" vsli:raw="The value to generate code for.">Der Wert, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified entry point method.">Generiert Code für die angegebene Einstiegspunktmethode.</summary>
      <param name="e" vsli:raw="The entry point for the code.">Der Einstiegspunkt für den Code.</param>
      <param name="c" vsli:raw="The code that declares the type.">Der Code, in dem der Typ deklariert wird.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified event.">Generiert Code für das angegebene Ereignis.</summary>
      <param name="e" vsli:raw="The member event to generate code for.">Das Memberereignis, für das Code generiert werden soll.</param>
      <param name="c" vsli:raw="The type of the object that this event occurs on.">Der Typ des Objekts, bei dem dieses Ereignis eintritt.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary vsli:raw="Generates code for the specified event reference expression.">Generiert Code für den angegebenen Verweisausdruck von Ereignissen.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Generates code for the specified code expression.">Generiert Code für den angegebenen Codeausdruck.</summary>
      <param name="e" vsli:raw="The code expression to generate code for.">Der Codeausdruck, für den Code generiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt;.">
        <paramref name="e" /> ist kein gültiger <see cref="T:System.CodeDom.CodeStatement" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary vsli:raw="Generates code for the specified expression statement.">Generiert Code für die angegebene Ausdrucksanweisung.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary vsli:raw="Generates code for the specified member field.">Generiert Code für das angegebene Memberfeld.</summary>
      <param name="e" vsli:raw="The field to generate code for.">Das Feld, für das Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary vsli:raw="Generates code for the specified field reference expression.">Generiert Code für den angegebenen Feldverweisausdruck.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary vsli:raw="Generates code for the specified &lt;see langword=&quot;goto&quot; /&gt; statement.">Generiert Code für die angegebene <see langword="goto" />-Anweisung.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary vsli:raw="Generates code for the specified indexer expression.">Generiert Code für den angegebenen Indexerausdruck.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary vsli:raw="Generates code for the specified iteration statement.">Generiert Code für die angegebene Iterationsanweisung.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary vsli:raw="Generates code for the specified labeled statement.">Generiert Code für die angegebene Anweisung mit Marke.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary vsli:raw="Generates code for the specified line pragma end.">Generiert Code für das angegebene Ende des Zeilenpragmas.</summary>
      <param name="e" vsli:raw="The end of the line pragma to generate code for.">Das Ende des Zeilenpragmas, für das Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary vsli:raw="Generates code for the specified line pragma start.">Generiert Code für den angegebenen Anfang des Zeilenpragmas.</summary>
      <param name="e" vsli:raw="The start of the line pragma to generate code for.">Der Anfang des Zeilenpragmas, für das Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified method.">Generiert Code für die angegebene Methode.</summary>
      <param name="e" vsli:raw="The member method to generate code for.">Die Membermethode, für die Code generiert werden soll.</param>
      <param name="c" vsli:raw="The type of the object that this method occurs on.">Der Typ des Objekts, bei dem diese Methode auftritt.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary vsli:raw="Generates code for the specified method invoke expression.">Generiert Code für den angegebenen Ausdruck für Methodenaufrufe.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary vsli:raw="Generates code for the specified method reference expression.">Generiert Code für den angegebenen Methodenverweisausdruck.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary vsli:raw="Generates code for the specified method return statement.">Generiert Code für die angegebene Rückgabeanweisung für die Methode.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace.">Generiert Code für den angegebenen Namespace.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">Der Namespace, für den der Code erzeugt wird.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the end of a namespace.">Generiert Code für das Ende eines Namespaces.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">Der Namespace, für den der Code erzeugt wird.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary vsli:raw="Generates code for the specified namespace import.">Generiert Code für den angegebenen Namespaceimport.</summary>
      <param name="e" vsli:raw="The namespace import to generate code for.">Der Namespaceimport, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace import.">Generiert Code für den angegebenen Namespaceimport.</summary>
      <param name="e" vsli:raw="The namespace import to generate code for.">Der Namespaceimport, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the namespaces in the specified compile unit.">Generiert Code für die Namespaces in der angegebenen Kompilierungseinheit.</summary>
      <param name="e" vsli:raw="The compile unit to generate namespaces for.">Die Kompilierungseinheit, für die Namespaces generiert werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the start of a namespace.">Generiert Code für den Anfang eines Namespaces.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">Der Namespace, für den der Code erzeugt wird.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary vsli:raw="Generates code for the specified object creation expression.">Generiert Code für den angegebenen Ausdruck für die Objekterstellung.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Generates code for the specified parameter declaration expression.">Generiert Code für den angegebenen Ausdruck für die Parameterdeklaration.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary vsli:raw="Generates code for the specified primitive expression.">Generiert Code für den angegebenen primitiven Ausdruck.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; uses an invalid data type. Only the following data types are valid:  &#xA;  &#xA;- string  &#xA;  &#xA;- char  &#xA;  &#xA;- byte  &#xA;  &#xA;- Int16  &#xA;  &#xA;- Int32  &#xA;  &#xA;- Int64  &#xA;&#xA;- Half&#xA;  &#xA;- Single  &#xA;  &#xA;- Double  &#xA;  &#xA;- Decimal">
        <paramref name="e" /> verwendet einen ungültigen Datentyp. Es sind nur folgende Datentypen zulässig: 
–   string 
–   char 
–   byte 
–   Int16 
–   Int32 
–   Int64 
–   Single 
–   Double 
–   Decimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified property.">Generiert Code für die angegebene Eigenschaft.</summary>
      <param name="e" vsli:raw="The property to generate code for.">Die Eigenschaft, für die Code generiert werden soll.</param>
      <param name="c" vsli:raw="The type of the object that this property occurs on.">Der Typ des Objekts, bei dem diese Eigenschaft auftritt.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary vsli:raw="Generates code for the specified property reference expression.">Generiert Code für den angegebenen Verweisausdruck für Eigenschaften.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary vsli:raw="Generates code for the specified property set value reference expression.">Generiert Code für den angegebenen Verweisausdruck für den Wert eines Eigenschaftensets.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary vsli:raw="Generates code for the specified remove event statement.">Generiert Code für die angegebene Anweisung zum Entfernen von Ereignissen.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary vsli:raw="Generates code for a single-precision floating point number.">Generiert Code für eine Gleitkommazahl mit einfacher Genauigkeit.</summary>
      <param name="s" vsli:raw="The value to generate code for.">Der Wert, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment compile unit.">Gibt den Code der Kompilierungseinheit des angegebenen literalen Codefragments aus.</summary>
      <param name="e" vsli:raw="The literal code fragment compile unit to generate code for.">Die Kompilierungseinheit für das literale Codefragment, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment expression.">Gibt den Code des Ausdrucks des angegebenen literalen Codefragments aus.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment class member.">Gibt den Code des Klassenmembers des angegebenen literalen Codefragments aus.</summary>
      <param name="e" vsli:raw="The member to generate code for.">Der Member, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment statement.">Gibt den Code der Anweisung des angegebenen literalen Codefragments aus.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Generates code for the specified statement.">Generiert Code für die angegebene Anweisung.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Die Anweisung, für die Code generiert werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt;.">
        <paramref name="e" /> ist kein gültiger <see cref="T:System.CodeDom.CodeStatement" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Generates code for the specified statement collection.">Generiert Code für die angegebene Anweisungsauflistung.</summary>
      <param name="stms">Die Anweisungen, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary vsli:raw="Generates code for the specified this reference expression.">Generiert Code für den angegebenen Ausdruck für this-Verweise.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary vsli:raw="Generates code for the specified throw exception statement.">Generiert Code für die angegebene Anweisung zum Auslösen von Ausnahmen.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary vsli:raw="Generates code for the specified &lt;c&gt;try-catch-finally&lt;/c&gt; statement.">Generiert Code für die angegebene <see langword="try...catch...finally" />-Anweisung.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary vsli:raw="Generates code for the specified class constructor.">Generiert Code für den angegebenen Klassenkonstruktor.</summary>
      <param name="e" vsli:raw="The class constructor to generate code for.">Der Klassenkonstruktor, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified end of the class.">Generiert Code für das angegebene Ende der Klasse.</summary>
      <param name="e" vsli:raw="The end of the class to generate code for.">Das Ende der Klasse, für das Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary vsli:raw="Generates code for the specified type of expression.">Generiert Code für den angegebenen Ausdruckstyp.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary vsli:raw="Generates code for the specified type reference expression.">Generiert Code für den angegebenen Ausdruck für Typenverweise.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace and the classes it contains.">Generiert Code für den angegebenen Namespace und die darin enthaltenen Klassen.</summary>
      <param name="e" vsli:raw="The namespace to generate classes for.">Der Namespace, für den Klassen generiert werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified start of the class.">Generiert Code für den angegebenen Anfang der Klasse.</summary>
      <param name="e" vsli:raw="The start of the class to generate code for.">Der Anfang der Klasse, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary vsli:raw="Generates code for the specified variable declaration statement.">Generiert Code für die angegebene Anweisung für die Variablendeklaration.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary vsli:raw="Generates code for the specified variable reference expression.">Generiert Code für den angegebenen Variablenverweisausdruck.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the name of the specified data type.">Ruft den Namen des angegebenen Datentyps ab.</summary>
      <param name="value" vsli:raw="The type whose name will be returned.">Der Typ, dessen Name zurückgegeben wird.</param>
      <returns vsli:raw="The name of the data type reference.">Der Name des Datentypverweises.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary vsli:raw="Gets or sets the amount of spaces to indent each indentation level.">Ruft die Anzahl der Leerzeichen ab, um die die einzelnen Einzugsebenen eingerückt werden sollen, oder legt diese fest.</summary>
      <returns vsli:raw="The number of spaces to indent for each indentation level.">Die Anzahl der Leerzeichen, um die die einzelnen Einzugsebenen eingerückt werden.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a class.">Ruft einen Wert ab, der angibt, ob das aktuelle Objekt, das gerade generiert wird, eine Klasse ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn es sich beim aktuellen Objekt um eine Klasse handelt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a delegate.">Ruft einen Wert ab, der angibt, ob das aktuelle Objekt, das gerade generiert wird, ein Delegat ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a delegate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn es sich beim aktuellen Objekt um einen Delegaten handelt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is an enumeration.">Ruft einen Wert ab, der angibt, ob das aktuelle Objekt, das gerade generiert wird, eine Enumeration ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is an enumeration; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn es sich beim aktuellen Objekt um eine Enumeration handelt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is an interface.">Ruft einen Wert ab, der angibt, ob das aktuelle Objekt, das gerade generiert wird, eine Schnittstelle ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is an interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn es sich beim aktuellen Objekt um eine Schnittstelle handelt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a value type or struct.">Ruft einen Wert ab, der angibt, ob das aktuell generierte Objekt ein Werttyp oder eine Struktur ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a value type or struct; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das aktuelle Objekt ein Werttyp oder eine Struktur ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified value is a valid identifier.">Ruft einen Wert ab, der angibt, ob der angegebene Wert ein gültiger Bezeichner ist.</summary>
      <param name="value" vsli:raw="The value to test for conflicts with valid identifiers.">Der Wert, der auf Konflikte mit gültigen Bezeichnern getestet werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Wert ein gültiger Bezeichner ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified string is a valid identifier.">Ruft einen Wert ab, der angibt, ob die angegebene Zeichenfolge ein gültiger Bezeichner ist.</summary>
      <param name="value" vsli:raw="The string to test for validity.">Die Zeichenfolge, deren Gültigkeit getestet werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die angegebene Zeichenfolge ein gültiger Bezeichner ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary vsli:raw="Gets the token that represents &lt;see langword=&quot;null&quot; /&gt;.">Ruft das Token ab, das <see langword="null" /> darstellt.</summary>
      <returns vsli:raw="The token that represents &lt;see langword=&quot;null&quot; /&gt;.">Das Token, das <see langword="null" /> darstellt.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary vsli:raw="Gets the options to be used by the code generator.">Ruft die vom Codegenerator zu verwendenden Optionen ab.</summary>
      <returns vsli:raw="An object that indicates the options for the code generator to use.">Ein Objekt, das die vom Code-Generator zu verwendenden Optionen angibt.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary vsli:raw="Gets the text writer to use for output.">Ruft den für die Ausgabe zu verwendenden Textwriter ab.</summary>
      <returns vsli:raw="The text writer to use for output.">Der für die Ausgabe zu verwendende Textwriter.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Outputs an argument in an attribute block.">Gibt ein Argument in einem Attributblock aus.</summary>
      <param name="arg" vsli:raw="The attribute argument to generate code for.">Das Attributargument, für das Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute declaration collection.">Generiert Code für die angegebene Auflistung von Attributdeklarationen.</summary>
      <param name="attributes" vsli:raw="The attributes to generate code for.">Die Attribute, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary vsli:raw="Generates code for the specified &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt;.">Generiert Code für die angegebene <see cref="T:System.CodeDom.FieldDirection" />.</summary>
      <param name="dir" vsli:raw="One of the enumeration values that indicates the attribute of the field.">Einer der Enumerationswerte, der das Attribut des Felds angibt.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Generates code for the specified expression list.">Generiert Code für die angegebene Ausdrucksliste.</summary>
      <param name="expressions" vsli:raw="The expressions to generate code for.">Die Ausdrücke, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary vsli:raw="Generates code for the specified expression list.">Generiert Code für die angegebene Ausdrucksliste.</summary>
      <param name="expressions" vsli:raw="The expressions to generate code for.">Die Ausdrücke, für die Code generiert werden soll.</param>
      <param name="newlineBetweenItems" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to insert a new line after each item; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um nach jedem Element eine neue Zeile einzufügen, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Outputs a field scope modifier that corresponds to the specified attributes.">Gibt einen Modifizierer für den Gültigkeitsbereich von Feldern aus, der den angegebenen Attributen entspricht.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that specifies the attributes.">Einer der Enumerationswerte, der die Attribute angibt.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary vsli:raw="Outputs the specified identifier.">Gibt den angegebenen Bezeichner aus.</summary>
      <param name="ident" vsli:raw="The identifier to output.">Der Bezeichner, der ausgegeben werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Generates code for the specified member access modifier.">Generiert Code für den angegebenen Modifizierer für den Memberzugriff.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the member access modifier to generate code for.">Einer der Enumerationswerte, der den Modifizierer für den Memberzugriff angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Generates code for the specified member scope modifier.">Generiert Code für den angegebenen Modifizierer für den Gültigkeitsbereich von Membern.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the member scope modifier to generate code for.">Einer der Enumerationswerte, der den Modifizierer für den Memberbereich angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary vsli:raw="Generates code for the specified operator.">Generiert Code für den angegebenen Operator.</summary>
      <param name="op" vsli:raw="The operator to generate code for.">Der Operator, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Generates code for the specified parameters.">Generiert Code für die angegebenen Parameter.</summary>
      <param name="parameters" vsli:raw="The parameter declaration expressions to generate code for.">Die Parameterdeklarationsausdrücke, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Generates code for the specified type.">Generiert Code für den angegebenen Typ.</summary>
      <param name="typeRef" vsli:raw="The type to generate code for.">Der Typ, für den der Code erzeugt wird.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary vsli:raw="Generates code for the specified type attributes.">Generiert Code für die angegebenen Typattribute.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the type attributes to generate code for.">Einer der Enumerationswerte, der die Typattribute angibt, für die Code generiert werden soll.</param>
      <param name="isStruct" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a struct; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Typ eine Struktur ist, andernfalls <see langword="false" />.</param>
      <param name="isEnum" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an enum; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Typ eine Enumeration ist, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Generates code for the specified object type and name pair.">Generiert Code für das angegebene Typ-Name-Paar des Objekts.</summary>
      <param name="typeRef" vsli:raw="The type.">Der Typ.</param>
      <param name="name" vsli:raw="The name for the object.">Der Name für das Objekt.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary vsli:raw="Converts the specified string by formatting it with escape codes.">Konvertiert die angegebene Zeichenfolge, indem diese mit Escapesequenzen formatiert wird.</summary>
      <param name="value" vsli:raw="The string to convert.">Die zu konvertierende Zeichenfolge.</param>
      <returns vsli:raw="The converted string.">Die konvertierte Zeichenfolge.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the specified code generation support is provided.">Ruft einen Wert ab, der angibt, ob die angegebene Unterstützung für die Codegenerierung verfügbar ist.</summary>
      <param name="support" vsli:raw="The type of code generation support to test for.">Der Typ der Codegenerierungsunterstützung, auf die getestet werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified code generation support is provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die angegebene Unterstützung für die Codegenerierung verfügbar ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Erstellt einen mit einem Escapezeichen versehenen Bezeichner für den angegebenen Wert.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">Die Zeichenfolge, für die ein mit einem Escapezeichen versehener Bezeichner generiert werden soll.</param>
      <returns vsli:raw="The escaped identifier for the value.">Der mit einem Escapezeichen versehene Bezeichner für den Wert.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Erstellt einen gültigen Bezeichner für den angegebenen Wert.</summary>
      <param name="value" vsli:raw="The string to generate a valid identifier for.">Die Zeichenfolge, für die ein gültiger Bezeichner generiert werden soll.</param>
      <returns vsli:raw="A valid identifier for the specified value.">Ein gültiger Bezeichner für den angegebenen Wert.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.">Generiert Code für die angegebene CodeDOM-Kompilierungseinheit (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
      <param name="e" vsli:raw="The CodeDOM compilation unit to generate code for.">Die CodeDOM-Kompilierungseinheit, für die Code generiert werden soll.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Der TextWriter, an den der Code ausgegeben werden soll.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Die Optionen, die beim Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> ist nicht verfügbar. <paramref name="w" /> wurde möglicherweise geschlossen, bevor der Methodenaufruf erfolgte.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.">Generiert Code für den angegebenen CodeDOM-Ausdruck (Code Document Object Model) und gibt diesen an den angegebenen TextWriter aus.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Der Ausdruck, für den Code generiert werden soll.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Der TextWriter, an den der Code ausgegeben werden soll.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Die Optionen, die beim Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> ist nicht verfügbar. <paramref name="w" /> wurde möglicherweise geschlossen, bevor der Methodenaufruf erfolgte.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.">Generiert Code für den angegebenen CodeDOM-Namespace (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">Der Namespace, für den der Code erzeugt wird.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Der TextWriter, an den der Code ausgegeben werden soll.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Die Optionen, die beim Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> ist nicht verfügbar. <paramref name="w" /> wurde möglicherweise geschlossen, bevor der Methodenaufruf erfolgte.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.">Generiert Code für die angegebene CodeDOM-Anweisung (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
      <param name="e" vsli:raw="The statement that contains the CodeDOM elements to translate.">Die Anweisung, die die zu übersetzenden CodeDOM-Elemente enthält.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Der TextWriter, an den der Code ausgegeben werden soll.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Die Optionen, die beim Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> ist nicht verfügbar. <paramref name="w" /> wurde möglicherweise geschlossen, bevor der Methodenaufruf erfolgte.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.">Generiert Code für die angegebene CodeDOM-Typdeklaration (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
      <param name="e" vsli:raw="The type to generate code for.">Der Typ, für den der Code erzeugt wird.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Der TextWriter, an den der Code ausgegeben werden soll.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Die Optionen, die beim Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> ist nicht verfügbar. <paramref name="w" /> wurde möglicherweise geschlossen, bevor der Methodenaufruf erfolgte.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Ruft den durch die angegebene <see cref="T:System.CodeDom.CodeTypeReference" /> angegebenen Typ ab.</summary>
      <param name="type" vsli:raw="The type to return.">Der Typ, der zurückgegeben wird.</param>
      <returns vsli:raw="The name of the data type reference.">Der Name des Datentypverweises.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value that indicates whether the specified value is a valid identifier for the current language.">Ruft einen Wert ab, der angibt, ob der angegebene Wert ein gültiger Bezeichner für die aktuelle Sprache ist.</summary>
      <param name="value" vsli:raw="The value to test.">Der zu testende Wert.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der <paramref name="value" />-Parameter ein gültiger Bezeichner ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the generator provides support for the language features represented by the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object.">Ruft einen Wert ab, der angibt, ob der Generator die vom angegebenen <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />-Objekt dargestellten Sprachfunktionen unterstützt.</summary>
      <param name="support" vsli:raw="The capabilities to test the generator for.">Die Funktionen, auf die der Generator getestet werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified capabilities are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die angegebenen Funktionen unterstützt werden, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified value is not a valid identifier.">Löst eine Ausnahme aus, wenn der angegebene Wert kein gültiger Bezeichner ist.</summary>
      <param name="value" vsli:raw="The identifier to validate.">Der zu überprüfende Bezeichner.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified string is not a valid identifier.">Löst eine Ausnahme aus, wenn die angegebene Zeichenfolge kein gültiger Bezeichner ist.</summary>
      <param name="value" vsli:raw="The identifier to test for validity as an identifier.">Der Bezeichner, der auf Gültigkeit als Bezeichner getestet werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified identifier is invalid or conflicts with reserved or language keywords.">Bei Ungültigkeit des angegebenen Bezeichners oder wenn Konflikte mit reservierten oder sprachspezifischen Schlüsselwörtern vorliegen.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary vsli:raw="Attempts to validate each identifier field contained in the specified &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; or &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; tree.">Versucht, alle in der angegebenen <see cref="T:System.CodeDom.CodeObject" />-Struktur oder in der angegebenen <see cref="N:System.CodeDom" />-Struktur enthaltenen Bezeichnerfelder zu validieren.</summary>
      <param name="e" vsli:raw="An object to test for invalid identifiers.">Ein auf ungültige Bezeichner zu überprüfendes Objekt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; contains an invalid identifier.">Das angegebene <see cref="T:System.CodeDom.CodeObject" /> enthält einen ungültigen Bezeichner.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary vsli:raw="Represents a set of options used by a code generator.">Stellt einen von einem Code-Generator verwendeten Satz von Optionen dar.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary vsli:raw="Gets or sets a value indicating whether to insert blank lines between members.">Ruft einen Wert ab, der angibt, ob zwischen Membern leere Zeilen eingefügt werden sollen, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if blank lines should be inserted; otherwise, &lt;see langword=&quot;false&quot; /&gt;. By default, the value of this property is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn leere Zeilen eingefügt werden sollen, andernfalls <see langword="false" />. Der Standardwert dieser Eigenschaft ist <see langword="true" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary vsli:raw="Gets or sets the style to use for bracing.">Ruft das Format ab, das für Klammern verwendet werden soll, oder legt dieses fest.</summary>
      <returns vsli:raw="A string containing the bracing style to use.">Eine Zeichenfolge, die das für Klammern zu verwendende Format enthält.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary vsli:raw="Gets or sets a value indicating whether to append an &lt;see langword=&quot;else&quot; /&gt;, &lt;see langword=&quot;catch&quot; /&gt;, or &lt;see langword=&quot;finally&quot; /&gt; block, including brackets, at the closing line of each previous &lt;see langword=&quot;if&quot; /&gt; or &lt;see langword=&quot;try&quot; /&gt; block.">Ruft einen Wert ab, der angibt, ob ein <see langword="else" />-Block, ein <see langword="catch" />-Block oder ein <see langword="finally" />-Block, einschließlich der Klammern, an die abschließende Zeile jedes vorhergehenden <see langword="if" />-Blocks oder <see langword="try" />-Blocks angefügt werden soll.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an else should be appended; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value of this property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn ein else-Block angefügt werden soll, andernfalls <see langword="false" />. Der Standardwert dieser Eigenschaft ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary vsli:raw="Gets or sets the string to use for indentations.">Ruft die für Einzüge zu verwendende Zeichenfolge ab oder legt diese fest.</summary>
      <returns vsli:raw="A string containing the characters to use for indentations.">Eine Zeichenfolge, die die für Einzüge zu verwendenden Zeichen enthält.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary vsli:raw="Gets or sets the object at the specified index.">Ruft das Objekt am angegebenen Index ab oder legt dieses fest.</summary>
      <param name="index" vsli:raw="The name associated with the object to retrieve.">Der dem abzurufenden Objekt zugeordnete Name.</param>
      <returns vsli:raw="The object associated with the specified name. If no object associated with the specified name exists in the collection, &lt;see langword=&quot;null&quot; /&gt;.">Das dem angegebenen Namen zugeordnete Objekt. Wenn kein dem angegebenen Namen zugeordnetes Objekt in der Auflistung vorhanden ist, <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary vsli:raw="Gets or sets a value indicating whether to generate members in the order in which they occur in member collections.">Ruft einen Wert ab, der angibt, ob Member in der Reihenfolge generiert werden sollen, in der Sie in den Memberauflistungen aufgeführt sind.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to generate the members in the order in which they occur in the member collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value of this property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um die Member in der Reihenfolge zu generieren, in der Sie in der Memberauflistung aufgeführt sind, andernfalls <see langword="false" />. Der Standardwert dieser Eigenschaft ist <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary vsli:raw="Provides an empty implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeParser&quot; /&gt; interface.">Stellt eine leere Implementierung der <see cref="T:System.CodeDom.Compiler.ICodeParser" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeParser&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CodeParser" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary vsli:raw="Compiles the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Kompiliert den angegebenen Textstream in eine <see cref="T:System.CodeDom.CodeCompileUnit" />-Klasse.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; that is used to read the code to be parsed.">Eine <see cref="T:System.IO.TextReader" />-Klasse, die zum Lesen des zu analysierenden Codes verwendet wird.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; containing the code model produced from parsing the code.">Eine <see cref="T:System.CodeDom.CodeCompileUnit" />-Klasse, die das beim Analysieren des Codes erstellte Codemodell enthält.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary vsli:raw="Represents a compiler error or warning.">Stellt einen Compilerfehler oder eine Compilerwarnung dar.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerError" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; class using the specified file name, line, column, error number, and error text.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerError" />-Klasse mithilfe der Angaben für Dateiname, Zeile, Spalte, Fehlernummer und Fehlertext.</summary>
      <param name="fileName" vsli:raw="The file name of the file that the compiler was compiling when it encountered the error.">Der Dateiname der Datei, die der Compiler kompiliert hat, als der Fehler aufgetreten ist.</param>
      <param name="line" vsli:raw="The line of the source of the error.">Die Zeile der Fehlerquelle.</param>
      <param name="column" vsli:raw="The column of the source of the error.">Die Spalte der Fehlerquelle.</param>
      <param name="errorNumber" vsli:raw="The error number of the error.">Die Fehlernummer des Fehlers.</param>
      <param name="errorText" vsli:raw="The error message text.">Der Meldungstext des Fehlers.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary vsli:raw="Gets or sets the column number where the source of the error occurs.">Ruft die Nummer der Spalte ab, in der die Fehlerquelle auftritt, oder legt diese fest.</summary>
      <returns vsli:raw="The column number of the source file where the compiler encountered the error.">Die Spaltennummer der Quelldatei, in der der Compiler den Fehler gefunden hat.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary vsli:raw="Gets or sets the error number.">Ruft die Fehlernummer ab oder legt diese fest.</summary>
      <returns vsli:raw="The error number as a string.">Die Fehlernummer als Zeichenfolge.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary vsli:raw="Gets or sets the text of the error message.">Ruft den Text der Fehlermeldung ab oder legt diesen fest.</summary>
      <returns vsli:raw="The text of the error message.">Der Text der Fehlermeldung.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary vsli:raw="Gets or sets the file name of the source file that contains the code which caused the error.">Ruft den Dateinamen der Quelldatei mit dem Code ab, der den Fehler verursacht hat, oder legt diesen fest.</summary>
      <returns vsli:raw="The file name of the source file that contains the code which caused the error.">Der Dateiname der Quelldatei mit dem Code, der den Fehler verursacht hat.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary vsli:raw="Gets or sets a value that indicates whether the error is a warning.">Ruft einen Wert ab, der angibt, ob der Fehler eine Warnung ist, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the error is a warning; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Fehler eine Warnung ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary vsli:raw="Gets or sets the line number where the source of the error occurs.">Ruft die Nummer der Zeile ab, in der die Fehlerquelle auftritt, oder legt diese fest.</summary>
      <returns vsli:raw="The line number of the source file where the compiler encountered the error.">Die Zeilennummer der Quelldatei, in der der Compiler den Fehler gefunden hat.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary vsli:raw="Provides an implementation of Object's &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt; method.">Stellt eine Implementierung der <see cref="M:System.Object.ToString" />-Methode des Objekts bereit.</summary>
      <returns vsli:raw="A string representation of the compiler error.">Eine Zeichenfolgendarstellung des Compilerfehlers.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects.">Stellt eine Auflistung von<see cref="T:System.CodeDom.Compiler.CompilerError" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.Compiler.CompilerError" />-Objekten enthält.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects to initialize the collection with.">Ein Array von <see cref="T:System.CodeDom.Compiler.CompilerError" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; class that contains the contents of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />-Klasse, die den Inhalt der angegebenen <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> enthält.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; object with which to initialize the collection.">Ein <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />-Objekt, mit dem die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object to the error collection.">Fügt der Fehlerauflistung das angegebene <see cref="T:System.CodeDom.Compiler.CompilerError" />-Objekt hinzu.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object to add.">Das hinzuzufügende <see cref="T:System.CodeDom.Compiler.CompilerError" />-Objekt.</param>
      <returns vsli:raw="The index at which the new element was inserted.">Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary vsli:raw="Copies the elements of an array to the end of the error collection.">Kopiert die Elemente eines Arrays an das Ende der Fehlerauflistung.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; that contains the objects to add to the collection.">Ein Array vom Typ <see cref="T:System.CodeDom.Compiler.CompilerError" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary vsli:raw="Adds the contents of the specified compiler error collection to the end of the error collection.">Fügt den Inhalt der angegebenen Compilerfehlerauflistung am Ende der Fehlerauflistung hinzu.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; object that contains the objects to add to the collection.">Ein <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />-Objekt, das die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object.">Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.Compiler.CompilerError" />-Objekt enthält.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to locate.">Die zu suchende <see cref="T:System.CodeDom.Compiler.CompilerError" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <see cref="T:System.CodeDom.Compiler.CompilerError" /> in der Auflistung enthalten ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary vsli:raw="Copies the collection values to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance at the specified index.">Kopiert die Auflistungswerte am angegebenen Index in eine eindimensionale <see cref="T:System.Array" />-Instanz.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">Die eindimensionale <see cref="T:System.Array" />-Klasse, die das Ziel der aus der <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />-Klasse kopierten Werte ist.</param>
      <param name="index" vsli:raw="The index in the array at which to start copying.">Der Index im Array, an dem der Kopiervorgang beginnt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; is greater than the available space between the index value of the &lt;paramref name=&quot;arrayIndex&quot; /&gt; parameter in the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter and the end of the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter.">Das durch den <paramref name="array" />-Parameter angegebene Array ist mehrdimensional.  

oder - 
Die Anzahl der Elemente in <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> ist größer als der verfügbare Bereich zwischen dem Indexwert des <paramref name="arrayIndex" />-Parameters im Array, der durch den <paramref name="array" />-Parameter angegeben ist, und dem durch den <paramref name="array" />-Parameter angegebenen Ende des Arrays.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the lowbound of the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter.">Der <paramref name="index" />-Parameter ist niedriger als die Untergrenze des durch den <paramref name="array" />-Parameter angegebenen Arrays.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary vsli:raw="Gets a value that indicates whether the collection contains errors.">Ruft einen Wert ab, der angibt, ob die Auflistung Fehler enthält.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung Fehler enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary vsli:raw="Gets a value that indicates whether the collection contains warnings.">Ruft einen Wert ab, der angibt, ob die Auflistung Warnungen enthält.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains warnings; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Auflistung Warnungen enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object in the collection, if it exists in the collection.">Ruft den Index des angegebenen <see cref="T:System.CodeDom.Compiler.CompilerError" />-Objekts in der Auflistung ab, sofern es in der Auflistung vorhanden ist.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to locate.">Die zu suchende <see cref="T:System.CodeDom.Compiler.CompilerError" />.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;, if found; otherwise, -1.">Der Index der angegebenen <see cref="T:System.CodeDom.Compiler.CompilerError" />-Klasse in der <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />-Klasse, sofern diese gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; into the collection at the specified index.">Fügt die angegebene <see cref="T:System.CodeDom.Compiler.CompilerError" />-Klasse am angegebenen Index in die Auflistung ein.</summary>
      <param name="index" vsli:raw="The zero-based index where the compiler error should be inserted.">Der nullbasierte Index, an dem der Compilerfehler eingefügt werden soll.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to insert.">Der einzufügende <see cref="T:System.CodeDom.Compiler.CompilerError" />.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; at the specified index.">Ruft die <see cref="T:System.CodeDom.Compiler.CompilerError" />-Klasse am angegebenen Index ab oder legt diese fest.</summary>
      <param name="index" vsli:raw="The zero-based index of the entry to locate in the collection.">Der nullbasierte Index des Eintrags, der in der Auflistung gesucht werden soll.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; at each valid index.">Eine <see cref="T:System.CodeDom.Compiler.CompilerError" />-Klasse an jedem gültigen Index.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index value indicated by the &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Der durch den <paramref name="index" />-Parameter angegebene Indexwert liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Removes a specific &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; from the collection.">Entfernt eine bestimmte <see cref="T:System.CodeDom.Compiler.CompilerError" />-Klasse aus der Auflistung.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">Der <see cref="T:System.CodeDom.Compiler.CompilerError" />, der aus der <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> entfernt werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary vsli:raw="Represents the configuration settings of a language provider. This class cannot be inherited.">Stellt die Konfigurationseinstellungen eines Sprachanbieters dar. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary vsli:raw="Gets the type of the configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation.">Ruft den Typ der konfigurierten <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung ab.</summary>
      <returns vsli:raw="A read-only &lt;see cref=&quot;T:System.Type&quot; /&gt; instance that represents the configured language provider type.">Eine schreibgeschützte <see cref="T:System.Type" />-Instanz, die den konfigurierten Sprachanbietertyp darstellt.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The language provider is not configured on this computer.">Der Sprachanbieter ist nicht auf diesem Computer konfiguriert.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="Cannot locate the type because it is a &lt;see langword=&quot;null&quot; /&gt; or empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; Cannot locate the type because the name for the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; cannot be found in the configuration file.">Der Typ konnte nicht gefunden werden, da er <see langword="null" /> ist oder es sich um leere Zeichenfolge handelt.  

oder - 
Der Typ konnte nicht gefunden werden, da der Name für <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> nicht in der Konfigurationsdatei gefunden wurde.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary vsli:raw="Gets the configured compiler settings for the language provider implementation.">Ruft die konfigurierten Compilereinstellungen für die Sprachanbieterimplementierung ab.</summary>
      <returns vsli:raw="A read-only &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; instance that contains the compiler options and settings configured for the language provider.">Eine schreibgeschützte <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Instanz, die die für den Sprachanbieter konfigurierten Compileroptionen und Einstellungen enthält.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the current language provider settings.">Gibt eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Instanz für die aktuellen Sprachanbietereinstellungen zurück.</summary>
      <returns vsli:raw="A CodeDOM provider associated with the language provider configuration.">Ein der Sprachanbieterkonfiguration zugeordneter CodeDOM-Anbieter.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the current language provider settings and specified options.">Gibt eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Instanz für die aktuellen Sprachanbietereinstellungen und die angegebenen Optionen zurück.</summary>
      <param name="providerOptions" vsli:raw="A collection of provider options from the configuration file.">Eine Auflistung der Anbieteroptionen aus der Konfigurationsdatei.</param>
      <returns vsli:raw="A CodeDOM provider associated with the language provider configuration and specified options.">Ein der Sprachanbieterkonfiguration und den angegebenen Optionen zugeordneter CodeDOM-Anbieter.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The provider does not support options.">Der Anbieter unterstützt Optionen nicht.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified object represents the same language provider and compiler settings as the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt;.">Bestimmt, ob das angegebene Objekt denselben Sprachanbieter und dieselben Compilereinstellungen wie die aktuelle <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> aufweist.</summary>
      <param name="o" vsli:raw="The object to compare with the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt;.">Das Objekt, das mit der aktuellen <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is a &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; object and its value is the same as this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="o" /> ein <see cref="T:System.CodeDom.Compiler.CompilerInfo" />-Objekt ist und denselben Wert wie diese Instanz aufweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary vsli:raw="Returns the file name extensions supported by the language provider.">Gibt die vom Sprachanbieter unterstützten Dateinamenerweiterungen zurück.</summary>
      <returns vsli:raw="An array of file name extensions supported by the language provider.">Ein Array von vom Sprachanbieter unterstützten Dateinamenerweiterungen.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary vsli:raw="Returns the hash code for the current instance.">Gibt den Hashcode für die aktuelle Instanz zurück.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code for the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; instance, suitable for use in hashing algorithms and data structures such as a hash table.">Ein 32-Bit-Ganzzahl-Hashcode mit Vorzeichen für die aktuelle <see cref="T:System.CodeDom.Compiler.CompilerInfo" />-Instanz, der zur Verwendung in Hashalgorithmen und Datenstrukturen, z. B. Hashtabellen, geeignet ist.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary vsli:raw="Gets the language names supported by the language provider.">Ruft die vom Sprachanbieter unterstützten Sprachnamen ab.</summary>
      <returns vsli:raw="An array of language names supported by the language provider.">Ein Array von vom Sprachanbieter unterstützten Sprachnamen.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary vsli:raw="Returns a value indicating whether the language provider implementation is configured on the computer.">Gibt einen Wert zurück, der angibt, ob die Sprachanbieterimplementierung auf dem Computer konfiguriert ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the language provider implementation type is configured on the computer; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Sprachanbieterimplementierungstyp auf dem Computer konfiguriert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary vsli:raw="Represents the parameters used to invoke a compiler.">Stellt die zum Aufrufen eines Compilers verwendeten Parameter dar.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Klasse mit den angegebenen Assemblynamen.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">Die Namen der Assemblys, auf die verwiesen werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names and output file name.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Klasse mit den angegebenen Assemblynamen und dem Ausgabedateinamen.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">Die Namen der Assemblys, auf die verwiesen werden soll.</param>
      <param name="outputName" vsli:raw="The output file name.">Der Name der Ausgabedatei.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names, output name, and a value indicating whether to include debug information.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Klasse mit den Angaben für die Assemblynamen und den Ausgabedateinamen sowie einem Wert, der die eventuelle Einbindung von Debuginformationen angibt.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">Die Namen der Assemblys, auf die verwiesen werden soll.</param>
      <param name="outputName" vsli:raw="The output file name.">Der Name der Ausgabedatei.</param>
      <param name="includeDebugInformation" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include debug information; &lt;see langword=&quot;false&quot; /&gt; to exclude debug information.">
        <see langword="true" />, um Debuginformationen einzuschließen; <see langword="false" />, um Debuginformationen auszuschließen.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary vsli:raw="Gets or sets optional command-line arguments to use when invoking the compiler.">Ruft die optionalen Befehlszeilenargumente ab, die beim Aufrufen des Compilers verwendet werden soll, oder legt diese fest.</summary>
      <returns vsli:raw="Any additional command-line arguments for the compiler.">Alle zusätzlichen Befehlszeilenargumente für den Compiler.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary vsli:raw="Gets or sets the name of the core or standard assembly that contains basic types such as &lt;see cref=&quot;T:System.Object&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Ruft den Namen des Kern- oder Standard-Assemblys ab, das grundlegende Typen wie <see cref="T:System.Object" />, <see cref="T:System.String" /> oder <see cref="T:System.Int32" /> enthält, oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the core assembly that contains basic types.">Der Name der Kernassembly, die einen Basistyp enthält.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary vsli:raw="Gets the .NET resource files to include when compiling the assembly output.">Ruft die .NET Framework-Ressourcendateien ab, die in das Kompilieren der Assemblyausgabe eingeschlossen werden sollen.</summary>
      <returns vsli:raw="A collection that contains the file paths of .NET resources to include in the generated assembly.">Eine Sammlung, die die Dateipfaden der .NET Framework-Ressourcen enthält, die in die generierte Assembly eingefügt werden sollen.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary vsli:raw="Gets or sets a value indicating whether to generate an executable.">Ruft einen Wert ab, der angibt, ob eine ausführbare Datei generiert werden soll, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an executable should be generated; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn eine ausführbare Datei generiert werden soll, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary vsli:raw="Gets or sets a value indicating whether to generate the output in memory.">Ruft einen Wert ab, der angibt, ob die Ausgabe im Speicher generiert werden soll, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the compiler should generate the output in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Compiler die Ausgabe im Speicher generieren soll, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary vsli:raw="Gets or sets a value indicating whether to include debug information in the compiled executable.">Ruft einen Wert ab, der angibt, ob Debuginformationen in die kompilierte ausführbare Datei aufgenommen werden sollen, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if debug information should be generated; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn Debuginformationen generiert werden sollen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary vsli:raw="Gets the .NET resource files that are referenced in the current source.">Ruft die .NET Framework-Ressourcendateien ab, auf die in der aktuellen Quelle verwiesen wird.</summary>
      <returns vsli:raw="A collection that contains the file paths of .NET resources that are referenced by the source.">Eine Sammlung, die die Dateipfade der .NET Framework-Ressourcen enthält, auf die in der Quelle verwiesen wird.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary vsli:raw="Gets or sets the name of the main class.">Ruft den Namen der Hauptklasse ab oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the main class.">Der Name der Hauptklasse.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary vsli:raw="Gets or sets the name of the output assembly.">Ruft den Namen der Ausgabeassembly ab oder legt diesen fest.</summary>
      <returns vsli:raw="The name of the output assembly.">Der Name der Ausgabeassembly.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary vsli:raw="Gets the assemblies referenced by the current project.">Ruft die Assemblys ab, auf die durch das aktuelle Projekt verwiesen wird.</summary>
      <returns vsli:raw="A collection that contains the assembly names that are referenced by the source to compile.">Eine Sammlung, die die Assemblynamen enthält, auf die die zu kompilierende Quelle verweist.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary vsli:raw="Gets or sets the collection that contains the temporary files.">Ruft die Auflistung ab, die die temporären Dateien enthält, oder legt diese fest.</summary>
      <returns vsli:raw="A collection that contains the temporary files.">Eine Sammlung, die die temporären Dateien enthält.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary vsli:raw="Gets or sets a value indicating whether to treat warnings as errors.">Ruft einen Wert ab, der angibt, ob Warnungen als Fehler behandelt werden sollen, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if warnings should be treated as errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn Warnungen als Fehler behandelt werden sollen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary vsli:raw="Gets or sets the user token to use when creating the compiler process.">Ruft das Benutzertoken ab, das beim Erstellen des Compilerprozesses verwendet werden soll, oder legt dieses fest.</summary>
      <returns vsli:raw="The user token to use.">Das zu verwendende Benutzertoken.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary vsli:raw="Gets or sets the warning level at which the compiler aborts compilation.">Ruft die Warnstufe ab, bei der der Compiler die Kompilierung abbricht, oder legt diese fest.</summary>
      <returns vsli:raw="The warning level at which the compiler aborts compilation.">Die Warnstufe, bei der der Compiler die Kompilierung abbricht.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary vsli:raw="Gets or sets the file name of a Win32 resource file to link into the compiled assembly.">Ruft den Dateinamen einer Win32-Ressourcendatei ab, zu der in der kompilierten Assembly ein Link erstellt werden soll, oder legt diesen fest.</summary>
      <returns vsli:raw="A Win32 resource file that will be linked into the compiled assembly.">Eine Win32-Ressourcendatei, zu der in der kompilierten Assembly eine Verknüpfung erstellt wird.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary vsli:raw="Represents the results of compilation that are returned from a compiler.">Stellt die Ergebnisse der Kompilierung dar, die von einem Compiler zurückgegeben werden.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; class that uses the specified temporary files.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Klasse, die die angegebenen temporären Dateien verwendet.</summary>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Eine <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, mit der Verweise auf temporäre Dateien verwaltet und gespeichert werden, die während der Kompilierung generiert werden.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary vsli:raw="Gets or sets the compiled assembly.">Ruft die kompilierte Assembly ab oder legt diese fest.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that indicates the compiled assembly.">Eine <see cref="T:System.Reflection.Assembly" />, die die kompilierte Assembly angibt.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary vsli:raw="Gets the collection of compiler errors and warnings.">Ruft die Auflistung von Compilerfehlern und -warnungen ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; that indicates the errors and warnings resulting from compilation, if any.">Eine <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />, die eventuell vorliegende Fehler und Warnungen angibt, die sich aus der Kompilierung ergeben haben.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary vsli:raw="Gets or sets the compiler's return value.">Ruft den Rückgabewert des Compilers ab oder legt diesen fest.</summary>
      <returns vsli:raw="The compiler's return value.">Der Rückgabewert des Compilers.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary vsli:raw="Gets the compiler output messages.">Ruft die Compilerausgabemeldungen ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.StringCollection&quot; /&gt; that contains the output messages.">Eine <see cref="T:System.Collections.Specialized.StringCollection" />, die die Ausgabemeldungen enthält.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary vsli:raw="Gets or sets the path of the compiled assembly.">Ruft den Pfad der kompilierten Assembly ab oder legt diesen fest.</summary>
      <returns vsli:raw="The path of the assembly, or &lt;see langword=&quot;null&quot; /&gt; if the assembly was generated in memory.">Der Pfad der Assembly oder <see langword="null" />, wenn die Assembly im Speicher generiert wurde.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary vsli:raw="Gets or sets the temporary file collection to use.">Ruft die zu verwendende Auflistung von temporären Dateien ab oder legt diese fest.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Eine <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, mit der Verweise auf temporäre Dateien verwaltet und gespeichert werden, die während der Kompilierung generiert werden.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary vsli:raw="Provides command execution functions for invoking compilers. This class cannot be inherited.">Stellt Befehlsausführungsfunktionen zum Aufrufen von Compilern bereit. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary vsli:raw="Executes the command using the specified temporary files and waits for the call to return.">Führt den Befehl mit den angegebenen temporären Dateien aus und wartet, bis der Aufruf zurückgegeben wird.</summary>
      <param name="cmd" vsli:raw="The command to execute.">Der auszuführende Befehl.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Eine <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, mit der Verweise auf temporäre Dateien verwaltet und gespeichert werden, die während der Kompilierung generiert werden.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified user token and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.">Führt den angegebenen Befehl mit dem angegebenen Benutzertoken und den temporären Dateien aus und wartet auf das Beenden des Aufrufs, wobei die Ausgabe und die Fehlerinformationen des Compilers in den angegebenen Zeichenfolgen gespeichert werden.</summary>
      <param name="userToken" vsli:raw="The token to start the compiler process with.">Das Token, mit dem der Compilerprozess gestartet wird.</param>
      <param name="cmd" vsli:raw="The command to execute.">Der auszuführende Befehl.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Eine <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, mit der Verweise auf temporäre Dateien verwaltet und gespeichert werden, die während der Kompilierung generiert werden.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Ein Verweis auf eine Zeichenfolge, in der die Meldungsausgabe des Compilers gespeichert wird.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Ein Verweis auf eine Zeichenfolge, in der die Namen der aufgetretenen Fehler gespeichert werden.</param>
      <returns vsli:raw="The return value from the compiler.">Der Rückgabewert des Compilers.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified user token, current directory, and temporary files; then waits for the call to return, storing output and error information from the compiler in the specified strings.">Führt den angegebenen Befehl mit den Angaben für das Benutzertoken, das aktuelle Verzeichnis und die temporären Dateien aus und wartet dann auf das Beenden des Aufrufs, wobei die Ausgabe und die Fehlerinformationen des Compilers in den angegebenen Zeichenfolgen gespeichert werden.</summary>
      <param name="userToken" vsli:raw="The token to start the compiler process with.">Das Token, mit dem der Compilerprozess gestartet wird.</param>
      <param name="cmd" vsli:raw="The command to execute.">Der auszuführende Befehl.</param>
      <param name="currentDir" vsli:raw="The directory to start the process in.">Das Verzeichnis, in dem der Prozess gestartet werden soll.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Eine <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, mit der Verweise auf temporäre Dateien verwaltet und gespeichert werden, die während der Kompilierung generiert werden.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Ein Verweis auf eine Zeichenfolge, in der die Meldungsausgabe des Compilers gespeichert wird.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Ein Verweis auf eine Zeichenfolge, in der die Namen der aufgetretenen Fehler gespeichert werden.</param>
      <returns vsli:raw="The return value from the compiler.">Der Rückgabewert des Compilers.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified temporary files and waits for the call to return, storing output and error information from the compiler in the specified strings.">Führt den angegebenen Befehl mit den angegebenen temporären Dateien aus und wartet auf das Beenden des Aufrufs, wobei die Ausgabe und die Fehlerinformationen des Compilers in den angegebenen Zeichenfolgen gespeichert werden.</summary>
      <param name="cmd" vsli:raw="The command to execute.">Der auszuführende Befehl.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Eine <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, mit der Verweise auf temporäre Dateien verwaltet und gespeichert werden, die während der Kompilierung generiert werden.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Ein Verweis auf eine Zeichenfolge, in der die Meldungsausgabe des Compilers gespeichert wird.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Ein Verweis auf eine Zeichenfolge, in der die Namen der aufgetretenen Fehler gespeichert werden.</param>
      <returns vsli:raw="The return value from the compiler.">Der Rückgabewert des Compilers.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified current directory and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.">Führt den angegebenen Befehl mit dem angegebenen aktuellen Verzeichnis und den temporären Dateien aus und wartet auf das Beenden des Aufrufs, wobei die Ausgabe und die Fehlerinformationen des Compilers in den angegebenen Zeichenfolgen gespeichert werden.</summary>
      <param name="cmd" vsli:raw="The command to execute.">Der auszuführende Befehl.</param>
      <param name="currentDir" vsli:raw="The current directory.">Das aktuelle Verzeichnis.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Eine <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, mit der Verweise auf temporäre Dateien verwaltet und gespeichert werden, die während der Kompilierung generiert werden.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Ein Verweis auf eine Zeichenfolge, in der die Meldungsausgabe des Compilers gespeichert wird.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Ein Verweis auf eine Zeichenfolge, in der die Namen der aufgetretenen Fehler gespeichert werden.</param>
      <returns vsli:raw="The return value from the compiler.">Der Rückgabewert des Compilers.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary vsli:raw="Defines identifiers used to determine whether a code generator supports certain types of code elements.">Definiert Bezeichner, mit denen bestimmt wird, ob ein Code-Generator bestimmte Typen von Codeelementen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary vsli:raw="Indicates the generator supports arrays of arrays.">Gibt den Generator an, der Arrays von Arrays unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary vsli:raw="Indicates the generator supports assembly attributes.">Gibt den Generator an, der Assemblyattribute unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary vsli:raw="Indicates the generator supports chained constructor arguments.">Gibt den Generator an, der verkettete Konstruktorargumente unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary vsli:raw="Indicates the generator supports complex expressions.">Gibt den Generator an, der komplexe Ausdrücke unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary vsli:raw="Indicates the generator supports delegate declarations.">Gibt den Generator an, der Delegatendeklarationen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary vsli:raw="Indicates the generator supports enumeration declarations.">Gibt den Generator an, der Enumerationsdeklarationen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary vsli:raw="Indicates the generator supports event declarations.">Gibt den Generator an, der Ereignisdeklarationen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary vsli:raw="Indicates the generator supports the declaration of indexer properties.">Gibt den Generator an, der das Deklarieren von Indexereigenschaften unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary vsli:raw="Indicates the generator supports interface declarations.">Gibt den Generator an, der Schnittstellendeklarationen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary vsli:raw="Indicates the generator supports value type declarations.">Gibt den Generator an, der Werttypdeklarationen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary vsli:raw="Indicates the generator supports a program entry point method designation. This is used when building executables.">Gibt den Generator an, der das Bezeichnen einer Methode für den Programmeinstiegspunkt unterstützt. Dies wird beim Erstellen von ausführbaren Dateien verwendet.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary vsli:raw="Indicates the generator supports generic type declarations.">Gibt den Generator an, der generische Typdeklarationen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary vsli:raw="Indicates the generator supports generic type references.">Gibt den Generator an, der generische Typverweise unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary vsli:raw="Indicates the generator supports goto statements.">Gibt den Generator an, der goto-Anweisungen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary vsli:raw="Indicates the generator supports referencing multidimensional arrays. Currently, the CodeDom cannot be used to instantiate multidimensional arrays.">Gibt den Generator an, der Verweise auf mehrdimensionale Arrays unterstützt. Derzeit können mit CodeDom keine mehrdimensionalen Arrays instanziiert werden.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary vsli:raw="Indicates the generator supports the declaration of members that implement multiple interfaces.">Gibt den Generator an, der das Deklarieren von Membern unterstützt, die mehrere Schnittstellen implementieren.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary vsli:raw="Indicates the generator supports the declaration of nested types.">Gibt den Generator an, der das Deklarieren von geschachtelten Typen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary vsli:raw="Indicates the generator supports parameter attributes.">Gibt den Generator an, der Parameterattribute unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary vsli:raw="Indicates the generator supports partial type declarations.">Gibt den Generator an, der partielle Typdeklarationen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary vsli:raw="Indicates the generator supports public static members.">Gibt den Generator an, der öffentliche statische Member unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary vsli:raw="Indicates the generator supports reference and out parameters.">Gibt den Generator an, der Verweis- und Out-Parameter unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary vsli:raw="Indicates the generator supports compilation with .NET resources. These can be default resources compiled directly into an assembly, or resources referenced in a satellite assembly.">Gibt an, dass der Generator die Kompilierung mit .NET Framework-Ressourcen unterstützt. Dabei kann es sich im Standardressourcen handeln, die direkt in eine Assembly kompiliert werden, oder um Ressourcen, auf die in einer Satellitenassembly verwiesen wird.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary vsli:raw="Indicates the generator supports return type attribute declarations.">Gibt den Generator an, der Attributdeklarationen von Rückgabetypen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary vsli:raw="Indicates the generator supports static constructors.">Gibt den Generator an, der statische Konstruktoren unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary vsli:raw="Indicates the generator supports &lt;c&gt;try-catch&lt;/c&gt; statements.">Gibt den Generator an, der <see langword="try...catch" />-Anweisungen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary vsli:raw="Indicates the generator supports compilation with Win32 resources.">Gibt den Generator an, der die Kompilierung mit Win32-Ressourcen unterstützt.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary vsli:raw="Defines an interface for invoking compilation of source code or a CodeDOM tree using a specific compiler.">Definiert eine Schnittstelle zum Aufrufen der Kompilierung eines Quellcodes oder einer CodeDOM-Struktur mit einem bestimmten Compiler.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Compiles an assembly from the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; tree contained in the specified &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;, using the specified compiler settings.">Kompiliert eine Assembly aus der <see cref="N:System.CodeDom" />-Struktur in der angegebenen <see cref="T:System.CodeDom.CodeCompileUnit" /> mit den angegebenen Compilereinstellungen.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
      <param name="compilationUnit" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, die den zu kompilierenden Code angibt.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles an assembly based on the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; trees contained in the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects, using the specified compiler settings.">Kompiliert eine Assembly auf Grundlage der <see cref="N:System.CodeDom" />-Strukturen im angegebenen Array von <see cref="T:System.CodeDom.CodeCompileUnit" />-Objekten mit den angegebenen Compilereinstellungen.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
      <param name="compilationUnits" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">Ein Array vom Typ <see cref="T:System.CodeDom.CodeCompileUnit" />, das den zu kompilierenden Code angibt.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles an assembly from the source code contained within the specified file, using the specified compiler settings.">Kompiliert eine Assembly aus dem in der angegebenen Datei enthaltenen Quellcode mit den angegebenen Compilereinstellungen.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
      <param name="fileName" vsli:raw="The file name of the file that contains the source code to compile.">Der Dateiname der Datei, die den zu kompilierenden Quellcode enthält.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the source code contained within the specified files, using the specified compiler settings.">Kompiliert eine Assembly aus dem in den angegebenen Dateien enthaltenen Quellcode mit den angegebenen Compilereinstellungen.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
      <param name="fileNames" vsli:raw="The file names of the files to compile.">Die Dateinamen der zu kompilierenden Dateien.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles an assembly from the specified string containing source code, using the specified compiler settings.">Kompiliert eine Assembly aus der angegebenen Zeichenfolge mit Quellcode unter Verwendung der angegebenen Compilereinstellungen.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
      <param name="source" vsli:raw="The source code to compile.">Der zu kompilierende Quellcode.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.">Kompiliert eine Assembly aus dem angegebenen Array von Zeichenfolgen mit Quellcode und unter Verwendung der angegebenen Compilereinstellungen.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
      <param name="sources" vsli:raw="The source code strings to compile.">Die zu kompilierenden Quellcodezeichenfolgen.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary vsli:raw="Defines an interface for generating code.">Definiert eine Schnittstelle zum Generieren von Code.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Erstellt einen mit einem Escapezeichen versehenen Bezeichner für den angegebenen Wert.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">Die Zeichenfolge, für die ein mit einem Escapezeichen versehener Bezeichner generiert werden soll.</param>
      <returns vsli:raw="The escaped identifier for the value.">Der mit einem Escapezeichen versehene Bezeichner für den Wert.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Erstellt einen gültigen Bezeichner für den angegebenen Wert.</summary>
      <param name="value" vsli:raw="The string to generate a valid identifier for.">Die Zeichenfolge, für die ein gültiger Bezeichner generiert werden soll.</param>
      <returns vsli:raw="A valid identifier for the specified value.">Ein gültiger Bezeichner für den angegebenen Wert.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.">Generiert Code für die angegebene CodeDOM-Kompilierungseinheit (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; to generate code for.">Ein <see cref="T:System.CodeDom.CodeCompileUnit" />, für den Code generiert werden soll.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">Der <see cref="T:System.IO.TextWriter" />, an den Code ausgegeben werden soll.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.">Generiert Code für den angegebenen CodeDOM-Ausdruck (Code Document Object Model) und gibt diesen an den angegebenen TextWriter aus.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to generate code for.">Ein <see cref="T:System.CodeDom.CodeExpression" />, der den Ausdruck angibt, für den Code generiert werden soll.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">Der <see cref="T:System.IO.TextWriter" />, an den Code ausgegeben werden soll.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.">Generiert Code für den angegebenen CodeDOM-Namespace (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; that indicates the namespace to generate code for.">Ein <see cref="T:System.CodeDom.CodeNamespace" />, der den Namespace angibt, für den Code generiert werden soll.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">Der <see cref="T:System.IO.TextWriter" />, an den Code ausgegeben werden soll.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.">Generiert Code für die angegebene CodeDOM-Anweisung (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the CodeDOM elements to translate.">Ein <see cref="T:System.CodeDom.CodeStatement" />, das die zu übersetzenden CodeDOM-Elemente enthält.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">Der <see cref="T:System.IO.TextWriter" />, an den Code ausgegeben werden soll.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.">Generiert Code für die angegebene CodeDOM-Typdeklaration (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; that indicates the type to generate code for.">Eine <see cref="T:System.CodeDom.CodeTypeDeclaration" />, die den Typ angibt, für den Code generiert werden soll.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">Der <see cref="T:System.IO.TextWriter" />, an den Code ausgegeben werden soll.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Ruft den durch die angegebene <see cref="T:System.CodeDom.CodeTypeReference" /> angegebenen Typ ab.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type to return.">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den zurückzugebenden Typ angibt.</param>
      <returns vsli:raw="A text representation of the specified type for the language this code generator is designed to generate code in. For example, in Visual Basic, passing in type System.Int32 will return &quot;Integer&quot;.">Eine Textdarstellung des angegebenen Typs für die Sprache, für die dieser Code-Generator Code generieren kann. Durch Übergeben des Typs System.Int32 in Visual Basic wird z. B. "Integer" zurückgegeben.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value that indicates whether the specified value is a valid identifier for the current language.">Ruft einen Wert ab, der angibt, ob der angegebene Wert ein gültiger Bezeichner für die aktuelle Sprache ist.</summary>
      <param name="value" vsli:raw="The value to test for being a valid identifier.">Der Wert, der auf Gültigkeit als Bezeichner getestet werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der <paramref name="value" />-Parameter ein gültiger Bezeichner ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the generator provides support for the language features represented by the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object.">Ruft einen Wert ab, der angibt, ob der Generator die vom angegebenen <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />-Objekt dargestellten Sprachfunktionen unterstützt.</summary>
      <param name="supports" vsli:raw="The capabilities to test the generator for.">Die Funktionen, auf die der Generator getestet werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified capabilities are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die angegebenen Funktionen unterstützt werden, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified value is not a valid identifier.">Löst eine Ausnahme aus, wenn der angegebene Wert kein gültiger Bezeichner ist.</summary>
      <param name="value" vsli:raw="The identifier to validate.">Der zu überprüfende Bezeichner.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The identifier is not valid.">Der Bezeichner ist ungültig.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary vsli:raw="Defines an interface for parsing code into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Definiert eine Schnittstelle zum Analysieren von Code in eine <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary vsli:raw="When implemented in a derived class, compiles the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Bei der Implementierung in einer abgeleiteten Klasse wird der angegebene Textstream in eine <see cref="T:System.CodeDom.CodeCompileUnit" /> kompiliert.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; that can be used to read the code to be compiled.">Ein <see cref="T:System.IO.TextReader" />, der zum Lesen des zu kompilierenden Codes verwendet werden kann.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that contains a representation of the parsed code.">Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, die eine Darstellung des analysierten Code enthält.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary vsli:raw="Defines identifiers that indicate special features of a language.">Definiert Bezeichner für die Angabe spezieller Features einer Sprache.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary vsli:raw="The language is case-insensitive.">Bei der Sprache wird die Groß- und Kleinschreibung nicht berücksichtigt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary vsli:raw="The language has default characteristics.">Die Spache verfügt über Standardmerkmale.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary vsli:raw="Represents a collection of temporary files.">Stellt eine Auflistung temporärer Dateien dar.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class with default values.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.TempFileCollection" />-Klasse mit Standardwerten.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class using the specified temporary directory that is set to delete the temporary files after their generation and use, by default.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.TempFileCollection" />-Klasse mit dem angegebenen temporären Verzeichnis, für das festgelegt wurde, dass temporäre Dateien nach der Generierung und Verwendung standardmäßig gelöscht werden.</summary>
      <param name="tempDir" vsli:raw="A path to the temporary directory to use for storing the temporary files.">Ein Pfad zu dem temporären Verzeichnis, in dem die temporären Dateien gespeichert werden.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class using the specified temporary directory and specified value indicating whether to keep or delete the temporary files after their generation and use, by default.">Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.TempFileCollection" />-Klasse mit den Angaben für das temporäre Verzeichnis und dem Wert, der angibt, ob die temporären Dateien nach der Generierung und Verwendung standardmäßig gelöscht oder beibehalten werden.</summary>
      <param name="tempDir" vsli:raw="A path to the temporary directory to use for storing the temporary files.">Ein Pfad zu dem temporären Verzeichnis, in dem die temporären Dateien gespeichert werden.</param>
      <param name="keepFiles" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the temporary files should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the temporary files should be deleted.">
        <see langword="true" />, wenn die temporären Dateien nach der Verwendung beibehalten, <see langword="false" />, wenn sie gelöscht werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary vsli:raw="Adds a file name with the specified file name extension to the collection.">Fügt der Auflistung einen Dateinamen mit der angegebenen Dateinamenerweiterung hinzu.</summary>
      <param name="fileExtension" vsli:raw="The file name extension for the auto-generated temporary file name to add to the collection.">Die Dateinamenerweiterung für den automatisch generierten temporären Dateinamen, der der Auflistung hinzugefügt werden soll.</param>
      <returns vsli:raw="A file name with the specified extension that was just added to the collection.">Ein Dateiname mit der angegebenen Erweiterung, der gerade der Auflistung hinzugefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary vsli:raw="Adds a file name with the specified file name extension to the collection, using the specified value indicating whether the file should be deleted or retained.">Fügt der Auflistung einen Dateinamen mit der angegebenen Dateinamenerweiterung unter Verwendung des angegebenen Wertes hinzu, der angibt, ob die Datei gelöscht oder beibehalten werden soll.</summary>
      <param name="fileExtension" vsli:raw="The file name extension for the auto-generated temporary file name to add to the collection.">Die Dateinamenerweiterung für den automatisch generierten temporären Dateinamen, der der Auflistung hinzugefügt werden soll.</param>
      <param name="keepFile" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the file should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the file should be deleted.">
        <see langword="true" />, wenn die Datei nach der Verwendung beibehalten, <see langword="false" />, wenn sie gelöscht werden soll.</param>
      <returns vsli:raw="A file name with the specified extension that was just added to the collection.">Ein Dateiname mit der angegebenen Erweiterung, der gerade der Auflistung hinzugefügt wurde.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileExtension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.">Der <paramref name="fileExtension" /> ist <see langword="null" /> oder eine leere Zeichenfolge.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary vsli:raw="Adds the specified file to the collection, using the specified value indicating whether to keep the file after the collection is disposed or when the &lt;see cref=&quot;M:System.CodeDom.Compiler.TempFileCollection.Delete&quot; /&gt; method is called.">Fügt der Auflistung die Datei mit dem angegebenen Wert hinzu, der festlegt, ob die Datei nach dem Löschen der Auflistung oder dem Aufruf der <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" />-Methode beibehalten werden soll.</summary>
      <param name="fileName" vsli:raw="The name of the file to add to the collection.">Der Name der Datei, die der Auflistung hinzugefügt werden soll.</param>
      <param name="keepFile" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the file should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the file should be deleted.">
        <see langword="true" />, wenn die Datei nach der Verwendung beibehalten, <see langword="false" />, wenn sie gelöscht werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileName&quot; /&gt; is a duplicate.">Der <paramref name="fileName" /> ist <see langword="null" /> oder eine leere Zeichenfolge.  

oder - 
"<paramref name="fileName" />" ist doppelt vorhanden.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary vsli:raw="Gets the full path to the base file name, without a file name extension, on the temporary directory path, that is used to generate temporary file names for the collection.">Ruft den vollständigen Pfad des Basisdateinamens ohne Dateinamenerweiterung im Pfad des temporären Verzeichnisses ab, das zum Generieren von temporären Dateinamen für die Auflistung verwendet wird.</summary>
      <returns vsli:raw="The full path to the base file name, without a file name extension, on the temporary directory path, that is used to generate temporary file names for the collection.">Der vollständige Pfad des Basisdateinamens ohne Dateinamenerweiterung im Pfad des temporären Verzeichnisses, das zum Generieren von temporären Dateinamen für die Auflistung verwendet wird.</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="If the &lt;see cref=&quot;P:System.CodeDom.Compiler.TempFileCollection.BasePath&quot; /&gt; property has not been set or is set to &lt;see langword=&quot;null&quot; /&gt;, and &lt;see cref=&quot;F:System.Security.Permissions.FileIOPermissionAccess.AllAccess&quot; /&gt; is not granted for the temporary directory indicated by the &lt;see cref=&quot;P:System.CodeDom.Compiler.TempFileCollection.TempDir&quot; /&gt; property.">Wenn die <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" />-Eigenschaft nicht oder auf <see langword="null" /> festgelegt wurde und <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> nicht für das von der <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" />-Eigenschaft angegebene temporäre Verzeichnis gewährt wird.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary vsli:raw="Copies the members of the collection to the specified string, beginning at the specified index.">Kopiert die Member der Auflistung beginnend am angegebenen Index in die angegebene Zeichenfolge.</summary>
      <param name="fileNames" vsli:raw="The array of strings to copy to.">Das Array von Zeichenfolgen, in das kopiert werden soll.</param>
      <param name="start" vsli:raw="The index of the array to begin copying to.">Der Index des Arrays, an dem mit dem Kopieren begonnen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary vsli:raw="Gets the number of files in the collection.">Ruft die Anzahl der Dateien in der Auflistung ab.</summary>
      <returns vsli:raw="The number of files in the collection.">Die Anzahl der Dateien in der Auflistung.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary vsli:raw="Deletes the temporary files within this collection that were not marked to be kept.">Löscht die temporären Dateien in dieser Auflistung, die nicht für das Beibehalten markiert wurden.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; and optionally releases the managed resources.">Gibt die von <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary vsli:raw="Attempts to delete the temporary files before this object is reclaimed by garbage collection.">Versucht, die temporären Dateien zu löschen, bevor dieses Objekt von der Garbage Collection freigegeben wird.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that can enumerate the members of the collection.">Ruft einen Enumerator ab, der die Member der Auflistung aufzählen kann.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that contains the collection's members.">Ein <see cref="T:System.Collections.IEnumerator" />, der die Member der Auflistung enthält.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary vsli:raw="Gets or sets a value indicating whether to keep the files, by default, when the &lt;see cref=&quot;M:System.CodeDom.Compiler.TempFileCollection.Delete&quot; /&gt; method is called or the collection is disposed.">Ruft einen Wert ab, der angibt, ob die Dateien beim Aufrufen der <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" />-Methode oder beim Freigeben der Auflistung standardmäßig beibehalten werden sollen, oder legt diesen fest.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the files should be kept; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Dateien beibehalten werden sollen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at the specified index of the target array.">Kopiert die Elemente dieser Auflistung in ein Array, wobei am angegebenen Index des Zielarrays begonnen wird.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der <see cref="T:System.Collections.ICollection" /> kopierten Elemente ist. Für das <see cref="T:System.Array" /> muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="start" vsli:raw="The zero-based index in array at which copying begins.">Der nullbasierte Index im Array, ab dem kopiert wird.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Ruft die Anzahl der Elemente in der Auflistung ab.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Die Anzahl der Elemente, die in <see cref="T:System.Collections.ICollection" /> enthalten sind.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread safe).">Ruft einen Wert ab, der angibt, ob der Zugriff auf die Auflistung synchronisiert ist (threadsicher).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Zugriff auf das <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Ruft ein Objekt ab, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ein Objekt, mit dem der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Ein <see cref="T:System.Collections.IEnumerator" />, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary vsli:raw="Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.">Führt anwendungsspezifische Aufgaben durch, die mit der Freigabe, der Zurückgabe oder dem Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary vsli:raw="Gets the temporary directory to store the temporary files in.">Ruft das temporäre Verzeichnis zum Speichern der temporären Dateien ab.</summary>
      <returns vsli:raw="The temporary directory to store the temporary files in.">Das temporäre Verzeichnis zum Speichern der temporären Dateien.</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary vsli:raw="Defines identifiers used to indicate the direction of parameter and argument declarations.">Definiert Bezeichner, mit denen die Richtung von Parameter- und Argumentdeklarationen angegeben wird.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary vsli:raw="An incoming field.">Ein eingehendes Feld.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary vsli:raw="An outgoing field.">Ein ausgehendes Feld.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary vsli:raw="A field by reference.">Ein Feld als Verweis.</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary vsli:raw="Defines member attribute identifiers for class members.">Definiert Bezeichner für Memberattribute von Klassenmembern.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary vsli:raw="An abstract member.">Ein abstrakter Member.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary vsli:raw="An access mask.">Eine Zugriffsmaske.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary vsli:raw="A member that is accessible to any class within the same assembly.">Ein Member, auf den alle Klassen in der gleichen Assembly zugreifen können.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary vsli:raw="A constant member.">Ein konstanter Member.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary vsli:raw="A member that is accessible within the family of its class and derived classes.">Ein Member, auf den aus der Familie seiner Klasse und abgeleiteter Klassen zugegriffen werden kann.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary vsli:raw="A member that is accessible within its class, and derived classes in the same assembly.">Ein Member, auf den aus seiner Klasse und aus abgeleiteten Klassen in der gleichen Assembly zugegriffen werden kann.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary vsli:raw="A member that is accessible within its class, its derived classes in any assembly, and any class in the same assembly.">Ein Member, auf den aus seiner Klasse, aus abgeleiteten Klassen in einer beliebigen Assembly und aus allen Klassen in der gleichen Assembly zugegriffen werden kann.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary vsli:raw="A member that cannot be overridden in a derived class.">Ein Member, der in einer abgeleiteten Klasse nicht überschrieben werden kann.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary vsli:raw="A new member.">Ein new-Member.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary vsli:raw="An overloaded member. Some languages, such as Visual Basic, require overloaded members to be explicitly indicated.">Ein überladener Member. Bei einigen Sprachen wie Visual Basic müssen überladene Member explizit angegeben werden.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary vsli:raw="A member that overrides a base class member.">Ein Member, der einen Basisklassenmember überschreibt.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary vsli:raw="A private member.">Ein private-Member.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary vsli:raw="A public member.">Ein public-Member.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary vsli:raw="A scope mask.">Eine Gültigkeitsbereichsmaske.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary vsli:raw="A static member. In Visual Basic, this is equivalent to the &lt;see langword=&quot;Shared&quot; /&gt; keyword.">Ein statischer Member. Dies entspricht dem <see langword="Shared" />-Schlüsselwort in Visual Basic.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary vsli:raw="A VTable mask.">Eine VTable-Maske.</summary>
    </member>
  </members>
</doc>
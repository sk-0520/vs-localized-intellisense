<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Cryptography.Cng</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle">
      <summary>提供可被 Cryptography Next Generation (CNG) 物件使用的安全控制代碼。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor(System.IntPtr,System.Runtime.InteropServices.SafeHandle)">
      <summary>執行個體化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle" /> 類別的新執行個體。</summary>
      <param name="handle">要使用的既有控制代碼。 使用 <see cref="F:System.IntPtr.Zero" /> 傳回無效的控制代碼。</param>
      <param name="parentHandle">此 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle" /> 的父控制代碼。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parentHandle" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parentHandle" /> 已關閉。  
-或- 
 <paramref name="parentHandle" /> 無效。</exception>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeNCryptHandle.IsInvalid" />
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle">
      <summary>釋放 Cryptography Next Generation (CNG) 物件使用的控制代碼。</summary>
      <returns>如果成功釋放控制代碼，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle">
      <summary>釋放 Cryptography Next Generation (CNG) 物件使用的原生控制代碼。</summary>
      <returns>如果成功釋放控制代碼，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle">
      <summary>提供代表金鑰 (NCRYPT_KEY_HANDLE) 的安全控制代碼。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.#ctor(System.IntPtr,System.Runtime.InteropServices.SafeHandle)">
      <summary>執行個體化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle" /> 類別的新執行個體。</summary>
      <param name="handle">要使用的既有控制代碼。 使用 <see cref="F:System.IntPtr.Zero" /> 傳回無效的控制代碼。</param>
      <param name="parentHandle">此 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle" /> 的父控制代碼。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parentHandle" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parentHandle" /> 已關閉。  
-或- 
 <paramref name="parentHandle" /> 無效。</exception>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle">
      <summary>提供代表金鑰儲存提供者 (NCRYPT_PROV_HANDLE) 的安全控制代碼。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle">
      <summary>提供代表密碼協議值 (NCRYPT_SECRET_HANDLE) 的安全控制代碼。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Security.Cryptography.AesCng">
      <summary>提供進階加密標準 (AES) 演算法的新一代密碼編譯 (CNG) 實作。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.#ctor">
      <summary>使用暫時金鑰，初始化 <see cref="T:System.Security.Cryptography.AesCng" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.#ctor(System.String)">
      <summary>使用指定的金鑰名稱初始化 <see cref="T:System.Security.Cryptography.AesCng" /> 類別的新執行個體，其代表現有保存的 AES 金鑰。</summary>
      <param name="keyName">金鑰的名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider)">
      <summary>使用指定的金鑰名稱初始化 <see cref="T:System.Security.Cryptography.AesCng" /> 類別的新執行個體，其代表現有保存的 AES 金鑰和指定的金鑰儲存提供者 (KSP)。</summary>
      <param name="keyName">金鑰的名稱。</param>
      <param name="provider">包含金鑰的 KSP。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 為 <see langword="null" />。  
-或- 
 <paramref name="provider" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>使用指定的金鑰名稱初始化 <see cref="T:System.Security.Cryptography.AesCng" /> 類別的新執行個體，其代表現有保存的 AES 金鑰、指定的金鑰儲存提供者 (KSP)，以及金鑰開啟選項。</summary>
      <param name="keyName">金鑰的名稱。</param>
      <param name="provider">包含金鑰的 KSP。</param>
      <param name="openOptions">列舉值的位元組合，可指定開啟金鑰的選項，例如，金鑰是從何處開啟 (電腦或使用者存放裝置)，以及是否要隱藏 UI 提示。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 為 <see langword="null" />。  
-或- 
 <paramref name="provider" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.CreateDecryptor">
      <summary>使用目前的索引鍵和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) 建立對稱 AES 解密子物件。</summary>
      <returns>對稱 AES 解密子物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的金鑰和初始化向量 (IV) 建立對稱 AES 解密子物件。</summary>
      <param name="rgbKey">AES 演算法所用的祕密金鑰。 金鑰大小必須是 128、192 或 256 位元。</param>
      <param name="rgbIV">AES 演算法所用的初始化向量。</param>
      <returns>對稱 AES 解密子物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rgbKey" /> 的大小不適用於此演算法。  
-或- 
 <paramref name="rgbIV" /> 的大小不符合此演算法的區塊大小。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 是此演算法的已知弱式金鑰，因此無法使用。  
-或- 
 <paramref name="rgbIV" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.CreateEncryptor">
      <summary>使用目前的索引鍵和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) 建立對稱 AES 加密子物件。</summary>
      <returns>對稱 AES 加密子物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的金鑰和初始化向量 (IV) 建立對稱 AES 加密子物件。</summary>
      <param name="rgbKey">AES 演算法所用的祕密金鑰。 金鑰大小必須是 128、192 或 256 位元。</param>
      <param name="rgbIV">AES 演算法所用的初始化向量。</param>
      <returns>對稱 AES 加密子物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rgbKey" /> 的大小不適用於此演算法。  
-或- 
 <paramref name="rgbIV" /> 的大小不符合此演算法的區塊大小。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 是此演算法的已知弱式金鑰，因此無法使用。  
-或- 
 <paramref name="rgbIV" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.GenerateIV">
      <summary>產生 AES 演算法所用的隨機初始化向量 (IV)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCng.GenerateKey">
      <summary>產生 AES 演算法所用的隨機金鑰。</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesCng.Key">
      <summary>取得或設定 <see cref="T:System.Security.Cryptography.AesCng" /> 演算法的金鑰。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.AesCng" /> 演算法的金鑰。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCng.KeySize">
      <summary>取得或設定 <see cref="T:System.Security.Cryptography.AesCng" /> 演算法使用之祕密金鑰的大小 (以位元為單位)。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.AesCng" /> 演算法使用之祕密金鑰的大小 (以位元為單位)。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngAlgorithm">
      <summary>封裝加密演算法的名稱。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 類別的新執行個體。</summary>
      <param name="algorithm">要初始化的演算法名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="algorithm" /> 參數長度為 0 (零)。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Algorithm">
      <summary>取得目前的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件指定的演算法名稱。</summary>
      <returns>內嵌的演算法名稱。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellman">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件，該物件指定橢圓曲線 Diffie-Hellman (ECDH) 金鑰交換演算法，而其曲線是透過金鑰屬性來描述。</summary>
      <returns>物件，指定 ECDH 金鑰交換演算法，而其曲線是透過金鑰屬性來描述。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件，該物件指定使用 P-256 曲線的 Elliptic Curve Diffie-Hellman (ECDH) 金鑰交換演算法。</summary>
      <returns>指定使用 P-256 曲線的 ECDH 演算法的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件，該物件指定使用 P-384 曲線的 Elliptic Curve Diffie-Hellman (ECDH) 金鑰交換演算法。</summary>
      <returns>指定使用 P-384 曲線的 ECDH 演算法的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件，該物件指定使用 P-521 曲線的 Elliptic Curve Diffie-Hellman (ECDH) 金鑰交換演算法。</summary>
      <returns>指定使用 P-521 曲線的 ECDH 演算法的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsa">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件，該物件指定橢圓曲線數位簽章演算法 (ECDSA)，而其曲線是透過索引鍵屬性來描述。</summary>
      <returns>指定 ECDSA 的物件，而其曲線是透過索引鍵屬性來描述。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP256">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件，該物件指定使用 P-256 曲線的 Elliptic Curve Digital Signature Algorithm (ECDSA)。</summary>
      <returns>指定使用 P-256 曲線的 ECDSA 演算法的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP384">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件，該物件指定使用 P-384 曲線的 Elliptic Curve Digital Signature Algorithm (ECDSA)。</summary>
      <returns>指定使用 P-384 曲線的 ECDSA 演算法的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.ECDsaP521">
      <summary>取得新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件，該物件指定使用 P-521 曲線的 Elliptic Curve Digital Signature Algorithm (ECDSA)。</summary>
      <returns>指定使用 P-521 曲線的 ECDSA 演算法的物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Object)">
      <summary>將指定的物件與目前的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件相比較。</summary>
      <param name="obj">要與目前的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 參數為 <see cref="T:System.Security.Cryptography.CngAlgorithm" />，其指定與目前物件相同的演算法，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)">
      <summary>將指定的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件與目前的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件相比較。</summary>
      <param name="other">要與目前的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件比較的物件。</param>
      <returns>如果 <paramref name="other" /> 參數與目前的物件指定相同的演算法，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.GetHashCode">
      <summary>針對目前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件中內嵌的演算法名稱產生雜湊值。</summary>
      <returns>內嵌演算法名稱的雜湊值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.MD5">
      <summary>取得新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件，該物件指定 Message Digest 5 (MD5) 雜湊演算法。</summary>
      <returns>指定 MD5 演算法的物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
      <summary>判斷兩個 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件是否指定相同的演算法名稱。</summary>
      <param name="left">指定演算法名稱的物件。</param>
      <param name="right">另一個物件，要與 <paramref name="left" /> 參數所識別的物件比較。</param>
      <returns>如果兩個物件指定相同的演算法名稱，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)">
      <summary>判斷兩個 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件是否未指定相同的演算法。</summary>
      <param name="left">指定演算法名稱的物件。</param>
      <param name="right">另一個物件，要與 <paramref name="left" /> 參數所識別的物件比較。</param>
      <returns>如果兩個物件未指定相同的演算法名稱，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Rsa">
      <summary>取得新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件，該物件指定 RSA 雜湊演算法。</summary>
      <returns>指定 RSA 演算法的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha1">
      <summary>取得新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件，該物件指定 Secure Hash Algorithm 1 (SHA-1) 演算法。</summary>
      <returns>指定 SHA-1 演算法的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha256">
      <summary>取得新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件，該物件指定 Secure Hash Algorithm 256 (SHA-256) 演算法。</summary>
      <returns>指定 SHA-256 演算法的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha384">
      <summary>取得新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件，該物件指定 Secure Hash Algorithm 384 (SHA-384) 演算法。</summary>
      <returns>指定 SHA-384 演算法的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithm.Sha512">
      <summary>取得新的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件，該物件指定 Secure Hash Algorithm 512 (SHA-512) 演算法。</summary>
      <returns>指定 SHA-512 演算法的物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithm.ToString">
      <summary>取得目前的 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件指定的演算法名稱。</summary>
      <returns>內嵌的演算法名稱。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngAlgorithmGroup">
      <summary>封裝加密演算法群組的名稱。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 類別的新執行個體。</summary>
      <param name="algorithmGroup">要初始化的演算法群組名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithmGroup" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="algorithmGroup" /> 參數長度為 0 (零)。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.AlgorithmGroup">
      <summary>取得目前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件所指定的演算法群組名稱。</summary>
      <returns>內嵌的演算法群組名稱。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.DiffieHellman">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 物件，指定 Diffie-Hellman 系列的演算法。</summary>
      <returns>指定 Diffie-Hellman 系列演算法的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Dsa">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 物件，指定 Digital Signature Algorithm (DSA) 系列的演算法。</summary>
      <returns>指定 DSA 系列演算法的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 物件，指定 Elliptic Curve Diffie-Hellman (ECDH) 系列的演算法。</summary>
      <returns>指定 ECDH 系列演算法的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.ECDsa">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 物件，指定 Elliptic Curve Digital Signature Algorithm (ECDSA) 系列的演算法。</summary>
      <returns>指定 ECDSA 系列演算法的物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Object)">
      <summary>將指定的物件與目前的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 物件相比較。</summary>
      <param name="obj">要與目前的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 物件比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 參數為 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" />，並且指定的演算法群組與目前物件相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.Equals(System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>將指定的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 物件與目前的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 物件相比較。</summary>
      <param name="other">要與目前的 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 物件比較的物件。</param>
      <returns>如果 <paramref name="other" /> 參數指定的演算法群組與目前物件相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.GetHashCode">
      <summary>針對目前 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 物件中內嵌的演算法群組名稱產生雜湊值。</summary>
      <returns>內嵌演算法群組名稱的雜湊值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Equality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>判斷兩個 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 物件是否指定相同的演算法群組。</summary>
      <param name="left">指定演算法群組的物件。</param>
      <param name="right">另一個物件，要與 <paramref name="left" /> 參數所識別的物件比較。</param>
      <returns>如果兩個物件指定相同的演算法群組，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.op_Inequality(System.Security.Cryptography.CngAlgorithmGroup,System.Security.Cryptography.CngAlgorithmGroup)">
      <summary>判斷兩個 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 物件是否未指定相同的演算法群組。</summary>
      <param name="left">指定演算法群組的物件。</param>
      <param name="right">另一個物件，要與 <paramref name="left" /> 參數所識別的物件比較。</param>
      <returns>如果兩個物件未指定相同的演算法群組，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngAlgorithmGroup.Rsa">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngAlgorithmGroup" /> 物件，指定 Rivest-Shamir-Adleman (RSA) 系列的演算法。</summary>
      <returns>指定 RSA 系列演算法的物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngAlgorithmGroup.ToString">
      <summary>取得目前 <see cref="T:System.Security.Cryptography.CngAlgorithm" /> 物件所指定的演算法群組名稱。</summary>
      <returns>內嵌的演算法群組名稱。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngExportPolicies">
      <summary>指定金鑰的金鑰匯出原則。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowArchiving">
      <summary>私密金鑰可基於封存目的匯出一次。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowExport">
      <summary>私密金鑰可以匯出多次。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextArchiving">
      <summary>私密金鑰可匯出為純文字一次。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.AllowPlaintextExport">
      <summary>私密金鑰可多次匯出為純文字。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngExportPolicies.None">
      <summary>未建立匯出原則。 允許不受任何限制匯出金鑰。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKey">
      <summary>定義搭配 Cryptography Next Generation (CNG) 物件使用的金鑰核心功能。</summary>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Algorithm">
      <summary>取得金鑰使用的演算法。</summary>
      <returns>指定加密演算法名稱的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.AlgorithmGroup">
      <summary>取得金鑰使用的演算法群組。</summary>
      <returns>指定加密演算法群組名稱的物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)">
      <summary>建立 <see cref="T:System.Security.Cryptography.CngKey" /> 物件，可搭配指定的演算法使用。</summary>
      <param name="algorithm">將與金鑰一起使用的演算法。</param>
      <returns>暫時的金鑰。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)">
      <summary>建立具名的 <see cref="T:System.Security.Cryptography.CngKey" /> 物件，提供指定的演算法。</summary>
      <param name="algorithm">將與金鑰一起使用的演算法。</param>
      <param name="keyName">金鑰名稱。 如果未提供名稱，則金鑰不會持續存在。</param>
      <returns>持續的或暫時的金鑰，會提供指定的演算法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)">
      <summary>建立具名的 <see cref="T:System.Security.Cryptography.CngKey" /> 物件，使用提供的金鑰建立參數提供指定的演算法。</summary>
      <param name="algorithm">將與金鑰一起使用的演算法。</param>
      <param name="keyName">金鑰名稱。 如果未提供名稱，則金鑰不會持續存在。</param>
      <param name="creationParameters">物件，會指定方法的進階參數，包括 <see cref="T:System.Security.Cryptography.CngProvider" />。</param>
      <returns>持續的或暫時的金鑰，會提供指定的演算法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Delete">
      <summary>移除與物件相關聯的金鑰。</summary>
      <exception cref="T:System.ObjectDisposedException">嘗試存取刪除的金鑰。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Dispose">
      <summary>釋放 <see cref="T:System.Security.Cryptography.CngKey" /> 類別目前的執行個體所使用的全部資源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String)">
      <summary>查看具名金鑰是否存在預設的金鑰儲存提供者 (KSP) 中。</summary>
      <param name="keyName">金鑰名稱。</param>
      <returns>如果具名金鑰存在預設的 KSP 中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)">
      <summary>查看具名金鑰是否存在指定的金鑰儲存提供者 (KSP) 中。</summary>
      <param name="keyName">金鑰名稱。</param>
      <param name="provider">要檢查其中是否有金鑰的 KSP。</param>
      <returns>如果具名金鑰存在指定的提供者中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 或 <paramref name="provider" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>根據指定的選項，查看具名金鑰是否存在指定的金鑰儲存提供者 (KSP) 中。</summary>
      <param name="keyName">金鑰名稱。</param>
      <param name="provider">要在其中搜尋是否有金鑰的 KSP。</param>
      <param name="options">列舉型別值的位元組合，指定開啟金鑰的選項。</param>
      <returns>如果具名金鑰存在指定的提供者中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 或 <paramref name="provider" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>以指定的格式將金鑰內容匯出到 BLOB 中。</summary>
      <param name="format">指定金鑰 BLOB 格式的物件。</param>
      <returns>BLOB，包含指定格式的金鑰內容。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。 通常 <see cref="P:System.Security.Cryptography.CngKey.ExportPolicy" /> 不會允許匯出金鑰。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ExportPolicy">
      <summary>取得金鑰使用的匯出原則。</summary>
      <returns>指定金鑰匯出原則的物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
      <summary>取得屬性，收到指定名稱和一組屬性選項。</summary>
      <param name="name">所需屬性的名稱。</param>
      <param name="options">列舉型別值的位元組合，指定具名屬性的選項。</param>
      <returns>物件，包含指定屬性未經處理的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Handle">
      <summary>取得代表原生金鑰 (NCRYPT_KEY_HANDLE) 的安全控制代碼。</summary>
      <returns>代表金鑰的安全控制代碼。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)">
      <summary>查看指定的屬性是否存在金鑰上。</summary>
      <param name="name">要檢查的屬性名稱。</param>
      <param name="options">列舉型別值的位元組合，指定具名屬性的選項。</param>
      <returns>如果找到指定的屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>藉由將指定的金鑰內容匯入預設的金鑰儲存提供者 (KSP)，並使用指定的格式建立新的金鑰。</summary>
      <param name="keyBlob">此陣列包含金鑰資訊。</param>
      <param name="format">物件，指定 <paramref name="keyBlob" /> 陣列的格式。</param>
      <returns>新的金鑰。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> 或 <paramref name="format" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)">
      <summary>使用指定的格式將指定的金鑰內容匯入指定的金鑰儲存提供者 (KSP)，以建立新的金鑰。</summary>
      <param name="keyBlob">此陣列包含金鑰資訊。</param>
      <param name="format">物件，指定 <paramref name="keyBlob" /> 陣列的格式。</param>
      <param name="provider">KSP。</param>
      <returns>新的金鑰。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" />、<paramref name="format" /> 或 <paramref name="provider" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.IsEphemeral">
      <summary>取得金鑰的持續性狀態。</summary>
      <returns>如果金鑰是暫時的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.IsMachineKey">
      <summary>取得金鑰的範圍 (電腦或使用者)。</summary>
      <returns>如果金鑰是以電腦為基礎提供，則為 <see langword="true" />；如果金鑰僅供目前的使用者提供，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeyName">
      <summary>取得金鑰的名稱。</summary>
      <returns>金鑰的名稱。 如果金鑰是暫時的，則值為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeySize">
      <summary>取得位元為單位的金鑰大小。</summary>
      <returns>金鑰的大小 (以位元為單位)。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.KeyUsage">
      <summary>取得金鑰指定的密碼編譯作業。</summary>
      <returns>列舉型別值的位元組合，指定金鑰的用途。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)">
      <summary>使用現有金鑰的控制代碼建立 <see cref="T:System.Security.Cryptography.CngKey" /> 物件的執行個體。</summary>
      <param name="keyHandle">現有金鑰的控制代碼。</param>
      <param name="keyHandleOpenOptions">其中一個列舉值，指出 <paramref name="keyHandle" /> 是否代表暫時金鑰或具名金鑰。</param>
      <returns>現有金鑰。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyHandle" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyHandle" /> 無效或不正確，或是已關閉。 如果金鑰是由 Common Language Runtime (CLR) 建立的暫時金鑰，但是未指定 <see cref="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey" /> 值，則同樣會擲回這個例外狀況。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String)">
      <summary>建立代表現有具名金鑰的 <see cref="T:System.Security.Cryptography.CngKey" /> 物件執行個體。</summary>
      <param name="keyName">金鑰的名稱。</param>
      <returns>現有金鑰。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)">
      <summary>使用指定的金鑰儲存提供者 (KSP) 建立代表現有具名金鑰的 <see cref="T:System.Security.Cryptography.CngKey" /> 物件執行個體。</summary>
      <param name="keyName">金鑰的名稱。</param>
      <param name="provider">包含金鑰的 KSP。</param>
      <returns>現有金鑰。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 或 <paramref name="provider" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>使用指定的金鑰儲存提供者 (KSP) 和金鑰開啟選項，建立代表現有具名金鑰的 <see cref="T:System.Security.Cryptography.CngKey" /> 物件執行個體。</summary>
      <param name="keyName">金鑰的名稱。</param>
      <param name="provider">包含金鑰的 KSP。</param>
      <param name="openOptions">列舉值的位元組合，可指定開啟金鑰的選項，例如，金鑰是從何處開啟 (電腦或使用者存放裝置)，以及是否要隱藏 UI 提示。</param>
      <returns>現有金鑰。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 或 <paramref name="provider" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ParentWindowHandle">
      <summary>取得或設定視窗控制代碼 (HWND)，用於存取金鑰所造成的使用者介面 (UI) 提示。</summary>
      <returns>金鑰的父視窗控制代碼。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.Provider">
      <summary>取得管理金鑰的金鑰儲存提供者 (KSP)。</summary>
      <returns>管理金鑰的 KSP。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.ProviderHandle">
      <summary>取得金鑰儲存提供者 (KSP) 的原生控制代碼 (NCRYPT_PROV_HANDLE)。</summary>
      <returns>KSP 的控制代碼。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)">
      <summary>設定金鑰上的具名屬性。</summary>
      <param name="property">要設定的金鑰屬性。</param>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.UIPolicy">
      <summary>取得控制使用者介面 (UI) 用以存取金鑰的參數。</summary>
      <returns>物件，包含顯示 UI 的組態參數。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKey.UniqueName">
      <summary>取得金鑰的唯一名稱。</summary>
      <returns>金鑰的替代名稱。 如果金鑰是暫時的，則值為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyBlobFormat">
      <summary>指定搭配 Microsoft Cryptography Next Generation (CNG) 物件使用的金鑰 BLOB 格式。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.#ctor(System.String)">
      <summary>使用指定的格式初始化 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 類別的新執行個體。</summary>
      <param name="format">要初始化的金鑰 BLOB 格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="format" /> 參數長度為 0 (零)。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccFullPrivateBlob">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件，指定橢圓曲線密碼編譯 (ECC) 金鑰的私密金鑰 BLOB，其中含有明確的曲線參數。</summary>
      <returns>描述私密金鑰 BLOB 的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccFullPublicBlob">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件，指定橢圓曲線密碼編譯 (ECC) 金鑰的公開金鑰 BLOB，其中含有明確的曲線參數。</summary>
      <returns>描述公開金鑰 BLOB 的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPrivateBlob">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件，指定 Elliptic Curve Cryptography (ECC) 金鑰的私密金鑰 BLOB。</summary>
      <returns>指定 ECC 私密金鑰 BLOB 的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.EccPublicBlob">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件，指定 Elliptic Curve Cryptography (ECC) 金鑰的公開金鑰 BLOB。</summary>
      <returns>指定 ECC 公開金鑰 BLOB 的物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Object)">
      <summary>將指定的物件與目前的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件相比較。</summary>
      <param name="obj">要與目前的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 參數是 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件，且該物件與目前的物件指定相同的金鑰 BLOB 格式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.Equals(System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>將指定的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件與目前的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件相比較。</summary>
      <param name="other">要與目前的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件比較的物件。</param>
      <returns>如果 <paramref name="other" /> 參數與目前的物件指定相同的金鑰 BLOB 格式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Format">
      <summary>取得目前的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件指定的金鑰 BLOB 格式名稱。</summary>
      <returns>內嵌的金鑰 BLOB 格式名稱。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPrivateBlob">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件，指定泛型私密金鑰 BLOB。</summary>
      <returns>指定泛型私密金鑰 BLOB 的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.GenericPublicBlob">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件，指定泛型公開金鑰 BLOB。</summary>
      <returns>指定泛型公開金鑰 BLOB 的物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.GetHashCode">
      <summary>針對目前 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件中內嵌的金鑰 BLOB 格式產生雜湊值。</summary>
      <returns>內嵌金鑰 BLOB 格式的雜湊值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Equality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>判斷兩個 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件是否指定相同的金鑰 BLOB 格式。</summary>
      <param name="left">指定金鑰 BLOB 格式的物件。</param>
      <param name="right">另一個物件，要與 <paramref name="left" /> 參數所識別的物件比較。</param>
      <returns>如果兩個物件指定相同的金鑰 BLOB 格式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.op_Inequality(System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>判斷這兩個 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件是否未指定相同的金鑰 BLOB 格式。</summary>
      <param name="left">指定金鑰 BLOB 格式的物件。</param>
      <param name="right">另一個物件，要與 <paramref name="left" /> 參數所識別的物件比較。</param>
      <returns>如果兩個物件未指定相同的金鑰 BLOB 格式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.OpaqueTransportBlob">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件，指定不透明傳輸金鑰 BLOB。</summary>
      <returns>指定不透明傳輸金鑰 BLOB 的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyBlobFormat.Pkcs8PrivateBlob">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件，指定 Private Key Information Syntax Standard (PKCS #8) 金鑰 BLOB。</summary>
      <returns>指定 PKCS #8 私密金鑰 BLOB 的物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyBlobFormat.ToString">
      <summary>取得目前的 <see cref="T:System.Security.Cryptography.CngKeyBlobFormat" /> 物件指定的金鑰 BLOB 格式名稱。</summary>
      <returns>內嵌的金鑰 BLOB 格式名稱。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyCreationOptions">
      <summary>指定用來建立金鑰的選項。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.MachineKey">
      <summary>會建立整部電腦的金鑰。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.None">
      <summary>未使用金鑰建立選項。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyCreationOptions.OverwriteExistingKey">
      <summary>現有的金鑰已在金鑰建立期間覆寫。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyCreationParameters">
      <summary>包含建立金鑰的進階屬性。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngKeyCreationParameters.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CngKeyCreationParameters" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ExportPolicy">
      <summary>取得或設定金鑰匯出原則。</summary>
      <returns>指定金鑰匯出原則的物件。 預設值為 <see langword="null" />，會指出已設定金鑰儲存提供者的預設匯出原則。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyCreationOptions">
      <summary>取得或設定金鑰建立選項。</summary>
      <returns>指定建立金鑰之選項的物件。 預設值為 <see langword="null" />，會指出已設定金鑰儲存提供者的預設金鑰建立選項。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.KeyUsage">
      <summary>取得或設定套用至目前金鑰的密碼編譯作業。</summary>
      <returns>一個或多個列舉值的位元組合，指定金鑰的使用方式。 預設值為 <see langword="null" />，會指出已設定金鑰儲存提供者的預設金鑰使用方式。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Parameters">
      <summary>啟用 <see cref="T:System.Security.Cryptography.CngKey" /> 物件，該物件會以金鑰做最終處理之前設定的額外屬性建立。</summary>
      <returns>集合物件，包含建立金鑰時，必須在 <see cref="T:System.Security.Cryptography.CngKey" /> 物件上設定的任何額外參數。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.ParentWindowHandle">
      <summary>取得或設定視窗控制代碼，該代碼應用來做為 Cryptography Next Generation (CNG) 類別所建立對話方塊的父視窗。</summary>
      <returns>父視窗的 HWND，用於 CNG 對話方塊。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.Provider">
      <summary>取得或設定金鑰儲存提供者 (KSP)，以便於其中建立金鑰。</summary>
      <returns>物件，指定要在其中建立新金鑰的 KSP。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Cryptography.CngKeyCreationParameters.Provider" /> 屬性會設定為 <see langword="null" /> 值。</exception>
    </member>
    <member name="P:System.Security.Cryptography.CngKeyCreationParameters.UIPolicy">
      <summary>取得或設定使用者介面的相關資訊，以便在建立或存取金鑰時顯示。</summary>
      <returns>包含使用者介面相關資訊的物件，會在建立或存取金鑰時由 Cryptography Next Generation (CNG) 類別顯示。 <see langword="null" /> 值，表示已設定金鑰儲存提供者的預設使用者介面。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyHandleOpenOptions">
      <summary>指定開啟金鑰控制代碼的選項。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey">
      <summary>正在開啟的金鑰控制代碼會指定暫時金鑰。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyHandleOpenOptions.None">
      <summary>正在開啟的金鑰控制代碼不會指定暫時金鑰。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyOpenOptions">
      <summary>指定開啟金鑰的選項。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey">
      <summary>整部電腦的金鑰已開啟。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.None">
      <summary>未指定金鑰開啟選項。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.Silent">
      <summary>UI 提示已隱藏。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyOpenOptions.UserKey">
      <summary>如果未指定 <see cref="F:System.Security.Cryptography.CngKeyOpenOptions.MachineKey" /> 值，則會改為開啟使用者金鑰。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngKeyUsages">
      <summary>指定可搭配 Cryptography Next Generation (CNG) 金鑰使用的密碼編譯作業。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.AllUsages">
      <summary>金鑰可用於所有目的。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.Decryption">
      <summary>金鑰可用於加密和解密。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.KeyAgreement">
      <summary>金鑰可用於產生密碼協議和金鑰交換。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.None">
      <summary>未指派使用方式值給金鑰。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngKeyUsages.Signing">
      <summary>金鑰可用於簽署和驗證。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngProperty">
      <summary>封裝 Cryptography Next Generation (CNG) 金鑰或提供者的屬性。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.#ctor(System.String,System.Byte[],System.Security.Cryptography.CngPropertyOptions)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CngProperty" /> 類別的新執行個體。</summary>
      <param name="name">要初始化的屬性名稱。</param>
      <param name="value">要初始化的屬性值。</param>
      <param name="options">列舉值的位元組合，指定儲存屬性的方式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Object)">
      <summary>將指定的物件與目前的 <see cref="T:System.Security.Cryptography.CngProperty" /> 物件相比較。</summary>
      <param name="obj">要與目前的 <see cref="T:System.Security.Cryptography.CngProperty" /> 物件比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 參數為指定與目前物件相同屬性的 <see cref="T:System.Security.Cryptography.CngProperty" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.Equals(System.Security.Cryptography.CngProperty)">
      <summary>將指定的 <see cref="T:System.Security.Cryptography.CngProperty" /> 物件與目前的 <see cref="T:System.Security.Cryptography.CngProperty" /> 物件相比較。</summary>
      <param name="other">要與目前的 <see cref="T:System.Security.Cryptography.CngProperty" /> 物件比較的物件。</param>
      <returns>如果 <paramref name="other" /> 參數代表與目前的物件相同的屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.GetHashCode">
      <summary>產生目前 <see cref="T:System.Security.Cryptography.CngProperty" /> 物件的雜湊值。</summary>
      <returns>目前 <see cref="T:System.Security.Cryptography.CngProperty" /> 物件的雜湊值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.GetValue">
      <summary>取得目前 <see cref="T:System.Security.Cryptography.CngProperty" /> 物件指定的屬性值。</summary>
      <returns>陣列，代表屬性中儲存的值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProperty.Name">
      <summary>取得目前 <see cref="T:System.Security.Cryptography.CngProperty" /> 物件指定的屬性名稱。</summary>
      <returns>在目前 <see cref="T:System.Security.Cryptography.CngProperty" /> 物件中設定的屬性名稱。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.op_Equality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
      <summary>判斷兩個 <see cref="T:System.Security.Cryptography.CngProperty" /> 物件指定的屬性名稱、值和選項是否相同。</summary>
      <param name="left">物件，指定 Cryptography Next Generation (CNG) 金鑰或提供者的屬性。</param>
      <param name="right">另一個物件，要與 <paramref name="left" /> 參數所識別的物件比較。</param>
      <returns>如果兩個物件指定相同的屬性則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProperty.op_Inequality(System.Security.Cryptography.CngProperty,System.Security.Cryptography.CngProperty)">
      <summary>判斷兩個 <see cref="T:System.Security.Cryptography.CngProperty" /> 物件是否未指定相同的屬性名稱、值和選項。</summary>
      <param name="left">物件，指定 Cryptography Next Generation (CNG) 金鑰或提供者的屬性。</param>
      <param name="right">另一個物件，要與 <paramref name="left" /> 參數所識別的物件比較。</param>
      <returns>如果兩個物件未指定相同的屬性則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProperty.Options">
      <summary>取得目前 <see cref="T:System.Security.Cryptography.CngProperty" /> 物件指定的屬性選項。</summary>
      <returns>指定選項的物件，這些選項是在目前的 <see cref="T:System.Security.Cryptography.CngProperty" /> 物件中設定。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngPropertyCollection">
      <summary>提供 Cryptography Next Generation (CNG) 屬性的強型別集合。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngPropertyCollection.#ctor">
      <summary>初始化新的 <see cref="T:System.Security.Cryptography.CngPropertyCollection" /> 物件。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngPropertyOptions">
      <summary>指定 Cryptography Next Generation (CNG) 金鑰屬性的選項。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.CustomProperty">
      <summary>屬性不是由 CNG 指定。 使用這個選項可避免未來命名與 CNG 屬性發生衝突。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.None">
      <summary>參考的屬性沒有選項。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngPropertyOptions.Persist">
      <summary>屬性應該是持續的。</summary>
    </member>
    <member name="T:System.Security.Cryptography.CngProvider">
      <summary>封裝金鑰儲存提供者 (KSP) 的名稱，用來搭配 Cryptography Next Generation (CNG) 物件。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CngProvider" /> 類別的新執行個體。</summary>
      <param name="provider">要初始化的金鑰儲存提供者名稱 (KSP)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="provider" /> 參數長度為 0 (零)。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Object)">
      <summary>將指定的物件與目前的 <see cref="T:System.Security.Cryptography.CngProvider" /> 物件相比較。</summary>
      <param name="obj">要與目前的 <see cref="T:System.Security.Cryptography.CngProvider" /> 物件比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 參數為 <see cref="T:System.Security.Cryptography.CngProvider" />，並且指定與目前物件相同的金鑰儲存提供者 (KSP)，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)">
      <summary>將指定的 <see cref="T:System.Security.Cryptography.CngProvider" /> 物件與目前的 <see cref="T:System.Security.Cryptography.CngProvider" /> 物件相比較。</summary>
      <param name="other">要與目前的 <see cref="T:System.Security.Cryptography.CngProvider" /> 物件比較的物件。</param>
      <returns>如果 <paramref name="other" /> 參數指定與目前物件相同的金鑰儲存提供者 (KSP)，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.GetHashCode">
      <summary>針對目前 <see cref="T:System.Security.Cryptography.CngProvider" /> 物件中內嵌的金鑰儲存提供者 (KSP) 名稱產生雜湊值。</summary>
      <returns>內嵌 KSP 名稱的雜湊值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngProvider" /> 物件，指定 Microsoft 智慧卡金鑰儲存提供者。</summary>
      <returns>指定 Microsoft 智慧卡金鑰儲存提供者的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider">
      <summary>取得 <see cref="T:System.Security.Cryptography.CngProvider" /> 物件，指定 Microsoft 軟體金鑰儲存提供者。</summary>
      <returns>指定 Microsoft 軟體金鑰儲存提供者的物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
      <summary>判斷兩個 <see cref="T:System.Security.Cryptography.CngProvider" /> 物件是否指定相同的金鑰儲存提供者 (KSP)。</summary>
      <param name="left">指定 KSP 的物件。</param>
      <param name="right">另一個物件，要與 <paramref name="left" /> 參數所識別的物件比較。</param>
      <returns>如果這兩個物件代表相同的 KSP 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)">
      <summary>判斷這兩個 <see cref="T:System.Security.Cryptography.CngProvider" /> 物件是否不是代表相同的金鑰儲存提供者 (KSP)。</summary>
      <param name="left">指定 KSP 的物件。</param>
      <param name="right">另一個物件，要與 <paramref name="left" /> 參數所識別的物件比較。</param>
      <returns>如果兩個物件不是代表相同的 KSP 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngProvider.Provider">
      <summary>取得目前的 <see cref="T:System.Security.Cryptography.CngProvider" /> 物件指定的金鑰儲存提供者 (KSP) 名稱。</summary>
      <returns>內嵌的 KSP 名稱。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CngProvider.ToString">
      <summary>取得目前的 <see cref="T:System.Security.Cryptography.CngProvider" /> 物件指定的金鑰儲存提供者 (KSP) 名稱。</summary>
      <returns>內嵌的 KSP 名稱。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngUIPolicy">
      <summary>將在您存取受保護的金鑰時，Cryptography Next Generation (CNG) 所顯示的使用者介面 (UI) 之選擇性組態參數加以封裝。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels)">
      <summary>使用指定的保護層級，初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" /> 類別的新執行個體。</summary>
      <param name="protectionLevel">列舉值的位元組合，指定保護層級。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String)">
      <summary>使用指定的保護層級和易記名稱，初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" /> 類別的新執行個體。</summary>
      <param name="protectionLevel">列舉值的位元組合，指定保護層級。</param>
      <param name="friendlyName">要在 UI 提示中使用的易記金鑰名稱。 指定一個 null 字串，以使用預設的名稱。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String)">
      <summary>使用指定的保護層級、易記名稱和描述，初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" /> 類別的新執行個體。</summary>
      <param name="protectionLevel">列舉值的位元組合，指定保護層級。</param>
      <param name="friendlyName">要在 UI 提示中使用的易記金鑰名稱。 指定一個 null 字串，以使用預設的名稱。</param>
      <param name="description">索引鍵的全文描述。 指定一個 null 字串，以使用預設的描述。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String)">
      <summary>使用指定的保護層級、易記名稱、描述字串和使用內容，初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" /> 類別的新執行個體。</summary>
      <param name="protectionLevel">列舉值的位元組合，指定保護層級。</param>
      <param name="friendlyName">要在 UI 提示中使用的易記金鑰名稱。 指定一個 null 字串，以使用預設的名稱。</param>
      <param name="description">索引鍵的全文描述。 指定一個 null 字串，以使用預設的描述。</param>
      <param name="useContext">描述如何使用金鑰的文字。 指定一個 null 字串，以使用預設的描述。</param>
    </member>
    <member name="M:System.Security.Cryptography.CngUIPolicy.#ctor(System.Security.Cryptography.CngUIProtectionLevels,System.String,System.String,System.String,System.String)">
      <summary>使用指定的保護層級、易記名稱、描述字串、使用內容和標題，初始化 <see cref="T:System.Security.Cryptography.CngUIPolicy" /> 類別的新執行個體。</summary>
      <param name="protectionLevel">列舉值的位元組合，指定保護層級。</param>
      <param name="friendlyName">要在 UI 提示中使用的易記金鑰名稱。 指定一個 null 字串，以使用預設的名稱。</param>
      <param name="description">索引鍵的全文描述。 指定一個 null 字串，以使用預設的描述。</param>
      <param name="useContext">描述如何使用金鑰的文字。 指定一個 null 字串，以使用預設的描述。</param>
      <param name="creationTitle">提供 UI 提示的對話方塊標題。 指定一個 null 字串，以使用預設標題。</param>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.CreationTitle">
      <summary>取得 UI 提示所顯示的標題。</summary>
      <returns>存取金鑰時出現的對話方塊標題。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.Description">
      <summary>取得 UI 提示顯示的描述字串。</summary>
      <returns>存取金鑰時出現的對話方塊描述文字。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.FriendlyName">
      <summary>取得 UI 提示所顯示的易記名稱。</summary>
      <returns>用來描述存取金鑰時，出現的對話方塊中金鑰的易記名稱。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.ProtectionLevel">
      <summary>取得金鑰的 UI 保護層級。</summary>
      <returns>物件，描述套用至金鑰的 UI 保護層級。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CngUIPolicy.UseContext">
      <summary>取得描述如何使用金鑰的文字。</summary>
      <returns>描述如何使用金鑰的文字。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CngUIProtectionLevels">
      <summary>指定使用者介面 (UI) 提示案例中金鑰的保護層級。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ForceHighProtection">
      <summary>UI 提示會在每次存取金鑰時顯示。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.None">
      <summary>存取金鑰時不會顯示 UI 提示。</summary>
    </member>
    <member name="F:System.Security.Cryptography.CngUIProtectionLevels.ProtectKey">
      <summary>UI 提示會在第一次於處理序中存取金鑰時顯示。</summary>
    </member>
    <member name="T:System.Security.Cryptography.DSACng">
      <summary>提供數位簽章演算法 (DSA) 的新一代密碼編譯 (CNG) 實作。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.#ctor">
      <summary>使用隨機 2,048 位元金鑰組，初始化 <see cref="T:System.Security.Cryptography.DSACng" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.#ctor(System.Int32)">
      <summary>使用指定大小之隨機產生的金鑰，初始化 <see cref="T:System.Security.Cryptography.DSACng" /> 類別的新執行個體。</summary>
      <param name="keySize">要產生的金鑰大小 (以位元為單位)。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> 無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>使用指定的金鑰，初始化 <see cref="T:System.Security.Cryptography.DSACng" /> 類別的新執行個體。</summary>
      <param name="key">DSA 作業所要使用的金鑰。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不是有效的 DSA 金鑰。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.CreateSignature(System.Byte[])">
      <summary>建立所指定資料的數位簽章。</summary>
      <param name="rgbHash">要簽署的資料。</param>
      <returns>指定資料的數位簽章。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="rgbHash" /> 小於 DSA 金鑰的 Q 值長度。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.ExportParameters(System.Boolean)">
      <summary>匯出 DSA 演算法參數。</summary>
      <param name="includePrivateParameters">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>DSA 演算法參數。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">DSA 金鑰不是有效的公開金鑰或私密金鑰。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.ImportParameters(System.Security.Cryptography.DSAParameters)">
      <summary>為參數結構建立新的 <see cref="T:System.Security.Cryptography.CngKey" />，來取代目前執行個體正在使用的現有金鑰。</summary>
      <param name="parameters">DSA 參數。</param>
      <exception cref="T:System.ArgumentException">指定的 DSA 參數無效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.DSACng.Key">
      <summary>取得金鑰， <see cref="T:System.Security.Cryptography.DSACng" /> 物件會將這個金鑰用於其所執行的任何密碼編譯作業。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.DSACng" /> 物件執行密碼編譯作業使用的金鑰。</returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACng.KeyExchangeAlgorithm">
      <summary>取得金鑰交換演算法的名稱。</summary>
      <returns>一定是 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACng.LegalKeySizes">
      <summary>取得 DSA 演算法支援的金鑰大小 (以位元為單位)。</summary>
      <returns>陣列，含有演算法所支援的金鑰大小。</returns>
    </member>
    <member name="P:System.Security.Cryptography.DSACng.SignatureAlgorithm">
      <summary>取得簽章演算法的名稱。</summary>
      <returns>字串 "DSA"。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSACng.VerifySignature(System.Byte[],System.Byte[])">
      <summary>驗證指定的數位簽章是否符合指定的資料。</summary>
      <param name="rgbHash">已簽署的資料。</param>
      <param name="rgbSignature">要驗證的數位簽章。</param>
      <returns>若 <paramref name="rgbSignature" /> 符合使用指定資料計算的簽章則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 參數為 <see langword="null" />。  
-或- 
<paramref name="rgbSignature" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="rgbHash" /> 小於 DSA 金鑰的 Q 值長度。</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanCng">
      <summary>提供 Elliptic Curve Diffie-Hellman (ECDH) 演算法的 Cryptography Next Generation (CNG) 實作。 這個類別是用來執行密碼編譯作業。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor">
      <summary>使用隨機金鑰組，初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Int32)">
      <summary>使用指定金鑰大小的隨機金鑰組，初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 類別的新執行個體。</summary>
      <param name="keySize">金鑰的大小。 有效的金鑰大小為 256、384 和 521 位元。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySize" /> 指定了無效的長度。</exception>
      <exception cref="T:System.PlatformNotSupportedException">這個系統不支援新一代密碼編譯 (CNG) 類別。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.CngKey" /> 物件，初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 類別的新執行個體。</summary>
      <param name="key">要用為目前物件所執行之密碼編譯作業的輸入的索引鍵。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不會指定 Elliptic Curve Diffie-Hellman (ECDH) 演算法群組。</exception>
      <exception cref="T:System.PlatformNotSupportedException">這個系統不支援新一代密碼編譯 (CNG) 類別。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.#ctor(System.Security.Cryptography.ECCurve)">
      <summary>建立 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 類別的新執行個體，其公開/私密金鑰組是在指定的曲線上所產生。</summary>
      <param name="curve">用來產生公開/私密金鑰組的曲線。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> 不會驗證。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>使用雜湊函式衍生可用來做為金鑰的位元組，指定另一方的公開金鑰、雜湊演算法的名稱、前面加上的值及附加值。</summary>
      <param name="otherPartyPublicKey">另一方的公開金鑰。</param>
      <param name="hashAlgorithm">要用來衍生金鑰內容的雜湊演算法。</param>
      <param name="secretPrepend">雜湊之前要加在衍生密碼前面的值。</param>
      <param name="secretAppend">雜湊之前要附加至衍生密碼的值。</param>
      <returns>金鑰的金鑰內容會與另一方公開金鑰交換。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 不是 ECDH 金鑰，或其大小不正確。  
-或- 
 <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])">
      <summary>使用雜湊式訊息驗證碼 (HMAC) 衍生可用來做為金鑰的位元組。</summary>
      <param name="otherPartyPublicKey">另一方的公開金鑰。</param>
      <param name="hashAlgorithm">要用來衍生金鑰內容的雜湊演算法。</param>
      <param name="hmacKey">HMAC 的金鑰。</param>
      <param name="secretPrepend">雜湊之前要加在衍生密碼前面的值。</param>
      <param name="secretAppend">雜湊之前要附加至衍生密碼的值。</param>
      <returns>金鑰的金鑰內容會與另一方公開金鑰交換。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 不是 ECDH 金鑰，或其大小不正確。  
-或- 
 <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.CngKey)">
      <summary>衍生金鑰內容，該內容產生自雙方的密碼協議 (如果 <see cref="T:System.Security.Cryptography.CngKey" /> 物件包含另一方的公開金鑰)。</summary>
      <param name="otherPartyPublicKey">物件，該物件包含金鑰交換中，另一方 Elliptic Curve Diffie-Hellman (ECDH) 金鑰的公開部分。</param>
      <returns>包含金鑰內容的位元組陣列。 這項資訊產生自密碼協議，該協議是從目前物件的私密金鑰和指定的公開金鑰計算而得。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 無效。 可能是其 <see cref="P:System.Security.Cryptography.CngKey.AlgorithmGroup" /> 屬性未指定 <see cref="P:System.Security.Cryptography.CngAlgorithmGroup.ECDiffieHellman" />，或其金鑰大小與這個執行個體的金鑰大小不相符。</exception>
      <exception cref="T:System.InvalidOperationException">這個物件的 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction" /> 屬性會指定 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" /> 金鑰衍生函數，但是 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> 或 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>衍生金鑰內容，該內容產生自雙方的密碼協議 (如果 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 物件包含另一方的公開金鑰)。</summary>
      <param name="otherPartyPublicKey">來自金鑰交換中另一方的公開金鑰。</param>
      <returns>包含金鑰內容的位元組陣列。 這項資訊產生自密碼協議，該協議是從目前物件的私密金鑰和指定的公開金鑰計算而得。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 不是 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 金鑰。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])">
      <summary>使用傳輸層安全性 (TLS) 似隨機函式 (PRF) 衍生演算法，衍生可用來做為金鑰的位元組。</summary>
      <param name="otherPartyPublicKey">另一方的公開金鑰。</param>
      <param name="prfLabel">ASCII 編碼的 PRF 標籤。</param>
      <param name="prfSeed">64 位元組的 PRF 種子。</param>
      <returns>金鑰的金鑰內容會與另一方公開金鑰交換。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。  
-或- 
 <paramref name="prfLabel" /> 為 <see langword="null" />。  
-或- 
 <paramref name="prfSeed" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 不是 ECDH 金鑰，或其大小不正確。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="prfSeed" /> 的長度不是正好 64 位元組。  
-或- 
所有其他密碼編譯錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.CngKey)">
      <summary>取得雙方所產生密碼協議的控制代碼 (如果 <see cref="T:System.Security.Cryptography.CngKey" /> 物件包含另一方的公開金鑰)。</summary>
      <param name="otherPartyPublicKey">物件，該物件包含金鑰交換中，另一方 Elliptic Curve Diffie-Hellman (ECDH) 金鑰的公開部分。</param>
      <returns>密碼協議的控制代碼。 這項資訊是從目前物件的私密金鑰和指定的公開金鑰計算而得。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 不是 ECDH 金鑰，或其大小不正確。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.DeriveSecretAgreementHandle(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>取得雙方所產生密碼協議的控制代碼 (如果 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 物件包含另一方的公開金鑰)。</summary>
      <param name="otherPartyPublicKey">來自金鑰交換中另一方的公開金鑰。</param>
      <returns>密碼協議的控制代碼。 這項資訊是從目前物件的私密金鑰和指定的公開金鑰計算而得。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 不是 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 金鑰。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportExplicitParameters(System.Boolean)">
      <summary>將 <see cref="T:System.Security.Cryptography.ECCurve" /> 物件所使用的金鑰和明確的曲線參數匯出至 <see cref="T:System.Security.Cryptography.ECParameters" /> 物件。</summary>
      <param name="includePrivateParameters">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>
        <see cref="T:System.Security.Cryptography.ECCurve" /> 物件所使用的金鑰和明確的曲線參數。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">這個方法無法取得曲線值。</exception>
      <exception cref="T:System.PlatformNotSupportedException">這個平台不支援明確的匯出。 需要 Windows 10 或更高版本。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ExportParameters(System.Boolean)">
      <summary>將 <see cref="T:System.Security.Cryptography.ECCurve" /> 物件所使用的金鑰匯出到 <see cref="T:System.Security.Cryptography.ECParameters" /> 物件中。</summary>
      <param name="includePrivateParameters">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>
        <see cref="T:System.Security.Cryptography.ECCurve" /> 物件所使用的金鑰和具名曲線參數。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">這個方法無法取得曲線值。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>使用指定的格式從 XML 字串還原金鑰資訊的序列化。</summary>
      <param name="xml">要序列化的 XML 索引鍵資訊。</param>
      <param name="format">其中一個列舉值，指定 XML 字串的格式。 目前唯一接受的格式為 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="xml" /> 的格式不正確。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> 指定了無效的格式。 唯一接受的值為 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>針對指定的曲線產生新的暫時性公開/私密金鑰組。</summary>
      <param name="curve">用來產生暫時性公開/私密金鑰組的曲線。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> 不會驗證。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm">
      <summary>取得或設定產生金鑰內容時使用的雜湊演算法。</summary>
      <returns>指定雜湊演算法的物件。</returns>
      <exception cref="T:System.ArgumentNullException">值為 <see langword="null." />。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey">
      <summary>取得或設定「雜湊式訊息驗證碼」(Hash-based Message Authentication Code，HMAC) 金鑰，以便在衍生金鑰內容時使用。</summary>
      <returns>在衍生金鑰內容時使用的「雜湊式訊息驗證碼」(Hash-based Message Authentication Code，HMAC) 金鑰。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>將 <see cref="T:System.Security.Cryptography.ECCurve" /> 物件的指定參數當做金鑰匯入至目前的執行個體。</summary>
      <param name="parameters">要匯入的曲線參數。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> 不會驗證。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="parameters" /> 參考無法匯入的曲線。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="parameters" /> 參考這個平台不支援的曲線。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Key">
      <summary>指定 <see cref="T:System.Security.Cryptography.CngKey" />，由目前物件用於密碼編譯作業。</summary>
      <returns>這個物件使用的金鑰組，用來執行密碼編譯作業。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.KeyDerivationFunction">
      <summary>取得或設定 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 類別的金鑰衍生函數。</summary>
      <returns>其中一個 <see cref="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction" /> 列舉值：<see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />、<see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" /> 或 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />。 預設值為 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">列舉值超出範圍。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.KeySize" />
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Label">
      <summary>取得或設定標籤值，用於金鑰衍生。</summary>
      <returns>標籤值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.PublicKey">
      <summary>取得公開金鑰，可讓其他 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 物件用來產生共用的密碼協議。</summary>
      <returns>與這個 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 物件執行個體相關聯的公開金鑰。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend">
      <summary>取得或設定值，該值將在產生金鑰內容時附加到密碼協議。</summary>
      <returns>附加到密碼協議的值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend">
      <summary>取得或設定值，該值將在衍生金鑰內容時加入至密碼協議的開頭。</summary>
      <returns>在金鑰衍生期間附加至密碼協議開頭的值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed">
      <summary>取得或設定值，該值將在衍生金鑰內容時使用。</summary>
      <returns>種子值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>使用指定的格式將金鑰資訊序列化成 XML 字串。</summary>
      <param name="format">其中一個列舉值，指定 XML 字串的格式。 目前唯一接受的格式為 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</param>
      <returns>包含金鑰資訊的字串物件會根據要求的格式序列化成 XML 字串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> 指定了無效的格式。 唯一接受的值為 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey">
      <summary>取得值，表示密碼協議是否做為「雜湊式訊息驗證碼」(Hash-based Message Authentication Code，HMAC) 金鑰用來衍生金鑰內容。</summary>
      <returns>如果密碼協議做為 HMAC 金鑰用來衍生金鑰內容，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey">
      <summary>指定搭配 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 類別使用的 Elliptic Curve Diffie-Hellman (ECDH) 公開金鑰。</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.BlobFormat">
      <summary>取得 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 物件的金鑰 BLOB 格式。</summary>
      <returns>表示金鑰 BLOB 的格式。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.ExportExplicitParameters">
      <summary>將 <see cref="T:System.Security.Cryptography.ECCurve" /> 物件所使用的金鑰和明確的曲線參數匯出至 <see cref="T:System.Security.Cryptography.ECParameters" /> 物件。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.ECCurve" /> 物件所使用的金鑰和明確的曲線參數。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">這個方法無法取得曲線值。</exception>
      <exception cref="T:System.PlatformNotSupportedException">這個平台不支援明確的匯出。 需要 Windows 10 或更高版本。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.ExportParameters">
      <summary>將 <see cref="T:System.Security.Cryptography.ECCurve" /> 物件所使用的金鑰匯出到 <see cref="T:System.Security.Cryptography.ECParameters" /> 物件中。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.ECCurve" /> 物件所使用的金鑰和具名曲線參數。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">這個方法無法取得曲線值。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.FromByteArray(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)">
      <summary>根據指定的格式，將包含公開金鑰的位元組陣列轉換成 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 物件。</summary>
      <param name="publicKeyBlob">包含 Elliptic Curve Diffie-Hellman (ECDH) 公開金鑰的位元組陣列。</param>
      <param name="format">指定金鑰 BLOB 格式的物件。</param>
      <returns>包含在位元組陣列中序列化的 ECDH 公開金鑰的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publicKeyBlob" /> 或 <paramref name="format" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="publicKeyBlob" /> 參數未包含 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 金鑰。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.FromXmlString(System.String)">
      <summary>將 XML 字串轉換成 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 物件。</summary>
      <param name="xml">包含 Elliptic Curve Diffie-Hellman (ECDH) 金鑰的 XML 字串。</param>
      <returns>包含由提供的 XML 所指定 ECDH 公開金鑰的物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="xml" /> 參數未指定 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 金鑰。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.Import">
      <summary>將 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 物件轉換為 <see cref="T:System.Security.Cryptography.CngKey" /> 物件。</summary>
      <returns>包含由 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 物件所表示金鑰的物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanCngPublicKey.ToXmlString">
      <summary>將 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 公開金鑰序列化成 RFC 4050 格式的 XML 字串。</summary>
      <returns>包含序列化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 公開金鑰的 XML 字串。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction">
      <summary>指定金鑰衍生函式，<see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /> 類別會使用此函式將密碼協議轉換成金鑰內容。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hash">
      <summary>雜湊演算法可用來產生金鑰內容。 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HashAlgorithm" /> 屬性會指定所使用演算法的名稱。 如果未指定演算法名稱，則會使用 <see cref="T:System.Security.Cryptography.SHA256" /> 做為預設演算法。 您也可以指定 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend" /> 與 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend" /> 屬性，但它們並非必要屬性。 產生的金鑰資料量相當於所指定演算法的雜湊值大小。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac">
      <summary>雜湊架構訊息驗證碼 (HMAC) 演算法可用來產生金鑰內容。 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.HmacKey" /> 屬性會指定要使用的金鑰。 這個屬性必須設定，或是 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.UseSecretAgreementAsHmacKey" /> 屬性必須設為 <see langword="true" />，否則當您使用 <see cref="T:System.Security.Cryptography.CryptographicException" /> 時，會擲出 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Hmac" />。 如果同時設定這兩個值，則會使用密碼協議做為 HMAC 金鑰。 您也可以指定 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretPrepend" /> 與 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.SecretAppend" /> 屬性，但它們並非必要屬性。 產生的金鑰資料量相當於 HMAC 值大小。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls">
      <summary>傳輸層安全性 (TLS) 通訊協定可用來產生金鑰內容。 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Seed" /> 和 <see cref="P:System.Security.Cryptography.ECDiffieHellmanCng.Label" /> 屬性必須設定，否則當您使用 <see cref="T:System.Security.Cryptography.CryptographicException" /> 時，會擲回 <see cref="F:System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction.Tls" />。 此值會產生 160 位元的金鑰資料。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECDsaCng">
      <summary>提供橢圓曲線數位簽章演算法 (ECDSA) 的新一代密碼編譯 (CNG) 實作。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor">
      <summary>使用隨機金鑰組，初始化 <see cref="T:System.Security.Cryptography.ECDsaCng" /> 類別的新執行個體。</summary>
      <exception cref="T:System.PlatformNotSupportedException">這個系統不支援新一代密碼編譯 (CNG) 類別。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)">
      <summary>使用指定金鑰大小的隨機金鑰組，初始化 <see cref="T:System.Security.Cryptography.ECDsaCng" /> 類別的新執行個體。</summary>
      <param name="keySize">金鑰的大小。 有效的金鑰大小為 256、384 和 521 位元。</param>
      <exception cref="T:System.PlatformNotSupportedException">這個系統不支援新一代密碼編譯 (CNG) 類別。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> 指定了無效的長度。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.CngKey" /> 物件，初始化 <see cref="T:System.Security.Cryptography.ECDsaCng" /> 類別的新執行個體。</summary>
      <param name="key">要用為目前物件所執行之密碼編譯作業的輸入的索引鍵。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不指定橢圓曲線數位簽章演算法 (ECDSA) 群組。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">這個系統不支援新一代密碼編譯 (CNG) 類別。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.ECCurve)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.ECDsaCng" /> 類別的新執行個體，其公開/私密金鑰組是在指定的曲線上所產生。</summary>
      <param name="curve">用來產生公開/私密金鑰組的曲線。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> 不會驗證。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="curve" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">如果 <paramref name="curve" /> 不包含具有 FriendlyName 的 OID。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ExportExplicitParameters(System.Boolean)">
      <summary>將橢圓曲線密碼編譯 (ECC) 物件所使用的金鑰和明確的曲線參數匯出至 <see cref="T:System.Security.Cryptography.ECParameters" /> 物件。</summary>
      <param name="includePrivateParameters">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>ECC 物件所使用的金鑰和明確的曲線參數。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">取得曲線值時發生錯誤。</exception>
      <exception cref="T:System.PlatformNotSupportedException">這個平台不支援明確的匯出。 需要 Windows 10 或更高版本。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ExportParameters(System.Boolean)">
      <summary>將橢圓曲線密碼編譯 (ECC) 物件所使用的金鑰匯出至 <see cref="T:System.Security.Cryptography.ECParameters" /> 物件。 如果是以具名曲線形式來建立金鑰，<see cref="F:System.Security.Cryptography.ECParameters.Curve" /> 欄位即會包含具名曲線參數，否則會包含明確的參數。</summary>
      <param name="includePrivateParameters">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>ECC 物件所使用的金鑰和具名曲線參數。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">取得曲線值時發生錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>使用指定的格式從 XML 字串還原金鑰資訊的序列化。</summary>
      <param name="xml">要序列化的 XML 索引鍵資訊。</param>
      <param name="format">其中一個列舉值，指定 XML 字串的格式。 目前唯一接受的格式為 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xml" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> 指定了無效的格式。 唯一接受的值為 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>產生 ECDsaCng 演算法所用的金鑰。</summary>
      <param name="curve">要用來產生金鑰的曲線。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> 不會驗證。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.HashAlgorithm">
      <summary>取得或設定簽署和驗證資料時使用的雜湊演算法。</summary>
      <returns>指定雜湊演算法的物件。</returns>
      <exception cref="T:System.ArgumentNullException">值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>為參數結構建立新的 <see cref="T:System.Security.Cryptography.CngKey" />，來取代目前執行個體正在使用的現有金鑰。</summary>
      <param name="parameters">曲線參數。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> 未包含有效的值。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="parameters" /> 參考無法匯入的曲線。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="parameters" /> 參考這個平台不支援的曲線。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.Key">
      <summary>取得或設定要在簽署和驗證資料時使用的索引鍵。</summary>
      <returns>指定索引鍵的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsaCng.KeySize" />
    <member name="P:System.Security.Cryptography.ECDsaCng.LegalKeySizes" />
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])">
      <summary>產生指定資料的簽章。</summary>
      <param name="data">要簽署的訊息資料。</param>
      <returns>所指定資料的數位簽章。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">與此執行個體相關聯的金鑰資訊沒有私密金鑰。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)">
      <summary>產生所指定資料長度的數位簽章，以指定的位移開頭。</summary>
      <param name="data">要簽署的訊息資料。</param>
      <param name="offset">字串中開始簽署的位置。</param>
      <param name="count">字串的長度 (以字元為單位)，依照將簽署的 <paramref name="offset" />。</param>
      <returns>所指定資料長度的數位簽章。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="offset" /> 造成於資料字串範圍外讀取。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">與此執行個體相關聯的金鑰資訊沒有私密金鑰。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)">
      <summary>為指定的資料流產生簽章，並且讀取至資料流尾端。</summary>
      <param name="data">要簽署的資料流。</param>
      <returns>所指定資料流的數位簽章。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">與此執行個體相關聯的金鑰資訊沒有私密金鑰。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])">
      <summary>產生指定雜湊值的簽章。</summary>
      <param name="hash">要簽署之資料的雜湊值。</param>
      <returns>指定雜湊值的數位簽章。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">與此執行個體相關聯的金鑰資訊沒有私密金鑰。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)">
      <summary>使用指定的格式將金鑰資訊序列化成 XML 字串。</summary>
      <param name="format">其中一個列舉值，指定 XML 字串的格式。 目前唯一接受的格式為 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</param>
      <returns>包含金鑰資訊的字串物件會根據要求的格式序列化成 XML 字串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="format" /> 指定了無效的格式。 唯一接受的值為 <see cref="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])">
      <summary>驗證所指定資料的數位簽章。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章。</param>
      <returns>如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
      <summary>驗證所指定資料長度的簽章，以指定的位移開頭。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="offset">簽署的資料在資料中開始的位置。</param>
      <param name="count">資料的長度 (以字元為單位)，依照將簽署的 <paramref name="offset" />。</param>
      <param name="signature">要驗證的簽章。</param>
      <returns>如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小於零。  
-或- 
 <paramref name="offset" /> 或 <paramref name="count" /> 大於在 <paramref name="data" /> 參數中傳遞的位元組陣列長度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])">
      <summary>驗證所指定資料流的數位簽章，並且讀取至資料流尾端。</summary>
      <param name="data">已簽署的資料流。</param>
      <param name="signature">要驗證的簽章。</param>
      <returns>如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])">
      <summary>根據指定的雜湊值來驗證指定的數位簽章。</summary>
      <param name="hash">要驗證之資料的雜湊值。</param>
      <param name="signature">要根據雜湊值驗證之資料的數位簽章。</param>
      <returns>如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 或 <paramref name="signature" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECKeyXmlFormat">
      <summary>定義橢圓曲線金鑰的 XML 序列化格式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECKeyXmlFormat.Rfc4050">
      <summary>RFC 4050「針對 XML 數位簽章使用 Elliptic Curve Signature Algorithm (ECDSA)」中描述的 XML 序列化格式。</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSACng">
      <summary>提供 RSA 演算法的新一代密碼編譯 (CNG) 實作。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.#ctor">
      <summary>使用隨機 2,048 位元金鑰組，初始化 <see cref="T:System.Security.Cryptography.RSACng" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.#ctor(System.Int32)">
      <summary>使用指定大小之隨機產生的金鑰，初始化 <see cref="T:System.Security.Cryptography.RSACng" /> 類別的新執行個體。</summary>
      <param name="keySize">要產生的金鑰大小 (以位元為單位)。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> 無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.#ctor(System.Security.Cryptography.CngKey)">
      <summary>使用指定的金鑰，初始化 <see cref="T:System.Security.Cryptography.RSACng" /> 類別的新執行個體。</summary>
      <param name="key">RSA 作業所要使用的金鑰。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不是有效的 RSA 金鑰。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>使用指定填補模式來加密輸入資料。</summary>
      <param name="data">要解密的資料。</param>
      <param name="padding">填補模式。</param>
      <returns>已解密的資料。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。  
-或- 
 <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 不等於 <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1" />，或者 <paramref name="padding" /> 的 <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> 不等於 <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>使用指定填補加密輸入的資料。</summary>
      <param name="data">要加密的資料。</param>
      <param name="padding">填補模式。</param>
      <returns>已加密的資料。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。  
-或- 
 <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 不等於 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" /> 或 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pss" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.ExportParameters(System.Boolean)">
      <summary>將 RSA 物件所使用的金鑰匯出到 <see cref="T:System.Security.Cryptography.RSAParameters" /> 物件中。</summary>
      <param name="includePrivateParameters">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>RSA 物件所使用的金鑰。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>為參數結構建立新的 <see cref="T:System.Security.Cryptography.CngKey" />，來取代目前執行個體正在使用的現有金鑰。</summary>
      <param name="parameters">RSA 參數。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 並未包含指數和模數。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> 不是有效的 RSA 金鑰。  
-或- 
 <paramref name="parameters" /> 是完整金鑰組並使用預設 KSP。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSACng.Key">
      <summary>取得金鑰，<see cref="T:System.Security.Cryptography.RSACng" /> 物件會將這個金鑰用於其所執行的任何密碼編譯作業。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.RSACng" /> 物件所使用的金鑰。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSACng.LegalKeySizes" />
    <member name="M:System.Security.Cryptography.RSACng.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>簽署資料，該資料已使用指定的雜湊演算法和填補模式進行雜湊處理。</summary>
      <param name="hash">要簽署的雜湊。</param>
      <param name="hashAlgorithm">雜湊演算法名稱。</param>
      <param name="padding">填補模式。</param>
      <returns>已簽署的資料。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 為 <see langword="null" />。  
-或- 
 <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 屬性值為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 不等於 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" /> 或 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pss" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSACng.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>驗證已簽署且已使用指定演算法和填補模式雜湊處理的資料。</summary>
      <param name="hash">要驗證的雜湊。</param>
      <param name="signature">資料的簽章。</param>
      <param name="hashAlgorithm">雜湊演算法名稱。</param>
      <param name="padding">填補模式。</param>
      <returns>如果雜湊的簽章驗證無誤，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 為 <see langword="null" />。  
-或- 
 <paramref name="signature" /> 為 <see langword="null" />。  
-或- 
 <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 屬性值為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 不等於 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1" /> 或 <see cref="P:System.Security.Cryptography.RSASignaturePadding.Pss" />。  
-或- 
簽章的格式不正確。 僅限 .NET Framework 4.6 和 4.6.1；從 .NET Framework 4.6.2 開始，如果簽章的格式不正確，此方法會傳回 <see langword="false" />。</exception>
    </member>
    <member name="T:System.Security.Cryptography.TripleDESCng">
      <summary>提供三重資料加密標準 (3DES) 演算法的新一代密碼編譯 (CNG) 實作。</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.#ctor">
      <summary>使用暫時金鑰，初始化 <see cref="T:System.Security.Cryptography.TripleDESCng" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.#ctor(System.String)">
      <summary>使用指定的金鑰名稱初始化 <see cref="T:System.Security.Cryptography.TripleDESCng" /> 類別的新執行個體，其代表現有保存的 3DES 金鑰。</summary>
      <param name="keyName">金鑰的名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.#ctor(System.String,System.Security.Cryptography.CngProvider)">
      <summary>使用指定的金鑰名稱初始化 <see cref="T:System.Security.Cryptography.TripleDESCng" /> 類別的新執行個體，其代表現有保存的 3DES 金鑰和指定的金鑰儲存提供者 (KSP)。</summary>
      <param name="keyName">金鑰的名稱。</param>
      <param name="provider">包含金鑰的 KSP。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 為 <see langword="null" />。  
-或- 
 <paramref name="provider" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.#ctor(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)">
      <summary>使用指定的金鑰名稱初始化 <see cref="T:System.Security.Cryptography.TripleDESCng" /> 類別的新執行個體，其代表現有保存的 3DES 金鑰、指定的金鑰儲存提供者 (KSP)，以及金鑰開啟選項。</summary>
      <param name="keyName">金鑰的名稱。</param>
      <param name="provider">包含金鑰的 KSP。</param>
      <param name="openOptions">列舉值的位元組合，可指定開啟金鑰的選項，例如，金鑰是從何處開啟 (電腦或使用者存放裝置)，以及是否要隱藏 UI 提示。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyName" /> 為 <see langword="null" />。  
-或- 
 <paramref name="provider" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">此系統不支援新一代密碼編譯 (CNG)。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">所有其他錯誤。</exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.CreateDecryptor">
      <summary>使用目前的索引鍵和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) 建立對稱 3DES 解密子物件。</summary>
      <returns>對稱 3DES 解密子物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的金鑰和初始化向量 (IV) 建立對稱 3DES 解密子物件。</summary>
      <param name="rgbKey">3DES 演算法所用的祕密金鑰。 金鑰大小必須是 192 位元。</param>
      <param name="rgbIV">3DES 演算法所用的初始化向量。</param>
      <returns>對稱 3DES 解密子物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rgbKey" /> 的大小不適用於此演算法。  
-或- 
 <paramref name="rgbIV" /> 的大小不符合此演算法的區塊大小。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 是此演算法的已知弱式金鑰，因此無法使用。  
-或- 
 <paramref name="rgbIV" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.CreateEncryptor">
      <summary>使用目前的索引鍵和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) 建立對稱 3DES 加密子物件。</summary>
      <returns>對稱 3DES 加密子物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的金鑰和初始化向量 (IV) 建立對稱 3DES 加密子物件。</summary>
      <param name="rgbKey">3DES 演算法所用的祕密金鑰。 金鑰大小必須是 192 位元。</param>
      <param name="rgbIV">3DES 演算法所用的初始化向量。</param>
      <returns>對稱 3DES 加密子物件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rgbKey" /> 的大小不適用於此演算法。  
-或- 
 <paramref name="rgbIV" /> 的大小不符合此演算法的區塊大小。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 是此演算法的已知弱式金鑰，因此無法使用。  
-或- 
 <paramref name="rgbIV" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.GenerateIV">
      <summary>產生 3DES 演算法所用的隨機初始化向量 (IV)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDESCng.GenerateKey">
      <summary>產生 3DES 演算法所用的隨機金鑰。</summary>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCng.Key">
      <summary>取得或設定 <see cref="T:System.Security.Cryptography.TripleDESCng" /> 演算法的金鑰。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.TripleDESCng" /> 演算法的金鑰。</returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDESCng.KeySize">
      <summary>取得或設定 <see cref="T:System.Security.Cryptography.TripleDESCng" /> 演算法使用之祕密金鑰的大小 (以位元為單位)。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.TripleDESCng" /> 演算法使用之祕密金鑰的大小 (以位元為單位)。</returns>
    </member>
  </members>
</doc>
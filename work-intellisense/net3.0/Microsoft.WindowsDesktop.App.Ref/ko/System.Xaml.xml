<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Xaml</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute">
      <summary vsli:raw="Notates types for legacy reporting of XAML markup extension characteristics.">XAML태그 확장 특성에 대한 레거시 보고의 형식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The return type that this attribute reports.">이 특성에서 보고하는 반환 형식입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.Type">
      <summary vsli:raw="Gets or sets the return type that this attribute reports.">이 특성에서 보고하는 반환 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The return type that this attribute reports.">이 특성에서 보고하는 반환 형식입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.AmbientAttribute">
      <summary vsli:raw="Specifies that a property or type should be treated as ambient. The ambient concept relates to how XAML processors determine type owners of members.">속성이나 형식을 앰비언트로 처리하도록 지정합니다. 앰비언트 개념은 XAML 프로세서가 멤버의 형식 소유자를 결정하는 방법과 관련됩니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.AmbientAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.AmbientAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.AmbientAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Windows.Markup.ArrayExtension">
      <summary vsli:raw="Implements &lt;see langword=&quot;x:Array&quot; /&gt; support for .NET XAML Services.">.NET Framework XAML 서비스에 대한 <see langword="x:Array" /> 지원을 구현합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ArrayExtension&quot; /&gt; class. This creates an empty array.">
        <see cref="T:System.Windows.Markup.ArrayExtension" /> 클래스의 새 인스턴스를 초기화합니다. 빈 배열을 만듭니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Array)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ArrayExtension&quot; /&gt; class based on the provided raw array.">제공된 원시 배열을 기반으로 하여 <see cref="T:System.Windows.Markup.ArrayExtension" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="elements" vsli:raw="The array content that populates the created array.">만들어진 배열을 채우는 배열 내용입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;elements&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="elements" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ArrayExtension&quot; /&gt; class and initializes the type of the array.">
        <see cref="T:System.Windows.Markup.ArrayExtension" /> 클래스의 새 인스턴스를 초기화하고 배열 형식을 초기화합니다.</summary>
      <param name="arrayType" vsli:raw="The object type of the new array.">새 배열의 개체 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;arrayType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="arrayType" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddChild(System.Object)">
      <summary vsli:raw="Appends the supplied object to the end of the array.">배열의 끝에 제공된 개체를 추가합니다.</summary>
      <param name="value" vsli:raw="The object to add to the end of the array.">배열의 끝에 추가할 개체입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddText(System.String)">
      <summary vsli:raw="Adds a text node as a new array item.">새 배열 항목으로 텍스트 노드를 추가합니다.</summary>
      <param name="text" vsli:raw="The text to add to the end of the array.">배열의 끝에 추가할 텍스트입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Items">
      <summary vsli:raw="Gets the contents of the array. Settable in XAML through XAML collection syntax.">배열의 내용을 가져옵니다. XAML 컬렉션 구문을 통해 XAML에서 설정할 수 있습니다.</summary>
      <returns vsli:raw="The array contents.">배열 내용입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="Returns an array that is sized to the number of objects supplied in the &lt;see cref=&quot;P:System.Windows.Markup.ArrayExtension.Items&quot; /&gt; values.">
        <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> 값에 제공된 개체 수에 맞는 크기의 배열을 반환합니다.</summary>
      <param name="serviceProvider" vsli:raw="An object that can provide services for the markup extension.">태그 확장명 서비스를 제공할 수 있는 개체입니다.</param>
      <returns vsli:raw="The created array, or null.">만들어진 배열이거나 null입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Processed an array that did not provide a valid &lt;see cref=&quot;P:System.Windows.Markup.ArrayExtension.Type&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; There is a type mismatch between the declared &lt;see cref=&quot;P:System.Windows.Markup.ArrayExtension.Type&quot; /&gt; of the array and one or more of its &lt;see cref=&quot;P:System.Windows.Markup.ArrayExtension.Items&quot; /&gt; values.">유효한 <see cref="P:System.Windows.Markup.ArrayExtension.Type" />을 제공하지 않은 배열을 처리했습니다.  
또는 
선언된 배열의 <see cref="P:System.Windows.Markup.ArrayExtension.Type" /> 및 하나 이상의 <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> 값 사이에 형식이 일치하지 않습니다.</exception>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Type">
      <summary vsli:raw="Gets or sets the type of array to be created when calling &lt;see cref=&quot;M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)&quot; /&gt;.">
        <see cref="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)" />를 호출할 때 만들 배열의 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The type of the array.">배열의 형식입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.ConstructorArgumentAttribute">
      <summary vsli:raw="Specifies that an object can be initialized by using a non-parameterless constructor syntax, and that a property of the specified name supplies construction information.  This information is primarily for XAML serialization.">개체가 매개변수가 있는 생성자 구문을 사용하여 초기화될 수 있고 지정된 이름의 속성이 생성 정보를 제공한다는 것을 지정합니다.  이 정보는 주로 XAML serialization용입니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ConstructorArgumentAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ConstructorArgumentAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.ConstructorArgumentAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="argumentName" vsli:raw="The name of the constructor that will initialize the associated property.">연결된 속성을 초기화하는 생성자의 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName">
      <summary vsli:raw="Gets the name parameter of the constructor that will initialize the associated property.">연결된 속성을 초기화할 생성자의 이름 매개 변수를 가져옵니다.</summary>
      <returns vsli:raw="The name of the constructor. Assuming CLR backing, this corresponds to the &lt;see cref=&quot;P:System.Reflection.ParameterInfo.Name&quot; /&gt; of the relevant constructor parameter.">생성자의 이름입니다. CLR 백업이라고 가정할 경우 관련 생성자 매개 변수의 <see cref="P:System.Reflection.ParameterInfo.Name" />에 해당합니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentPropertyAttribute">
      <summary vsli:raw="Indicates which property of a type is the XAML content property. A XAML processor uses this information when processing XAML child elements of XAML representations of the attributed type.">XAML 콘텐츠 속성인 형식의 속성을 나타냅니다. XAML 프로세서는 특성 형식 XAML 표현의 XAML 자식 요소를 처리할 때 이 정보를 사용합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ContentPropertyAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ContentPropertyAttribute&quot; /&gt; class, by using the specified name.">지정된 이름을 사용하여 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The property name for the property that is the content property.">콘텐츠 속성인 속성의 속성 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.ContentPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the property that is the content property.">콘텐츠 속성인 속성의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the property that is the content property.">콘텐츠 속성인 속성의 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentWrapperAttribute">
      <summary vsli:raw="Specifies one or more types on the associated collection type that will be used to wrap foreign content.">외부 콘텐츠를 래핑하는 데 사용할 연결된 컬렉션 형식에 하나 이상의 형식을 지정합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ContentWrapperAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="contentWrapper" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that is declared as a content wrapper for the collection type.">컬렉션 형식에 대한 콘텐츠 래퍼로 선언된 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper">
      <summary vsli:raw="Gets the type that is declared as a content wrapper for the collection type associated with this attribute.">이 특성과 연결된 컬렉션 형식의 콘텐츠 래퍼로 선언된 형식을 가져옵니다.</summary>
      <returns vsli:raw="The type that is declared as a content wrapper for the collection type.">컬렉션 형식의 콘텐츠 래퍼로 선언된 형식입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Markup.ContentWrapperAttribute&quot; /&gt; is equivalent this &lt;see cref=&quot;T:System.Windows.Markup.ContentWrapperAttribute&quot; /&gt; by comparing the &lt;see cref=&quot;P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper&quot; /&gt; properties.">
        <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> 속성을 비교하여 지정된 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />가 이 <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" />와 동일한지 여부를 확인합니다.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Markup.ContentWrapperAttribute&quot; /&gt; to compare.">비교할 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper&quot; /&gt; properties are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> 속성이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.GetHashCode">
      <summary vsli:raw="Gets a hash code for this instance.">이 인스턴스의 해시 코드를 가져옵니다.</summary>
      <returns vsli:raw="An integer hash code.">정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.TypeId">
      <summary vsli:raw="Gets a unique identifier for this attribute.">이 특성에 대한 고유 식별자를 가져옵니다.</summary>
      <returns vsli:raw="A unique identifier for the attribute.">특성에 대한 고유 식별자입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.DateTimeValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">
        <see cref="T:System.String" /> 인스턴스를 <see cref="T:System.DateTime" /> 인스턴스로 변환하거나 그 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.DateTimeValueSerializer&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.DateTimeValueSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be convert to an instance of &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">지정된 <see cref="T:System.String" />이 <see cref="T:System.DateTime" />의 인스턴스로 변환될 수 있는지 여부를 결정합니다.</summary>
      <param name="value" vsli:raw="The string to evaluate for conversion.">변환을 위해 평가할 문자열입니다.</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">값을 변환할 수 있으면 <see langword="true" />이고, 변환할 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if the specified object can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">지정한 개체를 <see cref="T:System.String" />으로 변환할 수 있는지 확인합니다.</summary>
      <param name="value" vsli:raw="The object to evaluate for conversion.">변환을 위해 평가할 개체입니다.</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" />를 <see cref="T:System.String" />으로 변환할 수 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">
        <see cref="T:System.String" />을 <see cref="T:System.DateTime" />으로 변환합니다.</summary>
      <param name="value" vsli:raw="The string to convert into a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">
        <see cref="T:System.DateTime" />으로 변환할 문자열입니다.</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.DateTime&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">지정된 <paramref name="value" />을 기반으로 하는 <see cref="T:System.DateTime" />의 새 인스턴스입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.DateTime&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.DateTime" />의 인스턴스를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value" vsli:raw="The object to convert into a string.">문자열로 변환할 개체입니다.</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns vsli:raw="A string representation of the specified &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">지정된 <see cref="T:System.DateTime" />의 문자열 표현입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; or is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see cref="T:System.DateTime" />이 아니거나 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Windows.Markup.DependsOnAttribute">
      <summary vsli:raw="Indicates that the attributed property is dependent on the value of another property.">특성 사용 속성이 다른 속성 값에 종속된다는 것을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.DependsOnAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.DependsOnAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The property that the property associated with this &lt;see cref=&quot;T:System.Windows.Markup.DependsOnAttribute&quot; /&gt; depends on.">이 <see cref="T:System.Windows.Markup.DependsOnAttribute" />와 연결된 속성이 종속된 속성입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.Name">
      <summary vsli:raw="Gets the name of the related property declared in this &lt;see cref=&quot;T:System.Windows.Markup.DependsOnAttribute&quot; /&gt;.">
        <see cref="T:System.Windows.Markup.DependsOnAttribute" />에서 선언된 관련 속성의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the related property.">관련 속성의 이름입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.TypeId">
      <summary vsli:raw="Gets a unique identifier for this &lt;see cref=&quot;T:System.Windows.Markup.DependsOnAttribute&quot; /&gt;.">이 <see cref="T:System.Windows.Markup.DependsOnAttribute" />에 대한 고유 식별자를 가져옵니다.</summary>
      <returns vsli:raw="The unique identifier.">고유 식별자입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.DictionaryKeyPropertyAttribute">
      <summary vsli:raw="Specifies a property of the associated class that provides the implicit key value. Implicit keys are used for keys rather than explicit &lt;see langword=&quot;x:Key&quot; /&gt; attributes defined in XAML for an item in &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; collections.">암시적 키 값을 제공하는 관련된 클래스의 속성을 지정합니다. 암시적 키는 <see cref="T:System.Collections.IDictionary" /> 컬렉션에 있는 항목의 XAML에 정의된 명시적 <see langword="x:Key" /> 특성이 아닌 키에 사용됩니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.DictionaryKeyPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.DictionaryKeyPropertyAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.DictionaryKeyPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the property that provides the implicit key value.">암시적 키 값을 제공하는 속성의 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.DictionaryKeyPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the property that provides the implicit key value.">암시적 키 값을 제공하는 속성의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the property that provides the implicit key value.">암시적 키 값을 제공하는 속성의 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.IComponentConnector">
      <summary vsli:raw="Provides markup compile and tools support for named XAML elements and for attaching event handlers to them.">명명된 XAML 요소 및 이러한 요소에 이벤트 처리기를 연결하기 위한 태그 컴파일 및 도구 지원을 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.Connect(System.Int32,System.Object)">
      <summary vsli:raw="Attaches events and names to compiled content.">이벤트와 이름을 컴파일된 콘텐츠에 연결합니다.</summary>
      <param name="connectionId" vsli:raw="An identifier token to distinguish calls.">호출을 구분할 식별자 토큰입니다.</param>
      <param name="target" vsli:raw="The target to connect events and names to.">이벤트 및 이름을 연결할 대상입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
      <summary vsli:raw="Loads the compiled page of a component.">구성 요소의 컴파일된 페이지를 로드합니다.</summary>
    </member>
    <member name="T:System.Windows.Markup.INameScope">
      <summary vsli:raw="Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.">특정 XAML 이름 범위 내에서 요소의 이름에 액세스하는 방법과 해당 XAML 이름 범위 내에서 이름의 고유성을 적용하는 방법에 대한 계약을 정의합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.INameScope.FindName(System.String)">
      <summary vsli:raw="Returns an object that has the provided identifying name.">제공된 식별 이름이 있는 개체를 반환합니다.</summary>
      <param name="name" vsli:raw="The name identifier for the object being requested.">요청하는 개체의 이름 식별자입니다.</param>
      <returns vsli:raw="The object, if found. Returns &lt;see langword=&quot;null&quot; /&gt; if no object of that name was found.">개체입니다(있는 경우). 해당 이름의 개체가 없으면 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
      <summary vsli:raw="Registers the provided name into the current XAML namescope.">제공된 이름을 현재 XAML 이름 범위로 등록합니다.</summary>
      <param name="name" vsli:raw="The name to register.">등록할 이름입니다.</param>
      <param name="scopedElement" vsli:raw="The specific element that the provided &lt;paramref name=&quot;name&quot; /&gt; refers to.">제공된 <paramref name="name" />이 참조하는 특정 요소입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.INameScope.UnregisterName(System.String)">
      <summary vsli:raw="Unregisters the provided name from the current XAML namescope.">현재 XAML 이름 범위에서 제공된 이름의 등록을 취소합니다.</summary>
      <param name="name" vsli:raw="The name to unregister.">등록을 취소할 이름입니다.</param>
    </member>
    <member name="T:System.Windows.Markup.INameScopeDictionary">
      <summary vsli:raw="Unifies enumerable, collection, and dictionary support that are useful for exposing a dictionary of names in a XAML namescope.">XAML 네임스페이스에서 이름 사전을 노출하는 데 유용한 열거 가능한 컬렉션 및 사전 지원을 통합합니다.</summary>
    </member>
    <member name="T:System.Windows.Markup.IProvideValueTarget">
      <summary vsli:raw="Represents a service that reports situational object-property relationships for markup extension evaluation.">태그 확장명 평가를 위한 상황별 개체 속성 관계를 보고하는 서비스를 나타냅니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
      <summary vsli:raw="Gets the target object being reported.">보고되는 대상 개체를 가져옵니다.</summary>
      <returns vsli:raw="The target object being reported.">보고되는 대상 개체입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
      <summary vsli:raw="Gets an identifier for the target property being reported.">보고될 대상 속성에 대한 식별자를 가져옵니다.</summary>
      <returns vsli:raw="An identifier for the target property being reported.">보고될 대상 속성에 대한 식별자입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.IQueryAmbient">
      <summary vsli:raw="Queries for whether a specified property should be treated as ambient in the current scope.">지정된 속성을 현재 범위에서 앰비언트로 처리해야 하는지 여부에 대한 쿼리입니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)">
      <summary vsli:raw="Queries for whether a specified named property can be considered ambient in the current scope.">지정된 명명된 속성을 현재 범위에서 앰비언트로 간주할 수 있는지 여부에 대한 쿼리입니다.</summary>
      <param name="propertyName" vsli:raw="The name of the property to check for ambience state.">앰비언트 상태를 확인할 속성의 이름입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the requested property can be considered ambient; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">요청된 속성을 앰비언트로 간주할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.IUriContext">
      <summary vsli:raw="Represents a service that can use application context to resolve a provided relative URI to an absolute URI.">절대 URI에 대해 제공된 상대 URI를 확인하기 위해 애플리케이션 컨텍스트를 사용할 수 있는 서비스를 나타냅니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.IUriContext.BaseUri">
      <summary vsli:raw="Gets or sets the base URI of the current application context.">현재 애플리케이션 컨텍스트의 기본 URI를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The base URI of the application context.">애플리케이션 컨텍스트의 기본 URI입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.IValueSerializerContext">
      <summary vsli:raw="Defines a context that is provided to a &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt;. The context can be used to enable special cases of serialization or different modes of serialization.">
        <see cref="T:System.Windows.Markup.ValueSerializer" />에 제공되는 컨텍스트를 정의합니다. 특수한 경우의 serialization이나 여러 다른 모드의 serialization을 설정하는 데 컨텍스트를 사용할 수 있습니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; for the given property descriptor.">지정된 속성 설명자에 대한 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</summary>
      <param name="descriptor" vsli:raw="The descriptor of the property being converted.">변환할 속성의 설명자입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; capable of serializing the specified property.">지정된 속성을 serialize할 수 있는 <see cref="T:System.Windows.Markup.ValueSerializer" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.Type)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; associated with the specified type.">지정된 형식과 연결된 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</summary>
      <param name="type" vsli:raw="The type of the value being converted.">변환되는 값의 형식입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; capable of serializing the specified type.">지정된 형식을 serialize할 수 있는 <see cref="T:System.Windows.Markup.ValueSerializer" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.IXamlTypeResolver">
      <summary vsli:raw="Represents a service that resolves from named elements in XAML markup to the appropriate CLR type.">XAML 태그의 명명된 요소에서 적합한 CLR 형식으로 확인되는 서비스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.IXamlTypeResolver.Resolve(System.String)">
      <summary vsli:raw="Resolves a named XAML type to the corresponding CLR &lt;see cref=&quot;T:System.Type&quot; /&gt;.">명명된 XAML 형식을 해당하는 CLR <see cref="T:System.Type" />으로 확인합니다.</summary>
      <param name="qualifiedTypeName" vsli:raw="The XAML type name to resolve. The type name is optionally qualified by the prefix for a XML namespace. Otherwise the current default XML namespace is assumed.">확인할 XAML 형식 이름입니다. 이 형식 이름은 XML 네임스페이스의 접두사에 따라 선택적으로 정규화됩니다. 그렇지 않으면 현재 기본 XML 네임스페이스가 사용됩니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that &lt;paramref name=&quot;qualifiedTypeName&quot; /&gt; resolves to.">
        <paramref name="qualifiedTypeName" />이 확인되는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtension">
      <summary vsli:raw="Provides a base class for XAML markup extension implementations that can be supported by .NET XAML Services and other XAML readers and XAML writers.">.NET Framework XAML 서비스 및 기타 XAML 판독기와 XAML 작성기에서 지원할 수 있는 XAML 태그 확장 구현에 대한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of a class derived from &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt;.">
        <see cref="T:System.Windows.Markup.MarkupExtension" />에서 파생된 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.">파생 클래스에서 구현된 경우 이 태그 확장의 대상 개체 속성에 대한 값으로 제공된 개체를 반환합니다.</summary>
      <param name="serviceProvider" vsli:raw="A service provider helper that can provide services for the markup extension.">태그 확장에 대한 서비스를 제공할 수 있는 서비스 공급자 도우미입니다.</param>
      <returns vsli:raw="The object value to set on the property where the extension is applied.">확장이 적용되는 속성에 설정할 개체 값입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute">
      <summary vsli:raw="Reports the bracket characters that a markup extension can return.">태그 확장에서 반환할 수 있는 괄호 문자를 보고합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.#ctor(System.Char,System.Char)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute&quot; /&gt; class using the provided characters.">제공된 문자를 사용하여 <see cref="T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="openingBracket" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that defines the opening bracket character.">여는 괄호 문자를 정의하는 <see cref="T:System.Char" />입니다.</param>
      <param name="closingBracket" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that defines the closing bracket character.">닫는 괄호 문자를 정의하는 <see cref="T:System.Char" />입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.ClosingBracket">
      <summary vsli:raw="Specifies the character to be used as the closing delimiter in a &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt;.">
        <see cref="T:System.Windows.Markup.MarkupExtension" />에서 닫는 구분 기호로 사용할 문자를 지정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; representing the character.">문자를 나타내는 <see cref="T:System.Char" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.OpeningBracket">
      <summary vsli:raw="Specifies the character to be used as the opening delimiter in a &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt;.">
        <see cref="T:System.Windows.Markup.MarkupExtension" />에서 여는 구분 기호로 사용할 문자를 지정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; representing the character.">문자를 나타내는 <see cref="T:System.Char" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute">
      <summary vsli:raw="Reports the type that a markup extension can return.">태그 확장에서 반환할 수 있는 형식을 보고합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&quot; /&gt; class using the provided &lt;see cref=&quot;T:System.Type&quot; /&gt;.">제공된 <see cref="T:System.Type" />을 사용하여 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="returnType" vsli:raw="The return type that this attribute reports.">이 특성에서 보고하는 반환 형식입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Deprecated; do not use.">사용되지 않습니다. 사용하지 마십시오.</summary>
      <param name="returnType" vsli:raw="The return type that this  .NET Framework attribute reports.">이 .NET Framework 특성가 보고하는 반환 형식입니다.</param>
      <param name="expressionType" vsli:raw="Deprecated; do not use.">사용되지 않습니다. 사용하지 마십시오.</param>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ExpressionType">
      <summary vsli:raw="Deprecated; do not use.">사용되지 않습니다. 사용하지 마십시오.</summary>
      <returns vsli:raw="Deprecated; do not use.">사용되지 않습니다. 사용하지 마십시오.</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ReturnType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt; return type that this .NET Framework attribute reports.">이 .NET Framework 특성가 보고하는 <see cref="T:System.Windows.Markup.MarkupExtension" /> 반환 형식을 가져옵니다.</summary>
      <returns vsli:raw="The type-safe return type of the specific &lt;see cref=&quot;M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)&quot; /&gt; implementation of the markup extension where the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&quot; /&gt; .NET Framework attribute is applied.">
        <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
        <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> .NET Framework 특성 구현의 형식이 안전한 반환 형식입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.MemberDefinition">
      <summary vsli:raw="Provides the base class that is used for a markup technique of defining members of a class in declarative XAML.">선언적 XAML의 클래스 멤버를 정의하는 태그 기술에 사용되는 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.MemberDefinition.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.MemberDefinition&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.MemberDefinition" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.MemberDefinition.Name">
      <summary vsli:raw="When implemented in a derived class, gets or sets the name of the member to define.">파생 클래스에서 구현되면 정의할 멤버의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the member to define.">정의할 멤버의 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.NameReferenceConverter">
      <summary vsli:raw="Provides type conversion to convert a string name into an object reference to the object with that name, or to return the name of an object from the object graph.">문자열 이름을 해당 이름의 개체에 대한 개체 참조로 변환하거나 개체 그래프의 개체 이름을 반환하는 형식 변환을 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.NameReferenceConverter&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.NameReferenceConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of one type to another object.">이 변환기가 한 형식의 개체를 다른 개체로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether the converter can convert an object to the specified destination type.">변환기가 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType" vsli:raw="The type to convert to.">변환할 대상 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">변환기가 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the provided object to another object, using the specified context and culture information.">지정된 컨텍스트 및 문화권 정보를 사용하여 제공된 개체를 다른 개체로 변환합니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">현재 문화권으로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The reference name string to convert.">변환할 참조 이름 문자열입니다.</param>
      <returns vsli:raw="The returned object, which is potentially any object that is type-mapped in the relevant backing assemblies and capable of being declared in XAML with a XAML name reference.">반환되는 개체이며, 관련 백업 어셈블리에서 형식 매핑된 모든 개체일 수 있고 XAML에서 XAML 이름 참조를 사용하여 선언될 수 있습니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is a null string or empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see cref=&quot;T:System.Xaml.IXamlNameResolver&quot; /&gt; service is missing or invalid.">
        <paramref name="value" />가 null 문자열이거나 빈 문자열인 경우  
또는 
 <see cref="T:System.Xaml.IXamlNameResolver" /> 서비스가 없거나 올바르지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts an object to the specified type. This is intended to return XAML reference names for objects in an object graph.">개체를 지정된 형식으로 변환합니다. 개체 그래프의 개체에 대한 XAML 참조 이름을 반환하기 위한 것입니다.</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">현재 문화권으로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value" vsli:raw="The object to retrieve the reference name for.">참조 이름을 검색할 개체입니다.</param>
      <param name="destinationType" vsli:raw="The type to return. You should always reference the &lt;see cref=&quot;T:System.String&quot; /&gt; type.">반환할 형식입니다. 항상 <see cref="T:System.String" /> 형식을 참조해야 합니다.</param>
      <returns vsli:raw="The reference name of the input &lt;paramref name=&quot;value&quot; /&gt; object.">입력 <paramref name="value" /> 개체의 참조 이름입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;T:System.Xaml.IXamlNameProvider&quot; /&gt; service is missing or invalid.">
        <see cref="T:System.Xaml.IXamlNameProvider" /> 서비스가 없거나 올바르지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.Windows.Markup.NameScopePropertyAttribute">
      <summary vsli:raw="Specifies a property of the associated class that provides the XAML namescope value.">XAML 이름 범위 값을 제공하는 관련된 클래스의 속성을 지정합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.NameScopePropertyAttribute&quot; /&gt; class with the specified name.">지정된 이름을 사용하여 <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the property on the attributed type that provides the XAML namescope.">XAML 이름 범위를 제공하는 특성 사용 형식에 대한 속성 이름입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.NameScopePropertyAttribute&quot; /&gt; class with the specified name and type.">지정된 이름 및 형식을 사용하여 <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the attachable member that provides the XAML name scope.">XAML 이름 범위를 제공하는 연결 가능 멤버의 이름입니다.</param>
      <param name="type" vsli:raw="The owner type of the attachable member that provides the XAML name scope.">XAML 이름 범위를 제공하는 연결 가능 멤버의 소유자 형식입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the property that provides the XAML namescope.">XAML 이름 범위를 제공하는 속성의 이름을 가져옵니다.</summary>
      <returns vsli:raw="A string value that is the name of the property that provides the XAML namescope.">XAML 이름 범위를 제공하는 속성의 이름인 문자열 값입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Type">
      <summary vsli:raw="Gets the owner type of the attached property that provides the XAML namescope support.">XAML 이름 범위 지원을 제공하는 연결된 속성의 소유자 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; value that is the owner type of the attached property that provides the XAML namescope support, or &lt;see langword=&quot;null&quot; /&gt;.">XAML 이름 범위 지원을 제공하는 연결된 속성의 소유자 형식인 <see cref="T:System.Type" /> 값이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.NullExtension">
      <summary vsli:raw="Implements a XAML markup extension in order to return a null object, which you can use to explicitly set values to null in XAML.">null 개체를 반환하기 위해 XAML에서 명시적으로 값을 null로 설정하는 데 사용할 수 있는 XAML 태그 확장을 구현합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.NullExtension&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.NullExtension" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="Provides &lt;see langword=&quot;null&quot; /&gt; to use as a value as the output of this markup extension.">이 태그 확장의 출력 값으로 사용할 <see langword="null" />을 제공합니다.</summary>
      <param name="serviceProvider" vsli:raw="An object that can provide services for the markup extension implementation.">태그 확장 구현에 대한 서비스를 제공할 수 있는 개체입니다.</param>
      <returns vsli:raw="A null reference.">null 참조입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.PropertyDefinition">
      <summary vsli:raw="Supports a markup technique of defining properties of a class in declarative XAML.">선언적 XAML의 클래스 속성을 정의하는 태그 기술을 지원합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.PropertyDefinition.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.PropertyDefinition&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.PropertyDefinition" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Attributes">
      <summary vsli:raw="Gets a list of associated CLR attributes.">연관된 CLR 특성의 목록을 가져옵니다.</summary>
      <returns vsli:raw="A list of associated attributes.">연관된 특성 목록입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Modifier">
      <summary vsli:raw="Gets or sets the access level of the defined property.">정의된 속성의 액세스 수준을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The access level of the defined property, as a string.">문자열로 나타낸 정의된 속성의 액세스 수준입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Name">
      <summary vsli:raw="Gets or sets the name of the property to define.">정의할 속성의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the property to define.">정의할 속성의 이름입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Type">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the property to define.">정의할 속성의 <see cref="T:System.Xaml.XamlType" />을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The XAML type identifier of the property to define.">정의할 속성의 XAML형식 식별자입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.Reference">
      <summary vsli:raw="Implements the &lt;c&gt;{x:Reference}&lt;/c&gt; markup extension.">
        <c>{x:Reference}</c> 태그 확장명을 구현합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.Reference&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.Reference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.Reference&quot; /&gt; class with the &lt;paramref name=&quot;name&quot; /&gt; argument.">
        <paramref name="name" /> 인수를 사용하여 <see cref="T:System.Windows.Markup.Reference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The XAML name of the element to reference.">참조할 요소의 XAML 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.Reference.Name">
      <summary vsli:raw="Gets or sets the XAML name to obtain the reference for.">참조를 가져올 XAML 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The XAML name of the element to obtain the reference for.">참조를 가져올 요소의 XAML 이름입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.Reference.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="Returns an object that is the value of the target property. For the &lt;see cref=&quot;T:System.Windows.Markup.Reference&quot; /&gt; type, this is the object that the provided &lt;see cref=&quot;P:System.Windows.Markup.Reference.Name&quot; /&gt; references.">대상 속성의 값인 개체를 반환합니다. <see cref="T:System.Windows.Markup.Reference" /> 형식의 경우 이것은 제공된 <see cref="P:System.Windows.Markup.Reference.Name" />이 참조하는 개체입니다.</summary>
      <param name="serviceProvider" vsli:raw="A class that implements the &lt;see cref=&quot;T:System.Xaml.IXamlNameResolver&quot; /&gt; service.">
        <see cref="T:System.Xaml.IXamlNameResolver" /> 서비스를 구현하는 클래스입니다.</param>
      <returns vsli:raw="The value of the target property. This is potentially any object that is type-mapped in the relevant backing assemblies.">대상 속성의 값입니다. 이것은 관련 백업 어셈블리에서 형식 매핑된 개체일 수 있습니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;serviceProvider&quot; /&gt; value does not implement the &lt;see cref=&quot;T:System.Xaml.IXamlNameResolver&quot; /&gt; service.&#xA;&#xA; -or-&#xA;&#xA; &lt;see cref=&quot;P:System.Windows.Markup.Reference.Name&quot; /&gt; value has not been set through construction or positional usage.">
        <paramref name="serviceProvider" /> 값이 <see cref="T:System.Xaml.IXamlNameResolver" /> 서비스를 구현하지 않는 경우  
또는 
 <see cref="P:System.Windows.Markup.Reference.Name" /> 값이 생성 또는 위치 사용을 통해 설정되지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceProvider&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceProvider" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Windows.Markup.RootNamespaceAttribute">
      <summary vsli:raw="Represents an assembly level attribute that is used to identify the value of the &lt;see langword=&quot;RootNamespace&quot; /&gt; property in a Visual Studio project file.">Visual Studio 프로젝트 파일의 <see langword="RootNamespace" /> 속성 값을 식별하는 데 사용하는 어셈블리 수준 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.RootNamespaceAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.RootNamespaceAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.RootNamespaceAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nameSpace" vsli:raw="The root namespace value.">루트 네임스페이스 값입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.RootNamespaceAttribute.Namespace">
      <summary vsli:raw="Gets the string that corresponds to the value of the &lt;see langword=&quot;RootNamespace&quot; /&gt; property in a Visual Studio project file.">Visual Studio 프로젝트 파일의 <see langword="RootNamespace" /> 속성 값에 해당하는 문자열을 가져옵니다.</summary>
      <returns vsli:raw="The string that corresponds to the value of the &lt;see langword=&quot;RootNamespace&quot; /&gt; property in a Visual Studio project file.">값에 해당 하는 문자열을 <see langword="RootNamespace" /> Visual Studio 프로젝트 파일의 속성입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.RuntimeNamePropertyAttribute">
      <summary vsli:raw="Represents a type-level attribute that reports which property of the type maps to the XAML x:Name attribute.">XAML x:Name attribute로 매핑할 형식의 속성을 보고하는 형식 수준 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.RuntimeNamePropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.RuntimeNamePropertyAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the property to use as the &lt;see langword=&quot;x:Name&quot; /&gt; equivalent of the class.">클래스의 <see langword="x:Name" />에 해당하는 값으로 사용할 속성의 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.RuntimeNamePropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the runtime name property that is specified by this &lt;see cref=&quot;T:System.Windows.Markup.RuntimeNamePropertyAttribute&quot; /&gt;.">이 <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" />로 지정된 런타임 이름 속성의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the property.">속성의 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.StaticExtension">
      <summary vsli:raw="Implements a markup extension that returns static field and property references.">정적 필드 및 속성 참조를 반환하는 태그 확장을 구현합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.StaticExtension&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.StaticExtension" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.StaticExtension&quot; /&gt; class using the provided &lt;paramref name=&quot;member&quot; /&gt; string.">제공된 <paramref name="member" /> 문자열을 사용하여 <see cref="T:System.Windows.Markup.StaticExtension" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member" vsli:raw="A string that identifies the member to make a reference to. This string uses the format &lt;c&gt;prefix:typeName.fieldOrPropertyName&lt;/c&gt;. &lt;c&gt;prefix&lt;/c&gt; is the mapping prefix for a XAML namespace, and is only required to reference static values that are not mapped to the default XAML namespace.">참조할 멤버를 식별하는 문자열입니다. 이 문자열은 <c>prefix:typeName.fieldOrPropertyName</c> 양식을 사용합니다. <c>prefix</c>는 XAML 네임스페이스에 대한 매핑 접두사이며 기본 XAML 네임스페이스에 매핑되지 않은 정적 값을 참조하려는 경우에만 필요합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.Member">
      <summary vsli:raw="Gets or sets a member name string that is used to resolve a static field or property based on the service-provided type resolver.">서비스 제공 형식 확인자를 기반으로 정적 필드나 속성을 확인하는 데 사용되는 멤버 이름 문자열을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A string that identifies the member to make a reference to.">참조할 멤버를 식별하는 문자열입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Attempted to set &lt;see cref=&quot;P:System.Windows.Markup.StaticExtension.Member&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="P:System.Windows.Markup.StaticExtension.Member" />를 <see langword="null" />로 설정하려고 했습니다.</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.MemberType">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Type&quot; /&gt; that defines the static member to return.">반환할 정적 멤버를 정의하는 <see cref="T:System.Type" />을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that defines the static member to return.">반환할 정적 멤버를 정의하는 <see cref="T:System.Type" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Attempted to set &lt;see cref=&quot;P:System.Windows.Markup.StaticExtension.MemberType&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="P:System.Windows.Markup.StaticExtension.MemberType" />를 <see langword="null" />로 설정하려고 했습니다.</exception>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="Returns an object value to set on the property where you apply this extension. For &lt;see cref=&quot;T:System.Windows.Markup.StaticExtension&quot; /&gt;, the return value is the static value that is evaluated for the requested static member.">이 확장을 적용하는 속성에 설정할 개체 값을 반환합니다. <see cref="T:System.Windows.Markup.StaticExtension" />의 경우 이 반환 값은 요청된 정적 멤버에 대해 계산되는 정적 값입니다.</summary>
      <param name="serviceProvider" vsli:raw="An object that can provide services for the markup extension. The service provider is expected to provide a service that implements a type resolver (&lt;see cref=&quot;T:System.Windows.Markup.IXamlTypeResolver&quot; /&gt;).">태그 확장명 서비스를 제공할 수 있는 개체입니다. 서비스 공급자는 형식 확인자(<see cref="T:System.Windows.Markup.IXamlTypeResolver" />)를 구현하는 서비스를 제공해야 합니다.</param>
      <returns vsli:raw="The static value to set on the property where the extension is applied.">확장이 적용되는 속성에 설정할 정적 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;member&quot; /&gt; value for the extension is &lt;see langword=&quot;null&quot; /&gt; at the time of evaluation.">확장에 대한 <paramref name="member" /> 값은 평가 시 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Some part of the &lt;paramref name=&quot;member&quot; /&gt; string did not parse properly  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;serviceProvider&quot; /&gt; did not provide a service for &lt;see cref=&quot;T:System.Windows.Markup.IXamlTypeResolver&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; value did not resolve to a static member.">
        <paramref name="member" /> 문자열의 일부가 제대로 구문 분석되지 않았습니다. 
또는 
 <paramref name="serviceProvider" />에서 <see cref="T:System.Windows.Markup.IXamlTypeResolver" />에 대한 서비스를 제공하지 않는 경우  
또는 
 <paramref name="member" /> 값이 정적 멤버로 확인되지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceProvider&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceProvider" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute">
      <summary vsli:raw="Indicates to XAML processors that the whitespace surrounding elements of the type in markup should be trimmed when serializing.">XAML 프로세서에서 serialize할 때 태그 형식에서 요소 주변의 공백을 트리밍해야 함을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.TrimSurroundingWhitespaceAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Windows.Markup.TypeExtension">
      <summary vsli:raw="Implements a markup extension that returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; based on a string input.">문자열 입력에 따라 <see cref="T:System.Type" />을 반환하는 태그 확장을 구현합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.TypeExtension&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.TypeExtension" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.TypeExtension&quot; /&gt; class, initializing the &lt;see cref=&quot;P:System.Windows.Markup.TypeExtension.TypeName&quot; /&gt; value based on the provided &lt;paramref name=&quot;typeName&quot; /&gt; string.">제공된 <paramref name="typeName" /> 문자열에 따라 <see cref="T:System.Windows.Markup.TypeExtension" /> 값을 초기화하는 <see cref="P:System.Windows.Markup.TypeExtension.TypeName" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName" vsli:raw="A string that identifies the type to make a reference to. This string uses the format &lt;c&gt;prefix:className&lt;/c&gt;. &lt;c&gt;prefix&lt;/c&gt; is the mapping prefix for a XAML namespace, and is only required to reference types that are not mapped to the default XAML namespace.">참조할 형식을 식별하는 문자열입니다. 이 문자열은 <c>prefix:className</c> 형식을 사용합니다. <c>prefix</c>는 XAML 네임스페이스에 대한 매핑 접두사이며 기본 XAML 네임스페이스에 매핑되지 않은 형식을 참조하려는 경우에만 필요합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Attempted to specify &lt;paramref name=&quot;typeName&quot; /&gt; as &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" />을 <see langword="null" />로 지정하려고 시도했습니다.</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.TypeExtension&quot; /&gt; class, declaring the type directly.">형식을 직접 선언하여 <see cref="T:System.Windows.Markup.TypeExtension" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The type to be represented by this &lt;see cref=&quot;T:System.Windows.Markup.TypeExtension&quot; /&gt;.">이 <see cref="T:System.Windows.Markup.TypeExtension" />으로 표현할 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="Returns an object that should be set on the property where this extension is applied. For &lt;see cref=&quot;T:System.Windows.Markup.TypeExtension&quot; /&gt; , this is the &lt;see cref=&quot;T:System.Type&quot; /&gt; value as evaluated for the requested type name.">이 확장이 적용되는 속성에 설정해야 하는 개체를 반환합니다. <see cref="T:System.Windows.Markup.TypeExtension" />의 경우 이 값은 요청된 형식 이름에 대해 계산된 <see cref="T:System.Type" /> 값입니다.</summary>
      <param name="serviceProvider" vsli:raw="Object that can provide services for the markup extension. The provider is expected to provide a service for &lt;see cref=&quot;T:System.Windows.Markup.IXamlTypeResolver&quot; /&gt;.">태그 확장에 서비스를 제공할 수 있는 개체입니다. 이 공급자는 <see cref="T:System.Windows.Markup.IXamlTypeResolver" />에 대한 서비스를 제공해야 합니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to set on the property where the extension is applied.">확장이 적용되는 속성에 설정할 <see cref="T:System.Type" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; value for the extension is &lt;see langword=&quot;null&quot; /&gt;.">확장에 대한 <paramref name="member" /> 값이 <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Some part of the &lt;paramref name=&quot;typeName&quot; /&gt; string did not parse properly.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;serviceProvider&quot; /&gt; did not provide a service for &lt;see cref=&quot;T:System.Windows.Markup.IXamlTypeResolver&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;typeName&quot; /&gt; value did not resolve to a type.">
        <paramref name="typeName" /> 문자열의 일부가 제대로 구문 분석되지 않은 경우  
또는 
 <paramref name="serviceProvider" />에서 <see cref="T:System.Windows.Markup.IXamlTypeResolver" />에 대한 서비스를 제공하지 않는 경우  
또는 
 형식에 대한 <paramref name="typeName" />값을 확인하지 않았습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceProvider&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="serviceProvider" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.Type">
      <summary vsli:raw="Gets or sets the type information for this extension.">이 확장에 대한 형식 정보를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The established type. For runtime purposes, this may be &lt;see langword=&quot;null&quot; /&gt; for get access, but cannot be set to &lt;see langword=&quot;null&quot; /&gt;.">설정된 형식입니다. 런타임에 액세스 권한을 얻기 위해 <see langword="null" />이 될 수도 있지만 <see langword="null" />로 설정할 수는 없습니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Attempted to set to &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="null" />로 설정하려고 한 경우</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.TypeName">
      <summary vsli:raw="Gets or sets the type name represented by this markup extension.">이 태그 확장으로 표시되는 형식 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A string that identifies the type. This string uses the format prefix&lt;c&gt;:&lt;/c&gt;className. (prefix is the mapping prefix for an XML namespace and is only required to reference types that are not mapped to the default XML namespace for WPF (&lt;c&gt;http://schemas.microsoft.com/winfx/2006/xaml/presentation&lt;/c&gt;).">형식을 식별하는 문자열입니다. 이 문자열 형식을 사용 하 여 접두사<c>:</c>className합니다. prefix 는 XML 네임스페이스에 대한 매핑 접두사이며 WPF(http://schemas.microsoft.com/winfx/2006/xaml/presentation)에 대한 기본 XML 네임스페이스에 매핑되지 않은 형식을 참조하려는 경우에만 필요합니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Attempted to set to &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="null" />로 설정하려고 했습니다.</exception>
    </member>
    <member name="T:System.Windows.Markup.UidPropertyAttribute">
      <summary vsli:raw="Indicates the CLR property of a class that provides the x:Uid Directive value.">x:Uid 지시문 값을 제공하는 클래스의 CLR 속성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.UidPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.UidPropertyAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.UidPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the property that provides the &lt;see langword=&quot;x:Uid&quot; /&gt; value.">
        <see langword="x:Uid" /> 값을 제공하는 속성의 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.UidPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the CLR property that represents the x:Uid Directive value.">x:Uid 지시문 값을 나타내는 CLR 속성의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the CLR property that represents x:Uid Directive.">x:Uid 지시문을 나타내는 CLR 속성의 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.UsableDuringInitializationAttribute">
      <summary vsli:raw="Indicates whether this type is built top-down during XAML object graph creation.">XAML 개체 그래프를 만드는 동안 이 형식이 하향식으로 빌드되는지 여부를 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.UsableDuringInitializationAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.UsableDuringInitializationAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.UsableDuringInitializationAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="usable" vsli:raw="Defines whether the associated class is usable during initialization.">초기화하는 동안 연결된 클래스를 사용할 수 있는지 여부를 지정합니다.</param>
    </member>
    <member name="P:System.Windows.Markup.UsableDuringInitializationAttribute.Usable">
      <summary vsli:raw="Gets a value that indicates whether the associated class is usable during initialization.">초기화하는 동안 관련된 클래스를 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the associated class is usable during initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">초기화하는 동안 관련된 클래스를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializer">
      <summary vsli:raw="Abstract class that defines conversion behavior for serialization from an object representation.">개체 표현에서 serialization의 변환 동작을 정의하는 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.ValueSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="When overridden in a derived class, determines whether the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be converted to an instance of the type that the implementation of &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; supports.">파생 클래스에서 재정의된 경우 지정된 <see cref="T:System.String" />을 <see cref="T:System.Windows.Markup.ValueSerializer" /> 구현에서 지원하는 형식의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The string to evaluate for conversion.">변환을 위해 평가할 문자열입니다.</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">값을 변환할 수 있으면 <see langword="true" />이고, 변환할 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="When overridden in a derived class, determines whether the specified object can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;.">파생 클래스에서 재정의되는 경우 지정된 개체가 <see cref="T:System.String" />으로 변환될 수 있는지 여부를 결정합니다.</summary>
      <param name="value" vsli:raw="The object to evaluate for conversion.">변환을 위해 평가할 개체입니다.</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" />를 <see cref="T:System.String" />으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false." />입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="When overridden in a derived class, converts a &lt;see cref=&quot;T:System.String&quot; /&gt; to an instance of the type that the implementation of &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; supports.">파생 클래스에서 재정의된 경우 <see cref="T:System.String" />을 <see cref="T:System.Windows.Markup.ValueSerializer" /> 구현에서 지원하는 형식의 인스턴스로 변환합니다.</summary>
      <param name="value" vsli:raw="The string to convert.">변환할 문자열입니다.</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns vsli:raw="A new instance of the type that the implementation of &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; supports based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">제공된 <paramref name="value" />를 기반으로 하여 <see cref="T:System.Windows.Markup.ValueSerializer" /> 구현에서 지원하는 형식의 새 인스턴스입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; cannot be converted.">
        <paramref name="value" />를 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="When overridden in a derived class, converts the specified object to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">파생 클래스에서 재정의된 경우 지정된 개체를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value" vsli:raw="The object to convert into a string.">문자열로 변환할 개체입니다.</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns vsli:raw="A string representation of the specified object.">지정한 개체의 문자열 표현입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; cannot be converted.">
        <paramref name="value" />를 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">변환을 수행할 수 없을 때 throw되는 예외를 반환합니다.</summary>
      <param name="value" vsli:raw="The object that could not be converted.">변환할 수 없는 개체입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; object for the exception to throw when a &lt;see langword=&quot;ConvertFrom&quot; /&gt; conversion cannot be performed.">
        <see langword="ConvertFrom" /> 변환을 수행할 수 없을 때 throw할 예외에 대한 <see cref="T:System.Exception" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">변환을 수행할 수 없을 때 throw되는 예외를 반환합니다.</summary>
      <param name="value" vsli:raw="The object that could not be converted.">변환할 수 없는 개체입니다.</param>
      <param name="destinationType" vsli:raw="A type that represents the type the conversion was trying to convert to.">변환할 대상 형식을 나타내는 형식입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; object for the exception to throw when a &lt;see langword=&quot;ConvertTo&quot; /&gt; conversion cannot be performed.">
        <see langword="ConvertTo" /> 변환을 수행할 수 없을 때 throw할 예외에 대한 <see cref="T:System.Exception" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; declared for a property, by passing a CLR property descriptor for the property.">속성에 대한 CLR 속성 설명자를 전달하여 속성에 대해 선언된 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</summary>
      <param name="descriptor" vsli:raw="The CLR property descriptor for the property to be serialized.">serialize될 속성에 대한 CLR 속성 설명자입니다.</param>
      <returns vsli:raw="The serializer associated with the specified property. May return &lt;see langword=&quot;null&quot; /&gt;.">지정된 속성과 연결된 serializer입니다. <see langword="null" />을 반환할 수 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;descriptor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="descriptor" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; declared for the specified property, using the specified context.">지정된 컨텍스트를 사용하여 지정된 속성에 대해 선언된 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</summary>
      <param name="descriptor" vsli:raw="Descriptor for the property to be serialized.">serialize할 속성에 대한 설명자입니다.</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns vsli:raw="The serializer associated with the specified property.">지정된 속성과 연결된 serializer입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;descriptor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="descriptor" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; declared for the specified type.">지정된 형식에 대해 선언된 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</summary>
      <param name="type" vsli:raw="The type to get the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; for.">
        <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져올 형식입니다.</param>
      <returns vsli:raw="The serializer associated with the specified type. May return &lt;see langword=&quot;null&quot; /&gt;.">지정된 형식과 연결된 serializer입니다. <see langword="null" />을 반환할 수 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; declared for the specified type, using the specified context.">지정된 컨텍스트를 사용하여 지정된 형식에 대해 선언된 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</summary>
      <param name="type" vsli:raw="The type to get the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; for.">
        <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져올 형식입니다.</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns vsli:raw="The serializer associated with the specified type.">지정된 형식과 연결된 serializer입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Gets an enumeration of the types referenced by the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt;.">
        <see cref="T:System.Windows.Markup.ValueSerializer" />에서 참조되는 형식의 열거형을 가져옵니다.</summary>
      <param name="value" vsli:raw="The value being serialized.">serialize되는 값입니다.</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns vsli:raw="The types converted by this serializer.">이 serializer에서 변환하는 형식입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializerAttribute">
      <summary>serialize될 때 형식이나 속성에서 사용해야 하는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 클래스를 식별합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.String)">
      <summary>어셈블리의 정규화된 형식 이름 문자열을 사용하여 <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="valueSerializerTypeName">
        <see cref="T:System.Windows.Markup.ValueSerializer" /> 클래스에서 사용할 어셈블리의 정규화된 형식 이름 문자열입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.Type)">
      <summary>지정된 형식을 사용하여 <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="valueSerializerType">
        <see cref="T:System.Windows.Markup.ValueSerializer" /> 클래스의 형식을 나타내는 형식입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerType">
      <summary>이 특성에서 보고하는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 클래스의 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.Markup.ValueSerializer" />의 형식입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerTypeName">
      <summary>이 형식이나 속성에 대한 <see cref="T:System.Windows.Markup.ValueSerializer" /> 형식의 정규화된 어셈블리 이름을 가져옵니다.</summary>
      <returns>형식에 대한 어셈블리의 정규화된 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute">
      <summary vsli:raw="Indicates that a collection type should be processed as being whitespace significant by a XAML processor.">XAML 프로세서에 의해 유효한 공백으로 처리되어야 하는 컬렉션 형식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.WhitespaceSignificantCollectionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Windows.Markup.XamlDeferLoadAttribute">
      <summary vsli:raw="Indicates that a class or property has a deferred load usage for XAML (such as a template behavior), and reports the class that enables the deferring behavior and its destination/content type.">클래스 또는 속성에 XAML에 대한 지연된 로드 사용(예: 템플릿 동작)이 있음을 나타내고 지연 동작 및 해당 대상/콘텐츠 형식을 사용하도록 설정하는 클래스를 보고합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlDeferLoadAttribute&quot; /&gt; class, using string names of types.">형식의 문자열 이름을 사용하여 <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="loaderType" vsli:raw="The string name of the type for the implementation to use for the defer load behavior.">지연 로드 동작에 사용할 구현에 대한 형식의 문자열 이름입니다.</param>
      <param name="contentType" vsli:raw="The string name of the type for the destination/content type of the defer load behavior.">지연 로드 동작의 대상/콘텐츠 형식에 대한 형식의 문자열 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;loaderType&quot; /&gt; or &lt;paramref name=&quot;contentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="loaderType" /> 또는 <paramref name="contentType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlDeferLoadAttribute&quot; /&gt; class, using CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; values.">CLR <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> 값을 사용하여 <see cref="T:System.Type" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="loaderType" vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the implementation to use for the defer load behavior.">지연 로드 동작에 사용할 구현에 대한 CLR <see cref="T:System.Type" /> 값입니다.</param>
      <param name="contentType" vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the destination/content type of the defer load behavior.">지연 로드 동작의 대상/콘텐츠 형식에 대한 CLR <see cref="T:System.Type" /> 값입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;loaderType&quot; /&gt; or &lt;paramref name=&quot;contentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="loaderType" /> 또는 <paramref name="contentType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentType">
      <summary vsli:raw="Gets the CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the destination/content type of the defer load behavior.">지연 로드 동작의 대상/콘텐츠 형식에 대한 CLR <see cref="T:System.Type" /> 값을 가져옵니다.</summary>
      <returns vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the destination/content type of the defer load behavior.">지연 로드 동작의 대상/콘텐츠 형식에 대한 CLR <see cref="T:System.Type" /> 값입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentTypeName">
      <summary vsli:raw="Gets the string name of the type for the implementation to use for the defer load behavior.">지연 로드 동작에 사용할 구현에 대한 형식의 문자열 이름을 가져옵니다.</summary>
      <returns vsli:raw="The string name of the type for the converter to use for the defer load behavior.">지연 로드 동작에 사용할 변환기에 대한 형식의 문자열 이름입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderType">
      <summary vsli:raw="Gets the CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the implementation to use for the defer load behavior.">지연 로드 동작에 사용할 구현에 대한 CLR <see cref="T:System.Type" /> 값을 가져옵니다.</summary>
      <returns vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the implementation to use for the defer load behavior.">지연 로드 동작에 사용할 구현에 대한 CLR <see cref="T:System.Type" /> 값입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderTypeName">
      <summary vsli:raw="Gets the string name of the type for the destination/content type of the defer load behavior.">지연 로드 동작의 대상/콘텐츠 형식에 대한 형식의 문자열 이름을 가져옵니다.</summary>
      <returns vsli:raw="The string name of the type for the destination/content type of the defer load behavior.">지연 로드 동작의 대상/콘텐츠 형식에 대한 형식의 문자열 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute">
      <summary vsli:raw="Indicates that a class can use a markup extension to provide a value, and references a handler to use for markup extension set operations.">클래스에서 태그 확장을 사용하여 값을 제공할 수 있음을 나타내고 태그 확장 설정 작업에 사용할 처리기를 참조합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetMarkupExtensionAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xamlSetMarkupExtensionHandler" vsli:raw="The name of the handler to use for markup extension set operations.">태그 확장 설정 작업에 사용할 처리기의 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionAttribute.XamlSetMarkupExtensionHandler">
      <summary vsli:raw="Gets the name of the handler to use for markup extension set operations.">태그 확장 설정 작업에 사용할 처리기의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the handler to use for markup extension set operations.">태그 확장 설정 작업에 사용할 처리기의 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs">
      <summary vsli:raw="Provides data for callbacks that are invoked when a XAML object writer sets a value using a markup extension.">XAML 개체 작성기에서 태그 확장을 사용하여 값을 설정할 때 호출되는 콜백에 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.#ctor(System.Xaml.XamlMember,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member" vsli:raw="XAML type system / schema information for the member being set.">설정될 멤버에 대한 XAML 형식 시스템/스키마 정보입니다.</param>
      <param name="value" vsli:raw="The markup extension reference to provide for the member being set.">설정될 멤버에 제공할 태그 확장 참조입니다.</param>
      <param name="serviceProvider" vsli:raw="Service provider information passed to the markup extension.">태그 확장에 전달되는 서비스 공급자 정보입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.CallBase">
      <summary vsli:raw="Provides a way to invoke a callback as defined on a base class of the current acting type.">현재 활성 형식의 기본 클래스에 정의된 콜백을 호출하는 방법을 제공합니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.MarkupExtension">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt; reference that is relevant to this &lt;see cref=&quot;T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&quot; /&gt;.">이 <see cref="T:System.Windows.Markup.MarkupExtension" />와 관련된 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 참조를 가져옵니다.</summary>
      <returns vsli:raw="The markup extension reference that is relevant to this &lt;see cref=&quot;T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&quot; /&gt;.">이 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />와 관련된 태그 확장 참조입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.ServiceProvider">
      <summary vsli:raw="Gets service provider information that was passed to the markup extension.">태그 확장에 전달된 서비스 공급자 정보를 가져옵니다.</summary>
      <returns vsli:raw="Service provider information that was passed to the markup extension.">태그 확장에 전달된 서비스 공급자 정보입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterAttribute">
      <summary vsli:raw="Indicates that a class can use a type converter to provide a value, and references a handler to use for type converter setting cases.">클래스에서 형식 변환기를 사용하여 값을 제공할 수 있음을 나타내고 형식 변환기 설정 사례에 사용할 처리기를 참조합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetTypeConverterAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xamlSetTypeConverterHandler" vsli:raw="The name of the handler to use for type converter setting operations.">형식 변환기 설정 작업에 사용할 처리기의 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterAttribute.XamlSetTypeConverterHandler">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;xamlSetTypeConverterHandler&quot; /&gt; initialization value (the handler name) specified in the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetTypeConverterAttribute&quot; /&gt;.">
        <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />에 지정된 <paramref name="xamlSetTypeConverterHandler" /> 초기화 값(처리기 이름)을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;paramref name=&quot;xamlSetTypeConverterHandler&quot; /&gt; value specified in the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetTypeConverterAttribute&quot; /&gt;.">
        <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />에 지정된 <paramref name="xamlSetTypeConverterHandler" /> 값입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterEventArgs">
      <summary vsli:raw="Provides data for callbacks that are invoked when a XAML writer sets a value using a type converter call.">XAML 작성기에서 형식 변환기 호출을 사용하여 값을 설정할 때 호출되는 콜백에 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.#ctor(System.Xaml.XamlMember,System.ComponentModel.TypeConverter,System.Object,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetTypeConverterEventArgs&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member" vsli:raw="XAML type system / schema information for the member being set.">설정될 멤버에 대한 XAML 형식 시스템/스키마 정보입니다.</param>
      <param name="typeConverter" vsli:raw="The specific type converter instance being invoked.">호출되는 형식별 변환기 인스턴스입니다.</param>
      <param name="value" vsli:raw="The value to provide for the member being set.">설정될 멤버에 제공할 값입니다.</param>
      <param name="serviceProvider" vsli:raw="Service provider information that can be used by the &lt;paramref name=&quot;typeConverter&quot; /&gt; class.">
        <paramref name="typeConverter" /> 클래스에서 사용할 수 있는 서비스 공급자 정보입니다.</param>
      <param name="cultureInfo" vsli:raw="Culture information that can be used by the &lt;paramref name=&quot;typeConverter&quot; /&gt; class when calling &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)&quot; /&gt; and other methods.">
        <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> 및 기타 메서드를 호출할 때 <paramref name="typeConverter" /> 클래스에서 사용할 수 있는 문화권 정보입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.CallBase">
      <summary vsli:raw="Provides a way to invoke a callback as defined on a base class of the current acting type.">현재 활성 형식의 기본 클래스에 정의된 콜백을 호출하는 방법을 제공합니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.CultureInfo">
      <summary vsli:raw="Gets &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; information that can be used by the type converter class when calling &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)&quot; /&gt; and other methods.">
        <see cref="T:System.Globalization.CultureInfo" /> 및 기타 메서드를 호출할 때 형식 변환기 클래스에서 사용할 수 있는 <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> 정보를 가져옵니다.</summary>
      <returns vsli:raw="Culture information that can be used by the type converter class.">형식 변환기 클래스에서 사용할 수 있는 문화권 정보입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.ServiceProvider">
      <summary vsli:raw="Gets &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt; information that can be used by the type converter class.">형식 변환기 클래스에서 사용할 수 있는 <see cref="T:System.IServiceProvider" /> 정보를 가져옵니다.</summary>
      <returns vsli:raw="Service provider information that can be used by the &lt;paramref name=&quot;typeConverter&quot; /&gt; class.">
        <paramref name="typeConverter" /> 클래스에서 사용할 수 있는 서비스 공급자 정보입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.TypeConverter">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; instance that is invoked and provides type conversion behavior.">호출되는 <see cref="T:System.ComponentModel.TypeConverter" /> 인스턴스를 가져오고 형식 변환 동작을 제공합니다.</summary>
      <returns vsli:raw="The type converter that provides type conversion behavior.">형식 변환 동작을 제공하는 형식 변환기입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetValueEventArgs">
      <summary vsli:raw="Provides data for callbacks that are invoked when a &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; sets certain values.">
        <see cref="T:System.Xaml.XamlObjectWriter" />에서 특정 값을 설정할 때 호출되는 콜백에 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetValueEventArgs&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member" vsli:raw="XAML type system / schema information for the member being set.">설정될 멤버에 대한 XAML 형식 시스템/스키마 정보입니다.</param>
      <param name="value" vsli:raw="The value to provide for the member.">멤버에 제공할 값입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase">
      <summary vsli:raw="When overridden in a derived class, provides a way to invoke a &lt;see langword=&quot;SetValue&quot; /&gt; callback as defined on a base class of the current acting type.">파생 클래스에서 재정의하는 경우 현재 활성 형식의 기본 클래스에 정의된 <see langword="SetValue" /> 콜백을 호출하는 방법을 제공합니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Handled">
      <summary vsli:raw="Gets or sets a value that determines whether a caller that is using the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetValueEventArgs&quot; /&gt; can use the values without having to call &lt;see cref=&quot;M:System.Windows.Markup.XamlSetValueEventArgs.CallBase&quot; /&gt;.">
        <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />를 사용하는 호출자가 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />를 호출하지 않고 값을 사용할 수 있는지 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values were useful and calling &lt;see cref=&quot;M:System.Windows.Markup.XamlSetValueEventArgs.CallBase&quot; /&gt; is not necessary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">값을 사용할 수 있어 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />를 호출할 필요가 없으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Member">
      <summary vsli:raw="Gets XAML type system and XAML schema information for the member being set.">설정될 멤버에 대한 XAML 형식 시스템과 XAML 스키마 정보를 가져옵니다.</summary>
      <returns vsli:raw="XAML type system and XAML schema information for the member being set.">설정될 멤버에 대한 XAML 형식 시스템과 XAML 스키마 정보입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Value">
      <summary vsli:raw="Gets the value to provide for the member being set.">설정될 멤버에 제공할 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The value to provide for the member being set.">설정될 멤버에 제공할 값입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XData">
      <summary vsli:raw="Represents literal data that can appear as the value for a &lt;see langword=&quot;Value&quot; /&gt; node.">
        <see langword="Value" /> 노드의 값으로 표시될 수 있는 리터럴 데이터를 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XData.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XData&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.XData" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.XData.Text">
      <summary vsli:raw="Gets or sets the literal value string that this &lt;see cref=&quot;T:System.Windows.Markup.XData&quot; /&gt; wraps.">이 <see cref="T:System.Windows.Markup.XData" />가 래핑하는 리터럴 값 문자열을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The literal value string.">리터럴 값 문자열입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XData.XmlReader">
      <summary vsli:raw="Gets or sets a reader for the literal data.">리터럴 데이터의 판독기를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A reader for the literal data.">리터럴 데이터의 판독기입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlLangPropertyAttribute">
      <summary vsli:raw="Identifies the property to associate with the xml:lang attribute.">xml:lang 특성과 연결할 속성을 식별합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlLangPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XmlLangPropertyAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.XmlLangPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The property name to associate with the &lt;see langword=&quot;xml:lang&quot; /&gt; attribute.">
        <see langword="xml:lang" /> 특성과 연결할 속성 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.XmlLangPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the property that is specified in this attribute.">이 특성에 지정되어 있는 속성의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the property.">속성의 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsCompatibleWithAttribute">
      <summary vsli:raw="Specifies that a XAML namespace can be subsumed by another XAML namespace. Typically, the subsuming XAML namespace is indicated in a previously defined &lt;see cref=&quot;T:System.Windows.Markup.XmlnsDefinitionAttribute&quot; /&gt;.">XAML 네임스페이스가 다른 XAML 네임스페이스에 포함될 수 있음을 지정합니다. 일반적으로 포함하는 XAML 네임스페이스는 미리 정의된 <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" />에 표시됩니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsCompatibleWithAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XmlnsCompatibleWithAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.XmlnsCompatibleWithAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="oldNamespace" vsli:raw="The reference XAML namespace identifier.">참조 XAML 네임스페이스 식별자입니다.</param>
      <param name="newNamespace" vsli:raw="The subsuming XAML namespace identifier.">포함하는 XAML 네임스페이스 식별자입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;oldNamespace&quot; /&gt; or &lt;paramref name=&quot;newNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="oldNamespace" /> 또는 <paramref name="newNamespace" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.NewNamespace">
      <summary vsli:raw="Gets the subsuming namespace identifier reported by this attribute.">이 특성에서 보고한 포함하는 네임스페이스 식별자를 가져옵니다.</summary>
      <returns vsli:raw="The subsuming namespace identifier reported in the attribute.">이 특성에서 보고한 포함하는 네임스페이스 식별자입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.OldNamespace">
      <summary vsli:raw="Gets the reference namespace identifier reported by this attribute.">이 특성에서 보고한 참조 네임스페이스 식별자를 가져옵니다.</summary>
      <returns vsli:raw="The reference namespace identifier.">참조 네임스페이스 식별자입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsDefinitionAttribute">
      <summary vsli:raw="Specifies a mapping on a per-assembly basis between a XAML namespace and a CLR namespace, which is then used for type resolution by a XAML object writer or XAML schema context.">XAML 네임스페이스 및 CLR 네임스페이스 간 어셈블리별 기반에서 매핑을 지정합니다. 지정된 매핑은 XAML 개체 작성기 또는 XAML 스키마 컨텍스트에서 형식 확인에 사용됩니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XmlnsDefinitionAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlNamespace" vsli:raw="The XAML namespace identifier.">XML 네임스페이스 식별자입니다.</param>
      <param name="clrNamespace" vsli:raw="A string that references a CLR namespace name.">CLR 네임스페이스 이름을 참조하는 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlNamespace&quot; /&gt; or &lt;paramref name=&quot;clrNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlNamespace" /> 또는 <paramref name="clrNamespace" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.AssemblyName">
      <summary vsli:raw="Gets or sets the name of the assembly associated with the attribute.">특성과 연관된 어셈블리의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The assembly name.">어셈블리 이름입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace">
      <summary vsli:raw="Gets the string name of the CLR namespace specified in this attribute.">이 특성에 지정된 CLR 네임스페이스의 문자열 이름을 가져옵니다.</summary>
      <returns vsli:raw="The CLR namespace, specified as a string.">문자열로 지정된 CLR 네임스페이스입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace">
      <summary vsli:raw="Gets the XAML namespace identifier specified in this attribute.">이 특성에 지정된 XAML 네임스페이스 식별자를 가져옵니다.</summary>
      <returns vsli:raw="The XAML namespace identifier.">XML 네임스페이스 식별자입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsPrefixAttribute">
      <summary vsli:raw="Identifies a recommended prefix to associate with a XAML namespace for XAML usage, when writing elements and attributes in a XAML file (serialization) or when interacting with a design environment that has XAML editing features.">XAML 파일에 요소와 특성을 쓸 때(serialization) 또는 XMAL 편집 기능을 가진 디자인 환경과 상호 작용할 때 XAML 사용의 XAML 네임스페이스와 연결할 권장 접두사를 식별합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XmlnsPrefixAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.XmlnsPrefixAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlNamespace" vsli:raw="The XAML namespace identifier.">XML 네임스페이스 식별자입니다.</param>
      <param name="prefix" vsli:raw="The recommended prefix string.">권장 접두사 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlNamespace&quot; /&gt; or &lt;paramref name=&quot;prefix&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlNamespace" /> 또는 <paramref name="prefix" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.Prefix">
      <summary vsli:raw="Gets the recommended prefix associated with this attribute.">이 특성에 연결된 권장 접두사를 가져옵니다.</summary>
      <returns vsli:raw="The recommended prefix string.">권장 접두사 문자열입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace">
      <summary vsli:raw="Gets the XAML namespace identifier associated with this attribute.">이 특성에 연결된 XAML 네임스페이스 식별자를 가져옵니다.</summary>
      <returns vsli:raw="The XAML namespace identifier.">XML 네임스페이스 식별자입니다.</returns>
    </member>
    <member name="T:System.Xaml.AmbientPropertyValue">
      <summary vsli:raw="Reports information about an ambient property, as part of an &lt;see cref=&quot;T:System.Xaml.IAmbientProvider&quot; /&gt; implementation.">앰비언트 속성에 대한 정보를 <see cref="T:System.Xaml.IAmbientProvider" /> 구현의 일부분으로 보고합니다.</summary>
    </member>
    <member name="M:System.Xaml.AmbientPropertyValue.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.AmbientPropertyValue&quot; /&gt; class.">
        <see cref="T:System.Xaml.AmbientPropertyValue" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="property" vsli:raw="The identifier that represents the ambient property.">앰비언트 속성을 나타내는 식별자입니다.</param>
      <param name="value" vsli:raw="The value to report.">보고할 값입니다.</param>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.RetrievedProperty">
      <summary vsli:raw="Gets the XAML type system identifier (&lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;) that represents the ambient property.">앰비언트 속성을 나타내는 XAML 형식 시스템 식별자(<see cref="T:System.Xaml.XamlMember" />)입니다.</summary>
      <returns vsli:raw="The identifier that represents the ambient property.">앰비언트 속성을 나타내는 식별자입니다.</returns>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.Value">
      <summary vsli:raw="Gets the value of the ambient property.">앰비언트 속성의 값을 가져옵니다.</summary>
      <returns vsli:raw="The value of the ambient property.">앰비언트 속성의 값입니다.</returns>
    </member>
    <member name="T:System.Xaml.AttachableMemberIdentifier">
      <summary vsli:raw="Provides a XAML type system identifier representation for attachable members. The identifier structure parallels the &lt;paramref name=&quot;declaringType&quot; /&gt;&lt;see langword=&quot;.&quot; /&gt;&lt;paramref name=&quot;memberName&quot; /&gt; string form for attachable member usage.">연결 가능한 멤버에 대한 XAML 형식 시스템 식별자 표현을 제공합니다. 식별자 구조체는 연결 가능한 멤버에 사용하는 경우의 <paramref name="declaringType" /><see langword="." /><paramref name="memberName" /> 문자열 형식과 유사하게 사용합니다.</summary>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; class.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="declaringType" vsli:raw="The &lt;paramref name=&quot;declaringType&quot; /&gt; component of the identifier, which should match the name of the declaring &lt;see cref=&quot;P:System.Xaml.XamlMember.Type&quot; /&gt;.">선언하는 <see cref="P:System.Xaml.XamlMember.Type" /> 이름과 일치해야 하는 식별자의 <paramref name="declaringType" /> 구성 요소입니다.</param>
      <param name="memberName" vsli:raw="The &lt;paramref name=&quot;memberName&quot; /&gt; component of the identifier, which should match the &lt;see cref=&quot;P:System.Xaml.XamlMember.Name&quot; /&gt;.">
        <see cref="P:System.Xaml.XamlMember.Name" />과 일치해야 하는 식별자의 <paramref name="memberName" /> 구성 요소입니다.</param>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.DeclaringType">
      <summary vsli:raw="Gets or sets the &lt;paramref name=&quot;declaringType&quot; /&gt; component value of the &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" />의 <paramref name="declaringType" /> 구성 요소 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The &lt;paramref name=&quot;declaringType&quot; /&gt; component value of the &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" />의 <paramref name="declaringType" /> 구성 요소 값입니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; and a specified object have the same value.">이 <see cref="T:System.Xaml.AttachableMemberIdentifier" />의 인스턴스와 지정된 개체의 값이 같은지 여부를 확인합니다.</summary>
      <param name="obj" vsli:raw="The object to compare with the current &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">현재 <see cref="T:System.Xaml.AttachableMemberIdentifier" />와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; and if its value is the same as this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" />가 <see cref="T:System.Xaml.AttachableMemberIdentifier" />이고 해당 값이 이 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Xaml.AttachableMemberIdentifier)">
      <summary vsli:raw="Determines whether this instance and another specified &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; object have the same value.">이 인스턴스와 지정한 다른 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 개체의 값이 같은지를 확인합니다.</summary>
      <param name="other" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">현재 <see cref="T:System.Xaml.AttachableMemberIdentifier" />과 비교할 <see cref="T:System.Xaml.AttachableMemberIdentifier" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the objects have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">개체의 값이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">이 <see cref="T:System.Xaml.AttachableMemberIdentifier" />의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="An integer hash code.">정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.MemberName">
      <summary vsli:raw="Gets or sets the &lt;paramref name=&quot;memberName&quot; /&gt; component value of the &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" />의 <paramref name="memberName" /> 구성 요소 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The &lt;paramref name=&quot;memberName&quot; /&gt; component value of the &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" />의 <paramref name="memberName" /> 구성 요소 값입니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Equality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; objects have the same value.">지정된 두 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 개체의 값이 같은지를 확인합니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 또는 <see langword="null" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 또는 <see langword="null" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;left&quot; /&gt; is the same as the value of &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />의 값이 <paramref name="left" />의 값과 같으면 <paramref name="right" />를 반환하고, 그러지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Inequality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; objects have different values.">지정된 두 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 개체의 값이 서로 다른지 확인합니다.</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 또는 <see langword="null" />입니다.</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 또는 <see langword="null" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;left&quot; /&gt; differs from the value of &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="left" />의 값이 <paramref name="right" />의 값과 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">현재 <see cref="T:System.String" />을 나타내는 <see cref="T:System.Xaml.AttachableMemberIdentifier" />을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">현재 <see cref="T:System.String" />를 나타내는 <see cref="T:System.Xaml.AttachableMemberIdentifier" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.AttachablePropertyServices">
      <summary vsli:raw="Provides static helper methods that obtain values and accessor method information from an attachable property and that work with an attached property store.">연결 가능한 속성에서 값 및 접근자 메서드 정보를 가져오고 연결된 속성 저장소와 함께 사용할 수 있는 정적 도우미 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.CopyPropertiesTo(System.Object,System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary vsli:raw="Copies all attachable property/value pairs from a specified attachable property store and into a destination array.">지정된 연결 가능한 속성 저장소에 있는 모든 연결 가능한 속성-값 쌍을 대상 배열로 복사합니다.</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to access a static default attachable property store.">
        <see cref="T:System.Xaml.IAttachedPropertyStore" />를 구현하는 연결 가능한 특정 속성 저장소이거나, 연결 가능한 정적 기본 속성 저장소에 액세스하는 null이 아닌 개체입니다.</param>
      <param name="array" vsli:raw="The destination array. The array is a generic array, should be passed undimensioned, and should have components of &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; and &lt;see langword=&quot;object&quot; /&gt;.">대상 배열입니다. 배열은 제네릭 배열이고, 차원 없이 전달되어야 하며, <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 및 <see langword="object" />의 구성 요소가 있어야 합니다.</param>
      <param name="index" vsli:raw="The source index into which to copy.">복사를 시작할 소스 인덱스입니다.</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.GetAttachedPropertyCount(System.Object)">
      <summary vsli:raw="Returns the count of the attachable property entries that are in the specified store.">지정된 저장소에 있는 연결 가능한 속성 항목의 개수를 반환합니다.</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to access a static default attachable property store.">
        <see cref="T:System.Xaml.IAttachedPropertyStore" />를 구현하는 연결 가능한 특정 속성 저장소이거나, 연결 가능한 정적 기본 속성 저장소에 액세스하는 null이 아닌 개체입니다.</param>
      <returns vsli:raw="The integer count of entries in the store.">저장소에 있는 항목의 정수 개수입니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.RemoveProperty(System.Object,System.Xaml.AttachableMemberIdentifier)">
      <summary vsli:raw="Removes the entry for the specified attachable property from the specified store.">지정된 저장소에서 지정된 연결 가능한 속성에 대한 항목을 제거합니다.</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to access a static default attachable property store.">
        <see cref="T:System.Xaml.IAttachedPropertyStore" />를 구현하는 연결 가능한 특정 속성 저장소이거나, 연결 가능한 정적 기본 속성 저장소에 액세스하는 null이 아닌 개체입니다.</param>
      <param name="name" vsli:raw="The identifier for the attachable property entry to remove from the store.">저장소에서 제거할 연결 가능한 속성 항목의 식별자입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attachable property entry for &lt;paramref name=&quot;name&quot; /&gt; was found in the store and removed from it; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="name" />에 대해 연결 가능한 속성 항목을 저장소에서 발견하고 제거하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.SetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary vsli:raw="Sets a value for the specified attachable property in the specified store.">지정한 저장소에서 지정된 연결 가능한 속성의 값을 설정합니다.</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to use a static default attachable property store.">
        <see cref="T:System.Xaml.IAttachedPropertyStore" />를 구현하는 연결 가능한 특정 속성 저장소이거나, 연결 가능한 정적 기본 속성 저장소를 사용할 null이 아닌 개체입니다.</param>
      <param name="name" vsli:raw="The identifier of the attachable property entry for which to set a value.">값을 설정할 연결 가능한 속성 항목의 식별자입니다.</param>
      <param name="value" vsli:raw="The value to set.">설정할 값입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="A value could not be set in the store.">저장소에서 값을 설정할 수 없습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary vsli:raw="Attempts to get a value for the specified attachable property in the specified store. Does not throw an exception if the specific attachable property does not exist in the store.">지정된 저장소에서 지정된 연결 가능한 속성의 값을 가져오려고 시도합니다. 특정 연결 가능한 속성이 저장소에 없는 경우 예외를 throw하지 않습니다.</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to use a static default attachable property store.">
        <see cref="T:System.Xaml.IAttachedPropertyStore" />를 구현하는 연결 가능한 특정 속성 저장소이거나, 연결 가능한 정적 기본 속성 저장소를 사용할 null이 아닌 개체입니다.</param>
      <param name="name" vsli:raw="The identifier of the attachable property entry for which to get a value.">값을 가져올 연결 가능한 속성 항목의 식별자입니다.</param>
      <param name="value" vsli:raw="Out parameter. When this method returns, contains the destination object for the value if &lt;paramref name=&quot;name&quot; /&gt; exists in the store and has a value.">Out 매개 변수입니다. 이 메서드가 반환할 때 이 매개 변수는 <paramref name="name" />이 저장소에 있고 값을 가지고 있을 경우 값에 대한 대상 개체를 포함합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attachable property entry for &lt;paramref name=&quot;name&quot; /&gt; was found in the store and a value was posted to &lt;paramref name=&quot;value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="name" />에 대해 연결 가능한 속성 항목이 저장소에 있고 값이 <paramref name="value" />에 게시되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty``1(System.Object,System.Xaml.AttachableMemberIdentifier,``0@)">
      <summary vsli:raw="Attempts to get a value for the specified attachable property in the specified store, returning a generic output form. Does not throw an exception if the specific attachable property does not exist in the store.">제네릭 출력 형식을 반환하면서 지정된 저장소에서 지정된 연결 가능한 속성의 값을 가져오려고 시도합니다. 특정 연결 가능한 속성이 저장소에 없는 경우 예외를 throw하지 않습니다.</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to access a static default attachable property store.">
        <see cref="T:System.Xaml.IAttachedPropertyStore" />를 구현하는 연결 가능한 특정 속성 저장소이거나, 연결 가능한 정적 기본 속성 저장소에 액세스하는 null이 아닌 개체입니다.</param>
      <param name="name" vsli:raw="The identifier of the attachable property entry for which to get a value.">값을 가져올 연결 가능한 속성 항목의 식별자입니다.</param>
      <param name="value" vsli:raw="Out parameter. When this method returns, contains the destination object for the value if &lt;paramref name=&quot;name&quot; /&gt; exists in the store and has a value.">Out 매개 변수입니다. 이 메서드가 반환할 때 이 매개 변수는 <paramref name="name" />이 저장소에 있고 값을 가지고 있을 경우 값에 대한 대상 개체를 포함합니다.</param>
      <typeparam name="T" vsli:raw="The expected type of the output.">출력의 예상 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attachable property entry for &lt;paramref name=&quot;name&quot; /&gt; was found in the store and a value was posted to &lt;paramref name=&quot;value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="name" />에 대해 연결 가능한 속성 항목이 저장소에 있고 값이 <paramref name="value" />에 게시되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.IAmbientProvider">
      <summary vsli:raw="Represents a service that can return information items about ambient properties or ambient types to type converters and markup extensions.">앰비언트 속성 또는 앰비언트 형식에 대한 정보 항목을 형식 변환기 및 태그 확장에 반환할 수 있는 서비스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Boolean,System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary vsli:raw="Returns an enumerable set of ambient property information items for the requested set of types and properties.">요청된 형식 및 속성 집합에 대해 앰비언트 속성 정보 항목의 열거 가능한 집합을 반환합니다.</summary>
      <param name="ceilingTypes" vsli:raw="Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph. This type holds the desired ambient property. May be &lt;see langword=&quot;null&quot; /&gt;.">개체 그래프에서 상향 트래버스를 수행할 때 발견될 경우 평가를 중지해야 하는 형식을 하나 이상 지정합니다. 이 형식에는 원하는 앰비언트 속성이 포함됩니다. <see langword="null" />일 수 있습니다.</param>
      <param name="searchLiveStackOnly" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not use a saved context; &lt;see langword=&quot;false&quot; /&gt; to use a saved context. The default is &lt;see langword=&quot;false&quot; /&gt;.">저장된 컨텍스트를 사용하지 않으려면 <see langword="true" />, 저장된 컨텍스트를 사용하려면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</param>
      <param name="types" vsli:raw="Specifies one or more type identifier objects that identify the types to be considered ambient.">앰비언트로 간주할 형식을 식별하는 형식 식별자 개체를 하나 이상 지정합니다.</param>
      <param name="properties" vsli:raw="Specifies one or more property identifier objects that identify the properties to be considered ambient.">앰비언트로 간주할 속성을 식별하는 속성 식별자 개체를 하나 이상 지정합니다.</param>
      <returns vsli:raw="An enumerable set of ambient property information items for the requested set of types and properties. The property information for each &lt;see cref=&quot;T:System.Xaml.AmbientPropertyValue&quot; /&gt; that is returned will match one of the input &lt;paramref name=&quot;types&quot; /&gt; or &lt;paramref name=&quot;properties&quot; /&gt;.">요청된 형식 및 속성 집합에 대해 앰비언트 속성 정보 항목의 열거 가능한 집합을 반환합니다. 반환되는 각 <see cref="T:System.Xaml.AmbientPropertyValue" />의 속성 정보는 입력 <paramref name="types" /> 또는 <paramref name="properties" /> 중 하나와 일치하게 됩니다.</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary vsli:raw="Returns an enumerable set of ambient property information items for the requested set of properties.">요청된 속성 집합에 대해 앰비언트 속성 정보 항목의 열거 가능한 집합을 반환합니다.</summary>
      <param name="ceilingTypes" vsli:raw="Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph. This type holds the desired ambient property. May be &lt;see langword=&quot;null&quot; /&gt;.">개체 그래프에서 상향 트래버스를 수행할 때 발견될 경우 평가를 중지해야 하는 형식을 하나 이상 지정합니다. 이 형식에는 원하는 앰비언트 속성이 포함됩니다. <see langword="null" />일 수 있습니다.</param>
      <param name="properties" vsli:raw="Specifies one or more property identifier objects that identify the properties to be considered ambient.">앰비언트로 간주할 속성을 식별하는 속성 식별자 개체를 하나 이상 지정합니다.</param>
      <returns vsli:raw="An enumerable set of ambient property information items for the requested set of properties. The property information for each &lt;see cref=&quot;T:System.Xaml.AmbientPropertyValue&quot; /&gt; that is returned will match one of the input &lt;paramref name=&quot;properties&quot; /&gt;.">요청된 속성 집합에 대한 앰비언트 속성 정보 항목의 열거 가능한 집합입니다. 반환되는 각 <see cref="T:System.Xaml.AmbientPropertyValue" />의 속성 정보는 입력 <paramref name="properties" /> 중 하나와 일치하게 됩니다.</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Xaml.XamlType[])">
      <summary vsli:raw="Returns an enumerable set of object instances of possible ambient types for the requested types.">요청된 형식에 대해 가능한 앰비언트 형식의 열거 가능한 개체 인스턴스 집합을 반환합니다.</summary>
      <param name="types" vsli:raw="The set of types from which to retrieve ambient type information.">앰비언트 형식 정보를 검색할 형식 집합입니다.</param>
      <returns vsli:raw="An enumerable set of objects that represent the values for the requested set of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; identifiers.">요청된 <see cref="T:System.Xaml.XamlType" /> 식별자 집합에 대한 값을 나타내는 개체의 열거 가능한 집합입니다.</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary vsli:raw="Returns a single ambient property information item from the requested set of properties, based on which property is first encountered.">어떠한 속성이 먼저 발견되는지를 기준으로 요청된 속성 집합에서 단일 앰비언트 속성 정보 항목을 반환합니다.</summary>
      <param name="ceilingTypes" vsli:raw="Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph. This type holds the desired ambient property.">개체 그래프에서 상향 트래버스를 수행할 때 발견될 경우 평가를 중지해야 하는 형식을 하나 이상 지정합니다. 이 형식에는 원하는 앰비언트 속성이 포함됩니다.</param>
      <param name="properties" vsli:raw="Specifies one or more objects that identify the properties to be considered ambient.">앰비언트로 간주되어야 하는 속성을 식별하는 개체를 하나 이상 지정합니다.</param>
      <returns vsli:raw="A single ambient property information item for the first ambient property value from the &lt;paramref name=&quot;properties&quot; /&gt; list that is found.">발견된 <paramref name="properties" /> 목록에서 첫 번째 앰비언트 속성 값에 대한 단일 앰비언트 속성 정보 항목입니다.</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Xaml.XamlType[])">
      <summary vsli:raw="Returns the first matching object that is a possible ambient type for the requested types.">요청된 형식에 대해 가능한 앰비언트 형식인 첫 번째 일치 개체를 반환합니다.</summary>
      <param name="types" vsli:raw="The set of types from which to retrieve ambient type information.">앰비언트 형식 정보를 검색할 형식 집합입니다.</param>
      <returns vsli:raw="The first result object for the requested set.">요청된 집합에 대한 첫 번째 결과 개체입니다.</returns>
    </member>
    <member name="T:System.Xaml.IAttachedPropertyStore">
      <summary vsli:raw="Represents an attachable member store for an object where attachable members are set. This attachable member store can then be referenced with &lt;see cref=&quot;T:System.Xaml.AttachablePropertyServices&quot; /&gt;.">연결 가능한 멤버가 설정되어 있는 개체의 연결 가능한 멤버 저장소를 나타냅니다. 이 연결 가능한 멤버 저장소는 나중에 <see cref="T:System.Xaml.AttachablePropertyServices" />로 참조할 수 있습니다.</summary>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.CopyPropertiesTo(System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary vsli:raw="Copies all attachable member/value pairs from this attachable member store into a destination array.">이 연결 가능한 멤버 저장소에 있는 모든 연결 가능한 멤버/값 쌍을 대상 배열로 복사합니다.</summary>
      <param name="array" vsli:raw="The destination array. The array is a generic array, should be passed undimensioned, and should have components of &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; and &lt;see langword=&quot;object&quot; /&gt;.">대상 배열입니다. 배열은 제네릭 배열이고, 차원 없이 전달되어야 하며, <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 및 <see langword="object" />의 구성 요소가 있어야 합니다.</param>
      <param name="index" vsli:raw="The source index where copying should begin.">복사를 시작할 소스 인덱스입니다.</param>
    </member>
    <member name="P:System.Xaml.IAttachedPropertyStore.PropertyCount">
      <summary vsli:raw="Gets the count of the attachable member entries in this attachable member store.">이 연결 가능한 멤버 저장소에 있는 연결 가능한 멤버 항목의 개수를 가져옵니다.</summary>
      <returns vsli:raw="The integer count of entries in the store.">저장소에 있는 항목의 정수 개수입니다.</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.RemoveProperty(System.Xaml.AttachableMemberIdentifier)">
      <summary vsli:raw="Removes the entry for the specified attachable member from this attachable member store.">이 연결 가능한 멤버 저장소에서 지정된 연결 가능한 멤버에 대한 항목을 제거합니다.</summary>
      <param name="attachableMemberIdentifier" vsli:raw="The XAML type system identifier for the attachable member entry to remove.">제거할 연결 가능한 멤버 항목의 XAML 형식 시스템 식별자입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attachable member entry for &lt;paramref name=&quot;attachableMemberIdentifier&quot; /&gt; was found in the store and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="attachableMemberIdentifier" />에 대해 연결 가능한 멤버 항목을 저장소에서 발견하고 제거하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.SetProperty(System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary vsli:raw="Sets a value for the specified attachable member in the specified store.">지정된 저장소에서 지정된 연결 가능한 멤버의 값을 설정합니다.</summary>
      <param name="attachableMemberIdentifier" vsli:raw="The XAML type system identifier for the attachable member entry to set.">설정할 연결 가능한 멤버 항목의 XAML 형식 시스템 식별자입니다.</param>
      <param name="value" vsli:raw="The value to set.">설정할 값입니다.</param>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.TryGetProperty(System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary vsli:raw="Attempts to get a value for the specified attachable member in the specified store.">지정된 저장소에서 지정된 연결 가능한 멤버의 값을 가져오려고 시도합니다.</summary>
      <param name="attachableMemberIdentifier" vsli:raw="The XAML type system identifier for the attachable member entry to get.">가져올 연결 가능한 멤버 항목의 XAML 형식 시스템 식별자입니다.</param>
      <param name="value" vsli:raw="Out parameter. When this method returns, contains the destination object for the value if &lt;paramref name=&quot;attachableMemberIdentifier&quot; /&gt; exists in the store and has a value.">Out 매개 변수입니다. 이 메서드가 반환할 때 이 매개 변수는 <paramref name="attachableMemberIdentifier" />이 저장소에 있고 값을 가지고 있을 경우 값에 대한 대상 개체를 포함합니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attachable member entry for &lt;paramref name=&quot;attachableMemberIdentifier&quot; /&gt; was found in the store and a value was posted to &lt;paramref name=&quot;value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="attachableMemberIdentifier" />에 대해 연결 가능한 멤버 항목이 저장소에 있고 값이 <paramref name="value" />에 게시되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.IDestinationTypeProvider">
      <summary vsli:raw="Represents a service that can return a CLR type system identifier for the destination type. The destination type is relevant when the destination type for a property-setting operation is indirectly reported by reflection or other mechanisms.">대상 형식에 대한 CLR 형식 시스템 식별자를 반환할 수 있는 서비스를 나타냅니다. 대상 형식은 리플렉션이나 다른 메커니즘에서 속성 설정 작업의 대상 형식을 간접적으로 보고하는 경우와 관련이 있습니다.</summary>
    </member>
    <member name="M:System.Xaml.IDestinationTypeProvider.GetDestinationType">
      <summary vsli:raw="Returns the CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; that identifies the destination type for the relevant type converter or markup extension.">관련 형식 변환기 또는 태그 확장의 대상 형식을 식별하는 CLR <see cref="T:System.Type" />을 반환합니다.</summary>
      <returns vsli:raw="A CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the destination type.">대상 형식에 대한 CLR <see cref="T:System.Type" /> 값입니다.</returns>
    </member>
    <member name="T:System.Xaml.INamespacePrefixLookup">
      <summary vsli:raw="Represents a service that can return the recommended prefix for a XAML namespace mapping to consumers. Consumers might include design environments or serializers.">소비자에게 XAML 네임스페이스를 매핑할 때 권장되는 접두어를 반환하는 서비스를 나타냅니다. 소비자는 디자인 환경이나 serializer를 포함할 수 있습니다.</summary>
    </member>
    <member name="M:System.Xaml.INamespacePrefixLookup.LookupPrefix(System.String)">
      <summary vsli:raw="Returns the recommended prefix for a specified XAML namespace identifier.">지정된 XAML 네임스페이스 식별자에 권장되는 접두사를 반환합니다.</summary>
      <param name="ns" vsli:raw="The XAML namespace identifier string for which to obtain a prefix.">접두사를 가져올 XAML 네임스페이스 식별자 문자열입니다.</param>
      <returns vsli:raw="The recommended prefix.">권장 접두사입니다.</returns>
    </member>
    <member name="T:System.Xaml.IRootObjectProvider">
      <summary vsli:raw="Describes a service that can return the root object of markup being parsed.">구문 분석 중인 태그의 루트 개체를 반환할 수 있는 서비스에 대해 설명합니다.</summary>
    </member>
    <member name="P:System.Xaml.IRootObjectProvider.RootObject">
      <summary vsli:raw="Gets the root object from markup or from an object graph.">태그 또는 개체 그래프에서 루트 개체를 가져옵니다.</summary>
      <returns vsli:raw="The root object.">루트 개체입니다.</returns>
    </member>
    <member name="T:System.Xaml.IXamlIndexingReader">
      <summary vsli:raw="Provides a service that represents indexed node control for a simple implementation of a node-based XAML reader.">노드 기반 XAML 판독기의 간단한 구현을 위한 인덱싱된 노드 컨트롤을 나타내는 서비스를 제공합니다.</summary>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.Count">
      <summary vsli:raw="Gets the number of nodes in the current external node set.">현재 외부 노드 집합의 노드 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of nodes in the current external node set.">현재 외부 노드 집합의 노드 수입니다.</returns>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.CurrentIndex">
      <summary vsli:raw="Gets or sets the index number of the current reader position for the indexed list view of XAML nodes.">XAML 노드의 인덱싱된 목록 뷰에 대한 현재 판독기 위치의 인덱스 번호를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The index number of the current reader position.">현재 판독기 위치의 인덱스 번호입니다.</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfo">
      <summary vsli:raw="Describes a service for reporting text line information in XAML reader implementations.">XAML 판독기 구현에서 텍스트 줄 정보를 보고하기 위한 서비스에 대해 설명합니다.</summary>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.HasLineInfo">
      <summary vsli:raw="Gets a value that specifies whether line information is available.">줄 정보를 사용할 수 있는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if line information is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">줄 정보를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LineNumber">
      <summary vsli:raw="Gets the line number to report.">보고할 줄 번호를 가져옵니다.</summary>
      <returns vsli:raw="The line number to report.">보고할 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LinePosition">
      <summary vsli:raw="Gets the line position to report.">보고할 줄 위치를 가져옵니다.</summary>
      <returns vsli:raw="The line position to report.">보고할 줄 위치입니다.</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfoConsumer">
      <summary vsli:raw="Describes a service where a XAML writer can use reported line information and then include the information in the output.">보고된 줄 정보를 XAML 작성기에서 사용하고 이를 출력에 포함할 수 있는 서비스에 대해 설명합니다.</summary>
    </member>
    <member name="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)">
      <summary vsli:raw="Collects line information.">줄 정보를 수집합니다.</summary>
      <param name="lineNumber" vsli:raw="The line number to use in the output.">출력에 사용할 줄 번호입니다.</param>
      <param name="linePosition" vsli:raw="The line position to use in the output.">출력에 사용할 줄 위치입니다.</param>
    </member>
    <member name="P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo">
      <summary vsli:raw="Gets a value that determines whether a line information service should provide values and therefore, should also call &lt;see cref=&quot;M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)&quot; /&gt; when relevant.">줄 정보 서비스가 값을 제공해야 하는지 그리고 이에 따라 관련이 있는 경우 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />도 호출해야 하는지 여부를 결정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if line information is used by the implementation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">구현에서 줄 정보를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.IXamlNameProvider">
      <summary vsli:raw="Provides a service that is used during save and write operations to input an object and return a XAML name.">저장 및 쓰기 작업 중에 개체를 입력하고 XAML 이름을 반환하는 데 사용되는 서비스를 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameProvider.GetName(System.Object)">
      <summary vsli:raw="Retrieves the XAML name of the specified object.">지정된 개체의 XAML 이름을 검색합니다.</summary>
      <param name="value" vsli:raw="The object to get the name for.">이름을 가져올 개체입니다.</param>
      <returns vsli:raw="The XAML name value of the requested object.">요청된 개체의 XAML 이름 값입니다.</returns>
    </member>
    <member name="T:System.Xaml.IXamlNameResolver">
      <summary vsli:raw="Describes a service that can return objects that are specified by XAML name, or alternatively, returns a token that defers name resolution. The service can also return an enumerable set of all named objects that are in the XAML namescope.">XAML 이름으로 지정된 개체를 반환하거나 이름 확인을 지연시키는 토큰을 반환하는 서비스를 설명합니다. 이 서비스는 XAML 네임스페이스에 있는 모든 명명된 개체의 열거 가능한 집합을 반환할 수도 있습니다.</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetAllNamesAndValuesInScope">
      <summary vsli:raw="Returns an enumerable set of all named objects in the XAML namescope.">XAML 네임스페이스에 있는 모든 명명된 개체의 열거 가능한 집합을 반환합니다.</summary>
      <returns vsli:raw="An enumerable set of &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; objects. For each &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, the &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Key&quot; /&gt; component is a string, and the &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Value&quot; /&gt; component is the object that uses the &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Key&quot; /&gt; name in the XAML namescope.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 개체의 열거 가능한 집합입니다. 각 <see cref="T:System.Collections.Generic.KeyValuePair`2" />에 대해 <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 구성 요소는 문자열이고, <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> 구성 요소는 XAML 네임스페이스에서 <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 이름을 사용하는 개체입니다.</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String})">
      <summary vsli:raw="Returns an object that can correct for certain markup patterns that produce forward references.">전방 참조를 생성하는 특정 태그 패턴에 맞을 수 있는 개체를 반환합니다.</summary>
      <param name="names" vsli:raw="A collection of names that are possible forward references.">전방 참조가 가능한 이름의 컬렉션입니다.</param>
      <returns vsli:raw="An object that provides a token for lookup behavior to be evaluated later.">이후에 확인할 조회 동작에 대한 토큰을 제공하는 개체입니다.</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary vsli:raw="Returns an object that can correct for certain markup patterns that produce forward references.">전방 참조를 생성하는 특정 태그 패턴에 맞을 수 있는 개체를 반환합니다.</summary>
      <param name="names" vsli:raw="A collection of names that are possible forward references.">전방 참조가 가능한 이름의 컬렉션입니다.</param>
      <param name="canAssignDirectly" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to immediately assign the resolved name reference to the target property. &lt;see langword=&quot;false&quot; /&gt; to call the user code for a reparse. The default behavior is &lt;see langword=&quot;false&quot; /&gt;.">확인된 이름 참조를 대상 속성에 즉시 할당하려면 <see langword="true" />이고, 구문을 다시 분석하기 위해 사용자 코드를 호출하려면 <see langword="false" />입니다. 기본 동작은 <see langword="false" />입니다.</param>
      <returns vsli:raw="An object that provides a token for lookup behavior to be evaluated later.">이후에 확인할 조회 동작에 대한 토큰을 제공하는 개체입니다.</returns>
    </member>
    <member name="P:System.Xaml.IXamlNameResolver.IsFixupTokenAvailable">
      <summary vsli:raw="Gets a value that determines whether calling &lt;see cref=&quot;M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)&quot; /&gt; is available in order to resolve a name into a token for forward resolution.">전방 확인을 위해 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />을 호출하여 토큰 내에서 이름을 확인하는 것이 가능한지 여부를 결정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)&quot; /&gt; is available as an implementation that returns a useful token for forward resolution; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">전방 확인을 위해 유용한 토큰을 반환하는 구현으로서 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="E:System.Xaml.IXamlNameResolver.OnNameScopeInitializationComplete">
      <summary vsli:raw="Occurs when a XAML processor has registered all the relevant names to the backing XAML namescope.">XAML 프로세서가 지원 XAML 네임스페이스에 모든 관련 이름을 등록했을 때 발생합니다.</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String)">
      <summary vsli:raw="Resolves an object from a name reference.">이름 참조에서 개체를 확인합니다.</summary>
      <param name="name" vsli:raw="The name reference to resolve.">확인할 이름 참조입니다.</param>
      <returns vsli:raw="The resolved object; or null.">확인된 개체이거나 null입니다.</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String,System.Boolean@)">
      <summary vsli:raw="Resolves an object from a name reference, and provides a tracking value that reports whether the object is fully initialized for object graph purposes.">이름 참조에서 개체를 확인하고, 개체가 개체 그래프 목적을 위해 완전히 초기화되었는지 여부를 보고하는 추적 값을 제공합니다.</summary>
      <param name="name" vsli:raw="The name reference to resolve.">확인할 이름 참조입니다.</param>
      <param name="isFullyInitialized" vsli:raw="When this method returns, &lt;see langword=&quot;true&quot; /&gt; if the returned object has any dependencies on unresolved references; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 메서드가 반환할 때 반환된 개체가 확인되지 않은 참조에 대한 종속성을 가지면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns vsli:raw="An object that provides a token for lookup behavior to be evaluated later.">이후에 확인할 조회 동작에 대한 토큰을 제공하는 개체입니다.</returns>
    </member>
    <member name="T:System.Xaml.IXamlNamespaceResolver">
      <summary vsli:raw="Describes a service that can return a XAML namespace that is based on its prefix as it is mapped in XAML markup.">XAML 태그에 매핑된 접두사를 기반으로 XAML 네임스페이스를 반환할 수 있는 서비스에 대해 설명합니다.</summary>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespace(System.String)">
      <summary vsli:raw="Retrieves a XAML namespace identifier for the specified prefix string.">지정된 접두사 문자열의 XAML 네임스페이스 식별자를 검색합니다.</summary>
      <param name="prefix" vsli:raw="The prefix for which to retrieve the XAML namespace information.">XAML 네임스페이스 정보를 검색할 접두사입니다.</param>
      <returns vsli:raw="The requested XAML namespace identifier, as a string.">요청한 XAML 네임스페이스 식별자이며 문자열입니다.</returns>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespacePrefixes">
      <summary vsli:raw="Returns all the possible prefix-to-XAML namespace mappings (&lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt; values) that are available in the active XAML schema context.">활성 XAML 스키마 컨텍스트에서 사용할 수 있는 접두사와 XAML 네임스페이스 간의 가능한 모든 매핑(<see cref="T:System.Xaml.NamespaceDeclaration" /> 값)을 반환합니다.</summary>
      <returns vsli:raw="An enumerable set of &lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt; values. To get all the prefix strings, get the &lt;see cref=&quot;P:System.Xaml.NamespaceDeclaration.Prefix&quot; /&gt; value from each value in the returned set. To get prefixes for specific XAML namespaces, process any return value that has the desired &lt;see cref=&quot;P:System.Xaml.NamespaceDeclaration.Namespace&quot; /&gt; value.">열거 가능한 <see cref="T:System.Xaml.NamespaceDeclaration" /> 값의 집합입니다. 접두사 문자열을 모두 가져오려면 반환되는 집합의 각 값에서 <see cref="P:System.Xaml.NamespaceDeclaration.Prefix" /> 값을 가져옵니다. 특정 XAML 네임스페이스에 대한 접두사를 가져오려면 원하는 <see cref="P:System.Xaml.NamespaceDeclaration.Namespace" /> 값을 가진 모든 반환 값을 처리합니다.</returns>
    </member>
    <member name="T:System.Xaml.IXamlObjectWriterFactory">
      <summary vsli:raw="Represents a service that generates a &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; that is based on the current internal parser context.">현재 내부 파서 컨텍스트를 기반으로 하는 <see cref="T:System.Xaml.XamlObjectWriter" />를 생성하는 서비스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetParentSettings">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; from the original internal parser context.">원래 내부 파서 컨텍스트에서 <see cref="T:System.Xaml.XamlObjectWriterSettings" />를 반환합니다.</summary>
      <returns vsli:raw="The settings from the original internal parser context.">원래 내부 파서 컨텍스트에 있는 설정입니다.</returns>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetXamlObjectWriter(System.Xaml.XamlObjectWriterSettings)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; that is based on active XAML schema context.">활성 XAML 스키마 컨텍스트를 기반으로 하는 <see cref="T:System.Xaml.XamlObjectWriter" />를 반환합니다.</summary>
      <param name="settings" vsli:raw="The settings to use for construction and initialization of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlObjectWriter" />의 생성 및 초기화에 사용할 설정입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; that has the specified settings.">지정된 설정을 가진 <see cref="T:System.Xaml.XamlObjectWriter" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.IXamlSchemaContextProvider">
      <summary vsli:raw="Represents a service that provides XAML schema context information to type converters and markup extensions.">형식 변환기와 태그 확장에 XAML 스키마 컨텍스트를 제공하는 서비스를 나타냅니다.</summary>
    </member>
    <member name="P:System.Xaml.IXamlSchemaContextProvider.SchemaContext">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; that is reported by the service context.">서비스 컨텍스트에서 보고하는 <see cref="T:System.Xaml.XamlSchemaContext" />를 가져옵니다.</summary>
      <returns vsli:raw="The XAML schema context that is reported by the service context.">서비스 컨텍스트에서 보고하는 XAML 스키마 컨텍스트입니다.</returns>
    </member>
    <member name="T:System.Xaml.NamespaceDeclaration">
      <summary vsli:raw="Declares the identifier and the prefix of a XAML namespace by storing these string values as separate properties.">이 문자열 값을 별도의 속성으로 저장하여 XAML 네임스페이스에 대한 식별자 및 접두사를 선언합니다.</summary>
    </member>
    <member name="M:System.Xaml.NamespaceDeclaration.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt; class using initial property values.">초기 속성 값을 사용하여 <see cref="T:System.Xaml.NamespaceDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="ns" vsli:raw="The XAML namespace identifier, as a string.">문자열로 지정된 XAML 네임스페이스 식별자입니다.</param>
      <param name="prefix" vsli:raw="The string prefix that is used for the namespace in prefix mappings.">접두사 매핑에서 네임스페이스에 사용되는 문자열 접두사입니다.</param>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Namespace">
      <summary vsli:raw="Gets the identifier component of a &lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt;.">
        <see cref="T:System.Xaml.NamespaceDeclaration" />의 식별자 구성 요소를 가져옵니다.</summary>
      <returns vsli:raw="The identifier of the XAML namespace declaration.">XML 네임스페이스 선언의 식별자입니다.</returns>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Prefix">
      <summary vsli:raw="Gets the prefix that is used as the XAML namespace mapping prefix for a &lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt;.">
        <see cref="T:System.Xaml.NamespaceDeclaration" />의 XAML 네임스페이스 매핑 접두사로 사용되는 접두사를 가져옵니다.</summary>
      <returns vsli:raw="The prefix string for this &lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt;.">이 <see cref="T:System.Xaml.NamespaceDeclaration" />의 접두사 문자열입니다.</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlAccessLevel">
      <summary>XAML 로드를 위해 어셈블리 및 형식에 대한 액세스 제어를 정의합니다.</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.Assembly)">
      <summary>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />에서 요청한 어셈블리를 기반으로 <see cref="T:System.Reflection.Assembly" /> 인스턴스를 반환합니다.</summary>
      <param name="assembly">요청에 대한 어셈블리입니다.</param>
      <returns>
        <paramref name="assembly" /> 값을 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />의 소스 정보로 사용하는 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.AssemblyName)">
      <summary>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />에서 요청한 어셈블리를 기반으로 <see cref="T:System.Reflection.AssemblyName" /> 인스턴스를 반환합니다.</summary>
      <param name="assemblyName">요청에 대한 어셈블리 이름입니다.</param>
      <returns>
        <paramref name="assemblyName" /> 값을 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />의 소스 정보로 사용하는 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" />은 올바른 정규화된 어셈블리 이름이 아닙니다.</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName">
      <summary>이 <see cref="T:System.Reflection.AssemblyName" />에 따라 사용 권한이 결정되는 어셈블리의 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Reflection.AssemblyName" />에 따라 사용 권한이 결정되는 어셈블리의 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.String)">
      <summary>정규화된 이름으로 지정된 특정 형식을 기반으로 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 인스턴스를 반환합니다.</summary>
      <param name="assemblyQualifiedTypeName">어셈블리로 한정된 형식 이름으로 구문 분석되는 문자열입니다.</param>
      <returns>
        <paramref name="assemblyQualifiedTypeName" /> 값을 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />에 대한 소스 정보로 사용하고 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" />이 형식에 대한 리플렉션에 따라 결정되는 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyQualifiedTypeName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyQualifiedTypeName" />은 올바른 정규화된 어셈블리 형식 이름이 아닙니다.  
또는 
<paramref name="assemblyQualifiedTypeName" /> 내의 어셈블리 이름은 유효한 어셈블리 이름이 아닙니다.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.Type)">
      <summary>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />에서 지정한 특정 형식을 기반으로 <see cref="T:System.Type" /> 인스턴스를 반환합니다.</summary>
      <param name="type">액세스를 요청할 <see cref="T:System.Type" />입니다.</param>
      <returns>
        <paramref name="type" /> 값을 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />에 대한 소스 정보로 사용하고 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" />이 형식에 대한 리플렉션에 따라 결정되는 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName">
      <summary>이 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />에 따라 사용 권한이 결정되는 형식의 정규화되지 않은 문자열 이름을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />에 따라 사용 권한이 결정되는 형식의 정규화되지 않은 문자열 이름입니다.</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlLoadPermission">
      <summary>XAML 판독기 또는 작성기에서 사용하는 어셈블리에서 형식을 로드하기 위한 사용 권한을 선언합니다.</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Collections.Generic.IEnumerable{System.Xaml.Permissions.XamlAccessLevel})">
      <summary>열거 가능한 특정 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 값 집합을 사용하여 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="allowedAccess">열거 가능한 특정 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 값의 집합입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="allowedAccess" />에 null 항목과 같은 잘못된 정보가 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>기존 사용 권한을 사용하여 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 열거형 값입니다.</param>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>단일 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 값을 사용하여 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="allowedAccess">정의하는 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess">
      <summary>이 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />이 나타내는 모든 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 값의 목록을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 값의 읽기 전용 목록이나 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Copy">
      <summary>현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />의 동일한 복사본을 만들어 반환합니다.</summary>
      <returns>현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />의 복사본입니다.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Equals(System.Object)">
      <param name="obj" />
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.FromXml(System.Security.SecurityElement)">
      <summary>XML 인코딩의 지정된 상태를 사용하여 보안 개체를 다시 만듭니다.</summary>
      <param name="elem">보안 개체를 다시 만드는 데 사용할 XML 인코딩입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elem" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elem" />에 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />에 대한 XML 인코딩이 포함되어 있지 않습니다.  
또는 
<paramref name="elem" /> 내의 버전 특성은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.GetHashCode" />
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Includes(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>이 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />의 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 목록에 지정된 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />이 포함되는지 여부를 반환합니다.</summary>
      <param name="requestedAccess">확인할 특정 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />입니다.</param>
      <returns>
        <paramref name="requestedAccess" />가 현재 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />의 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 목록에 있으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestedAccess" />가 null입니다.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Intersect(System.Security.IPermission)">
      <summary>현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />과 지정된 사용 권한의 교집합에 해당하는 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />을 만들어 반환합니다.</summary>
      <param name="target">현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />과 공통되는 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />입니다. <see langword="null" />일 수 있습니다.</param>
      <returns>현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />과 지정된 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />의 교집합을 나타내는 새 사용 권한입니다. 교집합이 비어 있으면 새 사용 권한은 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" />가 <see langword="null" />이 아니거나 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />이 아닙니다.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />이 지정된 사용 권한의 하위 집합인지 여부를 확인합니다.</summary>
      <param name="target">하위 집합 관계를 테스트할 사용 권한입니다. <see langword="null" />일 수 있습니다.</param>
      <returns>현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />이 지정된 권한의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" />가 <see langword="null" />이 아니거나 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />이 아닙니다.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsUnrestricted">
      <summary>이 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />이 무제한의 사용 권한을 나타내는지 여부를 확인합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />이 무제한의 사용 권한을 나타내면 <see langword="true" />입니다. 이 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />이 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />에서 특정 액세스 수준 제한이 있거나 권한이 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.ToXml">
      <summary>이 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 및 해당 사용 권한의 현재 상태에 대한 XML 인코딩을 만듭니다.</summary>
      <returns>상태 정보를 포함한 이 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />의 XML 인코딩입니다.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Union(System.Security.IPermission)">
      <summary>현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />과 지정된 사용 권한의 합집합에 해당하는 사용 권한을 만듭니다.</summary>
      <param name="other">현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />과 결합할 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />입니다. <see langword="null" />일 수 있습니다.</param>
      <returns>현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />과 지정된 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />의 합집합 부분을 나타내는 새 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" />가 <see langword="null" />이 아니거나 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />이 아닙니다.</exception>
    </member>
    <member name="T:System.Xaml.Schema.AllowedMemberLocations">
      <summary vsli:raw="Specifies the syntax restrictions enforced on a property when it is set in XAML, as reported by a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">XAML에서 설정하는 속성에 대해 적용되는, <see cref="T:System.Xaml.XamlDirective" />에서 보고한 구문 제한을 지정합니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Any">
      <summary vsli:raw="Property can be set in either &lt;see cref=&quot;F:System.Xaml.Schema.AllowedMemberLocations.Attribute&quot; /&gt; or &lt;see cref=&quot;F:System.Xaml.Schema.AllowedMemberLocations.MemberElement&quot; /&gt; location. (This enumeration member is defined as the combination of those values.)">
        <see cref="F:System.Xaml.Schema.AllowedMemberLocations.Attribute" /> 또는 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement" /> 위치에서 속성을 설정할 수 있습니다. 이 열거형 멤버는 이러한 값의 조합으로 정의됩니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Attribute">
      <summary vsli:raw="Property can be set in XAML attribute syntax.">XAML 특성 구문으로 속성을 설정할 수 있습니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement">
      <summary vsli:raw="Property can be set in XAML property element syntax.">XAML 속성 요소 구문으로 속성을 설정할 수 있습니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.None">
      <summary vsli:raw="Property cannot be set in XAML at all. This is the default.">XAML에서 속성을 설정할 수 없습니다. 이 값이 기본값입니다.</summary>
    </member>
    <member name="T:System.Xaml.Schema.ShouldSerializeResult">
      <summary vsli:raw="Defines serialization behavior as reported by a &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에서 보고한 serialization 동작을 정의합니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.Default">
      <summary vsli:raw="Unknown, defer to the type of the member.">알 수 없습니다. 멤버의 형식을 따릅니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.False">
      <summary vsli:raw="Do not serialize the result.">결과를 serialize하지 않습니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.True">
      <summary vsli:raw="Serialize the result.">결과를 serialize합니다.</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlCollectionKind">
      <summary vsli:raw="Describes the collection metaphor (if any) used by a XAML member.">XAML 멤버가 사용하는 컬렉션 비유(있는 경우)에 대해 설명합니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Array">
      <summary vsli:raw="XAML member supports an array collection.">XAML 멤버가 배열 컬렉션을 지원합니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Collection">
      <summary vsli:raw="XAML member supports a list or a collection.">XAML 멤버가 목록 또는 컬렉션을 지원합니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Dictionary">
      <summary vsli:raw="XAML member supports a dictionary (key-value pairs).">XAML 멤버가 사전(키-값 쌍)을 지원합니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.None">
      <summary vsli:raw="XAML member does not support a collection.">XAML 멤버가 컬렉션을 지원하지 않습니다.</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlMemberInvoker">
      <summary vsli:raw="Provides an extension point that can access member characteristics of a XAML member through techniques other than reflection.">리플렉션이 아닌 다른 기술을 통해 XAML 멤버의 멤버 특성에 액세스할 수 있는 확장 지점을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; class.">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; class, based on a provided &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">제공된 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />을 기반으로 <see cref="T:System.Xaml.XamlMember" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; value for the specific XAML member relevant to this &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />와 관련된 특정 XAML 멤버에 대한 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 값입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
      <summary vsli:raw="Gets a value of the relevant property from an instance.">인스턴스에서 관련 속성의 값을 가져옵니다.</summary>
      <param name="instance" vsli:raw="An instance of the owner type for the member.">멤버에 대한 소유자 형식의 인스턴스입니다.</param>
      <returns vsli:raw="The requested property value.">요청된 속성 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; that is based on an unknown &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Invoked this method on a write-only member.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see cref=&quot;P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">알 수 없는 <see cref="T:System.Xaml.XamlMember" />을 기준으로 하는 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대해 이 메서드를 호출한 경우  
 또는  
쓰기 전용 멤버에 이 메서드를 호출했습니다.  
 또는  
 <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
      <summary vsli:raw="Sets a value of the relevant property on an instance.">인스턴스에 관련 속성의 값을 설정합니다.</summary>
      <param name="instance" vsli:raw="An instance of the owner type for the member.">멤버에 대한 소유자 형식의 인스턴스입니다.</param>
      <param name="value" vsli:raw="The property value to set.">설정할 속성 값입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; that is based on an unknown &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Invoked this method on a read-only member.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see cref=&quot;P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">알 수 없는 <see cref="T:System.Xaml.XamlMember" />을 기준으로 하는 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대해 이 메서드를 호출한 경우  
 또는  
읽기 전용 멤버에 이 메서드를 호출했습니다.  
 또는  
 <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="Indicates whether the value needs to be persisted by serialization processes.">serialization 프로세스에서 값을 지속시켜야 하는지 여부를 나타냅니다.</summary>
      <param name="instance" vsli:raw="The instance with the property to be examined for persistence.">지속성을 검사할 속성이 포함된 인스턴스입니다.</param>
      <returns vsli:raw="A value of the enumeration.">열거형 값입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the CLR method that gets values for the property that is relevant for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">이 <see cref="T:System.Reflection.MethodInfo" />와 관련된 속성의 값을 가져오는 CLR 메서드에 대한 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the CLR method that gets values for the property that is relevant for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">이 <see cref="T:System.Reflection.MethodInfo" />와 관련된 속성의 값을 가져오는 CLR 메서드에 대한 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the CLR method that sets values for the property that is relevant for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">이 <see cref="T:System.Reflection.MethodInfo" />와 관련된 속성의 값을 설정하는 CLR 메서드에 대한 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the CLR method that sets values for the property that is relevant for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">이 <see cref="T:System.Reflection.MethodInfo" />와 관련된 속성의 값을 설정하는 CLR 메서드에 대한 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker">
      <summary vsli:raw="Provides a static value that represents an unknown, not fully implemented &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">알 수 없으며 완전히 구현되지 않은 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />를 나타내는 정적 값을 제공합니다.</summary>
      <returns vsli:raw="A static value that represents an unknown, not fully implemented &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">알 수 없으며 완전히 구현되지 않은 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />를 나타내는 정적 값입니다.</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeInvoker">
      <summary vsli:raw="Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.">리플렉션 및 생성자 외의 다른 기술을 통해 XAML 형식의 인스턴스를 생성할 수 있는 확장 지점을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; class.">
        <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; class, based on a provided &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">제공된 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />을 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; value for the specific XAML type relevant to this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />와 관련된 특정 XAML 형식에 대한 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 값입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
      <summary vsli:raw="Adds the provided item to an instance of the type that is relevant to this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">제공된 항목을 이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />와 관련된 형식의 인스턴스에 추가합니다.</summary>
      <param name="instance" vsli:raw="An instance of the type specified by the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; used for constructing this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />를 생성하는 데 사용되는 <see cref="T:System.Xaml.XamlType" />으로 지정된 형식의 인스턴스입니다.</param>
      <param name="item" vsli:raw="The item to add.">추가할 항목입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; that is based on an unknown &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; where the relevant type is not a collection.">알 수 없는 <see cref="T:System.Xaml.XamlType" />을 기준으로 하는 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 이 메서드를 호출한 경우  
 또는  
관련 형식이 컬렉션이 아닌 경우 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 이 메서드를 호출한 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xaml.XamlSchemaException" vsli:raw="&lt;see cref=&quot;M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; returns &lt;see langword=&quot;null&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대한 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />가 <see langword="null" />을 반환하는 경우</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
      <summary vsli:raw="Adds the provided key and item value to an instance of the type that is relevant to this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">제공된 키 및 항목 값을 이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />와 관련된 형식의 인스턴스에 추가합니다.</summary>
      <param name="instance" vsli:raw="An instance of the type specified by the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; used for constructing this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />를 생성하는 데 사용되는 <see cref="T:System.Xaml.XamlType" />으로 지정된 형식의 인스턴스입니다.</param>
      <param name="key" vsli:raw="Dictionary key for the item to add.">추가할 항목에 대한 사전 키입니다.</param>
      <param name="item" vsli:raw="The item value to add.">추가할 항목 값입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; that is based on an unknown &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; where the relevant type is not a dictionary.">알 수 없는 <see cref="T:System.Xaml.XamlType" />을 기준으로 하는 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 이 메서드를 호출한 경우  
 또는  
관련 형식이 사전이 아닌 경우 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 이 메서드를 호출한 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Xaml.XamlSchemaException" vsli:raw="&lt;see cref=&quot;M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; returns &lt;see langword=&quot;null&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대한 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />가 <see langword="null" />을 반환하는 경우</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
      <summary vsli:raw="Creates an object instance based on the construction-initiated &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />에 대해 생성자가 시작한 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />을 기반으로 개체 인스턴스를 만듭니다.</summary>
      <param name="arguments" vsli:raw="An array of objects that supply the &lt;see langword=&quot;x:ConstructorArgs&quot; /&gt; for the instance. May be &lt;see langword=&quot;null&quot; /&gt; for types that do not require or use &lt;see langword=&quot;x:ConstructorArgs&quot; /&gt;.">인스턴스에 대해 <see langword="x:ConstructorArgs" />를 제공하는 개체 배열입니다. <see langword="null" />를 필요로 하지 않거나 사용하지 않는 형식의 경우 <see langword="x:ConstructorArgs" />일 수 있습니다.</param>
      <returns vsli:raw="The created instance based on the construction-initiated &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />에 대해 생성자가 시작한 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />을 기반으로 만들어진 인스턴스입니다.</returns>
      <exception cref="T:System.MissingMethodException" vsli:raw="Could not resolve a constructor.">생성자를 확인할 수 없습니다.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
      <summary vsli:raw="Returns the relevant &lt;see langword=&quot;Add&quot; /&gt; method for a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; that is relevant to a collection or dictionary.">컬렉션 또는 사전과 관련된 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 관련 <see langword="Add" /> 메서드를 반환합니다.</summary>
      <param name="contentType" vsli:raw="&lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the item type that is used by the &lt;see langword=&quot;Add&quot; /&gt; method.">
        <see langword="Add" /> 메서드가 사용하는 항목 형식에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</param>
      <returns vsli:raw="CLR &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; information for the &lt;see langword=&quot;Add&quot; /&gt; method, or null.">
        <see langword="Add" /> 메서드에 대한 CLR <see cref="T:System.Reflection.MethodInfo" /> 정보이거나 null입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;contentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="contentType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
      <summary vsli:raw="Returns an object representing a method that can enumerate over items.">항목을 열거할 수 있는 메서드를 나타내는 개체를 반환합니다.</summary>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for an enumerator method, or &lt;see langword=&quot;null&quot; /&gt;.">열거자 메서드에 대한 <see cref="T:System.Reflection.MethodInfo" />이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object representing the set of items.">항목 집합을 나타내는 <see cref="T:System.Collections.IEnumerator" /> 개체를 반환합니다.</summary>
      <param name="instance" vsli:raw="An instance of the type specified by the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; used for constructing this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />를 생성하는 데 사용되는 <see cref="T:System.Xaml.XamlType" />으로 지정된 형식의 인스턴스입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 개체이거나 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; that is based on an unknown &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; where the relevant type is not a collection or dictionary.">알 수 없는 <see cref="T:System.Xaml.XamlType" />을 기준으로 하는 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 이 메서드를 호출한 경우  
 또는  
관련 형식이 컬렉션 또는 사전이 아닌 경우 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 이 메서드를 호출했습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
      <summary vsli:raw="Gets the handler to use when a &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; calls into an implemented &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlObjectWriter" />가 구현된 <see cref="T:System.Windows.Markup.MarkupExtension" />을 호출할 때 사용할 처리기를 가져옵니다.</summary>
      <returns vsli:raw="A handler implementation that handles this case.">이 경우를 처리하는 처리기 구현입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
      <summary vsli:raw="Gets the handler to use when a &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; calls into a CLR-implemented &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlObjectWriter" />가 CLR 구현된 <see cref="T:System.ComponentModel.TypeConverter" />를 호출할 때 사용할 처리기를 가져옵니다.</summary>
      <returns vsli:raw="A handler implementation that handles this case.">이 경우를 처리하는 처리기 구현입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
      <summary vsli:raw="Provides a static value that represents an unknown, not fully implemented &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">알 수 없으며 완전히 구현되지 않은 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />를 나타내는 정적 값을 제공합니다.</summary>
      <returns vsli:raw="A static value that represents an unknown, not fully implemented &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">알 수 없으며 완전히 구현되지 않은 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />를 나타내는 정적 값입니다.</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeName">
      <summary vsli:raw="Provides a means to specify a XAML type in terms of name and namespace.">이름 및 네임스페이스로 XAML 형식을 지정하기 위한 방법을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; class.">
        <see cref="T:System.Xaml.Schema.XamlTypeName" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; class, based on name and namespace strings.">이름과 네임스페이스 문자열을 기반으로 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xamlNamespace" vsli:raw="The XAML namespace that contains name.">name이 들어 있는 XAML 네임스페이스입니다.</param>
      <param name="name" vsli:raw="The name of the type to create a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; for.">
        <see cref="T:System.Xaml.Schema.XamlTypeName" />을 만들 형식의 이름입니다.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; class, based on name and namespace strings as well as an array of type arguments.">이름과 네임스페이스 문자열 및 형식 인수 배열을 기반으로 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xamlNamespace" vsli:raw="The XAML namespace that contains &lt;paramref name=&quot;name&quot; /&gt;.">
        <paramref name="name" />이 들어 있는 XAML 네임스페이스입니다.</param>
      <param name="name" vsli:raw="The name of the type to create a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; for.">
        <see cref="T:System.Xaml.Schema.XamlTypeName" />을 만들 형식의 이름입니다.</param>
      <param name="typeArguments" vsli:raw="An array of type arguments, each of which must be a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">각각 <see cref="T:System.Xaml.Schema.XamlTypeName" />을 나타내는 형식 인수의 배열입니다.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; class, based on an existing &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">기존 <see cref="T:System.Xaml.Schema.XamlTypeName" />을 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xamlType" vsli:raw="An existing &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">기존 <see cref="T:System.Xaml.XamlType" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Name">
      <summary vsli:raw="Gets the name used to construct this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlTypeName" />을 생성하는 데 사용된 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the type.">형식의 이름입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Namespace">
      <summary vsli:raw="Gets the XAML namespace identifier used to construct this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlTypeName" />을 생성하는 데 사용된 XAML 네임스페이스 식별자를 가져옵니다.</summary>
      <returns vsli:raw="The XAML namespace identifier.">XML 네임스페이스 식별자입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value based on a type name and an object that can resolve a markup prefix into a namespace.">태그 접두사를 네임스페이스로 확인할 수 있는 형식 이름 및 개체를 기반으로 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 값을 제공합니다.</summary>
      <param name="typeName" vsli:raw="The type name to create a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value for.">
        <see cref="T:System.Xaml.Schema.XamlTypeName" /> 값을 만들 형식 이름입니다.</param>
      <param name="namespaceResolver" vsli:raw="An object or service provider that implements &lt;see cref=&quot;T:System.Xaml.IXamlNamespaceResolver&quot; /&gt;.">
        <see cref="T:System.Xaml.IXamlNamespaceResolver" />를 구현하는 개체 또는 서비스 공급자입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">만든 <see cref="T:System.Xaml.Schema.XamlTypeName" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; or &lt;paramref name=&quot;namespaceResolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> 또는 <paramref name="namespaceResolver" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException" vsli:raw="String cannot be parsed.">문자열을 구문 분석할 수 없습니다.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.">태그 접두사를 네임스페이스로 확인할 수 있는 개체 및 여러 형식 이름을 지정할 수 있는 문자열을 기반으로 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 값을 제공합니다.</summary>
      <param name="typeNameList" vsli:raw="A string that contains multiple types.">여러 형식이 들어 있는 문자열입니다.</param>
      <param name="namespaceResolver" vsli:raw="An object or service provider that implements &lt;see cref=&quot;T:System.Xaml.IXamlNamespaceResolver&quot; /&gt;.">
        <see cref="T:System.Xaml.IXamlNamespaceResolver" />를 구현하는 개체 또는 서비스 공급자입니다.</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">만든 <see cref="T:System.Xaml.Schema.XamlTypeName" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeNameList&quot; /&gt; or &lt;paramref name=&quot;namespaceResolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeNameList" /> 또는 <paramref name="namespaceResolver" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException" vsli:raw="String cannot be parsed.">문자열을 구문 분석할 수 없습니다.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString">
      <summary vsli:raw="Converts the value of this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; to its equivalent string representation.">이 <see cref="T:System.Xaml.Schema.XamlTypeName" />의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <returns vsli:raw="The equivalent string representation of this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlTypeName" />의 해당하는 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
      <summary vsli:raw="Converts the value of this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; to its equivalent string representation, which can be used in markup syntax for an object element usage of multiple types.">이 <see cref="T:System.Xaml.Schema.XamlTypeName" />의 값을 해당하는 문자열 표현으로 변환합니다. 이 문자열 표현은 여러 형식의 개체 요소 사용을 위한 태그 구문에서 사용할 수 있습니다.</summary>
      <param name="typeNameList" vsli:raw="A list of types.">형식 목록입니다.</param>
      <param name="prefixLookup" vsli:raw="A service reference for prefix lookup.">접두사 조회를 위한 서비스 참조입니다.</param>
      <returns vsli:raw="A concatenated string of all type results.">모든 형식 결과의 연결된 문자열입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;prefixLookup&quot; /&gt; or &lt;paramref name=&quot;typeNameList&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="prefixLookup" /> 또는 <paramref name="typeNameList" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
      <summary vsli:raw="Converts the value of this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; to its equivalent string representation, which can be used in markup syntax for an object element usage of a type.">이 <see cref="T:System.Xaml.Schema.XamlTypeName" />의 값을 해당하는 문자열 표현으로 변환합니다. 이 문자열 표현은 형식의 개체 요소 사용을 위한 태그 구문에서 사용할 수 있습니다.</summary>
      <param name="prefixLookup" vsli:raw="A service reference for prefix lookup.">접두사 조회를 위한 서비스 참조입니다.</param>
      <returns vsli:raw="A prefixed usage string.">접두사가 있는 사용 문자열입니다.</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Xaml.Schema.XamlTypeName.Namespace&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see cref=&quot;P:System.Xaml.Schema.XamlTypeName.Name&quot; /&gt; is not valid.  &#xA;  &#xA; -or-  &#xA;  &#xA; Could not look up the prefix.">이 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />에 대한 <see cref="T:System.Xaml.Schema.XamlTypeName" />가 <see langword="null" />인 경우  
또는 
 <see cref="P:System.Xaml.Schema.XamlTypeName.Name" />가 잘못된 경우  
또는 
접두사를 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value based on a type name and an object that can resolve a markup prefix into a namespace.">태그 접두사를 네임스페이스로 확인할 수 있는 형식 이름 및 개체를 기반으로 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 값을 제공합니다.</summary>
      <param name="typeName" vsli:raw="The type name to create a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value for.">
        <see cref="T:System.Xaml.Schema.XamlTypeName" /> 값을 만들 형식 이름입니다.</param>
      <param name="namespaceResolver" vsli:raw="An object or service provider that implements &lt;see cref=&quot;T:System.Xaml.IXamlNamespaceResolver&quot; /&gt;.">
        <see cref="T:System.Xaml.IXamlNamespaceResolver" />를 구현하는 개체 또는 서비스 공급자입니다.</param>
      <param name="result" vsli:raw="Out parameter that contains the created &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; if the return value is &lt;see langword=&quot;true&quot; /&gt;.">반환 값이 <see langword="true" />이면 만든 <see cref="T:System.Xaml.Schema.XamlTypeName" />을 포함하는 out 매개 변수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the parse was successful and &lt;paramref name=&quot;result&quot; /&gt; contains a useful value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">구문 분석 작업에 성공하고 <paramref name="result" />에 유용한 값이 포함되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; or &lt;paramref name=&quot;namespaceResolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> 또는 <paramref name="namespaceResolver" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.">태그 접두사를 네임스페이스로 확인할 수 있는 개체 및 여러 형식 이름을 지정할 수 있는 문자열을 기반으로 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 값을 제공합니다.</summary>
      <param name="typeNameList" vsli:raw="A string that contains multiple types.">여러 형식이 들어 있는 문자열입니다.</param>
      <param name="namespaceResolver" vsli:raw="An object or service provider that implements &lt;see cref=&quot;T:System.Xaml.IXamlNamespaceResolver&quot; /&gt;.">
        <see cref="T:System.Xaml.IXamlNamespaceResolver" />를 구현하는 개체 또는 서비스 공급자입니다.</param>
      <param name="result" vsli:raw="Out parameter that contains the created &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; if the return value is &lt;see langword=&quot;true&quot; /&gt;.">반환 값이 <see langword="true" />이면 만든 <see cref="T:System.Xaml.Schema.XamlTypeName" />을 포함하는 out 매개 변수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the parse was successful and &lt;paramref name=&quot;result&quot; /&gt; contains a useful value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">구문 분석 작업에 성공하고 <paramref name="result" />에 유용한 값이 포함되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeNameList&quot; /&gt; or &lt;paramref name=&quot;namespaceResolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeNameList" /> 또는 <paramref name="namespaceResolver" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
      <summary vsli:raw="Gets the type arguments used to construct this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlTypeName" />을 생성하는 데 사용되는 형식 인수를 가져옵니다.</summary>
      <returns vsli:raw="The type arguments, if any. May be null.">형식 인수입니다(있을 경우). null일 수 있습니다.</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeTypeConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object to and from a string that represents the type name. This functionality is used for XAML extensibility by markup definitions, via &lt;see cref=&quot;T:System.Windows.Markup.PropertyDefinition&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 개체를 형식 이름을 나타내는 문자열로 변환하거나 이러한 문자열을 해당 개체로 변환합니다. 이 기능은 <see cref="T:System.Windows.Markup.PropertyDefinition" />을 통한 태그 정의별 XAML 확장성에 사용됩니다.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeTypeConverter&quot; /&gt; class.">
        <see cref="T:System.Xaml.Schema.XamlTypeTypeConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an object of the specified type can be converted to an instance of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, using the specified context.">지정된 컨텍스트를 사용하여 지정된 형식의 개체를 <see cref="T:System.Xaml.XamlType" />의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">이 변환기가 호출되는 환경에 대한 정보를 제공하는 형식 컨텍스트입니다.</param>
      <param name="sourceType" vsli:raw="The type being evaluated for conversion.">변환을 위해 확인하는 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기가 작업을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an instance of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; can be converted to the specified type, using the specified context.">지정한 컨텍스트를 사용하여 <see cref="T:System.Xaml.XamlType" />의 인스턴스를 지정한 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">이 변환기가 호출되는 환경에 대한 정보를 제공하는 형식 컨텍스트입니다.</param>
      <param name="destinationType" vsli:raw="The type being evaluated for conversion.">변환을 위해 확인하는 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 변환기가 작업을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert the specified object to a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, using the specified context.">지정한 컨텍스트를 사용하여 지정한 개체를 <see cref="T:System.Xaml.XamlType" />로 변환하려고 합니다.</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">이 변환기가 호출되는 환경에 대한 정보를 제공하는 형식 컨텍스트입니다.</param>
      <param name="culture" vsli:raw="Culture specific information.">문화권별 정보입니다.</param>
      <param name="value" vsli:raw="The object to convert.">변환할 개체입니다.</param>
      <returns vsli:raw="The converted object.">변환된 개체입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; cannot be converted.">
        <paramref name="value" />를 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; to the specified type, using the specified context.">지정한 컨텍스트를 사용하여 <see cref="T:System.Xaml.XamlType" />를 지정한 형식으로 변환하려고 합니다.</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">이 변환기가 호출되는 환경에 대한 정보를 제공하는 형식 컨텍스트입니다.</param>
      <param name="culture" vsli:raw="Culture specific information.">문화권별 정보입니다.</param>
      <param name="value" vsli:raw="The object to convert.">변환할 개체입니다.</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">개체를 변환할 대상 유형입니다.</param>
      <returns vsli:raw="The converted object.">변환된 개체입니다.</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; cannot be converted.">
        <paramref name="value" />를 변환할 수 없는 경우</exception>
    </member>
    <member name="T:System.Xaml.Schema.XamlValueConverter`1">
      <summary vsli:raw="Provides a common API surface for techniques that generate initialization or serialization values for XAML based on input other than the eventual destination type. This includes markup extensions and type converters.">최종 대상 형식이 아닌 입력을 기준으로 XAML의 초기화 값이나 serialization 값을 생성하는 기술에 대해 공통 API 영역을 제공합니다. 여기에는 태그 확장과 형식 변환기가 포함됩니다.</summary>
      <typeparam name="TConverterBase" vsli:raw="The CLR base class for the particular converter that this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; represents. Typically this is one of the following: &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt;; &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt;; &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />이 나타내는 특정 변환기에 대한 CLR 기본 클래스입니다. 일반적으로 <see cref="T:System.ComponentModel.TypeConverter" />, <see cref="T:System.Windows.Markup.MarkupExtension" />, <see cref="T:System.Windows.Markup.ValueSerializer" /> 중 하나입니다.</typeparam>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; class, based on a converter implementing &lt;see cref=&quot;T:System.Type&quot; /&gt; and the target/destination type of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />을 구현하는 변환기와 <see cref="T:System.Type" />의 대상 형식을 기반으로 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="converterType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that implements the converter behavior.">변환기 동작을 구현하는 <see cref="T:System.Type" />입니다.</param>
      <param name="targetType" vsli:raw="The target/destination &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" />의 대상 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />입니다.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; class, based on a converter implementing &lt;see cref=&quot;T:System.Type&quot; /&gt; the target/destination type of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;, and a string name.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />을 구현하는 변환기, <see cref="T:System.Type" />의 대상 형식 및 문자열 이름을 기반으로 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="converterType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that implements the converter behavior.">변환기 동작을 구현하는 <see cref="T:System.Type" />입니다.</param>
      <param name="targetType" vsli:raw="The target/destination &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" />의 대상 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />입니다.</param>
      <param name="name" vsli:raw="The string name.">문자열 이름입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="All three parameters are &lt;see langword=&quot;null&quot; /&gt; (at least one is required to be non-null).">매개 변수 셋 모두 <see langword="null" />입니다. 적어도 하나는 null이 아니어야 합니다.</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance">
      <summary vsli:raw="Gets a created instance of the converter implementation.">변환기 구현의 생성된 인스턴스를 가져옵니다.</summary>
      <returns vsli:raw="A created instance of the converter implementation, or &lt;see langword=&quot;null&quot; /&gt;.">변환기 구현의 생성된 인스턴스이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; for the class that implements the converter behavior.">변환기 동작을 구현하는 클래스에 대한 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; for the class that implements the converter behavior.">변환기 동작을 구현하는 클래스에 대한 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance">
      <summary vsli:raw="Returns an instance of the converter implementation.">변환기 구현의 인스턴스를 반환합니다.</summary>
      <returns vsli:raw="An instance of the converter implementation, or &lt;see langword=&quot;null&quot; /&gt;.">변환기 구현의 인스턴스이거나 <see langword="null" />입니다.</returns>
      <exception cref="T:System.Xaml.XamlSchemaException" vsli:raw="Converter did not implement the correct base type.">변환기가 올바른 기본 형식을 구현하지 않았습니다.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; and a specified object, which must also be a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, have the same value.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 이 인스턴스와 지정한 개체의 값이 같은지 여부를 확인합니다. 이 개체는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />이기도 해야 합니다.</summary>
      <param name="obj" vsli:raw="The object to compare.">비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; and its value is the same as this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="obj" />이고 이 인스턴스와 같은 값을 가지면 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Xaml.Schema.XamlValueConverter{`0})">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; and another &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object have the same value.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 이 인스턴스와 다른 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체의 값이 같은지 여부를 확인합니다.</summary>
      <param name="other" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; to compare.">비교할 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; is a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; and its value is the same as this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="other" />이고 이 인스턴스와 같은 값을 가지면 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="An integer hash code.">정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.Name">
      <summary vsli:raw="Gets a string name for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 문자열 이름을 가져옵니다.</summary>
      <returns vsli:raw="A string name for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 문자열 이름입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; objects have the same value.">지정된 두 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체의 값이 같은지를 확인합니다.</summary>
      <param name="converter1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 또는 <see langword="null" />입니다.</param>
      <param name="converter2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 또는 <see langword="null" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;converter1&quot; /&gt; is the same as the value of &lt;paramref name=&quot;converter2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />의 값이 <paramref name="converter1" />의 값과 같으면 <paramref name="converter2" />를 반환하고, 그러지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; objects have different values.">지정된 두 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체의 값이 서로 다른지 확인합니다.</summary>
      <param name="converter1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 또는 <see langword="null" />입니다.</param>
      <param name="converter2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 또는 <see langword="null" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;converter1&quot; /&gt; is different than the value of &lt;paramref name=&quot;converter2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="converter1" /> 값이 <paramref name="converter2" /> 값과 다르면 <see langword="true" />이고, 같으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.TargetType">
      <summary vsli:raw="Gets the target/destination &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" />의 대상 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />을 가져옵니다.</summary>
      <returns vsli:raw="The target/destination &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" />의 대상 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">이 <see cref="T:System.String" />을 나타내는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlBackgroundReader">
      <summary vsli:raw="Implements a double-buffered &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; that can split reading and writing to different threads.">읽기 및 쓰기를 서로 다른 스레드로 분할할 수 있는 이중 버퍼링된 <see cref="T:System.Xaml.XamlReader" />를 구현합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.#ctor(System.Xaml.XamlReader)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlBackgroundReader&quot; /&gt; class.">
        <see cref="T:System.Xaml.XamlBackgroundReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="wrappedReader" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; that this &lt;see cref=&quot;T:System.Xaml.XamlBackgroundReader&quot; /&gt; is based on.">이 <see cref="T:System.Xaml.XamlReader" />의 기반이 되는 <see cref="T:System.Xaml.XamlBackgroundReader" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;wrappedReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="wrappedReader" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Xaml.XamlBackgroundReader&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.Xaml.XamlBackgroundReader" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release managed resources; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">관리되는 리소스를 해제하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.HasLineInfo">
      <summary vsli:raw="Gets a value that specifies whether line information is available.">줄 정보를 사용할 수 있는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if line information is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">줄 정보를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.IsEof">
      <summary vsli:raw="Gets a value that reports whether the reader position is at end-of-file.">판독기 위치가 파일 끝인지 여부를 보고하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the position is at end-of-file; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">위치가 파일의 끝에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LineNumber">
      <summary vsli:raw="Gets the line number to report.">보고할 줄 번호를 가져옵니다.</summary>
      <returns vsli:raw="The line number to report.">보고할 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LinePosition">
      <summary vsli:raw="Gets the line position to report.">보고할 줄 위치를 가져옵니다.</summary>
      <returns vsli:raw="The line position to report.">보고할 줄 위치입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Member">
      <summary vsli:raw="Gets the current member at the reader position, if the reader position is on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt;.">판독기 위치가 <see cref="F:System.Xaml.XamlNodeType.StartMember" />에 있는 경우 판독기 위치에서 현재 멤버를 가져옵니다.</summary>
      <returns vsli:raw="The current member; or &lt;see langword=&quot;null&quot; /&gt;, if the position is not on a member.">현재 멤버이거나, 위치가 멤버에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Namespace">
      <summary vsli:raw="Gets the XAML namespace from the current node.">현재 노드에서 XAML 네임스페이스를 가져옵니다.</summary>
      <returns vsli:raw="The XAML namespace, if it is available; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">사용할 수 있으면 XAML 네임스페이스이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.NodeType">
      <summary vsli:raw="Gets the type of the current node.">현재 노드의 형식을 가져옵니다.</summary>
      <returns vsli:raw="A value of the &lt;see cref=&quot;T:System.Xaml.XamlNodeType&quot; /&gt; enumeration.">
        <see cref="T:System.Xaml.XamlNodeType" /> 열거형의 값입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Read">
      <summary vsli:raw="Provides the next XAML node from the source, if a node is available.">노드를 사용할 수 있는 경우 소스에서 다음 XAML 노드를 제공합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a node is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">노드를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.SchemaContext">
      <summary vsli:raw="Gets an object that provides schema context information for the information set.">정보 집합에 대한 스키마 컨텍스트 정보를 제공하는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that provides schema context information for the information set.">정보 집합에 대한 스키마 컨텍스트 정보를 제공하는 개체입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread">
      <summary vsli:raw="Creates and starts a new &lt;see cref=&quot;T:System.Threading.Thread&quot; /&gt; (constructed from &lt;see cref=&quot;T:System.Threading.ParameterizedThreadStart&quot; /&gt;) that handles a named thread for the &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;.">
        <see cref="T:System.Threading.Thread" />의 명명된 스레드를 처리하는 새 <see cref="T:System.Threading.ParameterizedThreadStart" />(<see cref="T:System.Xaml.XamlReader" />에서 생성됨)를 만들고 시작합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The thread is already started.">스레드가 이미 시작되었습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread(System.String)">
      <summary vsli:raw="Creates and starts a new &lt;see cref=&quot;T:System.Threading.Thread&quot; /&gt; (constructed from &lt;see cref=&quot;T:System.Threading.ParameterizedThreadStart&quot; /&gt;) that handles a named thread for the &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;. You specify the thread name as a parameter.">
        <see cref="T:System.Threading.Thread" />의 명명된 스레드를 처리하는 새 <see cref="T:System.Threading.ParameterizedThreadStart" />(<see cref="T:System.Xaml.XamlReader" />에서 생성됨)를 만들고 시작합니다. 스레드 이름을 매개 변수로 지정합니다.</summary>
      <param name="threadName" vsli:raw="The name for the thread.">스레드의 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The thread is already started.">스레드가 이미 시작되었습니다.</exception>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Type">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node.">현재 노드의 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the current reader position is not on an object.">현재 노드의 <see cref="T:System.Xaml.XamlType" />이거나, 현재 판독기 위치가 개체에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Value">
      <summary vsli:raw="Gets the value of the current node.">현재 노드의 값을 가져옵니다.</summary>
      <returns vsli:raw="The value of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the current reader position is not on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.Value&quot; /&gt; node type.">현재 노드의 값이거나, 현재 판독기 위치가 <see cref="F:System.Xaml.XamlNodeType.Value" /> 노드 형식에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlDeferringLoader">
      <summary vsli:raw="Represents a XAML reader behavior that loads and returns deferred content.">지연된 콘텐츠를 로드하고 반환하는 XAML 판독기 동작을 나타냅니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDeferringLoader&quot; /&gt; class.">
        <see cref="T:System.Xaml.XamlDeferringLoader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Load(System.Xaml.XamlReader,System.IServiceProvider)">
      <summary vsli:raw="Loads XAML content in a deferred mode, which is based on a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; and certain required services from a service provider.">
        <see cref="T:System.Xaml.XamlReader" /> 및 서비스 공급자에서 필요한 특정 서비스를 기반으로 XAML 콘텐츠를 지연된 모드로 로드합니다.</summary>
      <param name="xamlReader" vsli:raw="The initiating reader that is returned on calls to &lt;see cref=&quot;M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)&quot; /&gt;.">
        <see cref="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)" /> 호출에 대해 반환되는 시작 판독기입니다.</param>
      <param name="serviceProvider" vsli:raw="The service provider for the required services.">필요한 서비스의 서비스 공급자입니다.</param>
      <returns vsli:raw="The root object that is produced by the input &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;.">입력 <see cref="T:System.Xaml.XamlReader" />에서 생성된 루트 개체입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)">
      <summary vsli:raw="Commits a value for deferred loading.">지연된 로드에 대한 값을 커밋합니다.</summary>
      <param name="value" vsli:raw="The input value to commit for deferred loading.">지연된 로드에 대해 커밋할 입력 값입니다.</param>
      <param name="serviceProvider" vsli:raw="The service provider for the required services.">필요한 서비스의 서비스 공급자입니다.</param>
      <returns vsli:raw="A XAML reader that can be used to obtain the deferred value as XAML node information.">지연된 값을 XAML 노드 정보로 가져오는 데 사용할 수 있는 XAML 판독기입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlDirective">
      <summary vsli:raw="Provides the XAML type system identifier for a member if the member is also a XAML directive. XAML readers and XAML writers use the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; identifier during processing of member nodes. The identifier is used when the XAML reader is positioned on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt; and &lt;see cref=&quot;P:System.Xaml.XamlMember.IsDirective&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;.">멤버가 XAML 지시문이기도 한 경우 멤버의 XAML 형식 시스템 식별자를 제공합니다. 멤버 노드를 처리하는 동안 XAML 판독기 및 XAML 작성기는 <see cref="T:System.Xaml.XamlDirective" /> 식별자를 사용합니다. XAML 판독기가 <see cref="F:System.Xaml.XamlNodeType.StartMember" />에 위치하고 <see cref="P:System.Xaml.XamlMember.IsDirective" />가 <see langword="true" />인 경우 식별자가 사용됩니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; class, specifying values for each per-case value of a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlDirective" />의 가능한 각 사례 값에 대한 값을 지정하여 <see cref="T:System.Xaml.XamlDirective" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xamlNamespaces" vsli:raw="A set of XAML namespaces where this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; can exist, passed as an enumerable set of the identifier strings.">이 <see cref="T:System.Xaml.XamlDirective" />가 있을 수 있는 XAML 네임스페이스 집합으로, 식별자 문자열의 열거 가능 집합으로 전달됩니다.</param>
      <param name="name" vsli:raw="The identifying name of the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlDirective" />의 식별 이름입니다.</param>
      <param name="xamlType" vsli:raw="The XAML type that backs the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlDirective" />를 지원하는 XAML 형식입니다.</param>
      <param name="typeConverter" vsli:raw="The type converter that this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; uses for text syntax conversion.">이 <see cref="T:System.Xaml.XamlDirective" />가 텍스트 구문 변환에 사용하는 형식 변환기입니다.</param>
      <param name="allowedLocation" vsli:raw="A value of the &lt;see cref=&quot;T:System.Xaml.Schema.AllowedMemberLocations&quot; /&gt; enumeration.">
        <see cref="T:System.Xaml.Schema.AllowedMemberLocations" /> 열거형의 값입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;xamlType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlType" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; class, specifying values for a name and a single XAML namespace. Use this signature only when you want or expect &lt;see cref=&quot;P:System.Xaml.XamlMember.IsUnknown&quot; /&gt; to report &lt;see langword=&quot;true&quot; /&gt; for the directive.">이름 및 단일 XAML 네임스페이스에 대한 값을 지정하여 <see cref="T:System.Xaml.XamlDirective" /> 클래스의 새 인스턴스를 초기화합니다. <see cref="P:System.Xaml.XamlMember.IsUnknown" />이 지시문에 대해 <see langword="true" />를 보고하도록 하려는 경우에만 이 시그니처를 사용하십시오.</summary>
      <param name="xamlNamespace" vsli:raw="The primary XAML namespace where this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; can exist.">이 <see cref="T:System.Xaml.XamlDirective" />가 있을 수 있는 기본 XAML 네임스페이스입니다.</param>
      <param name="name" vsli:raw="The identifying name of the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlDirective" />의 식별 이름입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlDirective.AllowedLocation">
      <summary vsli:raw="Gets a value that specifies the XAML node types where the directive can be specified.">지시문을 지정할 수 있는 XAML 노드 형식을 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="A value of the enumeration. The default is the enumeration default, which is &lt;see cref=&quot;F:System.Xaml.Schema.AllowedMemberLocations.None&quot; /&gt;.">열거형 값입니다. 기본값은 열거형 기본값인 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.None" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">이 개체에 대한 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="An integer hash code.">정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetXamlNamespaces">
      <summary vsli:raw="Returns a list of XAML namespaces where this XAML member can exist.">이 XAML 멤버가 있을 수 있는 XAML 네임스페이스의 목록을 반환합니다.</summary>
      <returns vsli:raw="A list of XAML namespace identifiers, as strings.">문자열로 제공되는 XAML 네임스페이스 식별자 목록입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupCustomAttributeProvider">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; implementation. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 구현을 반환합니다. 이 구현은 항상 <see langword="null" />을 반환합니다.</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDeferringLoader">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which is used during deferred loading of XAML-declared objects. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">XAML 선언된 개체의 지연된 로드 시 사용되는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 반환합니다. 이 구현은 항상 <see langword="null" />을 반환합니다.</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDependsOn">
      <summary vsli:raw="Returns a list of &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects. The list reports the members where dependency relationships for initialization order exist relative to this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlMember" /> 개체의 목록을 반환합니다. 이 목록은 초기화 순서에 대한 종속성 관계가 이 <see cref="T:System.Xaml.XamlMember" />를 기준으로 존재하는 멤버를 보고합니다. 이 구현은 항상 <see langword="null" />을 반환합니다.</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupInvoker">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; that is associated with a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />와 연관된 <see cref="T:System.Xaml.XamlDirective" />를 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information for this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 <see cref="T:System.Xaml.XamlMember" /> 정보입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsAmbient">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is reported as an ambient property.">이 <see cref="T:System.Xaml.XamlMember" />가 앰비언트 속성으로 보고되는지 여부를 반환합니다.</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt;.">항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsEvent">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents an event.">이 <see cref="T:System.Xaml.XamlDirective" />가 이벤트를 나타내는지 여부를 반환합니다.</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt;.">항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadOnly">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents an intended read-only property.">이 <see cref="T:System.Xaml.XamlDirective" />가 의도된 읽기 전용 속성을 나타내는지 여부를 반환합니다.</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt;.">항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadPublic">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents a property that has a public &lt;see langword=&quot;get&quot; /&gt; accessor.">이 <see cref="T:System.Xaml.XamlDirective" />가 public <see langword="get" /> 접근자가 있는 속성을 나타내는지 여부를 반환합니다.</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsUnknown">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents a member that is not resolvable by the backing system that is used for type and member resolution.">이 <see cref="T:System.Xaml.XamlDirective" />가 형식 및 멤버 확인에 사용되는 지원 시스템에서 확인될 수 없는 멤버를 나타내는지 여부를 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents a non-resolvable member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlDirective" />가 확인할 수 없는 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWriteOnly">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents an intended write-only property.">이 <see cref="T:System.Xaml.XamlDirective" />가 의도된 쓰기 전용 속성을 나타내는지 여부를 반환합니다.</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt;.">항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWritePublic">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents a property that has a public &lt;see langword=&quot;set&quot; /&gt; accessor.">이 <see cref="T:System.Xaml.XamlDirective" />가 public <see langword="set" /> 접근자가 있는 속성을 나타내는지 여부를 반환합니다.</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTargetType">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type where the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; can exist. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" />가 있을 수 있는 형식의 <see cref="T:System.Xaml.XamlMember" />을 반환합니다. 이 구현은 항상 <see langword="null" />을 반환합니다.</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupType">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">이 멤버가 사용하는 형식의 <see cref="T:System.Xaml.XamlType" />을 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">이 멤버가 사용하는 형식의 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTypeConverter">
      <summary vsli:raw="Returns a type converter implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlDirective" />와 연관된 형식 변환기 구현을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; instance that has &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.ComponentModel.TypeConverter" /> 인스턴스이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingGetter">
      <summary vsli:raw="Returns a &lt;see langword=&quot;get&quot; /&gt; accessor that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlDirective" />와 연관된 <see langword="get" /> 접근자를 반환합니다. 이 구현은 항상 <see langword="null" />을 반환합니다.</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingMember">
      <summary vsli:raw="Returns a CLR reflection &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">이 <see cref="T:System.Reflection.MemberInfo" />와 연관된 CLR 리플렉션 <see cref="T:System.Xaml.XamlDirective" />를 반환합니다. 이 구현은 항상 <see langword="null" />을 반환합니다.</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingSetter">
      <summary vsli:raw="Returns a &lt;see langword=&quot;set&quot; /&gt; accessor that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlDirective" />와 연관된 <see langword="set" /> 접근자를 반환합니다. 이 구현은 항상 <see langword="null" />을 반환합니다.</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.ToString">
      <summary vsli:raw="Returns a string representation of this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlDirective" />의 문자열 표현을 반환합니다.</summary>
      <returns vsli:raw="A string representation of this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlDirective" />의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlDuplicateMemberException">
      <summary vsli:raw="The exception that is thrown when a XAML writer attempts to write a value for a duplicate member into the same object node.">XAML 작성기가 중복된 멤버에 대한 값을 같은 개체 노드에 쓰려고 할 때 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with a system-supplied message that describes the error.">오류를 설명하는 시스템 제공 메시지를 사용하여 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with serialized data.">serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with a specified message that describes the error.">
        <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Xaml.XamlMember,System.Xaml.XamlType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with the relevant member and type information to report.">보고할 관련 멤버 및 형식 정보를 사용하여 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member" vsli:raw="The XAML member identifier to report.">보고할 XAML 멤버 식별자입니다.</param>
      <param name="type" vsli:raw="The XAML type identifier to report as the parent type.">부모 형식으로 보고할 XAML 형식 식별자입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.DuplicateMember">
      <summary vsli:raw="Gets or sets the XAML member identifier for the property to report as a duplicate.">중복으로 보고할 속성에 대한 XAML 멤버 식별자를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; object (XAML member identifier) to report.">보고할 <see cref="T:System.Xaml.XamlMember" /> 개체(XAML 멤버 식별자)입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with serialized data.">serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.ParentType">
      <summary vsli:raw="Gets or sets the XAML type identifier to report as the parent type.">부모 형식으로 보고할 XAML 형식 식별자를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object (XAML type identifier) to report as the parent type.">부모 형식으로 보고할 <see cref="T:System.Xaml.XamlType" /> 개체(XAML 형식 식별자)입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlException">
      <summary vsli:raw="The exception that is thrown for a general XAML reader or XAML writer exception.">일반 XAML 판독기 또는 XAML 작성기 예외에 대해 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlException&quot; /&gt; class. The instance contains a system-supplied message that describes the error.">
        <see cref="T:System.Xaml.XamlException" /> 클래스의 새 인스턴스를 초기화합니다. 인스턴스는 오류를 설명하는 시스템 제공 메시지를 포함합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlException&quot; /&gt; class with serialized data.">serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlException&quot; /&gt; class. The instance contains a specified message that describes the error.">
        <see cref="T:System.Xaml.XamlException" /> 클래스의 새 인스턴스를 초기화합니다. 인스턴스는 오류를 설명하는 지정된 메시지를 포함합니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 따라 지역화되었는지 확인해야 합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlException&quot; /&gt; class. The instance contains a specified error message and a reference to the inner exception that is the cause of this exception.">
        <see cref="T:System.Xaml.XamlException" /> 클래스의 새 인스턴스를 초기화합니다. 인스턴스에는 지정된 오류 메시지와 이 예외의 원인인 내부 예외에 대한 참조가 포함됩니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 따라 지역화되었는지 확인해야 합니다.</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlException&quot; /&gt; class. The instance contains a specified error message, inner exception, and line information.">
        <see cref="T:System.Xaml.XamlException" /> 클래스의 새 인스턴스를 초기화합니다. 인스턴스는 지정된 오류 메시지, 내부 예외 및 줄 정보를 포함합니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 따라 지역화되었는지 확인해야 합니다.</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception.">현재 예외의 원인인 예외입니다.</param>
      <param name="lineNumber" vsli:raw="The line number to report to debugging or to line information consumers.">디버깅 또는 줄 정보 소비자에 보고할 줄 번호입니다.</param>
      <param name="linePosition" vsli:raw="The line position to report to debugging or line information consumers.">디버깅 또는 줄 정보 소비자에 보고할 줄 위치입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements &lt;see cref=&quot;M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)&quot; /&gt; and provides serialization support for the line information data.">
        <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />를 구현하고 줄 정보 데이터에 대한 serialization 지원을 제공합니다.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.XamlException.LineNumber">
      <summary vsli:raw="Gets or sets the line number component of XAML text line information that the exception reports.">예외가 보고하는 XAML 텍스트 줄 정보의 줄 번호 구성 요소를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The line number component of the XAML text line information.">XAML 텍스트 줄 정보의 줄 번호 구성 요소입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlException.LinePosition">
      <summary vsli:raw="Gets or sets the line position component of XAML text line information that the exception reports.">예외가 보고하는 XAML 텍스트 줄 정보의 줄 위치 구성 요소를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The line position component of XAML text line information.">XAML 텍스트 줄 정보의 줄 위치 구성 요소입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlException.Message">
      <summary vsli:raw="Gets or sets the exception message, and if line information is available, appends the line information to the message.">예외 메시지를 가져오거나 설정하며, 줄 정보를 사용할 수 있는 경우 메시지에 줄 정보를 추가합니다.</summary>
      <returns vsli:raw="The exception message that includes the appended line information.">추가된 줄 정보가 포함된 예외 메시지입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlInternalException">
      <summary vsli:raw="The exception that is thrown for internal inconsistencies that occur during XAML reading and XAML writing.">XAML 읽기 및 XAML 쓰기 중에 발생하는 내부 불일치에 대해 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlInternalException&quot; /&gt; class with a system-supplied message that describes the error.">오류를 설명하는 시스템 제공 메시지를 사용하여 <see cref="T:System.Xaml.XamlInternalException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlInternalException&quot; /&gt; class with serialized data.">serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlInternalException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlInternalException&quot; /&gt; class with a specified message that describes the error.">
        <see cref="T:System.Xaml.XamlInternalException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception.">예외를 설명하는 메시지입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlInternalException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Xaml.XamlInternalException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception.">예외를 설명하는 메시지입니다.</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Xaml.XamlLanguage">
      <summary vsli:raw="Defines constants that provide strings or objects that are useful for XAML markup or for programming with XAML types. These strings or objects are relevant to XAML language concepts, to the implementation of XAML language concepts in .NET XAML Services, or to both.">XAML 태그 또는 XAML 형식 프로그래밍에 유용한 문자열이나 개체를 제공하는 상수를 정의합니다. 이러한 문자열이나 개체는 XAML 언어 개념, .NET Framework XAML 서비스의 XAML 언어 개념 구현 또는 둘 다와 관련이 있습니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllDirectives">
      <summary vsli:raw="Gets a read-only generic collection of each &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; identifier that is defined by .NET XAML Services.">.NET Framework XAML 서비스에 정의되어 있는 각 <see cref="T:System.Xaml.XamlDirective" /> 식별자의 읽기 전용 제네릭 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A read-only generic collection of each &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; identifier that is defined by .NET XAML Services.">.NET Framework XAML 서비스에 정의되어 있는 각 <see cref="T:System.Xaml.XamlDirective" /> 식별자의 읽기 전용 제네릭 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllTypes">
      <summary vsli:raw="Gets a read-only generic collection of individual &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; values that match, or alias, a XAML language intrinsic that is defined by .NET XAML Services.">.NET Framework XAML 서비스에 정의되어 있는 XAML 언어 내장 항목 또는 내장 항목의 별칭과 일치하는 각 <see cref="T:System.Xaml.XamlType" /> 값의 읽기 전용 제네릭 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A read-only generic collection of each &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that matches a XAML language intrinsic.">XAML 언어 내장 항목과 일치하는 각 <see cref="T:System.Xaml.XamlType" />의 읽기 전용 제네릭 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Arguments">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Arguments&quot; /&gt; of a factory method or a generic usage.">팩터리 메서드 또는 제네릭 사용의 <see langword="Arguments" />에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Arguments&quot; /&gt; of a factory method or generic usage.">팩터리 메서드 또는 제네릭 사용의 <see langword="Arguments" />에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Array">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Array&quot; /&gt; XAML language intrinsic.">
        <see langword="Array" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Array&quot; /&gt; XAML language intrinsic.">
        <see langword="Array" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AsyncRecords">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;AsyncRecords&quot; /&gt; pseudomember.">
        <see langword="AsyncRecords" /> 의사 멤버에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;AsyncRecords&quot; /&gt; pseudomember.">
        <see langword="AsyncRecords" /> 의사 멤버에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Base">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;base&quot; /&gt; directive from XML.">XML에서 <see langword="base" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;base&quot; /&gt; directive from XML.">XML에 있는 <see langword="base" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Boolean">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Boolean&quot; /&gt; XAML language intrinsic.">
        <see langword="Boolean" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Boolean&quot; /&gt; XAML language intrinsic.">
        <see langword="Boolean" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Byte">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Byte&quot; /&gt; XAML language intrinsic.">
        <see langword="Byte" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Byte&quot; /&gt; XAML language intrinsic.">
        <see langword="Byte" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Char">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Char&quot; /&gt; XAML language intrinsic.">
        <see langword="Char" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Char&quot; /&gt; XAML language intrinsic.">
        <see langword="Char" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Class">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Class&quot; /&gt; directive from XAML.">XAML의 <see langword="Class" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Class&quot; /&gt; directive from XAML.">XAML의 <see langword="Class" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassAttributes">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;ClassAttributes&quot; /&gt; directive from XAML.">XAML의 <see langword="ClassAttributes" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;ClassAttributes&quot; /&gt; directive from XAML.">XAML의 <see langword="ClassAttributes" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassModifier">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;ClassModifier&quot; /&gt; directive from XAML.">XAML의 <see langword="ClassModifier" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;ClassModifier&quot; /&gt; directive from XAML.">XAML의 <see langword="ClassModifier" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Code">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for &lt;see langword=&quot;Code&quot; /&gt; as detailed in [MS-XAML].">[MS-XAML]에서 설명한 <see langword="Code" />에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for &lt;see langword=&quot;Code&quot; /&gt; as detailed in [MS-XAML].">[MS-XAML]에서 설명한 <see langword="Code" />에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ConnectionId">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that identifies a connection point for wiring events to handlers.">이벤트를 처리기에 연결하기 위한 연결 지점을 식별하는 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that identifies a connection point for wiring events to handlers.">이벤트를 처리기에 연결하기 위한 연결 지점을 식별하는 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Decimal">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Decimal&quot; /&gt; XAML language intrinsic.">
        <see langword="Decimal" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Decimal&quot; /&gt; XAML language intrinsic.">
        <see langword="Decimal" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Double">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Double&quot; /&gt; XAML language intrinsic.">
        <see langword="Double" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Double&quot; /&gt; XAML language intrinsic.">
        <see langword="Double" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FactoryMethod">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that identifies a factory method for XAML.">XAML에 대한 팩터리 메서드를 식별하는 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that identifies a factory method for XAML.">XAML에 대한 팩터리 메서드를 식별하는 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FieldModifier">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;FieldModifier&quot; /&gt; directive from XAML.">XAML의 <see langword="FieldModifier" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;FieldModifier&quot; /&gt; directive from XAML.">XAML의 <see langword="FieldModifier" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Initialization">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Initialization&quot; /&gt; directive from XAML.">XAML의 <see langword="Initialization" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Initialization&quot; /&gt; directive from XAML.">XAML의 <see langword="Initialization" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int16">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int16&quot; /&gt; XAML language intrinsic.">
        <see langword="Int16" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int16&quot; /&gt; XAML language intrinsic.">
        <see langword="Int16" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int32">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; XAML language intrinsic.">
        <see langword="Int32" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; XAML language intrinsic.">
        <see langword="Int32" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int64">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int64&quot; /&gt; XAML language intrinsic.">
        <see langword="Int64" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int64&quot; /&gt; XAML language intrinsic.">
        <see langword="Int64" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Items">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Items&quot; /&gt; directive from XAML.">XAML의 <see langword="Items" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Items&quot; /&gt; directive from XAML.">XAML의 <see langword="Items" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Key">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Key&quot; /&gt; directive from XAML.">XAML의 <see langword="Key" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Key&quot; /&gt; directive from XAML.">XAML의 <see langword="Key" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Lang">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;lang&quot; /&gt; directive from XML.">XML에서 <see langword="lang" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;lang&quot; /&gt; directive from XML.">XML에 있는 <see langword="lang" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Member">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the type that is the item type of &lt;see cref=&quot;P:System.Xaml.XamlLanguage.Members&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" />의 항목 형식인 형식에 대한 <see cref="P:System.Xaml.XamlLanguage.Members" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the type that is the item type of &lt;see cref=&quot;P:System.Xaml.XamlLanguage.Members&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" />의 항목 형식인 형식에 대한 <see cref="P:System.Xaml.XamlLanguage.Members" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Members">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Members&quot; /&gt; concept in XAML.">XAML에서 <see langword="Members" /> 개념에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Members&quot; /&gt; concept in XAML.">XAML에 있는 <see langword="Members" /> 개념에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Name">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Name&quot; /&gt; directive from XAML.">XAML의 <see langword="Name" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Name&quot; /&gt; directive from XAML.">XAML의 <see langword="Name" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Null">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Null&quot; /&gt; or &lt;see langword=&quot;NullExtension&quot; /&gt; XAML language intrinsic.">
        <see langword="Null" /> 또는 <see langword="NullExtension" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Null&quot; /&gt;/&lt;see langword=&quot;NullExtension&quot; /&gt; XAML language intrinsic.">A <see cref="T:System.Xaml.XamlType" /> 에 대 한 합니다 <see langword="Null" /> / <see langword="NullExtension" /> XAML 언어 내장 항목입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Object">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Object&quot; /&gt; XAML language concept.">
        <see langword="Object" /> XAML 언어 개념에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Object&quot; /&gt; XAML language concept.">
        <see langword="Object" /> XAML 언어 개념에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.PositionalParameters">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;PositionalParameters&quot; /&gt; directive from XAML.">XAML의 <see langword="PositionalParameters" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;PositionalParameters&quot; /&gt; directive from XAML.">XAML의 <see langword="PositionalParameters" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Property">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Property&quot; /&gt; concept in XAML.">XAML에서 <see langword="Property" /> 개념에 대한 <see cref="T:System.Xaml.XamlType" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Property&quot; /&gt; concept in XAML.">XAML에 있는 <see langword="Property" /> 개념에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Reference">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that represents a &lt;see langword=&quot;Reference&quot; /&gt; for XAML.">XAML에 대한 <see langword="Reference" />를 나타내는 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that represents a &lt;see langword=&quot;Reference&quot; /&gt; for XAML.">XAML에 대한 <see langword="Reference" />를 나타내는 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Shared">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Shared&quot; /&gt; directive for XAML.">XAML의 <see langword="Shared" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Shared&quot; /&gt; directive for XAML.">XAML의 <see langword="Shared" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Single">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;c&gt;Single&lt;/c&gt; XAML language intrinsic.">
        <see langword="Single" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;c&gt;Single&lt;/c&gt; XAML language intrinsic.">
        <see langword="Single" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Space">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;space&quot; /&gt; directive from XML.">XML에서 <see langword="space" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;space&quot; /&gt; directive from XML.">XML에 있는 <see langword="space" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Static">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Static&quot; /&gt;/&lt;see langword=&quot;StaticExtension&quot; /&gt; XAML language intrinsic.">
        <see langword="Static" />/<see langword="StaticExtension" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Static&quot; /&gt;/&lt;see langword=&quot;StaticExtension&quot; /&gt; XAML language intrinsic.">A <see cref="T:System.Xaml.XamlType" /> 에 대 한 합니다 <see langword="Static" /> / <see langword="StaticExtension" /> XAML 언어 내장 항목입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.String">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;String&quot; /&gt; XAML language intrinsic.">
        <see langword="String" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;String&quot; /&gt; XAML language intrinsic.">
        <see langword="String" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Subclass">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Subclass&quot; /&gt; directive from XAML.">XAML의 <see langword="Subclass" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Subclass&quot; /&gt; directive from XAML.">XAML의 <see langword="Subclass" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.SynchronousMode">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that enables loading XAML asynchronously if the XAML processor supports such a mode.">XAML 프로세스가 해당 모드를 지원하는 경우 XAML을 비동기적으로 로드할 수 있도록 해주는 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that enables loading XAML asynchronously.">XAML을 비동기적으로 로드할 수 있도록 해주는 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TimeSpan">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;TimeSpan&quot; /&gt; concept in XAML language.">XAML 언어에서 <see langword="TimeSpan" /> 개념에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;TimeSpan&quot; /&gt; XAML language concept.">
        <see langword="TimeSpan" /> XAML 언어 개념에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Type">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Type&quot; /&gt;/&lt;see langword=&quot;TypeExtension&quot; /&gt; XAML language intrinsic.">
        <see langword="Type" />/<see langword="TypeExtension" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Type&quot; /&gt;/&lt;see langword=&quot;TypeExtension&quot; /&gt; XAML language intrinsic.">A <see cref="T:System.Xaml.XamlType" /> 에 대 한 합니다 <see langword="Type" /> / <see langword="TypeExtension" /> XAML 언어 내장 항목입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TypeArguments">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;TypeArguments&quot; /&gt; directive from XAML.">XAML의 <see langword="TypeArguments" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;TypeArguments&quot; /&gt; directive from XAML.">XAML의 <see langword="TypeArguments" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uid">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Uid&quot; /&gt; directive from XAML.">XAML의 <see langword="Uid" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Uid&quot; /&gt; directive from XAML.">XAML의 <see langword="Uid" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.UnknownContent">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;UnknownContent&quot; /&gt; directive from XAML.">XAML의 <see langword="UnknownContent" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;UnknownContent&quot; /&gt; directive from XAML.">XAML의 <see langword="UnknownContent" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uri">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Uri&quot; /&gt; XAML language concept.">
        <see langword="Uri" /> XAML 언어 개념에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Uri&quot; /&gt; XAML language concept.">
        <see langword="Uri" /> XAML 언어 개념에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xaml2006Namespace">
      <summary vsli:raw="Gets a string value for the string that identifies the XAML (2006) language namespace. That namespace corresponds to the XAML (2006) &quot;x&quot; prefixed namespace as defined in [MS-XAML] Section 5.1.1.">XAML(2006) 언어 네임스페이스를 식별하는 문자열의 문자열 값을 가져옵니다. 이 네임스페이스는 [MS-XAML] Section 5.1.1에 정의된 XAML(2006) "x" 접두사가 붙은 네임스페이스에 해당합니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XamlNamespaces">
      <summary vsli:raw="Gets a collection of the namespace identifiers for XAML.">XAML에 대한 네임스페이스 식별자 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A collection of the namespace identifiers for XAML.">XAML에 대한 네임스페이스 식별자 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XData">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the XAML type that backs an &lt;see langword=&quot;XData&quot; /&gt; block in XAML.">XAML에서 <see langword="XData" /> 블록을 지원하는 XAML 형식에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the XAML type that backs an &lt;see langword=&quot;XData&quot; /&gt; block. See [MS-XAML] Section 5.2.23.">
        <see langword="XData" /> 블록을 지원하는 XAML 형식에 대한 <see cref="T:System.Xaml.XamlType" />입니다. 참조 [MS XAML] Section 5.2.23합니다.</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xml1998Namespace">
      <summary vsli:raw="Gets a string value for the string that identifies the XML (1998) language namespace. That namespace corresponds to the XML &quot;xml&quot; prefixed namespace as referenced in [MS-XAML] Section 5.1.2.">XML(1998) 언어 네임스페이스를 식별하는 문자열의 문자열 값을 가져옵니다. 이 네임스페이스는 [MS-XAML] Section 5.1.2에 언급된 XML "xml" 접두사가 붙은 네임스페이스에 해당합니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XmlNamespaces">
      <summary vsli:raw="Gets a collection of the namespace identifiers for XML.">XML에 대한 네임스페이스 식별자 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A collection of the namespace identifiers for XML.">XML에 대한 네임스페이스 식별자 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlMember">
      <summary vsli:raw="Provides the XAML type system identifier for members of XAML types. The identifier is used by XAML readers and XAML writers during processing of member nodes (when the XAML reader is positioned on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt;) and also for general XAML type system logic.">XAML 형식의 멤버에 대해 XAML 형식 시스템 식별자를 제공합니다. 멤버 노드를 처리하는 동안 XAML 판독기 및 XAML 작성기가 사용하는 식별자(XAML 판독기가 <see cref="F:System.Xaml.XamlNodeType.StartMember" />에 위치한 경우)이며, 일반 XAML 형식 시스템 논리에도 사용됩니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class using CLR type system &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;.">CLR 형식 시스템 <see cref="T:System.Xaml.XamlMember" /> 및 <see cref="T:System.Reflection.EventInfo" />를 사용하여 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="eventInfo" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; that represents the event member.">이벤트 멤버를 나타내는 CLR 형식 시스템 <see cref="T:System.Reflection.EventInfo" />입니다.</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class using CLR type system &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;, including &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information.">CLR 형식 시스템 <see cref="T:System.Xaml.XamlMember" /> 및 <see cref="T:System.Reflection.EventInfo" />를 사용하여 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 정보와 함께 초기화합니다.</summary>
      <param name="eventInfo" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; that represents the event member.">이벤트 멤버를 나타내는 CLR 형식 시스템 <see cref="T:System.Reflection.EventInfo" />입니다.</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</param>
      <param name="invoker" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that handles run-time reflection calls against the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 런타임 리플렉션 호출을 처리하는 <see cref="T:System.Xaml.XamlMember" /> 구현입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class using CLR type system &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;.">CLR 형식 시스템 <see cref="T:System.Xaml.XamlMember" /> 및 <see cref="T:System.Reflection.PropertyInfo" />를 사용하여 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="propertyInfo" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property member.">속성 멤버를 나타내는 CLR 형식 시스템 <see cref="T:System.Reflection.PropertyInfo" />입니다.</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class using reflection &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;, including &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information.">리플렉션 <see cref="T:System.Xaml.XamlMember" /> 및 <see cref="T:System.Reflection.PropertyInfo" />를 사용하여 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 정보와 함께 초기화합니다.</summary>
      <param name="propertyInfo" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property member.">속성 멤버를 나타내는 CLR 형식 시스템 <see cref="T:System.Reflection.PropertyInfo" />입니다.</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</param>
      <param name="invoker" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that handles run-time invocation calls against the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 런타임 호출을 처리하는 <see cref="T:System.Xaml.XamlMember" /> 구현입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class for a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that represents an attachable property.">연결 가능한 속성을 나타내는 <see cref="T:System.Xaml.XamlMember" />에 대해 <see cref="T:System.Xaml.XamlMember" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="attachablePropertyName" vsli:raw="The string name of the attachable property.">연결 가능한 속성의 문자열 이름입니다.</param>
      <param name="getter" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the &lt;see langword=&quot;get&quot; /&gt; accessor of the attachable member's backing implementation.">연결 가능한 멤버의 지원을 구현하는 <see langword="get" /> 접근자에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="setter" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the &lt;see langword=&quot;set&quot; /&gt; accessor of the attachable member's backing implementation.">연결 가능한 멤버의 지원을 구현하는 <see langword="set" /> 접근자에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class for a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that represents an attachable property, including &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information.">연결 가능한 속성을 나타내는 <see cref="T:System.Xaml.XamlMember" />에 대해 <see cref="T:System.Xaml.XamlMember" /> 클래스의 새 인스턴스를 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 정보와 함께 초기화합니다.</summary>
      <param name="attachablePropertyName" vsli:raw="The string name of the attachable property.">연결 가능한 속성의 문자열 이름입니다.</param>
      <param name="getter" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the &lt;see langword=&quot;get&quot; /&gt; accessor of the attachable member's backing implementation.">연결 가능한 멤버의 지원을 구현하는 <see langword="get" /> 접근자에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="setter" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the &lt;see langword=&quot;set&quot; /&gt; accessor of the attachable member's backing implementation.">연결 가능한 멤버의 지원을 구현하는 <see langword="set" /> 접근자에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</param>
      <param name="invoker" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that handles run-time invocation calls against the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 런타임 호출을 처리하는 <see cref="T:System.Xaml.XamlMember" /> 구현입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class for a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that represents an attachable event.">연결 가능한 이벤트를 나타내는 <see cref="T:System.Xaml.XamlMember" />에 대해 <see cref="T:System.Xaml.XamlMember" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="attachableEventName" vsli:raw="The string name of the attachable event.">연결 가능한 이벤트의 문자열 이름입니다.</param>
      <param name="adder" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the handler &lt;see langword=&quot;Add&quot; /&gt; method of the attachable member's backing implementation.">연결 가능한 멤버의 지원을 구현하는 처리기 <see langword="Add" /> 메서드에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class for a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that represents an attachable event, including &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information.">연결 가능한 이벤트를 나타내는 <see cref="T:System.Xaml.XamlMember" />에 대해 <see cref="T:System.Xaml.XamlMember" /> 클래스의 새 인스턴스를 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 정보와 함께 초기화합니다.</summary>
      <param name="attachableEventName" vsli:raw="The string name of the attachable event.">연결 가능한 이벤트의 문자열 이름입니다.</param>
      <param name="adder" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the handler &lt;see langword=&quot;Add&quot; /&gt; method of the attachable member's backing implementation.">연결 가능한 멤버의 지원을 구현하는 처리기 <see langword="Add" /> 메서드에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</param>
      <param name="invoker" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that handles run-time invocation calls against the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 런타임 호출을 처리하는 <see cref="T:System.Xaml.XamlMember" /> 구현입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class using a string name and declaring &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; information. A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that is constructed with this signature has significant limitations.">문자열 이름을 사용하고 <see cref="T:System.Xaml.XamlMember" /> 정보를 선언하여 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다. 이 서명을 사용하여 생성된 <see cref="T:System.Xaml.XamlMember" />에는 중요한 제한이 있습니다.</summary>
      <param name="name" vsli:raw="The string name of the member.">멤버의 문자열 이름입니다.</param>
      <param name="declaringType" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; information for the declaring type.">선언 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 정보입니다.</param>
      <param name="isAttachable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the member is attachable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">멤버가 연결 가능하다는 것을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;declaringType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 또는 <paramref name="declaringType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.XamlMember.DeclaringType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the type that declares the member that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />와 연관된 멤버를 선언하는 형식의 <see cref="T:System.Xaml.XamlMember" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the type that declares the member that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />와 연관된 멤버를 선언하는 형식의 <see cref="T:System.Xaml.XamlMember" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DeferringLoader">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which is used for deferred loading of XAML declared objects.">XAML 선언된 개체의 지연된 로드에 사용되는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Xaml.XamlDeferringLoader&quot; /&gt; constraint on the generic.">제네릭에 대한 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 포함된 <see cref="T:System.Xaml.XamlDeferringLoader" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DependsOn">
      <summary vsli:raw="Gets a list of &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects. These report the members where dependency relationships for initialization order exist relative to this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlMember" /> 개체의 목록을 가져옵니다. 초기화 순서에 대한 종속성 관계가 이 <see cref="T:System.Xaml.XamlMember" />를 기준으로 존재하는 경우 해당 멤버를 보고합니다.</summary>
      <returns vsli:raw="A list of &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects.">
        <see cref="T:System.Xaml.XamlMember" /> 개체의 목록입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the current object is equal to another object.">현재 개체가 다른 개체와 같은지 여부를 나타냅니다.</summary>
      <param name="obj" vsli:raw="The object to compare with this object.">이 개체와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is equal to the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 개체가 <paramref name="obj" /> 매개 변수와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
      <summary vsli:raw="Indicates whether the current object is equal to another object of the same type.">현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.</summary>
      <param name="other" vsli:raw="An object to compare with this object.">이 개체와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is equal to the &lt;paramref name=&quot;other&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 개체가 <paramref name="other" /> 매개 변수와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">해당 개체의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="An integer hash code.">정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetXamlNamespaces">
      <summary vsli:raw="Returns a list of XAML namespaces where this XAML member can exist.">이 XAML 멤버가 있을 수 있는 XAML 네임스페이스의 목록을 반환합니다.</summary>
      <returns vsli:raw="A list of XAML namespace identifiers as strings.">문자열로 제공되는 XAML 네임스페이스 식별자 목록입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Invoker">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />과 연결된 <see cref="T:System.Xaml.XamlMember" /> 구현을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />과 연결된 <see cref="T:System.Xaml.XamlMember" /> 구현입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAmbient">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is reported as an ambient property.">이 <see cref="T:System.Xaml.XamlMember" />가 앰비언트 속성으로 보고되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is reported as an ambient property; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />가 앰비언트 속성으로 보고되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAttachable">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is an attachable member.">이 <see cref="T:System.Xaml.XamlMember" />가 연결 가능한 멤버인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is an attachable member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />가 연결 가능한 멤버이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsDirective">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is a XAML directive.">이 <see cref="T:System.Xaml.XamlMember" />가 XAML 지시문인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is a XAML directive; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />가 XAML 지시문이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsEvent">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents an event member.">이 <see cref="T:System.Xaml.XamlMember" />가 이벤트 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents an event; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />가 이벤트를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsNameValid">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is initialized with a valid &lt;see langword=&quot;xamlName&quot; /&gt; string as its &lt;see cref=&quot;P:System.Xaml.XamlMember.Name&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />가 유효한 <see langword="xamlName" /> 문자열을 <see cref="P:System.Xaml.XamlMember.Name" />으로 사용하여 초기화되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is initialized with a valid &lt;see langword=&quot;xamlName&quot; /&gt; string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />가 유효한 <see langword="true" /> 문자열을 사용하여 초기화되었으면 <see langword="xamlName" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a read-only member.">이 <see cref="T:System.Xaml.XamlMember" />가 읽기 전용 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a read-only member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />가 읽기 전용 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadPublic">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a member with a callable public &lt;see langword=&quot;get&quot; /&gt; accessor.">이 <see cref="T:System.Xaml.XamlMember" />가 호출 가능한 public <see langword="get" /> 접근자가 있는 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a callable public &lt;see langword=&quot;get&quot; /&gt; accessor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />가 호출 가능한 public <see langword="true" /> 접근자를 나타내면 <see langword="get" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsUnknown">
      <summary vsli:raw="Gets a value that indicates whether the member is not resolvable by the backing system that is used for type and member resolution.">멤버가 형식 및 멤버 확인에 사용되는 지원 시스템에서 확인될 수 없는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is not resolvable; &lt;see langword=&quot;false&quot; /&gt; if the member is resolvable.">멤버를 확인할 수 없으면 <see langword="true" />이고, 멤버를 확인할 수 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWriteOnly">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a write-only member.">이 <see cref="T:System.Xaml.XamlMember" />가 쓰기 전용 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a write-only member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />가 쓰기 전용 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWritePublic">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a member that has a callable public &lt;see langword=&quot;set&quot; /&gt; accessor.">이 <see cref="T:System.Xaml.XamlMember" />가 호출 가능한 public <see langword="set" /> 접근자가 있는 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a callable public &lt;see langword=&quot;set&quot; /&gt; accessor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />가 호출 가능한 public <see langword="true" /> 접근자를 나타내면 <see langword="set" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
      <summary vsli:raw="When implemented in a derived class, returns an &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; implementation.">파생 클래스에서 구현되는 경우 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 구현을 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; implementation.">
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 구현입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDeferringLoader">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which is used for deferred loading of XAML declared objects.">XAML 선언된 개체의 지연된 로드에 사용되는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; that has a &lt;see cref=&quot;T:System.Xaml.XamlDeferringLoader&quot; /&gt; constraint on the generic.">제네릭에 대한 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlDeferringLoader" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDependsOn">
      <summary vsli:raw="Returns a list of &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects. Items in the list report the members where dependency relationships for initialization order exist relative to this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlMember" /> 개체의 목록을 반환합니다. 이 목록의 항목은 초기화 순서에 대한 종속성 관계가 이 <see cref="T:System.Xaml.XamlMember" />를 기준으로 존재하는 멤버를 보고합니다.</summary>
      <returns vsli:raw="A list of &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects.">
        <see cref="T:System.Xaml.XamlMember" /> 개체의 목록입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupInvoker">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />과 연결된 <see cref="T:System.Xaml.XamlMember" />를 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information for this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;; or &lt;see langword=&quot;null&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 <see cref="T:System.Xaml.XamlMember" /> 정보이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsAmbient">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is reported as an ambient property.">이 <see cref="T:System.Xaml.XamlMember" />가 앰비언트 속성으로 보고되는지 여부를 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to report this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; as an ambient property; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />를 앰비언트 속성으로 보고하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsEvent">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents an event.">이 <see cref="T:System.Xaml.XamlMember" />가 이벤트를 나타내는지 여부를 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to report that this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents an event; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />가 이벤트를 나타낸다고 보고하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadOnly">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents an intended read-only property.">이 <see cref="T:System.Xaml.XamlMember" />가 의도된 읽기 전용 속성을 나타내는지 여부를 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to report this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; as an intended read-only property; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlMember" />를 의도된 읽기 전용 속성으로 보고하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadPublic">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a property that has a public &lt;see langword=&quot;get&quot; /&gt; accessor.">이 <see cref="T:System.Xaml.XamlMember" />가 public <see langword="get" /> 접근자가 있는 속성을 나타내는지 여부를 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a property that has a public &lt;see langword=&quot;get&quot; /&gt; accessor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />가 public <see langword="true" />접근자가 있는 속성임을 나타내면 <see langword="get" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsUnknown">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a member that is not resolvable by the backing system that is used for type and member resolution.">이 <see cref="T:System.Xaml.XamlMember" />가 형식 및 멤버 확인에 사용되는 지원 시스템에서 확인될 수 없는 멤버를 나타내는지 여부를 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a non-resolvable member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />가 확인할 수 없는 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWriteOnly">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a member that has a public &lt;see langword=&quot;set&quot; /&gt; accessor but not a public &lt;see langword=&quot;get&quot; /&gt; accessor.">이 <see cref="T:System.Xaml.XamlMember" />가 public <see langword="set" /> 접근자는 있지만 public <see langword="get" /> 접근자는 없는 멤버를 나타내는지 여부를 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a write-only member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />가 쓰기 전용 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWritePublic">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a member that has a public &lt;see langword=&quot;set&quot; /&gt; accessor.">이 <see cref="T:System.Xaml.XamlMember" />가 public <see langword="set" /> 접근자가 있는 멤버를 나타내는지 여부를 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a writable member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />가 쓰기 가능한 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters">
      <summary vsli:raw="Returns the opening and closing bracket characters for a markup extension.">태그 확장에 대해 여는 대괄호와 닫는 대괄호 문자를 반환합니다.</summary>
      <returns vsli:raw="A collection containing the opening and closing bracket characters.">여는 대괄호와 닫는 대괄호 문자를 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTargetType">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type where the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; can exist.">
        <see cref="T:System.Xaml.XamlType" />가 있을 수 있는 형식의 <see cref="T:System.Xaml.XamlMember" />을 반환합니다.</summary>
      <returns vsli:raw="The type where the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; can exist.">
        <see cref="T:System.Xaml.XamlMember" />가 있을 수 있는 형식입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupType">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">이 멤버가 사용하는 형식의 <see cref="T:System.Xaml.XamlType" />을 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">이 멤버가 사용하는 형식의 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTypeConverter">
      <summary vsli:raw="Returns a type converter implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />와 연관된 형식 변환기 구현을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; instance with &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.ComponentModel.TypeConverter" /> 인스턴스이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
      <summary vsli:raw="Returns a &lt;see langword=&quot;get&quot; /&gt; accessor that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />와 연관된 <see langword="get" /> 접근자를 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the associated &lt;see langword=&quot;get&quot; /&gt; accessor; or &lt;see langword=&quot;null&quot; /&gt;.">연관된 <see langword="get" /> 접근자에 대한 <see cref="T:System.Reflection.MethodInfo" />이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingMember">
      <summary vsli:raw="Returns a CLR type system &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">이 <see cref="T:System.Reflection.MemberInfo" />와 연관된 CLR 형식 시스템 <see cref="T:System.Xaml.XamlMember" />를 반환합니다.</summary>
      <returns vsli:raw="A CLR type system &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; object that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;; or &lt;see langword=&quot;null&quot; /&gt;.">이 <see cref="T:System.Reflection.MemberInfo" />와 연관된 CLR 형식 시스템 <see cref="T:System.Xaml.XamlMember" /> 개체이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
      <summary vsli:raw="Returns a &lt;see langword=&quot;set&quot; /&gt; accessor that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />와 연관된 <see langword="set" /> 접근자를 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the associated &lt;see langword=&quot;set&quot; /&gt; accessor; or &lt;see langword=&quot;null&quot; /&gt;.">연관된 <see langword="set" /> 접근자에 대한 <see cref="T:System.Reflection.MethodInfo" />이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupValueSerializer">
      <summary vsli:raw="Returns a value serializer implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />와 연관된 값 serializer 구현을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; instance with &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 인스턴스이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters">
      <summary vsli:raw="Defines the opening and closing bracket characters for a markup extension.">태그 확장에 대해 여는 대괄호와 닫는 대괄호 문자를 정의합니다.</summary>
      <returns vsli:raw="A collection containing the opening and closing bracket characters.">여는 대괄호와 닫는 대괄호 문자를 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Name">
      <summary vsli:raw="Gets the &lt;see langword=&quot;xamlName&quot; /&gt; name string that declares this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />를 선언하는 <see langword="xamlName" /> 이름 문자열을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;xamlName&quot; /&gt; name string that declares this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />를 선언하는 <see langword="xamlName" /> 이름 문자열입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects have the same value.">지정된 두 <see cref="T:System.Xaml.XamlMember" /> 개체의 값이 같은지를 확인합니다.</summary>
      <param name="xamlMember1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlMember" /> 또는 <see langword="null" />입니다.</param>
      <param name="xamlMember2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlMember" /> 또는 <see langword="null" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;xamlMember1&quot; /&gt; is the same as the value of &lt;paramref name=&quot;xamlMember2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />의 값이 <paramref name="xamlMember1" />의 값과 같으면 <paramref name="xamlMember2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects have different values.">지정된 두 <see cref="T:System.Xaml.XamlMember" /> 개체의 값이 서로 다른지 확인합니다.</summary>
      <param name="xamlMember1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlMember" /> 또는 <see langword="null" />입니다.</param>
      <param name="xamlMember2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlMember" /> 또는 <see langword="null" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;xamlMember1&quot; /&gt; differs from the value of &lt;paramref name=&quot;xamlMember2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="xamlMember1" />의 값이 <paramref name="xamlMember2" />의 값과 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.PreferredXamlNamespace">
      <summary vsli:raw="Gets the single XAML namespace URI that identifies the primary XAML namespace for this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />에 대한 기본 XAML 네임스페이스를 식별하는 단일 XAML 네임스페이스 URI를 가져옵니다.</summary>
      <returns vsli:raw="The identifier for the primary XAML namespace for this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;, as a string.">이 <see cref="T:System.Xaml.XamlMember" />에 대한 기본 XML 네임스페이스 식별자로서, 문자열로 되어 있습니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.SerializationVisibility">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibility&quot; /&gt; value, which indicates how a visual designer should process the member.">비주얼 디자이너에서 멤버를 어떻게 처리해야 하는지를 나타내는 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 값을 가져옵니다.</summary>
      <returns vsli:raw="A value of the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibility&quot; /&gt; enumeration. The default is &lt;see cref=&quot;F:System.ComponentModel.DesignerSerializationVisibility.Visible&quot; /&gt;.">
        <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 열거형의 값입니다. 기본값은 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TargetType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type where the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; can exist.">
        <see cref="T:System.Xaml.XamlType" />가 있을 수 있는 형식의 <see cref="T:System.Xaml.XamlMember" />을 가져옵니다.</summary>
      <returns vsli:raw="The type where the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; can exist.">
        <see cref="T:System.Xaml.XamlMember" />가 있을 수 있는 형식입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.ToString">
      <summary vsli:raw="Returns a string representation of this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />의 문자열 표현을 반환합니다.</summary>
      <returns vsli:raw="A string representation of this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />의 문자열 표현입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Type">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">이 멤버가 사용하는 형식의 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">이 멤버가 사용하는 형식의 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TypeConverter">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which can be used for type conversion construction of XAML declared objects.">XAML 선언된 개체의 형식 변환 생성에 사용될 수 있는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; value, with a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint on the generic.">제네릭에 대한 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.ComponentModel.TypeConverter" /> 값입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.UnderlyingMember">
      <summary vsli:raw="Gets the CLR type system &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that is available for a member that is constructed by &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt;.">
        <see cref="T:System.Reflection.MemberInfo" />, <see cref="T:System.Reflection.PropertyInfo" /> 또는 <see cref="T:System.Reflection.MethodInfo" />에 의해 생성된 멤버에 사용할 수 있는 CLR 형식 시스템 <see cref="T:System.Reflection.EventInfo" />를 가져옵니다.</summary>
      <returns vsli:raw="CLR type system &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; information, as cast from the initial constructor parameters. A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that is constructed with the &lt;see cref=&quot;M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)&quot; /&gt; signature returns &lt;see langword=&quot;null&quot; /&gt;.">초기 생성자 매개 변수에서 캐스트된 CLR 형식 시스템 <see cref="T:System.Reflection.MemberInfo" /> 정보입니다. <see cref="T:System.Xaml.XamlMember" /> 시그니처로 생성된 <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" />는 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.ValueSerializer">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which is used for value serialization of XAML declared objects.">XAML 선언된 개체의 값 serialization에 사용되는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint on the generic.">제네릭에 대한 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 포함된 <see cref="T:System.Windows.Markup.ValueSerializer" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeList">
      <summary vsli:raw="Provides a list of XAML nodes, which can be used for scenarios such as writing XAML nodes in a deferred manner.">지연된 방식으로 XAML 노드를 작성하는 등의 시나리오에 사용할 수 있는 XAML 노드의 목록을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlNodeList&quot; /&gt; class, using a provided schema context.">제공된 스키마 컨텍스트를 사용하여 <see cref="T:System.Xaml.XamlNodeList" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="schemaContext" vsli:raw="The schema context to use for node operations.">노드 작업에 사용할 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlNodeList&quot; /&gt; class, using a provided schema context and list size.">제공된 스키마 컨텍스트 및 목록 크기를 사용하여 <see cref="T:System.Xaml.XamlNodeList" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="schemaContext" vsli:raw="The schema context to use for node operations.">노드 작업에 사용할 스키마 컨텍스트입니다.</param>
      <param name="size" vsli:raw="The intended item count of the list.">목록의 의도한 항목 개수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.Clear">
      <summary vsli:raw="Clears the items in this list.">이 목록의 항목을 지웁니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Count">
      <summary vsli:raw="Gets the number of nodes in this &lt;see cref=&quot;T:System.Xaml.XamlNodeList&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlNodeList" />의 노드 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of nodes in this &lt;see cref=&quot;T:System.Xaml.XamlNodeList&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlNodeList" />의 노드 수입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlNodeList.GetReader">
      <summary vsli:raw="Returns a XAML reader implementation delegate.">XAML 판독기 구현 대리자를 반환합니다.</summary>
      <returns vsli:raw="A XAML reader implementation delegate.">XAML 판독기 구현 대리자입니다.</returns>
      <exception cref="T:System.Xaml.XamlException" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlNodeList&quot; /&gt; is still in Write mode.  &#xA;  &#xA; -or-  &#xA;  &#xA; The writer that is used for the node list has no schema context.">
        <see cref="T:System.Xaml.XamlNodeList" />가 여전히 쓰기 모드에 있습니다.  
또는 
노드 목록에 사용되는 작성기에 스키마 컨텍스트가 없습니다.</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Writer">
      <summary vsli:raw="Gets the associated XAML writer.">연관된 XAML 작성기를 가져옵니다.</summary>
      <returns vsli:raw="The associated XAML writer.">연관된 XAML 작성기입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeQueue">
      <summary vsli:raw="Provides a buffer for writing nodes and reading them again.">노드를 쓰고 다시 읽기 위한 버퍼를 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeQueue.#ctor(System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt; class using a provided XAML schema context.">제공된 XAML 스키마 컨텍스트를 사용하여 <see cref="T:System.Xaml.XamlNodeQueue" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="schemaContext" vsli:raw="The schema context to use for node operations.">노드 작업에 사용할 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlSchemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlSchemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Count">
      <summary vsli:raw="Gets the number of nodes in the &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlNodeQueue" />의 노드 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of nodes in the &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlNodeQueue" />의 노드 수입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.IsEmpty">
      <summary vsli:raw="Gets a value that determines whether this &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt; does not contain nodes.">이 <see cref="T:System.Xaml.XamlNodeQueue" />에 노드가 들어 있지 않은지 여부를 결정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt; does not contain nodes; &lt;see langword=&quot;false&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt; contains nodes.">이 <see cref="T:System.Xaml.XamlNodeQueue" />에 노드가 들어 있지 않으면 <see langword="true" />이고, 이 <see cref="T:System.Xaml.XamlNodeQueue" />에 노드가 들어 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Reader">
      <summary vsli:raw="Gets a XAML reader implementation delegate.">XAML 판독기 구현 대리자를 가져옵니다.</summary>
      <returns vsli:raw="A XAML reader implementation delegate.">XAML 판독기 구현 대리자입니다.</returns>
      <exception cref="T:System.Xaml.XamlException" vsli:raw="The XAML writer that is used for the node list has no valid XAML schema context.">노드 목록에 사용되는 XAML 작성기에 유효한 XAML 스키마 컨텍스트가 없습니다.</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Writer">
      <summary vsli:raw="Gets the associated XAML writer.">연관된 XAML 작성기를 가져옵니다.</summary>
      <returns vsli:raw="The associated XAML writer.">연관된 XAML 작성기입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeType">
      <summary vsli:raw="Describes the type of the node that is currently being processed by a XAML reader.">XAML 판독기가 현재 처리 중인 노드의 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndMember">
      <summary vsli:raw="The reader is at the end of a member node.">판독기가 멤버 노드의 맨 끝에 있습니다.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndObject">
      <summary vsli:raw="The reader is at the end of an object node.">판독기가 개체 노드의 맨 끝에 있습니다.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.GetObject">
      <summary vsli:raw="The reader is within an object node and writing a default or implicit value, instead of being a specified object value.">판독기가 개체 노드 내에 있으며, 지정된 개체 값 대신 기본값 또는 암시적인 값을 작성합니다.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.NamespaceDeclaration">
      <summary vsli:raw="The reader is within an XML namespace declaration.">판독기가 XML 네임스페이스 선언 안에 있습니다.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.None">
      <summary vsli:raw="The reader is not positioned at a true node (for example, the reader might be at end-of-file).">판독기가 실제 노드에 있지 않습니다. 예를 들어 판독기가 파일의 끝에 있을 수 있습니다.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartMember">
      <summary vsli:raw="The reader is at the start of a member node.">판독기가 멤버 노드의 맨 처음에 있습니다.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartObject">
      <summary vsli:raw="The reader is at the start of an object node.">판독기가 개체 노드의 맨 처음에 있습니다.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.Value">
      <summary vsli:raw="The reader is within a node and processing a value.">판독기가 노드 안에 있으며 값을 처리하는 중입니다.</summary>
    </member>
    <member name="T:System.Xaml.XamlObjectEventArgs">
      <summary vsli:raw="Provides data for callbacks that can be inserted in the sequence for object initialization and property setting. This influences the object graph that is produced by &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">개체 초기화 및 속성 설정 시퀀스에 삽입할 수 있는 콜백용 데이터를 제공합니다. 그러면 <see cref="T:System.Xaml.XamlObjectWriter" />에서 생성한 개체 그래프에 영향을 줍니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectEventArgs&quot; /&gt; class.">
        <see cref="T:System.Xaml.XamlObjectEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="instance" vsli:raw="The object instance that is relevant to the event data.">이벤트 데이터와 관련된 개체 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.ElementLineNumber">
      <summary vsli:raw="Gets or sets the line number of the relevant object instance.">관련 개체 인스턴스의 줄 번호를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The line number of the element.">요소의 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.ElementLinePosition">
      <summary vsli:raw="Gets or sets the position in the line of the relevant object instance.">관련 개체 인스턴스의 줄 위치를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The position in the line of the element.">요소의 줄 위치입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.Instance">
      <summary vsli:raw="Gets the object instance that is relevant to the event data.">이벤트 데이터와 관련된 개체 인스턴스를 가져옵니다.</summary>
      <returns vsli:raw="The object instance that is relevant to the event data.">이벤트 데이터와 관련된 개체 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.SourceBamlUri">
      <summary vsli:raw="Gets or sets the BAML URI of the relevant object instance.">관련 개체 인스턴스의 BAML URI를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The BAML URI of the relevant object instance.">관련 개체 인스턴스의 BAML URI입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReader">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; implementation that reads object graphs and generates a XAML node stream.">개체 그래프를 읽고 XAML 노드 스트림을 생성하는 <see cref="T:System.Xaml.XamlReader" /> 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; class.">
        <see cref="T:System.Xaml.XamlObjectReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="instance" vsli:raw="The root of the object tree / object graph to read.">읽을 개체 트리/개체 그래프의 루트입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlObjectReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; class with the specified reader settings.">지정된 판독기 설정을 사용하여 <see cref="T:System.Xaml.XamlObjectReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="instance" vsli:raw="The root of the object tree to read.">읽을 개체 트리의 루트입니다.</param>
      <param name="settings" vsli:raw="A settings object.">설정 개체입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; class with the specified schema context.">지정된 스키마 컨텍스트를 사용하여 <see cref="T:System.Xaml.XamlObjectReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="instance" vsli:raw="The root of the object tree to read.">읽을 개체 트리의 루트입니다.</param>
      <param name="schemaContext" vsli:raw="The schema context for the reader to use.">사용할 판독기에 대한 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; class with the specified schema context and reader settings.">지정된 스키마 컨텍스트 및 판독기 설정을 사용하여 <see cref="T:System.Xaml.XamlObjectReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="instance" vsli:raw="The root of the object tree to read.">읽을 개체 트리의 루트입니다.</param>
      <param name="schemaContext" vsli:raw="The schema context for the reader to use.">사용할 판독기에 대한 스키마 컨텍스트입니다.</param>
      <param name="settings" vsli:raw="A settings object.">설정 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Instance">
      <summary vsli:raw="Gets the object instance that is available at the current reader position.">현재 판독기 위치에서 사용할 수 있는 개체 인스턴스를 가져옵니다.</summary>
      <returns vsli:raw="The object instance at the current reader position; or &lt;see langword=&quot;null&quot; /&gt; if the reader position is not on an object.">현재 판독기 위치에 있는 개체 인스턴스이며, 판독기 위치가 개체에 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.IsEof">
      <summary vsli:raw="Gets a value that reports whether the reader position is at the end of the file.">판독기 위치가 파일 끝인지 여부를 보고하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader position is at the end of the file; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">판독기 위치가 파일의 끝이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Member">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; at the reader position, if the reader position is on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt;.">판독기 위치가 <see cref="T:System.Xaml.XamlMember" />에 있는 경우 판독기 위치에서 현재 <see cref="F:System.Xaml.XamlNodeType.StartMember" />를 가져옵니다.</summary>
      <returns vsli:raw="The current member; or &lt;see langword=&quot;null&quot; /&gt; if the reader position is not on a member.">현재 멤버이며, 판독기 위치가 멤버에 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Namespace">
      <summary vsli:raw="Gets the XAML namespace declaration from the current reader position.">현재 판독기 위치에서 XAML 네임스페이스 선언을 가져옵니다.</summary>
      <returns vsli:raw="The XAML namespace declaration if the reader is positioned on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.NamespaceDeclaration&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">판독기가 <see cref="F:System.Xaml.XamlNodeType.NamespaceDeclaration" />에 위치해 있으면 XAML 네임스페이스 선언이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.NodeType">
      <summary vsli:raw="Gets the type of the current node.">현재 노드의 형식을 가져옵니다.</summary>
      <returns vsli:raw="The type of the current node.">현재 노드의 형식입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.Read">
      <summary vsli:raw="Provides the next XAML node from the source object graph, if a node is available.">노드를 사용할 수 있는 경우 소스 개체 그래프에서 다음 XAML 노드를 제공합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a node is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">노드를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.SchemaContext">
      <summary vsli:raw="Gets an object that provides schema information for the information set.">정보 집합에 대한 스키마 정보를 제공하는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that provides schema information for the information set.">정보 집합에 대한 스키마 정보를 제공하는 개체입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Type">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the object at the current reader position.">현재 판독기 위치에 있는 개체의 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the object at the current reader position; or &lt;see langword=&quot;null&quot; /&gt; if the position is not on an object.">현재 판독기 위치에 있는 개체의 <see cref="T:System.Xaml.XamlType" />이며, 위치가 개체에 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Value">
      <summary vsli:raw="Gets the value of the node at the current reader position.">현재 판독기 위치에 노드의 값을 가져옵니다.</summary>
      <returns vsli:raw="The value of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the reader position is not on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.Value&quot; /&gt; node type.">현재 노드의 값이며, 판독기 위치가 <see cref="F:System.Xaml.XamlNodeType.Value" /> 노드 형식에 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderException">
      <summary vsli:raw="The exception that is thrown by several &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; internal helper APIs.">여러 <see cref="T:System.Xaml.XamlObjectReader" /> 내부 도우미 API에서 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReaderException&quot; /&gt; class with a system-supplied message that describes the error.">
        <see cref="T:System.Xaml.XamlObjectReaderException" /> 클래스의 새 인스턴스를 오류를 설명하는 시스템 제공 메시지로 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReaderException&quot; /&gt; class with serialized data.">serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlObjectReaderException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReaderException&quot; /&gt; class with a specified message that describes the error.">
        <see cref="T:System.Xaml.XamlObjectReaderException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReaderException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Xaml.XamlObjectReaderException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderSettings">
      <summary vsli:raw="Specifies processing rules or option settings for a &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlObjectReader" />에 대한 처리 규칙 또는 옵션 설정을 지정합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReaderSettings&quot; /&gt; class.">
        <see cref="T:System.Xaml.XamlObjectReaderSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlObjectReaderSettings.RequireExplicitContentVisibility">
      <summary vsli:raw="Gets or sets a value that determines whether writers that use the associated &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; for context should use designer settings for writing content explicitly.">컨텍스트에 대해 연관된 <see cref="T:System.Xaml.XamlObjectReader" />를 사용하는 작성기가 디자이너 설정을 사용하여 콘텐츠를 명시적으로 작성해야 하는지 여부를 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that writers that use this context should use designer settings for writing any output content in cases where &lt;see cref=&quot;P:System.Xaml.XamlMember.IsWritePublic&quot; /&gt; reports &lt;see langword=&quot;false&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if designer settings should be ignored.">
        <see cref="P:System.Xaml.XamlMember.IsWritePublic" />이 <see langword="true" />를 보고하는 경우에 이 컨텍스트를 사용하는 작성기가 디자이너 설정을 사용하여 출력 콘텐츠를 작성해야 한다는 것을 지정하려면 <see langword="false" />이고, 디자이너 설정을 무시해야 하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectWriter">
      <summary vsli:raw="Creates an object graph from a source XAML node stream.">소스 XAML 노드 스트림에서 개체 그래프를 만듭니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; class using  the XAML schema context that is used by a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlObjectWriter" />에서 사용하는 XAML 스키마 컨텍스트를 사용하여 <see cref="T:System.Xaml.XamlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="schemaContext" vsli:raw="A XAML schema context that is shared with the XAML reader that provides nodes for writing.">쓰기용 노드를 제공하는 XAML 판독기와 공유되는 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; class using the context that is used by a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; and its settings.">
        <see cref="T:System.Xaml.XamlObjectWriter" /> 및 해당 설정에서 사용하는 컨텍스트를 사용하여 <see cref="T:System.Xaml.XamlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="schemaContext" vsli:raw="A XAML schema context that is shared with the XAML reader that provides nodes for writing.">쓰기용 노드를 제공하는 XAML 판독기와 공유되는 XAML 스키마 컨텍스트입니다.</param>
      <param name="settings" vsli:raw="A settings object that specifies certain options for &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; behavior and output.">
        <see cref="T:System.Xaml.XamlObjectWriter" /> 동작 및 출력에 대한 특정 옵션을 지정하는 설정 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Clear">
      <summary vsli:raw="Resets all possible frames and clears the object graph.">가능한 모든 프레임을 다시 설정하고 개체 그래프를 지웁니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;, and optionally, releases the managed resources.">
        <see cref="T:System.Xaml.XamlObjectWriter" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release the managed resources; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">관리되는 리소스를 해제하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
      <summary vsli:raw="Invokes any &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler&quot; /&gt; method that is associated with &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">이 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" />에 대해 <see cref="T:System.Xaml.XamlObjectWriterSettings" />와 연결된 <see cref="T:System.Xaml.XamlObjectWriter" /> 메서드를 호출합니다.</summary>
      <param name="value" vsli:raw="The object to report on. The object is packaged into &lt;see cref=&quot;T:System.Xaml.XamlObjectEventArgs&quot; /&gt; when the handler is invoked.">보고할 개체입니다. 개체는 처리기를 호출할 때 <see cref="T:System.Xaml.XamlObjectEventArgs" />로 패키지됩니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
      <summary vsli:raw="Invokes any &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler&quot; /&gt; method that is associated with &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">이 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" />에 대해 <see cref="T:System.Xaml.XamlObjectWriterSettings" />와 연결된 <see cref="T:System.Xaml.XamlObjectWriter" /> 메서드를 호출합니다.</summary>
      <param name="value" vsli:raw="The object to report on. The value  is packaged into &lt;see cref=&quot;T:System.Xaml.XamlObjectEventArgs&quot; /&gt; when the handler is invoked.">보고할 개체입니다. 값은 처리기를 호출할 때 <see cref="T:System.Xaml.XamlObjectEventArgs" />로 패키지됩니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
      <summary vsli:raw="Invokes any &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler&quot; /&gt; referenced method that is associated with &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">이 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" />에 대해 <see cref="T:System.Xaml.XamlObjectWriterSettings" />와 연결된 <see cref="T:System.Xaml.XamlObjectWriter" /> 참조 메서드를 호출합니다.</summary>
      <param name="value" vsli:raw="The object to report on. This is packaged into &lt;see cref=&quot;T:System.Xaml.XamlObjectEventArgs&quot; /&gt; when the handler is invoked.">보고할 개체입니다. 이것은 처리기가 호출될 때 <see cref="T:System.Xaml.XamlObjectEventArgs" />로 패키지됩니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)">
      <summary vsli:raw="Invokes any &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler&quot; /&gt; referenced method that is associated with &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">이 <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" />에 대해 <see cref="T:System.Xaml.XamlObjectWriterSettings" />와 연결된 <see cref="T:System.Xaml.XamlObjectWriter" /> 참조 메서드를 호출합니다.</summary>
      <param name="value" vsli:raw="The value to pass through &lt;see cref=&quot;T:System.Xaml.XamlObjectEventArgs&quot; /&gt; when the handler is invoked.">처리기가 호출될 때 <see cref="T:System.Xaml.XamlObjectEventArgs" />를 통해 전달될 값입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
      <summary vsli:raw="Invokes any &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler&quot; /&gt; referenced method that is associated with &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; for this writer, as long as &lt;paramref name=&quot;handled&quot; /&gt; in &lt;see cref=&quot;T:System.Windows.Markup.XamlSetValueEventArgs&quot; /&gt; event data is not &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> 이벤트 데이터의 <paramref name="handled" />가 <see langword="true" />가 아니면 이 작성기에 대해 <see cref="T:System.Xaml.XamlObjectWriterSettings" />와 연결된 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 참조 메서드를 호출합니다.</summary>
      <param name="eventSender" vsli:raw="The object to report as the source to the handler.">처리기에 소스로 보고할 개체입니다.</param>
      <param name="member" vsli:raw="The name of the property to set, which is passed to the handler as part of &lt;see cref=&quot;T:System.Windows.Markup.XamlSetValueEventArgs&quot; /&gt;.">설정할 속성의 이름으로, <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />의 일부로 처리기에 전달됩니다.</param>
      <param name="value" vsli:raw="The value to provide for the property that is named by &lt;paramref name=&quot;property&quot; /&gt;. The value is passed to the handler as part of &lt;see cref=&quot;T:System.Windows.Markup.XamlSetValueEventArgs&quot; /&gt;.">
        <paramref name="property" />로 명명된 속성에 대해 제공할 값입니다. 이 값은 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />의 일부로 처리기에 전달됩니다.</param>
      <returns vsli:raw="A Boolean value that is set by any associated handler; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">연결된 처리기에 의해 설정된 부울 값이거나, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.Result">
      <summary vsli:raw="Gets the last object that was written. Typically only called when the node stream is at its end and the object graph is complete.">작성된 마지막 개체를 가져옵니다. 일반적으로 노드 스트림이 마지막에 있고 개체 그래프가 완료된 경우에만 호출됩니다.</summary>
      <returns vsli:raw="The last object written, or &lt;see langword=&quot;null&quot; /&gt;.">작성된 마지막 개체이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.RootNameScope">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.INameScope&quot; /&gt; service that maintains the XAML namescope for the absolute node root of the XAML object writer.">XAML 개체 작성기의 절대 노드 루트에 대해 XAML 이름 범위를 유지하는 <see cref="T:System.Windows.Markup.INameScope" /> 서비스를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Markup.INameScope&quot; /&gt; service that maintains the XAML namescope for the current root of the object writer.">개체 작성기의 현재 루트에 대해 XAML 이름 범위를 유지하는 <see cref="T:System.Windows.Markup.INameScope" /> 서비스입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.SchemaContext">
      <summary vsli:raw="Gets the active XAML schema context.">활성 XAML 스키마 컨텍스트를 가져옵니다.</summary>
      <returns vsli:raw="The XAML schema context.">XAML 스키마 컨텍스트입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
      <summary vsli:raw="Implements &lt;see cref=&quot;M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)&quot; /&gt; and provides line information for exceptions.">
        <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />를 구현하고 예외에 대한 줄 정보를 제공합니다.</summary>
      <param name="lineNumber" vsli:raw="The line number from the reader.">판독기에서의 줄 번호입니다.</param>
      <param name="linePosition" vsli:raw="The line position from the reader.">판독기에서의 줄 위치입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
      <summary vsli:raw="Gets a value that reports whether a line information service should provide values and therefore, should also call the &lt;see cref=&quot;M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)&quot; /&gt; method when it is relevant.">줄 정보 서비스가 값을 제공해야 하는지, 그리고 이에 따라 관련이 있는 경우 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> 메서드도 호출해야 하는지 여부를 보고하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if line information is used by the writer; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">작성기에서 줄 정보가 사용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndMember">
      <summary vsli:raw="Closes the current member scope, and may write the value of the member scope while it closes. The new scope becomes the parent object scope of the member.">현재 멤버 범위를 닫으며, 닫는 동안 멤버 범위의 값을 쓸 수도 있습니다. 새 범위가 멤버의 부모 개체 범위가 됩니다.</summary>
      <exception cref="T:System.Xaml.XamlObjectWriterException" vsli:raw="Failed to create member value from a value node that is encountered between this call and a previous &lt;see langword=&quot;StartMember&quot; /&gt;.">이 호출과 이전 <see langword="StartMember" /> 사이에서 발생하는 값 노드에서 멤버 값을 만들지 못했습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndObject">
      <summary vsli:raw="Closes the current object scope in the writer. The new object scope becomes the parent member scope.">작성기에서 현재 개체 범위를 닫습니다. 새 개체 범위가 부모 멤버 범위가 됩니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteGetObject">
      <summary vsli:raw="Writes the conceptual &lt;see langword=&quot;StartObject&quot; /&gt; into the object graph when the specified object is a default or implicit value of the parent property. The implicit value comes from information that is obtained from the XAML schema context and backing type information, instead of being specified as an object value in the input XAML node set.">지정된 개체가 기본값이거나 부모 속성의 암시적인 값인 경우에 개념 <see langword="StartObject" />를 개체 그래프에 씁니다. 암시적 값은 입력 XAML 노드 집합에서 개체 값으로 지정되는 것이 아니라 XAML 스키마 컨텍스트에서 가져온 정보 및 지원 형식 정보에서 가져옵니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary vsli:raw="Defines a namespace declaration that applies to the next object scope or member scope.">다음 개체 범위 또는 멤버 범위에 적용되는 네임스페이스 선언을 정의합니다.</summary>
      <param name="namespaceDeclaration" vsli:raw="The namespace declaration to write.">작성할 네임스페이스 선언입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;namespaceDeclaration&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="namespaceDeclaration" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A component of &lt;paramref name=&quot;namespaceDeclaration&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="namespaceDeclaration" />의 구성 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Xaml.XamlObjectReaderException" vsli:raw="Tried to write a XAML namespace node in an invalid scope.">잘못된 범위에서 XAML 네임스페이스 노드를 쓰려고 했습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary vsli:raw="Writes a new member node into the current object scope, and the scope becomes a new member scope.">새 멤버 노드를 현재 개체 범위에 작성하고, 이 범위가 새 멤버 범위가 됩니다.</summary>
      <param name="property" vsli:raw="The XAML property to write. Typically you obtain this value from a XAML reader through the XAML node stream intermediate.">작성할 XAML 속성입니다. 일반적으로 이 값은 XAML 노드 스트림의 중간 요소를 통해 XAML 판독기에서 가져옵니다.</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; has &lt;see cref=&quot;P:System.Xaml.XamlMember.IsUnknown&quot; /&gt; set to &lt;see langword=&quot;true&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see cref=&quot;P:System.Xaml.XamlLanguage.UnknownContent&quot; /&gt; passed, which indicates that the XAML node stream contained content for an object that does not support content.  &#xA;  &#xA; -or-  &#xA;  &#xA; Attempted to write a start member in an invalid scope.">
        <paramref name="property" />에서 <see cref="P:System.Xaml.XamlMember.IsUnknown" />을 <see langword="true" />로 설정한 경우  
또는 
 <see cref="P:System.Xaml.XamlLanguage.UnknownContent" />가 통과되었으며, XAML 노드 스트림에 콘텐츠를 지원하지 않는 개체의 콘텐츠가 포함된 것을 나타냅니다.  
또는 
잘못된 범위에서 시작 멤버를 쓰려고 했습니다.</exception>
      <exception cref="T:System.Xaml.XamlDuplicateMemberException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; specifies a property that is already explicitly set in the parent object scope.">
        <paramref name="property" />는 이미 부모 개체 범위에 명시적으로 설정된 속성을 지정합니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="property" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary vsli:raw="Writes an object node into the current scope, and sets the scope to a new object scope.">개체 노드를 현재 범위에 작성하고, 이 범위를 새 개체 범위로 설정합니다.</summary>
      <param name="xamlType" vsli:raw="The type to write. Typically you obtain this value from a XAML reader.">작성할 형식입니다. 일반적으로 XAML 판독기에서 이 값을 가져옵니다.</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException" vsli:raw="Processing an &lt;see cref=&quot;P:System.Xaml.XamlType.IsUnknown&quot; /&gt; type and cannot create an object.  &#xA;  &#xA; -or-  &#xA;  &#xA; Attempted to write a start object in an invalid scope.">
        <see cref="P:System.Xaml.XamlType.IsUnknown" /> 형식을 처리하는 중이며 개체를 만들 수 없습니다.  
또는 
잘못된 범위에서 시작 개체를 쓰려고 했습니다.</exception>
      <exception cref="T:System.Xaml.XamlParseException" vsli:raw="Attempted to write a root object when the root object was already provided in the settings.">루트 개체가 설정에 이미 제공된 경우 루트 개체를 쓰려고 했습니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
      <summary vsli:raw="Writes a value to the current member scope. If the current scope is inside a collection, dictionary, or array object, the value should be added to the collection, dictionary, or array.">현재 멤버 범위에 값을 씁니다. 현재 범위가 컬렉션, 사전 또는 배열 개체 내에 있으면 값이 컬렉션, 사전 또는 배열에 추가되어야 합니다.</summary>
      <param name="value" vsli:raw="The value to write.">작성할 값입니다.</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException" vsli:raw="Attempted to write a value in an invalid scope.">잘못된 범위에서 값을 쓰려고 했습니다.</exception>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterException">
      <summary vsli:raw="The exception that is thrown when a XAML writer (such as the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; class) encounters an error while attempting to produce object graphs from a XAML node stream.">
        <see cref="T:System.Xaml.XamlObjectWriter" /> 클래스와 같은 XAML 작성기가 XAML 노드 스트림에서 개체 그래프를 만들려고 할 때 오류가 발생하는 경우 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterException&quot; /&gt; class with a system-supplied message that describes the error.">오류를 설명하는 시스템 제공 메시지를 사용하여 <see cref="T:System.Xaml.XamlObjectWriterException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterException&quot; /&gt; class with serialized data.">serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlObjectWriterException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterException&quot; /&gt; class with a specified message that describes the error.">
        <see cref="T:System.Xaml.XamlObjectWriterException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Xaml.XamlObjectWriterException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterSettings">
      <summary vsli:raw="Provides specific XAML writer settings for &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlObjectWriter" />에 대한 특정 XAML 작성기 설정을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; class.">
        <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor(System.Xaml.XamlObjectWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; class that is based on the copy of an existing instance.">기존 인스턴스의 복사본을 기반으로 하는 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="settings" vsli:raw="The settings instance to copy.">복사할 설정 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;settings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="settings" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AccessLevel">
      <summary vsli:raw="Gets or sets &lt;see cref=&quot;T:System.Xaml.Permissions.XamlAccessLevel&quot; /&gt; permissions that the XAML writer observes.">XAML 작성기가 준수하는 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 권한을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Permissions.XamlAccessLevel&quot; /&gt; permissions.">
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 권한입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler">
      <summary vsli:raw="Gets or sets a reference to a callback that is invoked by the XAML writer at the &lt;see cref=&quot;M:System.ComponentModel.ISupportInitialize.BeginInit&quot; /&gt; phase of the object lifetime for each created object.">생성된 각 개체에 대해 개체 수명의 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> 단계에서 XAML 작성기가 호출하는 콜백에 대한 참조를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A callback that is invoked by the XAML writer at the &lt;see cref=&quot;M:System.ComponentModel.ISupportInitialize.BeginInit&quot; /&gt; phase of object lifetime.">개체 수명의 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> 단계에서 XAML 작성기가 호출하는 콜백입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler">
      <summary vsli:raw="Gets or sets a reference to a callback that is invoked by the XAML writer at the &lt;see cref=&quot;M:System.ComponentModel.ISupportInitialize.EndInit&quot; /&gt; phase of the object lifetime for each created object.">생성된 각 개체에 대해 개체 수명의 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> 단계에서 XAML 작성기가 호출하는 콜백에 대한 참조를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A callback that is invoked by the XAML writer at the &lt;see cref=&quot;M:System.ComponentModel.ISupportInitialize.EndInit&quot; /&gt; phase of object lifetime.">개체 수명의 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> 단계에서 XAML 작성기가 호출하는 콜백입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler">
      <summary vsli:raw="Gets or sets a reference to a callback that is invoked by the XAML writer at the post-member-write phase of the object lifetime for each created object.">생성된 각 개체에 대해 개체 수명의 post-member-write 단계에서 XAML 작성기가 호출하는 콜백에 대한 참조를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A callback that is invoked by the XAML writer at the post-member-write phase of object lifetime.">개체 수명의 post-member-write 단계에서 XAML 작성기가 호출하는 콜백입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler">
      <summary vsli:raw="Gets or sets a reference to a callback that is invoked by the XAML writer at the pre-member-write phase of the object lifetime for each created object.">생성된 각 개체에 대해 개체 수명의 pre-member-write 단계에서 XAML 작성기가 호출하는 콜백에 대한 참조를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A callback that is invoked by the XAML writer at the pre-member-write phase of object lifetime.">개체 수명의 pre-member-write 단계에서 XAML 작성기가 호출하는 콜백입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope">
      <summary vsli:raw="Gets or sets the XAML namescope to use for registering names from the XAML writer if &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope" />가 <see langword="true" />일 경우 등록 중인 이름에 사용할 XAML 네임스페이스를 XAML 작성기에서 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The XAML namescope to use for registering names. The default is &lt;see langword=&quot;null&quot; /&gt;.">이름을 등록할 때 사용할 XAML 네임스페이스입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.IgnoreCanConvert">
      <summary vsli:raw="Gets or sets a value that specifies whether the XAML writer should ignore (not call) &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)&quot; /&gt; implementations on a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; in type-converter situations.">형식 변환기 상황에서 <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />에 대해 XAML 작성기가 <see cref="T:System.ComponentModel.TypeConverter" />을 무시하고 호출하지 않아야 하는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the XAML writer ignores &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)&quot; /&gt; implementations; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">XAML 작성기가 <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> 구현을 무시하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.PreferUnconvertedDictionaryKeys">
      <summary vsli:raw="Gets or sets a value that determines whether to disable a default &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; feature that runs type conversion on the &lt;paramref name=&quot;K&quot; /&gt; component of a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; before writing the object graph representation.">개체 그래프 표현을 쓰기 전에 <see cref="T:System.Xaml.XamlObjectWriter" />의 <paramref name="K" /> 구성 요소에서 형식 변환을 실행하는 기본 <see cref="T:System.Collections.Generic.Dictionary`2" /> 기능을 해제할지 여부를 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;K&quot; /&gt; type conversion for a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; object should be disabled. &lt;see langword=&quot;false&quot; /&gt; if performing &lt;paramref name=&quot;K&quot; /&gt; type conversion for a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; object applies. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 개체에 대한 <paramref name="K" /> 형식 변환을 사용하지 않도록 설정해야 하면 <see langword="true" />이고, <see cref="T:System.Collections.Generic.Dictionary`2" /> 개체에 대한 <paramref name="K" /> 형식 변환이 적용되면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope">
      <summary vsli:raw="Gets or sets a value that determines whether name registration should occur against the specified &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope&quot; /&gt;.">지정된 <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />에 대해 이름 등록이 수행되어야 하는지 여부를 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if name registration should occur against the &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if name registration should occur into the parent XAML namescope. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />에 대해 이름 등록이 수행되어야 하면 <see langword="true" />이고, 부모 XAML 이름 범위에 이름 등록이 수행되어야 하면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RootObjectInstance">
      <summary vsli:raw="Gets or sets a preexisting root object for &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; operations.">
        <see cref="T:System.Xaml.XamlObjectWriter" /> 작업에 대한 기존 루트 개체를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A preexisting root object for &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; operations.">
        <see cref="T:System.Xaml.XamlObjectWriter" /> 작업에 대한 기존 루트 개체입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipDuplicatePropertyCheck">
      <summary vsli:raw="Gets or sets a value that determines whether the XAML writer omits to check for the code path that checks for duplicate properties.">중복 속성을 검사하는 코드 경로 확인을 XAML 작성기에서 생략할지 여부를 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the duplicate property check should be omitted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">중복 속성 검사를 생략해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipProvideValueOnRoot">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; should omit to call &lt;see langword=&quot;ProvideValue&quot; /&gt; on a markup extension, which is relevant when the markup extension represents the root of an object graph.">
        <see cref="T:System.Xaml.XamlObjectWriter" />가 태그 확장 시 <see langword="ProvideValue" /> 호출을 생략해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다. 이 호출은 태그 확장이 개체 그래프의 루트를 나타내는 경우와 관련이 있습니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; should omit to call &lt;see langword=&quot;ProvideValue&quot; /&gt; on a markup extension; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlObjectWriter" />가 태그 확장 시 <see langword="true" /> 호출을 생략해야 하면 <see langword="ProvideValue" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SourceBamlUri">
      <summary vsli:raw="Used in the &lt;see langword=&quot;BeginInitHandler&quot; /&gt; in place of the actual &lt;see langword=&quot;BaseUri&quot; /&gt;.">실제 <see langword="BaseUri" /> 대신 <see langword="BeginInitHandler" />에서 사용합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Uri&quot; /&gt; to be used in place of the actual &lt;see langword=&quot;BaseUri&quot; /&gt;.">실제 <see langword="BaseUri" /> 대신 사용할 <see cref="T:System.Uri" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler">
      <summary vsli:raw="Gets or sets the handler to use when the object writer calls into a CLR-implemented &lt;see langword=&quot;SetValue&quot; /&gt; for dependency properties.">개체 작성기가 종속성 속성에 대해 CLR 구현된 <see langword="SetValue" />를 호출할 때 사용할 처리기를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A handler implementation that handles this case.">이 경우를 처리하는 처리기 구현입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlParseException">
      <summary vsli:raw="The exception that is thrown when a XAML reader cannot process elements of the XAML reader source into a XAML node stream.">XAML 판독기가 XAML 판독기 소스의 요소를 XAML 노드 스트림 안으로 처리할 수 없는 경우 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlParseException&quot; /&gt; class with a system-supplied message that describes the error.">오류를 설명하는 시스템 제공 메시지를 사용하여 <see cref="T:System.Xaml.XamlParseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlParseException&quot; /&gt; class with serialized data.">serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlParseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlParseException&quot; /&gt; class with a specified message that describes the error.">
        <see cref="T:System.Xaml.XamlParseException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlParseException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Xaml.XamlParseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Xaml.XamlReader">
      <summary vsli:raw="Provides base definitions for classes that consume XAML input and produce XAML node streams.">XAML 입력을 소비하고 XAML 노드 스트림을 만드는 클래스에 대한 기본 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.#ctor">
      <summary vsli:raw="Initializes the &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; class.">
        <see cref="T:System.Xaml.XamlReader" /> 클래스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Close">
      <summary vsli:raw="Closes the XAML node stream.">XAML 노드 스트림을 닫습니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;, and optionally, releases the managed resources.">
        <see cref="T:System.Xaml.XamlReader" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release the managed resources; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">관리되는 리소스를 해제하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlReader.IsDisposed">
      <summary vsli:raw="Gets whether &lt;see cref=&quot;M:System.Xaml.XamlReader.Dispose(System.Boolean)&quot; /&gt; has been called.">
        <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />가 호출되었는지 여부를 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Xaml.XamlReader.Dispose(System.Boolean)&quot; /&gt; has been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />가 호출되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.IsEof">
      <summary vsli:raw="When implemented in a derived class, gets a value that reports whether the reader position is at end-of-file.">파생 클래스에서 구현되는 경우 판독기 위치가 파일의 끝에 있는지 여부를 보고하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the position is at the conceptual end-of-file of the XAML node stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">위치가 XAML 노드 스트림의 개념상 파일 끝에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Member">
      <summary vsli:raw="When implemented in a derived class, gets the current member at the reader position, if the reader position is on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt;.">파생 클래스에서 구현되는 경우 판독기 위치가 <see cref="F:System.Xaml.XamlNodeType.StartMember" />에 있으면 판독기 위치에 있는 현재 멤버를 가져옵니다.</summary>
      <returns vsli:raw="The current member; or &lt;see langword=&quot;null&quot; /&gt;, if the reader position is not on a member.">현재 멤버이며, 판독기 위치가 멤버에 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Namespace">
      <summary vsli:raw="When implemented in a derived class, gets the XAML namespace information from the current node.">파생 클래스에서 구현된 경우 현재 노드에서 XAML 네임스페이스 정보를 가져옵니다.</summary>
      <returns vsli:raw="The XAML namespace information, if it is available; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">사용할 수 있으면 XAML 네임스페이스 정보이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.NodeType">
      <summary vsli:raw="When implemented in a derived class, gets the type of the current node.">파생 클래스에서 구현되는 경우 현재 노드의 형식을 가져옵니다.</summary>
      <returns vsli:raw="A value of the &lt;see cref=&quot;T:System.Xaml.XamlNodeType&quot; /&gt; enumeration.">
        <see cref="T:System.Xaml.XamlNodeType" /> 열거형의 값입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Read">
      <summary vsli:raw="When implemented in a derived class, provides the next XAML node from the source, if a node is available.">파생 클래스에서 구현될 때 노드를 사용할 수 있는 경우 소스에서 다음 XAML 노드를 제공합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a node is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">노드를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.ReadSubtree">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; that is based on the current &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;, where the returned &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; is used to iterate through a subtree of the XAML node structure.">현재 <see cref="T:System.Xaml.XamlReader" />를 기반으로 하는 <see cref="T:System.Xaml.XamlReader" />를 반환합니다. 반환된 <see cref="T:System.Xaml.XamlReader" />는 XAML 노드 구조의 하위 트리에서 반복하는 데 사용됩니다.</summary>
      <returns vsli:raw="A new XAML reader instance for the subtree.">하위 트리의 새 XAML 판독기 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.SchemaContext">
      <summary vsli:raw="When implemented in a derived class, gets an object that provides XAML schema context information for the information set.">파생 클래스에서 구현된 경우 정보 집합에 대한 XAML 스키마 컨텍스트 정보를 제공하는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that provides XAML schema context information for the information set.">정보 집합에 대한 XAML 스키마 컨텍스트 정보를 제공하는 개체입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Skip">
      <summary vsli:raw="Skips the current node and advances the reader position to the next node.">현재 노드를 건너뛰고 판독기 위치를 다음 노드로 이동합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the current instance of the &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; class.">
        <see cref="T:System.Xaml.XamlReader" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlReader.Type">
      <summary vsli:raw="When implemented in a derived class, gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node.">파생 클래스에서 구현된 경우 현재 노드의 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the current reader position is not on an object.">현재 노드의 <see cref="T:System.Xaml.XamlType" />이거나, 현재 판독기 위치가 개체에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Value">
      <summary vsli:raw="When implemented in a derived class, gets the value of the current node.">파생 클래스에서 구현되는 경우 현재 노드의 값을 가져옵니다.</summary>
      <returns vsli:raw="The value of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the current reader position is not on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.Value&quot; /&gt; node type.">현재 노드의 값이거나, 현재 판독기 위치가 <see cref="F:System.Xaml.XamlNodeType.Value" /> 노드 형식에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlReaderSettings">
      <summary vsli:raw="Specifies processing rules or option settings for a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; implementation.">
        <see cref="T:System.Xaml.XamlReader" /> 구현에 대한 처리 규칙 또는 옵션 설정을 지정합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlReaderSettings&quot; /&gt; class.">
        <see cref="T:System.Xaml.XamlReaderSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor(System.Xaml.XamlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlReaderSettings&quot; /&gt; class based on values in another &lt;see cref=&quot;T:System.Xaml.XamlReaderSettings&quot; /&gt; object.">다른 <see cref="T:System.Xaml.XamlReaderSettings" /> 개체의 값을 기준으로 <see cref="T:System.Xaml.XamlReaderSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="settings" vsli:raw="An existing &lt;see cref=&quot;T:System.Xaml.XamlReaderSettings&quot; /&gt; object.">기존 <see cref="T:System.Xaml.XamlReaderSettings" /> 개체입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.AllowProtectedMembersOnRoot">
      <summary vsli:raw="Gets or sets a value that indicates whether the root object may include members that have a protected code access model when it reports the XAML type representation.">XAML 형식 표현을 보고할 때 보호되는 코드 액세스 모델이 있는 멤버가 루트 개체에 포함될 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the root object may include members that have a protected code access model; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">보호되는 코드 액세스 모델이 있는 멤버가 루트 개체에 포함될 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.BaseUri">
      <summary vsli:raw="Gets or sets the base URI that is used to resolve relative paths.">상대 경로를 확인하는 데 사용되는 기본 URI를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The base URI to use. The default is &lt;see langword=&quot;null&quot; /&gt;.">사용할 기본 URI입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.IgnoreUidsOnPropertyElements">
      <summary vsli:raw="Gets or sets a value that specifies whether the XAML reader should ignore values for &lt;see langword=&quot;x:Uid&quot; /&gt; attributes that exist on property elements.">속성 요소에 있는 <see langword="x:Uid" /> 특성의 값을 XAML 판독기가 무시해야 하는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader should ignore values for &lt;see langword=&quot;x:Uid&quot; /&gt; attributes on property elements. &lt;see langword=&quot;false&quot; /&gt; if the reader should process &lt;see langword=&quot;x:Uid&quot; /&gt; attributes on property elements. The default is &lt;see langword=&quot;false&quot; /&gt;.">판독기가 속성 요소에서 <see langword="true" /> 특성에 대한 값을 무시해야 하면 <see langword="x:Uid" />이고, 판독기가 속성 요소에서 <see langword="false" /> 특성을 처리해야 하면 <see langword="x:Uid" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.LocalAssembly">
      <summary vsli:raw="Gets or sets the object that represents the current local assembly for processing. This assembly information is used for calls to helper APIs such as &lt;see cref=&quot;M:System.Xaml.XamlType.GetAllMembers&quot; /&gt;.">처리할 현재 로컬 어셈블리를 나타내는 개체를 가져오거나 설정합니다. 이 어셈블리 정보는 <see cref="M:System.Xaml.XamlType.GetAllMembers" /> 같은 도우미 API를 호출하는 데 사용됩니다.</summary>
      <returns vsli:raw="A CLR reflection &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; object.">CLR 리플렉션 <see cref="T:System.Reflection.Assembly" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ProvideLineInfo">
      <summary vsli:raw="Gets or sets a value that specifies whether the reader can provide line number and position.">판독기가 줄 번호 및 위치를 제공할 수 있는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader can provide line number and position information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">판독기가 줄 번호 및 위치 정보를 제공할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ValuesMustBeString">
      <summary vsli:raw="Gets or sets a value that specifies whether the reader enforces that all &lt;see langword=&quot;Value&quot; /&gt; nodes are processed as a &lt;see langword=&quot;String&quot; /&gt; type.">판독기에서 모든 <see langword="Value" /> 노드가 <see langword="String" /> 형식으로 처리되도록 해야 하는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader enforces that only &lt;see langword=&quot;String&quot; /&gt; is contained in &lt;see langword=&quot;Value&quot; /&gt; nodes; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">판독기가 <see langword="true" /> 노드에 <see langword="String" />만 포함하도록 하면 <see langword="Value" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaContext">
      <summary vsli:raw="Defines a reusable context for interpreting or mapping XAML types, and the types in the assemblies that underlie them.">XAML 형식 그리고 XAML 형식의 기반이 되는 어셈블리에 있는 형식을 해석하거나 매핑하기 위한 다시 사용할 수 있는 컨텍스트를 정의합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; class.">
        <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; class, based on a set of reference assemblies.">참조 어셈블리 집합을 기반으로 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="referenceAssemblies" vsli:raw="An enumerable set of assembly information items. Each assembly information item is specified by an &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; value.">어셈블리 정보 항목의 열거 가능한 집합입니다. 각 어셈블리 정보 항목은 <see cref="T:System.Reflection.Assembly" /> 값으로 지정됩니다.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; class, based on a set of reference assemblies and a settings object.">참조 어셈블리 집합 및 설정 개체를 기반으로 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="referenceAssemblies" vsli:raw="An enumerable set of assembly information. Each assembly information item is specified by an &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; value.">어셈블리 정보의 열거 가능한 집합입니다. 각 어셈블리 정보 항목은 <see cref="T:System.Reflection.Assembly" /> 값으로 지정됩니다.</param>
      <param name="settings" vsli:raw="The settings object to use to construct the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlSchemaContext" />를 생성하는 데 사용할 설정 개체입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; class, based on a settings object.">설정 개체를 기반으로 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="settings" vsli:raw="The settings object to use to construct the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlSchemaContext" />를 생성하는 데 사용할 설정 개체입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.Finalize">
      <summary vsli:raw="Provides a nonstandard &lt;see langword=&quot;Finalize&quot; /&gt; implementation that does not invoke &lt;see langword=&quot;Dispose&quot; /&gt;.">
        <see langword="Finalize" />를 호출하지 않는 비표준 <see langword="Dispose" /> 구현을 제공합니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary vsli:raw="Gets a value that specifies whether a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup API.">XAML 스키마와 해당 컨텍스트가 조회 API에 의해 반환된 값에서 정규화된 어셈블리 이름을 사용하는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup APIs; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">XAML 스키마와 해당 컨텍스트가 조회 API에 의해 반환된 값에서 정규화된 어셈블리 이름을 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces">
      <summary vsli:raw="Searches the assemblies that are held by this &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; and returns a set of namespaces.">이 <see cref="T:System.Xaml.XamlSchemaContext" />에 들어 있는 어셈블리를 검색하고 네임스페이스 집합을 반환합니다.</summary>
      <returns vsli:raw="An enumerable set of namespace identifiers. These identifiers are provided as strings.">열거 가능한 네임스페이스 식별자 집합입니다. 이러한 식별자는 문자열로 제공됩니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)">
      <summary vsli:raw="Searches the assemblies that are held by this &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; and returns a set of types from the specified XAML namespace.">이 <see cref="T:System.Xaml.XamlSchemaContext" />에 들어 있는 어셈블리를 검색하고 지정된 XAML 네임스페이스에서 형식 집합을 반환합니다.</summary>
      <param name="xamlNamespace" vsli:raw="The XAML namespace to return types for.">형식을 반환할 XAML 네임스페이스입니다.</param>
      <returns vsli:raw="An enumerable set of XAML types. Each XAML type in the set is represented by a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object.">XAML 형식의 열거 가능한 집합입니다. 집합의 각 XAML 형식은 <see cref="T:System.Xaml.XamlType" /> 개체로 나타냅니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
      <summary vsli:raw="Gets a string that is reported as the preferred prefix for consumers to use when they map the specified XAML namespace.">지정된 XAML 네임스페이스를 매핑할 때 소비자가 사용할 기본 접두사로 보고되는 문자열을 가져옵니다.</summary>
      <param name="xmlns" vsli:raw="The XAML namespace to get the preferred prefix for.">기본 접두어를 가져올 XAML 네임스페이스입니다.</param>
      <returns vsli:raw="A string that consumers should use when they map the specified XAML namespace for markup use.">태그 사용을 위해 지정된 XAML 네임스페이스를 매핑할 때 소비자가 사용해야 하는 문자열입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlns&quot; /&gt; is null.">
        <paramref name="xmlns" />가 null입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)">
      <summary vsli:raw="Returns a value converter that can convert to the requested &lt;paramref name=&quot;targetType&quot; /&gt;.">요청된 <paramref name="targetType" />으로 변환될 수 있는 값 변환기를 반환합니다.</summary>
      <param name="converterType" vsli:raw="The converter implementation.">변환기 구현입니다.</param>
      <param name="targetType" vsli:raw="The desired destination type for the converter.">변환기의 원하는 대상 형식입니다.</param>
      <typeparam name="TConverterBase" vsli:raw="The specific converter base class.">특정 변환기 기본 클래스입니다.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with a constraint that matches the constraint that is put on the method call.">메서드 호출에 배치된 제약 조건과 일치하는 제약 조건이 있는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; value that represents a directive, either for the XAML language or for a particular implementation.">XAML 언어 또는 특정 구현을 위한 지시문을 나타내는 <see cref="T:System.Xaml.XamlDirective" /> 값을 반환합니다.</summary>
      <param name="xamlNamespace" vsli:raw="The XAML namespace that contains the named directive.">명명된 지시문이 들어 있는 XAML 네임스페이스입니다.</param>
      <param name="name" vsli:raw="The name of the directive to obtain.">가져올 지시문의 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; object that represents the requested directive.">요청된 지시문을 나타내는 <see cref="T:System.Xaml.XamlDirective" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlNamespace&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlNamespace" /> 또는 <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that is based on a XAML namespace and a string for the type name. This signature can specify the type arguments for cases where the desired type is a generic type.">XAML 네임스페이스와 형식 이름의 문자열을 기반으로 하는 <see cref="T:System.Xaml.XamlType" />을 반환합니다. 이 시그니처는 원하는 형식이 제네릭 형식인 경우 형식 인수를 지정할 수 있습니다.</summary>
      <param name="xamlNamespace" vsli:raw="The XAML namespace that contains the desired type.">원하는 형식을 포함하는 XAML 네임스페이스입니다.</param>
      <param name="name" vsli:raw="The string name of the desired type.">원하는 형식의 문자열 이름입니다.</param>
      <param name="typeArguments" vsli:raw="The initialization type arguments for a generic type.">제네릭 형식에 대한 초기화 형식 인수입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that matches the input criteria.">입력 조건과 일치하는 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that is based on a CLR type identifier.">CLR 형식 식별자를 기반으로 하는 <see cref="T:System.Xaml.XamlType" />을 반환합니다.</summary>
      <param name="type" vsli:raw="The type to get a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for.">
        <see cref="T:System.Xaml.XamlType" />을 가져올 형식입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that matches the input &lt;paramref name=&quot;type&quot; /&gt;.">입력 <paramref name="type" />과 일치하는 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that is based on a XAML system type name.">XAML 시스템 형식 이름을 기반으로 하는 <see cref="T:System.Xaml.XamlType" />을 반환합니다.</summary>
      <param name="xamlTypeName" vsli:raw="The XAML type name to get a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for.">
        <see cref="T:System.Xaml.XamlType" />을 가져올 XAML 형식 이름입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that matches the input &lt;paramref name=&quot;xamlTypeName&quot; /&gt;.">입력 <paramref name="xamlTypeName" />과 일치하는 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A component of &lt;paramref name=&quot;xamlTypeName&quot; /&gt; (&lt;see cref=&quot;P:System.Xaml.Schema.XamlTypeName.Name&quot; /&gt; or &lt;see cref=&quot;P:System.Xaml.Schema.XamlTypeName.Namespace&quot; /&gt;) is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlTypeName" />(<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> 또는 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />)의 구성 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlTypeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlTypeName" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)">
      <summary vsli:raw="Called when operations use this schema context to resolve an assembly that is required in order to resolve the XAML namespaces that it contains.">포함되어 있는 XAML 네임스페이스를 확인하기 위해 작업이 이 스키마 컨텍스트를 사용하여 어셈블리를 확인할 때 호출됩니다.</summary>
      <param name="assemblyName" vsli:raw="The name of the assembly to load.">로드할 어셈블리의 이름입니다.</param>
      <returns vsli:raw="The resolved assembly.">확인된 어셈블리입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.ReferenceAssemblies">
      <summary vsli:raw="Gets an enumerable set of reference assemblies for the XAML schema context.">XAML 스키마 컨텍스트에 대한 열거 가능한 참조 어셈블리 집합을 가져옵니다.</summary>
      <returns vsli:raw="An enumerable set of reference assemblies for the schema context. Each assembly information item is specified by an &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; value.">스키마 컨텍스트에 대한 열거 가능한 참조 어셈블리 집합입니다. 각 어셈블리 정보 항목은 <see cref="T:System.Reflection.Assembly" /> 값으로 지정됩니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
      <summary vsli:raw="Gets a value that specifies whether a XAML schema and its context support markup extensions that have two constructors with the same arity (number of input parameters).">XAML 스키마 및 해당 컨텍스트에서 같은 인자 수(입력 매개 변수 수)를 갖는 두 생성자를 가지는 태그 확장이 지원되는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the schema context permits markup extensions that have duplicate arity; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">스키마 컨텍스트에서 중복된 인자 수를 갖는 태그 확장이 허용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
      <summary vsli:raw="Returns the success or failure of a request for a compatible XAML namespace. A successful request reports that XAML namespace as an out parameter.">호환되는 XAML 네임스페이스 요청에 대해 성공 또는 실패를 반환합니다. 요청 성공 시에는 XAML 네임스페이스를 out 매개 변수로 보고합니다.</summary>
      <param name="xamlNamespace" vsli:raw="The &lt;see langword=&quot;xmlns&quot; /&gt; string for the XAML namespace to be checked for a compatible result.">호환되는 결과에 대해 확인할 XAML 네임스페이스의 <see langword="xmlns" /> 문자열입니다.</param>
      <param name="compatibleNamespace" vsli:raw="When this method returns, the &lt;see langword=&quot;xmlns&quot; /&gt; string for a compatible XAML namespace request. This might be identical to &lt;paramref name=&quot;xamlNamespace&quot; /&gt; if the method returns &lt;see langword=&quot;false&quot; /&gt;.">이 메서드가 반환할 경우 호환되는 XAML 네임스페이스 요청에 대한 <see langword="xmlns" /> 문자열입니다. 메서드가 <see langword="false" />를 반환할 경우에는 <paramref name="xamlNamespace" />와 동일할 수 있습니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;compatibleNamespace&quot; /&gt; contains a usable result; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="compatibleNamespace" />에 사용 가능한 결과가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlNamespace" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.Xaml.XamlSchemaContextSettings">
      <summary vsli:raw="Provides optional settings for a &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlSchemaContext" />에 대한 선택적 설정을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContextSettings&quot; /&gt; class.">
        <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContextSettings&quot; /&gt; class by copying the values of an existing &lt;see cref=&quot;T:System.Xaml.XamlSchemaContextSettings&quot; /&gt; instance.">기존 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 인스턴스의 값을 복사하여 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="settings" vsli:raw="An existing &lt;see cref=&quot;T:System.Xaml.XamlSchemaContextSettings&quot; /&gt;.">기존 <see cref="T:System.Xaml.XamlSchemaContextSettings" />입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary vsli:raw="Gets or sets a value that specifies whether a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup API.">XAML 스키마와 해당 컨텍스트가 조회 API에 의해 반환된 값에서 정규화된 어셈블리 이름을 사용하는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup APIs; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">XAML 스키마와 해당 컨텍스트가 조회 API에 의해 반환된 값에서 정규화된 어셈블리 이름을 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity">
      <summary vsli:raw="Gets or sets a value that specifies whether a XAML schema context allows for markup extensions that have two constructors with the same arity (number of input parameters).">XAML 스키마 컨텍스트에서 같은 인자 수(입력 매개 변수 수)를 갖는 두 생성자를 가지는 태그 확장을 허용하는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the schema context allows for markup extensions that have duplicate arity; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">스키마 컨텍스트에서 입력 매개 변수 수가 같은 생성자가 있는 태그 확장이 허용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaException">
      <summary vsli:raw="The exception that is thrown when a binding system or another schema representation system for XAML reports an exception to the schema context.">XAML 보고서의 바인딩 시스템이나 다른 스키마 표현 시스템이 스키마 컨텍스트에 대한 예외를 보고할 때 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaException&quot; /&gt; class with a system-supplied message that describes the error.">오류를 설명하는 시스템 제공 메시지를 사용하여 <see cref="T:System.Xaml.XamlSchemaException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaException&quot; /&gt; class with serialized data.">serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlSchemaException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaException&quot; /&gt; class with a specified message that describes the error.">
        <see cref="T:System.Xaml.XamlSchemaException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Xaml.XamlSchemaException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Xaml.XamlServices">
      <summary vsli:raw="Provides higher-level services (static methods) for the common XAML tasks of reading XAML and writing an object graph; or reading an object graph and writing XAML file output for serialization purposes.">serialization 목적을 위해 XAML을 읽고 개체 그래프를 작성하거나 개체 그래프를 읽고 XAML 파일 출력을 작성하는 일반적인 XAML 작업에 대한 보다 높은 수준의 서비스(정적 메서드)를 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
      <summary vsli:raw="Loads a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; source for a XAML reader and writes its output as an object graph.">XAML 판독기의 <see cref="T:System.IO.Stream" /> 소스를 로드하고 출력을 개체 그래프로 기록합니다.</summary>
      <param name="stream" vsli:raw="The stream to load as input.">입력으로 로드할 스트림입니다.</param>
      <returns vsli:raw="The object graph that is written as output.">출력으로 기록되는 개체 그래프입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.TextReader)">
      <summary vsli:raw="Creates a XAML reader from a &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;, and returns an object graph.">
        <see cref="T:System.IO.TextReader" />에서 XAML 판독기를 만들고 개체 그래프를 반환합니다.</summary>
      <param name="textReader" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; to use as the basis for the created &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">생성된 <see cref="T:System.IO.TextReader" />에 대한 기반으로 사용할 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <returns vsli:raw="The object graph that is returned.">반환되는 개체 그래프입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textReader" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.String)">
      <summary vsli:raw="Loads a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; source for a XAML reader and returns an object graph.">XAML 판독기의 <see cref="T:System.IO.Stream" /> 소스를 로드하고 개체 그래프를 반환합니다.</summary>
      <param name="fileName" vsli:raw="The file name to load and use as source.">로드하고 소스로 사용할 파일 이름입니다.</param>
      <returns vsli:raw="The object graph that is returned.">반환되는 개체 그래프입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" /> 입력은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
      <summary vsli:raw="Loads a specific XAML reader implementation and returns an object graph.">특정 XAML 판독기 구현을 로드하고 개체 그래프를 반환합니다.</summary>
      <param name="xamlReader" vsli:raw="The XAML reader implementation to use as the reader for this &lt;see langword=&quot;Load&quot; /&gt; operation.">이 <see langword="Load" /> 작업에 대한 판독기로 사용할 XAML 판독기 구현입니다.</param>
      <returns vsli:raw="The object graph that is returned.">반환되는 개체 그래프입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlReader&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlReader" /> 입력은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)">
      <summary vsli:raw="Loads a specific XML reader implementation and returns an object graph.">특정 XML 판독기 구현을 로드하고 개체 그래프를 반환합니다.</summary>
      <param name="xmlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implementation to use as the reader for this &lt;see langword=&quot;Load&quot; /&gt; operation.">이 <see langword="Load" /> 작업에 대한 판독기로 사용할 <see cref="T:System.Xml.XmlReader" /> 구현입니다.</param>
      <returns vsli:raw="The output object graph.">출력 개체 그래프입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlReader&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlReader" /> 입력은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Parse(System.String)">
      <summary vsli:raw="Reads XAML as string output and returns an object graph.">XAML을 문자열 출력으로 읽고 개체 그래프를 반환합니다.</summary>
      <param name="xaml" vsli:raw="The XAML string input to parse.">구문 분석할 XAML 문자열 입력입니다.</param>
      <returns vsli:raw="The object graph that is returned.">반환되는 개체 그래프입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xaml&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xaml" /> 입력은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
      <summary vsli:raw="Processes a provided object graph into a XAML node representation and then into an output stream for serialization.">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 serialization을 위한 출력 스트림으로 처리합니다.</summary>
      <param name="stream" vsli:raw="The destination stream.">대상 스트림입니다.</param>
      <param name="instance" vsli:raw="The root of the object graph to process.">처리할 개체 그래프의 루트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 입력은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)">
      <summary vsli:raw="Processes a provided object graph into a XAML node representation and then into an output that goes to the provided &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 <see cref="T:System.IO.TextWriter" />로 이동하는 출력으로 처리합니다.</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; that writes the output.">출력을 작성하는 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="instance" vsli:raw="The root of the object graph to process.">처리할 개체 그래프의 루트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 입력은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Object)">
      <summary vsli:raw="Processes a provided object tree into a XAML node representation, and returns a string representation of the output XAML.">제공된 개체 트리를 XAML 노드 표현으로 처리하고 출력 XAML의 문자열 표현을 반환합니다.</summary>
      <param name="instance" vsli:raw="The root of the object graph to process.">처리할 개체 그래프의 루트입니다.</param>
      <returns vsli:raw="The XAML markup output as a string.">문자열로 표시되는 XAML 태그 출력입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.String,System.Object)">
      <summary vsli:raw="Processes a provided object graph into a XAML node representation and then writes it to an output file at a provided location.">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 위치의 출력 파일에 씁니다.</summary>
      <param name="fileName" vsli:raw="The name and location of the file to write the output to.">출력을 작성할 파일의 이름과 위치입니다.</param>
      <param name="instance" vsli:raw="The root of the object graph to process.">처리할 개체 그래프의 루트입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is an empty string.">
        <paramref name="fileName" />이 빈 문자열인 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
      <summary vsli:raw="Processes a provided object graph into a XAML node representation and then writes it to the provided XAML writer.">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 XAML 작성기에 씁니다.</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; implementation to use.">사용할 <see cref="T:System.Xaml.XamlWriter" /> 구현입니다.</param>
      <param name="instance" vsli:raw="The root of the object graph to process.">처리할 개체 그래프의 루트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 입력은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)">
      <summary vsli:raw="Processes a provided object graph into a XAML node representation and then writes it to the provided &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 <see cref="T:System.Xml.XmlWriter" />에 씁니다.</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; implementation to use.">사용할 <see cref="T:System.Xml.XmlWriter" /> 구현입니다.</param>
      <param name="instance" vsli:raw="The root of the object graph to process.">처리할 개체 그래프의 루트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 입력은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
      <summary vsli:raw="Connects a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; to use a common XAML node set intermediary. Potentially transforms the content, depending on the types of readers and writers that are provided.">
        <see cref="T:System.Xaml.XamlReader" /> 및 <see cref="T:System.Xaml.XamlWriter" />를 연결하여 공통 XAML 노드 집합 매개자를 사용합니다. 제공된 판독기와 작성기의 유형에 따라 콘텐츠를 잠재적으로 변환합니다.</summary>
      <param name="xamlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; implementation to use.">사용할 <see cref="T:System.Xaml.XamlReader" /> 구현입니다.</param>
      <param name="xamlWriter" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; to use.">사용할 <see cref="T:System.Xaml.XamlWriter" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlReader&quot; /&gt; or &lt;paramref name=&quot;xamlWriter&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlReader" /> 또는 <paramref name="xamlWriter" /> 입력이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xaml.XamlException" vsli:raw="The XAML schema context does not match between the provided &lt;paramref name=&quot;xamlReader&quot; /&gt; and &lt;paramref name=&quot;xamlWriter&quot; /&gt;.">XAML 스키마 컨텍스트가 제공된 <paramref name="xamlReader" /> 및 <paramref name="xamlWriter" /> 사이에 일치하지 않습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
      <summary vsli:raw="Connects a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; to use a common XAML node set intermediary. Potentially transforms the content, depending on the types of readers and writers that are provided. Provides a parameter for specifying whether to close the writer after the call is completed.">
        <see cref="T:System.Xaml.XamlReader" /> 및 <see cref="T:System.Xaml.XamlWriter" />를 연결하여 공통 XAML 노드 집합 매개자를 사용합니다. 제공된 판독기와 작성기의 유형에 따라 콘텐츠를 잠재적으로 변환합니다. 호출이 완료된 후에 작성기를 닫을지 여부를 지정하기 위한 매개 변수를 제공합니다.</summary>
      <param name="xamlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; implementation to use.">사용할 <see cref="T:System.Xaml.XamlReader" /> 구현입니다.</param>
      <param name="xamlWriter" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; to use.">사용할 <see cref="T:System.Xaml.XamlWriter" />입니다.</param>
      <param name="closeWriter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to close the writer after the call is complete; &lt;see langword=&quot;false&quot; /&gt; to leave the writer active at the last written position.">호출이 완료된 후에 작성기를 닫으면 <see langword="true" />이고, 작성된 마지막 쓰기 위치에 활성 상태로 두면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlReader&quot; /&gt; or &lt;paramref name=&quot;xamlWriter&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlReader" /> 또는 <paramref name="xamlWriter" /> 입력이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xaml.XamlException" vsli:raw="The XAML schema context does not match between the provided &lt;paramref name=&quot;xamlReader&quot; /&gt; and &lt;paramref name=&quot;xamlWriter&quot; /&gt;.">XAML 스키마 컨텍스트가 제공된 <paramref name="xamlReader" /> 및 <paramref name="xamlWriter" /> 사이에 일치하지 않습니다.</exception>
    </member>
    <member name="T:System.Xaml.XamlType">
      <summary vsli:raw="Reports information about XAML types as part of the overall XAML system that is implemented in .NET XAML Services.">.NET Framework XAML 서비스에 구현된 전체 XAML 시스템의 일부로 XAML 형식에 대한 정보를 보고합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; class based on a string name for the type.">형식의 문자열 이름을 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName" vsli:raw="The name of the type to create.">만들 형식의 이름입니다.</param>
      <param name="typeArguments" vsli:raw="The type arguments for a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that represents a generic type. Can be (and often is) &lt;see langword=&quot;null&quot; /&gt;, which indicates that the represented type is not a generic type.">제네릭 형식을 나타내는 <see cref="T:System.Xaml.XamlType" />의 형식 인수입니다. 표시된 형식이 제네릭 형식이 아님을 나타내는 <see langword="null" />인 경우가 많습니다.</param>
      <param name="schemaContext" vsli:raw="XAML schema context for XAML readers and XAML writers.">XAML 판독기 및 XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of &lt;paramref name=&quot;typeName&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">하나 이상의 <paramref name="typeName" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; class based on the XAML namespace and a string name for the type. This constructor is exclusively for analysis and XAML-node recording of type usages that are known to not have backing in the supporting type system and XAML schema context.">XAML 네임스페이스와 형식의 문자열 이름을 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다. 이 생성자는 지원 형식 시스템과 XAML 스키마 컨텍스트에서 지원되지 않는 것으로 알려진 형식의 분석 및 XAML 노드 기록에만 사용됩니다.</summary>
      <param name="unknownTypeNamespace" vsli:raw="The XAML namespace for the type, as a string.">형식에 대한 XML 네임스페이스로서, 문자열로 되어 있습니다.</param>
      <param name="unknownTypeName" vsli:raw="The name of the type in the provided &lt;paramref name=&quot;unknownTypeNamespace&quot; /&gt; XAML namespace.">제공된 <paramref name="unknownTypeNamespace" /> XAML 네임스페이스에 있는 형식의 이름입니다.</param>
      <param name="typeArguments" vsli:raw="The type arguments for a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that represents a generic type. Can be (and often is) &lt;see langword=&quot;null&quot; /&gt;, which indicates that the represented type is not a generic type.">제네릭 형식을 나타내는 <see cref="T:System.Xaml.XamlType" />의 형식 인수입니다. 표시된 형식이 제네릭 형식이 아님을 나타내는 <see langword="null" />인 경우가 많습니다.</param>
      <param name="schemaContext" vsli:raw="XAML schema context for XAML readers or XAML writers.">XAML 판독기 또는 XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of &lt;paramref name=&quot;unknownTypeNamespace&quot; /&gt;, &lt;paramref name=&quot;unknownTypeName&quot; /&gt;, or &lt;paramref name=&quot;schemaContext&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="unknownTypeNamespace" />, <paramref name="unknownTypeName" /> 또는 <paramref name="schemaContext" /> 중 하나 이상이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; class based on the underlying CLR type information.">기본 CLR 형식 정보를 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="underlyingType" vsli:raw="The underlying CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; for the XAML type to construct.">생성할 XAML 형식에 대한 기본 CLR <see cref="T:System.Type" />입니다.</param>
      <param name="schemaContext" vsli:raw="XAML schema context for XAML readers or XAML writers.">XAML 판독기 또는 XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of &lt;paramref name=&quot;underlyingType&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">하나 이상의 <paramref name="underlyingType" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; class based on underlying type information and a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; implementation.">기본 형식 정보와 <see cref="T:System.Xaml.XamlType" /> 구현을 기반으로 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="underlyingType" vsli:raw="The underlying type for the XAML type to construct.">생성할 XAML 형식에 대한 기본 형식입니다.</param>
      <param name="schemaContext" vsli:raw="XAML schema context for the XAML reader.">XAML 판독기의 XAML 스키마 컨텍스트입니다.</param>
      <param name="invoker" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; implementation that handles run-time reflection calls against the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">
        <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대한 런타임 리플렉션 호출을 처리하는 <see cref="T:System.Xaml.XamlType" /> 구현입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of &lt;paramref name=&quot;underlyingType&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">하나 이상의 <paramref name="underlyingType" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Xaml.XamlType.AllowedContentTypes">
      <summary vsli:raw="Gets a read-only collection of the types that are usable as the &lt;see cref=&quot;P:System.Xaml.XamlType.ContentProperty&quot; /&gt; value for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="P:System.Xaml.XamlType.ContentProperty" />에 대한 <see cref="T:System.Xaml.XamlType" /> 값으로 사용할 수 있는 형식의 읽기 전용 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A read-only collection of possible content types.">가능한 콘텐츠 형식의 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.BaseType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the immediate base type of this XAML type. Determination of this value is based on the underlying type of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; and schema context.">이 XAML 형식의 직접적인 기본 형식에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다. 이 값은 이 <see cref="T:System.Xaml.XamlType" /> 및 스키마 컨텍스트의 기본 형식을 기준으로 결정됩니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the immediate base type of this XAML type.">이 XAML 형식의 직접적인 기본 형식에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
      <summary vsli:raw="Returns a value that indicates whether an instance of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; has the specified &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; in its list of assignable types.">이 <see cref="T:System.Xaml.XamlType" /> 인스턴스의 할당 가능한 형식 목록에 지정된 <see cref="T:System.Xaml.XamlType" />이 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="xamlType" vsli:raw="The type to check against the current &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; .">현재 <see cref="T:System.Xaml.XamlType" />을 검사할 대상 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;xamlType&quot; /&gt; is in the assignable types list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="xamlType" />이 할당 가능한 형식 목록에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ConstructionRequiresArguments">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; must have arguments (generic constraints through &lt;see langword=&quot;x:TypeArguments&quot; /&gt;, initialization text, or other XAML techniques) to construct a valid instance of the type.">이 <see cref="T:System.Xaml.XamlType" />에 인수(<see langword="x:TypeArguments" />, 초기화 텍스트 또는 기타 XAML 기술을 통한 일반 제약 조건)가 있어야 해당 형식의 유효한 인스턴스를 생성할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if construction of an instance requires some argument value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">인스턴스를 생성하기 위해 일부 인수 값이 필요하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentProperty">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the content property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />의 콘텐츠 속성에 대한 <see cref="T:System.Xaml.XamlType" /> 정보를 가져옵니다.</summary>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the content property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;. May be &lt;see langword=&quot;null&quot; /&gt; if no content property exists.">이 <see cref="T:System.Xaml.XamlMember" />의 콘텐츠 속성에 대한 <see cref="T:System.Xaml.XamlType" /> 정보입니다. 콘텐츠 속성이 없는 경우 <see langword="null" />일 수 있습니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentWrappers">
      <summary vsli:raw="Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed &lt;see langword=&quot;Collection&amp;lt;T&amp;gt;&quot; /&gt;.">콘텐츠 속성이 강력한 형식의 <see langword="Collection&lt;T&gt;" />에 있는 문자열과 같이 엄격한 형식 일치가 아닐 때 콘텐츠 속성의 콘텐츠를 래핑하는 데 사용되는 형식을 가져옵니다.</summary>
      <returns vsli:raw="A read-only collection of possible content wrapper types; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">가능한 콘텐츠 래퍼 형식의 읽기 전용 컬렉션이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.DeferringLoader">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; that represents the deferred loading conversion behavior for this type.">이 형식에 대한 지연된 로드 변환 동작을 나타내는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />를 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Xaml.XamlDeferringLoader&quot; /&gt; constraint that represents the deferred loading behavior for this type.">이 형식에 대한 지연된 로드 동작을 나타내는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlDeferringLoader" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the current object is equal to another object.">현재 개체가 다른 개체와 같은지 여부를 나타냅니다.</summary>
      <param name="obj" vsli:raw="The object to compare with this object.">이 개체와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is equal to the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 개체가 <paramref name="obj" /> 매개 변수와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
      <summary vsli:raw="Indicates whether the current object is equal to another object of the same type.">현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.</summary>
      <param name="other" vsli:raw="An object to compare with this object.">이 개체와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is equal to the &lt;paramref name=&quot;other&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 개체가 <paramref name="other" /> 매개 변수와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
      <summary vsli:raw="Returns the XAML member that is aliased to a XAML directive by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />에 의해 XAML 지시문에 별칭으로 지정되는 XAML 멤버를 반환합니다.</summary>
      <param name="directive" vsli:raw="The directive for which to find the aliased member.">별칭이 지정된 멤버를 찾을 지시문입니다.</param>
      <returns vsli:raw="The aliased member, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">별칭이 지정된 멤버를 찾았으면 해당 멤버이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllAttachableMembers">
      <summary vsli:raw="Returns a collection that contains all the attachable properties that are exposed by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />에 의해 노출되는 모든 연결 가능 속성을 포함하는 컬렉션을 반환합니다.</summary>
      <returns vsli:raw="A collection that contains zero or more &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; values.">0개 이상의 <see cref="T:System.Xaml.XamlMember" /> 값을 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllMembers">
      <summary vsli:raw="Returns a collection that contains all the members that are exposed by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />에 의해 노출되는 모든 멤버를 포함하는 컬렉션을 반환합니다.</summary>
      <returns vsli:raw="A collection that contains zero or more &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; values.">0개 이상의 <see cref="T:System.Xaml.XamlMember" /> 값을 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; representing a specific named attachable member of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />의 명명된 특정 연결 가능 멤버를 나타내는 <see cref="T:System.Xaml.XamlMember" />를 반환합니다.</summary>
      <param name="name" vsli:raw="The name of the attachable member to get, in &lt;c&gt;ownerTypeName.MemberName&lt;/c&gt; form.">
        <c>ownerTypeName.MemberName</c> 형식으로 된 가져올 연결 가능 멤버의 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; object for the requested attachable member; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if no attachable member by that name exists.">요청된 연결 가능 멤버의 경우 <see cref="T:System.Xaml.XamlMember" /> 개체이고, 그렇지 않고 해당 이름의 연결 가능 멤버가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">해당 개체의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="An integer hash code.">정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetMember(System.String)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; for a specific named member from this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />에서 명명된 특정 멤버의 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</summary>
      <param name="name" vsli:raw="The name of the member to get (as a string).">문자열로 가져올 멤버의 이름입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the member, if such a member was found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">해당 멤버를 찾았으면 멤버의 <see cref="T:System.Xaml.XamlMember" /> 정보이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
      <summary vsli:raw="For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">태그 확장 형식의 경우 이 <see cref="T:System.Xaml.XamlType" />에 대한 특정 태그 확장 사용에서 지원되는 위치 매개 변수의 형식을 반환합니다.</summary>
      <param name="parameterCount" vsli:raw="The count (arity) of the particular syntax or constructor mode that you want information about.">정보를 보려는 특정 구문 또는 생성자 모드의 개수입니다.</param>
      <returns vsli:raw="A list of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; values, where each &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is the type for that position in the syntax. You must specify the types in the same order when you supply markup input for the markup extension.">각 <see cref="T:System.Xaml.XamlType" />이 구문에서 해당 위치의 형식인 <see cref="T:System.Xaml.XamlType" /> 값의 목록입니다. 태그 확장에 대한 태그 입력을 제공할 때 이 형식을 동일한 순서로 지정해야 합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetXamlNamespaces">
      <summary vsli:raw="Returns a list of string identifiers for XAML namespaces that the type is included in.">이 형식이 포함되어 있는 XAML 네임스페이스에 대한 문자열 식별자 목록을 반환합니다.</summary>
      <returns vsli:raw="A list of string values, where each string is the URI identifier for a XAML namespace.">각 문자열이 XAML 네임스페이스의 URI 식별자인 문자열 값 목록입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Invoker">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />과 연결된 <see cref="T:System.Xaml.XamlType" /> 구현을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />과 연결된 <see cref="T:System.Xaml.XamlType" /> 구현입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsAmbient">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an ambient type, as per the XAML definition.">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 앰비언트 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an ambient type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 앰비언트 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsArray">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an array.">이 <see cref="T:System.Xaml.XamlType" />이 배열을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 배열을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsCollection">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a collection.">이 <see cref="T:System.Xaml.XamlType" />이 컬렉션을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 컬렉션을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsConstructible">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a constructible type, as per the XAML definition.">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 생성 가능 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a constructible type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 생성 가능 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsDictionary">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a dictionary, as per the XAML definition.">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsGeneric">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a generic type.">이 <see cref="T:System.Xaml.XamlType" />이 제네릭 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 제네릭 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsMarkupExtension">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a markup extension.">이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a markup extension; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameScope">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a XAML namescope, as per the XAML definition.">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 XAML 이름 범위를 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a XAML namescope; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 XAML 이름 범위를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameValid">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is initialized by using a valid &lt;see langword=&quot;xamlName&quot; /&gt; string as its &lt;see cref=&quot;P:System.Xaml.XamlType.Name&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 유효한 <see langword="xamlName" /> 문자열을 <see cref="P:System.Xaml.XamlType.Name" />으로 사용하여 초기화되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is initialized by using a valid &lt;see langword=&quot;xamlName&quot; /&gt; string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 유효한 <see langword="true" /> 문자열을 사용하여 초기화되었으면 <see langword="xamlName" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNullable">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a nullable type, as per the XAML definition.">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 null 허용 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a nullable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 null 허용 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsPublic">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a public type in the relevant type system.">이 <see cref="T:System.Xaml.XamlType" />이 관련 형식 시스템에서 public 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a public type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 public 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUnknown">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a type that cannot be resolved in the underlying type system.">이 <see cref="T:System.Xaml.XamlType" />이 기본 형식 시스템에서 확인할 수 없는 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an unresolvable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 확인할 수 없는 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUsableDuringInitialization">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is built top-down during XAML initialization.">XAML을 초기화하는 동안 이 <see cref="T:System.Xaml.XamlType" />이 하향식으로 빌드되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is built top-down during XAML initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">XAML을 초기화하는 동안 이 <see cref="T:System.Xaml.XamlType" />이 하향식으로 빌드되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a whitespace significant collection, as per the XML definition.">이 <see cref="T:System.Xaml.XamlType" />이 XML 정의를 기준으로 유효한 공백 컬렉션을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a whitespace significant collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 유효한 공백 컬렉션을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsXData">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents XML &lt;see langword=&quot;XDATA&quot; /&gt;, as per the XAML definition.">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 XML <see langword="XDATA" />를 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents &lt;see langword=&quot;XDATA&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 <see langword="true" />를 나타내면 <see langword="XDATA" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ItemType">
      <summary vsli:raw="Gets a value that provides the type information for the &lt;see langword=&quot;Items&quot; /&gt; property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" /> 개체의 <see langword="Items" /> 속성에 대한 형식 정보를 제공하는 값을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the type of the items in the collection; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a collection.">컬렉션에 있는 항목의 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 컬렉션을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.KeyType">
      <summary vsli:raw="Gets a value that provides the type information for the key property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, if the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a dictionary.">이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내는 경우 이 <see cref="T:System.Xaml.XamlType" />의 키 속성에 대한 형식 정보를 제공하는 값을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the type of the key for dictionary usage, otherwise, &lt;see langword=&quot;null&quot; /&gt;, if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a dictionary.">사전인 경우 키의 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이며, 이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
      <summary vsli:raw="Returns the XAML member that is aliased to a XAML directive by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />에 의해 XAML 지시문에 별칭으로 지정되는 XAML 멤버를 반환합니다.</summary>
      <param name="directive" vsli:raw="The directive for which to find the aliased member.">별칭이 지정된 멤버를 찾을 지시문입니다.</param>
      <returns vsli:raw="The aliased member, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">별칭이 지정된 멤버를 찾았으면 해당 멤버이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllAttachableMembers">
      <summary vsli:raw="Returns an enumerable set that contains all attachable properties that are exposed by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />에 의해 노출되는 모든 연결 가능 속성을 포함하는 열거 가능한 집합을 반환합니다.</summary>
      <returns vsli:raw="An enumerable set that contains zero or more &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; values; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">0개 이상의 <see cref="T:System.Xaml.XamlMember" /> 값을 포함하는 열거 가능한 집합이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllMembers">
      <summary vsli:raw="Returns an enumerable set that contains all the members that are exposed by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />에 의해 노출되는 모든 멤버를 포함하는 열거 가능한 집합을 반환합니다.</summary>
      <returns vsli:raw="An enumerable set that contains zero or more &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; values.">0개 이상의 <see cref="T:System.Xaml.XamlMember" /> 값을 포함하는 열거 가능한 집합입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllowedContentTypes">
      <summary vsli:raw="Returns a list of the types that are usable as the &lt;see cref=&quot;P:System.Xaml.XamlType.ContentProperty&quot; /&gt; value for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="P:System.Xaml.XamlType.ContentProperty" />에 대한 <see cref="T:System.Xaml.XamlType" /> 값으로 사용할 수 있는 형식 목록을 반환합니다.</summary>
      <returns vsli:raw="A list of possible content types.">가능한 콘텐츠 형식의 목록입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; for a specific named attachable from this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />에서 명명된 특정 연결 가능 항목에 대해 <see cref="T:System.Xaml.XamlMember" />를 반환합니다.</summary>
      <param name="name" vsli:raw="The name of the attachable member to get, in &lt;c&gt;ownerTypeName.MemberName&lt;/c&gt; form.">
        <c>ownerTypeName.MemberName</c> 형식으로 된 가져올 연결 가능 멤버의 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; object for the requested attachable member; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if no attachable member by that name exists.">요청된 연결 가능 멤버의 경우 <see cref="T:System.Xaml.XamlMember" /> 개체이고, 그렇지 않고 해당 이름의 연결 가능 멤버가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupBaseType">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the immediate base type of this XAML type. Determination of this value is based on the underlying type of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; and schema context.">이 XAML 형식의 직접적인 기본 형식에 대한 <see cref="T:System.Xaml.XamlType" />을 반환합니다. 이 값은 이 <see cref="T:System.Xaml.XamlType" /> 및 스키마 컨텍스트의 기본 형식을 기준으로 결정됩니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the immediate base type of this XAML type.">이 XAML 형식의 직접적인 기본 형식에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCollectionKind">
      <summary vsli:raw="Returns a value of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlCollectionKind&quot; /&gt; enumeration that declares which specific collection type this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; uses.">이 <see cref="T:System.Xaml.Schema.XamlCollectionKind" />에서 사용하는 특정 컬렉션 형식을 선언하는 <see cref="T:System.Xaml.XamlType" /> 열거형의 값을 반환합니다.</summary>
      <returns vsli:raw="A value of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlCollectionKind&quot; /&gt; enumeration.">
        <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 열거형의 값입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; must have arguments (generic constraints through &lt;see langword=&quot;x:TypeArguments&quot; /&gt;, initialization text, or other XAML techniques) to construct a valid instance of the type.">이 <see cref="T:System.Xaml.XamlType" />에 인수(<see langword="x:TypeArguments" />, 초기화 텍스트 또는 기타 XAML 기술을 통한 제네릭 제약 조건)가 있어야 유효한 형식 인스턴스를 생성할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if construction of an instance requires some argument value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">인스턴스를 생성하기 위해 일부 인수 값이 필요하면 <see langword="true" />이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentProperty">
      <summary vsli:raw="Returns &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the content property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />의 콘텐츠 속성에 대한 <see cref="T:System.Xaml.XamlType" /> 정보를 반환합니다.</summary>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the content property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;. May be &lt;see langword=&quot;null&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />의 콘텐츠 속성에 대한 <see cref="T:System.Xaml.XamlType" /> 정보입니다. <see langword="null" />일 수 있습니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentWrappers">
      <summary vsli:raw="Gets a list of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; values that represent the content wrappers for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />에 대한 콘텐츠 래퍼를 나타내는 <see cref="T:System.Xaml.XamlType" /> 값의 목록을 가져옵니다.</summary>
      <returns vsli:raw="A list of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; values that represent the content wrappers for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />에 대한 콘텐츠 래퍼를 나타내는 <see cref="T:System.Xaml.XamlType" /> 값의 목록입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
      <summary vsli:raw="When implemented in a derived class, returns an &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; implementation.">파생 클래스에서 구현되는 경우 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 구현을 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; implementation.">
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 구현입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupDeferringLoader">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which is used for deferred loading of XAML-declared objects.">XAML 선언된 개체의 지연된 로드에 사용되는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; that has a &lt;see cref=&quot;T:System.Xaml.XamlDeferringLoader&quot; /&gt; constraint on the generic.">제네릭에 대한 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlDeferringLoader" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupInvoker">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />과 연결된 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; information for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대한 <see cref="T:System.Xaml.XamlType" /> 정보이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsAmbient">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an ambient type, as per the XAML definition.">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 앰비언트 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an ambient type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 앰비언트 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsConstructible">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a constructible type, as per the XAML definition.">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 생성 가능 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a constructible type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 생성 가능 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsMarkupExtension">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a markup extension.">이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내는지 여부를 표시하는 값을 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a markup extension; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNameScope">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a XAML namescope, as per the XAML definition.">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 XAML 이름 범위를 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a XAML namescope; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 XAML 이름 범위를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNullable">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a nullable type, as per the XAML definition.">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 null 허용 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a nullable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 null 허용 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsPublic">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a public type in the relevant type system.">이 <see cref="T:System.Xaml.XamlType" />이 관련 형식 시스템에서 public 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a public type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 public 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsUnknown">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a type that cannot be resolved in the underlying type system.">이 <see cref="T:System.Xaml.XamlType" />이 기본 형식 시스템에서 확인할 수 없는 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a nonresolvable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 확인할 수 없는 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a whitespace significant collection, as per the XML definition.">이 <see cref="T:System.Xaml.XamlType" />이 XML 정의를 기준으로 유효한 공백 컬렉션을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a white-space significant collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 유효한 공백 컬렉션을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsXData">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents XML &lt;see langword=&quot;XDATA&quot; /&gt;, as per the XAML definition.">XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 XML <see langword="XDATA" />를 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents &lt;see langword=&quot;XDATA&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 <see langword="true" />를 나타내면 <see langword="XDATA" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupItemType">
      <summary vsli:raw="Returns a value that provides the type information for the &lt;see langword=&quot;Items&quot; /&gt; property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" /> 개체의 <see langword="Items" /> 속성에 대한 형식 정보를 제공하는 값을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the type of the items in the collection; otherwise, &lt;see langword=&quot;null&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a collection.">컬렉션에 있는 항목의 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 컬렉션을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupKeyType">
      <summary vsli:raw="Returns a value that provides the type information for the key property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, if the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a dictionary.">이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내는 경우 이 <see cref="T:System.Xaml.XamlType" />의 키 속성에 대한 형식 정보를 제공하는 값을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the type of the key for dictionary usage, or &lt;see langword=&quot;null&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a dictionary.">사전 사용 키의 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
      <summary vsli:raw="Returns a value that provides the type information for the returned &lt;see langword=&quot;ProvideValue&quot; /&gt; of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, if it represents a markup extension.">이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내는 경우 이 개체의 반환된 <see langword="ProvideValue" />에 대한 형식 정보를 제공하는 값을 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the return type for markup extension usage; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a markup extension.">태그 확장 사용의 반환 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; for a specific named member from this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlMember" />에서 명명된 특정 멤버의 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</summary>
      <param name="name" vsli:raw="The name of the member to get (as a string).">문자열로 가져올 멤버의 이름입니다.</param>
      <param name="skipReadOnlyCheck" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return a member even if that member has a &lt;see langword=&quot;true&quot; /&gt; value for &lt;see cref=&quot;P:System.Xaml.XamlMember.IsReadOnly&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to not return a &lt;see cref=&quot;P:System.Xaml.XamlMember.IsReadOnly&quot; /&gt; member. The default is &lt;see langword=&quot;false&quot; /&gt;.">멤버의 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 값이 <see langword="true" />인 경우에도 해당 멤버를 반환하면 <see langword="true" />이고, <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 멤버를 반환하지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the member, if a member was found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">멤버를 찾았으면 해당 멤버의 <see cref="T:System.Xaml.XamlMember" /> 정보이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
      <summary vsli:raw="For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">태그 확장 형식의 경우 이 <see cref="T:System.Xaml.XamlType" />에 대한 특정 태그 확장 사용에서 지원되는 위치 매개 변수의 형식을 반환합니다.</summary>
      <param name="parameterCount" vsli:raw="The count (arity) of the particular syntax or constructor mode that you want information about.">정보를 보려는 특정 구문 또는 생성자 모드의 개수입니다.</param>
      <returns vsli:raw="A list of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; values where each such &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is the type for that position in the syntax. You must specify those types in the same order when supplying markup input for the markup extension.">각 <see cref="T:System.Xaml.XamlType" />이 구문에서 해당 위치의 형식인 <see cref="T:System.Xaml.XamlType" /> 값의 목록입니다. 태그 확장에 대한 태그 입력을 제공할 때 이 형식을 동일한 순서로 지정해야 합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
      <summary vsli:raw="Returns a handler callback to use for the set operations of markup extensions.">태그 확장의 설정 작업에 사용할 처리기 콜백을 반환합니다.</summary>
      <returns vsli:raw="A handler callback to use for the set operations of markup extensions.">태그 확장의 설정 작업에 사용할 처리기 콜백입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
      <summary vsli:raw="Returns a handler to use for type converter setting cases.">형식 변환기 설정 사례에 사용할 처리기를 반환합니다.</summary>
      <returns vsli:raw="A handler to use for type converter setting cases.">형식 변환기 설정 사례에 사용할 처리기입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; should be serialized using a mode that  trims surrounding whitespace.">이 <see cref="T:System.Xaml.XamlType" />이 주변 공백을 트리밍하는 모드를 사용하여 serialize되어야 하는지 여부를 나타내는 값을 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; should be serialized in a mode that trims surrounding whitespace; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 주변 공백을 트리밍하는 모드로 serialize되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTypeConverter">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; that has a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint, which represents type-conversion behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 형식 변환 동작을 나타내는 <see cref="T:System.ComponentModel.TypeConverter" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint that represents type-conversion behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 형식 변환 동작을 나타내는 <see cref="T:System.ComponentModel.TypeConverter" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUnderlyingType">
      <summary vsli:raw="Returns the CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; that underlies this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Type" />의 기반이 되는 CLR <see cref="T:System.Xaml.XamlType" />을 반환합니다.</summary>
      <returns vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; that underlies this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">이 <see cref="T:System.Type" />의 기반이 되는 CLR <see cref="T:System.Xaml.XamlType" />이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is built top-down during XAML initialization.">XAML을 초기화하는 동안 이 <see cref="T:System.Xaml.XamlType" />이 하향식으로 빌드되는지 여부를 나타내는 값을 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is built top-down during XAML initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">XAML을 초기화하는 동안 이 <see cref="T:System.Xaml.XamlType" />이 하향식으로 빌드되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupValueSerializer">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; that has a &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint, which represents value serialization behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 값 serialization 동작을 나타내는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint that represents value serialization behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 값 serialization 동작을 나타내는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.MarkupExtensionReturnType">
      <summary vsli:raw="Gets a value that provides the type information for the returned &lt;see langword=&quot;ProvideValue&quot; /&gt; of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, if it represents a markup extension.">이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내는 경우 이 개체의 반환된 <see langword="ProvideValue" />에 대한 형식 정보를 제공하는 값을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the return type for markup extension usage; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a markup extension.">태그 확장 사용의 반환 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Name">
      <summary vsli:raw="Gets the string name of the type that this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents.">이 <see cref="T:System.Xaml.XamlType" />이 나타내는 형식의 문자열 이름을 가져옵니다.</summary>
      <returns vsli:raw="The string name of this XAML type.">이 XAML 형식의 문자열 이름입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; objects have the same value.">지정된 두 <see cref="T:System.Xaml.XamlType" /> 개체의 값이 같은지를 확인합니다.</summary>
      <param name="xamlType1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 또는 <see langword="null" />입니다.</param>
      <param name="xamlType2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 또는 <see langword="null" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;xamlType1&quot; /&gt; is the same as the value of &lt;paramref name=&quot;xamlType2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />의 값이 <paramref name="xamlType1" />의 값과 같으면 <paramref name="xamlType2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; objects have different values.">지정된 두 <see cref="T:System.Xaml.XamlType" /> 개체의 값이 서로 다른지 확인합니다.</summary>
      <param name="xamlType1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 또는 <see langword="null" />입니다.</param>
      <param name="xamlType2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 또는 <see langword="null" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;xamlType1&quot; /&gt; is different from the value of &lt;paramref name=&quot;xamlType2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="xamlType1" />의 값이 <paramref name="xamlType2" />의 값과 다르면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.PreferredXamlNamespace">
      <summary vsli:raw="Gets the single XAML namespace that is the primary XAML namespace for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />에 대한 기본 XAML 네임스페이스인 단일 XAML 네임스페이스를 가져옵니다.</summary>
      <returns vsli:raw="The identifier, as a string, of the primary XAML namespace for this XAML type.">이 XAML 형식에 대한 기본 XAML 네임스페이스의 식별자로서, 문자열로 지정됩니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.SchemaContext">
      <summary vsli:raw="Gets the active &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; for processing this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlSchemaContext" />을 처리하기 위한 활성 <see cref="T:System.Xaml.XamlType" />를 가져옵니다.</summary>
      <returns vsli:raw="The active &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; for processing this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlSchemaContext" />을 처리하기 위한 활성 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.ToString">
      <summary vsli:raw="Returns a string representation of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />의 문자열 표현을 반환합니다.</summary>
      <returns vsli:raw="A string representation of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />의 문자열 표현입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; has whitespace handling behavior for serialization that trims the surrounding whitespace in its content.">이 <see cref="T:System.Xaml.XamlType" />에 콘텐츠에서 주변 공백을 트리밍하는 serialization의 공백 처리 동작이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a type that uses whitespace trimming; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">이 <see cref="T:System.Xaml.XamlType" />이 공백 트리밍을 사용하는 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeArguments">
      <summary vsli:raw="Gets a list of type arguments for cases where this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a generic.">이 <see cref="T:System.Xaml.XamlType" />이 제네릭을 나타내는 경우 형식 인수의 목록을 가져옵니다.</summary>
      <returns vsli:raw="A list of type argument types; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a generic.">형식 인수 형식의 목록이거나, 이 <see cref="T:System.Xaml.XamlType" />이 제네릭을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeConverter">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint that represents type conversion behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 형식 변환 동작을 나타내는 <see cref="T:System.ComponentModel.TypeConverter" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint that represents type conversion behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 형식 변환 동작을 나타내는 <see cref="T:System.ComponentModel.TypeConverter" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.UnderlyingType">
      <summary vsli:raw="Gets the CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; that underlies this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Type" />의 기반이 되는 CLR <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; that underlies this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Type" />의 기반이 되는 CLR <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ValueSerializer">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint that represents value serialization behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 값 serialization 동작을 나타내는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint that represents value serialization behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 값 serialization 동작을 나타내는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlWriter">
      <summary vsli:raw="Provides default implementation and base class definitions for a XAML writer. This is not a working default XAML writer; you must either derive from &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; and implement its abstract members, or use an existing &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; derived class.">XAML 작성기에 대한 기본 구현 및 기본 클래스 정의를 제공합니다. 이것은 작동 중인 기본 XAML 작성기가 아니므로 <see cref="T:System.Xaml.XamlWriter" />에서 파생하여 해당 추상 멤버를 구현하거나 기존의 <see cref="T:System.Xaml.XamlWriter" /> 파생 클래스를 사용해야 합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; class.">
        <see cref="T:System.Xaml.XamlWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Close">
      <summary vsli:raw="Closes the XAML writer object.">XAML 작성기 개체를 닫습니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.Xaml.XamlWriter" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release the managed resources; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">관리되는 리소스를 해제하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlWriter.IsDisposed">
      <summary vsli:raw="Gets whether &lt;see cref=&quot;M:System.Xaml.XamlWriter.Dispose(System.Boolean)&quot; /&gt; has been called.">
        <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />가 호출되었는지 여부를 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Xaml.XamlWriter.Dispose(System.Boolean)&quot; /&gt; has been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />가 호출되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlWriter.SchemaContext">
      <summary vsli:raw="When implemented in a derived class, gets the active XAML schema context.">파생 클래스에서 구현된 경우 활성 XAML 스키마 컨텍스트를 가져옵니다.</summary>
      <returns vsli:raw="The active XAML schema context.">활성 XAML 스키마 컨텍스트입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlWriter.System#IDisposable#Dispose">
      <summary vsli:raw="See &lt;see cref=&quot;M:System.IDisposable.Dispose&quot; /&gt;.">
        <see cref="M:System.IDisposable.Dispose" />을 참조하세요.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndMember">
      <summary vsli:raw="When implemented in a derived class, produces the representation of an end member node.">파생 클래스에서 구현되는 경우 끝 멤버 노드의 표현을 생성합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndObject">
      <summary vsli:raw="When implemented in a derived class, produces the representation of an end object node.">파생 클래스에서 구현되는 경우 끝 개체 노드의 표현을 생성합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteGetObject">
      <summary vsli:raw="When implemented in a derived class, produces an object for cases where the object is a default or implicit value of the property being set, instead of being specified as a discrete object value in the input XAML node set.">파생 클래스에서 구현되는 경우 개체가 입력 XAML 노드 집합에서 개별적인 개체 값으로 지정되는 것이 아니라 기본값이거나 설정 중인 속성의 암시적인 값이면 개체를 생성합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary vsli:raw="When implemented in a derived class, writes a XAML namespace declaration node.">파생 클래스에서 구현되는 경우 XAML 네임스페이스 선언 노드를 작성합니다.</summary>
      <param name="namespaceDeclaration" vsli:raw="The namespace declaration to write.">작성할 네임스페이스 선언입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
      <summary vsli:raw="Performs switching based on node type from the XAML reader (&lt;see cref=&quot;P:System.Xaml.XamlReader.NodeType&quot; /&gt;) and calls the relevant &lt;see langword=&quot;Write&quot; /&gt; method for the writer implementation.">XAML 판독기(<see cref="P:System.Xaml.XamlReader.NodeType" />)의 노드 형식을 기반으로 전환을 수행하고 작성기 구현을 위한 관련 <see langword="Write" /> 메서드를 호출합니다.</summary>
      <param name="reader" vsli:raw="The reader to use for node determination.">노드 확인에 사용할 판독기입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reader" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotImplementedException" vsli:raw="The default implementation encountered a &lt;see cref=&quot;T:System.Xaml.XamlNodeType&quot; /&gt; that is not in the default enumeration.">기본 구현에 없는 <see cref="T:System.Xaml.XamlNodeType" />이 있습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary vsli:raw="When implemented in a derived class, writes the representation of a start member node.">파생 클래스에서 구현되는 경우 시작 멤버 노드의 표현을 작성합니다.</summary>
      <param name="xamlMember" vsli:raw="The member node to write.">작성할 멤버 노드입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary vsli:raw="When implemented in a derived class, writes the representation of a start object node.">파생 클래스에서 구현되는 경우 시작 개체 노드의 표현을 작성합니다.</summary>
      <param name="type" vsli:raw="The XAML type of the object to write.">작성할 개체의 XAML 형식입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteValue(System.Object)">
      <summary vsli:raw="When implemented in a derived class, writes a value node.">파생 클래스에서 구현되는 경우 값 노드를 작성합니다.</summary>
      <param name="value" vsli:raw="The value to write.">작성할 값입니다.</param>
    </member>
    <member name="T:System.Xaml.XamlWriterSettings">
      <summary vsli:raw="Provides initialization settings for a &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; implementation.">
        <see cref="T:System.Xaml.XamlWriter" /> 구현에 대한 초기화 설정을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlWriterSettings&quot; /&gt; class.">
        <see cref="T:System.Xaml.XamlWriterSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor(System.Xaml.XamlWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlWriterSettings&quot; /&gt; class using another existing settings instance.">다른 기존 설정 인스턴스를 사용하여 <see cref="T:System.Xaml.XamlWriterSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="settings" vsli:raw="An existing &lt;see cref=&quot;T:System.Xaml.XamlWriterSettings&quot; /&gt; object.">기존 <see cref="T:System.Xaml.XamlWriterSettings" /> 개체입니다.</param>
    </member>
    <member name="T:System.Xaml.XamlXmlReader">
      <summary vsli:raw="Processes XAML markup from XML files by using an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; intermediary, and produces a XAML node stream.">
        <see cref="T:System.Xml.XmlReader" /> 매개자를 사용하여 XML 파일에서 XAML 태그를 처리하고 XAML 노드 스트림을 생성합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a stream.">스트림을 기반으로 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream" vsli:raw="The initial stream to load into the reader.">판독기에 로드할 초기 스트림입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a stream, and using a supplied XAML schema context.">제공된 XAML 스키마 컨텍스트를 사용하여 스트림을 기반으로 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream" vsli:raw="The initial stream to load into the reader.">판독기에 로드할 초기 스트림입니다.</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">XAML 처리의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a stream, with a supplied XAML schema context and XAML-specific settings.">제공된 XAML 스키마 컨텍스트 및 XAML 관련 설정을 사용하여 스트림을 기준으로 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream" vsli:raw="The initial stream to load into the reader.">판독기에 로드할 초기 스트림입니다.</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">XAML 처리의 XAML 스키마 컨텍스트입니다.</param>
      <param name="settings" vsli:raw="The specific reader settings.">특정 판독기 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a stream, with XAML-specific settings.">XAML 고유 설정을 사용하여 스트림을 기반으로 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream" vsli:raw="The initial stream to load into the reader.">판독기에 로드할 초기 스트림입니다.</param>
      <param name="settings" vsli:raw="The specific reader settings.">특정 판독기 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlXmlReader" />를 기반으로 <see cref="T:System.IO.TextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="textReader" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; to use for initialization.">초기화에 사용할 <see cref="T:System.IO.TextReader" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textReader" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;, with a supplied schema context and XAML-specific settings.">제공된 스키마 컨텍스트 및 XAML 고유 설정을 사용하여 <see cref="T:System.Xaml.XamlXmlReader" />를 기반으로 <see cref="T:System.IO.TextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="textReader" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; to use for initialization.">초기화에 사용할 <see cref="T:System.IO.TextReader" /> 개체입니다.</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">XAML 처리의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textReader" />가 <see langword="null" />인 경우  
또는 
 <paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;, and using a supplied schema context and XAML-specific settings.">제공된 스키마 컨텍스트 및 XAML 고유 설정을 사용하여 <see cref="T:System.Xaml.XamlXmlReader" />를 기반으로 <see cref="T:System.IO.TextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="textReader" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; to use for initialization.">초기화에 사용할 <see cref="T:System.IO.TextReader" /> 개체입니다.</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">XAML 처리의 XAML 스키마 컨텍스트입니다.</param>
      <param name="settings" vsli:raw="The specific reader settings.">특정 판독기 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textReader" />가 <see langword="null" />인 경우  
또는 
 <paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;, and using XAML-specific settings.">XAML 고유 설정을 사용하여 <see cref="T:System.Xaml.XamlXmlReader" />를 기반으로 <see cref="T:System.IO.TextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="textReader" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; to use for initialization.">초기화에 사용할 <see cref="T:System.IO.TextReader" /> 개체입니다.</param>
      <param name="settings" vsli:raw="The specific reader settings.">특정 판독기 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textReader" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a file name of a file to load into a default XML reader.">기본 XAML 판독기로 로드할 파일의 파일 이름을 기준으로 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName" vsli:raw="The name of the XML file to load.">로드할 XML 파일의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on the file name of a file to load into a default XML reader, with a supplied XAML schema context.">제공된 XAML 스키마 컨텍스트를 사용하여 기본 XML 판독기로 로드할 파일의 파일 이름을 기준으로 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName" vsli:raw="The name of the file to load.">로드할 파일의 이름입니다.</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">XAML 처리의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on the file name of a file to load into a default XML reader, and using a supplied XAML schema context and XAML-specific reader settings.">제공된 XAML 스키마 컨텍스트 및 XAML 고유 판독기 설정을 사용하여 기본 XML 판독기로 로드할 파일의 파일 이름을 기반으로 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName" vsli:raw="The name of the XML file to load.">로드할 XML 파일의 이름입니다.</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">XAML 처리의 XAML 스키마 컨텍스트입니다.</param>
      <param name="settings" vsli:raw="The specific reader settings.">특정 판독기 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" />가 <see langword="null" />입니다.  
또는 
 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on the file name of a file to load into a default XML reader, and using XAML-specific reader settings.">XAML 고유 판독기 설정을 사용하여 기본 XML 판독기로 로드할 파일의 파일 이름을 기반으로 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName" vsli:raw="The name of the XML file to load.">로드할 XML 파일의 이름입니다.</param>
      <param name="settings" vsli:raw="The specific reader settings.">특정 판독기 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class using the provided &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">제공된 <see cref="T:System.Xml.XmlReader" />을 사용하여 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to use as the intermediary XML processor.">매개자 XML 처리기로 사용할 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlReader" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class using the provided &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and schema context.">제공된 <see cref="T:System.Xaml.XamlXmlReader" /> 및 스키마 컨텍스트를 사용하여 <see cref="T:System.Xml.XmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to use as the intermediary XML processor.">매개자 XML 처리기로 사용할 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">XAML 처리의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlReader&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlReader" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class using the provided &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;, schema context, and reader settings.">제공된 <see cref="T:System.Xaml.XamlXmlReader" />, 스키마 컨텍스트 및 판독기 설정을 사용하여 <see cref="T:System.Xml.XmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to use as the intermediary XML processor.">매개자 XML 처리기로 사용할 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">XAML 처리의 XAML 스키마 컨텍스트입니다.</param>
      <param name="settings" vsli:raw="The specific XAML reader settings.">특정 XAML 판독기 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlReader&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlReader" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, using the provided &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and reader settings.">제공된 <see cref="T:System.Xaml.XamlXmlReader" /> 및 판독기 설정을 사용하여 <see cref="T:System.Xml.XmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to use as the intermediary XML processor.">매개자 XML 처리기로 사용할 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="settings" vsli:raw="The specific XAML reader settings.">특정 XAML 판독기 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlReader&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlReader" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.HasLineInfo">
      <summary vsli:raw="Gets a value that specifies whether line information is available.">줄 정보를 사용할 수 있는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if line information is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">줄 정보를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.IsEof">
      <summary vsli:raw="Gets a value that reports whether the reader position in the XAML node stream is at end-of-file.">XAML 노드 스트림에서 판독기 위치가 파일 끝인지 여부를 보고하는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the position is at the conceptual end-of-file in the node stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">위치가 노드 스트림의 개념적 파일 끝에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LineNumber">
      <summary vsli:raw="Gets the line number to report.">보고할 줄 번호를 가져옵니다.</summary>
      <returns vsli:raw="The line number to report.">보고할 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LinePosition">
      <summary vsli:raw="Gets the line position to report.">보고할 줄 위치를 가져옵니다.</summary>
      <returns vsli:raw="The line position to report.">보고할 줄 위치입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Member">
      <summary vsli:raw="Gets the current member at the reader position, if the current reader position is on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt;.">현재 판독기 위치가 <see cref="F:System.Xaml.XamlNodeType.StartMember" />에 있는 경우 판독기 위치에 현재 멤버를 가져옵니다.</summary>
      <returns vsli:raw="The current member; or &lt;see langword=&quot;null&quot; /&gt;, if the current reader position is not on a member.">현재 멤버이거나, 현재 판독기 위치가 멤버에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Namespace">
      <summary vsli:raw="Gets the XAML namespace from the current node.">현재 노드에서 XAML 네임스페이스를 가져옵니다.</summary>
      <returns vsli:raw="The XAML namespace from the current node, if it is available; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">사용할 수 있으면 현재 노드의 XAML 네임스페이스이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.NodeType">
      <summary vsli:raw="Gets the type of the current node.">현재 노드의 형식을 가져옵니다.</summary>
      <returns vsli:raw="A value of the &lt;see cref=&quot;T:System.Xaml.XamlNodeType&quot; /&gt; enumeration.">
        <see cref="T:System.Xaml.XamlNodeType" /> 열거형의 값입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.Read">
      <summary vsli:raw="Provides the next XAML node from the loaded source, if a XAML node is available.">XAML 노드를 사용할 수 있는 경우 로드된 소스에서 다음 XAML 노드를 제공합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a node is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">노드를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.SchemaContext">
      <summary vsli:raw="Gets an object that provides schema information for the information set.">정보 집합에 대한 스키마 정보를 제공하는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that provides schema information for the information set.">정보 집합에 대한 스키마 정보를 제공하는 개체입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Type">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node.">현재 노드의 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the position is not on an object.">현재 노드의 <see cref="T:System.Xaml.XamlType" />이거나, 위치가 개체에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Value">
      <summary vsli:raw="Gets the value of the current node.">현재 노드의 값을 가져옵니다.</summary>
      <returns vsli:raw="The value of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the position is not on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.Value&quot; /&gt; node type.">현재 노드의 값이거나, 위치가 <see cref="F:System.Xaml.XamlNodeType.Value" /> 노드 형식에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlXmlReaderSettings">
      <summary vsli:raw="Specifies processing rules or option settings for the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; XAML reader implementation.">
        <see cref="T:System.Xaml.XamlXmlReader" /> XAML 판독기 구현에 대한 처리 규칙 또는 옵션 설정을 지정합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReaderSettings&quot; /&gt; class.">
        <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor(System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReaderSettings&quot; /&gt; class by copying settings from an existing &lt;see cref=&quot;T:System.Xaml.XamlXmlReaderSettings&quot; /&gt; object.">기존 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 개체에서 설정을 복사하여 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="settings" vsli:raw="The existing &lt;see cref=&quot;T:System.Xaml.XamlXmlReaderSettings&quot; /&gt; object to copy.">복사할 기존 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 개체입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.CloseInput">
      <summary vsli:raw="Gets or sets a value that indicates whether the underlying stream or text reader should be closed when the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; is closed.">
        <see cref="T:System.Xaml.XamlXmlReader" />를 닫을 때 기본 스트림 또는 텍스트 판독기를 함께 닫을지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the underlying stream or reader should be closed when the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; is closed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlXmlReader" />를 닫을 때 내부 스트림 또는 판독기를 함께 닫아야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.SkipXmlCompatibilityProcessing">
      <summary vsli:raw="Gets or sets a value that determines whether the reader should differ from the default &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; behavior of how markup compatibility content is processed.">태그 호환성 콘텐츠 처리 방법과 관련해서 판독기가 기본 <see cref="T:System.Xaml.XamlXmlReader" />와는 다르게 동작해야 하는지 여부를 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the initiating reader is directly used, which means that XML compatibility markup is processed as part of the main stream and compatibility is not considered. &lt;see langword=&quot;false&quot; /&gt; if the default behavior is used, which processes XML compatibility separately. The default is &lt;see langword=&quot;false&quot; /&gt;.">시작하는 판독기를 직접 사용하면 즉, XML 호환성 태그를 주 스트림의 일부로 처리하고 호환성을 고려하지 않으면 <see langword="true" />이고, XML 호환성을 별도로 처리하는 기본 동작을 사용하면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlLang">
      <summary vsli:raw="Gets or sets the language setting value that the reader may promote to writers that write &lt;see langword=&quot;xml:lang&quot; /&gt; attributes in nodes.">판독기가 노드에 <see langword="xml:lang" /> 특성을 쓰는 작성기로 승격할 수 있는 언어 설정 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The string to use for possible &lt;see langword=&quot;xml:lang&quot; /&gt; output that is based on the reader.">판독기를 기반으로 하는 가능한 <see langword="xml:lang" /> 출력에 사용할 문자열입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlSpacePreserve">
      <summary vsli:raw="Gets or sets a value that determines whether the XAML reader instructs any XAML writers to write &lt;see langword=&quot;xml:space&quot; /&gt; attributes in nodes. If that behavior is desired, this information is passed through shared XAML schema context.">XAML 판독기가 노드에 <see langword="xml:space" /> 특성을 쓰도록 XAML 작성기에 지시하는지 여부를 결정하는 값을 가져오거나 설정합니다. 해당 동작을 원하는 경우 이 정보가 공유 XAML 스키마 컨텍스트를 통해 전달됩니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if writers that are processing the XAML node stream can write &lt;c&gt;xml:space=&quot;preserve&quot;&lt;/c&gt; in output; &lt;see langword=&quot;false&quot; /&gt; if &lt;see langword=&quot;xml:space&quot; /&gt; attributes cannot be written in nodes.">
        <see langword="true" /> XAML 노드 스트림을 처리 중인 작성기가 작성할 수 있으면 <c>xml: space = "preserve"</c> 출력; <see langword="false" /> 경우 <see langword="xml:space" /> 노드의 특성을 쓸 수 없습니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlXmlWriter">
      <summary vsli:raw="Uses a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; support class to write a XAML node stream to a text or markup serialized form.">
        <see cref="T:System.IO.TextWriter" /> 또는 <see cref="T:System.Xml.XmlWriter" /> 지원 클래스를 사용하여 XAML 노드 스트림을 텍스트 또는 태그 serialize된 양식에 씁니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a stream.">스트림에서 <see cref="T:System.Xaml.XamlXmlWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream" vsli:raw="The stream to write.">쓸 스트림입니다.</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" />가 <see langword="null" />인 경우  
또는 
 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a stream using a writer settings object.">작성기 설정 개체를 사용하여 스트림에서 <see cref="T:System.Xaml.XamlXmlWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream" vsli:raw="The stream to write.">쓸 스트림입니다.</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <param name="settings" vsli:raw="An instance of &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterSettings&quot; /&gt;, which typically has specific non-default settings.">일반적으로 기본값이 아닌 특정 설정이 있는 <see cref="T:System.Xaml.XamlXmlWriterSettings" />의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="stream" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; basis.">
        <see cref="T:System.Xaml.XamlXmlWriter" /> 기초에서 <see cref="T:System.IO.TextWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="textWriter" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; that writes the output.">출력을 작성하는 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textWriter&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textWriter" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; basis using a settings object.">설정 개체를 사용하여 <see cref="T:System.Xaml.XamlXmlWriter" /> 기초에서 <see cref="T:System.IO.TextWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="textWriter" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; that writes the output.">출력을 작성하는 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <param name="settings" vsli:raw="An instance of &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterSettings&quot; /&gt;, which typically has specific non-default settings.">일반적으로 기본값이 아닌 특정 설정이 있는 <see cref="T:System.Xaml.XamlXmlWriterSettings" />의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textWriter&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textWriter" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; basis.">
        <see cref="T:System.Xaml.XamlXmlWriter" /> 기초에서 <see cref="T:System.Xml.XmlWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlWriter" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; that writes the output.">출력을 작성하는 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlWriter&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlWriter" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; basis using a settings object.">설정 개체를 사용하여 <see cref="T:System.Xaml.XamlXmlWriter" /> 기초에서 <see cref="T:System.Xml.XmlWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlWriter" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; that writes the output.">출력을 작성하는 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <param name="settings" vsli:raw="An instance of &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterSettings&quot; /&gt;, which typically has specific non-default settings.">일반적으로 기본값이 아닌 특정 설정이 있는 <see cref="T:System.Xaml.XamlXmlWriterSettings" />의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlWriter&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlWriter" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.Xaml.XamlXmlWriter" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제합니다.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release the unmanaged resources; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">관리되지 않는 리소스를 해제하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Flush">
      <summary vsli:raw="Calls the &lt;see langword=&quot;Flush&quot; /&gt; method of the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;, which writes anything that is currently in the buffer, and then closes the writer.">기본 <see cref="T:System.Xml.XmlWriter" /> 또는 <see cref="T:System.IO.TextWriter" />의 <see langword="Flush" /> 메서드를 호출합니다. 이 메서드는 현재 버퍼에 있는 모든 내용을 쓴 후에 작성기를 닫습니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.SchemaContext">
      <summary vsli:raw="Gets the XAML schema context that this &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; uses for processing.">이 <see cref="T:System.Xaml.XamlXmlWriter" />가 처리에 사용하는 XAML 스키마 컨텍스트를 가져옵니다.</summary>
      <returns vsli:raw="The XAML schema context that this &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; uses for XAML processing.">이 <see cref="T:System.Xaml.XamlXmlWriter" />가 XAML 처리에 사용하는 XAML 스키마 컨텍스트입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.Settings">
      <summary vsli:raw="Gets the writer settings that this &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; uses for XAML processing.">이 <see cref="T:System.Xaml.XamlXmlWriter" />가 XAML 처리에 사용하는 작성기 설정을 가져옵니다.</summary>
      <returns vsli:raw="The writer settings that this &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; uses for XAML processing.">이 <see cref="T:System.Xaml.XamlXmlWriter" />가 XAML 처리에 사용하는 작성기 설정입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndMember">
      <summary vsli:raw="Writes a XAML end member node to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. Throws an exception if the current position of the XAML node stream is not within a member, or if the internal writer state does not support writing to an end member.">내부 <see cref="T:System.Xml.XmlWriter" /> 또는 <see cref="T:System.IO.TextWriter" />에 XAML 끝 멤버 노드를 씁니다. XAML 노드 스트림의 현재 위치가 멤버 내에 없거나 내부 작성기 상태가 끝 멤버에 쓰는 작업을 지원하지 않으면 예외를 throw합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current position of the XAML node stream is not within a member.">XAML 노드 스트림의 현재 위치가 멤버 내부가 아닙니다.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The current writer state does not support writing an end member.">현재 작성기 상태는 끝 멤버 작성을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndObject">
      <summary vsli:raw="Writes a XAML end object node to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. Throws an exception if the current position of the XAML node stream that is being processed is incompatible with writing an end object.">기본 <see cref="T:System.Xml.XmlWriter" /> 또는 <see cref="T:System.IO.TextWriter" />에 XAML 끝 개체 노드를 씁니다. 처리되는 XAML 노드 스트림의 현재 위치가 끝 개체 쓰기와 호환되지 않으면 예외를 throw합니다.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current position of the XAML node stream is not in a scope where an end member can be written.">XAML 노드 스트림의 현재 위치는 끝 멤버를 기록할 수 있는 범위 내에 없습니다.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The current writer state does not support writing an end object.">현재 작성기 상태는 끝 개체 작성을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteGetObject">
      <summary vsli:raw="Writes an object for cases where the specified object is a default or implicit value of the property that is being written, instead of being specified as an object value in the input XAML node set.">지정된 개체가 입력 XAML 노드 집합에서 개체 값으로 지정되는 것이 아니라 기본값이거나 쓰고 있는 속성의 암시적인 값인 경우에 개체를 씁니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary vsli:raw="Writes namespace information to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. May throw an exception for certain states; however, may instead defer writing the namespace information until the writer and the XAML node stream that is being processed reaches a position where a XAML namespace declaration can be inserted.">기본 <see cref="T:System.Xml.XmlWriter" /> 또는 <see cref="T:System.IO.TextWriter" />에 네임스페이스 정보를 씁니다. 특정 상태에 대해 예외를 throw할 수도 있지만, 그 대신에 작성기 및 처리 중인 XAML 노드 스트림이 XAML 네임스페이스 선언을 삽입할 수 있는 위치에 도달할 때까지 네임스페이스 정보 쓰기를 지연할 수 있습니다.</summary>
      <param name="namespaceDeclaration" vsli:raw="The XAML namespace declaration to write.">작성할 XAML 네임스페이스 선언입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;namespaceDeclaration&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="namespaceDeclaration" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;namespaceDeclaration&quot; /&gt; is not a valid XAML namespace declaration (has a null prefix or null identifier component).">
        <paramref name="namespaceDeclaration" />은 유효한 XAML 네임스페이스 선언이 아닙니다(null 접두사 또는 null 식별자 구성 요소가 있음).</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The current writer state does not support writing a XAML namespace declaration.">현재 작성기 상태는 XAML 네임스페이스 선언 작성을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary vsli:raw="Writes a XAML start member node to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. Throws an exception if the current position of the XAML node stream is within another member, or if it is not in a scope or writer state where a start member can be written.">기본 <see cref="T:System.Xml.XmlWriter" /> 또는 <see cref="T:System.IO.TextWriter" />에 XAML 시작 멤버 노드를 씁니다. XAML 노드 스트림의 현재 위치가 다른 멤버 내에 있거나 시작 멤버를 쓸 수 있는 범위나 작성기 상태에 있지 않으면 예외를 throw합니다.</summary>
      <param name="property" vsli:raw="The XAML member identifier for the member to write.">작성할 멤버에 대한 XAML 멤버 식별자입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="property" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">
        <paramref name="property" />은 유효한 <see cref="T:System.Xaml.XamlMember" />이 아닙니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current position of the XAML node stream is invalid for writing a start member.">XAML 노드 스트림의 현재 위치는 시작 멤버를 작성하는 데 사용할 수 없습니다.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The writer state is not valid for writing a start member.  &#xA;  &#xA; -or-  &#xA;  &#xA; The XAML writer attempted to write a duplicate member. This exception may have a more precise inner exception.">기록기 상태가 시작 구성원을 작성하는 데 유효하지 않습니다.  
 또는  
 XAML 기록기가 중복 멤버를 쓰려고 시도했습니다. 이 예외에는 보다 정확한 내부 예외가 있을 수 있습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary vsli:raw="Writes a XAML start object node to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. Throws an exception if the current position of the XAML node stream is not in a scope where a start object can be written, or if the writer is not in a state that can write a start object.">기본 <see cref="T:System.Xml.XmlWriter" /> 또는 <see cref="T:System.IO.TextWriter" />에 XAML 시작 개체 노드를 씁니다. XAML 노드 스트림의 현재 위치가 시작 개체를 쓸 수 있는 범위에 없거나 작성기가 시작 개체를 쓸 수 있는 상태에 있지 않으면 예외를 throw합니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; (XAML type identifier) for the object to write.">쓸 개체에 대한 <see cref="T:System.Xaml.XamlType" />(XAML 형식 식별자)입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">
        <paramref name="type" />은 유효한 <see cref="T:System.Xaml.XamlType" />이 아닙니다.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current position of the XAML node stream is not valid for writing a new start object.">XAML 노드 스트림의 현재 위치는 새 시작 개체를 작성하는 데 사용할 수 없습니다.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The state of the XAML writer is not valid for writing a new start object.">XAML 작성기가 새 시작 개체를 작성할 수 없는 상태입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteValue(System.Object)">
      <summary vsli:raw="Writes a XAML value node to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. Throws an exception if the current position of the XAML node stream is invalid for writing a value, or the writer is in a state where a value cannot be written.">기본 <see cref="T:System.Xml.XmlWriter" /> 또는 <see cref="T:System.IO.TextWriter" />에 XAML 값 노드를 씁니다. XAML 노드 스트림의 현재 위치가 값을 쓰기에 올바른 위치가 아니거나 작성기가 값을 쓸 수 없는 상태에 있으면 예외를 throw합니다.</summary>
      <param name="value" vsli:raw="The value information to write.">작성할 값 정보입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current position of the XAML node stream is not valid for writing a value.">XAML 노드 스트림의 현재 위치는 값을 작성하는 데 사용할 수 없습니다.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The XAML writer state does not support the writing of a value node.">XAML 기록기 상태는 값 노드 내에서 지원하지 않습니다.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; specifies a value that is not null or a string.">
        <paramref name="value" />는 null 또는 문자열이 아닌 값을 지정합니다.</exception>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterException">
      <summary vsli:raw="The exception that is thrown by certain &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; APIs.">특정 <see cref="T:System.Xaml.XamlXmlWriter" /> API에 의해 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterException&quot; /&gt; class with a system-supplied message that describes the error.">오류를 설명하는 시스템 제공 메시지를 사용하여 <see cref="T:System.Xaml.XamlXmlWriterException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterException&quot; /&gt; class with serialized data.">serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlXmlWriterException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterException&quot; /&gt; class with a specified message that describes the error.">
        <see cref="T:System.Xaml.XamlXmlWriterException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Xaml.XamlXmlWriterException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterSettings">
      <summary vsli:raw="Provides initialization settings for the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; XAML writer implementation.">
        <see cref="T:System.Xaml.XamlXmlWriter" /> XAML 작성기 구현에 대한 초기화 설정을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterSettings&quot; /&gt; class.">
        <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.AssumeValidInput">
      <summary vsli:raw="Gets or sets a value that specifies whether the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; should always assume valid XAML input for purposes of duplicate resolution or other error checking.">중복 확인 또는 기타 오류 검사 시 <see cref="T:System.Xaml.XamlXmlWriter" />가 항상 유효한 XAML 입력을 가정해야 하는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; skips certain validation or error checks, such as throwing exceptions on duplicate members. &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; throws exceptions when invalid XAML is encountered. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlXmlWriter" />가 중복 멤버에 대해 예외를 throw하는 등의 특정 유효성 검사나 오류 검사를 건너뛰면 <see langword="true" />이고, <see cref="T:System.Xaml.XamlXmlWriter" />가 잘못된 XAML을 발견할 경우 예외를 throw하면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.CloseOutput">
      <summary vsli:raw="Gets or sets a value that specifies whether the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; should close immediately on &lt;see langword=&quot;Dispose&quot; /&gt; or other operations, or whether the XAML writer should instead write the buffer output before closing. Use this setting with caution; closing immediately can result in invalid XAML that cannot be loaded again.">
        <see cref="T:System.Xaml.XamlXmlWriter" />가 <see langword="Dispose" /> 또는 기타 작업 시 즉시 닫혀야 하는지 아니면 XAML 작성기가 닫히기 전에 버퍼 출력을 작성해야 하는지를 지정하는 값을 가져오거나 설정합니다. 즉시 닫으면 다시 로드할 수 없는 잘못된 XAML이 만들어질 수 있으므로 이 설정은 신중하게 사용해야 합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; immediately closes on a &lt;see langword=&quot;Dispose&quot; /&gt; or similar operations. &lt;see langword=&quot;false&quot; /&gt; if the remaining buffer output is written before the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; is released. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlXmlWriter" />가 <see langword="true" /> 또는 유사 작업 시 즉시 닫히면 <see langword="Dispose" />이고, <see cref="T:System.Xaml.XamlXmlWriter" />가 해제되기 전에 남은 버퍼 출력이 작성되면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.Copy">
      <summary vsli:raw="Returns a copy of this &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterSettings&quot; /&gt; instance.">이 <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 인스턴스의 복사본을 반환합니다.</summary>
      <returns vsli:raw="The returned copy.">반환된 복사본입니다.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.CodeDom</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary vsli:raw="Provides access to instances of the C# code generator and code compiler.">C# 코드 생성기 및 코드 컴파일러의 인스턴스에 액세스합니다.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.CSharp.CSharpCodeProvider&quot; /&gt; class.">
        <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.CSharp.CSharpCodeProvider&quot; /&gt; class by using the specified provider options.">지정된 공급자 옵션을 사용하여 <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="providerOptions" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; object that contains the provider options.">구성 파일의 공급자 옵션을 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary vsli:raw="Gets an instance of the C# code compiler.">C# 코드 컴파일러의 인스턴스를 가져옵니다.</summary>
      <returns vsli:raw="An instance of the C# &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; implementation.">구현된 C# <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary vsli:raw="Gets an instance of the C# code generator.">C# 코드 생성기 인스턴스를 가져옵니다.</summary>
      <returns vsli:raw="An instance of the C# &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; implementation.">구현된 C# <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />의 인스턴스입니다.</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary vsli:raw="Gets the file name extension to use when creating source code files.">소스 코드 파일을 만들 때 사용할 확장명을 가져옵니다.</summary>
      <returns vsli:raw="The file name extension to use for generated source code files.">생성된 소스 코드 파일에 사용할 확장명입니다.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">지정된 텍스트 작성기와 코드 생성기 옵션을 사용하여 지정된 클래스 멤버에 대한 코드를 생성합니다.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to generate code for.">코드를 생성할 <see cref="T:System.CodeDom.CodeTypeMember" />입니다.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">쓸 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="options" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; to use when generating the code.">코드를 생성할 때 사용할 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type of object.">지정된 개체 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />를 가져옵니다.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">형식 변환기를 검색할 개체의 형식입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">지정된 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />입니다.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary vsli:raw="Provides access to instances of the Visual Basic code generator and code compiler.">Visual Basic 코드 생성기 및 코드 컴파일러의 인스턴스에 액세스합니다.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.VisualBasic.VBCodeProvider&quot; /&gt; class.">
        <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.VisualBasic.VBCodeProvider&quot; /&gt; class by using the specified provider options.">지정된 공급자 옵션을 사용하여 <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="providerOptions" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; object that contains the provider options.">구성 파일의 공급자 옵션을 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary vsli:raw="Gets an instance of the Visual Basic code compiler.">Visual Basic 코드 컴파일러의 인스턴스를 가져옵니다.</summary>
      <returns vsli:raw="An instance of the Visual Basic &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; implementation.">구현된 Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary vsli:raw="Gets an instance of the Visual Basic code generator.">Visual Basic 코드 생성기 인스턴스를 가져옵니다.</summary>
      <returns vsli:raw="An instance of the Visual Basic &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; implementation.">구현된 Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />의 인스턴스입니다.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary vsli:raw="Gets the file name extension to use when creating source code files.">소스 코드 파일을 만들 때 사용할 확장명을 가져옵니다.</summary>
      <returns vsli:raw="The file name extension to use for generated source code files.">생성된 소스 코드 파일에 사용할 확장명입니다.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">지정된 텍스트 작성기와 코드 생성기 옵션을 사용하여 지정된 클래스 멤버에 대한 코드를 생성합니다.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to generate code for.">코드를 생성할 <see cref="T:System.CodeDom.CodeTypeMember" />입니다.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">쓸 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="options" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; to use when generating the code.">코드를 생성할 때 사용할 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type of object.">지정된 개체 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />를 가져옵니다.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">형식 변환기를 검색할 개체의 형식입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">지정된 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />입니다.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary vsli:raw="Gets a language features identifier.">언어 기능 식별자를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.LanguageOptions&quot; /&gt; that indicates special features of the language.">언어의 특수 기능을 나타내는 <see cref="T:System.CodeDom.Compiler.LanguageOptions" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary vsli:raw="Represents a reference to the value of an argument passed to a method.">메서드로 전달된 인수 값에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; class using the specified parameter name.">지정된 매개 변수 이름을 사용하여 <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parameterName" vsli:raw="The name of the parameter to reference.">참조할 매개 변수의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary vsli:raw="Gets or sets the name of the parameter this expression references.">이 식이 참조하는 매개 변수의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the parameter to reference.">참조할 매개 변수의 이름입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary vsli:raw="Represents an expression that creates an array.">배열을 만드는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and code expression indicating the number of indexes for the array.">지정된 배열 데이터 형식과 배열의 인덱스 수를 나타내는 코드 식을 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; indicating the data type of the array to create.">만들 배열의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">만들 배열의 인덱스 수를 나타내는 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and initialization expressions.">지정된 배열 데이터 형식과 초기화 식을 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the array to create.">만들 배열의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">배열을 초기화하는 데 사용하는 식 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and number of indexes for the array.">지정된 배열 데이터 형식과 배열의 인덱스 수를 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; indicating the data type of the array to create.">만들 배열의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">만들 배열의 인덱스 수입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and code expression indicating the number of indexes for the array.">지정된 배열 데이터 형식 이름과 배열의 인덱스 수를 나타내는 코드 식을 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">만들 배열의 데이터 형식 이름입니다.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">만들 배열의 인덱스 수를 나타내는 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and initializers.">지정된 배열 데이터 형식 이름과 이니셜라이저를 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">만들 배열의 데이터 형식 이름입니다.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">배열을 초기화하는 데 사용하는 식 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and number of indexes for the array.">지정된 배열 데이터 형식 이름과 배열의 인덱스 수를 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">만들 배열의 데이터 형식 이름입니다.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">만들 배열의 인덱스 수입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and code expression indicating the number of indexes for the array.">지정된 배열 데이터 형식과 배열의 인덱스 수를 나타내는 코드 식을 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">만들 배열의 데이터 형식입니다.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">만들 배열의 인덱스 수를 나타내는 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and initializers.">지정된 배열 데이터 형식과 이니셜라이저를 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">만들 배열의 데이터 형식입니다.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">배열을 초기화하는 데 사용하는 식 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and number of indexes for the array.">지정된 배열 데이터 형식과 배열의 인덱스 수를 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">만들 배열의 데이터 형식입니다.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">만들 배열의 인덱스 수입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary vsli:raw="Gets or sets the type of array to create.">만들 배열의 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array.">배열의 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary vsli:raw="Gets the initializers with which to initialize the array.">배열을 초기화하는 이니셜라이저를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the initialization values.">초기화 값을 나타내는 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary vsli:raw="Gets or sets the number of indexes in the array.">배열의 인덱스 수를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The number of indexes in the array.">배열의 인덱스 수입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary vsli:raw="Gets or sets the expression that indicates the size of the array.">배열의 크기를 나타내는 식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the size of the array.">배열의 크기를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary vsli:raw="Represents a reference to an index of an array.">배열의 인덱스에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; class using the specified target object and indexes.">지정된 대상 개체와 인덱스를 사용하여 <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the array the indexer targets.">해당 인덱서의 대상 배열을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="indices" vsli:raw="The index or indexes to reference.">참조할 인덱스입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary vsli:raw="Gets or sets the index or indexes of the indexer expression.">인덱서 식의 인덱스를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the index or indexes of the indexer expression.">인덱서 식의 인덱스를 나타내는 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary vsli:raw="Gets or sets the target object of the array indexer.">배열 인덱서의 대상 개체를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the array being indexed.">인덱싱되는 배열을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary vsli:raw="Represents a simple assignment statement.">단순 할당문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeAssignStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; class using the specified expressions.">지정된 식을 사용하여 <see cref="T:System.CodeDom.CodeAssignStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="left" vsli:raw="The variable to assign to.">할당 대상이 되는 변수입니다.</param>
      <param name="right" vsli:raw="The value to assign.">할당할 값입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary vsli:raw="Gets or sets the expression representing the object or reference to assign to.">할당 대상이 되는 참조나 개체를 나타내는 식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object or reference to assign to.">할당 대상이 되는 참조나 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary vsli:raw="Gets or sets the expression representing the object or reference to assign.">할당할 참조나 개체를 나타내는 식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object or reference to assign.">할당할 참조나 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary vsli:raw="Represents a statement that attaches an event-handler delegate to an event.">이벤트 처리기 대리자를 이벤트에 연결하는 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class using the specified event and delegate.">지정한 이벤트 로그를 사용하여 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="eventRef" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to attach an event handler to.">이벤트 처리기를 연결할 이벤트를 나타내는 <see cref="T:System.CodeDom.CodeEventReferenceExpression" />입니다.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler.">새 이벤트 처리기를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class using the specified object containing the event, event name, and event-handler delegate.">해당 이벤트, 이벤트 이름 및 이벤트 처리기 대리자를 포함하는 지정된 개체를 사용하여 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">해당 이벤트가 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="eventName" vsli:raw="The name of the event to attach an event handler to.">이벤트 처리기를 연결할 이벤트의 이름입니다.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler.">새 이벤트 처리기를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary vsli:raw="Gets or sets the event to attach an event-handler delegate to.">이벤트 처리기 대리자와 연결할 이벤트를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to attach an event handler to.">이벤트 처리기를 연결할 이벤트를 나타내는 <see cref="T:System.CodeDom.CodeEventReferenceExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary vsli:raw="Gets or sets the new event-handler delegate to attach to the event.">이벤트와 연결할 새 이벤트 처리기 대리자를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler to attach.">연결할 새 이벤트 처리기를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary vsli:raw="Represents an argument used in a metadata attribute declaration.">메타데이터 특성 선언에 사용되는 인수를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class using the specified value.">지정된 값을 사용하여 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the value of the argument.">인수의 값을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class using the specified name and value.">지정된 이름과 값을 사용하여 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the attribute property the argument applies to.">인수가 적용되는 특성 속성의 이름입니다.</param>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the value of the argument.">인수의 값을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary vsli:raw="Gets or sets the name of the attribute.">특성의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the attribute property the argument is for.">인수가 적용되는 특성 속성의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary vsli:raw="Gets or sets the value for the attribute argument.">특성 인수의 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the value for the attribute argument.">특성 인수의 값을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class containing the elements of the specified source collection.">지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to the collection.">지정된 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to add.">추가할 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체입니다.</param>
      <returns vsli:raw="The index at which the new element was inserted.">새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; array to the end of the collection.">지정된 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; object to the end of the collection.">다른 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 개체의 내용을 컬렉션 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object.">컬렉션에 지정된 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">지정한 인덱스에서 시작하는 1차원 <see cref="T:System.Array" /> 인스턴스에 컬렉션 개체를 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">대상 배열이 다차원 배열인 경우  
또는 
<see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object in the collection, if it exists in the collection.">컬렉션에 지정된 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체입니다.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">지정된 개체가 컬렉션에 있으면 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object into the collection at the specified index.">지정된 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">0부터 시작하는 인덱스이며 지정된 개체를 삽입해야 합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to insert.">삽입할 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object at the specified index in the collection.">컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">액세스할 컬렉션의 인덱스입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; at each valid index.">유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeAttributeArgument" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object from the collection.">컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary vsli:raw="Represents an attribute declaration.">특성 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified code type reference.">지정된 코드 형식 참조를 사용하여 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the attribute.">특성을 식별하는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified code type reference and arguments.">지정된 코드 형식 참조 및 인수를 사용하여 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the attribute.">특성을 식별하는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="arguments" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the arguments for the attribute.">특성에 대한 인수를 포함하는 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified name.">지정한 이름을 사용하여 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the attribute.">특성 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified name and arguments.">지정된 이름과 인수를 사용하여 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the attribute.">특성 이름입니다.</param>
      <param name="arguments" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the arguments for the attribute.">특성에 대한 인수를 포함하는 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 형식의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary vsli:raw="Gets the arguments for the attribute.">특성의 인수를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; that contains the arguments for the attribute.">특성에 대한 인수를 포함하는 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary vsli:raw="Gets the code type reference for the code attribute declaration.">코드 특성 선언에 대한 코드 형식 참조를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeTypeReference" />을 식별하는 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary vsli:raw="Gets or sets the name of the attribute being declared.">선언하는 특성의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the attribute.">특성 이름입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class containing the elements of the specified source collection.">지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object with the specified value to the collection.">지정된 값을 갖는 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to add.">추가할 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체입니다.</param>
      <returns vsli:raw="The index at which the new element was inserted.">새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; array to the end of the collection.">지정된 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; object to the end of the collection.">다른 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 개체의 내용을 컬렉션 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Gets or sets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object.">컬렉션에 지정된 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체가 들어 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to locate.">찾을 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">지정한 인덱스에서 시작하는 1차원 <see cref="T:System.Array" /> 인스턴스에 컬렉션 개체를 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">대상 배열이 다차원 배열인 경우  
또는 
<see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object in the collection, if it exists in the collection.">컬렉션에 지정된 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체입니다.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">지정된 개체의 컬렉션에 인덱스가 있으면 반환 값은 해당 인덱스이고 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object into the collection at the specified index.">지정된 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">0부터 시작하는 인덱스이며 지정된 개체를 삽입해야 합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to insert.">삽입할 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object at the specified index.">지정된 인덱스에서 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">액세스할 컬렉션의 인덱스입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; at each valid index.">유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object from the collection.">컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary vsli:raw="Represents a reference to the base class.">기본 클래스에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBaseReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary vsli:raw="Represents an expression that consists of a binary operation between two expressions.">두 식 사이의 이항 연산으로 구성된 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; class using the specified parameters.">지정된 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; on the left of the operator.">연산자 왼쪽에 있는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="op" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorType&quot; /&gt; indicating the type of operator.">연산자의 형식을 나타내는 <see cref="T:System.CodeDom.CodeBinaryOperatorType" />입니다.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; on the right of the operator.">연산자 오른쪽에 있는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary vsli:raw="Gets or sets the code expression on the left of the operator.">연산자 왼쪽에 있는 코드 식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the left operand.">왼쪽 피연산자를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary vsli:raw="Gets or sets the operator in the binary operator expression.">이항 연산자 식에서 연산자를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorType&quot; /&gt; that indicates the type of operator in the expression.">식에 포함된 연산자의 형식을 나타내는 <see cref="T:System.CodeDom.CodeBinaryOperatorType" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary vsli:raw="Gets or sets the code expression on the right of the operator.">연산자 오른쪽에 있는 코드 식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the right operand.">오른쪽 피연산자를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary vsli:raw="Defines identifiers for supported binary operators.">지원되는 이항 연산자의 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary vsli:raw="Addition operator.">더하기 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary vsli:raw="Assignment operator.">대입 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary vsli:raw="Bitwise and operator.">비트 AND 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary vsli:raw="Bitwise or operator.">비트 논리합 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary vsli:raw="Boolean and operator. This represents a short circuiting operator. A short circuiting operator will evaluate only as many expressions as necessary before returning a correct value.">부울 AND 연산자입니다. 이 연산자는 단락(short circuit) 연산자를 나타냅니다. 단락(short circuit) 연산자는 필요한 만큼의 식만 평가한 다음 올바른 값을 반환합니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary vsli:raw="Boolean or operator. This represents a short circuiting operator. A short circuiting operator will evaluate only as many expressions as necessary before returning a correct value.">부울 OR 연산자입니다. 이 연산자는 단락(short circuit) 연산자를 나타냅니다. 단락(short circuit) 연산자는 필요한 만큼의 식만 평가한 다음 올바른 값을 반환합니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary vsli:raw="Division operator.">나누기 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary vsli:raw="Greater than operator.">보다 큼 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary vsli:raw="Greater than or equal operator.">크거나 같음 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary vsli:raw="Identity equal operator.">ID 같음 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary vsli:raw="Identity not equal operator.">ID 같지 않음 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary vsli:raw="Less than operator.">보다 작음 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary vsli:raw="Less than or equal operator.">작거나 같음 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary vsli:raw="Modulus operator.">나머지 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary vsli:raw="Multiplication operator.">곱하기 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary vsli:raw="Subtraction operator.">빼기 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary vsli:raw="Value equal operator.">값 같음 연산자입니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary vsli:raw="Represents an expression cast to a data type or interface.">데이터 형식 또는 인터페이스로 변환되는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeCastExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">지정된 대상 형식 및 식을 사용하여 <see cref="T:System.CodeDom.CodeCastExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the destination type of the cast.">변환 대상 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">변환할 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">지정된 대상 형식 및 식을 사용하여 <see cref="T:System.CodeDom.CodeCastExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetType" vsli:raw="The name of the destination type of the cast.">변환 대상 형식의 이름입니다.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">변환할 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">지정된 대상 형식 및 식을 사용하여 <see cref="T:System.CodeDom.CodeCastExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetType" vsli:raw="The destination data type of the cast.">변환 대상 데이터 형식입니다.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">변환할 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary vsli:raw="Gets or sets the expression to cast.">변환할 식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the code to cast.">변환할 코드를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary vsli:raw="Gets or sets the destination type of the cast.">변환 대상 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the destination type to cast to.">변환할 대상 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary vsli:raw="Represents a &lt;see langword=&quot;catch&quot; /&gt; exception block of a &lt;see langword=&quot;try/catch&quot; /&gt; statement.">
        <see langword="catch" /> 문의 <see langword="try/catch" /> 예외 블록을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeCatchClause" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception.">예외에 대해 지정된 지역 변수 이름을 사용하여 <see cref="T:System.CodeDom.CodeCatchClause" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">예외에 대해 catch절에 선언된 지역 변수의 이름입니다. 이 옵션은 선택적입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception and exception type.">예외 및 예외 형식에 대해 지정된 지역 변수 이름을 사용하여 <see cref="T:System.CodeDom.CodeCatchClause" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">예외에 대해 catch절에 선언된 지역 변수의 이름입니다. 이 옵션은 선택적입니다.</param>
      <param name="catchExceptionType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of exception to catch.">catch할 예외의 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception, exception type and statement collection.">지정된 예외 형식, 예외의 지역 변수 이름 및 문 컬렉션을 사용하여 <see cref="T:System.CodeDom.CodeCatchClause" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">예외에 대해 catch절에 선언된 지역 변수의 이름입니다. 이 옵션은 선택적입니다.</param>
      <param name="catchExceptionType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of exception to catch.">catch할 예외의 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="statements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that represent the contents of the catch block.">catch 블록의 내용을 나타내는 <see cref="T:System.CodeDom.CodeStatement" /> 개체의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary vsli:raw="Gets or sets the type of the exception to handle with the catch block.">catch 블록으로 처리할 예외의 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the exception to handle.">처리할 예외의 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary vsli:raw="Gets or sets the variable name of the exception that the &lt;see langword=&quot;catch&quot; /&gt; clause handles.">
        <see langword="catch" /> 절에서 처리하는 예외의 변수 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name for the exception variable that the &lt;see langword=&quot;catch&quot; /&gt; clause handles.">
        <see langword="catch" /> 절에서 처리하는 예외 변수의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary vsli:raw="Gets the statements within the catch block.">catch 블록에서 문을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements within the catch block.">catch 블록에 문을 포함하는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeCatchClause" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeCatchClause" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class containing the elements of the specified source collection.">지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeCatchClauseCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to the collection.">지정된 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to add.">추가할 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체입니다.</param>
      <returns vsli:raw="The index at which the new element was inserted.">새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; array to the end of the collection.">지정된 <see cref="T:System.CodeDom.CodeCatchClause" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeCatchClause" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; object to the end of the collection.">다른 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 개체의 내용을 컬렉션 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeCatchClauseCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object.">컬렉션에 지정된 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">지정한 인덱스에서 시작하는 1차원 <see cref="T:System.Array" /> 인스턴스에 컬렉션 개체를 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">대상 배열이 다차원 배열인 경우  
또는 
<see cref="T:System.CodeDom.CodeCatchClauseCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object in the collection, if it exists in the collection.">컬렉션에 지정된 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체입니다.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">지정된 개체가 컬렉션에 있으면 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object into the collection at the specified index.">지정된 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">0부터 시작하는 인덱스이며 지정된 개체를 삽입해야 합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to insert.">삽입할 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object at the specified index in the collection.">컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">액세스할 컬렉션의 인덱스입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object at each valid index.">유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object from the collection.">컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary vsli:raw="Represents a code checksum pragma code entity.">코드 체크섬 pragma 코드 엔터티를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeChecksumPragma&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeChecksumPragma" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeChecksumPragma&quot; /&gt; class using a file name, a GUID representing the checksum algorithm, and a byte stream representing the checksum data.">파일 이름, 체크섬 알고리즘을 나타내는 GUID 및 체크섬 데이터를 나타내는 바이트 스트림을 사용하여 <see cref="T:System.CodeDom.CodeChecksumPragma" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName" vsli:raw="The path to the checksum file.">체크섬 파일에 대한 경로입니다.</param>
      <param name="checksumAlgorithmId" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that identifies the checksum algorithm to use.">사용할 체크섬 알고리즘을 식별하는 <see cref="T:System.Guid" />입니다.</param>
      <param name="checksumData" vsli:raw="A byte array that contains the checksum data.">체크섬 데이터가 포함된 바이트 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary vsli:raw="Gets or sets a GUID that identifies the checksum algorithm to use.">사용할 체크섬 알고리즘을 식별하는 GUID를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that identifies the checksum algorithm to use.">사용할 체크섬 알고리즘을 식별하는 <see cref="T:System.Guid" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary vsli:raw="Gets or sets the value of the data for the checksum calculation.">체크섬 계산에 사용할 데이터 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A byte array that contains the data for the checksum calculation.">체크섬 계산에 사용할 데이터가 포함된 바이트 배열입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary vsli:raw="Gets or sets the path to the checksum file.">체크섬 파일에 대한 경로를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The path to the checksum file.">체크섬 파일에 대한 경로입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary vsli:raw="Represents a comment.">주석을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeComment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class with the specified text as contents.">지정된 텍스트를 내용으로 사용하여 <see cref="T:System.CodeDom.CodeComment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="text" vsli:raw="The contents of the comment.">주석의 내용입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class using the specified text and documentation comment flag.">지정된 텍스트 및 문서 주석 플래그를 사용하여 <see cref="T:System.CodeDom.CodeComment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="text" vsli:raw="The contents of the comment.">주석의 내용입니다.</param>
      <param name="docComment" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">주석이 문서 주석이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary vsli:raw="Gets or sets a value that indicates whether the comment is a documentation comment.">주석이 문서 주석인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">주석이 문서 주석이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary vsli:raw="Gets or sets the text of the comment.">주석의 텍스트를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A string containing the comment text.">주석 텍스트가 들어 있는 문자열입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary vsli:raw="Represents a statement consisting of a single comment.">단일 주석으로 구성되는 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeCommentStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified comment.">지정된 주석을 사용하여 <see cref="T:System.CodeDom.CodeCommentStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="comment" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; that indicates the comment.">주석을 나타내는 <see cref="T:System.CodeDom.CodeComment" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified text as contents.">지정된 텍스트를 내용으로 사용하여 <see cref="T:System.CodeDom.CodeCommentStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="text" vsli:raw="The contents of the comment.">주석의 내용입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified text and documentation comment flag.">지정된 텍스트 및 문서 주석 플래그를 사용하여 <see cref="T:System.CodeDom.CodeCommentStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="text" vsli:raw="The contents of the comment.">주석의 내용입니다.</param>
      <param name="docComment" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">주석이 문서 주석이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary vsli:raw="Gets or sets the contents of the comment.">주석의 내용을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; that indicates the comment.">주석을 나타내는 <see cref="T:System.CodeDom.CodeComment" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeCommentStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class containing the elements of the specified source collection.">지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeCommentStatementCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to the collection.">지정된 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to add.">추가할 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체입니다.</param>
      <returns vsli:raw="The index at which the new element was inserted.">새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; array to the end of the collection.">지정된 <see cref="T:System.CodeDom.CodeCommentStatement" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeCommentStatement" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; object to the end of the collection.">다른 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 개체의 내용을 컬렉션 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeCommentStatementCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object.">컬렉션에 지정된 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; to search for in the collection.">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeCommentStatement" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; beginning at the specified index.">해당 컬렉션 개체를 지정된 인덱스에서 시작하여 지정된 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">대상 배열이 다차원 배열인 경우  
또는 
<see cref="T:System.CodeDom.CodeCommentStatementCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object in the collection, if it exists in the collection.">컬렉션에 지정된 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to locate.">찾을 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체입니다.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">지정된 개체가 컬렉션에 있으면 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Inserts a &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object into the collection at the specified index.">컬렉션의 지정된 인덱스에 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체를 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index where the item should be inserted.">항목을 삽입할 인덱스이며 0부터 시작합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to insert.">삽입할 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object at the specified index in the collection.">컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">액세스할 컬렉션의 인덱스입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object at each valid index.">유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object from the collection.">컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary vsli:raw="Provides a container for a CodeDOM program graph.">CodeDOM 프로그램 그래프에 대한 컨테이너를 제공합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary vsli:raw="Gets a collection of custom attributes for the generated assembly.">생성된 어셈블리에 대한 사용자 지정 특성 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes for the generated assembly.">생성된 어셈블리에 대한 사용자 지정 특성을 나타내는 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">종료 지시문이 들어 있는 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">끝 지시문이 포함된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary vsli:raw="Gets the collection of namespaces.">네임스페이스의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; that indicates the namespaces that the compile unit uses.">컴파일 단위가 사용하는 네임스페이스를 나타내는 <see cref="T:System.CodeDom.CodeNamespaceCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary vsli:raw="Gets the referenced assemblies.">참조된 어셈블리를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.StringCollection&quot; /&gt; that contains the file names of the referenced assemblies.">참조된 어셈블리의 파일 이름을 포함하는 <see cref="T:System.Collections.Specialized.StringCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">시작 지시문이 들어 있는 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">시작 지시문이 포함된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary vsli:raw="Represents a conditional branch statement, typically represented as an &lt;see langword=&quot;if&quot; /&gt; statement.">조건 분기 문을 나타내며, 일반적으로 <see langword="if" /> 문으로 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeConditionStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class using the specified condition and statements.">지정된 조건과 문을 사용하여 <see cref="T:System.CodeDom.CodeConditionStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="condition" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to evaluate.">확인할 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="trueStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;true&quot; /&gt;.">조건이 <see langword="true" />인 경우 실행할 문이 들어 있는 <see cref="T:System.CodeDom.CodeStatement" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class using the specified condition and statements.">지정된 조건과 문을 사용하여 <see cref="T:System.CodeDom.CodeConditionStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="condition" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the condition to evaluate.">확인할 조건을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="trueStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;true&quot; /&gt;.">조건이 <see langword="true" />인 경우 실행할 문이 들어 있는 <see cref="T:System.CodeDom.CodeStatement" /> 형식의 배열입니다.</param>
      <param name="falseStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;false&quot; /&gt;.">조건이 <see langword="false" />인 경우 실행할 문이 들어 있는 <see cref="T:System.CodeDom.CodeStatement" /> 형식의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary vsli:raw="Gets or sets the expression to evaluate &lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 또는 <see langword="false" />인지 확인할 식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to evaluate &lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 또는 <see langword="false" />인지 확인할 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary vsli:raw="Gets the collection of statements to execute if the conditional expression evaluates to &lt;see langword=&quot;false&quot; /&gt;.">조건식이 <see langword="false" />인 경우 실행할 문의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements to execute if the conditional expression evaluates to &lt;see langword=&quot;false&quot; /&gt;.">조건식이 <see langword="false" />인 경우 실행할 문이 들어 있는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary vsli:raw="Gets the collection of statements to execute if the conditional expression evaluates to &lt;see langword=&quot;true&quot; /&gt;.">조건식이 <see langword="true" />인 경우 실행할 문의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements to execute if the conditional expression evaluates to &lt;see langword=&quot;true&quot; /&gt;.">조건식이 <see langword="true" />인 경우 실행할 문이 들어 있는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary vsli:raw="Represents a declaration for an instance constructor of a type.">형식의 인스턴스 생성자에 대한 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConstructor&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeConstructor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary vsli:raw="Gets the collection of base constructor arguments.">기본 생성자 인수의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the base constructor arguments.">기본 생성자 인수를 포함하는 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary vsli:raw="Gets the collection of chained constructor arguments.">연결된 생성자 인수를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the chained constructor arguments.">연결된 생성자 인수를 포함하는 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary vsli:raw="Represents a reference to a default value.">기본값에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDefaultValueExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDefaultValueExpression&quot; /&gt; class using the specified code type reference.">지정된 코드 형식 참조를 사용하여 <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that specifies the reference to a value type.">값 형식에 대한 참조를 지정하는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary vsli:raw="Gets or sets the data type reference for a default value.">기본값의 데이터 형식 참조를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; object representing a data type that has a default value.">기본값이 있는 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" /> 개체입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary vsli:raw="Represents an expression that creates a delegate.">대리자를 만드는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateCreateExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateCreateExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the delegate.">대리자의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object containing the event-handler method.">이벤트 처리기 메서드가 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="methodName" vsli:raw="The name of the event-handler method.">이벤트 처리기 메서드의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary vsli:raw="Gets or sets the data type of the delegate.">대리자의 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the delegate.">대리자의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary vsli:raw="Gets or sets the name of the event handler method.">이벤트 처리기 메서드의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the event handler method.">이벤트 처리기 메서드의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the event-handler method.">이벤트 처리기 메서드가 들어 있는 개체를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object containing the event-handler method.">이벤트 처리기 메서드가 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary vsli:raw="Represents an expression that raises an event.">이벤트를 발생시키는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class using the specified target object.">지정된 대상 개체를 사용하여 <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object.">대상 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class using the specified target object and parameters.">지정된 대상 개체와 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object.">대상 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters.">매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpression" /> 개체의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary vsli:raw="Gets or sets the parameters to pass to the event handling methods attached to the event.">이벤트와 연결된 이벤트 처리 메서드에 전달할 매개 변수를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the parameters to pass to the event handling methods attached to the event.">이벤트와 연결된 이벤트 처리 메서드에 전달할 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary vsli:raw="Gets or sets the event to invoke.">호출할 이벤트를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event to invoke.">호출할 이벤트를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary vsli:raw="Represents an expression used as a method invoke parameter along with a reference direction indicator.">메서드에서 참조 방향 표시기와 함께 매개 변수를 호출할 때 사용되는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectionExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeDirectionExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectionExpression&quot; /&gt; class using the specified field direction and expression.">지정된 필드 방향과 식을 사용하여 <see cref="T:System.CodeDom.CodeDirectionExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt; that indicates the field direction of the expression.">식의 필드 방향을 나타내는 <see cref="T:System.CodeDom.FieldDirection" />입니다.</param>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the code expression to represent.">나타낼 코드 식을 지정하는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary vsli:raw="Gets or sets the field direction for this direction expression.">이 방향 식에 대한 필드 방향을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt; that indicates the field direction for this direction expression.">이 방향 식에 대한 필드 방향을 나타내는 <see cref="T:System.CodeDom.FieldDirection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary vsli:raw="Gets or sets the code expression to represent.">나타낼 코드 식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to represent.">나타낼 식을 지정하는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary vsli:raw="Serves as the base class for code directive classes.">코드 지시문 클래스의 기본 클래스 역할을 합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeDirective" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeDirective" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class with the code directive objects in the specified array.">지정된 배열의 코드 지시문 개체를 사용하여 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeDirective" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class with the elements in the specified code directive collection.">지정된 코드 지시문 컬렉션의 요소를 사용하여 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to the collection.">지정된 <see cref="T:System.CodeDom.CodeDirective" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to add.">추가할 <see cref="T:System.CodeDom.CodeDirective" /> 개체입니다.</param>
      <returns vsli:raw="The index position at which the new element was inserted.">새 요소가 삽입된 인덱스 위치입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary vsli:raw="Adds an array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to the end of the collection.">
        <see cref="T:System.CodeDom.CodeDirective" /> 개체의 배열을 컬렉션의 끝에 추가합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to add to the collection.">컬렉션에 추가할 <see cref="T:System.CodeDom.CodeDirective" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 가 <see langword="null" />일 수 있습니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object to the end of the collection.">지정된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체의 내용을 컬렉션의 끝에 추가합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to add to the collection.">컬렉션에 추가할 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체가 포함된 <see cref="T:System.CodeDom.CodeDirective" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object.">컬렉션에 지정된 <see cref="T:System.CodeDom.CodeDirective" /> 개체가 포함되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to search for in the collection.">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeDirective" /> 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary vsli:raw="Copies the contents of the collection to a one-dimensional array beginning at the specified index.">지정된 인덱스에서 시작하는 1차원 배열에 컬렉션의 내용을 복사합니다.</summary>
      <param name="array" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; that is the destination of the values copied from the collection.">컬렉션에서 복사된 값의 대상인 <see cref="T:System.CodeDom.CodeDirective" /> 형식의 배열입니다.</param>
      <param name="index" vsli:raw="The index in the array at which to begin inserting collection objects.">컬렉션 개체의 삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; is greater than the available space between the index of the target array specified by &lt;paramref name=&quot;index&quot; /&gt; and the end of the target array.">대상 배열이 다차원 배열인 경우  
또는 
<see cref="T:System.CodeDom.CodeDirectiveCollection" />의 요소 수가 <paramref name="index" />에서 지정하는 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the target array's minimum index.">
        <paramref name="index" />가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object, if it exists in the collection.">지정된 <see cref="T:System.CodeDom.CodeDirective" /> 개체가 컬렉션에 있는 경우 해당 개체의 인덱스를 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeDirective" /> 개체입니다.</param>
      <returns vsli:raw="The index position in the collection of the specified object, if found; otherwise, -1.">지정된 개체의 컬렉션에 인덱스 위치가 있으면 해당 인덱스 위치이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object into the collection at the specified index.">지정된 <see cref="T:System.CodeDom.CodeDirective" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index position where the specified object should be inserted.">지정된 개체를 삽입해야 하는 인덱스 위치(0부터 시작)입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to insert.">삽입할 <see cref="T:System.CodeDom.CodeDirective" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.CollectionBase.Count&quot; /&gt;.">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 <see cref="P:System.Collections.CollectionBase.Count" />보다 큰 경우</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object at the specified index in the collection.">컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeDirective" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index position to access.">액세스할 인덱스 위치입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; at the index position.">인덱스 위치에 있는 <see cref="T:System.CodeDom.CodeDirective" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the valid range of index positions for the collection.">
        <paramref name="index" />가 컬렉션의 유효한 인덱스 위치 범위를 벗어난 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object from the collection.">컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeDirective" /> 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeDirective" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary vsli:raw="Represents the entry point method of an executable.">실행 파일의 진입점 메서드를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEntryPointMethod&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeEntryPointMethod" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary vsli:raw="Represents a reference to an event.">이벤트에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; class using the specified target object and event name.">지정된 대상 개체와 이벤트 이름을 사용하여 <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">해당 이벤트가 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="eventName" vsli:raw="The name of the event to reference.">참조할 이벤트의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary vsli:raw="Gets or sets the name of the event.">이벤트의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the event.">이벤트의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the event.">해당 이벤트가 들어 있는 개체를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">해당 이벤트가 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary vsli:raw="Represents a code expression. This is a base class for other code expression objects that is never instantiated.">코드 식을 나타냅니다. 이 클래스는 초기화되지 않는 다른 코드 식 개체의 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeExpression" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeExpression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class containing the elements of the specified source collection.">지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to the collection.">지정된 <see cref="T:System.CodeDom.CodeExpression" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to add.">추가할 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</param>
      <returns vsli:raw="The index at which the new element was inserted.">새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">지정된 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeExpression" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; object to the end of the collection.">다른 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 개체의 내용을 컬렉션 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object.">컬렉션에 지정된 <see cref="T:System.CodeDom.CodeExpression" /> 개체가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">지정한 인덱스에서 시작하는 1차원 <see cref="T:System.Array" /> 인스턴스에 컬렉션 개체를 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">대상 배열이 다차원 배열인 경우  
또는 
<see cref="T:System.CodeDom.CodeExpressionCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object in the collection, if it exists in the collection.">컬렉션에 지정된 <see cref="T:System.CodeDom.CodeExpression" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">지정된 개체가 컬렉션에 있으면 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object into the collection at the specified index.">지정된 <see cref="T:System.CodeDom.CodeExpression" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">0부터 시작하는 인덱스이며 지정된 개체를 삽입해야 합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to insert.">삽입할 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object at the specified index in the collection.">컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeExpression" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the collection to access.">액세스할 컬렉션의 0부터 시작하는 인덱스입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object at each valid index.">유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object from the collection.">컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeExpression" /> 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary vsli:raw="Represents a statement that consists of a single expression.">단일 식으로 구성된 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeExpressionStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionStatement&quot; /&gt; class by using the specified expression.">지정된 식을 사용하여 <see cref="T:System.CodeDom.CodeExpressionStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; for the statement.">문에 대한 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary vsli:raw="Gets or sets the expression for the statement.">문에 대한 식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression for the statement.">문에 대한 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary vsli:raw="Represents a reference to a field.">필드에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeFieldReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeFieldReferenceExpression&quot; /&gt; class using the specified target object and field name.">지정된 대상 개체와 필드 이름을 사용하여 <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the field.">해당 필드가 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="fieldName" vsli:raw="The name of the field.">필드의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary vsli:raw="Gets or sets the name of the field to reference.">참조할 필드의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A string containing the field name.">필드 이름을 포함하는 문자열입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the field to reference.">참조할 필드가 들어 있는 개체를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the field to reference.">참조할 필드가 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;goto&quot; /&gt; statement.">
        <see langword="goto" /> 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeGotoStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeGotoStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeGotoStatement&quot; /&gt; class using the specified label name.">지정된 레이블 이름을 사용하여 <see cref="T:System.CodeDom.CodeGotoStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="label" vsli:raw="The name of the label at which to continue program execution.">프로그램 실행을 계속할 위치의 레이블 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;Label&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="Label" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary vsli:raw="Gets or sets the name of the label at which to continue program execution.">프로그램 실행을 계속할 위치의 레이블 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A string that indicates the name of the label at which to continue program execution.">프로그램 실행을 계속할 위치의 레이블 이름을 나타내는 문자열입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The label cannot be set because &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.">
        <paramref name="value" />가 <see langword="null" /> 또는 빈 문자열이기 때문에 레이블을 설정할 수 없습니다.</exception>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary vsli:raw="Represents a reference to an indexer property of an object.">개체의 인덱서 속성에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIndexerExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeIndexerExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIndexerExpression&quot; /&gt; class using the specified target object and index.">지정된 대상 개체와 인덱스를 사용하여 <see cref="T:System.CodeDom.CodeIndexerExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject" vsli:raw="The target object.">대상 개체입니다.</param>
      <param name="indices" vsli:raw="The index or indexes of the indexer expression.">인덱서 식의 인덱스입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary vsli:raw="Gets the collection of indexes of the indexer expression.">인덱서 식의 인덱스 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the index or indexes of the indexer expression.">인덱서 식의 인덱스를 나타내는 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary vsli:raw="Gets or sets the target object that can be indexed.">인덱스 작업을 수행할 수 있는 대상 개체를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the indexer object.">인덱서 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;for&quot; /&gt; statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop.">테스트 식을 반복 조건으로 사용하여 <see langword="for" /> 문 또는 문의 블록을 통한 루프를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIterationStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeIterationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIterationStatement&quot; /&gt; class using the specified parameters.">지정된 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeIterationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="initStatement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the loop initialization statement.">루프 초기화 문이 포함된 <see cref="T:System.CodeDom.CodeStatement" />입니다.</param>
      <param name="testExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; containing the expression to test for exit condition.">종료 조건을 테스트할 식이 포함된 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="incrementStatement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the per-cycle increment statement.">주기별 증분 문이 포함된 <see cref="T:System.CodeDom.CodeStatement" />입니다.</param>
      <param name="statements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements within the loop.">루프 내의 문이 포함된 <see cref="T:System.CodeDom.CodeStatement" /> 형식의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary vsli:raw="Gets or sets the statement that is called after each loop cycle.">각 루프 주기 다음에 호출되는 문을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the per cycle increment statement.">주기별 증분 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary vsli:raw="Gets or sets the loop initialization statement.">루프 초기화 문을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the loop initialization statement.">루프 초기화 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary vsli:raw="Gets the collection of statements to be executed within the loop.">루프 내에서 실행되는 문의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the statements within the loop.">루프 내의 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" /> 형식의 배열입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary vsli:raw="Gets or sets the expression to test as the condition that continues the loop.">루프를 계속할 조건으로 테스트할 식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to test.">테스트할 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary vsli:raw="Represents a labeled statement or a stand-alone label.">레이블 문 또는 독립 실행형 레이블을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeLabeledStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class using the specified label name.">지정된 레이블 이름을 사용하여 <see cref="T:System.CodeDom.CodeLabeledStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="label" vsli:raw="The name of the label.">레이블의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class using the specified label name and statement.">지정된 레이블 이름과 문을 사용하여 <see cref="T:System.CodeDom.CodeLabeledStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="label" vsli:raw="The name of the label.">레이블의 이름입니다.</param>
      <param name="statement" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to associate with the label.">레이블에 연결할 <see cref="T:System.CodeDom.CodeStatement" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary vsli:raw="Gets or sets the name of the label.">레이블의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the label.">레이블의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary vsli:raw="Gets or sets the optional associated statement.">선택적인 관련 문을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the statement associated with the label.">레이블과 관련된 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary vsli:raw="Represents a specific location within a specific file.">특정 파일 내의 특정 위치를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeLinePragma" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeLinePragma" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName" vsli:raw="The file name of the associated file.">관련 파일의 파일 이름입니다.</param>
      <param name="lineNumber" vsli:raw="The line number to store a reference to.">참조를 저장할 줄 번호입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary vsli:raw="Gets or sets the name of the associated file.">관련 파일의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The file name of the associated file.">관련 파일의 파일 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary vsli:raw="Gets or sets the line number of the associated reference.">관련 참조의 줄 번호를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The line number.">줄 번호입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary vsli:raw="Represents a declaration for an event of a type.">형식의 이벤트에 대한 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberEvent&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeMemberEvent" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary vsli:raw="Gets or sets the data type that the member event implements.">멤버 이벤트가 구현하는 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the data type or types that the member event implements.">멤버 이벤트가 구현하는 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the privately implemented data type, if any.">프라이빗하게 구현된 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type that the event privately implements.">이벤트가 프라이빗하게 구현하는 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary vsli:raw="Gets or sets the data type of the delegate type that handles the event.">이벤트를 처리하는 대리자 형식의 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the delegate type that handles the event.">이벤트를 처리하는 대리자 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary vsli:raw="Represents a declaration for a field of a type.">형식의 필드에 대한 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeMemberField" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">지정된 필드 형식과 필드 이름을 사용하여 <see cref="T:System.CodeDom.CodeMemberField" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="An object that indicates the type of the field.">필드 형식을 나타내는 개체입니다.</param>
      <param name="name" vsli:raw="The name of the field.">필드의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">지정된 필드 형식과 필드 이름을 사용하여 <see cref="T:System.CodeDom.CodeMemberField" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The type of the field.">필드의 형식입니다.</param>
      <param name="name" vsli:raw="The name of the field.">필드의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">지정된 필드 형식과 필드 이름을 사용하여 <see cref="T:System.CodeDom.CodeMemberField" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The type of the field.">필드의 형식입니다.</param>
      <param name="name" vsli:raw="The name of the field.">필드의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary vsli:raw="Gets or sets the initialization expression for the field.">필드의 초기화 식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The initialization expression for the field.">필드의 초기화 식입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary vsli:raw="Gets or sets the type of the field.">필드의 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The type of the field.">필드의 형식입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary vsli:raw="Represents a declaration for a method of a type.">형식의 메서드에 대한 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberMethod&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeMemberMethod" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary vsli:raw="Gets the data types of the interfaces implemented by this method, unless it is a private method implementation, which is indicated by the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.PrivateImplementationType&quot; /&gt; property.">메서드가 <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" /> 속성에서 표시되는 프라이빗 메서드 구현이 아닌 경우 이 메서드에서 구현되는 인터페이스의 데이터 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the interfaces implemented by this method.">이 메서드에서 구현된 인터페이스를 나타내는 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary vsli:raw="Gets the parameter declarations for the method.">해당 메서드의 매개 변수 선언을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the method parameters.">메서드 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />입니다.</returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.ImplementationTypes&quot; /&gt; collection is accessed.">
        <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" /> 컬렉션을 처음 액세스할 때 발생되는 이벤트입니다.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.Parameters&quot; /&gt; collection is accessed.">
        <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" /> 컬렉션을 처음 액세스할 때 발생되는 이벤트입니다.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.Statements&quot; /&gt; collection is accessed.">
        <see cref="P:System.CodeDom.CodeMemberMethod.Statements" /> 컬렉션을 처음 액세스할 때 발생되는 이벤트입니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the data type of the interface this method, if private, implements a method of, if any.">이 메서드의 데이터 형식이 프라이빗할 경우 이를 가져오거나 설정하고, 메서드가 있으면 이를 구현합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the interface with the method that the private method whose declaration is represented by this &lt;see cref=&quot;T:System.CodeDom.CodeMemberMethod&quot; /&gt; implements.">프라이빗 메서드의 선언이 <see cref="T:System.CodeDom.CodeTypeReference" /> 구현으로 표현되는 메서드로 인터페이스의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeMemberMethod" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary vsli:raw="Gets or sets the data type of the return value of the method.">메서드 반환 값의 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the value returned by the method.">메서드에서 반환된 값의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the return type of the method.">메서드의 반환 형식에 대한 사용자 지정 특성을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes.">사용자 지정 특성을 나타내는 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary vsli:raw="Gets the statements within the method.">메서드의 문을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the statements within the method.">메서드의 문을 나타내는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary vsli:raw="Gets the type parameters for the current generic method.">현재 제네릭 메서드의 형식 매개 변수를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; that contains the type parameters for the generic method.">제네릭 메서드의 형식 매개 변수가 포함된 <see cref="T:System.CodeDom.CodeTypeParameterCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary vsli:raw="Represents a declaration for a property of a type.">형식의 속성 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberProperty&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeMemberProperty" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary vsli:raw="Gets the collection of &lt;see langword=&quot;get&quot; /&gt; statements for the property.">속성에 대한 <see langword="get" /> 문의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that contains the &lt;see langword=&quot;get&quot; /&gt; statements for the member property.">멤버 속성의 <see langword="get" /> 문을 포함하는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary vsli:raw="Gets or sets a value indicating whether the property has a &lt;see langword=&quot;get&quot; /&gt; method accessor.">속성에 <see langword="get" /> 메서드 접근자가 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see langword=&quot;Count&quot; /&gt; property of the &lt;see cref=&quot;P:System.CodeDom.CodeMemberProperty.GetStatements&quot; /&gt; collection is non-zero, or if the value of this property has been set to &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" /> 컬렉션의 <see langword="true" /> 속성이 0이 아니거나 이 속성 값이 <see langword="Count" />로 설정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary vsli:raw="Gets or sets a value indicating whether the property has a &lt;see langword=&quot;set&quot; /&gt; method accessor.">속성에 <see langword="set" /> 메서드 접근자가 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Collections.CollectionBase.Count&quot; /&gt; property of the &lt;see cref=&quot;P:System.CodeDom.CodeMemberProperty.SetStatements&quot; /&gt; collection is non-zero; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.Collections.CollectionBase.Count" /> 컬렉션의 <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" /> 속성이 0이 아니면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary vsli:raw="Gets the data types of any interfaces that the property implements.">속성이 구현하는 인터페이스의 데이터 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the data types the property implements.">속성이 구현하는 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary vsli:raw="Gets the collection of declaration expressions for the property.">속성에 대한 선언 식의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the declaration expressions for the property.">속성의 선언 식을 나타내는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the data type of the interface, if any, this property, if private, implements.">인터페이스가 있을 경우 인터페이스의 데이터 형식을 가져오거나 설정하고, 이 속성이 프라이빗일 경우 구현합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the interface, if any, the property, if private, implements.">인터페이스가 있을 경우 인터페이스의 데이터 형식을 나타내고 이 속성이 프라이빗일 경우 구현하는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary vsli:raw="Gets the collection of &lt;see langword=&quot;set&quot; /&gt; statements for the property.">속성에 대한 <see langword="set" /> 문의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that contains the &lt;see langword=&quot;set&quot; /&gt; statements for the member property.">멤버 속성의 <see langword="set" /> 문을 포함하는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary vsli:raw="Gets or sets the data type of the property.">속성의 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the property.">속성의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary vsli:raw="Represents an expression that invokes a method.">메서드를 호출하는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class using the specified target object, method name, and parameters.">지정된 대상 개체, 메서드 이름 및 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object with the method to invoke.">대상 개체와 호출할 메서드를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="methodName" vsli:raw="The name of the method to invoke.">호출할 메서드의 이름입니다.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters to call the method with.">메서드를 호출하는 데 사용할 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpression" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class using the specified method and parameters.">지정된 메서드 및 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; that indicates the method to invoke.">호출할 메서드를 나타내는 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />입니다.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters with which to invoke the method.">메서드를 호출하는 데 사용할 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpression" /> 개체의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary vsli:raw="Gets or sets the method to invoke.">호출할 메서드를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; that indicates the method to invoke.">호출할 메서드를 나타내는 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary vsli:raw="Gets the parameters to invoke the method with.">메서드를 호출하는 데 사용할 매개 변수를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the parameters to invoke the method with.">메서드를 호출하는 데 사용할 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary vsli:raw="Represents a reference to a method.">메서드에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class using the specified target object and method name.">지정된 대상 개체와 메서드 이름을 사용하여 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object to target.">대상 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="methodName" vsli:raw="The name of the method to call.">호출할 메서드의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class using the specified target object, method name, and generic type arguments.">지정된 대상 개체, 메서드 이름 및 제네릭 형식 인수를 사용하여 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object to target.">대상 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="methodName" vsli:raw="The name of the method to call.">호출할 메서드의 이름입니다.</param>
      <param name="typeParameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; values that specify the &lt;see cref=&quot;P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments&quot; /&gt; for this &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt;.">이 <see cref="T:System.CodeDom.CodeTypeReference" />의 <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" />를 지정하는 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 값의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary vsli:raw="Gets or sets the name of the method to reference.">참조할 메서드의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the method to reference.">참조할 메서드의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the expression that indicates the method to reference.">참조할 메서드를 나타내는 식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the method to reference.">참조할 메서드를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary vsli:raw="Gets the type arguments for the current generic method reference expression.">현재 제네릭 메서드 참조 식의 형식 인수를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the type arguments for the current code &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt;.">현재 코드 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />의 형식 인수가 포함된 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary vsli:raw="Represents a return value statement.">반환 값 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReturnStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReturnStatement&quot; /&gt; class using the specified expression.">지정된 식을 사용하여 <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the return value.">반환 값을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary vsli:raw="Gets or sets the return value.">반환 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the value to return for the return statement, or &lt;see langword=&quot;null&quot; /&gt; if the statement is part of a subroutine.">return 문의 반환 값을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />이거나 해당 문이 서브루틴의 일부인 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary vsli:raw="Represents a namespace declaration.">네임스페이스 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeNamespace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; class using the specified name.">지정한 이름을 사용하여 <see cref="T:System.CodeDom.CodeNamespace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the namespace being declared.">선언되는 네임스페이스의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary vsli:raw="Gets the comments for the namespace.">네임스페이스의 주석을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that indicates the comments for the namespace.">네임스페이스의 주석을 나타내는 <see cref="T:System.CodeDom.CodeCommentStatementCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary vsli:raw="Gets the collection of namespace import directives used by the namespace.">네임스페이스에서 사용되는 네임스페이스를 가져오는 지시문의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImportCollection&quot; /&gt; that indicates the namespace import directives used by the namespace.">네임스페이스에서 사용되는 네임스페이스를 가져오는 지시문을 나타내는 <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary vsli:raw="Gets or sets the name of the namespace.">네임스페이스의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the namespace.">네임스페이스의 이름입니다.</returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Comments&quot; /&gt; collection is accessed.">
        <see cref="P:System.CodeDom.CodeNamespace.Comments" /> 컬렉션을 처음 액세스할 때 발생되는 이벤트입니다.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Imports&quot; /&gt; collection is accessed.">
        <see cref="P:System.CodeDom.CodeNamespace.Imports" /> 컬렉션을 처음 액세스할 때 발생되는 이벤트입니다.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Types&quot; /&gt; collection is accessed.">
        <see cref="P:System.CodeDom.CodeNamespace.Types" /> 컬렉션을 처음 액세스할 때 발생되는 이벤트입니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary vsli:raw="Gets the collection of types that the namespace contains.">네임스페이스에 들어 있는 형식 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; that indicates the types contained in the namespace.">네임스페이스에 포함된 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeNamespace" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects.">지정된 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 개체 배열이 들어 있는 <see cref="T:System.CodeDom.CodeNamespace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeNamespace" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class that contains the elements of the specified source collection.">지정된 소스 컬렉션의 요소가 들어 있는 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeNamespaceCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object to the collection.">지정된 <see cref="T:System.CodeDom.CodeNamespace" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to add.">추가할 <see cref="T:System.CodeDom.CodeNamespace" />입니다.</param>
      <returns vsli:raw="The index at which the new element was inserted.">새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; array to the end of the collection.">지정된 <see cref="T:System.CodeDom.CodeNamespace" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeNamespace" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; object to the end of the collection.">지정된 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 개체의 내용을 컬렉션의 끝에 추가합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeNamespaceCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object.">컬렉션에 지정된 <see cref="T:System.CodeDom.CodeNamespace" /> 개체가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to search for in the collection.">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeNamespace" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeNamespace" />이 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">지정된 인덱스에서 시작하여 컬렉션 개체를 1차원 <see cref="T:System.Array" /> 인스턴스에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">대상 배열이 다차원 배열인 경우  
또는 
<see cref="T:System.CodeDom.CodeNamespaceCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt;, if it exists in the collection.">
        <see cref="T:System.CodeDom.CodeNamespace" />에 지정된 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to locate.">찾을 <see cref="T:System.CodeDom.CodeNamespace" />입니다.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt;, if it is found, in the collection; otherwise, -1.">지정된 <see cref="T:System.CodeDom.CodeNamespace" />가 컬렉션에 있으면 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object into the collection at the specified index.">지정된 <see cref="T:System.CodeDom.CodeNamespace" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index where the new item should be inserted.">새 항목을 삽입할 인덱스이며 0부터 시작합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to insert.">삽입할 <see cref="T:System.CodeDom.CodeNamespace" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; object at the specified index in the collection.">컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">액세스할 컬렉션의 인덱스입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; at each valid index.">유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeNamespace" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object from the collection.">컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeNamespace" /> 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeNamespace" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary vsli:raw="Represents a namespace import directive that indicates a namespace to use.">사용할 네임스페이스를 나타내는 네임스페이스를 가져오는 지시문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; class using the specified namespace to import.">가져오도록 지정된 네임스페이스를 사용하여 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nameSpace" vsli:raw="The name of the namespace to import.">가져올 네임스페이스의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary vsli:raw="Gets or sets the line and file the statement occurs on.">문이 있는 줄 및 파일을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; that indicates the context of the statement.">문의 컨텍스트를 나타내는 <see cref="T:System.CodeDom.CodeLinePragma" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary vsli:raw="Gets or sets the namespace to import.">가져올 네임스페이스를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the namespace to import.">가져올 네임스페이스의 이름입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImportCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object to the collection.">컬렉션에 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 개체를 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object to add to the collection.">컬렉션에 추가할 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 개체입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary vsli:raw="Adds a set of &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; objects to the collection.">
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> 개체 집합을 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary vsli:raw="Clears the collection of members.">멤버의 컬렉션을 지웁니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary vsli:raw="Gets the number of namespaces in the collection.">컬렉션의 네임스페이스 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of namespaces in the collection.">컬렉션의 네임스페이스 수입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that enumerates the collection members.">컬렉션 멤버를 열거하는 열거자를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that indicates the collection members.">컬렉션 멤버를 나타내는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object at the specified index in the collection.">컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">액세스할 컬렉션의 인덱스입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object at each valid index.">유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 1차원 <see cref="T:System.Collections.ICollection" />입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;. This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 속성은 항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  This property always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  이 속성은 항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through a collection.">컬렉션에서 반복할 수 있는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an object to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에 개체를 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" />에 추가할 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns vsli:raw="The position at which the new element was inserted.">새 요소가 삽입된 위치입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에서 항목을 모두 제거합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; contains a specific value.">
        <see cref="T:System.Collections.IList" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">값이 목록에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에서 특정 항목의 인덱스를 결정합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if it is found in the list; otherwise, -1.">목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; at the specified position.">
        <see cref="T:System.Collections.IList" />의 지정된 위치에 항목을 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에 삽입할 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 속성은 항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.IList" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 속성은 항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="The element at the specified index.">지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" />에서 제거할 <see cref="T:System.Collections.IList" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" />의 지정한 인덱스에서 요소를 제거합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">제거할 요소의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary vsli:raw="Provides a common base class for most Code Document Object Model (CodeDOM) objects.">대부분의 CodeDOM(Code Document Object Model) 개체에 대한 공통 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary vsli:raw="Gets the user-definable data for the current object.">현재 개체에 대해 사용자 정의 가능한 데이터를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing user data for the current object.">현재 개체에 대한 사용자 데이터가 들어 있는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary vsli:raw="Represents an expression that creates a new instance of a type.">형식의 새 인스턴스를 만드는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">지정된 형식과 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the object to create.">만들 개체의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">개체를 만드는 데 사용할 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpression" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">지정된 형식과 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType" vsli:raw="The name of the data type of object to create.">만들 개체의 데이터 형식 이름입니다.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">개체를 만드는 데 사용할 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpression" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">지정된 형식과 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType" vsli:raw="The data type of the object to create.">만들 개체의 데이터 형식입니다.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">개체를 만드는 데 사용할 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpression" /> 개체의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary vsli:raw="Gets or sets the data type of the object to create.">만들 개체의 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the data type of the object to create.">만들 개체의 데이터 형식에 대한 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary vsli:raw="Gets or sets the parameters to use in creating the object.">개체를 만드는 데 사용할 매개 변수를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the parameters to use when creating the object.">개체를 만들 때 사용할 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary vsli:raw="Represents a parameter declaration for a method, property, or constructor.">메서드, 속성 또는 생성자에 대한 매개 변수 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">지정된 매개 변수 형식과 이름을 사용하여 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="An object that indicates the type of the parameter to declare.">선언할 매개 변수의 형식을 나타내는 개체입니다.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">선언할 매개 변수 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">지정된 매개 변수 형식과 이름을 사용하여 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The type of the parameter to declare.">선언할 매개 변수의 형식입니다.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">선언할 매개 변수 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">지정된 매개 변수 형식과 이름을 사용하여 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The type of the parameter to declare.">선언할 매개 변수의 형식입니다.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">선언할 매개 변수 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary vsli:raw="Gets or sets the custom attributes for the parameter declaration.">매개 변수 선언의 사용자 지정 특성을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="An object that indicates the custom attributes.">사용자 지정 특성을 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary vsli:raw="Gets or sets the direction of the field.">필드의 방향을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="An object that indicates the direction of the field.">필드 방향을 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary vsli:raw="Gets or sets the name of the parameter.">매개 변수의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the parameter.">매개 변수의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary vsli:raw="Gets or sets the type of the parameter.">매개 변수의 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The type of the parameter.">매개 변수의 형식입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="one or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class containing the elements of the specified source collection.">지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to the collection.">지정된 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to add.">추가할 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />입니다.</param>
      <returns vsli:raw="The index at which the new element was inserted.">새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">지정된 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; containing the objects to add to the collection.">컬렉션에 추가할 개체를 포함하는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; to the end of the collection.">다른 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />의 내용을 컬렉션의 끝에 추가합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; containing the objects to add to the collection.">컬렉션에 추가할 개체를 포함하는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt;.">컬렉션에 지정한 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to search for in the collection.">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">지정한 인덱스에서 시작하는 1차원 <see cref="T:System.Array" /> 인스턴스에 컬렉션 개체를 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">대상 배열이 다차원 배열인 경우  
또는 
<see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt;, if it exists in the collection.">지정한 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />의 컬렉션에 인덱스가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />입니다.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">지정된 개체의 컬렉션에 인덱스가 있으면 반환 값은 해당 인덱스이고 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; into the collection at the specified index.">지정된 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">0부터 시작하는 인덱스이며 지정된 개체를 삽입해야 합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to insert.">삽입할 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; at the specified index in the collection.">컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">액세스할 컬렉션의 인덱스입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; at each valid index.">유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; from the collection.">지정된 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />를 컬렉션에서 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary vsli:raw="Represents a primitive data type value.">기본 데이터 형식 값을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePrimitiveExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodePrimitiveExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePrimitiveExpression&quot; /&gt; class using the specified object.">지정된 개체를 사용하여 <see cref="T:System.CodeDom.CodePrimitiveExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The object to represent.">나타낼 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary vsli:raw="Gets or sets the primitive data type to represent.">나타낼 기본 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The primitive data type instance to represent the value of.">값을 나타낼 기본 데이터 형식 인스턴스입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary vsli:raw="Represents a reference to the value of a property.">속성 값에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertyReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertyReferenceExpression&quot; /&gt; class using the specified target object and property name.">지정된 대상 개체와 속성 이름을 사용하여 <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the property to reference.">참조할 속성이 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="propertyName" vsli:raw="The name of the property to reference.">참조할 속성의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary vsli:raw="Gets or sets the name of the property to reference.">참조할 속성의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the property to reference.">참조할 속성의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the property to reference.">참조할 속성이 들어 있는 개체를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the property to reference.">참조할 속성이 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary vsli:raw="Represents the value argument of a property set method call within a property set method.">property set 메서드에서 property set 메서드 호출의 값 인수를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertySetValueReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary vsli:raw="Specifies the name and mode for a code region.">코드 영역의 이름과 모드를 지정합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionDirective&quot; /&gt; class with default values.">기본값을 사용하여 <see cref="T:System.CodeDom.CodeRegionDirective" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionDirective&quot; /&gt; class, specifying its mode and name.">모드와 이름을 지정하여 <see cref="T:System.CodeDom.CodeRegionDirective" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="regionMode" vsli:raw="One of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionMode&quot; /&gt; values.">
        <see cref="T:System.CodeDom.CodeRegionMode" /> 값 중 하나입니다.</param>
      <param name="regionText" vsli:raw="The name for the region.">영역의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary vsli:raw="Gets or sets the mode for the region directive.">영역 지시문의 모드를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionMode&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.CodeDom.CodeRegionMode.None&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeRegionMode" /> 값 중 하나입니다. 기본값은 <see cref="F:System.CodeDom.CodeRegionMode.None" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary vsli:raw="Gets or sets the name of the region.">영역의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the region.">영역의 이름입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary vsli:raw="Specifies the start or end of a code region.">코드 영역의 시작 또는 끝을 지정합니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary vsli:raw="End of the region.">영역의 끝입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary vsli:raw="Not used.">사용되지 않습니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary vsli:raw="Start of the region.">영역의 시작입니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary vsli:raw="Represents a statement that removes an event handler.">이벤트 처리기를 제거하는 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class with the specified event and event handler.">지정된 이벤트와 이벤트 처리기를 사용하여 <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="eventRef" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to detach the event handler from.">이벤트 처리기를 분리할 이벤트를 나타내는 <see cref="T:System.CodeDom.CodeEventReferenceExpression" />입니다.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">제거할 이벤트 처리기를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class using the specified target object, event name, and event handler.">지정된 대상 개체, 이벤트 이름 및 이벤트 처리기를 사용하여 <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">해당 이벤트가 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="eventName" vsli:raw="The name of the event.">이벤트의 이름입니다.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">제거할 이벤트 처리기를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary vsli:raw="Gets or sets the event to remove a listener from.">수신기를 제거할 이벤트를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to remove a listener from.">수신기를 제거할 이벤트를 나타내는 <see cref="T:System.CodeDom.CodeEventReferenceExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary vsli:raw="Gets or sets the event handler to remove.">제거할 이벤트 처리기를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">제거할 이벤트 처리기를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary vsli:raw="Represents a literal code fragment that can be compiled.">컴파일할 수 있는 리터럴 코드 단편을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetCompileUnit&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetCompileUnit&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The literal code fragment to represent.">나타낼 리터럴 코드 단편입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary vsli:raw="Gets or sets the line and file information about where the code is located in a source code document.">소스 코드 문서에서 코드가 있는 위치에 대한 줄 및 파일 정보를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; that indicates the position of the code fragment.">코드 단편의 위치를 나타내는 <see cref="T:System.CodeDom.CodeLinePragma" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary vsli:raw="Gets or sets the literal code fragment to represent.">나타낼 리터럴 코드 단편을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The literal code fragment.">리터럴 코드 단편입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary vsli:raw="Represents a literal expression.">리터럴 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeSnippetExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetExpression&quot; /&gt; class using the specified literal expression.">지정된 리터럴 식을 사용하여 <see cref="T:System.CodeDom.CodeSnippetExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The literal expression to represent.">나타낼 리터럴 식입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary vsli:raw="Gets or sets the literal string of code.">코드의 리터럴 문자열을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The literal string.">리터럴 문자열입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary vsli:raw="Represents a statement using a literal code fragment.">리터럴 코드 단편을 사용하여 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeSnippetStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetStatement&quot; /&gt; class using the specified code fragment.">지정된 코드 단편을 사용하여 <see cref="T:System.CodeDom.CodeSnippetStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="The literal code fragment of the statement to represent.">나타낼 문의 리터럴 코드 단편입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary vsli:raw="Gets or sets the literal code fragment statement.">리터럴 코드 단편 문을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The literal code fragment statement.">리터럴 코드 단편 문입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary vsli:raw="Represents a member of a type using a literal code fragment.">리터럴 코드 단편을 사용하는 형식의 멤버를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetTypeMember&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetTypeMember&quot; /&gt; class using the specified text.">지정된 텍스트를 사용하여 <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="text" vsli:raw="The literal code fragment for the type member.">형식 멤버에 대한 리터럴 코드 단편입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary vsli:raw="Gets or sets the literal code fragment for the type member.">형식 멤버에 대한 리터럴 코드 단편을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The literal code fragment for the type member.">형식 멤버에 대한 리터럴 코드 단편입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary vsli:raw="Represents the &lt;see langword=&quot;abstract&quot; /&gt; base class from which all code statements derive.">모든 코드 문이 파생되는 <see langword="abstract" /> 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object that contains end directives.">끝 지시문이 포함된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">끝 지시문이 포함된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary vsli:raw="Gets or sets the line on which the code statement occurs.">코드 문이 있는 줄을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; object that indicates the context of the code statement.">코드 문의 컨텍스트를 나타내는 <see cref="T:System.CodeDom.CodeLinePragma" /> 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object that contains start directives.">시작 지시문이 포함된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">시작 지시문이 포함된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeStatement" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects.">지정된 <see cref="T:System.CodeDom.CodeStatementCollection" /> 개체 배열이 들어 있는 <see cref="T:System.CodeDom.CodeStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeStatement" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class that contains the elements of the specified source collection.">지정된 소스 컬렉션의 요소가 들어 있는 <see cref="T:System.CodeDom.CodeStatementCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeStatementCollection" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to the collection.">지정된 <see cref="T:System.CodeDom.CodeExpression" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to add.">추가할 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</param>
      <returns vsli:raw="The index at which the new element was inserted.">새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to the collection.">지정된 <see cref="T:System.CodeDom.CodeStatement" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to add.">추가할 <see cref="T:System.CodeDom.CodeStatement" /> 개체입니다.</param>
      <returns vsli:raw="The index at which the new element was inserted.">새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Adds a set of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects to the collection.">
        <see cref="T:System.CodeDom.CodeStatement" /> 개체 집합을 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects to add to the collection.">컬렉션에 추가할 <see cref="T:System.CodeDom.CodeStatement" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object to the end of the collection.">다른 <see cref="T:System.CodeDom.CodeStatementCollection" /> 개체의 내용을 컬렉션 끝에 추가합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeStatementCollection" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object.">컬렉션에 지정된 <see cref="T:System.CodeDom.CodeStatement" /> 개체가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to search for in the collection.">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeStatement" /> 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> 개체의 요소를 지정된 인덱스에서 시작하여 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">대상 배열이 다차원 배열인 경우  
또는 
<see cref="T:System.CodeDom.CodeStatementCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt;, if it exists in the collection.">
        <see cref="T:System.CodeDom.CodeStatement" />에 지정된 <see cref="T:System.CodeDom.CodeStatementCollection" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeStatement" />입니다.</param>
      <returns vsli:raw="The index of the specified object, if it is found, in the collection; otherwise, -1.">지정된 개체가 컬렉션에 있으면 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object into the collection at the specified index.">지정된 <see cref="T:System.CodeDom.CodeStatement" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">0부터 시작하는 인덱스이며 지정된 개체를 삽입해야 합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to insert.">삽입할 <see cref="T:System.CodeDom.CodeStatement" /> 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object at the specified index in the collection.">컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeStatement" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">액세스할 컬렉션의 인덱스입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; at each valid index.">유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeStatement" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object from the collection.">컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeStatement" /> 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeStatement" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary vsli:raw="Represents a reference to the current local class instance.">현재 지역 클래스 인스턴스에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThisReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeThisReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary vsli:raw="Represents a statement that throws an exception.">예외를 throw하는 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThrowExceptionStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThrowExceptionStatement&quot; /&gt; class with the specified exception type instance.">지정된 예외 형식 인스턴스를 사용하여 <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="toThrow" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the exception to throw.">throw할 예외를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary vsli:raw="Gets or sets the exception to throw.">throw할 예외를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; representing an instance of the exception to throw.">throw할 예외의 인스턴스를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;try&quot; /&gt; block with any number of &lt;see langword=&quot;catch&quot; /&gt; clauses and, optionally, a &lt;see langword=&quot;finally&quot; /&gt; block.">여러 개의 <see langword="try" /> 절을 가진 <see langword="catch" /> 블록과 선택적으로 <see langword="finally" /> 블록을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class using the specified statements for try and catch clauses.">try 및 catch 절에 대해 지정한 문을 사용하여 <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tryStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the statements to try.">try할 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" /> 개체의 배열입니다.</param>
      <param name="catchClauses" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects that indicate the clauses to catch.">catch할 절을 나타내는 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class using the specified statements for try, catch clauses, and finally statements.">try 절, catch 절 및 finally 문에 대해 지정한 문을 사용하여 <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tryStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the statements to try.">try할 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" /> 개체의 배열입니다.</param>
      <param name="catchClauses" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects that indicate the clauses to catch.">catch할 절을 나타내는 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체의 배열입니다.</param>
      <param name="finallyStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the finally statements to use.">사용할 finally 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" /> 개체의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary vsli:raw="Gets the catch clauses to use.">사용할 catch 절을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; that indicates the catch clauses to use.">사용할 catch 절을 나타내는 <see cref="T:System.CodeDom.CodeCatchClauseCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary vsli:raw="Gets the finally statements to use.">사용할 finally 문을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the finally statements.">finally 문을 나타내는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary vsli:raw="Gets the statements to try.">try할 문을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the statements to try.">try할 문을 나타내는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary vsli:raw="Represents a static constructor for a class.">클래스의 정적 생성자를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeConstructor&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeConstructor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary vsli:raw="Represents a type declaration for a class, structure, interface, or enumeration.">클래스, 구조체, 인터페이스 또는 열거형의 형식 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; class with the specified name.">지정된 이름을 사용하여 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name for the new type.">새 형식의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary vsli:raw="Gets the base types of the type.">해당 형식의 기본 형식을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; object that indicates the base types of the type.">형식의 기본 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary vsli:raw="Gets or sets a value indicating whether the type is a class or reference type.">해당 형식이 클래스인지 또는 참조 형식인지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a class or reference type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">형식이 클래스 또는 참조 형식이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary vsli:raw="Gets or sets a value indicating whether the type is an enumeration.">해당 형식이 열거형인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an enumeration; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">형식이 열거형이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary vsli:raw="Gets or sets a value indicating whether the type is an interface.">해당 형식이 인터페이스인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">형식이 인터페이스이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary vsli:raw="Gets or sets a value indicating whether the type declaration is complete or partial.">형식 선언이 완전한지 또는 부분적인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class or structure declaration is a partial representation of the implementation; &lt;see langword=&quot;false&quot; /&gt; if the declaration is a complete implementation of the class or structure. The default is &lt;see langword=&quot;false&quot; /&gt;.">클래스 또는 구조체 선언이 부분적인 구현을 나타내면 <see langword="true" />이고, 완전한 구현이면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary vsli:raw="Gets or sets a value indicating whether the type is a value type (struct).">형식이 값 형식(구조체)인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a value type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">형식이 값 형식이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary vsli:raw="Gets the collection of class members for the represented type.">표시된 형식에 대한 클래스 멤버의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; object that indicates the class members.">클래스 멤버를 나타내는 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 개체입니다.</returns>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.CodeDom.CodeTypeDeclaration.BaseTypes&quot; /&gt; collection is accessed for the first time.">
        <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> 컬렉션에 처음 액세스할 때 발생합니다.</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.CodeDom.CodeTypeDeclaration.Members&quot; /&gt; collection is accessed for the first time.">
        <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> 컬렉션에 처음 액세스할 때 발생합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary vsli:raw="Gets or sets the attributes of the type.">형식의 특성을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.TypeAttributes&quot; /&gt; object that indicates the attributes of the type.">형식의 특성을 나타내는 <see cref="T:System.Reflection.TypeAttributes" /> 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary vsli:raw="Gets the type parameters for the type declaration.">형식 선언에 대한 형식 매개 변수를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; that contains the type parameters for the type declaration.">형식 선언에 대한 형식 매개 변수가 들어 있는 <see cref="T:System.CodeDom.CodeTypeParameterCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects.">지정된 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 개체 배열이 들어 있는 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class that contains the elements of the specified source collection.">지정된 소스 컬렉션의 요소가 들어 있는 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 개체입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to the collection.">지정된 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to add.">추가할 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체입니다.</param>
      <returns vsli:raw="The index at which the new element was inserted.">새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">지정된 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object to the end of the collection.">다른 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 개체의 내용을 컬렉션 끝에 추가합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object.">컬렉션에 지정된 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to search for in the collection.">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary vsli:raw="Copies the elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">지정된 인덱스에서 시작하여 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 개체의 요소를 1차원 <see cref="T:System.Array" /> 인스턴스에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">대상 배열이 다차원 배열인 경우  
또는 
<see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt;, if it exists in the collection.">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" />에 지정된 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeTypeDeclaration" />입니다.</param>
      <returns vsli:raw="The index of the specified object, if it is found, in the collection; otherwise, -1.">지정된 개체가 컬렉션에 있으면 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object into the collection at the specified index.">지정된 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">0부터 시작하는 인덱스이며 지정된 개체를 삽입해야 합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to insert.">삽입할 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object at the specified index in the collection.">컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">액세스할 컬렉션의 인덱스입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; at each valid index.">유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeTypeDeclaration" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object from the collection.">컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeTypeDeclaration" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary vsli:raw="Represents a delegate declaration.">대리자 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDelegate&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeDelegate" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDelegate&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeDelegate" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the delegate.">대리자 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary vsli:raw="Gets the parameters of the delegate.">대리자의 매개 변수 이름을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the parameters of the delegate.">대리자의 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary vsli:raw="Gets or sets the return type of the delegate.">대리자의 반환 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the return type of the delegate.">대리자의 반환 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary vsli:raw="Provides a base class for a member of a type. Type members include fields, methods, properties, constructors and nested types.">형식의 멤버에 대한 기본 클래스를 제공합니다. 형식 멤버에는 필드, 메서드, 속성, 생성자 및 중첩 형식이 있습니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary vsli:raw="Gets or sets the attributes of the member.">멤버의 특성을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.CodeDom.MemberAttributes&quot; /&gt; values used to indicate the attributes of the member. The default value is &lt;see cref=&quot;F:System.CodeDom.MemberAttributes.Private&quot; /&gt; | &lt;see cref=&quot;F:System.CodeDom.MemberAttributes.Final&quot; /&gt;.">멤버의 특성을 나타내는 데 사용하는 <see cref="T:System.CodeDom.MemberAttributes" /> 값의 비트 조합입니다. 기본값은 <see cref="F:System.CodeDom.MemberAttributes.Private" />  |  <see cref="F:System.CodeDom.MemberAttributes.Final" />합니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary vsli:raw="Gets the collection of comments for the type member.">형식 멤버의 주석 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that indicates the comments for the member.">멤버의 주석을 나타내는 <see cref="T:System.CodeDom.CodeCommentStatementCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary vsli:raw="Gets or sets the custom attributes of the member.">멤버의 사용자 지정 특성을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes of the member.">멤버의 사용자 지정 특성을 나타내는 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary vsli:raw="Gets the end directives for the member.">멤버의 종료 지시문을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">끝 지시문이 포함된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary vsli:raw="Gets or sets the line on which the type member statement occurs.">형식 멤버 문이 있는 줄을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; object that indicates the location of the type member declaration.">형식 멤버 선언의 위치를 나타내는 <see cref="T:System.CodeDom.CodeLinePragma" /> 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary vsli:raw="Gets or sets the name of the member.">멤버의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the member.">멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary vsli:raw="Gets the start directives for the member.">멤버의 시작 지시문을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">시작 지시문이 포함된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeTypeMember" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeTypeMember" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class containing the elements of the specified source collection.">지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeTypeMemberCollection" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; with the specified value to the collection.">지정된 값을 가진 <see cref="T:System.CodeDom.CodeTypeMember" />를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to add.">추가할 <see cref="T:System.CodeDom.CodeTypeMember" />입니다.</param>
      <returns vsli:raw="The index at which the new element was inserted.">새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; array to the end of the collection.">지정된 <see cref="T:System.CodeDom.CodeTypeMember" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; containing the objects to add to the collection.">컬렉션에 추가할 개체를 포함하는 <see cref="T:System.CodeDom.CodeTypeMember" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; to the end of the collection.">다른 <see cref="T:System.CodeDom.CodeTypeMemberCollection" />의 내용을 컬렉션의 끝에 추가합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; containing the objects to add to the collection.">컬렉션에 추가할 개체를 포함하는 <see cref="T:System.CodeDom.CodeTypeMemberCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt;.">컬렉션에 지정한 <see cref="T:System.CodeDom.CodeTypeMember" />가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to search for in the collection.">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeTypeMember" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, beginning at the specified index.">지정한 인덱스에서 시작하는 1차원 <see cref="T:System.Array" /> 인스턴스에 컬렉션 개체를 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">대상 배열이 다차원 배열인 경우  
또는 
<see cref="T:System.CodeDom.CodeTypeMemberCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt;, if it exists in the collection.">지정한 <see cref="T:System.CodeDom.CodeTypeMember" />의 컬렉션에 인덱스가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeTypeMember" />입니다.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">지정된 개체의 컬렉션에 인덱스가 있으면 반환 값은 해당 인덱스이고 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; into the collection at the specified index.">지정된 <see cref="T:System.CodeDom.CodeTypeMember" />를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">0부터 시작하는 인덱스이며 지정된 개체를 삽입해야 합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to insert.">삽입할 <see cref="T:System.CodeDom.CodeTypeMember" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; at the specified index in the collection.">컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeTypeMember" />를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">액세스할 컬렉션의 인덱스입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; at each valid index.">유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeTypeMember" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Removes a specific &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; from the collection.">컬렉션에서 특정 <see cref="T:System.CodeDom.CodeTypeMember" />를 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeTypeMember" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary vsli:raw="Represents a &lt;see langword=&quot;typeof&quot; /&gt; expression, an expression that returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; for a specified type name.">
        <see langword="typeof" /> 식 또는 지정된 형식 이름에 대한 <see cref="T:System.Type" />을 반환하는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type for the &lt;see langword=&quot;typeof&quot; /&gt; expression.">
        <see langword="typeof" /> 식의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class using the specified type.">지정한 형식을 사용하여 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The name of the data type for the &lt;see langword=&quot;typeof&quot; /&gt; expression.">
        <see langword="typeof" /> 식에 대한 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class using the specified type.">지정한 형식을 사용하여 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The data type of the data type of the &lt;see langword=&quot;typeof&quot; /&gt; expression.">
        <see langword="typeof" /> 식의 데이터 형식입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary vsli:raw="Gets or sets the data type referenced by the &lt;see langword=&quot;typeof&quot; /&gt; expression.">
        <see langword="typeof" /> 식이 참조하는 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type referenced by the &lt;see langword=&quot;typeof&quot; /&gt; expression. This property will never return &lt;see langword=&quot;null&quot; /&gt;, and defaults to the &lt;see cref=&quot;T:System.Void&quot; /&gt; type.">
        <see langword="typeof" /> 식이 참조하는 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다. 이 속성은 <see langword="null" />을 반환하지 않으며 기본값으로 <see cref="T:System.Void" /> 형식을 사용합니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary vsli:raw="Represents a type parameter of a generic type or method.">제네릭 형식이나 메서드의 형식 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; class with the specified type parameter name.">지정된 형식 매개 변수 이름을 사용하여 <see cref="T:System.CodeDom.CodeTypeParameter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name" vsli:raw="The name of the type parameter.">형식 매개 변수의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary vsli:raw="Gets the constraints for the type parameter.">형식 매개 변수에 대한 제약 조건을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; object that contains the constraints for the type parameter.">형식 매개 변수에 대한 제약 조건을 포함하는 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the type parameter.">형식 매개 변수의 사용자 지정 특성을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes of the type parameter. The default is &lt;see langword=&quot;null&quot; /&gt;.">형식 매개 변수의 사용자 지정 특성을 나타내는 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary vsli:raw="Gets or sets a value indicating whether the type parameter has a constructor constraint.">형식 매개 변수에 생성자 제약 조건이 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type parameter has a constructor constraint; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">형식 매개 변수에 생성자 제약 조건이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary vsli:raw="Gets or sets the name of the type parameter.">형식 매개 변수의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the type parameter. The default is an empty string (&quot;&quot;).">형식 매개 변수의 이름입니다. 기본값은 빈 문자열("")입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary vsli:raw="Initializes a new, empty instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeTypeParameter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class containing the elements of the specified source collection.">지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeTypeParameterCollection" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection.">지정된 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; to add.">추가할 <see cref="T:System.CodeDom.CodeTypeParameter" />입니다.</param>
      <returns vsli:raw="The zero-based index at which the new element was inserted.">새 요소가 삽입된 인덱스이며 0부터 시작합니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection using the specified data type name.">지정된 데이터 형식 이름을 사용하여 지정된 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The name of a data type for which to add the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection.">컬렉션에 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체를 추가할 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; array to the end of the collection.">지정된 <see cref="T:System.CodeDom.CodeTypeParameter" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; containing the objects to add to the collection.">컬렉션에 추가할 개체를 포함하는 <see cref="T:System.CodeDom.CodeTypeParameter" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; to the end of the collection.">지정된 <see cref="T:System.CodeDom.CodeTypeParameterCollection" />의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; containing the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects to add to the collection.">컬렉션에 추가할 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 개체를 포함하는 <see cref="T:System.CodeDom.CodeTypeParameter" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Determines whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object.">컬렉션에 지정된 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체가 포함되는지 여부를 결정합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to search for in the collection.">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체가 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary vsli:raw="Copies the items in the collection to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; at the specified index.">컬렉션의 항목을 지정된 1차원 <see cref="T:System.Array" />의 지정된 인덱스에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; is greater than the available space between the index of the target array specified by &lt;paramref name=&quot;index&quot; /&gt; and the end of the target array.">
        <paramref name="array" />가 다차원 배열인 경우  
또는 
<see cref="T:System.CodeDom.CodeTypeParameterCollection" />의 요소 수가 <paramref name="index" />에서 지정하는 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the target array's lowest index.">
        <paramref name="index" />가 대상 배열의 최저 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object, if it exists in the collection.">지정된 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체가 컬렉션에 있는 경우 해당 개체의 인덱스를 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체입니다.</param>
      <returns vsli:raw="The zero-based index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object in the collection if found; otherwise, -1.">지정한 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체가 컬렉션에 있는 경우 이 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object into the collection at the specified index.">지정된 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">항목을 삽입할 인덱스이며 0부터 시작합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to insert.">삽입할 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object at the specified index in the collection.">컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the collection object to access.">액세스할 컬렉션 개체의 인덱스이며 0부터 시작합니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object at the specified index.">지정된 인덱스의 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the valid range of indexes for the collection.">
        <paramref name="index" />가 컬렉션의 유효한 인덱스 범위를 벗어납니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object from the collection.">컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체를 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary vsli:raw="Represents a reference to a type.">형식에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified code type parameter.">지정된 코드 형식 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeParameter" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; that represents the type of the type parameter.">형식 매개 변수의 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeParameter" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified array type and rank.">지정된 배열 형식과 차수를 사용하여 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="arrayType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array.">배열의 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="rank" vsli:raw="The number of dimensions in the array.">배열의 차수입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name.">지정된 형식 이름을 사용하여 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">참조할 형식의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name and type arguments.">지정된 형식 이름 및 형식 인수를 사용하여 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">참조할 형식의 이름입니다.</param>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; values.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 값의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name and code type reference option.">지정된 형식 이름 및 코드 형식 참조 옵션을 사용하여 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">참조할 형식의 이름입니다.</param>
      <param name="codeTypeReferenceOption" vsli:raw="The code type reference option, one of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">
        <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 값 중 하나인 코드 형식 참조 옵션입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified array type name and rank.">지정된 배열 형식 이름과 차수를 사용하여 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="baseType" vsli:raw="The name of the type of the elements of the array.">배열 요소의 형식 이름입니다.</param>
      <param name="rank" vsli:raw="The number of dimensions of the array.">배열의 차수입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type.">지정한 형식을 사용하여 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to reference.">참조할 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type and code type reference.">지정된 형식 및 코드 형식 참조를 사용하여 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to reference.">참조할 <see cref="T:System.Type" />입니다.</param>
      <param name="codeTypeReferenceOption" vsli:raw="The code type reference option, one of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">
        <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 값 중 하나인 코드 형식 참조 옵션입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary vsli:raw="Gets or sets the type of the elements in the array.">배열 요소의 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array elements.">배열 요소의 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary vsli:raw="Gets or sets the array rank of the array.">배열 차수를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The number of dimensions of the array.">배열의 차수입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary vsli:raw="Gets or sets the name of the type being referenced.">참조되는 형식의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the type being referenced.">참조되는 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary vsli:raw="Gets or sets the code type reference option.">코드 형식 참조 옵션을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">
        <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 값의 비트 조합입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary vsli:raw="Gets the type arguments for the current generic type reference.">현재 제네릭 형식 참조에 대한 형식 인수를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the type arguments for the current &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; object.">현재 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 개체에 대한 형식 인수가 들어 있는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeTypeReference" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class containing the elements of the specified source collection.">지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">지정된 <see cref="T:System.CodeDom.CodeTypeReference" />를 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to add.">추가할 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <returns vsli:raw="The index at which the new element was inserted.">새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection using the specified data type name.">지정된 데이터 형식 이름을 사용하는 컬렉션에 <see cref="T:System.CodeDom.CodeTypeReference" />를 추가합니다.</summary>
      <param name="value" vsli:raw="The name of a data type for which to add a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">컬렉션에 <see cref="T:System.CodeDom.CodeTypeReference" />를 추가할 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection using the specified data type.">지정된 데이터 형식을 사용하는 컬렉션에 <see cref="T:System.CodeDom.CodeTypeReference" />를 추가합니다.</summary>
      <param name="value" vsli:raw="The data type for which to add a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">컬렉션에 <see cref="T:System.CodeDom.CodeTypeReference" />를 추가할 데이터 형식입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; array to the end of the collection.">지정된 <see cref="T:System.CodeDom.CodeTypeReference" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; containing the objects to add to the collection.">컬렉션에 추가할 개체를 포함하는 <see cref="T:System.CodeDom.CodeTypeReference" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; to the end of the collection.">지정된 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />의 내용을 컬렉션의 끝에 추가합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the objects to add to the collection.">컬렉션에 추가할 개체를 포함하는 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">컬렉션에 지정한 <see cref="T:System.CodeDom.CodeTypeReference" />가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to search for in the collection.">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeTypeReference" />이 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary vsli:raw="Copies the items in the collection to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; at the specified index.">컬렉션의 항목을 지정된 1차원 <see cref="T:System.Array" />의 지정된 인덱스에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">
        <paramref name="array" /> 매개 변수가 다차원 배열인 경우  
또는 
<see cref="T:System.CodeDom.CodeTypeReferenceCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;, if it exists in the collection.">지정한 <see cref="T:System.CodeDom.CodeTypeReference" />의 컬렉션에 인덱스가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to locate in the collection.">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; in the collection if found; otherwise, -1.">지정된 <see cref="T:System.CodeDom.CodeTypeReference" />의 인덱스가 해당 컬렉션에 있으면 반환 값은 해당 인덱스이고 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Inserts a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; into the collection at the specified index.">지정된 인덱스의 컬렉션에 <see cref="T:System.CodeDom.CodeTypeReference" />를 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index where the item should be inserted.">항목을 삽입할 인덱스이며 0부터 시작합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to insert.">삽입할 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; at the specified index in the collection.">컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeTypeReference" />를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">액세스할 컬렉션의 인덱스입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; at each valid index.">유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; from the collection.">지정된 <see cref="T:System.CodeDom.CodeTypeReference" />를 컬렉션에서 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to remove from the collection.">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary vsli:raw="Represents a reference to a data type.">데이터 형식에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified type.">지정한 형식을 사용하여 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type to reference.">참조할 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified data type name.">지정된 데이터 형식 이름을 사용하여 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The name of the data type to reference.">참조할 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified data type.">지정된 데이터 형식을 사용하여 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="An instance of the data type to reference.">참조할 데이터 형식의 인스턴스입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary vsli:raw="Gets or sets the data type to reference.">참조할 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type to reference.">참조할 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary vsli:raw="Specifies how the code type reference is to be resolved.">코드 형식 참조를 확인할 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary vsli:raw="Resolve the type from the type parameter.">형식 매개 변수에서 형식을 확인합니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary vsli:raw="Resolve the type from the root namespace.">루트 네임스페이스에서 형식을 확인합니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary vsli:raw="Represents a variable declaration.">변수 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified type and name.">지정된 형식 및 이름을 사용하여 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the variable.">변수의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="name" vsli:raw="The name of the variable.">변수 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">지정된 데이터 형식, 변수 이름 및 초기화 식을 사용하여 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the variable.">변수의 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="name" vsli:raw="The name of the variable.">변수 이름입니다.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">변수의 초기화 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type name and variable name.">지정된 데이터 형식 이름 및 변수 이름을 사용하여 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The name of the data type of the variable.">변수에 대한 데이터 형식의 이름입니다.</param>
      <param name="name" vsli:raw="The name of the variable.">변수 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">지정된 데이터 형식, 변수 이름 및 초기화 식을 사용하여 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The name of the data type of the variable.">변수에 대한 데이터 형식의 이름입니다.</param>
      <param name="name" vsli:raw="The name of the variable.">변수 이름입니다.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">변수의 초기화 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type and variable name.">지정된 데이터 형식 및 변수 이름을 사용하여 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The data type for the variable.">변수의 데이터 형식입니다.</param>
      <param name="name" vsli:raw="The name of the variable.">변수 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">지정된 데이터 형식, 변수 이름 및 초기화 식을 사용하여 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type" vsli:raw="The data type of the variable.">변수의 데이터 형식입니다.</param>
      <param name="name" vsli:raw="The name of the variable.">변수 이름입니다.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">변수의 초기화 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary vsli:raw="Gets or sets the initialization expression for the variable.">변수의 초기화 식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">변수의 초기화 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary vsli:raw="Gets or sets the name of the variable.">변수의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the variable.">변수 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary vsli:raw="Gets or sets the data type of the variable.">변수의 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the variable.">변수의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary vsli:raw="Represents a reference to a local variable.">지역 변수에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableReferenceExpression&quot; /&gt; class using the specified local variable name.">지정된 지역 변수 이름을 사용하여 <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="variableName" vsli:raw="The name of the local variable to reference.">참조할 지역 변수의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary vsli:raw="Gets or sets the name of the local variable to reference.">참조할 지역 변수의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the local variable to reference.">참조할 지역 변수의 이름입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary vsli:raw="Provides an example implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; interface.">
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 인터페이스의 예제 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeCompiler&quot; /&gt; class.">
        <see cref="T:System.CodeDom.Compiler.CodeCompiler" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary vsli:raw="Gets the command arguments to be passed to the compiler from the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt;.">지정된 <see cref="T:System.CodeDom.Compiler.CompilerParameters" />에서 컴파일러에 전달될 명령 인수를 가져옵니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; that indicates the compiler options.">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" />입니다.</param>
      <returns vsli:raw="The command arguments.">명령 인수입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary vsli:raw="Gets the name of the compiler executable.">컴파일러 실행 파일의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the compiler executable.">컴파일러 실행 파일의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary vsli:raw="Gets the file name extension to use for source files.">소스 파일에 사용할 확장명을 가져옵니다.</summary>
      <returns vsli:raw="The file name extension to use for source files.">소스 파일에 사용할 확장명입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Compiles the specified compile unit using the specified options, and returns the results from the compilation.">지정된 옵션을 사용하여 지정된 컴파일 단위를 컴파일한 다음 컴파일 결과를 반환합니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; object that indicates the source to compile.">컴파일할 소스를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" /> 개체입니다.</param>
      <returns vsli:raw="The results of compilation.">컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles the specified compile units using the specified options, and returns the results from the compilation.">지정된 옵션을 사용하여 지정된 컴파일 단위를 컴파일한 다음 컴파일 결과를 반환합니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="ea" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects that indicates the source to compile.">컴파일할 소스를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" /> 개체의 배열입니다.</param>
      <returns vsli:raw="The results of compilation.">컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;ea&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" />가 <see langword="null" />인 경우  
또는 
 <paramref name="ea" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles the specified file using the specified options, and returns the results from the compilation.">지정된 옵션을 사용하여 지정된 파일을 컴파일한 다음 컴파일 결과를 반환합니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="fileName" vsli:raw="The file name to compile.">컴파일할 파일 이름입니다.</param>
      <returns vsli:raw="The results of compilation.">컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" />가 <see langword="null" />인 경우  
또는 
 <paramref name="fileName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles the specified files using the specified options, and returns the results from the compilation.">지정된 옵션을 사용하여 지정된 파일을 컴파일한 다음 컴파일 결과를 반환합니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="fileNames" vsli:raw="An array of strings that indicates the file names of the files to compile.">컴파일할 파일의 파일 이름을 나타내는 문자열의 배열입니다.</param>
      <returns vsli:raw="The results of compilation.">컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileNames&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" />가 <see langword="null" />입니다.  
또는 
 <paramref name="fileNames" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles the specified source code string using the specified options, and returns the results from the compilation.">지정된 옵션을 사용하여 지정된 소스 코드 문자열을 컴파일한 다음 컴파일 결과를 반환합니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="source" vsli:raw="The source code string to compile.">컴파일할 소스 코드 문자열입니다.</param>
      <returns vsli:raw="The results of compilation.">컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles the specified source code strings using the specified options, and returns the results from the compilation.">지정된 옵션을 사용하여 지정된 소스 코드 문자열을 컴파일한 다음 컴파일 결과를 반환합니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="sources" vsli:raw="An array of strings containing the source code to compile.">컴파일할 소스 코드를 포함하는 문자열의 배열입니다.</param>
      <returns vsli:raw="The results of compilation.">컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;sources&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" />가 <see langword="null" />인 경우  
또는 
 <paramref name="sources" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Gets the command arguments to use when invoking the compiler to generate a response file.">컴파일러를 호출할 때 지시 파일을 생성하는 데 사용할 명령 인수를 가져옵니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="cmdArgs" vsli:raw="A command arguments string.">명령 인수 문자열입니다.</param>
      <returns vsli:raw="The command arguments to use to generate a response file, or &lt;see langword=&quot;null&quot; /&gt; if there are no response file arguments.">지시 파일을 생성하는 데 사용할 명령 인수이거나 지시 파일 인수가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary vsli:raw="Joins the specified string arrays.">지정된 문자열 배열을 연결합니다.</summary>
      <param name="sa" vsli:raw="The array of strings to join.">연결할 문자열의 배열입니다.</param>
      <param name="separator" vsli:raw="The separator to use.">사용할 구분 기호입니다.</param>
      <returns vsli:raw="The concatenated string.">연결된 문자열입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary vsli:raw="Processes the specified line from the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt;.">지정된 <see cref="T:System.CodeDom.Compiler.CompilerResults" />에서 지정된 줄을 처리합니다.</summary>
      <param name="results" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; that indicates the results of compilation.">컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" />입니다.</param>
      <param name="line" vsli:raw="The line to process.">처리할 줄입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />를 참조하세요.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the source to compile.">컴파일할 소스를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</param>
      <returns vsli:raw="The results of compilation.">컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />를 참조하십시오.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="ea" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects that indicates the source to compile.">컴파일할 소스를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" /> 개체의 배열입니다.</param>
      <returns vsli:raw="The results of compilation.">컴파일 결과입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />를 참조하세요.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="fileName" vsli:raw="The file name to compile.">컴파일할 파일 이름입니다.</param>
      <returns vsli:raw="The results of compilation.">컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />를 참조하십시오.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="fileNames" vsli:raw="An array of strings that indicates the file names to compile.">컴파일할 파일 이름을 나타내는 문자열 배열입니다.</param>
      <returns vsli:raw="The results of compilation.">컴파일 결과입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />를 참조하십시오.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="source" vsli:raw="A string that indicates the source code to compile.">컴파일할 소스 코드를 나타내는 문자열입니다.</param>
      <returns vsli:raw="The results of compilation.">컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])&quot; /&gt;.">이 멤버에 대한 설명은 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />를 참조하세요.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="sources" vsli:raw="An array of strings that indicates the source code to compile.">컴파일할 소스 코드를 나타내는 문자열의 배열입니다.</param>
      <returns vsli:raw="The results of compilation.">컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary vsli:raw="Provides a base class for &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementations. This class is abstract.">
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 구현을 위한 기본 클래스를 제공합니다. 이 클래스는 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; class.">
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles an assembly based on the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; trees contained in the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects, using the specified compiler settings.">지정된 컴파일러 설정을 사용하여 <see cref="N:System.CodeDom" /> 개체의 지정된 배열에 포함된 <see cref="T:System.CodeDom.CodeCompileUnit" /> 트리에 따라 어셈블리를 컴파일합니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for the compilation.">컴파일 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="compilationUnits" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">컴파일할 코드를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" /> 형식의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of the compilation.">컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.">지정된 컴파일러 설정을 사용하여 지정된 파일에 포함된 소스 코드에서 어셈블리를 컴파일합니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for the compilation.">컴파일 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="fileNames" vsli:raw="An array of the names of the files to compile.">컴파일할 파일 이름의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.">지정된 컴파일러 설정을 사용하여 소스 코드가 포함된 지정된 문자열 배열에서 어셈블리를 컴파일합니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler settings for this compilation.">이 컴파일에 대한 컴파일러 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="sources" vsli:raw="An array of source code strings to compile.">컴파일할 소스 코드 문자열의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary vsli:raw="When overridden in a derived class, creates a new code compiler.">파생 클래스에서 재정의될 때 새 코드 컴파일러를 만듭니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; that can be used for compilation of &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 기준 소스 코드 표현을 컴파일하는 데 사용할 수 있는 <see cref="N:System.CodeDom" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">지정된 값의 이스케이프된 식별자를 만듭니다.</summary>
      <param name="value" vsli:raw="The string for which to create an escaped identifier.">이스케이프된 식별자를 만들 문자열입니다.</param>
      <returns vsli:raw="The escaped identifier for the value.">해당 값의 이스케이프된 식별자입니다.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator.">파생 클래스에서 재정의될 때 새 코드 생성기를 만듭니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 기준 소스 코드 표현을 생성하는 데 사용할 수 있는 <see cref="N:System.CodeDom" />를 반환합니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator using the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; for output.">파생 클래스에서 재정의될 때 지정된 <see cref="T:System.IO.TextWriter" />를 출력에 사용하여 새 코드 생성기를 만듭니다.</summary>
      <param name="output" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to use to output.">출력에 사용할 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 기준 소스 코드 표현을 생성하는 데 사용할 수 있는 <see cref="N:System.CodeDom" />를 반환합니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator using the specified file name for output.">파생 클래스에서 재정의될 때 지정된 파일 이름을 출력으로 사용하여 새 코드 생성기를 만듭니다.</summary>
      <param name="fileName" vsli:raw="The file name to output to.">출력할 파일 이름입니다.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 기준 소스 코드 표현을 생성하는 데 사용할 수 있는 <see cref="N:System.CodeDom" />를 반환합니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary vsli:raw="When overridden in a derived class, creates a new code parser.">파생 클래스에서 재정의될 때 새 코드 파서를 만듭니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeParser&quot; /&gt; that can be used to parse source code. The base implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">소스 코드를 구문 분석하는 데 사용할 수 있는 <see cref="T:System.CodeDom.Compiler.ICodeParser" />입니다. 기본 구현은 항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the specified language.">지정된 언어에 대한 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 인스턴스를 가져옵니다.</summary>
      <param name="language" vsli:raw="The language name.">언어 이름입니다.</param>
      <returns vsli:raw="A CodeDOM provider that is implemented for the specified language name.">지정된 언어 이름에 대해 구현된 CodeDOM 공급자입니다.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; does not have a configured provider on this computer.">
        <paramref name="language" />에 대한 공급자가 이 컴퓨터에 구성되어 있지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="language" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the specified language and provider options.">지정된 언어와 공급자 옵션에 대한 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 인스턴스를 가져옵니다.</summary>
      <param name="language" vsli:raw="The language name.">언어 이름입니다.</param>
      <param name="providerOptions" vsli:raw="A collection of provider options from the configuration file.">구성 파일의 공급자 옵션 컬렉션입니다.</param>
      <returns vsli:raw="A CodeDOM provider that is implemented for the specified language name and options.">지정된 언어 이름과 옵션에 대해 구현된 CodeDOM 공급자입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">지정된 값의 유효한 식별자를 만듭니다.</summary>
      <param name="value" vsli:raw="The string for which to generate a valid identifier.">유효한 식별자를 생성할 문자열입니다.</param>
      <returns vsli:raw="A valid identifier for the specified value.">지정된 값의 유효한 식별자입니다.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary vsli:raw="Gets the default file name extension to use for source code files in the current language.">현재 언어의 소스 코드 파일에 사용할 기본 확장명을 가져옵니다.</summary>
      <returns vsli:raw="A file name extension corresponding to the extension of the source files of the current language. The base implementation always returns &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.">현재 언어의 소스 코드 확장명에 해당하는 확장명입니다. 기본 구현은 항상 <see cref="F:System.String.Empty" />를 반환합니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.">지정된 CodeDOM(코드 문서 개체 모델) 컴파일 단위에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</summary>
      <param name="compileUnit" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; for which to generate code.">코드를 생성할 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which the output code is sent.">출력 코드가 전달될 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.">지정된 CodeDOM(코드 문서 개체 모델) 식에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object that indicates the expression for which to generate code.">코드를 생성할 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">출력 코드가 전달될 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.">지정된 CodeDOM(코드 문서 개체 모델) 멤버 선언에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; object that indicates the member for which to generate code.">코드를 생성할 멤버를 나타내는 <see cref="T:System.CodeDom.CodeTypeMember" /> 개체입니다.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">출력 코드가 전달될 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="This method is not overridden in a derived class.">이 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.">지정된 CodeDOM(코드 문서 개체 모델) 네임스페이스에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</summary>
      <param name="codeNamespace" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object that indicates the namespace for which to generate code.">코드를 생성할 네임스페이스를 나타내는 <see cref="T:System.CodeDom.CodeNamespace" /> 개체입니다.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">출력 코드가 전달될 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.">지정된 CodeDOM(코드 문서 개체 모델) 문에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</summary>
      <param name="statement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the CodeDOM elements for which to generate code.">코드를 생성할 CodeDOM 요소가 포함된 <see cref="T:System.CodeDom.CodeStatement" />입니다.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">출력 코드가 전달될 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.">지정된 CodeDOM(코드 문서 개체 모델) 형식 선언에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</summary>
      <param name="codeType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object that indicates the type for which to generate code.">코드를 생성할 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체입니다.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">출력 코드가 전달될 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary vsli:raw="Returns the language provider and compiler configuration settings for this computer.">이 컴퓨터의 언어 공급자 및 컴파일러 구성 설정을 반환합니다.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; representing the settings of all configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementations.">구성된 모든 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 구현의 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 형식의 배열입니다.</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary vsli:raw="Returns the language provider and compiler configuration settings for the specified language.">지정된 언어에 대한 언어 공급자 및 컴파일러 구성 설정을 반환합니다.</summary>
      <param name="language" vsli:raw="A language name.">언어 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; object populated with settings of the configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation.">구성된 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 구현의 설정으로 채워진 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 개체입니다.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; does not have a configured provider on this computer.">
        <paramref name="language" />에 대한 공급자가 이 컴퓨터에 구성되어 있지 않은 경우</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="language" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified data type.">지정된 데이터 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />를 가져옵니다.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">형식 변환기를 검색할 개체의 형식입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type, or &lt;see langword=&quot;null&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type cannot be found.">지정된 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />이거나, 지정된 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary vsli:raw="Returns a language name associated with the specified file name extension, as configured in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; compiler configuration section.">
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 컴파일러 구성 섹션에 구성되어 있는 대로, 지정된 파일 이름 확장명과 연결된 언어 이름을 반환합니다.</summary>
      <param name="extension" vsli:raw="A file name extension.">파일 이름 확장명입니다.</param>
      <returns vsli:raw="A language name associated with the file name extension, as configured in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; compiler configuration settings.">
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 컴파일러 구성 설정에 구성되어 있는 대로, 파일 이름 확장명과 연결된 언어 이름입니다.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; does not have a configured language provider on this computer.">
        <paramref name="extension" />에 대한 언어 공급자가 이 컴퓨터에 구성되어 있지 않은 경우</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="extension" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">지정된 <see cref="T:System.CodeDom.CodeTypeReference" />에서 나타내는 형식을 가져옵니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type to return.">반환할 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <returns vsli:raw="A text representation of the specified type, formatted for the language in which code is generated by this code generator. In Visual Basic, for example, passing in a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type will return &quot;Integer&quot;.">지정된 형식의 텍스트 표현으로, 이 코드 생성기가 생성하는 코드에 대한 언어로 서식이 지정되어 있습니다. 예를 들어, Visual Basic에서 <see cref="T:System.CodeDom.CodeTypeReference" /> 형식에 대한 <see cref="T:System.Int32" />를 전달하면 "Integer"가 반환됩니다.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary vsli:raw="Tests whether a file name extension has an associated &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation configured on the computer.">파일 이름 확장명과 연결된 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 구현이 컴퓨터에 구성되어 있는지 여부를 테스트합니다.</summary>
      <param name="extension" vsli:raw="A file name extension.">파일 이름 확장명입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation is configured for the specified file name extension; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 구현이 지정된 파일 이름 확장명에 대해 구성되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="extension" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary vsli:raw="Tests whether a language has a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation configured on the computer.">언어에 대한 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 구현이 컴퓨터에 구성되어 있는지 여부를 테스트합니다.</summary>
      <param name="language" vsli:raw="The language name.">언어 이름입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation is configured for the specified language; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 구현이 지정된 언어에 대해 구성되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="language" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary vsli:raw="Returns a value that indicates whether the specified value is a valid identifier for the current language.">지정된 값이 현재 언어에 유효한 식별자인지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="value" vsli:raw="The value to verify as a valid identifier.">유효한 식별자인지 확인할 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> 매개 변수가 유효한 식별자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary vsli:raw="Gets a language features identifier.">언어 기능 식별자를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.LanguageOptions&quot; /&gt; that indicates special features of the language.">언어의 특수 기능을 나타내는 <see cref="T:System.CodeDom.Compiler.LanguageOptions" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary vsli:raw="Compiles the code read from the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">지정된 텍스트 스트림에서 읽은 코드를 <see cref="T:System.CodeDom.CodeCompileUnit" />으로 컴파일합니다.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; object that is used to read the code to be parsed.">구문 분석될 코드를 읽는 데 사용되는 <see cref="T:System.IO.TextReader" /> 개체입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that contains a representation of the parsed code.">구문 분석된 코드를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Returns a value indicating whether the specified code generation support is provided.">지정된 코드 생성이 지원되는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="generatorSupport" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object that indicates the type of code generation support to verify.">확인할 코드 생성 지원의 형식을 나타내는 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified code generation support is provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 코드 생성이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary vsli:raw="Provides an example implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; interface. This class is abstract.">
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 인터페이스의 예제 구현을 제공합니다. 이 클래스는 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGenerator&quot; /&gt; class.">
        <see cref="T:System.CodeDom.Compiler.CodeGenerator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary vsli:raw="Generates a line-continuation character and outputs the specified string on a new line.">줄 연속 문자를 생성하고 새 줄에 지정된 문자열을 출력합니다.</summary>
      <param name="st" vsli:raw="The string to write on the new line.">새 줄에 쓸 문자열입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">지정된 값의 이스케이프된 식별자를 만듭니다.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">이스케이프된 식별자를 만들 문자열입니다.</param>
      <returns vsli:raw="The escaped identifier for the value.">해당 값의 이스케이프된 식별자입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">지정된 값의 유효한 식별자를 만듭니다.</summary>
      <param name="value" vsli:raw="A string to create a valid identifier for.">유효한 식별자를 만들 문자열입니다.</param>
      <returns vsli:raw="A valid identifier for the value.">값의 유효한 식별자입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary vsli:raw="Gets the code type declaration for the current class.">현재 클래스의 코드 형식 선언을 가져옵니다.</summary>
      <returns vsli:raw="The code type declaration for the current class.">현재 클래스의 코드 형식 선언입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary vsli:raw="Gets the current member of the class.">클래스의 현재 멤버를 가져옵니다.</summary>
      <returns vsli:raw="The current member of the class.">클래스의 현재 멤버입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary vsli:raw="Gets the current member name.">현재 멤버 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the current member.">현재 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary vsli:raw="Gets the current class name.">현재 클래스의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The current class name.">현재 클래스의 이름입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary vsli:raw="Generates code for the specified argument reference expression.">지정된 인수 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; that indicates the expression to generate code for.">코드를 생성할 식을 나타내는 <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary vsli:raw="Generates code for the specified array creation expression.">지정된 배열 생성 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; that indicates the expression to generate code for.">코드를 생성할 식을 나타내는 <see cref="T:System.CodeDom.CodeArrayCreateExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary vsli:raw="Generates code for the specified array indexer expression.">지정된 배열 인덱서 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; that indicates the expression to generate code for.">코드를 생성할 식을 나타내는 <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary vsli:raw="Generates code for the specified assignment statement.">지정된 할당문에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; that indicates the statement to generate code for.">코드를 생성할 문을 나타내는 <see cref="T:System.CodeDom.CodeAssignStatement" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary vsli:raw="Generates code for the specified attach event statement.">지정된 첨부 이벤트 문에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; that indicates the statement to generate code for.">코드를 생성할 문을 나타내는 <see cref="T:System.CodeDom.CodeAttachEventStatement" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute block end.">지정된 특성 블록의 끝을 나타내는 코드를 생성합니다.</summary>
      <param name="attributes" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the end of the attribute block to generate code for.">코드를 생성할 특성 블록의 끝을 나타내는 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute block start.">지정된 특성 블록의 시작에 대한 코드를 생성합니다.</summary>
      <param name="attributes" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the start of the attribute block to generate code for.">코드를 생성할 특성 블록의 시작을 나타내는 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary vsli:raw="Generates code for the specified base reference expression.">지정된 기본 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBaseReferenceExpression&quot; /&gt; that indicates the expression to generate code for.">코드를 생성할 식을 나타내는 <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary vsli:raw="Generates code for the specified binary operator expression.">지정된 이항 연산자 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; that indicates the expression to generate code for.">코드를 생성할 식을 나타내는 <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary vsli:raw="Generates code for the specified cast expression.">지정된 변환 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; that indicates the expression to generate code for.">코드를 생성할 식을 나타내는 <see cref="T:System.CodeDom.CodeCastExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">지정된 텍스트 작성기와 코드 생성기 옵션을 사용하여 지정된 클래스 멤버에 대한 코드를 생성합니다.</summary>
      <param name="member" vsli:raw="The class member to generate code for.">코드를 생성할 클래스 멤버입니다.</param>
      <param name="writer" vsli:raw="The text writer to output code to.">코드를 출력할 텍스트 기록기입니다.</param>
      <param name="options" vsli:raw="The options to use when generating the code.">코드를 생성할 때 사용할 옵션입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.CodeDom.Compiler.CodeGenerator.Output&quot; /&gt; property is not &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> 속성이 <see langword="null" />이 아닌 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary vsli:raw="Generates code for the specified comment.">지정된 주석에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; to generate code for.">코드를 생성할 <see cref="T:System.CodeDom.CodeComment" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Generates code for the specified comment statement.">지정된 주석 문에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">코드를 생성할 문입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.CodeDom.CodeCommentStatement.Comment&quot; /&gt; property of &lt;paramref name=&quot;e&quot; /&gt; is not set.">
        <paramref name="e" />의 <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> 속성이 설정되지 않았습니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Generates code for the specified comment statements.">지정된 주석 문에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the specified compile unit.">지정된 컴파일 단위에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">코드를 생성할 컴파일 단위입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the end of a compile unit.">컴파일 단위의 끝을 나타내는 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">코드를 생성할 컴파일 단위입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the start of a compile unit.">컴파일 단위의 시작을 나타내는 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">코드를 생성할 컴파일 단위입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary vsli:raw="Generates code for the specified conditional statement.">지정된 조건문에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified constructor.">지정된 생성자에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The constructor to generate code for.">코드를 생성할 생성자입니다.</param>
      <param name="c" vsli:raw="The type of the object that this constructor constructs.">이 생성자가 생성하는 개체의 형식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary vsli:raw="Generates code for the specified decimal value.">지정된 10진수 값에 대한 코드를 생성합니다.</summary>
      <param name="d" vsli:raw="The decimal value to generate code for.">코드를 생성할 10진수 값입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary vsli:raw="Generates code for the specified reference to a default value.">지정된 기본값 참조에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The reference to generate code for.">코드를 생성할 참조입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary vsli:raw="Generates code for the specified delegate creation expression.">지정된 대리자 생성 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary vsli:raw="Generates code for the specified delegate invoke expression.">지정된 대리자 호출 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary vsli:raw="Generates code for the specified direction expression.">지정된 명령 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Generates code for the specified code directives.">지정된 코드 지시문에 대한 코드를 생성합니다.</summary>
      <param name="directives" vsli:raw="The code directives to generate code for.">코드를 생성할 코드 지시문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary vsli:raw="Generates code for a double-precision floating point number.">배정밀도 부동 소수점 숫자에 대한 코드를 생성합니다.</summary>
      <param name="d" vsli:raw="The value to generate code for.">코드를 생성할 값입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified entry point method.">지정된 진입점 메서드에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The entry point for the code.">코드에 대한 진입점입니다.</param>
      <param name="c" vsli:raw="The code that declares the type.">형식을 선언하는 코드입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified event.">지정된 이벤트에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The member event to generate code for.">코드를 생성할 멤버 이벤트입니다.</param>
      <param name="c" vsli:raw="The type of the object that this event occurs on.">이 이벤트가 발생하는 개체의 형식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary vsli:raw="Generates code for the specified event reference expression.">지정된 이벤트 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Generates code for the specified code expression.">지정된 코드 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The code expression to generate code for.">코드를 생성할 코드 식입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt;.">
        <paramref name="e" />은 유효한 <see cref="T:System.CodeDom.CodeStatement" />이 아닙니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary vsli:raw="Generates code for the specified expression statement.">지정된 표현문에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary vsli:raw="Generates code for the specified member field.">지정된 멤버 필드에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The field to generate code for.">코드를 생성할 필드입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary vsli:raw="Generates code for the specified field reference expression.">지정된 필드 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary vsli:raw="Generates code for the specified &lt;see langword=&quot;goto&quot; /&gt; statement.">지정된 <see langword="goto" /> 문에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary vsli:raw="Generates code for the specified indexer expression.">지정된 인덱서 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary vsli:raw="Generates code for the specified iteration statement.">지정된 반복 문에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary vsli:raw="Generates code for the specified labeled statement.">지정된 레이블 문에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary vsli:raw="Generates code for the specified line pragma end.">지정된 줄 pragma의 끝을 나타내는 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The end of the line pragma to generate code for.">코드를 생성할 줄 pragma의 끝입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary vsli:raw="Generates code for the specified line pragma start.">지정된 줄 pragma의 시작을 나타내는 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The start of the line pragma to generate code for.">코드를 생성할 줄 pragma의 시작입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified method.">지정된 메서드에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The member method to generate code for.">코드를 생성할 멤버 메서드입니다.</param>
      <param name="c" vsli:raw="The type of the object that this method occurs on.">이 메서드가 발생하는 개체의 형식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary vsli:raw="Generates code for the specified method invoke expression.">지정된 메서드 호출 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary vsli:raw="Generates code for the specified method reference expression.">지정된 메서드 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary vsli:raw="Generates code for the specified method return statement.">지정된 메서드 return 문에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace.">지정된 네임스페이스에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">코드를 생성할 네임스페이스입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the end of a namespace.">네임스페이스의 끝을 나타내는 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">코드를 생성할 네임스페이스입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary vsli:raw="Generates code for the specified namespace import.">지정된 네임스페이스 가져오기에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The namespace import to generate code for.">코드를 생성할 네임스페이스 가져오기입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace import.">지정된 네임스페이스 가져오기에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The namespace import to generate code for.">코드를 생성할 네임스페이스 가져오기입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the namespaces in the specified compile unit.">지정된 컴파일 단위의 네임스페이스에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The compile unit to generate namespaces for.">네임스페이스를 생성할 컴파일 단위입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the start of a namespace.">네임스페이스의 시작을 나타내는 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">코드를 생성할 네임스페이스입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary vsli:raw="Generates code for the specified object creation expression.">지정된 개체 생성 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Generates code for the specified parameter declaration expression.">지정된 매개 변수 선언 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary vsli:raw="Generates code for the specified primitive expression.">지정된 기본 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; uses an invalid data type. Only the following data types are valid:  &#xA;  &#xA;- string  &#xA;  &#xA;- char  &#xA;  &#xA;- byte  &#xA;  &#xA;- Int16  &#xA;  &#xA;- Int32  &#xA;  &#xA;- Int64  &#xA;&#xA;- Half&#xA;  &#xA;- Single  &#xA;  &#xA;- Double  &#xA;  &#xA;- Decimal">
        <paramref name="e" />는 잘못된 데이터 형식을 사용합니다. 다음 데이터 형식만 사용할 수 있습니다. 

string 
char 
byte 
Int16 
Int32 
Int64 
Single 
Double 
Decimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified property.">지정된 속성에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The property to generate code for.">코드를 생성할 속성입니다.</param>
      <param name="c" vsli:raw="The type of the object that this property occurs on.">이 속성이 발생하는 개체의 형식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary vsli:raw="Generates code for the specified property reference expression.">지정된 속성 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary vsli:raw="Generates code for the specified property set value reference expression.">지정된 속성 설정 값의 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary vsli:raw="Generates code for the specified remove event statement.">지정된 제거 이벤트 문에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary vsli:raw="Generates code for a single-precision floating point number.">단정밀도 부동 소수점 숫자에 대한 코드를 생성합니다.</summary>
      <param name="s" vsli:raw="The value to generate code for.">코드를 생성할 값입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment compile unit.">지정된 리터럴 코드 단편 컴파일 단위의 코드를 출력합니다.</summary>
      <param name="e" vsli:raw="The literal code fragment compile unit to generate code for.">코드를 생성할 리터럴 코드 단편 컴파일 단위입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment expression.">지정된 리터럴 코드 단편 식의 코드를 출력합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment class member.">지정된 리터럴 코드 단편 클래스 멤버의 코드를 출력합니다.</summary>
      <param name="e" vsli:raw="The member to generate code for.">코드를 생성할 멤버입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment statement.">지정된 리터럴 코드 단편 문의 코드를 출력합니다.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Generates code for the specified statement.">지정된 문에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">코드를 생성할 문입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt;.">
        <paramref name="e" />은 유효한 <see cref="T:System.CodeDom.CodeStatement" />이 아닙니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Generates code for the specified statement collection.">지정된 문 컬렉션에 대한 코드를 생성합니다.</summary>
      <param name="stms">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary vsli:raw="Generates code for the specified this reference expression.">지정된 this 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary vsli:raw="Generates code for the specified throw exception statement.">지정된 예외 throw 문에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary vsli:raw="Generates code for the specified &lt;c&gt;try-catch-finally&lt;/c&gt; statement.">지정된 <see langword="try...catch...finally" /> 문에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary vsli:raw="Generates code for the specified class constructor.">지정된 클래스 생성자에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The class constructor to generate code for.">코드를 생성할 클래스 생성자입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified end of the class.">지정된 클래스의 끝에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The end of the class to generate code for.">코드를 생성할 클래스의 끝입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary vsli:raw="Generates code for the specified type of expression.">지정된 type of 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary vsli:raw="Generates code for the specified type reference expression.">지정된 형식 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace and the classes it contains.">지정된 네임스페이스 및 해당 네임스페이스에 포함된 클래스에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The namespace to generate classes for.">클래스를 생성할 네임스페이스입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified start of the class.">지정된 클래스의 시작에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The start of the class to generate code for.">코드를 생성할 클래스의 시작입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary vsli:raw="Generates code for the specified variable declaration statement.">지정된 변수 선언문에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary vsli:raw="Generates code for the specified variable reference expression.">지정된 변수 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the name of the specified data type.">지정된 데이터 형식의 이름을 가져옵니다.</summary>
      <param name="value" vsli:raw="The type whose name will be returned.">이름이 반환될 형식입니다.</param>
      <returns vsli:raw="The name of the data type reference.">데이터 형식 참조의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary vsli:raw="Gets or sets the amount of spaces to indent each indentation level.">각 들여쓰기 수준별로 들여쓸 공백의 수를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The number of spaces to indent for each indentation level.">각 들여쓰기 수준별로 들여쓸 공백의 수입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a class.">현재 생성 중인 개체가 클래스인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 개체가 클래스이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a delegate.">현재 생성 중인 개체가 대리자인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a delegate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 개체가 대리자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is an enumeration.">현재 생성 중인 개체가 열거형인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is an enumeration; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 개체가 열거형이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is an interface.">현재 생성 중인 개체가 인터페이스인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is an interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 개체가 인터페이스이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a value type or struct.">현재 생성 중인 개체가 구조체인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a value type or struct; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 개체가 값 형식이거나 구조체이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified value is a valid identifier.">지정된 값이 유효한 식별자인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The value to test for conflicts with valid identifiers.">유효한 식별자와 충돌하는지 여부를 테스트할 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">값이 유효한 식별자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified string is a valid identifier.">지정된 문자열이 유효한 식별자인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The string to test for validity.">유효성을 테스트할 문자열입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 문자열이 유효한 식별자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary vsli:raw="Gets the token that represents &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="null" />을 나타내는 토큰을 가져옵니다.</summary>
      <returns vsli:raw="The token that represents &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="null" />을 나타내는 토큰입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary vsli:raw="Gets the options to be used by the code generator.">코드 생성기에서 사용되는 옵션을 가져옵니다.</summary>
      <returns vsli:raw="An object that indicates the options for the code generator to use.">코드 생성기에서 사용될 옵션을 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary vsli:raw="Gets the text writer to use for output.">출력에 사용할 텍스트 작성기를 가져옵니다.</summary>
      <returns vsli:raw="The text writer to use for output.">출력에 사용할 텍스트 작성기입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Outputs an argument in an attribute block.">특성 블록의 인수를 출력합니다.</summary>
      <param name="arg" vsli:raw="The attribute argument to generate code for.">코드를 생성할 특성 인수입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute declaration collection.">지정된 특성 선언 컬렉션에 대한 코드를 생성합니다.</summary>
      <param name="attributes" vsli:raw="The attributes to generate code for.">코드를 생성할 특성입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary vsli:raw="Generates code for the specified &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt;.">지정된 <see cref="T:System.CodeDom.FieldDirection" />에 대한 코드를 생성합니다.</summary>
      <param name="dir" vsli:raw="One of the enumeration values that indicates the attribute of the field.">필드 특성을 나타내는 열거형 값 중 하나입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Generates code for the specified expression list.">지정된 식 목록에 대한 코드를 생성합니다.</summary>
      <param name="expressions" vsli:raw="The expressions to generate code for.">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary vsli:raw="Generates code for the specified expression list.">지정된 식 목록에 대한 코드를 생성합니다.</summary>
      <param name="expressions" vsli:raw="The expressions to generate code for.">코드를 생성할 식입니다.</param>
      <param name="newlineBetweenItems" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to insert a new line after each item; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">각 항목 다음에 새 줄을 삽입하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Outputs a field scope modifier that corresponds to the specified attributes.">지정된 특성에 해당하는 필드 범위 한정자를 출력합니다.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that specifies the attributes.">특성을 지정하는 열거형 값 중 하나입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary vsli:raw="Outputs the specified identifier.">지정된 식별자를 출력합니다.</summary>
      <param name="ident" vsli:raw="The identifier to output.">출력할 식별자입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Generates code for the specified member access modifier.">지정된 멤버 액세스 한정자에 대한 코드를 생성합니다.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the member access modifier to generate code for.">코드를 생성할 멤버 액세스 한정자를 나타내는 열거형 값 중 하나입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Generates code for the specified member scope modifier.">지정된 멤버 범위 한정자에 대한 코드를 생성합니다.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the member scope modifier to generate code for.">코드를 생성할 멤버 범위 한정자를 나타내는 열거형 값 중 하나입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary vsli:raw="Generates code for the specified operator.">지정된 연산자에 대한 코드를 생성합니다.</summary>
      <param name="op" vsli:raw="The operator to generate code for.">코드를 생성할 연산자입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Generates code for the specified parameters.">지정된 매개 변수에 대한 코드를 생성합니다.</summary>
      <param name="parameters" vsli:raw="The parameter declaration expressions to generate code for.">코드를 생성할 매개 변수 선언 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Generates code for the specified type.">지정된 형식에 대한 코드를 생성합니다.</summary>
      <param name="typeRef" vsli:raw="The type to generate code for.">코드를 생성할 형식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary vsli:raw="Generates code for the specified type attributes.">지정된 형식 특성에 대한 코드를 생성합니다.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the type attributes to generate code for.">코드를 생성할 형식 특성을 나타내는 열거형 값 중 하나입니다.</param>
      <param name="isStruct" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a struct; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">형식이 구조체이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="isEnum" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an enum; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">형식이 열거형이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Generates code for the specified object type and name pair.">지정된 개체 형식 및 이름 쌍에 대한 코드를 생성합니다.</summary>
      <param name="typeRef" vsli:raw="The type.">형식입니다.</param>
      <param name="name" vsli:raw="The name for the object.">개체의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary vsli:raw="Converts the specified string by formatting it with escape codes.">이스케이프 코드로 지정된 문자열의 서식을 지정하여 변환합니다.</summary>
      <param name="value" vsli:raw="The string to convert.">변환할 문자열입니다.</param>
      <returns vsli:raw="The converted string.">변환된 문자열입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the specified code generation support is provided.">지정된 코드 생성이 지원되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="support" vsli:raw="The type of code generation support to test for.">테스트할 코드 생성 지원의 형식입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified code generation support is provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 코드 생성이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">지정된 값의 이스케이프된 식별자를 만듭니다.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">이스케이프된 식별자를 만들 문자열입니다.</param>
      <returns vsli:raw="The escaped identifier for the value.">해당 값의 이스케이프된 식별자입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">지정된 값의 유효한 식별자를 만듭니다.</summary>
      <param name="value" vsli:raw="The string to generate a valid identifier for.">유효한 식별자를 생성할 문자열입니다.</param>
      <returns vsli:raw="A valid identifier for the specified value.">지정된 값의 유효한 식별자입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.">지정된 CodeDOM(코드 문서 개체 모델) 컴파일 단위에 대한 코드를 생성하고 지정된 옵션을 사용하여 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e" vsli:raw="The CodeDOM compilation unit to generate code for.">코드를 생성할 CodeDOM 컴파일 단위입니다.</param>
      <param name="w" vsli:raw="The text writer to output code to.">코드를 출력할 텍스트 기록기입니다.</param>
      <param name="o" vsli:raw="The options to use for generating code.">코드 생성에 사용할 옵션입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" />를 사용할 수 없는 경우 이 메서드 호출이 수행되기 전에 <paramref name="w" />가 닫혔을 수 있습니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.">지정된 CodeDOM(코드 문서 개체 모델) 식에 대한 코드를 생성하고 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">코드를 생성할 식입니다.</param>
      <param name="w" vsli:raw="The text writer to output code to.">코드를 출력할 텍스트 기록기입니다.</param>
      <param name="o" vsli:raw="The options to use for generating code.">코드 생성에 사용할 옵션입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" />를 사용할 수 없는 경우 이 메서드 호출이 수행되기 전에 <paramref name="w" />가 닫혔을 수 있습니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.">지정된 CodeDOM(코드 문서 개체 모델) 네임스페이스에 대한 코드를 생성하고 지정된 옵션을 사용하여 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">코드를 생성할 네임스페이스입니다.</param>
      <param name="w" vsli:raw="The text writer to output code to.">코드를 출력할 텍스트 기록기입니다.</param>
      <param name="o" vsli:raw="The options to use for generating code.">코드 생성에 사용할 옵션입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" />를 사용할 수 없는 경우 이 메서드 호출이 수행되기 전에 <paramref name="w" />가 닫혔을 수 있습니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.">지정된 CodeDOM(코드 문서 개체 모델) 문에 대한 코드를 생성하고 지정된 옵션을 사용하여 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e" vsli:raw="The statement that contains the CodeDOM elements to translate.">변환할 CodeDOM 요소를 포함하는 문입니다.</param>
      <param name="w" vsli:raw="The text writer to output code to.">코드를 출력할 텍스트 기록기입니다.</param>
      <param name="o" vsli:raw="The options to use for generating code.">코드 생성에 사용할 옵션입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" />를 사용할 수 없는 경우 이 메서드 호출이 수행되기 전에 <paramref name="w" />가 닫혔을 수 있습니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.">지정된 CodeDOM(코드 문서 개체 모델) 형식 선언에 대한 코드를 생성하고 지정된 옵션을 사용하여 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e" vsli:raw="The type to generate code for.">코드를 생성할 형식입니다.</param>
      <param name="w" vsli:raw="The text writer to output code to.">코드를 출력할 텍스트 기록기입니다.</param>
      <param name="o" vsli:raw="The options to use for generating code.">코드 생성에 사용할 옵션입니다.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" />를 사용할 수 없는 경우 이 메서드 호출이 수행되기 전에 <paramref name="w" />가 닫혔을 수 있습니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">지정된 <see cref="T:System.CodeDom.CodeTypeReference" />에서 나타내는 형식을 가져옵니다.</summary>
      <param name="type" vsli:raw="The type to return.">반환할 형식입니다.</param>
      <returns vsli:raw="The name of the data type reference.">데이터 형식 참조의 이름입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value that indicates whether the specified value is a valid identifier for the current language.">지정된 값이 현재 언어에 유효한 식별자인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The value to test.">테스트할 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> 매개 변수가 유효한 식별자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the generator provides support for the language features represented by the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object.">지정된 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 개체에서 나타내는 언어 기능에 대한 지원을 생성기에서 제공하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="support" vsli:raw="The capabilities to test the generator for.">테스트할 생성자의 기능입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified capabilities are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 기능을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified value is not a valid identifier.">지정된 값이 유효한 식별자가 아니면 예외를 throw합니다.</summary>
      <param name="value" vsli:raw="The identifier to validate.">유효성을 확인할 식별자입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified string is not a valid identifier.">지정된 문자열이 유효한 식별자가 아니면 예외를 throw합니다.</summary>
      <param name="value" vsli:raw="The identifier to test for validity as an identifier.">유효성을 테스트할 식별자입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified identifier is invalid or conflicts with reserved or language keywords.">지정된 식별자가 유효하지 않거나 예약된 키워드나 언어 키워드와 충돌하는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary vsli:raw="Attempts to validate each identifier field contained in the specified &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; or &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; tree.">지정된 <see cref="T:System.CodeDom.CodeObject" /> 또는 <see cref="N:System.CodeDom" /> 트리에 포함된 각 식별자 필드의 유효성을 검사하려고 한 경우</summary>
      <param name="e" vsli:raw="An object to test for invalid identifiers.">잘못된 식별자인지 테스트할 개체입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; contains an invalid identifier.">지정된 <see cref="T:System.CodeDom.CodeObject" />에 잘못된 식별자가 있는 경우</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary vsli:raw="Represents a set of options used by a code generator.">코드 생성기에서 사용되는 옵션의 집합을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; class.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary vsli:raw="Gets or sets a value indicating whether to insert blank lines between members.">멤버 사이에 빈 줄을 삽입할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if blank lines should be inserted; otherwise, &lt;see langword=&quot;false&quot; /&gt;. By default, the value of this property is &lt;see langword=&quot;true&quot; /&gt;.">빈 줄을 삽입해야 한다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본적으로 이 속성 값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary vsli:raw="Gets or sets the style to use for bracing.">중괄호에 사용할 스타일을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A string containing the bracing style to use.">사용할 중괄호 스타일을 포함하는 문자열입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary vsli:raw="Gets or sets a value indicating whether to append an &lt;see langword=&quot;else&quot; /&gt;, &lt;see langword=&quot;catch&quot; /&gt;, or &lt;see langword=&quot;finally&quot; /&gt; block, including brackets, at the closing line of each previous &lt;see langword=&quot;if&quot; /&gt; or &lt;see langword=&quot;try&quot; /&gt; block.">이전의 각 <see langword="else" /> 또는 <see langword="catch" /> 블록을 닫는 줄에서 대괄호를 포함한 <see langword="finally" />, <see langword="if" /> 또는 <see langword="try" /> 블록을 추가할 것인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an else should be appended; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value of this property is &lt;see langword=&quot;false&quot; /&gt;.">else를 추가해야 한다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 속성의 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary vsli:raw="Gets or sets the string to use for indentations.">들여쓰기에 사용할 문자열을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A string containing the characters to use for indentations.">들여쓰기에 사용할 문자를 포함하는 문자열입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary vsli:raw="Gets or sets the object at the specified index.">지정된 인덱스에서 개체를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The name associated with the object to retrieve.">검색할 개체와 관련된 이름입니다.</param>
      <returns vsli:raw="The object associated with the specified name. If no object associated with the specified name exists in the collection, &lt;see langword=&quot;null&quot; /&gt;.">지정된 이름과 관련된 개체입니다. 지정된 이름과 관련된 개체가 컬렉션에 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary vsli:raw="Gets or sets a value indicating whether to generate members in the order in which they occur in member collections.">멤버 컬렉션에 나타나는 순서대로 멤버를 생성할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to generate the members in the order in which they occur in the member collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value of this property is &lt;see langword=&quot;false&quot; /&gt;.">멤버 컬렉션에 나타나는 순서대로 멤버를 생성하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 속성의 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary vsli:raw="Provides an empty implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeParser&quot; /&gt; interface.">
        <see cref="T:System.CodeDom.Compiler.ICodeParser" /> 인터페이스의 빈 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeParser&quot; /&gt; class.">
        <see cref="T:System.CodeDom.Compiler.CodeParser" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary vsli:raw="Compiles the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">지정된 텍스트 스트림을 <see cref="T:System.CodeDom.CodeCompileUnit" />으로 컴파일합니다.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; that is used to read the code to be parsed.">구문 분석될 코드를 읽는 데 사용되는 <see cref="T:System.IO.TextReader" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; containing the code model produced from parsing the code.">코드를 구문 분석해서 생성된 코드 모델이 포함된 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary vsli:raw="Represents a compiler error or warning.">컴파일러 오류 또는 경고를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; class.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; class using the specified file name, line, column, error number, and error text.">지정된 파일 이름, 줄, 열, 오류 번호 및 오류 텍스트를 사용하여 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName" vsli:raw="The file name of the file that the compiler was compiling when it encountered the error.">오류가 발생될 때 컴파일 중이었던 파일의 파일 이름입니다.</param>
      <param name="line" vsli:raw="The line of the source of the error.">오류가 발생한 소스 줄입니다.</param>
      <param name="column" vsli:raw="The column of the source of the error.">오류가 발생한 소스 열입니다.</param>
      <param name="errorNumber" vsli:raw="The error number of the error.">오류의 오류 번호입니다.</param>
      <param name="errorText" vsli:raw="The error message text.">오류 메시지 텍스트입니다.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary vsli:raw="Gets or sets the column number where the source of the error occurs.">오류가 발생된 소스의 열 번호를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The column number of the source file where the compiler encountered the error.">컴파일러에서 오류가 발생한 소스 파일의 열 번호입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary vsli:raw="Gets or sets the error number.">오류 번호를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The error number as a string.">문자열 형식의 오류 번호입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary vsli:raw="Gets or sets the text of the error message.">오류 메시지의 텍스트를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The text of the error message.">오류 메시지 텍스트입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary vsli:raw="Gets or sets the file name of the source file that contains the code which caused the error.">오류가 발생한 코드가 들어 있는 소스 파일의 파일 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The file name of the source file that contains the code which caused the error.">오류가 발생한 코드가 들어 있는 소스 파일의 파일 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary vsli:raw="Gets or sets a value that indicates whether the error is a warning.">오류가 경고인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the error is a warning; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">오류가 경고이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary vsli:raw="Gets or sets the line number where the source of the error occurs.">오류가 발생한 소스의 줄 번호를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The line number of the source file where the compiler encountered the error.">컴파일러에서 오류가 발생한 소스 파일의 줄 번호입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary vsli:raw="Provides an implementation of Object's &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt; method.">개체의 <see cref="M:System.Object.ToString" /> 메서드 구현을 제공합니다.</summary>
      <returns vsli:raw="A string representation of the compiler error.">컴파일 오류에 대한 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.Compiler.CompilerError" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects to initialize the collection with.">컬렉션을 초기화할 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; class that contains the contents of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">지정된 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />의 내용이 들어 있는 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; object with which to initialize the collection.">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object to the error collection.">지정된 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 개체를 오류 컬렉션에 추가합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object to add.">추가할 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 개체입니다.</param>
      <returns vsli:raw="The index at which the new element was inserted.">새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary vsli:raw="Copies the elements of an array to the end of the error collection.">오류 컬렉션의 끝에 배열의 요소를 복사합니다.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary vsli:raw="Adds the contents of the specified compiler error collection to the end of the error collection.">지정한 컴파일러 오류 컬렉션의 내용을 오류 컬렉션의 끝에 추가합니다.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; object that contains the objects to add to the collection.">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object.">컬렉션에 지정된 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 개체가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to locate.">찾을 <see cref="T:System.CodeDom.Compiler.CompilerError" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" />이 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary vsli:raw="Copies the collection values to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance at the specified index.">지정한 인덱스에서 컬렉션 값을 일차원 <see cref="T:System.Array" /> 인스턴스에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">
        <see cref="T:System.Array" />에서 복사한 값의 대상인 일차원 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />입니다.</param>
      <param name="index" vsli:raw="The index in the array at which to start copying.">배열에서 복사를 시작할 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; is greater than the available space between the index value of the &lt;paramref name=&quot;arrayIndex&quot; /&gt; parameter in the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter and the end of the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter.">
        <paramref name="array" /> 매개 변수가 나타내는 배열이 다차원 배열인 경우  
또는 
<see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />의 요소 수가 <paramref name="arrayIndex" /> 매개 변수가 나타내는 배열의 <paramref name="array" /> 매개 변수에 대한 인덱스 값과 <paramref name="array" /> 매개 변수가 나타내는 배열의 끝 사이에서 사용할 수 있는 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the lowbound of the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter.">
        <paramref name="index" /> 매개 변수가 <paramref name="array" /> 매개 변수가 나타내는 배열의 하한값보다 작은 경우</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary vsli:raw="Gets a value that indicates whether the collection contains errors.">컬렉션에 오류가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 오류가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary vsli:raw="Gets a value that indicates whether the collection contains warnings.">컬렉션에 경고가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains warnings; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컬렉션에 경고가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object in the collection, if it exists in the collection.">컬렉션에 지정된 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to locate.">찾을 <see cref="T:System.CodeDom.Compiler.CompilerError" />입니다.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;, if found; otherwise, -1.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" />에 지정된 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />의 인덱스가 있으면 반환 값은 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; into the collection at the specified index.">지정된 <see cref="T:System.CodeDom.Compiler.CompilerError" />를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index" vsli:raw="The zero-based index where the compiler error should be inserted.">컴파일러 오류를 삽입해야 하는 인덱스이며 0부터 시작합니다.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to insert.">삽입할 <see cref="T:System.CodeDom.Compiler.CompilerError" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; at the specified index.">지정된 인덱스에 있는 <see cref="T:System.CodeDom.Compiler.CompilerError" />를 가져오거나 설정합니다.</summary>
      <param name="index" vsli:raw="The zero-based index of the entry to locate in the collection.">컬렉션에 있는 엔트리의 인덱스(0부터 시작)입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; at each valid index.">유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.Compiler.CompilerError" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index value indicated by the &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> 매개 변수가 나타내는 인덱스 값이 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Removes a specific &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; from the collection.">컬렉션에서 특정 <see cref="T:System.CodeDom.Compiler.CompilerError" />를 제거합니다.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" />에서 제거할 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary vsli:raw="Represents the configuration settings of a language provider. This class cannot be inherited.">언어 공급자의 구성 설정을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary vsli:raw="Gets the type of the configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation.">구성된 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 구현의 형식을 가져옵니다.</summary>
      <returns vsli:raw="A read-only &lt;see cref=&quot;T:System.Type&quot; /&gt; instance that represents the configured language provider type.">구성된 언어 공급자 형식을 나타내는 읽기 전용 <see cref="T:System.Type" /> 인스턴스입니다.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The language provider is not configured on this computer.">언어 공급자가 이 컴퓨터에 구성되어 있지 않은 경우</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="Cannot locate the type because it is a &lt;see langword=&quot;null&quot; /&gt; or empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; Cannot locate the type because the name for the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; cannot be found in the configuration file.">
        <see langword="null" />이거나 빈 문자열이기 때문에 형식을 찾을 수 있습니다.  
또는 
구성 파일에서 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />의 이름을 찾을 수 없기 때문에 형식을 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary vsli:raw="Gets the configured compiler settings for the language provider implementation.">언어 공급자 구현에 대해 구성된 컴파일러 설정을 가져옵니다.</summary>
      <returns vsli:raw="A read-only &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; instance that contains the compiler options and settings configured for the language provider.">언어 공급자에 대해 구성된 컴파일러 옵션 및 설정을 포함하는 읽기 전용 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the current language provider settings.">현재 언어 공급자 설정에 대한 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 인스턴스를 반환합니다.</summary>
      <returns vsli:raw="A CodeDOM provider associated with the language provider configuration.">언어 공급자 구성과 연결된 CodeDOM 공급자입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the current language provider settings and specified options.">현재 언어 공급자 설정과 지정된 옵션에 대한 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 인스턴스를 반환합니다.</summary>
      <param name="providerOptions" vsli:raw="A collection of provider options from the configuration file.">구성 파일의 공급자 옵션 컬렉션입니다.</param>
      <returns vsli:raw="A CodeDOM provider associated with the language provider configuration and specified options.">언어 공급자 구성과 지정된 옵션에 연결된 CodeDOM 공급자입니다.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The provider does not support options.">공급자가 ISourcesRowset 옵션을 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified object represents the same language provider and compiler settings as the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt;.">지정된 개체가 현재 <see cref="T:System.CodeDom.Compiler.CompilerInfo" />와 같은 언어 공급자 및 컴파일러 설정을 나타내는지 여부를 확인합니다.</summary>
      <param name="o" vsli:raw="The object to compare with the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt;.">현재 <see cref="T:System.CodeDom.Compiler.CompilerInfo" />와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is a &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; object and its value is the same as this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="o" />가 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 개체이고 값이 이 인스턴스의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary vsli:raw="Returns the file name extensions supported by the language provider.">언어 공급자에서 지원하는 파일 이름 확장명을 반환합니다.</summary>
      <returns vsli:raw="An array of file name extensions supported by the language provider.">언어 공급자에서 지원하는 파일 이름 확장명의 배열입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary vsli:raw="Returns the hash code for the current instance.">현재 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code for the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; instance, suitable for use in hashing algorithms and data structures such as a hash table.">현재 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 인스턴스에 대한 부호 있는 32비트 정수 해시 코드입니다. 이 값은 해시 알고리즘 및 해시 테이블과 같은 데이터 구조에 사용하는 것이 좋습니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary vsli:raw="Gets the language names supported by the language provider.">언어 공급자에서 지원하는 언어 이름을 가져옵니다.</summary>
      <returns vsli:raw="An array of language names supported by the language provider.">언어 공급자에서 지원하는 언어 이름의 배열입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary vsli:raw="Returns a value indicating whether the language provider implementation is configured on the computer.">언어 공급자 구현이 컴퓨터에 구성되어 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the language provider implementation type is configured on the computer; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">언어 공급자 구현 형식이 컴퓨터에 구성되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary vsli:raw="Represents the parameters used to invoke a compiler.">컴파일러를 호출하는 데 사용되는 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class.">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names.">지정된 어셈블리 이름을 사용하여 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">참조할 어셈블리의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names and output file name.">지정된 어셈블리 이름 및 출력 파일 이름을 사용하여 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">참조할 어셈블리의 이름입니다.</param>
      <param name="outputName" vsli:raw="The output file name.">출력 파일 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names, output name, and a value indicating whether to include debug information.">지정된 어셈블리 이름, 출력 이름 및 디버그 정보 포함 여부를 나타내는 값을 사용하여 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">참조할 어셈블리의 이름입니다.</param>
      <param name="outputName" vsli:raw="The output file name.">출력 파일 이름입니다.</param>
      <param name="includeDebugInformation" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include debug information; &lt;see langword=&quot;false&quot; /&gt; to exclude debug information.">디버그 정보를 포함하려면 <see langword="true" />이고 디버그 정보를 제외하려면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary vsli:raw="Gets or sets optional command-line arguments to use when invoking the compiler.">컴파일러를 호출할 때 사용할 선택적인 명령줄 인수를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="Any additional command-line arguments for the compiler.">컴파일러에 대한 추가적인 명령줄 인수입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary vsli:raw="Gets or sets the name of the core or standard assembly that contains basic types such as &lt;see cref=&quot;T:System.Object&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Object" />, <see cref="T:System.String" /> 또는 <see cref="T:System.Int32" />와 같은 기본 형식을 포함하는 핵심 또는 표준 어셈블리의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the core assembly that contains basic types.">기본 형식이 포함된 핵심 어셈블리의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary vsli:raw="Gets the .NET resource files to include when compiling the assembly output.">어셈블리 출력을 컴파일할 때 포함할 .NET Framework 리소스 파일을 가져옵니다.</summary>
      <returns vsli:raw="A collection that contains the file paths of .NET resources to include in the generated assembly.">생성된 어셈블리에 포함할 .NET Framework 리소스의 파일 경로가 포함된 컬렉션입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary vsli:raw="Gets or sets a value indicating whether to generate an executable.">실행 파일의 생성 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an executable should be generated; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">실행 파일을 생성해야 한다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary vsli:raw="Gets or sets a value indicating whether to generate the output in memory.">출력을 메모리에 생성할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the compiler should generate the output in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">컴파일러에서 출력을 메모리에 생성해야 한다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary vsli:raw="Gets or sets a value indicating whether to include debug information in the compiled executable.">컴파일된 실행 파일에 디버그 정보가 포함될지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if debug information should be generated; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">디버그 정보를 생성해야 한다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary vsli:raw="Gets the .NET resource files that are referenced in the current source.">현재 소스에서 참조되는 .NET Framework 리소스 파일을 가져옵니다.</summary>
      <returns vsli:raw="A collection that contains the file paths of .NET resources that are referenced by the source.">소스에서 참조되는 .NET Framework 리소스의 파일 경로가 포함된 컬렉션입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary vsli:raw="Gets or sets the name of the main class.">기본 클래스의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the main class.">기본 클래스의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary vsli:raw="Gets or sets the name of the output assembly.">출력 어셈블리의 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The name of the output assembly.">출력 어셈블리의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary vsli:raw="Gets the assemblies referenced by the current project.">현재 프로젝트에서 참조하는 어셈블리를 가져옵니다.</summary>
      <returns vsli:raw="A collection that contains the assembly names that are referenced by the source to compile.">컴파일할 소스에서 참조되는 어셈블리 이름을 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary vsli:raw="Gets or sets the collection that contains the temporary files.">임시 파일이 포함된 컬렉션을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A collection that contains the temporary files.">임시 파일을 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary vsli:raw="Gets or sets a value indicating whether to treat warnings as errors.">경고를 오류로 간주해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if warnings should be treated as errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">경고를 오류로 간주해야 한다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary vsli:raw="Gets or sets the user token to use when creating the compiler process.">컴파일러 프로세스를 만들 때 사용할 사용자 토큰을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The user token to use.">사용할 사용자 토큰입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary vsli:raw="Gets or sets the warning level at which the compiler aborts compilation.">컴파일러에서 컴파일이 중단되는 경고 수준을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The warning level at which the compiler aborts compilation.">컴파일러에서 컴파일이 중단되는 경고 수준입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary vsli:raw="Gets or sets the file name of a Win32 resource file to link into the compiled assembly.">컴파일된 어셈블리에 연결할 Win32 리소스 파일의 파일 이름을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A Win32 resource file that will be linked into the compiled assembly.">컴파일된 어셈블리에 연결할 Win32 리소스 파일입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary vsli:raw="Represents the results of compilation that are returned from a compiler.">컴파일러에서 반환된 컴파일 결과를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; class that uses the specified temporary files.">지정된 임시 파일을 사용하는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">컴파일하는 동안 생성된 중간 파일에 대한 참조를 관리 및 저장할 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary vsli:raw="Gets or sets the compiled assembly.">컴파일된 어셈블리를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that indicates the compiled assembly.">컴파일된 어셈블리를 나타내는 <see cref="T:System.Reflection.Assembly" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary vsli:raw="Gets the collection of compiler errors and warnings.">컴파일러 오류 및 경고의 컬렉션을 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; that indicates the errors and warnings resulting from compilation, if any.">컴파일에서 오류 및 경고가 발생하는 경우 해당 오류를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary vsli:raw="Gets or sets the compiler's return value.">컴파일러의 반환 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The compiler's return value.">컴파일러의 반환 값입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary vsli:raw="Gets the compiler output messages.">컴파일러 출력 메시지를 가져옵니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.StringCollection&quot; /&gt; that contains the output messages.">출력 메시지를 포함하는 <see cref="T:System.Collections.Specialized.StringCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary vsli:raw="Gets or sets the path of the compiled assembly.">컴파일된 어셈블리의 경로를 가져오거나 설정합니다.</summary>
      <returns vsli:raw="The path of the assembly, or &lt;see langword=&quot;null&quot; /&gt; if the assembly was generated in memory.">어셈블리의 경로이거나 어셈블리가 메모리에서 생성되면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary vsli:raw="Gets or sets the temporary file collection to use.">사용할 임시 파일 컬렉션을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">컴파일하는 동안 생성된 중간 파일에 대한 참조를 관리 및 저장할 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary vsli:raw="Provides command execution functions for invoking compilers. This class cannot be inherited.">컴파일러를 호출하는 명령 실행 함수를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary vsli:raw="Executes the command using the specified temporary files and waits for the call to return.">지정된 임시 파일을 사용하여 명령을 실행하고 호출이 반환될 때까지 대기합니다.</summary>
      <param name="cmd" vsli:raw="The command to execute.">실행할 명령입니다.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">컴파일하는 동안 생성된 중간 파일에 대한 참조를 관리 및 저장할 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified user token and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.">지정된 사용자 토큰 및 임시 파일을 사용하여 지정된 명령을 실행하고 호출이 반환되기를 기다린 다음 지정된 문자열에 컴파일러의 출력 및 오류 정보를 저장합니다.</summary>
      <param name="userToken" vsli:raw="The token to start the compiler process with.">컴파일러 프로세스를 시작할 토큰입니다.</param>
      <param name="cmd" vsli:raw="The command to execute.">실행할 명령입니다.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">컴파일하는 동안 생성된 중간 파일에 대한 참조를 관리 및 저장할 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />입니다.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">컴파일러의 메시지 출력을 저장할 문자열에 대한 참조입니다.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">발생한 오류의 이름을 저장할 문자열에 대한 참조입니다.</param>
      <returns vsli:raw="The return value from the compiler.">컴파일러의 반환 값입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified user token, current directory, and temporary files; then waits for the call to return, storing output and error information from the compiler in the specified strings.">지정된 사용자 토큰, 현재 디렉터리 및 임시 파일을 사용하여 지정된 명령을 실행하고 호출이 반환되기를 기다린 다음 지정된 문자열에 컴파일러의 출력 및 오류 정보를 저장합니다.</summary>
      <param name="userToken" vsli:raw="The token to start the compiler process with.">컴파일러 프로세스를 시작할 토큰입니다.</param>
      <param name="cmd" vsli:raw="The command to execute.">실행할 명령입니다.</param>
      <param name="currentDir" vsli:raw="The directory to start the process in.">프로세스가 시작될 디렉터리입니다.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">컴파일하는 동안 생성된 중간 파일에 대한 참조를 관리 및 저장할 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />입니다.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">컴파일러의 메시지 출력을 저장할 문자열에 대한 참조입니다.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">발생한 오류의 이름을 저장할 문자열에 대한 참조입니다.</param>
      <returns vsli:raw="The return value from the compiler.">컴파일러의 반환 값입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified temporary files and waits for the call to return, storing output and error information from the compiler in the specified strings.">지정된 임시 파일을 사용하여 지정된 명령을 실행하고 호출이 반환되기를 기다린 다음 지정된 문자열에 컴파일러의 출력 및 오류 정보를 저장합니다.</summary>
      <param name="cmd" vsli:raw="The command to execute.">실행할 명령입니다.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">컴파일하는 동안 생성된 중간 파일에 대한 참조를 관리 및 저장할 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />입니다.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">컴파일러의 메시지 출력을 저장할 문자열에 대한 참조입니다.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">발생한 오류의 이름을 저장할 문자열에 대한 참조입니다.</param>
      <returns vsli:raw="The return value from the compiler.">컴파일러의 반환 값입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified current directory and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.">지정된 현재 디렉터리 및 임시 파일을 사용하여 지정된 명령을 실행하고 호출이 반환되기를 기다린 다음 지정된 문자열에 컴파일러의 출력 및 오류 정보를 저장합니다.</summary>
      <param name="cmd" vsli:raw="The command to execute.">실행할 명령입니다.</param>
      <param name="currentDir" vsli:raw="The current directory.">현재 디렉터리</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">컴파일하는 동안 생성된 중간 파일에 대한 참조를 관리 및 저장할 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />입니다.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">컴파일러의 메시지 출력을 저장할 문자열에 대한 참조입니다.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">발생한 오류의 이름을 저장할 문자열에 대한 참조입니다.</param>
      <returns vsli:raw="The return value from the compiler.">컴파일러의 반환 값입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary vsli:raw="Defines identifiers used to determine whether a code generator supports certain types of code elements.">코드 생성기에서 코드 요소의 특정한 형식을 지원하는지 여부를 확인하는 데 사용할 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary vsli:raw="Indicates the generator supports arrays of arrays.">생성기에서 배열의 배열을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary vsli:raw="Indicates the generator supports assembly attributes.">생성기에서 어셈블리 특성을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary vsli:raw="Indicates the generator supports chained constructor arguments.">생성기에서 연결된 생성자 인수를 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary vsli:raw="Indicates the generator supports complex expressions.">생성기에서 복합 식을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary vsli:raw="Indicates the generator supports delegate declarations.">생성기에서 대리자 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary vsli:raw="Indicates the generator supports enumeration declarations.">생성기에서 열거형 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary vsli:raw="Indicates the generator supports event declarations.">생성기에서 이벤트 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary vsli:raw="Indicates the generator supports the declaration of indexer properties.">생성기에서 인덱서 속성의 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary vsli:raw="Indicates the generator supports interface declarations.">생성기에서 인터페이스 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary vsli:raw="Indicates the generator supports value type declarations.">생성기에서 값 형식 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary vsli:raw="Indicates the generator supports a program entry point method designation. This is used when building executables.">생성기에서 프로그램 진입점 메서드 지정을 지원함을 나타냅니다. 실행 파일을 빌드할 때 사용됩니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary vsli:raw="Indicates the generator supports generic type declarations.">생성기에서 제네릭 형식 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary vsli:raw="Indicates the generator supports generic type references.">생성기에서 제네릭 형식 참조를 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary vsli:raw="Indicates the generator supports goto statements.">생성기에서 goto 문을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary vsli:raw="Indicates the generator supports referencing multidimensional arrays. Currently, the CodeDom cannot be used to instantiate multidimensional arrays.">생성기에서 다차원 배열 참조를 지원함을 나타냅니다. 현재는 CodeDom을 사용하여 다차원 배열을 인스턴스화할 수 없습니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary vsli:raw="Indicates the generator supports the declaration of members that implement multiple interfaces.">생성기에서 여러 인터페이스를 구현하는 멤버의 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary vsli:raw="Indicates the generator supports the declaration of nested types.">생성자가 중첩 형식의 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary vsli:raw="Indicates the generator supports parameter attributes.">생성기에서 매개 변수 특성을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary vsli:raw="Indicates the generator supports partial type declarations.">생성기에서 부분 형식 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary vsli:raw="Indicates the generator supports public static members.">생성기에서 공용 정적 멤버를 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary vsli:raw="Indicates the generator supports reference and out parameters.">생성기에서 참조 및 출력 매개 변수를 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary vsli:raw="Indicates the generator supports compilation with .NET resources. These can be default resources compiled directly into an assembly, or resources referenced in a satellite assembly.">생성기에서 .NET Framework 리소스와의 컴파일을 지원함을 나타냅니다. 이러한 리소스는 어셈블리로 직접 컴파일되는 기본 리소스나 위성 어셈블리에서 참조되는 리소스일 수 있습니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary vsli:raw="Indicates the generator supports return type attribute declarations.">생성기에서 반환 형식 특성 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary vsli:raw="Indicates the generator supports static constructors.">생성기에서 정적 생성자를 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary vsli:raw="Indicates the generator supports &lt;c&gt;try-catch&lt;/c&gt; statements.">생성기에서 <see langword="try...catch" /> 문을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary vsli:raw="Indicates the generator supports compilation with Win32 resources.">생성기에서 Win32 리소스와의 컴파일을 지원함을 나타냅니다.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary vsli:raw="Defines an interface for invoking compilation of source code or a CodeDOM tree using a specific compiler.">특정한 컴파일러를 사용하여 CodeDOM 트리나 소스 코드의 컴파일을 호출하는 데 사용되는 인터페이스를 정의합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Compiles an assembly from the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; tree contained in the specified &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;, using the specified compiler settings.">지정된 컴파일러 설정을 사용하여 지정된 <see cref="N:System.CodeDom" />에 포함된 <see cref="T:System.CodeDom.CodeCompileUnit" /> 트리에서 어셈블리를 컴파일합니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">컴파일 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="compilationUnit" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">컴파일할 코드를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles an assembly based on the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; trees contained in the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects, using the specified compiler settings.">지정된 컴파일러 설정을 사용하여 <see cref="N:System.CodeDom" /> 개체의 지정된 배열에 포함된 <see cref="T:System.CodeDom.CodeCompileUnit" /> 트리에 따라 어셈블리를 컴파일합니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">컴파일 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="compilationUnits" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">컴파일할 코드를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" /> 형식의 배열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles an assembly from the source code contained within the specified file, using the specified compiler settings.">지정된 컴파일러 설정을 사용하여 지정된 파일에 포함된 소스 코드에서 어셈블리를 컴파일합니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">컴파일 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="fileName" vsli:raw="The file name of the file that contains the source code to compile.">컴파일할 소스 코드가 포함된 파일의 파일 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the source code contained within the specified files, using the specified compiler settings.">지정된 컴파일러 설정을 사용하여 지정된 파일에 포함된 소스 코드에서 어셈블리를 컴파일합니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">컴파일 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="fileNames" vsli:raw="The file names of the files to compile.">컴파일할 파일의 파일 이름입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles an assembly from the specified string containing source code, using the specified compiler settings.">지정된 컴파일러 설정을 사용하여 소스 코드가 포함된 지정된 문자열에서 어셈블리를 컴파일합니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">컴파일 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="source" vsli:raw="The source code to compile.">컴파일할 소스 코드입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.">지정된 컴파일러 설정을 사용하여 소스 코드가 포함된 지정된 문자열 배열에서 어셈블리를 컴파일합니다.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">컴파일 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="sources" vsli:raw="The source code strings to compile.">컴파일할 소스 코드 문자열입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary vsli:raw="Defines an interface for generating code.">코드를 생성하는 인터페이스를 정의합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">지정된 값의 이스케이프된 식별자를 만듭니다.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">이스케이프된 식별자를 만들 문자열입니다.</param>
      <returns vsli:raw="The escaped identifier for the value.">해당 값의 이스케이프된 식별자입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">지정된 값의 유효한 식별자를 만듭니다.</summary>
      <param name="value" vsli:raw="The string to generate a valid identifier for.">유효한 식별자를 생성할 문자열입니다.</param>
      <returns vsli:raw="A valid identifier for the specified value.">지정된 값의 유효한 식별자입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.">지정된 CodeDOM(코드 문서 개체 모델) 컴파일 단위에 대한 코드를 생성하고 지정된 옵션을 사용하여 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; to generate code for.">코드를 생성할 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">코드를 출력할 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.">지정된 CodeDOM(코드 문서 개체 모델) 식에 대한 코드를 생성하고 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to generate code for.">코드를 생성할 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">코드를 출력할 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.">지정된 CodeDOM(코드 문서 개체 모델) 네임스페이스에 대한 코드를 생성하고 지정된 옵션을 사용하여 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; that indicates the namespace to generate code for.">코드를 생성할 네임스페이스를 나타내는 <see cref="T:System.CodeDom.CodeNamespace" />입니다.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">코드를 출력할 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.">지정된 CodeDOM(코드 문서 개체 모델) 문에 대한 코드를 생성하고 지정된 옵션을 사용하여 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the CodeDOM elements to translate.">변환할 CodeDOM 요소를 포함하는 <see cref="T:System.CodeDom.CodeStatement" />입니다.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">코드를 출력할 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.">지정된 CodeDOM(코드 문서 개체 모델) 형식 선언에 대한 코드를 생성하고 지정된 옵션을 사용하여 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; that indicates the type to generate code for.">코드를 생성할 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeDeclaration" />입니다.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">코드를 출력할 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">지정된 <see cref="T:System.CodeDom.CodeTypeReference" />에서 나타내는 형식을 가져옵니다.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type to return.">반환할 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <returns vsli:raw="A text representation of the specified type for the language this code generator is designed to generate code in. For example, in Visual Basic, passing in type System.Int32 will return &quot;Integer&quot;.">이 코드 생성기가 코드를 디자인할 때 사용할 언어에 대해 지정된 형식의 텍스트 표현입니다. 예를 들어 Visual Basic에서는 System.Int32 형식을 전달하면 "Integer"가 반환됩니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value that indicates whether the specified value is a valid identifier for the current language.">지정된 값이 현재 언어에 유효한 식별자인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value" vsli:raw="The value to test for being a valid identifier.">유효한 식별자인지 여부를 테스트할 값입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> 매개 변수가 유효한 식별자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the generator provides support for the language features represented by the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object.">지정된 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 개체에서 나타내는 언어 기능에 대한 지원을 생성기에서 제공하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="supports" vsli:raw="The capabilities to test the generator for.">테스트할 생성자의 기능입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified capabilities are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정된 기능을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified value is not a valid identifier.">지정된 값이 유효한 식별자가 아니면 예외를 throw합니다.</summary>
      <param name="value" vsli:raw="The identifier to validate.">유효성을 확인할 식별자입니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The identifier is not valid.">식별자가 유효하지 않은 경우</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary vsli:raw="Defines an interface for parsing code into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeCompileUnit" />에 코드 구문 분석을 위한 인터페이스를 정의합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary vsli:raw="When implemented in a derived class, compiles the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">파생된 클래스에서 구현할 때 지정된 텍스트 스트림을 <see cref="T:System.CodeDom.CodeCompileUnit" />으로 컴파일합니다.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; that can be used to read the code to be compiled.">컴파일될 코드를 읽는 데 사용할 수 있는 <see cref="T:System.IO.TextReader" />입니다.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that contains a representation of the parsed code.">구문 분석된 코드를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary vsli:raw="Defines identifiers that indicate special features of a language.">언어의 특정 기능을 나타내는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary vsli:raw="The language is case-insensitive.">해당 언어는 대/소문자가 구분되지 않습니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary vsli:raw="The language has default characteristics.">해당 언어에 기본 특징이 있습니다.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary vsli:raw="Represents a collection of temporary files.">임시 파일의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class with default values.">기본값을 사용하여 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class using the specified temporary directory that is set to delete the temporary files after their generation and use, by default.">기본적으로, 임시 파일을 생성하고 사용한 후에 해당 임시 파일을 삭제하도록 설정한 지정된 임시 디렉터리를 사용하여 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tempDir" vsli:raw="A path to the temporary directory to use for storing the temporary files.">임시 파일을 저장하는 데 사용할 임시 디렉터리에 대한 경로입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class using the specified temporary directory and specified value indicating whether to keep or delete the temporary files after their generation and use, by default.">기본적으로, 임시 파일을 생성하고사용한 후에 해당 임시 파일을 유지할 것인지 또는 삭제할 것인지 여부를 나타내는 지정된 값과 지정된 임시 디렉터리를 사용하여 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tempDir" vsli:raw="A path to the temporary directory to use for storing the temporary files.">임시 파일을 저장하는 데 사용할 임시 디렉터리에 대한 경로입니다.</param>
      <param name="keepFiles" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the temporary files should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the temporary files should be deleted.">임시 파일을 사용한 후에 유지해야 한다면 <see langword="true" />이고 삭제해야 한다면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary vsli:raw="Adds a file name with the specified file name extension to the collection.">지정된 파일 확장명의 파일 이름을 컬렉션에 추가합니다.</summary>
      <param name="fileExtension" vsli:raw="The file name extension for the auto-generated temporary file name to add to the collection.">컬렉션에 추가할 자동으로 생성된 임시 파일 이름의 파일 확장명입니다.</param>
      <returns vsli:raw="A file name with the specified extension that was just added to the collection.">방금 컬렉션에 추가된 지정된 확장명의 파일 이름입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary vsli:raw="Adds a file name with the specified file name extension to the collection, using the specified value indicating whether the file should be deleted or retained.">파일을 삭제해야 하는지 유지해야 하는지를 나타내는 지정된 값을 사용하여 지정된 파일 확장명의 파일 이름을 컬렉션에 추가합니다.</summary>
      <param name="fileExtension" vsli:raw="The file name extension for the auto-generated temporary file name to add to the collection.">컬렉션에 추가할 자동으로 생성된 임시 파일 이름의 파일 확장명입니다.</param>
      <param name="keepFile" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the file should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the file should be deleted.">파일을 사용한 후에 유지하려면 <see langword="true" />로 설정하고, 삭제하려면 <see langword="false" />로 설정합니다.</param>
      <returns vsli:raw="A file name with the specified extension that was just added to the collection.">방금 컬렉션에 추가된 지정된 확장명의 파일 이름입니다.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileExtension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.">
        <paramref name="fileExtension" />이 <see langword="null" /> 또는 빈 문자열인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary vsli:raw="Adds the specified file to the collection, using the specified value indicating whether to keep the file after the collection is disposed or when the &lt;see cref=&quot;M:System.CodeDom.Compiler.TempFileCollection.Delete&quot; /&gt; method is called.">컬렉션이 삭제되거나  <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> 메서드가 호출될 때 파일을 보관할 것인지 여부를 나타내는 특정 값을 사용하여 지정된 파일을 컬렉션에 추가합니다.</summary>
      <param name="fileName" vsli:raw="The name of the file to add to the collection.">컬렉션에 추가할 파일 이름입니다.</param>
      <param name="keepFile" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the file should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the file should be deleted.">파일을 사용한 후에 유지하려면 <see langword="true" />로 설정하고, 삭제하려면 <see langword="false" />로 설정합니다.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileName&quot; /&gt; is a duplicate.">
        <paramref name="fileName" />이 <see langword="null" /> 또는 빈 문자열인 경우  
또는 
 <paramref name="fileName" />은(는) 중복됩니다.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary vsli:raw="Gets the full path to the base file name, without a file name extension, on the temporary directory path, that is used to generate temporary file names for the collection.">컬렉션의 임시 파일 이름을 생성하는 데 사용되는 임시 디렉터리 경로의 기본 파일 이름(파일 확장명 제외)에 대한 전체 경로를 가져옵니다.</summary>
      <returns vsli:raw="The full path to the base file name, without a file name extension, on the temporary directory path, that is used to generate temporary file names for the collection.">컬렉션의 임시 파일 이름을 생성하는 데 사용되는 임시 디렉터리 경로의 기본 파일 이름(파일 확장명 제외)에 대한 전체 경로입니다.</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="If the &lt;see cref=&quot;P:System.CodeDom.Compiler.TempFileCollection.BasePath&quot; /&gt; property has not been set or is set to &lt;see langword=&quot;null&quot; /&gt;, and &lt;see cref=&quot;F:System.Security.Permissions.FileIOPermissionAccess.AllAccess&quot; /&gt; is not granted for the temporary directory indicated by the &lt;see cref=&quot;P:System.CodeDom.Compiler.TempFileCollection.TempDir&quot; /&gt; property.">
        <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" /> 속성이 <see langword="null" />로 설정된 적이 없거나 설정되어 있지 않고 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" />가 <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" /> 속성에서 나타내는 임시 디렉터리에 부여되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary vsli:raw="Copies the members of the collection to the specified string, beginning at the specified index.">지정된 인덱스에서 시작하여 지정된 문자열에 컬렉션의 멤버를 복사합니다.</summary>
      <param name="fileNames" vsli:raw="The array of strings to copy to.">복사할 대상 문자열의 배열입니다.</param>
      <param name="start" vsli:raw="The index of the array to begin copying to.">복사를 시작할 대상 배열의 인덱스입니다.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary vsli:raw="Gets the number of files in the collection.">컬렉션에 있는 파일의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of files in the collection.">컬렉션의 파일 수입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary vsli:raw="Deletes the temporary files within this collection that were not marked to be kept.">이 컬렉션 내에서 보관하도록 표시되지 않은 임시 파일을 삭제합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary vsli:raw="Attempts to delete the temporary files before this object is reclaimed by garbage collection.">가비지 수집에서 이 개체를 회수하기 전에 임시 파일을 삭제하려고 합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that can enumerate the members of the collection.">컬렉션의 멤버를 열거할 수 있는 열거자를 가져옵니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that contains the collection's members.">컬렉션의 멤버를 포함하는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary vsli:raw="Gets or sets a value indicating whether to keep the files, by default, when the &lt;see cref=&quot;M:System.CodeDom.Compiler.TempFileCollection.Delete&quot; /&gt; method is called or the collection is disposed.">
        <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> 메서드가 호출되거나 컬렉션이 삭제될 때 기본적으로 파일을 유지하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the files should be kept; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">파일을 유지해야 한다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at the specified index of the target array.">컬렉션의 요소를 대상 배열의 지정한 인덱스에서 시작하는 배열에 복사합니다.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="start" vsli:raw="The zero-based index in array at which copying begins.">배열에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">컬렉션에 포함된 요소 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread safe).">해당 컬렉션에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary vsli:raw="Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.">관리되지 않는 리소스의 확보, 해제 또는 다시 설정과 관련된 애플리케이션 정의 작업을 수행합니다.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary vsli:raw="Gets the temporary directory to store the temporary files in.">임시 파일을 저장할 임시 디렉터리를 가져옵니다.</summary>
      <returns vsli:raw="The temporary directory to store the temporary files in.">임시 파일을 저장할 임시 디렉터리입니다.</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary vsli:raw="Defines identifiers used to indicate the direction of parameter and argument declarations.">매개 변수 방향 및 인수 선언을 나타내는 데 사용되는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary vsli:raw="An incoming field.">들어오는 필드입니다.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary vsli:raw="An outgoing field.">나가는 필드입니다.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary vsli:raw="A field by reference.">참조되는 필드입니다.</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary vsli:raw="Defines member attribute identifiers for class members.">클래스 멤버의 멤버 특성 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary vsli:raw="An abstract member.">추상 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary vsli:raw="An access mask.">액세스 마스크입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary vsli:raw="A member that is accessible to any class within the same assembly.">같은 어셈블리에 있는 모든 클래스에서 액세스할 수 있는 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary vsli:raw="A constant member.">상수 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary vsli:raw="A member that is accessible within the family of its class and derived classes.">해당 클래스와 파생 클래스의 패밀리에서 액세스할 수 있는 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary vsli:raw="A member that is accessible within its class, and derived classes in the same assembly.">같은 어셈블리에 있는 해당 클래스와 파생 클래스에서 액세스할 수 있는 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary vsli:raw="A member that is accessible within its class, its derived classes in any assembly, and any class in the same assembly.">해당 클래스, 모든 어셈블리의 파생 클래스 및 같은 어셈블리의 모든 클래스에서 액세스할 수 있는 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary vsli:raw="A member that cannot be overridden in a derived class.">파생 클래스에서 재정의할 수 없는 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary vsli:raw="A new member.">새 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary vsli:raw="An overloaded member. Some languages, such as Visual Basic, require overloaded members to be explicitly indicated.">오버로드된 멤버입니다. Visual Basic과 같은 일부 언어에서는 오버로드된 멤버를 명시적으로 나타내야 합니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary vsli:raw="A member that overrides a base class member.">기본 클래스 멤버를 재정의하는 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary vsli:raw="A private member.">프라이빗 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary vsli:raw="A public member.">공용 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary vsli:raw="A scope mask.">범위 마스크입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary vsli:raw="A static member. In Visual Basic, this is equivalent to the &lt;see langword=&quot;Shared&quot; /&gt; keyword.">정적 멤버입니다. Visual Basic에서는 <see langword="Shared" /> 키워드에 해당합니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary vsli:raw="A VTable mask.">VTable 마스크입니다.</summary>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.CodeDom</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary>Proporciona acceso a instancias del generador de código y del compilador de código de C#.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.CSharp.CSharpCodeProvider" />.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> usando las opciones del proveedor especificado.</summary>
      <param name="providerOptions">Objeto <see cref="T:System.Collections.Generic.IDictionary`2" /> que contiene las opciones de proveedor del archivo de configuración.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary>Obtiene una instancia del compilador de código de C#.</summary>
      <returns>Instancia de la implementación de <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> de C#.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary>Obtiene una instancia del generador de código de C#.</summary>
      <returns>Instancia de la implementación de <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> de C#.</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary>Obtiene la extensión de nombre de archivo que se usará al crear archivos de código fuente.</summary>
      <returns>Extensión de nombre de archivo que se usará en los archivos de código fuente generados.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para el miembro de clase especificado usando las opciones del generador de código y el programa de escritura de texto especificados.</summary>
      <param name="member">
        <see cref="T:System.CodeDom.CodeTypeMember" /> para el que se va a generar código.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> en el que se va a escribir.</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que se usarán para generar el código.</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary>Obtiene un <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo de objeto especificado.</summary>
      <param name="type">Tipo de objeto para el que se recupera un convertidor de tipo.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo especificado.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary>Proporciona acceso a instancias del generador de código y del compilador de código de Visual Basic.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.VisualBasic.VBCodeProvider" />.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> usando las opciones del proveedor especificado.</summary>
      <param name="providerOptions">Objeto <see cref="T:System.Collections.Generic.IDictionary`2" /> que contiene las opciones de proveedor del archivo de configuración.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary>Obtiene una instancia del compilador de código de Visual Basic.</summary>
      <returns>Instancia de la implementación de la interfaz <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> de Visual Basic</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary>Obtiene una instancia del generador de código de Visual Basic.</summary>
      <returns>Instancia de la implementación de la interfaz <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> de Visual Basic</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary>Obtiene la extensión de nombre de archivo que se utilizará al crear archivos de código fuente.</summary>
      <returns>Extensión de nombre de archivo que se usará en los archivos de código fuente generados.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para el miembro de clase especificado usando las opciones del generador de código y el programa de escritura de texto especificados.</summary>
      <param name="member">
        <see cref="T:System.CodeDom.CodeTypeMember" /> para el que se va a generar código.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> en el que se va a escribir.</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que se usarán para generar el código.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary>Obtiene un <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo de objeto especificado.</summary>
      <param name="type">Tipo de objeto para el que se recupera un convertidor de tipo.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo especificado.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary>Obtiene un identificador de características de lenguaje.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> que indica las características especiales del lenguaje.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary>Representa una referencia para el valor de un argumento que se ha pasado a un método.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> utilizando el nombre de parámetro especificado.</summary>
      <param name="parameterName">Nombre del parámetro al que se hace referencia.</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary>Obtiene o establece el nombre del parámetro al que hace referencia esta expresión.</summary>
      <returns>Nombre del parámetro al que se hace referencia.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary>Representa una expresión que crea una matriz.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el tipo de datos especificado de la matriz y la expresión de código que indica el número de índices de la matriz.</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos de la matriz que se va a crear.</param>
      <param name="size">Expresión que indica el número de índices de la matriz que se va a crear.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el tipo de datos especificados y la expresión de inicialización de la matriz.</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos de la matriz que se va a crear.</param>
      <param name="initializers">Matriz de expresiones que se van a usar para inicializar la matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el tipo de datos especificados de la matriz y el número de índices de la matriz.</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos de la matriz que se va a crear.</param>
      <param name="size">Número de índices de la matriz que se va a crear.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el nombre del tipo de datos especificado de la matriz y la expresión de código que indica el número de índices de la matriz.</summary>
      <param name="createType">Nombre del tipo de datos de la matriz que se va a crear.</param>
      <param name="size">Expresión que indica el número de índices de la matriz que se va a crear.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el tipo de datos y los inicializadores especificados de la matriz.</summary>
      <param name="createType">Nombre del tipo de datos de la matriz que se va a crear.</param>
      <param name="initializers">Matriz de expresiones que se van a usar para inicializar la matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el nombre del tipo de datos especificado y el número de índices de la matriz.</summary>
      <param name="createType">Nombre del tipo de datos de la matriz que se va a crear.</param>
      <param name="size">Número de índices de la matriz que se va a crear.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el tipo de datos especificado de la matriz y la expresión de código que indica el número de índices de la matriz.</summary>
      <param name="createType">Tipo de datos de la matriz que se va a crear.</param>
      <param name="size">Expresión que indica el número de índices de la matriz que se va a crear.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el tipo de datos y los inicializadores especificados para la matriz.</summary>
      <param name="createType">Tipo de datos de la matriz que se va a crear.</param>
      <param name="initializers">Matriz de expresiones que se van a usar para inicializar la matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con el tipo de datos especificados de la matriz y el número de índices de la matriz.</summary>
      <param name="createType">Tipo de datos de la matriz que se va a crear.</param>
      <param name="size">Número de índices de la matriz que se va a crear.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary>Obtiene o establece el tipo de matriz que se va a crear.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de la matriz.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary>Obtiene o establece el inicializador con el que se inicializa la matriz.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica los valores de inicialización.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary>Obtiene o establece el número de índices de la matriz.</summary>
      <returns>Número de índices de la matriz.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary>Obtiene o establece la expresión que indica el tamaño de la matriz.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el tamaño de la matriz.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary>Representa una referencia a un índice de una matriz.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> mediante el objeto de destino e índices especificados.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la matriz a la que se orienta el indizador.</param>
      <param name="indices">Índice o índices a los que se hace referencia.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary>Obtiene o establece el índice o índices de la expresión de indizador.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica los índices de la expresión de indizador.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary>Obtiene o establece el objeto de destino del indizador de matriz.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que representa la matriz que se indiza.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary>Representa una instrucción de asignación simple.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAssignStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAssignStatement" /> con las expresiones especificadas.</summary>
      <param name="left">Variable que se va a asignar.</param>
      <param name="right">Valor que se va a asignar.</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary>Obtiene o establece la expresión que representa el objeto o referencia al que se asigna.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto o referencia al que se va a asignar.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary>Obtiene o establece la expresión que representa el objeto o referencia que se asigna.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto o referencia que se va a asignar.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary>Representa una instrucción que adjunta un delegado controlador de eventos a un evento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttachEventStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttachEventStatement" /> con el evento y delegado especificado.</summary>
      <param name="eventRef">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> que indica el evento al que se va a asociar un controlador de eventos.</param>
      <param name="listener">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el nuevo controlador de eventos.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttachEventStatement" /> con el objeto especificado que contiene el evento, el nombre de evento y el delegado controlador de eventos especificados.</summary>
      <param name="targetObject">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene el evento.</param>
      <param name="eventName">Nombre del evento al que hay que asociar un controlador de eventos.</param>
      <param name="listener">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el nuevo controlador de eventos.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary>Obtiene o establece el evento al que se va a asociar un delegado controlador de eventos.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> que indica el evento al que se va a asociar un controlador de eventos.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary>Obtiene o establece el nuevo delegado controlador de eventos que se va a asociar al evento.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el nuevo controlador de eventos que se va a asociar.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary>Representa un argumento utilizado en una declaración de atributo de metadatos.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeArgument" /> utilizando el valor especificado.</summary>
      <param name="value">Un objeto <see cref="T:System.CodeDom.CodeExpression" /> que representa el valor del argumento.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeArgument" /> con el nombre y el valor especificados.</summary>
      <param name="name">Nombre de la propiedad de atributo a la que se aplica el argumento.</param>
      <param name="value">Un objeto <see cref="T:System.CodeDom.CodeExpression" /> que representa el valor del argumento.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary>Obtiene o establece el nombre del atributo.</summary>
      <returns>Nombre de la propiedad de atributo a la que corresponde el argumento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary>Obtiene o establece el valor del argumento de atributo.</summary>
      <returns>Un objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el valor del argumento de atributo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary>Representa una colección de objetos <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.CodeDom.CodeAttributeArgument" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException">Uno o más objetos de la matriz son <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary>Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> que se agrega.</param>
      <returns>Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary>Copia los elementos de la matriz <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificada al final de la colección.</summary>
      <param name="value">Matriz de tipo <see cref="T:System.CodeDom.CodeAttributeArgument" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>Copia el contenido de otro objeto <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> al final de la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary>Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary>Copia los objetos de colección en una instancia <see cref="T:System.Array" /> unidimensional, comenzando a partir del índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException">La matriz de destino es multidimensional.  
O bien 
El número de elementos de la clase <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary>Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado en la colección, si existe en la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> que se va a buscar en la colección.</param>
      <returns>Índice del objeto especificado, si se encuentra en la colección; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary>Inserta el objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado en el índice especificado de la colección.</summary>
      <param name="index">Índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary>Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> en el índice especificado de la colección.</summary>
      <param name="index">Índice de la colección a la que se obtendrá acceso.</param>
      <returns>Una clase <see cref="T:System.CodeDom.CodeAttributeArgument" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary>Quita el objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado de la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary>Representa una declaración de atributo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> utilizando la referencia al tipo de código especificado.</summary>
      <param name="attributeType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que identifica el atributo.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> utilizando la referencia al tipo de código y los argumentos especificados.</summary>
      <param name="attributeType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que identifica el atributo.</param>
      <param name="arguments">Matriz de tipo <see cref="T:System.CodeDom.CodeAttributeArgument" /> que contiene los argumentos correspondientes del atributo.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> usando el nombre especificado.</summary>
      <param name="name">El nombre del atributo.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> con el nombre y los argumentos especificados.</summary>
      <param name="name">El nombre del atributo.</param>
      <param name="arguments">Matriz de tipo <see cref="T:System.CodeDom.CodeAttributeArgument" /> que contiene los argumentos correspondientes del atributo.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary>Obtiene los argumentos del atributo.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> que contiene los argumentos del atributo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary>Obtiene la referencia del tipo de código de la declaración de atributos del código.</summary>
      <returns>Objeto <see cref="T:System.CodeDom.CodeTypeReference" /> que identifica al objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary>Obtiene o establece el nombre del atributo que se está declarando.</summary>
      <returns>El nombre del atributo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary>Representa una colección de objetos <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException">Uno o más objetos de la matriz son <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Agrega a la colección un objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> con el valor especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> que se agrega.</param>
      <returns>Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>Copia los elementos de la matriz <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificada al final de la colección.</summary>
      <param name="value">Matriz de tipo <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Copia el contenido de otro objeto <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> al final de la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Obtiene o establece un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> que se va a buscar.</param>
      <returns>
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary>Copia los objetos de colección en una instancia <see cref="T:System.Array" /> unidimensional, comenzando a partir del índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException">La matriz de destino es multidimensional.  
O bien 
El número de elementos de la clase <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificado en la colección, si existe en la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> que se va a buscar en la colección.</param>
      <returns>Índice de la colección a la que corresponde el objeto especificado, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary>Inserta el objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificado en el índice especificado de la colección.</summary>
      <param name="index">Índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary>Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> que se encuentra en el índice especificado.</summary>
      <param name="index">Índice de la colección a la que se obtendrá acceso.</param>
      <returns>Una clase <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Quita el objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificado de la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary>Representa una referencia a la clase base.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary>Representa una expresión que consta de una operación binaria entre dos expresiones.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> utilizando los parámetros especificados.</summary>
      <param name="left">
        <see cref="T:System.CodeDom.CodeExpression" /> a la izquierda del operador.</param>
      <param name="op">
        <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> que indica el tipo de operador.</param>
      <param name="right">
        <see cref="T:System.CodeDom.CodeExpression" /> a la derecha del operador.</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary>Obtiene o establece la expresión de código a la izquierda del operador.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el operando izquierdo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary>Obtiene o establece el operador de la expresión de operador binario.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> que indica el tipo de operador de la expresión.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary>Obtiene o establece la expresión de código a la derecha del operador.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el operando derecho.</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary>Define identificadores para operadores binarios compatibles.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary>Operador de suma.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary>Operador de asignación.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary>Operador AND bit a bit.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary>Operador OR bit a bit.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary>Operador booleano AND. Representa un operador de evaluación "cortocircuitada". Un operador de evaluación "cortocircuitada" sólo evaluará las expresiones necesarias antes de devolver un valor correcto.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary>Operador booleano OR. Representa un operador de evaluación "cortocircuitada". Un operador de evaluación "cortocircuitada" sólo evaluará las expresiones necesarias antes de devolver un valor correcto.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary>Operador de división.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary>Operador Mayor que.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary>Operador Mayor que o igual.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary>Operador de identidad Igual.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary>Operador de identidad No igual.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary>Operador Menor que.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary>Operador Menor que o igual.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary>Operador de módulo.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary>Operador de multiplicación.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary>Operador de resta.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary>Operador de valor Igual.</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary>Representa una expresión que se convierte a un tipo de datos o una interfaz.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCastExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCastExpression" /> con el tipo de destino y la expresión especificados.</summary>
      <param name="targetType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de destino de la conversión.</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> que se va a convertir.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCastExpression" /> con el tipo de destino y la expresión especificados.</summary>
      <param name="targetType">Nombre del tipo de destino de la conversión.</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> que se va a convertir.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCastExpression" /> con el tipo de destino y la expresión especificados.</summary>
      <param name="targetType">Tipo de datos de destino de la conversión.</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> que se va a convertir.</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary>Obtiene o establece la expresión que se va a convertir.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el código que se va a convertir.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary>Obtiene o establece el tipo de destino de la conversión.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de destino al que se va a convertir.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary>Representa un bloque de excepción <see langword="catch" /> de una instrucción <see langword="try/catch" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCatchClause" /> utilizando el nombre de la variable local especificada para la excepción.</summary>
      <param name="localName">Nombre de la variable local declarada en la conversión de la cláusula catch para la excepción. De uso opcional.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCatchClause" /> utilizando la variable local especificada para la excepción.</summary>
      <param name="localName">Nombre de la variable local declarada en la conversión de la cláusula catch para la excepción. De uso opcional.</param>
      <param name="catchExceptionType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de excepción que se desea detectar.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCatchClause" /> utilizando el nombre de la variable local para la excepción, el tipo de excepción y la colección de instrucciones especificados.</summary>
      <param name="localName">Nombre de la variable local declarada en la conversión de la cláusula catch para la excepción. De uso opcional.</param>
      <param name="catchExceptionType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de excepción que se desea detectar.</param>
      <param name="statements">Matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que representa el contenido del bloque catch.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary>Obtiene o establece el tipo de excepción que se debe controlar con el bloque catch.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de excepción que se va a controlar.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary>Obtiene o establece el nombre de variable de la excepción que controla la cláusula <see langword="catch" />.</summary>
      <returns>Nombre de la variable de la excepción que controla la cláusula <see langword="catch" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary>Obtiene las instrucciones dentro del bloque catch.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> que contiene las instrucciones dentro del bloque catch.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary>Representa una colección de objetos <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCatchClauseCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.CodeDom.CodeCatchClause" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException">Uno o más objetos de la matriz son <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary>Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeCatchClause" /> que se agrega.</param>
      <returns>Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary>Copia los elementos de la matriz <see cref="T:System.CodeDom.CodeCatchClause" /> especificada al final de la colección.</summary>
      <param name="value">Matriz de tipo <see cref="T:System.CodeDom.CodeCatchClause" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary>Copia el contenido de otro objeto <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> al final de la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary>Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeCatchClause" /> que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary>Copia los objetos de colección en una instancia <see cref="T:System.Array" /> unidimensional, comenzando a partir del índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException">La matriz de destino es multidimensional.  
O bien 
El número de elementos de la clase <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary>Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado en la colección, si existe en la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeCatchClause" /> que se va a buscar en la colección.</param>
      <returns>Índice del objeto especificado, si se encuentra en la colección; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary>Inserta el objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado en el índice especificado de la colección.</summary>
      <param name="index">Índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeCatchClause" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary>Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeCatchClause" /> en el índice especificado de la colección.</summary>
      <param name="index">Índice de la colección a la que se obtendrá acceso.</param>
      <returns>Objeto <see cref="T:System.CodeDom.CodeCatchClause" /> que se encuentra en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary>Quita el objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado de la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeCatchClause" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary>Representa una entidad de código pragma de suma de comprobación de código.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeChecksumPragma" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeChecksumPragma" /> utilizando un nombre de archivo, un GUID que representa el algoritmo de suma de comprobación y una secuencia de bytes que representa los datos de la suma de comprobación.</summary>
      <param name="fileName">Ruta de acceso al archivo de suma de comprobación.</param>
      <param name="checksumAlgorithmId">
        <see cref="T:System.Guid" /> que identifica el algoritmo de suma de comprobación que se va a utilizar.</param>
      <param name="checksumData">Matriz de bytes que contiene los datos de la suma de comprobación.</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary>Obtiene o establece un GUID que identifica el algoritmo de suma de comprobación que se va a utilizar.</summary>
      <returns>
        <see cref="T:System.Guid" /> que identifica el algoritmo de suma de comprobación que se va a utilizar.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary>Obtiene o establece el valor de los datos para el cálculo de la suma de comprobación.</summary>
      <returns>Matriz de bytes que contiene los datos para el cálculo de la suma de comprobación.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary>Obtiene o establece la ruta de acceso al archivo de suma de comprobación.</summary>
      <returns>Ruta de acceso al archivo de suma de comprobación.</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary>Representa un comentario.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeComment" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeComment" /> con el texto especificado como contenido.</summary>
      <param name="text">Contenido del comentario.</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeComment" /> mediante el texto especificado y el marcador de comentario de documentación.</summary>
      <param name="text">Contenido del comentario.</param>
      <param name="docComment">
        <see langword="true" /> si el comentario es de documentación; en caso contrario, <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary>Obtiene o establece un valor que indica si el comentario es de documentación.</summary>
      <returns>
        <see langword="true" /> si el comentario es de documentación; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary>Obtiene o establece el texto del comentario.</summary>
      <returns>Cadena que contiene el texto de comentario.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary>Representa una instrucción que se compone de un solo comentario.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCommentStatement" /> mediante el comentario especificado.</summary>
      <param name="comment">
        <see cref="T:System.CodeDom.CodeComment" /> que indica el comentario.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCommentStatement" />, usando el texto especificado como contenido.</summary>
      <param name="text">Contenido del comentario.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCommentStatement" /> mediante el texto especificado y el marcador de comentario de documentación.</summary>
      <param name="text">Contenido del comentario.</param>
      <param name="docComment">
        <see langword="true" /> si el comentario es de documentación; en caso contrario, <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary>Obtiene o establece el contenido del comentario.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeComment" /> que indica el comentario.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary>Representa una colección de objetos <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCommentStatementCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.CodeDom.CodeCommentStatement" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException">Uno o más objetos de la matriz son <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary>Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> que se agrega.</param>
      <returns>Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary>Copia los elementos de la matriz <see cref="T:System.CodeDom.CodeCommentStatement" /> especificada al final de la colección.</summary>
      <param name="value">Matriz de tipo <see cref="T:System.CodeDom.CodeCommentStatement" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Copia el contenido de otro objeto <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> al final de la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary>Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> especificado.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCommentStatement" /> que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary>Copia los objetos de la colección en el <see cref="T:System.Array" /> unidimensional especificado, a partir del índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException">La matriz de destino es multidimensional.  
O bien 
El número de elementos de la clase <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary>Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> especificado en la colección, si existe en la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> que se va a buscar.</param>
      <returns>Índice del objeto especificado, si se encuentra en la colección; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary>Inserta un objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> en la colección, en el índice especificado.</summary>
      <param name="index">Índice de base cero donde debe insertarse el elemento.</param>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary>Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> en el índice especificado de la colección.</summary>
      <param name="index">Índice de la colección a la que se obtendrá acceso.</param>
      <returns>Objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> que se encuentra en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary>Quita el objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> especificado de la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary>Proporciona un contenedor para un gráfico de programa CodeDOM.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary>Obtiene una colección de atributos personalizados para el ensamblado generado.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica los atributos personalizados para el ensamblado generado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary>Obtiene un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas End.</summary>
      <returns>Un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas End.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary>Obtiene la colección de espacios de nombres.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> que indica los espacios de nombres que utiliza la unidad de compilación.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary>Obtiene los ensamblados a los que se hace referencia.</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.StringCollection" /> que contiene los nombres de archivo de los ensamblados a los que se hace referencia.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary>Obtiene un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas Start.</summary>
      <returns>Un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas Start.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary>Representa una instrucción condicional de bifurcación que normalmente se representa como una instrucción <see langword="if" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeConditionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeConditionStatement" /> con las condiciones e instrucciones especificadas.</summary>
      <param name="condition">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión que se va a evaluar.</param>
      <param name="trueStatements">Matriz de tipo <see cref="T:System.CodeDom.CodeStatement" /> que contiene las instrucciones que se ejecutarán si la condición es <see langword="true" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeConditionStatement" /> con las condiciones e instrucciones especificadas.</summary>
      <param name="condition">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la condición que se va a evaluar.</param>
      <param name="trueStatements">Matriz de tipo <see cref="T:System.CodeDom.CodeStatement" /> que contiene las instrucciones que se ejecutarán si la condición es <see langword="true" />.</param>
      <param name="falseStatements">Matriz de tipo <see cref="T:System.CodeDom.CodeStatement" /> que contiene las instrucciones que se ejecutarán si la condición es <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary>Obtiene o establece la expresión que se evalúa en <see langword="true" /> o <see langword="false" />.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que se va a evaluar en <see langword="true" /> o <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary>Obtiene la colección de instrucciones que se ejecutarán, si la expresión condicional es <see langword="false" />.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> que contiene las instrucciones que se ejecutarán si la condición es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary>Obtiene la colección de instrucciones que se ejecutarán, si la expresión condicional es <see langword="true" />.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> que contiene las instrucciones que se ejecutarán si la condición es <see langword="true" />.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary>Representa una declaración de un constructor de instancia para un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeConstructor" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary>Obtiene la colección de argumentos constructores base.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contiene los argumentos del constructor base.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary>Obtiene la colección de argumentos constructores encadenados.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contiene los argumentos de constructor encadenados.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary>Representa una referencia a un valor predeterminado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDefaultValueExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> utilizando la referencia al tipo de código especificado.</summary>
      <param name="type">Clase <see cref="T:System.CodeDom.CodeTypeReference" /> que especifica la referencia a un tipo de valor.</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary>Obtiene o establece la referencia al tipo de datos para un valor predeterminado.</summary>
      <returns>Un objeto <see cref="T:System.CodeDom.CodeTypeReference" /> que representa un tipo de datos que tiene un valor predeterminado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary>Representa una expresión que crea un delegado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />.</summary>
      <param name="delegateType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos del delegado.</param>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene el método de control de eventos.</param>
      <param name="methodName">Nombre del método de control de eventos.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary>Obtiene o establece el tipo de datos del delegado.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos del delegado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary>Obtiene o establece el nombre del método de control de eventos.</summary>
      <returns>Nombre del método de control de eventos.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary>Obtiene o establece el objeto que contiene el método de control de eventos.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene el método de control de eventos.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary>Representa una expresión que genera un evento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> mediante el objeto de destino especificado.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto de destino.</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> mediante el objeto de destino y los parámetros especificados.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto de destino.</param>
      <param name="parameters">Matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indican los parámetros.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary>Obtiene o establece los parámetros que se pasan a los métodos de control de eventos asociados al evento.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica los parámetros que se pasan a los métodos de control de eventos asociados al evento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary>Obtiene o establece el evento que se va a invocar.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el evento que se va a invocar.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary>Representa una expresión que se utiliza como parámetro de invocación de método junto con un indicador de dirección de referencia.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDirectionExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDirectionExpression" /> utilizando la expresión y la dirección de campo especificadas.</summary>
      <param name="direction">
        <see cref="T:System.CodeDom.FieldDirection" /> que indica la dirección de campo de la expresión.</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión de código que se va a representar.</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary>Obtiene o establece la dirección de campo de esta expresión de dirección.</summary>
      <returns>
        <see cref="T:System.CodeDom.FieldDirection" /> que indica la dirección de campo de esta expresión de dirección.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary>Obtiene o establece la expresión de código que se va a representar.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión que se va a representar.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary>Actúa como la clase base de las clases de directivas de código.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDirective" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary>Representa una colección de objetos <see cref="T:System.CodeDom.CodeDirective" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDirectiveCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDirectiveCollection" /> con los objetos de directiva de código de la matriz especificada.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.CodeDom.CodeDirective" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeDirectiveCollection" /> con los elementos de la colección de directivas de código especificada.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary>Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeDirective" /> que se agrega.</param>
      <returns>Posición de índice en la que se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary>Agrega una matriz de objetos <see cref="T:System.CodeDom.CodeDirective" /> al final de la colección.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.CodeDom.CodeDirective" /> que se agregará a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary>Agrega al final de la colección el contenido del objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene los objetos <see cref="T:System.CodeDom.CodeDirective" /> que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary>Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeDirective" /> que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary>Copia el contenido de la colección en una matriz unidimensional, a partir del índice especificado.</summary>
      <param name="array">Matriz de tipo <see cref="T:System.CodeDom.CodeDirective" /> que constituye el destino de los valores copiados desde la colección.</param>
      <param name="index">Índice de la matriz donde debe comenzar la inserción de objetos de la colección.</param>
      <exception cref="T:System.ArgumentException">La matriz de destino es multidimensional.  
o bien 
El número de elementos de <see cref="T:System.CodeDom.CodeDirectiveCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary>Obtiene el índice que ocupa en la colección el objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado, si existe en la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeDirective" /> que se va a buscar en la colección.</param>
      <returns>Posición de índice que ocupa en la colección el objeto especificado, si se encuentra; de lo contrario, es -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary>Inserta el objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado en el índice especificado de la colección.</summary>
      <param name="index">Posición de índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeDirective" /> que se va a insertar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que 0.  
O bien 
 <paramref name="index" /> es mayor que <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary>Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeDirective" /> en el índice especificado de la colección.</summary>
      <param name="index">Posición de índice a la que se obtiene acceso.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeDirective" /> en la posición de índice.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> se encuentra fuera del intervalo de posiciones de índice válido para la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary>Quita el objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado de la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeDirective" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary>Representa el método de punto de entrada de un ejecutable.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeEntryPointMethod" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary>Representa una referencia a un evento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeEventReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> mediante el objeto de destino y el nombre de evento especificados.</summary>
      <param name="targetObject">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene el evento.</param>
      <param name="eventName">Nombre del evento al que se hará referencia.</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary>Obtiene o establece el nombre del evento.</summary>
      <returns>Nombre del evento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary>Obtiene o establece el objeto que contiene el evento.</summary>
      <returns>Objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene el evento.</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary>Representa una expresión de código. Ésta es una clase base para otros objetos de expresión de código para la cual nunca se crea ninguna instancia.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary>Representa una colección de objetos <see cref="T:System.CodeDom.CodeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeExpressionCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeExpression" />.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException">Uno o más objetos de la matriz son <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeExpressionCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary>Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se agrega.</param>
      <returns>Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary>Copia los elementos de la matriz especificada al final de la colección.</summary>
      <param name="value">Matriz de tipo <see cref="T:System.CodeDom.CodeExpression" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary>Copia el contenido de otro objeto <see cref="T:System.CodeDom.CodeExpressionCollection" /> al final de la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary>Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary>Copia los objetos de colección en una instancia <see cref="T:System.Array" /> unidimensional, comenzando a partir del índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException">La matriz de destino es multidimensional.  
o bien 
El número de elementos de la clase <see cref="T:System.CodeDom.CodeExpressionCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary>Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado en la colección, si existe en la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se va a buscar en la colección.</param>
      <returns>Índice del objeto especificado, si se encuentra en la colección; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary>Inserta el objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado en el índice especificado de la colección.</summary>
      <param name="index">Índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary>Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeExpression" /> en el índice especificado de la colección.</summary>
      <param name="index">Índice de base cero de la colección a la que se obtendrá acceso.</param>
      <returns>Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se encuentra en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary>Quita el objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado de la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary>Representa una instrucción que contiene una sola expresión.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeExpressionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeExpressionStatement" /> usando la expresión especificada.</summary>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> para la instrucción.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary>Obtiene o establece la expresión de la instrucción.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión de la instrucción.</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary>Representa una referencia a un campo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeFieldReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> mediante el objeto de destino y el nombre de campo especificados.</summary>
      <param name="targetObject">Instancia de <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene el campo.</param>
      <param name="fieldName">Nombre del campo.</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary>Obtiene o establece el nombre del campo al que se hará referencia.</summary>
      <returns>Una cadena que contiene el nombre de campo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary>Obtiene o establece el objeto que contiene el campo al que se hace referencia.</summary>
      <returns>Una instancia de <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene el campo al que se hace referencia.</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary>Representa una instrucción <see langword="goto" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeGotoStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeGotoStatement" /> con el nombre de etiqueta especificado.</summary>
      <param name="label">Etiqueta en la que va a continuar la ejecución del programa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Label" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary>Obtiene o establece el nombre de la etiqueta en la que va a continuar la ejecución del programa.</summary>
      <returns>Cadena que indica el nombre de la etiqueta en la que va a continuar la ejecución del programa.</returns>
      <exception cref="T:System.ArgumentNullException">La etiqueta no se puede establecer porque <paramref name="value" /> es <see langword="null" /> o una cadena vacía.</exception>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary>Representa una referencia para una propiedad del indizador de un objeto.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeIndexerExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeIndexerExpression" /> con el objeto de destino y el índice especificados.</summary>
      <param name="targetObject">Objeto de destino.</param>
      <param name="indices">Índices de la expresión de indizador.</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary>Obtiene la colección de índices de la expresión de indizador.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica los índices de la expresión de indizador.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary>Obtiene o establece el objeto de destino que se puede indizar.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto indizador.</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary>Representa una instrucción <see langword="for" /> o un bucle a través de un bloque de instrucciones mediante una expresión de comprobación utilizada como una condición para la continuación del bucle.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeIterationStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeIterationStatement" /> utilizando los parámetros especificados.</summary>
      <param name="initStatement">
        <see cref="T:System.CodeDom.CodeStatement" /> que contiene la instrucción de inicialización del bucle.</param>
      <param name="testExpression">
        <see cref="T:System.CodeDom.CodeExpression" /> que contiene la expresión en la que se va a probar la condición de salida.</param>
      <param name="incrementStatement">
        <see cref="T:System.CodeDom.CodeStatement" /> que contiene la instrucción de incremento por ciclo.</param>
      <param name="statements">Matriz de tipo <see cref="T:System.CodeDom.CodeStatement" /> que contiene las instrucciones dentro del bucle.</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary>Obtiene o establece la instrucción a la que se llama después de cada ciclo del bucle.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" /> que indica la instrucción de incremento por ciclo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary>Obtiene o establece la instrucción de inicialización del bucle.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" /> que indica la instrucción de inicialización del bucle.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary>Obtiene o establece las instrucciones que se ejecutarán dentro del bucle.</summary>
      <returns>Matriz de tipo <see cref="T:System.CodeDom.CodeStatement" /> que indica las instrucciones dentro del bucle.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary>Obtiene o establece la expresión que se va a probar como condición para continuar el bucle.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión que se va a evaluar.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary>Representa una instrucción con etiqueta o una etiqueta independiente.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeLabeledStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeLabeledStatement" /> con el nombre de etiqueta especificado.</summary>
      <param name="label">Nombre de la etiqueta.</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeLabeledStatement" /> con el nombre de la etiqueta e instrucción especificadas.</summary>
      <param name="label">Nombre de la etiqueta.</param>
      <param name="statement">
        <see cref="T:System.CodeDom.CodeStatement" /> que se va a asociar a la etiqueta.</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary>Obtiene o establece el nombre de la etiqueta.</summary>
      <returns>Nombre de la etiqueta.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary>Obtiene o establece la instrucción asociada opcional.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" /> que indica la instrucción asociada con la etiqueta.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary>Representa la ubicación específica de un archivo determinado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeLinePragma" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeLinePragma" />.</summary>
      <param name="fileName">El nombre del archivo asociado.</param>
      <param name="lineNumber">Número de línea donde se almacena una referencia.</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary>Obtiene o establece el nombre del archivo asociado.</summary>
      <returns>El nombre del archivo asociado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary>Obtiene o establece el número de línea de la referencia asociada.</summary>
      <returns>Número de línea.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary>Representa una declaración para un evento de un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMemberEvent" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary>Obtiene o establece el tipo de datos que implementa el evento de miembro.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica el tipo de datos que implementa el evento de miembro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary>Obtiene o establece el tipo de datos implementado de forma privada, en caso de haber alguno.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos que implementa el evento de forma privada.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary>Obtiene o establece el tipo de datos del tipo de delegado que controla el evento.</summary>
      <returns>Clase <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de delegado que controla el evento.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary>Representa una declaración para un campo de un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMemberField" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMemberField" /> con el tipo y el nombre de campo especificados.</summary>
      <param name="type">Un objeto que indica el tipo del campo.</param>
      <param name="name">Nombre del campo.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMemberField" /> con el tipo y el nombre de campo especificados.</summary>
      <param name="type">Tipo del campo.</param>
      <param name="name">Nombre del campo.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMemberField" /> con el tipo y el nombre de campo especificados.</summary>
      <param name="type">Tipo del campo.</param>
      <param name="name">Nombre del campo.</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary>Obtiene o establece la expresión de inicialización para el campo.</summary>
      <returns>Expresión de inicialización para el campo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary>Obtiene o establece el tipo del campo.</summary>
      <returns>Tipo del campo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary>Representa una declaración para un método de un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMemberMethod" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary>Obtiene los tipos de datos de las interfaces implementadas mediante este método que se indica mediante la propiedad <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" />, a menos que sea una implementación de método privado.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica las interfaces implementadas por este método.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary>Obtiene las declaraciones de parámetros del método.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que indica los parámetros del método.</returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary>Evento que se desencadena la primera vez que se tiene acceso a la colección <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary>Evento que se desencadena la primera vez que se tiene acceso a la colección <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary>Evento que se desencadena la primera vez que se tiene acceso a la colección <see cref="P:System.CodeDom.CodeMemberMethod.Statements" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary>Obtiene o establece el tipo de datos de la interfaz que implementa este método, si es privado, e implementa un método de la interfaz, si existe.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> indica el tipo de datos de la interfaz con el método que implementa el método privado cuya declaración representa <see cref="T:System.CodeDom.CodeMemberMethod" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary>Obtiene o establece el tipo de datos del valor devuelto del método.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica los tipos de datos del valor devuelto por el método.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary>Obtiene los atributos personalizados del tipo de valor devuelto del método.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica los atributos personalizados.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary>Obtiene las instrucciones del método.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> que indica las instrucciones del método.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary>Obtiene los parámetros de tipo del método genérico actual.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contiene los parámetros de tipo del método genérico.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary>Representa una declaración para una propiedad de un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMemberProperty" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary>Obtiene la colección de instrucciones <see langword="get" /> de la propiedad.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> que contiene las instrucciones <see langword="get" /> de la propiedad miembro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary>Obtiene o establece un valor que indica si la propiedad posee un descriptor de acceso de método <see langword="get" />.</summary>
      <returns>Es <see langword="true" />, si la propiedad <see langword="Count" /> de la colección <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" /> es distinta de cero, o si el valor de esta propiedad se ha establecido en <see langword="true" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary>Obtiene o establece un valor que indica si la propiedad posee un descriptor de acceso de método <see langword="set" />.</summary>
      <returns>Es <see langword="true" /> si la propiedad <see cref="P:System.Collections.CollectionBase.Count" /> de la colección <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" /> es distinta de cero; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary>Obtiene los tipos de datos de las interfaces que implementa esta propiedad.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica los tipos de datos que implementa la propiedad.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary>Obtiene la colección de instrucciones de declaración de la propiedad.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que indica las expresiones de declaración de la propiedad.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary>Obtiene o establece el tipo de datos de la interfaz, si existe, que implementa esta propiedad, si es privada.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos de la interfaz, si existe, que implementa la propiedad, si es privada.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary>Obtiene la colección de instrucciones <see langword="set" /> de la propiedad.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> que contiene las instrucciones <see langword="set" /> de la propiedad miembro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary>Obtiene o establece el tipo de datos de la propiedad.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos de la propiedad.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary>Representa una expresión que invoca a un método.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> con el objeto de destino, el nombre de método y los parámetros especificados.</summary>
      <param name="targetObject">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto de destino con el método que se va a invocar.</param>
      <param name="methodName">Nombre del método que se va a invocar.</param>
      <param name="parameters">Matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indica los parámetros con los que llamar al método.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> con el método y los parámetros especificados.</summary>
      <param name="method">Objeto <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> que indica el método que se va a invocar.</param>
      <param name="parameters">Matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indica los parámetros con los que se invocará al método.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary>Obtiene o establece el método que se va a invocar.</summary>
      <returns>Objeto <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> que indica el método que se va a invocar.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary>Obtiene los parámetros con los que invocará al método.</summary>
      <returns>Objeto <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica los parámetros con los que se va a invocar al método.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary>Representa una referencia a un método.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> con el objeto de destino y el nombre de método especificados.</summary>
      <param name="targetObject">Clase <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto al que se va a dirigir.</param>
      <param name="methodName">Nombre del método al que se va a llamar.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> con el objeto de destino, el nombre de método y los argumentos de tipo genérico especificados.</summary>
      <param name="targetObject">Clase <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto al que se va a dirigir.</param>
      <param name="methodName">Nombre del método al que se va a llamar.</param>
      <param name="typeParameters">Matriz de valores de <see cref="T:System.CodeDom.CodeTypeReference" /> que especifican la propiedad <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" /> de esta clase <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary>Obtiene o establece el nombre del método al que se hará referencia.</summary>
      <returns>Nombre del método al que se hace referencia.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary>Obtiene o establece la expresión que indica el método al que se hará referencia.</summary>
      <returns>Clase <see cref="T:System.CodeDom.CodeExpression" /> que representa el método al que se hará referencia.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary>Obtiene los argumentos de tipo para la expresión de referencia al método genérico actual.</summary>
      <returns>Clase <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contiene los argumentos de tipo para el código de la clase <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> actual.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary>Representa una instrucción de valor devuelto.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMethodReturnStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> utilizando la expresión especificada.</summary>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el valor devuelto.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary>Obtiene o establece el valor devuelto.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el valor devuelto por la instrucción return, o <see langword="null" /> si la instrucción forma parte de una subrutina.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary>Representa una declaración de espacio de nombres.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.CodeDom.CodeNamespace" /> usando el nombre especificado.</summary>
      <param name="name">Nombre del espacio de nombres que se declara.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary>Obtiene los comentarios para el espacio de nombres.</summary>
      <returns>Un objeto <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> que indica los comentarios para el espacio de nombres.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary>Obtiene la colección de directivas de importación de espacios de nombres utilizadas por el espacio de nombres.</summary>
      <returns>Una colección <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> que indica las directivas de importación de espacios de nombres utilizadas por el espacio de nombres.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary>Obtiene o establece el nombre del espacio de nombres.</summary>
      <returns>Nombre del espacio de nombres.</returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary>Evento que se desencadena la primera vez que se tiene acceso a la colección <see cref="P:System.CodeDom.CodeNamespace.Comments" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary>Evento que se desencadena la primera vez que se tiene acceso a la colección <see cref="P:System.CodeDom.CodeNamespace.Imports" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary>Evento que se desencadena la primera vez que se tiene acceso a la colección <see cref="P:System.CodeDom.CodeNamespace.Types" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary>Obtiene la colección de tipos que contiene el espacio de nombres.</summary>
      <returns>Una colección <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> que indica los tipos que se incluyen en el espacio de nombres.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary>Representa una colección de objetos <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeNamespaceCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeNamespaceCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.CodeDom.CodeNamespace" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException">Uno o más objetos de la matriz son <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeNamespaceCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value">El objeto <see cref="T:System.CodeDom.CodeNamespaceCollection" /> con que inicializar la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary>Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespace" /> que se va a agregar.</param>
      <returns>Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary>Copia los elementos de la matriz <see cref="T:System.CodeDom.CodeNamespace" /> especificada al final de la colección.</summary>
      <param name="value">Matriz de tipo <see cref="T:System.CodeDom.CodeNamespace" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary>Agrega al final de la colección el contenido del objeto <see cref="T:System.CodeDom.CodeNamespaceCollection" /> especificado.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary>Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespace" /> que se va a buscar en la colección.</param>
      <returns>Es <see langword="true" /> si la colección contiene <see cref="T:System.CodeDom.CodeNamespace" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary>Copia los objetos de la colección en una instancia de <see cref="T:System.Array" /> unidimensional, empezando en el índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException">La matriz de destino es multidimensional.  
O bien 
El número de elementos de la clase <see cref="T:System.CodeDom.CodeNamespaceCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary>Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado en <see cref="T:System.CodeDom.CodeNamespaceCollection" /> si existe en la colección.</summary>
      <param name="value">Clase <see cref="T:System.CodeDom.CodeNamespace" /> que se va a localizar.</param>
      <returns>Índice de objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado, si se encuentra en la colección; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary>Inserta el objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado en el índice especificado de la colección.</summary>
      <param name="index">Índice de base cero donde debe insertarse el elemento nuevo.</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespace" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary>Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeNamespaceCollection" /> en el índice especificado de la colección.</summary>
      <param name="index">Índice de la colección a la que se obtendrá acceso.</param>
      <returns>Una clase <see cref="T:System.CodeDom.CodeNamespace" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary>Quita el objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado de la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespace" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary>Representa una directiva de importación de espacio de nombres que indica el espacio de nombres que se va a utilizar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeNamespaceImport" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeNamespaceImport" /> mediante el espacio de nombres especificado que se va a importar.</summary>
      <param name="nameSpace">Nombre del espacio de nombres que se va a importar.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary>Obtiene o establece la línea y archivo donde se produce la instrucción.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeLinePragma" /> que indica el contexto de la instrucción.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary>Obtiene o establece el espacio de nombres que se va a importar.</summary>
      <returns>Nombre del espacio de nombres que se va a importar.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary>Representa una colección de objetos <see cref="T:System.CodeDom.CodeNamespaceImport" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary>Agrega un objeto <see cref="T:System.CodeDom.CodeNamespaceImport" /> a la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeNamespaceImport" /> que se va a agregar a la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary>Agrega un conjunto de objetos <see cref="T:System.CodeDom.CodeNamespaceImport" /> a la colección.</summary>
      <param name="value">Matriz de tipo <see cref="T:System.CodeDom.CodeNamespaceImport" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary>Borra la colección de miembros.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary>Obtiene el número de espacios de nombres de la colección.</summary>
      <returns>El número de espacios de nombres de la colección.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary>Obtiene un enumerador que enumera los miembros de la colección.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> que indica los miembros de la colección.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary>Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeNamespaceImport" /> en el índice especificado de la colección.</summary>
      <param name="index">Índice de la colección a la que se obtendrá acceso.</param>
      <returns>Objeto <see cref="T:System.CodeDom.CodeNamespaceImport" /> que se encuentra en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de <see cref="T:System.Collections.ICollection" /> en <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array">Matriz <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados desde la colección <see cref="T:System.Collections.ICollection" />. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary>Obtiene el número de elementos incluidos en <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Número de elementos contenidos en <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns>Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />. Esta propiedad devuelve siempre <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.  Esta propiedad devuelve siempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que puede recorrer en iteración una colección.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary>Agrega un objeto a <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que se va a agregar a <see cref="T:System.Collections.IList" />.</param>
      <returns>Posición donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary>Quita todos los elementos de <see cref="T:System.Collections.IList" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determina si <see cref="T:System.Collections.IList" /> contiene un valor específico.</summary>
      <param name="value">Objeto <see cref="T:System.Object" /> que se va a buscar en la interfaz <see cref="T:System.Collections.IList" />.</param>
      <returns>Es <see langword="true" /> si el valor está en la lista; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina el índice de un elemento específico de <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Objeto <see cref="T:System.Object" /> que se va a buscar en la interfaz <see cref="T:System.Collections.IList" />.</param>
      <returns>Índice de <paramref name="value" /> si se encuentra en la lista; en caso contrario, es -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserta un elemento en <see cref="T:System.Collections.IList" />, en la posición especificada.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value">Objeto <see cref="T:System.Object" /> que se va a insertar en <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary>Obtiene un valor que indica si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo; de lo contrario, es <see langword="false" />.  Esta propiedad devuelve siempre <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.IList" /> es de solo lectura.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IList" /> es de solo lectura; de lo contrario, es <see langword="false" />.  Esta propiedad devuelve siempre <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Obtiene o establece el elemento en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a obtener o establecer.</param>
      <returns>Elemento en el índice especificado.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">
        <see cref="T:System.Object" /> que se va a quitar de <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Quita el elemento situado en el índice especificado de <see cref="T:System.Collections.IList" />.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary>Proporciona una clase base común para la mayoría de los objetos CodeDOM (Code Document Object Model).</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeObject" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary>Obtiene los datos definibles por el usuario para el objeto actual.</summary>
      <returns>Una interfaz <see cref="T:System.Collections.IDictionary" /> que contiene datos de usuario para el objeto actual.</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary>Representa una expresión que crea una nueva instancia de un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeObjectCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> con el tipo y los parámetros especificados.</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos del objeto que se va a crear.</param>
      <param name="parameters">Matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indica los parámetros que se utilizarán para crear el objeto.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> con el tipo y los parámetros especificados.</summary>
      <param name="createType">Nombre del tipo de datos del objeto que se va a crear.</param>
      <param name="parameters">Matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indica los parámetros que se utilizarán para crear el objeto.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> con el tipo y los parámetros especificados.</summary>
      <param name="createType">Tipo de datos del objeto que se va a crear.</param>
      <param name="parameters">Matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indica los parámetros que se utilizarán para crear el objeto.</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary>Obtiene o establece el tipo de datos del objeto que se va a crear.</summary>
      <returns>Referencia <see cref="T:System.CodeDom.CodeTypeReference" /> al tipo de datos del objeto que se va a crear.</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary>Obtiene o establece los parámetros que se utilizan para crear el objeto.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica los parámetros con los que se va a crear el objeto.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary>Representa una declaración de parámetros para un método, una propiedad o un constructor.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> con el tipo y el nombre de parámetro especificados.</summary>
      <param name="type">Objeto que indica el tipo del parámetro que se va a declarar.</param>
      <param name="name">Nombre del parámetro que se va a declarar.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> con el tipo y el nombre de parámetro especificados.</summary>
      <param name="type">Tipo de parámetro que se va a declarar.</param>
      <param name="name">Nombre del parámetro que se va a declarar.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> con el tipo y el nombre de parámetro especificados.</summary>
      <param name="type">Tipo de parámetro que se va a declarar.</param>
      <param name="name">Nombre del parámetro que se va a declarar.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary>Obtiene o establece los atributos personalizados de la declaración de parámetros.</summary>
      <returns>Objeto que indica los atributos personalizados.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary>Obtiene o establece la dirección del campo.</summary>
      <returns>Un objeto que indica la dirección del campo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary>Obtiene o establece el nombre del parámetro.</summary>
      <returns>Nombre del parámetro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary>Obtiene o establece el tipo del parámetro.</summary>
      <returns>Tipo del parámetro.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary>Representa una colección de objetos <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException">uno o más objetos de la matriz son <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Agrega el <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado a la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> que se va a agregar.</param>
      <returns>Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>Copia los elementos de la matriz especificada al final de la colección.</summary>
      <param name="value">Matriz de tipo <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> que contiene los objetos que se agregarán a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Agrega el contenido de otro objeto <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> al final de la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que contiene los objetos que se agregarán a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> para buscar en la colección.</param>
      <returns>
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary>Copia los objetos de colección en una instancia <see cref="T:System.Array" /> unidimensional, comenzando a partir del índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException">La matriz de destino es multidimensional.  
O bien 
El número de elementos de la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Obtiene el índice de la colección del objeto <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado, si existe en la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> que se va a buscar en la colección.</param>
      <returns>Índice de la colección a la que corresponde el objeto especificado, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Inserta la clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificada en el índice especificado de la colección.</summary>
      <param name="index">Índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary>Obtiene o establece <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> en el índice especificado de la colección.</summary>
      <param name="index">Índice de la colección a la que se obtendrá acceso.</param>
      <returns>Una clase <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Quita el objeto <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado de la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary>Representa un valor de tipos de datos primitivos.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodePrimitiveExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodePrimitiveExpression" /> usando el objeto especificado.</summary>
      <param name="value">Objeto que se va a representar.</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary>Obtiene o establece el tipo de datos primitivo que se va a representar.</summary>
      <returns>Instancia de tipo de datos primitivo cuyo valor se representa.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary>Representa una referencia al valor de una propiedad.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodePropertyReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> con el objeto de destino y el nombre de propiedad especificados.</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene la propiedad a la que se hace referencia.</param>
      <param name="propertyName">Nombre de la propiedad a la que se hará referencia.</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary>Obtiene o establece el nombre de la propiedad a la que se hará referencia.</summary>
      <returns>Nombre de la propiedad a la que se hará referencia.</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary>Obtiene o establece el objeto que contiene la propiedad a la que se hace referencia.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene la propiedad a la que se hace referencia.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary>Representa el argumento de valor de una llamada al método set de una propiedad dentro de un método set de una propiedad.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary>Especifica el nombre y el modo de una región de código.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeRegionDirective" /> con valores predeterminados.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeRegionDirective" />, especificando su modo y su nombre.</summary>
      <param name="regionMode">Uno de los valores de <see cref="T:System.CodeDom.CodeRegionMode" />.</param>
      <param name="regionText">Nombre de la región.</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary>Obtiene o establece el modo de la directiva de región.</summary>
      <returns>Uno de los valores de <see cref="T:System.CodeDom.CodeRegionMode" />. De manera predeterminada, es <see cref="F:System.CodeDom.CodeRegionMode.None" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary>Obtiene o establece el nombre de la región.</summary>
      <returns>El nombre de la región.</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary>Especifica el inicio o el final de una región de código.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary>Final de la región.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary>No se utiliza.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary>Inicio de la región.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary>Representa una instrucción que quita un controlador de eventos.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeRemoveEventStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> con el evento y el controlador de eventos especificados.</summary>
      <param name="eventRef">Un objeto <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> que indica el evento del que se va a desasociar el controlador de eventos.</param>
      <param name="listener">Un objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el controlador de eventos que se va a quitar.</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> con el objeto de destino, el nombre de evento y el controlador de eventos especificados.</summary>
      <param name="targetObject">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el objeto que contiene el evento.</param>
      <param name="eventName">Nombre del evento.</param>
      <param name="listener">Un objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el controlador de eventos que se va a quitar.</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary>Obtiene o establece el evento del que se va a quitar un agente de escucha.</summary>
      <returns>Un objeto <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> que indica el evento del que se va a quitar un agente de escucha.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary>Obtiene o establece el controlador de eventos que se va a quitar.</summary>
      <returns>Un objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica el controlador de eventos que se va a quitar.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary>Representa un fragmento de código literal compilable.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />.</summary>
      <param name="value">Fragmento de código literal que se va a representar.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary>Obtiene o establece la información de línea o de archivo relativa a la ubicación del código en un documento en código fuente.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeLinePragma" /> que indica la posición del fragmento de código.</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary>Obtiene o establece el fragmento de código literal que se va a representar.</summary>
      <returns>Fragmento de código literal.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary>Representa una expresión literal.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeSnippetExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeSnippetExpression" /> utilizando la expresión literal especificada.</summary>
      <param name="value">Expresión literal que se va a representar.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary>Obtiene o establece la cadena de código literal.</summary>
      <returns>Cadena literal.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary>Representa una instrucción utilizando un fragmento de código literal.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeSnippetStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeSnippetStatement" /> mediante el fragmento de código especificado.</summary>
      <param name="value">Fragmento de código literal de la instrucción que se va a representar.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary>Obtiene o establece la instrucción de fragmento de código literal.</summary>
      <returns>Instrucción de fragmento de código literal.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary>Representa un miembro de un tipo con un fragmento de código literal.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeSnippetTypeMember" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> con el texto especificado.</summary>
      <param name="text">Fragmento de código literal del miembro de tipo.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary>Obtiene o establece el fragmento de código literal del miembro de tipo.</summary>
      <returns>Fragmento de código literal del miembro de tipo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary>Representa la clase base <see langword="abstract" /> de la que derivan todas las instrucciones de código.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeStatement" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary>Obtiene un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas End.</summary>
      <returns>Un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas End.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary>Obtiene o establece la línea en la que se ejecuta la instrucción de código.</summary>
      <returns>Un objeto <see cref="T:System.CodeDom.CodeLinePragma" /> que indica el contexto de la instrucción de código.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary>Obtiene un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas Start.</summary>
      <returns>Un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas Start.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary>Representa una colección de objetos <see cref="T:System.CodeDom.CodeStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeStatementCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeStatementCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeStatement" />.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> con los que se inicializará la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeStatementCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary>Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que se agrega.</param>
      <returns>Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary>Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeStatement" /> que se agrega.</param>
      <returns>Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary>Agrega un conjunto de objetos <see cref="T:System.CodeDom.CodeStatement" /> a la colección.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que se agregará a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary>Agrega el contenido de otro objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> al final de la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary>Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeStatement" /> que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary>Copia los elementos del objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> en una instancia de <see cref="T:System.Array" /> unidimensional, empezando en el índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException">La matriz de destino es multidimensional.  
O bien 
El número de elementos de la clase <see cref="T:System.CodeDom.CodeStatementCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary>Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado en <see cref="T:System.CodeDom.CodeStatementCollection" /> si existe en la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeStatement" /> que se va a buscar en la colección.</param>
      <returns>Índice del objeto especificado de la colección, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary>Inserta el objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado en el índice especificado de la colección.</summary>
      <param name="index">Índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeStatement" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary>Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeStatement" /> en el índice especificado de la colección.</summary>
      <param name="index">Índice de la colección a la que se obtendrá acceso.</param>
      <returns>Una clase <see cref="T:System.CodeDom.CodeStatement" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary>Quita el objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado de la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeStatement" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary>Representa una referencia a la instancia de clase local actual.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeThisReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary>Representa una instrucción que produce una excepción.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeThrowExceptionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> con la instancia del tipo de excepción especificada.</summary>
      <param name="toThrow">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica la excepción que se va a producir.</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary>Obtiene o establece la excepción que se va a producir.</summary>
      <returns>Objeto <see cref="T:System.CodeDom.CodeExpression" /> que representa una instancia de la excepción que se va a producir.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary>Representa un bloque <see langword="try" /> con cualquier número de cláusulas <see langword="catch" /> y, opcionalmente, un bloque <see langword="finally" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> con las instrucciones especificadas para las cláusulas try y catch.</summary>
      <param name="tryStatements">Matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que indican las instrucciones que se procesarán mediante un bloque try.</param>
      <param name="catchClauses">Matriz de objetos <see cref="T:System.CodeDom.CodeCatchClause" /> que indican las instrucciones que se procesarán mediante un bloque catch.</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> con las instrucciones especificadas para las instrucciones try, catch y finally.</summary>
      <param name="tryStatements">Matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que indican las instrucciones que se procesarán mediante un bloque try.</param>
      <param name="catchClauses">Matriz de objetos <see cref="T:System.CodeDom.CodeCatchClause" /> que indican las instrucciones que se procesarán mediante un bloque catch.</param>
      <param name="finallyStatements">Matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que indican las instrucciones finally que se utilizarán.</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary>Obtiene las cláusulas catch que se deben utilizar.</summary>
      <returns>Una clase <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> que indica las cláusulas catch que se van a utilizar.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary>Obtiene las instrucciones finally que se van a utilizar.</summary>
      <returns>Una clase <see cref="T:System.CodeDom.CodeStatementCollection" /> que indica las instrucciones finally.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary>Obtiene las instrucciones try.</summary>
      <returns>Una clase <see cref="T:System.CodeDom.CodeStatementCollection" /> que indica las instrucciones que se van a procesar mediante un bloque try.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary>Representa un constructor estático de una clase.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeConstructor" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary>Representa una declaración de tipos para una clase, estructura, interfaz o enumeración.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDeclaration" /> con el nombre especificado.</summary>
      <param name="name">Nombre del nuevo tipo.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary>Obtiene los tipos base del tipo.</summary>
      <returns>Objeto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica los tipos base del tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary>Obtiene o establece un valor que indica si el tipo es una clase o un tipo de referencia.</summary>
      <returns>Es <see langword="true" /> si el tipo es una clase o un tipo de referencia; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary>Obtiene o establece un valor que indica si el tipo es una enumeración.</summary>
      <returns>Es <see langword="true" /> si el tipo es una enumeración; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary>Obtiene o establece un valor que indica si el tipo es una interfaz.</summary>
      <returns>Es <see langword="true" /> si el tipo es una interfaz; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary>Obtiene o establece un valor que indica si la declaración de tipos es completa o parcial.</summary>
      <returns>Es <see langword="true" /> si la declaración de clase o de estructura es una representación parcial de la implementación; es <see langword="false" /> si la declaración es una implementación completa de la clase o la estructura. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary>Obtiene o establece un valor que indica si el tipo es un tipo de valor (struct).</summary>
      <returns>Es <see langword="true" /> si el tipo es un tipo de valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary>Obtiene la colección de miembros de clase del tipo representado.</summary>
      <returns>Objeto <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> que indica los miembros de la clase.</returns>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary>Se produce cuando se obtiene acceso a la colección <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> por primera vez.</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary>Se produce cuando se obtiene acceso a la colección <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> por primera vez.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary>Obtiene o establece los atributos del tipo.</summary>
      <returns>Objeto <see cref="T:System.Reflection.TypeAttributes" /> que indica los atributos del tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary>Obtiene los parámetros de tipo para la declaración de tipos.</summary>
      <returns>Colección <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contiene los parámetros de tipo para la declaración de tipos.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary>Representa una colección de objetos <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.CodeDom.CodeTypeDeclaration" /> con los que se inicializará la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> con el que se inicializa la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary>Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que se agrega.</param>
      <returns>Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary>Copia los elementos de la matriz especificada al final de la colección.</summary>
      <param name="value">Matriz de tipo <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>Agrega el contenido de otro objeto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> al final de la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary>Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary>Copia los elementos del objeto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> en una instancia de <see cref="T:System.Array" /> unidimensional, empezando en el índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException">La matriz de destino es multidimensional.  
o bien 
El número de elementos de la clase <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary>Obtiene el índice del objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado en <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> si existe en la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que se va a buscar en la colección.</param>
      <returns>Índice del objeto especificado de la colección, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary>Inserta el objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado en el índice especificado de la colección.</summary>
      <param name="index">Índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary>Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> en el índice especificado de la colección.</summary>
      <param name="index">Índice de la colección a la que se obtendrá acceso.</param>
      <returns>Una clase <see cref="T:System.CodeDom.CodeTypeDeclaration" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary>Quita el objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado de la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary>Representa una declaración de delegado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDelegate" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeDelegate" />.</summary>
      <param name="name">Nombre del delegado.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary>Obtiene los parámetros del delegado.</summary>
      <returns>Un objeto <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que indica los parámetros del delegado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary>Obtiene o establece el tipo de valor devuelto por el delegado.</summary>
      <returns>Objeto <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de valor devuelto por el delegado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary>Proporciona una clase base para un miembro de tipo. Los miembros de tipo son campos, métodos, propiedades, constructores y tipos anidados.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary>Obtiene o establece los atributos del miembro.</summary>
      <returns>Una combinación bit a bit de los valores de la enumeración <see cref="T:System.CodeDom.MemberAttributes" /> que se utilizan para indicar los atributos del miembro. El valor predeterminado es <see cref="F:System.CodeDom.MemberAttributes.Private" />.  |  <see cref="F:System.CodeDom.MemberAttributes.Final" /></returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary>Obtiene la colección de comentarios del miembro del tipo.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> que indica los comentarios del miembro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary>Obtiene o establece los atributos personalizados del miembro.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica los atributos personalizados del miembro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary>Obtiene las directivas End para el miembro.</summary>
      <returns>Un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas End.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary>Obtiene o establece la línea en la que se produce la instrucción del miembro del tipo.</summary>
      <returns>Objeto <see cref="T:System.CodeDom.CodeLinePragma" /> que indica la ubicación de la declaración del miembro del tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary>Obtiene o establece el nombre del miembro.</summary>
      <returns>Nombre del miembro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary>Obtiene las directivas Start para el miembro.</summary>
      <returns>Un objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contiene las directivas Start.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary>Representa una colección de objetos <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeMemberCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.CodeDom.CodeTypeMember" /> con los que se inicializará la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> con el que se inicializa la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary>Agrega un objeto <see cref="T:System.CodeDom.CodeTypeMember" /> con el valor especificado a la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMember" /> que se va a agregar.</param>
      <returns>Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary>Copia los elementos de la matriz <see cref="T:System.CodeDom.CodeTypeMember" /> especificada al final de la colección.</summary>
      <param name="value">Matriz de tipo <see cref="T:System.CodeDom.CodeTypeMember" /> que contiene los objetos que se agregarán a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary>Agrega el contenido de otro objeto <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> al final de la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> que contiene los objetos que se agregarán a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary>Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeTypeMember" /> especificado.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMember" /> que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si la colección contiene el objeto especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary>Copia los objetos de colección en una instancia de <see cref="T:System.Array" /> unidimensional, comenzando a partir del índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException">La matriz de destino es multidimensional.  
o bien 
El número de elementos de la clase <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary>Obtiene el índice de la colección del objeto <see cref="T:System.CodeDom.CodeTypeMember" /> especificado, si existe en la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMember" /> que se va a buscar en la colección.</param>
      <returns>Índice de la colección a la que corresponde el objeto especificado, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary>Inserta la clase <see cref="T:System.CodeDom.CodeTypeMember" /> especificada en el índice especificado de la colección.</summary>
      <param name="index">Índice de base cero donde debe insertarse el objeto especificado.</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMember" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary>Obtiene o establece <see cref="T:System.CodeDom.CodeTypeMember" /> en el índice especificado de la colección.</summary>
      <param name="index">Índice de la colección a la que se obtendrá acceso.</param>
      <returns>Una clase <see cref="T:System.CodeDom.CodeTypeMember" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary>Quita una clase <see cref="T:System.CodeDom.CodeTypeMember" /> específica de la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMember" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary>Representa una expresión <see langword="typeof" /> que devuelve <see cref="T:System.Type" /> para un nombre de tipo especificado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeOfExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeOfExpression" />.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos de la expresión <see langword="typeof" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeOfExpression" /> utilizando el tipo especificado.</summary>
      <param name="type">Nombre del tipo de datos de la expresión <see langword="typeof" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeOfExpression" /> utilizando el tipo especificado.</summary>
      <param name="type">Tipo de datos de la expresión <see langword="typeof" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary>Obtiene o establece el tipo de datos al que hace referencia la expresión <see langword="typeof" />.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos al que hace referencia la expresión <see langword="typeof" />. Esta propiedad nunca devolverá el valor <see langword="null" /> y adopta el tipo <see cref="T:System.Void" /> de forma predeterminada.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary>Representa un parámetro de tipo de un método o un tipo genérico.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeParameter" /> con el nombre del parámetro de tipo especificado.</summary>
      <param name="name">El nombre del parámetro de tipo.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary>Obtiene las restricciones del parámetro de tipo.</summary>
      <returns>Un objeto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contiene las restricciones del parámetro de tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary>Obtiene los atributos personalizados del parámetro de tipo.</summary>
      <returns>Una clase <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica los atributos personalizados del parámetro de tipo. De manera predeterminada, es <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary>Obtiene o establece un valor que indica si el parámetro de tipo tiene una restricción de constructor.</summary>
      <returns>
        <see langword="true" /> si el parámetro de tipo tiene una restricción de constructor; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary>Obtiene o establece el nombre del parámetro de tipo.</summary>
      <returns>El nombre del parámetro de tipo. El valor predeterminado es una cadena vacía ("").</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary>Representa una colección de objetos <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary>Inicializa una nueva instancia vacía de la clase <see cref="T:System.CodeDom.CodeTypeParameterCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.CodeDom.CodeTypeParameter" /> con los que se inicializará la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> con el que se inicializa la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary>Agrega a la colección el objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> que se va a agregar.</param>
      <returns>El índice de base cero donde se ha insertado el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary>Agrega el objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado a la colección utilizando el nombre del tipo de datos especificado.</summary>
      <param name="value">Nombre de un tipo de datos para el que se va a agregar el objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> a la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary>Copia los elementos de la matriz <see cref="T:System.CodeDom.CodeTypeParameter" /> especificada al final de la colección.</summary>
      <param name="value">Matriz de tipo <see cref="T:System.CodeDom.CodeTypeParameter" /> que contiene los objetos que se agregarán a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary>Copia los elementos de la colección <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> especificada al final de la colección.</summary>
      <param name="value">Clase <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contiene los objetos <see cref="T:System.CodeDom.CodeTypeParameter" /> que se agregarán a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary>Determina si la colección contiene el objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> que se va a buscar en la colección.</param>
      <returns>
        <see langword="true" /> si la colección contiene el objeto <see cref="T:System.CodeDom.CodeTypeParameter" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary>Copia los elementos de la colección en la matriz (<see cref="T:System.Array" />) unidimensional especificada en el índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es multidimensional.  
o bien 
El número de elementos de <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary>Obtiene el índice que ocupa en la colección el objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado, si existe en la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> que se va a buscar en la colección.</param>
      <returns>El índice de base cero del objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado en la colección, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary>Inserta el objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado en el índice especificado de la colección.</summary>
      <param name="index">Índice de base cero donde se inserta el elemento.</param>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary>Obtiene o establece el objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> en el índice especificado de la colección.</summary>
      <param name="index">Índice de base cero de la colección a la que se obtendrá acceso.</param>
      <returns>Objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> en el índice especificado.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary>Quita el objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado de la colección.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary>Representa una referencia a un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" /> utilizando el parámetro de tipo de código especificado.</summary>
      <param name="typeParameter">Objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> que representa el tipo del parámetro de tipo.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" /> con el tipo de matriz y el rango especificados.</summary>
      <param name="arrayType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de la matriz.</param>
      <param name="rank">Número de dimensiones de la matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" /> con el nombre de tipo especificado.</summary>
      <param name="typeName">Nombre del tipo al que se va a hacer referencia.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" /> utilizando el nombre de tipo y los argumentos de tipo especificados.</summary>
      <param name="typeName">Nombre del tipo al que se va a hacer referencia.</param>
      <param name="typeArguments">Matriz de valores <see cref="T:System.CodeDom.CodeTypeReference" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" /> utilizando el nombre de tipo y la opción de referencia de tipo de código especificados.</summary>
      <param name="typeName">Nombre del tipo al que se va a hacer referencia.</param>
      <param name="codeTypeReferenceOption">Opción de referencia de tipo de código, uno de los valores de <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" /> con el nombre del tipo de matriz y el rango especificados.</summary>
      <param name="baseType">Nombre del tipo de los elementos de la matriz.</param>
      <param name="rank">Número de dimensiones de la matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" /> utilizando el tipo especificado.</summary>
      <param name="type">Objeto <see cref="T:System.Type" /> al que se va a hacer referencia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReference" /> utilizando el tipo y la referencia de tipo de código especificados.</summary>
      <param name="type">Objeto <see cref="T:System.Type" /> al que se va a hacer referencia.</param>
      <param name="codeTypeReferenceOption">Opción de referencia de tipo de código, uno de los valores de <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary>Obtiene o establece el tipo de los elementos de la matriz.</summary>
      <returns>Objeto <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de los elementos de la matriz.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary>Obtiene o establece el rango de matrices de la matriz.</summary>
      <returns>Número de dimensiones de la matriz.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary>Obtiene o establece el nombre del tipo al que se hace referencia.</summary>
      <returns>El nombre del tipo al que se hace referencia.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary>Obtiene o establece la opción de referencia de tipo de código.</summary>
      <returns>Combinación bit a bit de los valores de <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary>Obtiene los argumentos de tipo para la referencia de tipo genérico actual.</summary>
      <returns>Colección <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contiene los argumentos de tipo para el objeto <see cref="T:System.CodeDom.CodeTypeReference" /> actual.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary>Representa una colección de objetos <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.CodeDom.CodeTypeReference" /> con los que se inicializará la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contiene los elementos de la colección de origen especificada.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> con el que se inicializa la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary>Agrega el <see cref="T:System.CodeDom.CodeTypeReference" /> especificado a la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que se va a agregar.</param>
      <returns>Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary>Agrega un objeto <see cref="T:System.CodeDom.CodeTypeReference" /> a la colección con el nombre del tipo de datos especificado.</summary>
      <param name="value">Nombre de un tipo de datos para el que se va a agregar un objeto <see cref="T:System.CodeDom.CodeTypeReference" /> a la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary>Agrega un objeto <see cref="T:System.CodeDom.CodeTypeReference" /> a la colección con el tipo de datos especificado.</summary>
      <param name="value">Tipo de datos para el que se va a agregar un objeto <see cref="T:System.CodeDom.CodeTypeReference" /> a la colección.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary>Copia los elementos de la matriz <see cref="T:System.CodeDom.CodeTypeReference" /> especificada al final de la colección.</summary>
      <param name="value">Matriz de tipo <see cref="T:System.CodeDom.CodeTypeReference" /> que contiene los objetos que se agregarán a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>Agrega el contenido de la clase <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> especificada al final de la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contiene los objetos que se agregarán a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary>Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que se va a buscar en la colección.</param>
      <returns>Es <see langword="true" /> si la colección contiene <see cref="T:System.CodeDom.CodeTypeReference" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary>Copia los elementos de la colección en la matriz (<see cref="T:System.Array" />) unidimensional especificada en el índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados de la colección.</param>
      <param name="index">Índice de la matriz donde debe comenzar la inserción.</param>
      <exception cref="T:System.ArgumentException">El parámetro <paramref name="array" /> es multidimensional.  
o bien 
El número de elementos de la clase <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> es mayor que el espacio disponible entre el índice de la matriz de destino especificada por el parámetro <paramref name="index" /> y el final de la matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que el índice mínimo de la matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary>Obtiene el índice de la colección del objeto <see cref="T:System.CodeDom.CodeTypeReference" /> especificado, si existe en la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que se va a buscar en la colección.</param>
      <returns>El índice del objeto <see cref="T:System.CodeDom.CodeTypeReference" /> especificado en la colección, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary>Inserta un objeto <see cref="T:System.CodeDom.CodeTypeReference" /> en la colección, en el índice especificado.</summary>
      <param name="index">Índice de base cero donde debe insertarse el elemento.</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary>Obtiene o establece <see cref="T:System.CodeDom.CodeTypeReference" /> en el índice especificado de la colección.</summary>
      <param name="index">Índice de la colección a la que se obtendrá acceso.</param>
      <returns>Una clase <see cref="T:System.CodeDom.CodeTypeReference" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> está fuera del intervalo válido de índices de la colección.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary>Quita el <see cref="T:System.CodeDom.CodeTypeReference" /> especificado de la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que se va a quitar de la colección.</param>
      <exception cref="T:System.ArgumentException">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary>Representa una referencia a un tipo de datos.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> utilizando el tipo especificado.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos al que se va a hacer referencia.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> utilizando el nombre del tipo de datos especificado.</summary>
      <param name="type">Nombre del tipo de datos al que se va a hacer referencia.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> utilizando el tipo de datos especificado.</summary>
      <param name="type">Instancia del tipo de datos al que se va a hacer referencia.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary>Obtiene o establece el tipo de datos al que se va a hacer referencia.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos al que se va a hacer referencia.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary>Especifica cómo se va a resolver la referencia de tipo de código.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary>Resuelve el tipo a partir del parámetro de tipo.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary>Resuelve el tipo a partir del espacio de nombres raíz.</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary>Representa una declaración de variable.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> utilizando el tipo y el nombre que se hayan especificado.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos de la variable.</param>
      <param name="name">Nombre de la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> con el tipo de datos, el nombre de variable y la expresión de inicialización que se hayan especificado.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de la variable.</param>
      <param name="name">Nombre de la variable.</param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión de inicialización de la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> utilizando el nombre de tipo de datos y el nombre de variable que se hayan especificado.</summary>
      <param name="type">Nombre del tipo de datos de la variable.</param>
      <param name="name">Nombre de la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> con el tipo de datos, el nombre de variable y la expresión de inicialización que se hayan especificado.</summary>
      <param name="type">Nombre del tipo de datos de la variable.</param>
      <param name="name">Nombre de la variable.</param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión de inicialización de la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> utilizando el tipo de datos y el nombre de variable que se hayan especificado.</summary>
      <param name="type">Tipo de datos de la variable.</param>
      <param name="name">Nombre de la variable.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> con el tipo de datos, el nombre de variable y la expresión de inicialización que se hayan especificado.</summary>
      <param name="type">Tipo de datos de la variable.</param>
      <param name="name">Nombre de la variable.</param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión de inicialización de la variable.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary>Obtiene o establece la expresión de inicialización de la variable.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión de inicialización de la variable.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary>Obtiene o establece el nombre de la variable.</summary>
      <returns>Nombre de la variable.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary>Obtiene o establece el tipo de datos de la variable.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo de datos de la variable.</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary>Representa una referencia a una variable local.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> con el nombre especificado de la variable local.</summary>
      <param name="variableName">Nombre de la variable local a la que se hará referencia.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary>Obtiene o establece el nombre de la variable local a la que se hará referencia.</summary>
      <returns>Nombre de la variable local a la que se hará referencia.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary>Proporciona una implementación de ejemplo de la interfaz <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CodeCompiler" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary>Obtiene los argumentos de comando que se van a pasar al compilador desde el <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> especificado.</summary>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <returns>Argumentos de comando.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary>Obtiene el nombre del ejecutable del compilador.</summary>
      <returns>Nombre del ejecutable del compilador.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary>Obtiene la extensión de archivo que se utilizará en archivos de código fuente.</summary>
      <returns>Extensión de archivo que se utilizará en archivos de código fuente.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Compila la unidad de compilación especificada utilizando las opciones indicadas y devuelve los resultados de la compilación.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="e">Objeto <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica el código fuente que se va a compilar.</param>
      <returns>Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Compila las unidades de compilación especificadas utilizando las opciones indicadas y devuelve los resultados de la compilación.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="ea">Matriz de objetos <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica el código fuente que se va a compilar.</param>
      <returns>Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> es <see langword="null" />.  
O bien 
 <paramref name="ea" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Compila el archivo especificado utilizando las opciones indicadas y devuelve los resultados de la compilación.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="fileName">Nombre del archivo que se va a compilar.</param>
      <returns>Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> es <see langword="null" />.  
o bien 
 <paramref name="fileName" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compila los archivos especificados utilizando las opciones indicadas y devuelve los resultados de la compilación.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="fileNames">Matriz de cadenas que indica los nombres de archivo de los archivos que se van a compilar.</param>
      <returns>Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> es <see langword="null" />.  
O bien 
 <paramref name="fileNames" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Compila la cadena de código fuente especificada utilizando las opciones indicadas y devuelve los resultados de la compilación.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="source">Cadena de código fuente que se va a compilar.</param>
      <returns>Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compila las cadenas del código fuente especificadas utilizando las opciones indicadas y devuelve los resultados de la compilación.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="sources">Matriz de cadenas que contiene el código fuente que se va a compilar.</param>
      <returns>Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> es <see langword="null" />.  
O bien 
 <paramref name="sources" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Obtiene los argumentos de comando que se van a utilizar cuando se invoque al compilador para generar un archivo de respuesta.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="cmdArgs">Cadena de argumentos de comando.</param>
      <returns>Argumentos de comando que se van a utilizar para generar un archivo de respuesta o <see langword="null" /> si no hay argumentos para el archivo de respuesta.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary>Combina las matrices de cadenas especificadas.</summary>
      <param name="sa">Matriz de cadenas que se va a combinar.</param>
      <param name="separator">Separador que se va a utilizar.</param>
      <returns>Cadena concatenada.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary>Procesa la línea especificada de los <see cref="T:System.CodeDom.Compiler.CompilerResults" /> especificados.</summary>
      <param name="results">
        <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</param>
      <param name="line">Línea que se va a procesar.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Para obtener una descripción de este miembro, vea <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="e">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica el código fuente que se va a compilar.</param>
      <returns>Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="ea">Matriz de objetos <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica el código fuente que se va a compilar.</param>
      <returns>Resultados de la compilación.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="fileName">Nombre del archivo que se va a compilar.</param>
      <returns>Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Para obtener una descripción de este miembro, vea <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="fileNames">Matriz de cadenas que indica los nombres de los archivos que se van a compilar.</param>
      <returns>Resultados de la compilación.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="source">Cadena que indica el código fuente que se va a compilar.</param>
      <returns>Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Para una descripción de este miembro, vea <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica las opciones del compilador.</param>
      <param name="sources">Matriz de cadenas que indica el código fuente que se va a compilar.</param>
      <returns>Resultados de la compilación.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary>Proporciona la clase base para las implementaciones de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />. Esta clase es abstracta.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Compila un ensamblado basado en los árboles <see cref="N:System.CodeDom" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeCompileUnit" />, utilizando la configuración del compilador especificada.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
      <param name="compilationUnits">Matriz de tipo <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica el código que se va a compilar.</param>
      <returns>Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
      <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compila un ensamblado a partir del código fuente que contienen los archivos especificados, utilizando la configuración de compilador especificada.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
      <param name="fileNames">Matriz de los nombres de los archivos que se van a compilar.</param>
      <returns>Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
      <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compila un ensamblado basado en la matriz especificada de cadenas que contiene el código fuente, utilizando la configuración del compilador especificada.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de compilador para esta compilación.</param>
      <param name="sources">Matriz de cadenas de código fuente que se van a compilar.</param>
      <returns>Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
      <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary>Cuando se reemplaza en una clase derivada, crea un nuevo compilador de código.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> que puede utilizarse para la compilación de representaciones de código fuente basadas en el espacio de nombres <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary>Crea un identificador de escape para el valor especificado.</summary>
      <param name="value">Cadena para la que se va a crear un identificador de escape.</param>
      <returns>Identificador de escape para el valor.</returns>
      <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary>Cuando se reemplaza en una clase derivada, crea un nuevo generador de código.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> que puede utilizarse para generar representaciones de código fuente basadas en el espacio de nombres <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary>Cuando se reemplaza en una clase derivada, crea un nuevo generador de código utilizando el <see cref="T:System.IO.TextWriter" /> especificado para los resultados.</summary>
      <param name="output">
        <see cref="T:System.IO.TextWriter" /> que se va a utilizar para los resultados.</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> que puede utilizarse para generar representaciones de código fuente basadas en el espacio de nombres <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary>Cuando se reemplaza en una clase derivada, crea un nuevo generador de código utilizando el nombre de archivo especificado para los resultados.</summary>
      <param name="fileName">Nombre del archivo de resultados.</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> que puede utilizarse para generar representaciones de código fuente basadas en el espacio de nombres <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary>Cuando se reemplaza en una clase derivada, crea un nuevo analizador de código.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeParser" /> que puede utilizarse para analizar código fuente. La implementación base siempre devuelve <see langword="null" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary>Obtiene una instancia de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para el lenguaje especificado.</summary>
      <param name="language">Nombre del lenguaje.</param>
      <returns>Proveedor CodeDOM que se implementa para el nombre de lenguaje especificado.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="language" /> no tiene un proveedor configurado en este equipo.</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="language" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Obtiene una instancia de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para el lenguaje y opciones de proveedor especificados.</summary>
      <param name="language">Nombre del lenguaje.</param>
      <param name="providerOptions">Una colección de opciones de proveedor extraídas del archivo de configuración.</param>
      <returns>Un proveedor CodeDOM que se implementa para el nombre del lenguaje y opciones especificados.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary>Crea un identificador válido para el valor especificado.</summary>
      <param name="value">Cadena para la que se va a generar un identificador válido.</param>
      <returns>Identificador válido para el valor especificado.</returns>
      <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary>Obtiene la extensión de archivo predeterminada que se utilizará para los archivos de código fuente en el lenguaje actual.</summary>
      <returns>Extensión de archivo correspondiente a la extensión de los archivos de código fuente del lenguaje actual. La implementación base siempre devuelve <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para la unidad de compilación CodeDOM (Code Document Object Model) especificada y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
      <param name="compileUnit">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> para el que se va a generar código.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
      <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para la expresión CodeDOM (Code Document Object Model) especificada y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
      <param name="expression">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión para la que se va a generar código.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
      <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para la declaración de miembro CodeDOM (Code Document Object Model) especificada y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
      <param name="member">Objeto <see cref="T:System.CodeDom.CodeTypeMember" /> que indica el miembro para el que se va a generar código.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
      <exception cref="T:System.NotImplementedException">Este método no se reemplaza en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para el espacio de nombres CodeDOM (Code Document Object Model) especificado y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
      <param name="codeNamespace">Objeto <see cref="T:System.CodeDom.CodeNamespace" /> que indica el espacio de nombres para el que se va a generar código.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
      <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para la instrucción CodeDOM (Code Document Object Model) especificada y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
      <param name="statement">
        <see cref="T:System.CodeDom.CodeStatement" /> que contiene los elementos CodeDOM para los que se va a generar código.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
      <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para la declaración de tipos CodeDOM (Code Document Object Model) especificada y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
      <param name="codeType">Objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que indica el tipo para el que se va a generar código.</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
      <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary>Devuelve los valores de configuración del proveedor y compilador de lenguaje de este equipo.</summary>
      <returns>Matriz de tipo <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> que representa los valores de configuración de todas las implementaciones de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configuradas.</returns>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary>Devuelve la configuración del proveedor y compilador del lenguaje especificado.</summary>
      <param name="language">Nombre de lenguaje.</param>
      <returns>Objeto <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> que contiene los valores de configuración de la implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurada.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="language" /> no tiene un proveedor configurado en este equipo.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">El valor de <paramref name="language" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary>Obtiene un <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo de datos especificado.</summary>
      <param name="type">Tipo de objeto para el que se recupera un convertidor de tipo.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo especificado o <see langword="null" /> si no se encuentra <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo especificado.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary>Devuelve un nombre de lenguaje asociado a la extensión de nombre de archivo especificada, tal como se define en la sección de configuración del compilador <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
      <param name="extension">Extensión de nombre de archivo.</param>
      <returns>Nombre de lenguaje asociado a la extensión de nombre de archivo, tal como se define en la configuración del compilador <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="extension" /> no tiene un proveedor de lenguaje configurado en este equipo.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">El valor de <paramref name="extension" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Obtiene el tipo indicado por el <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo que se va a devolver.</param>
      <returns>Representación de texto del tipo especificado, con el formato que corresponde al lenguaje en el que este generador de código genera el código. En Visual Basic, por ejemplo, al pasar <see cref="T:System.CodeDom.CodeTypeReference" /> para el tipo <see cref="T:System.Int32" />, se devolverá "Integer".</returns>
      <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary>Comprueba si una extensión de nombre de archivo tiene configurada una implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> asociada en el equipo.</summary>
      <param name="extension">Extensión de nombre de archivo.</param>
      <returns>Es <see langword="true" /> si se ha configurado una implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para la extensión de nombre de archivo especificada; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="extension" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary>Comprueba si un lenguaje tiene una implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurada en el equipo.</summary>
      <param name="language">Nombre del lenguaje.</param>
      <returns>Es <see langword="true" /> si se ha configurado una implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para el lenguaje especificado; de lo contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="language" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary>Devuelve un valor que indica si el valor especificado es un identificador válido para el lenguaje actual.</summary>
      <param name="value">Valor que se va a comprobar como identificador válido.</param>
      <returns>Es <see langword="true" /> si el parámetro <paramref name="value" /> es un identificador válido; en caso contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary>Obtiene un identificador de características de lenguaje.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> que indica las características especiales del lenguaje.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary>Compila en <see cref="T:System.CodeDom.CodeCompileUnit" /> el código leído de la secuencia de texto especificada.</summary>
      <param name="codeStream">Objeto <see cref="T:System.IO.TextReader" /> que se utiliza para leer el código que se va a analizar.</param>
      <returns>Un objeto <see cref="T:System.CodeDom.CodeCompileUnit" /> que contiene una representación del código analizado.</returns>
      <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Devuelve un valor que indica si se proporciona la compatibilidad especificada para la generación de código.</summary>
      <param name="generatorSupport">Objeto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> que indica el tipo de compatibilidad para generación de código que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si se proporciona la compatibilidad de generación de código especificada; en caso contrario, es <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary>Proporciona una implementación de ejemplo de la interfaz <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />. Esta clase es abstracta.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CodeGenerator" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary>Genera un carácter de continuación de línea y envía la cadena especificada a una nueva línea.</summary>
      <param name="st">Cadena que se va a escribir en la línea nueva.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>Crea un identificador de escape para el valor especificado.</summary>
      <param name="value">Cadena para crear un identificador de escape.</param>
      <returns>Identificador de escape para el valor.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary>Crea un identificador válido para el valor especificado.</summary>
      <param name="value">Cadena para crear un identificador válido.</param>
      <returns>Identificador válido para el valor.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary>Obtiene la declaración de tipos de código para la clase actual.</summary>
      <returns>Declaración de tipos de código para la clase actual.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary>Obtiene el miembro actual de la clase.</summary>
      <returns>Miembro actual de la clase.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary>Obtiene el nombre del miembro actual.</summary>
      <returns>Nombre del miembro actual.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary>Obtiene el nombre de la clase actual.</summary>
      <returns>Nombre de la clase actual.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary>Genera código para la expresión de referencia de argumento especificada.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> que indica la expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary>Genera código para la expresión de creación de matrices especificada.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> que indica la expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary>Genera código para la expresión de indizador de matrices especificada.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> que indica la expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary>Genera código para la instrucción de asignación especificada.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeAssignStatement" /> que indica la instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary>Genera código para la instrucción especificada de eventos relacionados.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeAttachEventStatement" /> que indica la instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Genera código para el final del bloque de atributos especificado.</summary>
      <param name="attributes">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica el final del bloque de atributos para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Genera código para el inicio del bloque de atributos especificado.</summary>
      <param name="attributes">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica el inicio del bloque de atributos para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary>Genera código para la expresión de referencia base especificada.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> que indica la expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary>Genera código para la expresión de operador binario especificada.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> que indica la expresión para la que se va a generar código.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary>Genera código para la expresión de conversión especificada.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeCastExpression" /> que indica la expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para el miembro de clase especificado usando las opciones del generador de código y el programa de escritura de texto especificados.</summary>
      <param name="member">Miembro de clase para el que se va a generar código.</param>
      <param name="writer">Escritor de texto que recibe la salida de código.</param>
      <param name="options">Opciones que se utilizarán cuando se genere el código.</param>
      <exception cref="T:System.InvalidOperationException">La propiedad <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> no es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary>Genera código para el comentario especificado.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeComment" /> para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary>Genera código para la instrucción de comentario especificada.</summary>
      <param name="e">Instrucción para la que se va a generar código.</param>
      <exception cref="T:System.ArgumentException">La propiedad <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> de <paramref name="e" /> no está establecida.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Genera código para las instrucciones de comentarios especificadas.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>Genera código para la unidad de compilación especificada.</summary>
      <param name="e">Unidad de compilación para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary>Genera código para el final de una unidad de compilación.</summary>
      <param name="e">Unidad de compilación para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary>Genera código para el inicio de una unidad de compilación.</summary>
      <param name="e">Unidad de compilación para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary>Genera código para la instrucción condicional especificada.</summary>
      <param name="e">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary>Genera código para el constructor especificado.</summary>
      <param name="e">Constructor para el que se va a generar código.</param>
      <param name="c">Tipo del objeto que construye este constructor.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary>Genera código para el valor decimal especificado.</summary>
      <param name="d">Valor decimal para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary>Genera código para la referencia especificada a un valor predeterminado.</summary>
      <param name="e">Referencia para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary>Genera código para la expresión de creación de delegado especificada.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary>Genera código para la expresión de invocación de delegado especificada.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary>Genera código para la expresión de dirección especificada.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary>Genera código para las directivas de código especificadas.</summary>
      <param name="directives">Directivas de código para las que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary>Genera código para un número de punto flotante de precisión doble.</summary>
      <param name="d">Valor para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>Genera código para el método de punto de entrada especificado.</summary>
      <param name="e">Punto de entrada del código.</param>
      <param name="c">Código que declara el tipo.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary>Genera código para el evento especificado.</summary>
      <param name="e">Evento de miembro para el que se va generar código.</param>
      <param name="c">Tipo del objeto en el que se produce este evento.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary>Genera código para la expresión de referencia de evento especificada.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary>Genera código para la expresión de código especificada.</summary>
      <param name="e">Expresión de código para la que se va a generar código.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> no es un <see cref="T:System.CodeDom.CodeStatement" /> válido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary>Genera código para la instrucción de expresión especificada.</summary>
      <param name="e">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary>Genera código para el campo de miembro especificado.</summary>
      <param name="e">Campo para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary>Genera código para la expresión de referencia de campo especificada.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary>Genera código para la instrucción <see langword="goto" /> especificada.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary>Genera código para la expresión de indizador especificada.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary>Genera código para la instrucción de iteración especificada.</summary>
      <param name="e">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary>Genera código para la instrucción con etiqueta especificada.</summary>
      <param name="e">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary>Genera código para el final de línea pragma especificado.</summary>
      <param name="e">Final de línea pragma para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary>Genera código para el inicio de línea pragma especificado.</summary>
      <param name="e">Inicio de línea pragma para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>Genera código para el método especificado.</summary>
      <param name="e">Método de miembro para el que se va a generar código.</param>
      <param name="c">Tipo del objeto en el que se ejecuta este método.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary>Genera código para la expresión de invocación de método especificada.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary>Genera código para la expresión de referencia de método especificada.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary>Genera código para la instrucción return de método especificada.</summary>
      <param name="e">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary>Genera código para el espacio de nombres especificado.</summary>
      <param name="e">Espacio de nombres para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary>Genera código para el final de un espacio de nombres.</summary>
      <param name="e">Espacio de nombres para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary>Genera código para la importación de espacio de nombres especificada.</summary>
      <param name="e">Importación de espacio de nombres para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary>Genera código para la importación de espacio de nombres especificada.</summary>
      <param name="e">Importación de espacio de nombres para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary>Genera código para el espacio de nombres en la unidad de compilación especificada.</summary>
      <param name="e">Unidad de compilación para la que se van a generar espacios de nombres.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary>Genera código para el inicio de un espacio de nombres.</summary>
      <param name="e">Espacio de nombres para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary>Genera código para la expresión de creación de objeto especificada.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Genera código para la expresión de declaración de parámetros especificada.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary>Genera código para la expresión primitiva especificada.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> utiliza un tipo de datos no válido. Sólo los tipos de datos siguientes son válidos: 

string 
char 
byte 
Int16 
Int32 
Int64 
Single 
Double 
Decimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary>Genera código para la propiedad especificada.</summary>
      <param name="e">Propiedad para la que se va a generar código.</param>
      <param name="c">Tipo del objeto en el que tiene lugar esta propiedad.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary>Genera código para la expresión de referencia de propiedad especificada.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary>Genera código para la expresión de referencia especificada del valor del conjunto de propiedades.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary>Genera código para la instrucción de eliminación de evento especificada.</summary>
      <param name="e">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary>Genera código para un número de punto flotante de precisión sencilla.</summary>
      <param name="s">Valor para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary>Proporciona el código de la unidad de compilación de fragmento de código literal que se especifique.</summary>
      <param name="e">Unidad de compilación de fragmento de código literal para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary>Proporciona los resultados relacionados con el código de la expresión de fragmento de código literal que se especifique.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary>Proporciona los resultados relacionados con el código del miembro de clase de fragmento de código literal que se especifique.</summary>
      <param name="e">Miembro para el que se va generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary>Proporciona los resultados relacionados con el código de la instrucción de fragmento de código literal que se especifique.</summary>
      <param name="e">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary>Genera código para la instrucción especificada.</summary>
      <param name="e">Instrucción para la que se va a generar código.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> no es un <see cref="T:System.CodeDom.CodeStatement" /> válido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary>Genera código para la colección de instrucciones especificada.</summary>
      <param name="stms">Instrucciones para las que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary>Genera código para la expresión de referencia especificada.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary>Genera código para la instrucción de producción de excepción especificada.</summary>
      <param name="e">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary>Genera código para la instrucción <see langword="try...catch...finally" /> especificada.</summary>
      <param name="e">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary>Genera código para el constructor de clase especificado.</summary>
      <param name="e">Constructor de clase para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary>Genera código para el final de la clase especificado.</summary>
      <param name="e">Final de la clase para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary>Genera código para el tipo de expresión especificado.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary>Genera código para la expresión de referencia de tipo especificada.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary>Genera código para el espacio de nombres especificado y para las clases que contiene.</summary>
      <param name="e">Espacio de nombres para el que se van a generar clases.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary>Genera código para el inicio especificado de la clase.</summary>
      <param name="e">Inicio de la clase para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary>Genera código para la instrucción de declaración de variables especificada.</summary>
      <param name="e">Instrucción para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary>Genera código para la expresión de referencia de variable especificada.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Obtiene el nombre del tipo de datos especificado.</summary>
      <param name="value">Tipo cuyo nombre se devolverá.</param>
      <returns>Nombre de la referencia de tipo de datos.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary>Obtiene o establece los espacios que se van a aplicar a cada nivel de sangría.</summary>
      <returns>Número de espacios donde aplicar una sangría a cada nivel de sangría.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary>Obtiene un valor que indica si el objeto que se está generando en la actualidad es una clase.</summary>
      <returns>Es <see langword="true" /> si el objeto actual es una clase; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary>Obtiene un valor que indica si el objeto que se está generando en la actualidad es un delegado.</summary>
      <returns>Es <see langword="true" /> si el objeto actual es un delegado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary>Obtiene un valor que indica si el objeto que se está generando en la actualidad es una enumeración.</summary>
      <returns>Es <see langword="true" /> si el objeto actual es una enumeración; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary>Obtiene un valor que indica si el objeto que se está generando en la actualidad es una interfaz.</summary>
      <returns>Es <see langword="true" /> si el objeto actual es una interfaz; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary>Obtiene un valor que indica si el objeto que se está generando en la actualidad es un tipo de valor o struct.</summary>
      <returns>Es <see langword="true" /> si el objeto actual es un tipo de valor o struct; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary>Obtiene un valor que indica si el valor especificado es un identificador válido.</summary>
      <param name="value">Valor que hay que comprobar para ver si existen conflictos con identificadores válidos.</param>
      <returns>
        <see langword="true" /> si el valor es un identificador válido; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary>Obtiene un valor que indica si la cadena especificada es un identificador válido.</summary>
      <param name="value">Cadena que hay que comprobar para ver si es válida.</param>
      <returns>Es <see langword="true" /> si la cadena especificada es un identificador válido; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary>Obtiene el token que representa <see langword="null" />.</summary>
      <returns>Token que representa <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary>Obtiene las opciones que va a utilizar el generador de código.</summary>
      <returns>Objeto que indica las opciones que va a utilizar el generador de código.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary>Obtiene el escritor de texto que se va a utilizar para la salida.</summary>
      <returns>Escritor de texto que se va a utilizar para la salida.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary>Devuelve un argumento dentro de un bloque de atributos.</summary>
      <param name="arg">Argumento de atributo para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Genera código para la colección de declaraciones de atributos especificada.</summary>
      <param name="attributes">Atributos para los que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary>Genera código para el <see cref="T:System.CodeDom.FieldDirection" /> especificado.</summary>
      <param name="dir">Uno de los valores de enumeración que indica el atributo del campo.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary>Genera código para la lista de expresiones especificada.</summary>
      <param name="expressions">Expresiones para las que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary>Genera código para la lista de expresiones especificada.</summary>
      <param name="expressions">Expresiones para las que se va a generar código.</param>
      <param name="newlineBetweenItems">
        <see langword="true" /> para insertar una línea nueva después de cada elemento; de lo contrario, <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>Devuelve un modificador de ámbito de campo que se corresponde con los atributos especificados.</summary>
      <param name="attributes">Uno de los valores de enumeración que especifica los atributos.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary>Devuelve el identificador especificado.</summary>
      <param name="ident">Identificador que se va a devolver.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary>Genera código para el modificador de acceso de miembro especificado.</summary>
      <param name="attributes">Uno de los valores de enumeración que indica el modificador de acceso de miembro para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>Genera código para el modificador de ámbito de miembro especificado.</summary>
      <param name="attributes">Uno de los valores de enumeración que indica el modificador de ámbito de miembro para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary>Genera código para el operador especificado.</summary>
      <param name="op">Operador para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Genera código para los parámetros especificados.</summary>
      <param name="parameters">Expresiones de declaración de parámetros para las que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary>Genera código para el tipo especificado.</summary>
      <param name="typeRef">Tipo para el que se va a generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary>Genera código para los atributos de tipo especificados.</summary>
      <param name="attributes">Uno de los valores de enumeración que indica los atributos de tipo para los que se va a generar código.</param>
      <param name="isStruct">Es <see langword="true" /> si el tipo es un struct; en caso contrario, es <see langword="false" />.</param>
      <param name="isEnum">Es <see langword="true" /> si el tipo es una enumeración; en caso contrario, es <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Genera código para el par de tipo y nombre de objeto especificado.</summary>
      <param name="typeRef">Tipo.</param>
      <param name="name">Nombre para el objeto.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary>Convierte la cadena especificada dándole formato con códigos de escape.</summary>
      <param name="value">Cadena que se va a convertir.</param>
      <returns>Cadena convertida.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Obtiene un valor que indica si se proporciona la compatibilidad de generación de código especificada.</summary>
      <param name="support">Tipo de compatibilidad de generación de código que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si se proporciona la compatibilidad de generación de código especificada; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary>Crea un identificador de escape para el valor especificado.</summary>
      <param name="value">Cadena para crear un identificador de escape.</param>
      <returns>Identificador de escape para el valor.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary>Crea un identificador válido para el valor especificado.</summary>
      <param name="value">Cadena para generar un identificador válido.</param>
      <returns>Identificador válido para el valor especificado.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para la unidad de compilación de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado mediante las opciones especificadas.</summary>
      <param name="e">Unidad de compilación CodeDOM para la que se va a generar código.</param>
      <param name="w">Escritor de texto que recibe la salida de código.</param>
      <param name="o">Opciones que se van a usar para generar código.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> no está disponible. <paramref name="w" /> se puede haber cerrado antes de realiza la llamada al método.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para la expresión de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado.</summary>
      <param name="e">Expresión para la que se va a generar código.</param>
      <param name="w">Escritor de texto que recibe la salida de código.</param>
      <param name="o">Opciones que se van a usar para generar código.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> no está disponible. <paramref name="w" /> se puede haber cerrado antes de realiza la llamada al método.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para el espacio de nombres de Code Document Object Model (CodeDOM) especificado y lo envía al escritor de texto especificado mediante las opciones especificadas.</summary>
      <param name="e">Espacio de nombres para el que se va a generar código.</param>
      <param name="w">Escritor de texto que recibe la salida de código.</param>
      <param name="o">Opciones que se van a usar para generar código.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> no está disponible. <paramref name="w" /> se puede haber cerrado antes de realiza la llamada al método.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para la instrucción de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado mediante las opciones especificadas.</summary>
      <param name="e">Instrucción que contiene los elementos CodeDOM que se van a traducir.</param>
      <param name="w">Escritor de texto que recibe la salida de código.</param>
      <param name="o">Opciones que se van a usar para generar código.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> no está disponible. <paramref name="w" /> se puede haber cerrado antes de realiza la llamada al método.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para la declaración de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado mediante las opciones especificadas.</summary>
      <param name="e">Tipo para el que se va a generar código.</param>
      <param name="w">Escritor de texto que recibe la salida de código.</param>
      <param name="o">Opciones que se van a usar para generar código.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> no está disponible. <paramref name="w" /> se puede haber cerrado antes de realiza la llamada al método.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Obtiene el tipo indicado por el <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
      <param name="type">Tipo que se devuelve.</param>
      <returns>Nombre de la referencia de tipo de datos.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary>Obtiene un valor que indica si el valor especificado es un identificador válido para el lenguaje actual.</summary>
      <param name="value">Valor que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si el parámetro <paramref name="value" /> es un identificador válido; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Obtiene un valor que indica si el generador proporciona compatibilidad para las características de lenguaje representadas por el objeto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> especificado.</summary>
      <param name="support">Características para las que se va a comprobar el generador.</param>
      <returns>Es <see langword="true" /> si se admiten las funciones especificadas; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary>Provoca una excepción si el valor especificado no es un identificador válido.</summary>
      <param name="value">El identificador que se debe validar.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary>Inicia una excepción si la cadena especificada no es un identificador válido.</summary>
      <param name="value">Identificador que hay que comprobar si es válido como tal.</param>
      <exception cref="T:System.ArgumentException">Si el identificador especificado no es válido o se producen conflictos con palabras clave o reservadas del lenguaje.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary>Intenta validar cada campo identificador que está dentro del <see cref="T:System.CodeDom.CodeObject" /> o árbol <see cref="N:System.CodeDom" /> especificados.</summary>
      <param name="e">Objeto que se someterá a pruebas en busca de identificadores no válidos.</param>
      <exception cref="T:System.ArgumentException">El <see cref="T:System.CodeDom.CodeObject" /> especificado contiene un identificador no válido.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary>Representa un conjunto de opciones utilizadas por un generador de código.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary>Obtiene o establece un valor que indica si deben insertarse líneas en blanco entre miembros.</summary>
      <returns>
        <see langword="true" /> si deben insertarse líneas en blanco; en caso contrario, <see langword="false" />. De forma predeterminada, el valor de esta propiedad es <see langword="true" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary>Obtiene o establece el estilo que se va a utilizar para insertar llaves.</summary>
      <returns>Cadena que contiene el estilo de inserción de llaves que se va a utilizar.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary>Obtiene o establece un valor que indica si hay que agregar un bloque <see langword="else" />, <see langword="catch" /> o <see langword="finally" />, incluido entre llaves, en la línea de cierre de cada bloque <see langword="if" /> o <see langword="try" /> anterior.</summary>
      <returns>
        <see langword="true" /> si hay que agregar un bloque else; en caso contrario, <see langword="false" />. El valor predeterminado de esta propiedad es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary>Obtiene o establece la cadena que se va a utilizar para aplicar sangrías.</summary>
      <returns>Cadena que contiene los caracteres que se van a utilizar para aplicar sangrías.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary>Obtiene o establece el objeto que se encuentra en el índice especificado.</summary>
      <param name="index">Nombre asociado con el objeto que se va a recuperar.</param>
      <returns>Objeto asociado con el nombre especificado. Si no existe ningún objeto asociado al nombre especificado en la colección, es <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary>Obtiene o establece un valor que indica si se generan los miembros en el orden en el que aparecen en las colecciones de miembros.</summary>
      <returns>Es <see langword="true" /> para generar los miembros en el orden en el que aparecen en la colección de miembros; de lo contrario, es <see langword="false" />. El valor predeterminado de esta propiedad es <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary>Proporciona una implementación vacía de la interfaz <see cref="T:System.CodeDom.Compiler.ICodeParser" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CodeParser" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary>Compila la secuencia de texto especificada en <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream">
        <see cref="T:System.IO.TextReader" /> que se utiliza para leer el código que se va a analizar.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeCompileUnit" />que contiene el modelo de código que se produce a partir del análisis del código.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary>Representa una advertencia o un error del compilador.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerError" /> que utiliza el nombre de archivo, línea, columna, número de error y texto de error especificados.</summary>
      <param name="fileName">Nombre de archivo del archivo que el compilador estaba compilando cuando se produjo el error.</param>
      <param name="line">Línea del origen del error.</param>
      <param name="column">Columna del origen del error.</param>
      <param name="errorNumber">Número del error.</param>
      <param name="errorText">Texto del mensaje de error.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary>Obtiene o establece el número de columna donde se produce el origen del error.</summary>
      <returns>Número de columna del archivo de código fuente donde el compilador detectó el error.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary>Obtiene o establece el número de error.</summary>
      <returns>Número de error en forma de cadena.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary>Obtiene o establece el texto del mensaje de error.</summary>
      <returns>Texto del mensaje de error.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary>Obtiene o establece el nombre del archivo de código fuente que contiene el código que provocó el error.</summary>
      <returns>Nombre del archivo de código fuente que contiene el código que provocó el error.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary>Obtiene o establece un valor que indica si el error es una advertencia.</summary>
      <returns>
        <see langword="true" /> si el error es una advertencia; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary>Obtiene o establece el número de línea donde se produce el origen del error.</summary>
      <returns>Número de línea del archivo de código fuente donde el compilador detectó el error.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary>Proporciona una implementación del método <see cref="M:System.Object.ToString" /> de Object.</summary>
      <returns>Una representación de cadena del error del compilador.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary>Representa una colección de objetos <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary>Inicializa una nueva instancia de <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
      <param name="value">Matriz de objetos <see cref="T:System.CodeDom.Compiler.CompilerError" /> con los que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> que incluye el contenido de la clase <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> especificada.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> con el que se inicializa la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary>Agrega el objeto <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado a la colección de errores.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.Compiler.CompilerError" /> que se agrega.</param>
      <returns>Índice donde se insertó el nuevo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary>Copia los elementos de una matriz al final de la colección de errores.</summary>
      <param name="value">Matriz de tipo <see cref="T:System.CodeDom.Compiler.CompilerError" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Agrega el contenido de la colección de errores del compilador especificada al final de la colección de errores.</summary>
      <param name="value">Objeto <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> que contiene los objetos que se van a agregar a la colección.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary>Obtiene un valor que indica si la colección contiene el objeto <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado.</summary>
      <param name="value">Clase <see cref="T:System.CodeDom.Compiler.CompilerError" /> que se va a localizar.</param>
      <returns>Es <see langword="true" /> si la colección contiene <see cref="T:System.CodeDom.Compiler.CompilerError" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary>Copia los valores de la colección en una instancia <see cref="T:System.Array" /> unidimensional en el índice especificado.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los valores copiados desde la clase <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
      <param name="index">Índice de la matriz donde se va a comenzar a copiar.</param>
      <exception cref="T:System.ArgumentException">La matriz indicada por el parámetro <paramref name="array" /> es multidimensional.  
O bien 
El número de elementos de <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> es mayor que el espacio disponible entre el valor de índice del parámetro <paramref name="arrayIndex" /> en la matriz indicada por el parámetro <paramref name="array" /> y el final de la matriz indicada por el parámetro <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que el límite inferior de la matriz indicada por el parámetro <paramref name="array" />.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary>Obtiene un valor que indica si la colección contiene errores.</summary>
      <returns>
        <see langword="true" /> si la colección contiene errores; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary>Obtiene un valor que indica si la colección contiene advertencias.</summary>
      <returns>
        <see langword="true" /> si la colección contiene advertencias; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary>Obtiene el índice del objeto <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado en la colección, si existe en la colección.</summary>
      <param name="value">Clase <see cref="T:System.CodeDom.Compiler.CompilerError" /> que se va a localizar.</param>
      <returns>Índice de <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado en <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary>Inserta la clase <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificada en el índice especificado de la colección.</summary>
      <param name="index">Índice de base cero donde debe insertarse el error del compilador.</param>
      <param name="value">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> que se va a insertar.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary>Obtiene o establece la clase <see cref="T:System.CodeDom.Compiler.CompilerError" /> en el índice especificado.</summary>
      <param name="index">Índice de base cero de la entrada que se va a localizar en la colección.</param>
      <returns>Una clase <see cref="T:System.CodeDom.Compiler.CompilerError" /> en cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de índice indicado por el parámetro <paramref name="index" /> se encuentra fuera del intervalo de índices válido para la colección.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary>Quita una clase <see cref="T:System.CodeDom.Compiler.CompilerError" /> específica de la colección.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> que se va a quitar de <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
      <exception cref="T:System.ArgumentException">No se encuentra el objeto especificado en la colección.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary>Representa los valores de configuración de un proveedor de lenguaje. Esta clase no puede heredarse.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary>Obtiene el tipo de la implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurada.</summary>
      <returns>Una instancia de <see cref="T:System.Type" /> de sólo lectura que representa el tipo de proveedor de lenguaje configurado.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">El proveedor de lenguaje no está configurado en este equipo.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">No se pueda encontrar el tipo porque es un valor <see langword="null" /> o una cadena vacía.  
O bien 
No se puede encontrar el tipo porque el nombre de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> no se puede encontrar en el archivo de configuración.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary>Obtiene los valores del compilador configurado para la implementación del proveedor de lenguaje.</summary>
      <returns>Una instancia de <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> de sólo lectura que contiene las opciones y valores del compilador configurados para el proveedor de lenguaje.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary>Devuelve una instancia de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para la configuración del proveedor de lenguaje actual.</summary>
      <returns>Proveedor CodeDOM asociado a la configuración del proveedor de lenguaje.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Devuelve una instancia de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para la configuración del proveedor de lenguaje actual y las opciones especificadas.</summary>
      <param name="providerOptions">Una colección de opciones de proveedor extraídas del archivo de configuración.</param>
      <returns>Un proveedor CodeDOM asociado a la configuración de proveedor de lenguaje y a las opciones especificadas.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">El proveedor no admite opciones.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary>Determina si el objeto especificado representa la misma configuración del compilador y del proveedor de lenguaje que el objeto <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> actual.</summary>
      <param name="o">Objeto que se va a comparar con el objeto <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> actual.</param>
      <returns>
        <see langword="true" /> si <paramref name="o" /> es un objeto <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> y tiene el mismo valor que la instancia en cuestión; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary>Devuelve las extensiones de nombre de archivo admitidas por el proveedor de lenguaje.</summary>
      <returns>Una matriz de extensiones de nombre de archivo admitidas por el proveedor de lenguaje.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary>Devuelve el código hash de la instancia actual.</summary>
      <returns>Un código hash de un entero de 32 bits con signo para la instancia actual de <see cref="T:System.CodeDom.Compiler.CompilerInfo" />, adecuado para su utilización en estructuras de datos y algoritmos hash tales como una tabla hash.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary>Obtiene los nombres de lenguajes admitidos por el proveedor de lenguaje.</summary>
      <returns>Una matriz de nombres de lenguajes admitidos por el proveedor de lenguaje.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary>Devuelve un valor que indica si la implementación del proveedor de lenguaje está configurada en el equipo.</summary>
      <returns>Es <see langword="true" /> si el tipo de implementación del proveedor de lenguaje está configurado en el equipo; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary>Representa los parámetros utilizados para invocar a un compilador.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerParameters" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> con los nombres de ensamblado especificados.</summary>
      <param name="assemblyNames">Nombres de los ensamblados a los que hay que hacer referencia.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> con los nombres de ensamblado y el nombre del archivo de salida especificados.</summary>
      <param name="assemblyNames">Nombres de los ensamblados a los que hay que hacer referencia.</param>
      <param name="outputName">Nombre del archivo de salida.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> con los nombres de ensamblado y el nombre de los resultados especificados, y un valor que indica si se va a incluir información de depuración.</summary>
      <param name="assemblyNames">Nombres de los ensamblados a los que hay que hacer referencia.</param>
      <param name="outputName">Nombre del archivo de salida.</param>
      <param name="includeDebugInformation">
        <see langword="true" /> para incluir información de depuración; <see langword="false" /> para excluir la información de depuración.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary>Obtiene o establece los argumentos de la línea de comandos opcionales que se utilizará al invocar al compilador.</summary>
      <returns>Otros argumentos de la línea de comandos adicionales para el compilador.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary>Obtiene o establece el nombre del ensamblado principal o estándar que contiene tipos básicos como <see cref="T:System.Object" />, <see cref="T:System.String" /> o <see cref="T:System.Int32" />.</summary>
      <returns>Nombre del ensamblado central que contiene tipos básicos.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary>Obtiene los archivos de recursos de .NET Framework que se van a incluir al compilar el ensamblado resultante.</summary>
      <returns>Colección que contiene las rutas de acceso del archivo de recursos de .NET Framework que se van a incluir en el ensamblado generado.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary>Obtiene o establece un valor que indica si debe generarse un ejecutable.</summary>
      <returns>Es <see langword="true" /> si debe generarse un ejecutable; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary>Obtiene o establece un valor que indica si los resultados deben generarse en memoria.</summary>
      <returns>Es <see langword="true" /> si el compilador debe generar los resultados en memoria; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary>Obtiene o establece un valor que indica si debe incluirse información de depuración en el ejecutable compilado.</summary>
      <returns>Es <see langword="true" /> si debe generarse información de depuración; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary>Obtiene los archivos de recursos de .NET Framework a los que se hace referencia en el código fuente actual.</summary>
      <returns>Colección que contiene las rutas de acceso al archivo de recursos de .NET Framework a los que se hace referencia en el código fuente.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary>Obtiene o establece el nombre de la clase principal.</summary>
      <returns>Nombre de la clase principal.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary>Obtiene o establece el nombre del ensamblado resultante.</summary>
      <returns>Nombre del ensamblado resultante.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary>Obtiene los ensamblados a los que hace referencia el proyecto actual.</summary>
      <returns>Colección que contiene los nombres de ensamblado a los que hace referencia el código fuente que se va a compilar.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary>Obtiene o establece la colección que contiene los archivos temporales.</summary>
      <returns>Colección que contiene los archivos temporales.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary>Obtiene o establece un valor que indica si las advertencias deben tratarse como si fueran errores.</summary>
      <returns>Es <see langword="true" /> si las advertencias deben tratarse como errores; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary>Obtiene o establece el token de usuario que se utilizará al crear el proceso compilador.</summary>
      <returns>Token de usuario que se utilizará.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary>Obtiene o establece el nivel de advertencia en el que el compilador anula la compilación.</summary>
      <returns>Nivel de advertencia en el que el compilador anula la compilación.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary>Obtiene o establece el nombre de archivo de recursos de Win32 que se va a vincular al ensamblado compilado.</summary>
      <returns>Archivo de recursos de Win32 que se vinculará al ensamblado compilado.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary>Representa los resultados de la compilación devueltos desde un compilador.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que utiliza los archivos temporales especificados.</summary>
      <param name="tempFiles">Un <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con el que administrar y almacenar referencias en archivos intermedios generados durante la compilación.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary>Obtiene o establece el ensamblado compilado.</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" /> que indica el ensamblado compilado.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary>Obtiene la colección de errores y advertencias del compilador.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> que indica los errores y las advertencias resultantes de la compilación, si los hubiera.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary>Obtiene o establece el valor devuelto del compilador.</summary>
      <returns>Valor devuelto del compilador.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary>Obtiene los mensajes de salida del compilador.</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.StringCollection" /> que contiene los mensajes de salida.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary>Obtiene o establece la ruta de acceso del ensamblado compilado.</summary>
      <returns>La ruta de acceso del ensamblado, o <see langword="null" /> si el ensamblado se generó en memoria.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary>Obtiene o establece la colección de archivos temporales que se va utilizar.</summary>
      <returns>Un <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con el que administrar y almacenar referencias en archivos intermedios generados durante la compilación.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary>Proporciona funciones de ejecución de comandos para invocar a compiladores. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary>Ejecuta el comando utilizando los archivos temporales especificados y espera a que vuelva la llamada.</summary>
      <param name="cmd">Comando que se va a ejecutar.</param>
      <param name="tempFiles">Un <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con el que administrar y almacenar referencias en archivos intermedios generados durante la compilación.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Ejecuta el comando especificado utilizando el token de usuario y los archivos temporales especificados y espera a que vuelva la llamada, almacenando los resultados y la información de los errores del compilador en las cadenas especificadas.</summary>
      <param name="userToken">Token con el que comenzar el proceso del compilador.</param>
      <param name="cmd">Comando que se va a ejecutar.</param>
      <param name="tempFiles">Un <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con el que administrar y almacenar referencias en archivos intermedios generados durante la compilación.</param>
      <param name="outputName">Referencia a una cadena que almacenará los resultados del mensaje del compilador.</param>
      <param name="errorName">Referencia a una cadena que almacenará el nombre de los errores encontrados.</param>
      <returns>Valor devuelto del compilador.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Ejecuta el comando especificado utilizando el token de usuario, el directorio actual y los archivos temporales especificados; a continuación, espera a que vuelva la llamada, almacenando los resultados del compilador en las cadenas especificadas.</summary>
      <param name="userToken">Token con el que comenzar el proceso del compilador.</param>
      <param name="cmd">Comando que se va a ejecutar.</param>
      <param name="currentDir">Directorio en el que va a comenzar el proceso.</param>
      <param name="tempFiles">Un <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con el que administrar y almacenar referencias en archivos intermedios generados durante la compilación.</param>
      <param name="outputName">Referencia a una cadena que almacenará los resultados del mensaje del compilador.</param>
      <param name="errorName">Referencia a una cadena que almacenará el nombre de los errores encontrados.</param>
      <returns>Valor devuelto del compilador.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Ejecuta el comando especificado utilizando los archivos temporales especificados y espera a que vuelva la llamada, almacenando los resultados y la información de los errores del compilador en las cadenas especificadas.</summary>
      <param name="cmd">Comando que se va a ejecutar.</param>
      <param name="tempFiles">Un <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con el que administrar y almacenar referencias en archivos intermedios generados durante la compilación.</param>
      <param name="outputName">Referencia a una cadena que almacenará los resultados del mensaje del compilador.</param>
      <param name="errorName">Referencia a una cadena que almacenará el nombre de los errores encontrados.</param>
      <returns>Valor devuelto del compilador.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Ejecuta el comando especificado utilizando los archivos temporales y el directorio actual especificados y espera a que vuelva la llamada, almacenando los resultados y la información de los errores del compilador en las cadenas especificadas.</summary>
      <param name="cmd">Comando que se va a ejecutar.</param>
      <param name="currentDir">El directorio actual.</param>
      <param name="tempFiles">Un <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con el que administrar y almacenar referencias en archivos intermedios generados durante la compilación.</param>
      <param name="outputName">Referencia a una cadena que almacenará los resultados del mensaje del compilador.</param>
      <param name="errorName">Referencia a una cadena que almacenará el nombre de los errores encontrados.</param>
      <returns>Valor devuelto del compilador.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary>Define los identificadores utilizados para determinar si un generador de código es compatible con ciertos tipos de elementos de código.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary>Indica si el generador es compatible con matrices de matrices.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary>Indica si el generador es compatible con atributos de ensamblados.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary>Indica si el generador es compatible con los argumentos constructores encadenados.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary>Indica si el generador es compatible con expresiones complejas.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary>Indica si el generador es compatible con declaraciones de delegados.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary>Indica si el generador es compatible con declaraciones de enumeración.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary>Indica si el generador es compatible con declaraciones de eventos.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary>Indica si el generador es compatible con la declaración de propiedades del indizador.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary>Indica si el generador es compatible con declaraciones de interfaz.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary>Indica si el generador es compatible con declaraciones de tipos de valor.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary>Indica si el generador es compatible con una designación de método de punto de entrada de programa. Se utiliza cuando se compilan los ejecutables.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary>Indica si el generador es compatible con declaraciones de tipos genéricos.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary>Indica si el generador es compatible con referencias de tipos genéricos.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary>Indica si el generador es compatible con instrucciones goto.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary>Indica si el generador es compatible con matrices multidimensionales de referencia. Actualmente, no se puede utilizar CodeDom para crear una instancia de matrices multidimensionales.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary>Indica si el generador es compatible con la declaración de miembros que implementan múltiples interfaces.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary>Indica si el generador es compatible con la declaración de tipos anidados.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary>Indica si el generador es compatible con atributos de parámetros.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary>Indica si el generador es compatible con declaraciones de tipos genéricos.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary>Indica si el generador es compatible con miembros estáticos públicos.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary>Indica si el generador es compatible con parámetros de referencia y de salida.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary>Indica si el generador admite la compilación con recursos de .NET Framework. Éstos pueden ser recursos predeterminados compilados directamente en un ensamblado o recursos a los que se hace referencia en un ensamblado satélite.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary>Indica si el generador es compatible con declaraciones de atributos de tipo de valor devuelto.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary>Indica si el generador es compatible con constructores estáticos.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary>Indica si el generador es compatible con instrucciones <see langword="try...catch" />.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary>Indica si el generador es compatible con la compilación de recursos Win32.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary>Define una interfaz para invocar a la compilación de código fuente o a un árbol CodeDOM con un compilador específico.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Compila un ensamblado basado en el árbol <see cref="N:System.CodeDom" /> que contiene el objeto<see cref="T:System.CodeDom.CodeCompileUnit" /> especificado, utilizando la configuración del compilador especificado.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
      <param name="compilationUnit">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica el código que se va a compilar.</param>
      <returns>Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Compila un ensamblado basado en los árboles <see cref="N:System.CodeDom" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeCompileUnit" />, utilizando la configuración del compilador especificada.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
      <param name="compilationUnits">Matriz de tipo <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica el código que se va a compilar.</param>
      <returns>Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Compila un ensamblado basado en el código fuente que contiene el archivo especificado, utilizando la configuración especificada del compilador.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
      <param name="fileName">Nombre del archivo que contiene el código fuente que se va a compilar.</param>
      <returns>Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compila un ensamblado basado en el código fuente que contienen los archivos especificados, utilizando la configuración especificada del compilador.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
      <param name="fileNames">Nombres de archivo de los archivos que se van a compilar.</param>
      <returns>Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Compila un ensamblado basado en la cadena especificada que contiene el código fuente, utilizando la configuración especificada del compilador.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
      <param name="source">Código fuente que se va a compilar.</param>
      <returns>Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compila un ensamblado basado en la matriz especificada de cadenas que contiene el código fuente, utilizando la configuración del compilador especificada.</summary>
      <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
      <param name="sources">Cadenas de código fuente que se van a compilar.</param>
      <returns>Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary>Define una interfaz para generar código.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>Crea un identificador de escape para el valor especificado.</summary>
      <param name="value">Cadena para crear un identificador de escape.</param>
      <returns>Identificador de escape para el valor.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary>Crea un identificador válido para el valor especificado.</summary>
      <param name="value">Cadena para generar un identificador válido.</param>
      <returns>Identificador válido para el valor especificado.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para la unidad de compilación de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado mediante las opciones especificadas.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> para el que se va a generar código.</param>
      <param name="w">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código.</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para la expresión de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión para la que se va a generar código.</param>
      <param name="w">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código.</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para el espacio de nombres de Code Document Object Model (CodeDOM) especificado y lo envía al escritor de texto especificado mediante las opciones especificadas.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeNamespace" /> que indica el espacio de nombres para el que se va a generar código.</param>
      <param name="w">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código.</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para la instrucción de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado mediante las opciones especificadas.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeStatement" /> que contiene los elementos CodeDOM que se van a traducir.</param>
      <param name="w">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código.</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Genera código para la declaración de Code Document Object Model (CodeDOM) especificada y lo envía al escritor de texto especificado mediante las opciones especificadas.</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que indica el tipo para el que se va a generar código.</param>
      <param name="w">
        <see cref="T:System.IO.TextWriter" /> al que se envía el código.</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Obtiene el tipo indicado por el <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo que se va a devolver.</param>
      <returns>Representación de texto del tipo especificado para el lenguaje para el que se ha diseñado la generación de código de este generador de código. Por ejemplo, en Visual Basic, al pasar un tipo System.Int32 se devolverá "Integer".</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary>Obtiene un valor que indica si el valor especificado es un identificador válido para el lenguaje actual.</summary>
      <param name="value">Valor que hay que comprobar para ver si es un identificador válido.</param>
      <returns>Es <see langword="true" /> si el parámetro <paramref name="value" /> es un identificador válido; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Obtiene un valor que indica si el generador proporciona compatibilidad para las características de lenguaje representadas por el objeto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> especificado.</summary>
      <param name="supports">Características para las que se va a comprobar el generador.</param>
      <returns>Es <see langword="true" /> si se admiten las funciones especificadas; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary>Provoca una excepción si el valor especificado no es un identificador válido.</summary>
      <param name="value">El identificador que se debe validar.</param>
      <exception cref="T:System.ArgumentException">El identificador no es válido.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary>Define una interfaz para analizar código como un objeto <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary>Cuando se implementa en una clase derivada, compila la secuencia de texto especificada como un objeto <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream">Un objeto <see cref="T:System.IO.TextReader" /> que se puede utilizar para leer el código que se va a compilar.</param>
      <returns>Un objeto <see cref="T:System.CodeDom.CodeCompileUnit" /> que contiene una representación del código analizado.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary>Define los identificadores que indican las características especiales de un lenguaje.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary>El lenguaje no distingue entre mayúsculas y minúsculas.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary>El lenguaje tiene características predeterminadas.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary>Representa una colección de archivos temporales.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con valores predeterminados.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> utilizando el directorio temporal especificado que está establecido para eliminar los archivos temporales una vez generados y utilizados, de manera predeterminada.</summary>
      <param name="tempDir">Ruta de acceso al directorio temporal que se va a utilizar para almacenar los archivos temporales.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> utilizando el directorio temporal y el valor especificados, lo que indicará si deben mantenerse o eliminarse los archivos temporales una vez generados y utilizados, de manera predeterminada.</summary>
      <param name="tempDir">Ruta de acceso al directorio temporal que se va a utilizar para almacenar los archivos temporales.</param>
      <param name="keepFiles">Es <see langword="true" /> si los archivos temporales han de mantenerse una vez utilizados; es <see langword="false" /> si los archivos temporales deben eliminarse.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary>Agrega a la colección un nombre de archivo con la extensión del nombre de archivo especificado.</summary>
      <param name="fileExtension">Extensión del nombre de archivo para el nombre de archivo temporal generado de forma automática que se agrega a la colección.</param>
      <returns>Nombre de archivo con la extensión del nombre de archivo especificado que se ha agregado a la colección.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary>Agrega a la colección un nombre de archivo con la extensión de archivo especificada utilizando el valor especificado que indica si el archivo debe eliminarse o conservarse.</summary>
      <param name="fileExtension">Extensión del nombre de archivo para el nombre de archivo temporal generado de forma automática que se agrega a la colección.</param>
      <param name="keepFile">Es <see langword="true" /> si al archivo ha de mantenerse una vez utilizado; es <see langword="false" /> si el archivo debe eliminarse.</param>
      <returns>Nombre de archivo con la extensión del nombre de archivo especificado que se ha agregado a la colección.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileExtension" /> es <see langword="null" /> o una cadena vacía.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary>Agrega el archivo especificado a la colección utilizando el valor especificado que indica si debe mantenerse el archivo una vez se haya deshecho de la colección o al llamar al método <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" />.</summary>
      <param name="fileName">Nombre del archivo que se va a agregar a la colección.</param>
      <param name="keepFile">Es <see langword="true" /> si al archivo ha de mantenerse una vez utilizado; es <see langword="false" /> si el archivo debe eliminarse.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> es <see langword="null" /> o una cadena vacía.  
O bien 
 <paramref name="fileName" /> es un duplicado.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary>Obtiene la ruta de acceso completa al nombre de archivo base, sin una extensión de nombre de archivo en la ruta de directorio temporal que se utiliza para generar los nombres de archivo temporales para la colección.</summary>
      <returns>Ruta de acceso completa al nombre de archivo base, sin una extensión de nombre de archivo en la ruta de directorio temporal que se utiliza para generar los nombres de archivos temporales para la colección.</returns>
      <exception cref="T:System.Security.SecurityException">Si la propiedad <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" /> no se ha establecido o se ha establecido en <see langword="null" /> y no se concede <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> para el directorio temporal indicado por la propiedad <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary>Copia todos los miembros de la colección en la cadena especificada a partir del índice especificado.</summary>
      <param name="fileNames">Matriz de cadenas que se va a copiar.</param>
      <param name="start">Índice de la matriz donde se va a iniciar la copia.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary>Obtiene el número de archivos de la colección.</summary>
      <returns>Número de archivos de la colección.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary>Elimina los archivos temporales dentro de esta colección que no están marcados para conservarse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados que usa <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary>Intenta eliminar los archivos temporales antes de que la recolección de elementos no utilizados reclame este objeto.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary>Obtiene un enumerador que puede enumerar los miembros de la colección.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> que contiene los miembros de la colección.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary>Obtiene o establece un valor que indica si se deben mantener los archivos de manera predeterminada al llamar al método <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> o eliminar la colección.</summary>
      <returns>Es <see langword="true" />si deben mantenerse los archivos; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de la colección en una matriz, empezando en el índice especificado de la matriz de destino.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.ICollection" />. <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="start">Índice de base cero de la matriz donde comienza la copia.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary>Obtiene el número de elementos contenido en la colección.</summary>
      <returns>Número de elementos contenidos en <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la colección está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a la colección.</summary>
      <returns>Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary>Realiza tareas definidas por la aplicación asociadas a la liberación o al restablecimiento de recursos no administrados.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary>Obtiene el directorio temporal en el que van a almacenarse los archivos temporales.</summary>
      <returns>Directorio temporal en el que van a almacenarse los archivos temporales.</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary>Define los identificadores que se utilizan para indicar la dirección del parámetro y las declaraciones de argumentos.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary>Campo entrante.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary>Campo de salida.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary>Campo por referencia.</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary>Define los identificadores de atributos de miembro para miembros de clase.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary>Miembro abstracto.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary>Máscara de acceso.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary>Un miembro que es accesible a cualquier clase dentro del mismo ensamblado.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary>Miembro constante.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary>Un miembro que es accesible dentro de la familia de su clase y clases derivadas.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary>Un miembro que es accesible dentro de su clase y de las clases derivadas en el mismo ensamblado.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary>Un miembro que es accesible dentro de su clase, sus clases derivadas en cualquier ensamblado y cualquier clase en el mismo ensamblado.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary>Un miembro que no puede reemplazarse en una clase derivada.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary>Nuevo miembro.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary>Miembro sobrecargado. En algunos lenguajes, como Visual Basic, requieren que los miembros sobrecargados estén indicados de forma explícita.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary>Un miembro que reemplaza un miembro de clase base.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary>Miembro privado.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary>Miembro público.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary>Máscara de ámbito.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary>Miembro estático. En Visual Basic, esto es equivalente a la palabra clave <see langword="Shared" />.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary>Máscara de VTable.</summary>
    </member>
  </members>
</doc>
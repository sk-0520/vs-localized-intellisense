<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.CodeDom</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary>提供对 C# 代码生成器和代码编译器的实例的访问权限。</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary>初始化 <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>使用指定的提供程序选项初始化 <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> 类的新实例。</summary>
      <param name="providerOptions">包含配置文件中的提供程序选项的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary>获取 C# 代码编译器的实例。</summary>
      <returns>C# <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 实现的实例。</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary>获取 C# 代码生成器的实例。</summary>
      <returns>C# <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 实现的实例。</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary>获取要在创建源代码文件时使用的文件扩展名。</summary>
      <returns>用于生成的源代码文件的文件扩展名。</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>使用指定的文本编写器和代码生成器选项为指定的类成员生成代码。</summary>
      <param name="member">要为其生成代码的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <param name="writer">要向其中进行写入的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">生成代码时要使用的 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary>获取指定对象类型的 <see cref="T:System.ComponentModel.TypeConverter" />。</summary>
      <param name="type">要为其检索类型转换器的对象类型。</param>
      <returns>指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary>提供对 Visual Basic 代码生成器和代码编译器的实例的访问。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>使用指定的提供程序选项初始化 <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> 类的新实例。</summary>
      <param name="providerOptions">包含配置文件中的提供程序选项的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary>获取 Visual Basic 代码编译器的实例。</summary>
      <returns>Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 实现的实例。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary>获取 Visual Basic 代码生成器的实例。</summary>
      <returns>Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 实现的实例。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary>获取在创建源代码文件时所用的文件扩展名。</summary>
      <returns>用于生成的源代码文件的文件扩展名。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>使用指定的文本编写器和代码生成器选项为指定的类成员生成代码。</summary>
      <param name="member">要为其生成代码的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <param name="writer">要向其中进行写入的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">生成代码时要使用的 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary>获取指定对象类型的 <see cref="T:System.ComponentModel.TypeConverter" />。</summary>
      <param name="type">要为其检索类型转换器的对象类型。</param>
      <returns>指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary>获取语言功能标识符。</summary>
      <returns>指示语言的特殊功能的 <see cref="T:System.CodeDom.Compiler.LanguageOptions" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary>表示对传递到方法的参数值的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary>使用指定的参数名初始化 <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> 类的新实例。</summary>
      <param name="parameterName">要引用的参数的名称。</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary>获取或设置此表达式引用的参数名称。</summary>
      <returns>要引用的参数的名称。</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary>表示创建数组的表达式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>用指定的数组数据类型和指示数组索引数的代码表达式初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要创建的数组的数据类型。</param>
      <param name="size">一个表达式，它指示要创建的数组的索引数。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>使用指定的数组数据类型和初始化表达式初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要创建的数组的数据类型。</param>
      <param name="initializers">要用于初始化数组的表达式数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>使用指定的数组数据类型和数组的索引数初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要创建的数组的数据类型。</param>
      <param name="size">要创建的数组的索引数。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的数组数据类型名和指示数组索引数的代码表达式初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。</summary>
      <param name="createType">要创建数组的数据类型的名称。</param>
      <param name="size">一个表达式，它指示要创建的数组的索引数。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>使用指定的数组数据类型名和初始值设定项初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。</summary>
      <param name="createType">要创建数组的数据类型的名称。</param>
      <param name="initializers">要用于初始化数组的表达式数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary>使用指定的数组数据类型名和数组的索引数初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。</summary>
      <param name="createType">要创建数组的数据类型的名称。</param>
      <param name="size">要创建的数组的索引数。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>用指定的数组数据类型和指示数组索引数的代码表达式初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。</summary>
      <param name="createType">要创建的数组的数据类型。</param>
      <param name="size">一个表达式，它指示要创建的数组的索引数。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>使用指定的数组数据类型和初始值设定项初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。</summary>
      <param name="createType">要创建的数组的数据类型。</param>
      <param name="initializers">要用于初始化数组的表达式数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary>使用指定的数组数据类型和数组的索引数初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。</summary>
      <param name="createType">要创建的数组的数据类型。</param>
      <param name="size">要创建的数组的索引数。</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary>获取或设置要创建的数组类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示数组的类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary>获取用来初始化数组的初始值设定项。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，指示初始化值。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary>获取或设置数组中的索引数。</summary>
      <returns>数组中的索引数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary>获取或设置指示数组大小的表达式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示数组的大小。</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary>表示对数组的索引的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>使用指定的目标对象和索引初始化 <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示作为索引器目标的数组。</param>
      <param name="indices">要引用的一个或多个索引。</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary>获取或设置索引器表达式的一个或多个索引。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，它指示索引器表达式的一个或多个索引。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary>获取或设置此数组索引器的目标对象。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" />，它表示正在索引的数组。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary>表示简单的赋值语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAssignStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>使用指定的表达式初始化 <see cref="T:System.CodeDom.CodeAssignStatement" /> 类的新实例。</summary>
      <param name="left">要对其赋值的变量。</param>
      <param name="right">要指派的值。</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary>获取或设置表示要对其赋值的对象或引用的表达式。</summary>
      <returns>指示要对其赋值的对象或引用的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary>获取或设置表示要赋予的对象或引用的表达式。</summary>
      <returns>指示要赋予的对象或引用的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary>表示向事件附加事件处理程序委托的语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>使用指定的事件和委托初始化 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 类的新实例。</summary>
      <param name="eventRef">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" />，它指示要将事件处理程序附加到的事件。</param>
      <param name="listener">
        <see cref="T:System.CodeDom.CodeExpression" />，它指示新的事件处理程序。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>使用包含事件、事件名和事件处理程序委托的指定对象来初始化 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示包含事件的对象。</param>
      <param name="eventName">要将事件处理程序附加到的事件的名称。</param>
      <param name="listener">
        <see cref="T:System.CodeDom.CodeExpression" />，它指示新的事件处理程序。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary>获取或设置要对其附加事件处理程序委托的事件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" />，它指示要将事件处理程序附加到的事件。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary>获取或设置要附加到事件的新事件处理程序委托。</summary>
      <returns>指示要附加的新事件处理程序的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary>表示在元数据特性声明中使用的参数。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary>使用指定的值初始化 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 类的新实例。</summary>
      <param name="value">表示参数值的 <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的名称和值初始化 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 类的新实例。</summary>
      <param name="name">参数应用于的特性属性的名称。</param>
      <param name="value">表示参数值的 <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary>获取或设置特性的名称。</summary>
      <returns>参数用于的特性属性的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary>获取或设置特性参数的值。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示特性参数的值。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</param>
      <returns>新元素位置处插入的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 数组的元素复制到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 对象的内容复制到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</summary>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</param>
      <returns>当集合包含指定的对象时为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例（从指定索引处开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从集合所复制值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。  

或 - 
<see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象在集合中的索引（如果它已存在于该集合中）。</summary>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</param>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引，应在此处插入指定对象。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.CodeAttributeArgument" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary>表示特性声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>使用指定的代码类型引用初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类的新实例。</summary>
      <param name="attributeType">用于标识特性的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary>使用指定的代码类型引用和参数初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类的新实例。</summary>
      <param name="attributeType">用于标识特性的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="arguments">一个 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 类型的数组，它包含特性参数。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary>使用指定的名称初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类的新实例。</summary>
      <param name="name">属性名。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary>使用指定的名称和参数初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类的新实例。</summary>
      <param name="name">属性名。</param>
      <param name="arguments">一个 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 类型的数组，它包含特性参数。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary>获取特性的参数。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />，它包含特性的参数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary>获取代码特性声明的代码类型引用。</summary>
      <returns>一个标识 <see cref="T:System.CodeDom.CodeTypeReference" /> 的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary>获取或设置要声明的特性的名称。</summary>
      <returns>属性名。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary>向该集合中添加具有指定值的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</param>
      <returns>新元素位置处插入的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 数组的元素复制到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 对象的内容复制到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary>获取或设置一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</summary>
      <param name="value">要定位的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</param>
      <returns>当集合包含指定的对象时为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例（从指定索引处开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从集合所复制值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。  
或 
<see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象在集合中的索引（如果它已存在于该集合中）。</summary>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</param>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引，应在此处插入指定对象。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary>获取或设置位于指定索引处的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary>表示对基类的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary>表示一个表达式，该表达式包含在两个表达式间进行的二进制运算。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary>使用指定的参数初始化 <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> 类的新实例。</summary>
      <param name="left">运算符左边的 <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="op">指示运算符类型的 <see cref="T:System.CodeDom.CodeBinaryOperatorType" />。</param>
      <param name="right">运算符右边的 <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary>获取或设置运算符左边的代码表达式。</summary>
      <returns>指示左侧操作数的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary>获取或设置二进制运算符表达式中的运算符。</summary>
      <returns>指示表达式中运算符类型的 <see cref="T:System.CodeDom.CodeBinaryOperatorType" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary>获取或设置运算符右边的代码表达式。</summary>
      <returns>指示右侧操作数的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary>为受支持的二进制运算符定义标识符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary>加法运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary>赋值运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary>按位与运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary>按位或运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary>布尔与运算符。 它表示短路运算符。 短路运算符仅计算返回正确值所必需的表达式。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary>布尔或运算符。 它表示短路运算符。 短路运算符仅计算返回正确值所必需的表达式。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary>除法运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary>大于运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary>大于或等于运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary>恒等运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary>非恒等运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary>小于运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary>小于或等于运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary>模数运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary>乘法运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary>减法运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary>值相等运算符。</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary>表示到一种数据类型或接口的表达式转换。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCastExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>使用指定的目标类型和表达式初始化 <see cref="T:System.CodeDom.CodeCastExpression" /> 类的新实例。</summary>
      <param name="targetType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示转换的目标类型。</param>
      <param name="expression">要转换的 <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的目标类型和表达式初始化 <see cref="T:System.CodeDom.CodeCastExpression" /> 类的新实例。</summary>
      <param name="targetType">该转换的目标类型的名称。</param>
      <param name="expression">要转换的 <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>使用指定的目标类型和表达式初始化 <see cref="T:System.CodeDom.CodeCastExpression" /> 类的新实例。</summary>
      <param name="targetType">该转换的目标数据类型。</param>
      <param name="expression">要转换的 <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary>获取或设置要转换类型的表达式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示要转换类型的代码。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary>获取或设置转换的目标类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要转换到的目标类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary>表示 <see langword="catch" /> 语句的 <see langword="try/catch" /> 异常块。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCatchClause" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary>使用异常的指定局部变量名初始化 <see cref="T:System.CodeDom.CodeCatchClause" /> 类的新实例。</summary>
      <param name="localName">在异常的 catch 子句中声明的局部变量的名称。 这是可选项。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary>使用异常的指定局部变量名和异常类型初始化 <see cref="T:System.CodeDom.CodeCatchClause" /> 类的新实例。</summary>
      <param name="localName">在异常的 catch 子句中声明的局部变量的名称。 这是可选项。</param>
      <param name="catchExceptionType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要捕捉的异常的类型。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary>使用异常的指定局部变量名、异常类型和语句集合初始化 <see cref="T:System.CodeDom.CodeCatchClause" /> 类的新实例。</summary>
      <param name="localName">在异常的 catch 子句中声明的局部变量的名称。 这是可选项。</param>
      <param name="catchExceptionType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要捕捉的异常的类型。</param>
      <param name="statements">
        <see cref="T:System.CodeDom.CodeStatement" /> 对象的数组，表示 catch 块的内容。</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary>获取或设置处理 catch 块的异常的类型。</summary>
      <returns>指示要处理的异常类型的 <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary>获取或设置 <see langword="catch" /> 子句处理的异常的变量名称。</summary>
      <returns>
        <see langword="catch" /> 子句处理的异常变量的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary>获取 catch 块中的语句。</summary>
      <returns>包含 catch 块中语句的 <see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" />，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</param>
      <returns>新元素位置处插入的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 数组的元素复制到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCatchClause" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 对象的内容复制到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeCatchClauseCollection" />，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</summary>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</param>
      <returns>当集合包含指定的对象时为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例（从指定索引处开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从集合所复制值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。  

或 - 
<see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象在集合中的索引（如果它已存在于该集合中）。</summary>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</param>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引，应在此处插入指定对象。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>位于每个有效索引位置的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary>表示代码校验和杂注代码实体。</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeChecksumPragma" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary>使用文件名、表示校验和算法的 GUID 和表示校验和数据的字节流初始化 <see cref="T:System.CodeDom.CodeChecksumPragma" /> 类的新实例。</summary>
      <param name="fileName">校验和文件的路径。</param>
      <param name="checksumAlgorithmId">
        <see cref="T:System.Guid" />，它标识要使用的校验和算法。</param>
      <param name="checksumData">一个包含校验和数据的字节数组。</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary>获取或设置 GUID，该 GUID 标识要使用的校验和算法。</summary>
      <returns>
        <see cref="T:System.Guid" />，它标识要使用的校验和算法。</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary>获取或设置用于校验和计算的数据的值。</summary>
      <returns>包含校验和计算数据的字节数组。</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary>获取或设置校验和文件的路径。</summary>
      <returns>校验和文件的路径。</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary>表示注释。</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeComment" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary>使用指定的文本作为内容来初始化 <see cref="T:System.CodeDom.CodeComment" /> 类的新实例。</summary>
      <param name="text">注释的内容。</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary>使用指定的文本和文档注释标志初始化 <see cref="T:System.CodeDom.CodeComment" /> 类的新实例。</summary>
      <param name="text">注释的内容。</param>
      <param name="docComment">当该注释是文档注释时为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary>获取或设置一个值，该值指示注释是否是文档注释。</summary>
      <returns>当该注释是文档注释时为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary>获取或设置注释文本。</summary>
      <returns>包含注释文本的字符串。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary>表示由单个注释构成的语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCommentStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary>使用指定的注释初始化 <see cref="T:System.CodeDom.CodeCommentStatement" /> 类的新实例。</summary>
      <param name="comment">
        <see cref="T:System.CodeDom.CodeComment" />，指示注释。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary>使用指定文本作为内容来初始化 <see cref="T:System.CodeDom.CodeCommentStatement" /> 类的新实例。</summary>
      <param name="text">注释的内容。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary>使用指定的文本和文档注释标志初始化 <see cref="T:System.CodeDom.CodeCommentStatement" /> 类的新实例。</summary>
      <param name="text">注释的内容。</param>
      <param name="docComment">当该注释是文档注释时为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary>获取或设置注释的内容。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeComment" />，指示注释。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" />，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</param>
      <returns>新元素位置处插入的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 数组的元素复制到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCommentStatement" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 对象的内容复制到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeCommentStatementCollection" />，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</summary>
      <param name="value">要在集合中搜索的 <see cref="T:System.CodeDom.CodeCommentStatement" />。</param>
      <returns>当集合包含指定的对象时为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary>从指定的索引处开始，将集合对象复制到一维 <see cref="T:System.Array" />。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从集合所复制值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。  

或 - 
<see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象在集合中的索引（如果它已存在于该集合中）。</summary>
      <param name="value">要定位的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</param>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary>将 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象插入到集合中的指定索引处。</summary>
      <param name="index">从零开始的索引，该项应插入此位置。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>位于每个有效索引位置的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary>为 CodeDOM 程序图形提供容器。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCompileUnit" /> 类的新实例。</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary>获取生成的程序集的自定义特性集合。</summary>
      <returns>指示生成的程序集的自定义特性的 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary>获取包含结束指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</summary>
      <returns>包含结束指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary>获取命名空间的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeNamespaceCollection" />，指示编译单元使用的命名空间。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary>获取引用的程序集。</summary>
      <returns>包含引用的程序集的文件名的 <see cref="T:System.Collections.Specialized.StringCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary>获取包含开始指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</summary>
      <returns>包含开始指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary>表示条件分支语句，通常表示为一个 <see langword="if" /> 语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeConditionStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary>使用指定的条件和语句初始化 <see cref="T:System.CodeDom.CodeConditionStatement" /> 类的新实例。</summary>
      <param name="condition">
        <see cref="T:System.CodeDom.CodeExpression" />，指示要计算的表达式。</param>
      <param name="trueStatements">
        <see cref="T:System.CodeDom.CodeStatement" /> 类型的数组，包含当条件为 <see langword="true" /> 时执行的语句。</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary>使用指定的条件和语句初始化 <see cref="T:System.CodeDom.CodeConditionStatement" /> 类的新实例。</summary>
      <param name="condition">指示要计算的条件的 <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="trueStatements">
        <see cref="T:System.CodeDom.CodeStatement" /> 类型的数组，包含当条件为 <see langword="true" /> 时执行的语句。</param>
      <param name="falseStatements">
        <see cref="T:System.CodeDom.CodeStatement" /> 类型的数组，包含当条件为 <see langword="false" /> 时执行的语句。</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary>获取或设置要计算 <see langword="true" /> 或 <see langword="false" /> 的表达式。</summary>
      <returns>要计算 <see langword="true" /> 或 <see langword="false" /> 的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary>获取在条件表达式计算为 <see langword="false" /> 时执行的语句集合。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeStatementCollection" />，它包含在条件表达式计算为 <see langword="false" /> 时执行的语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary>获取在条件表达式计算为 <see langword="true" /> 时执行的语句集合。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeStatementCollection" />，它包含在条件表达式计算为 <see langword="true" /> 时执行的语句。</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary>表示一个类型的实例构造函数的声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeConstructor" /> 类的新实例。</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary>获取基构造函数参数的集合。</summary>
      <returns>包含基构造函数参数的 <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary>获取链式构造函数参数的集合。</summary>
      <returns>包含链式构造函数参数的 <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary>表示对默认值的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>使用指定的代码类型引用初始化 <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指定对值类型的引用。</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary>获取或设置默认值的数据类型引用。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" /> 对象，表示有默认值的数据类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary>表示创建委托的表达式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> 类的新实例。</summary>
      <param name="delegateType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示委托的数据类型。</param>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，它指示包含事件处理程序方法的对象。</param>
      <param name="methodName">事件处理程序方法的名称。</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary>获取或设置委托的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示委托的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary>获取或设置事件处理程序方法的名称。</summary>
      <returns>事件处理程序方法的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary>获取或设置包含事件处理程序方法的对象。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，它指示包含事件处理程序方法的对象。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary>表示引发事件的表达式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary>使用指定的目标对象初始化 <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示目标对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>使用指定的目标对象和参数初始化 <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示目标对象。</param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 对象的数组，指示参数。</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary>获取或设置传递到附加于事件的事件处理方法的参数。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示传递到附加于事件的事件处理方法的参数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary>获取或设置要调用的事件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示要调用的事件。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary>表示用作方法调用参数及引用方向指示器的表达式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDirectionExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary>使用指定的字段方向和表达式初始化 <see cref="T:System.CodeDom.CodeDirectionExpression" /> 类的新实例。</summary>
      <param name="direction">
        <see cref="T:System.CodeDom.FieldDirection" />，指示表达式的字段方向。</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" />，指示要表示的代码表达式。</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary>获取或设置此方向表达式的字段方向。</summary>
      <returns>
        <see cref="T:System.CodeDom.FieldDirection" />，指示此方向表达式的字段方向。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary>获取或设置要表示的代码表达式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示要表示的表达式。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary>用作代码指令类的基类。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDirective" /> 类的新实例。</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeDirective" /> 对象集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary>使用指定数组中的代码指令对象初始化 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 类的新实例。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeDirective" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary>使用指定的代码指令集合中的元素初始化 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 类的新实例。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeDirective" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</param>
      <returns>插入了新元素的索引位置。</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary>将 <see cref="T:System.CodeDom.CodeDirective" /> 对象的数组添加到集合的末尾。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.CodeDom.CodeDirective" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象的内容添加到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象，它包含要添加到集合中的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</summary>
      <param name="value">要在此集合中搜索的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</param>
      <returns>当集合包含指定的对象时为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary>从指定索引处开始，将集合的内容复制到一维数组。</summary>
      <param name="array">一个 <see cref="T:System.CodeDom.CodeDirective" /> 类型的数组，它是从集合所复制的值的目标位置。</param>
      <param name="index">要开始插入集合对象的数组中的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。  

或 - 
<see cref="T:System.CodeDom.CodeDirectiveCollection" /> 中的元素数大于 <paramref name="index" /> 所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeDirective" /> 对象在该集合中的索引（如果它在该集合中存在）。</summary>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</param>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引位置；否则为 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeDirective" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引位置，应在此处插入指定对象。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。  
或 
 <paramref name="index" /> 大于 <see cref="P:System.Collections.CollectionBase.Count" />。</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</summary>
      <param name="index">要访问的索引位置。</param>
      <returns>索引位置处的 <see cref="T:System.CodeDom.CodeDirective" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在集合的有效索引位置范围外。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary>表示可执行文件的入口点方法。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeEntryPointMethod" /> 类的新实例。</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary>表示对事件的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>使用指定的目标对象和事件名初始化 <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示包含事件的对象。</param>
      <param name="eventName">要引用的事件的名称。</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary>获取或设置事件名。</summary>
      <returns>事件的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary>获取或设置包含事件的对象。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示包含事件的对象。</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary>表示代码表达式。 这是其他从不实例化的代码表达式对象的基类。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpression" /> 类的新实例。</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeExpression" /> 对象集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeExpression" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</param>
      <returns>新元素位置处插入的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary>将指定数组的元素复制到该集合的末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeExpression" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 对象的内容复制到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeExpressionCollection" />，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</summary>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</param>
      <returns>当集合包含指定的对象时为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例（从指定索引处开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从集合所复制值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。  
或 
<see cref="T:System.CodeDom.CodeExpressionCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象在集合中的索引（如果它已存在于该集合中）。</summary>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</param>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引，应在此处插入指定对象。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</summary>
      <param name="index">要访问的集合的索引（该索引从零开始）。</param>
      <returns>位于每个有效索引位置的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary>表示由单个表达式组成的语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpressionStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>使用指定的表达式初始化 <see cref="T:System.CodeDom.CodeExpressionStatement" /> 类的新实例。</summary>
      <param name="expression">语句的 <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary>获取或设置语句的表达式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示语句的表达式。</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary>表示对某字段的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>使用指定的目标对象和字段名称初始化 <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示包含字段的对象。</param>
      <param name="fieldName">字段的名称。</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary>获取或设置要引用的字段的名称。</summary>
      <returns>包含字段名称的字符串。</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary>获取或设置包含要引用字段的对象。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示包含要引用的字段的对象。</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary>表示 <see langword="goto" /> 语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeGotoStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary>使用指定的标签名初始化 <see cref="T:System.CodeDom.CodeGotoStatement" /> 类的新实例。</summary>
      <param name="label">继续程序执行的位置处的标签名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Label" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary>获取或设置程序继续执行处的标签名称。</summary>
      <returns>指示程序继续执行处的标签名称的字符串。</returns>
      <exception cref="T:System.ArgumentNullException">不能设置此标签，因为 <paramref name="value" /> 为 <see langword="null" /> 或为空字符串。</exception>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary>表示对对象的索引器属性的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeIndexerExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>使用指定的目标对象和索引初始化 <see cref="T:System.CodeDom.CodeIndexerExpression" /> 类的新实例。</summary>
      <param name="targetObject">目标对象。</param>
      <param name="indices">索引器表达式的一个或多个索引。</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary>获取索引器表达式的索引集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，它指示索引器表达式的一个或多个索引。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary>获取或设置可以编制索引的目标对象。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示索引器对象。</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary>表示 <see langword="for" /> 语句或语句块内的循环（使用测试表达式作为继续循环的条件）。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeIterationStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary>使用指定的参数初始化 <see cref="T:System.CodeDom.CodeIterationStatement" /> 类的新实例。</summary>
      <param name="initStatement">
        <see cref="T:System.CodeDom.CodeStatement" />，包含循环初始化语句。</param>
      <param name="testExpression">
        <see cref="T:System.CodeDom.CodeExpression" />，包含用于测试退出条件的表达式。</param>
      <param name="incrementStatement">
        <see cref="T:System.CodeDom.CodeStatement" />，包含随循环递增的语句。</param>
      <param name="statements">
        <see cref="T:System.CodeDom.CodeStatement" /> 类型的数组，包含循环范围内的语句。</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary>获取或设置在每个循环周期后调用的语句。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" />，指示随循环递增的语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary>获取或设置循环初始化语句。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" />，指示循环初始化语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary>获取要在循环内执行的语句的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatement" /> 类型的数组，指示循环范围内的语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary>获取或设置作为循环继续的条件进行测试的表达式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示要测试的表达式。</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary>表示标记语句或独立标签。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeLabeledStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary>使用指定的标签名初始化 <see cref="T:System.CodeDom.CodeLabeledStatement" /> 类的新实例。</summary>
      <param name="label">标签的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary>使用指定的标签名和语句初始化 <see cref="T:System.CodeDom.CodeLabeledStatement" /> 类的新实例。</summary>
      <param name="label">标签的名称。</param>
      <param name="statement">要与标签关联的 <see cref="T:System.CodeDom.CodeStatement" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary>获取或设置的标签名称。</summary>
      <returns>标签的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary>获取或设置可选的关联语句。</summary>
      <returns>指示与标签相关联的语句的 <see cref="T:System.CodeDom.CodeStatement" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary>表示特定文件内的特定位置。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeLinePragma" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeLinePragma" /> 类的新实例。</summary>
      <param name="fileName">关联的文件的文件名。</param>
      <param name="lineNumber">存储引用的行号。</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary>获取或设置关联文件的名称。</summary>
      <returns>关联的文件的文件名。</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary>获取或设置关联引用的行号。</summary>
      <returns>行号。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary>表示一个类型的事件的声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMemberEvent" /> 类的新实例。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary>获取或设置该成员事件实现的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，指示成员事件实现的一个或多个数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary>获取或设置私下实现的数据类型（如果有的话）。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示事件私下实现的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary>获取或设置处理事件的委托类型的数据类型。</summary>
      <returns>指示处理事件的委托类型的 <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary>表示某种类型的字段的声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMemberField" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>使用指定的字段类型和字段名初始化 <see cref="T:System.CodeDom.CodeMemberField" /> 类的新实例。</summary>
      <param name="type">指示字段类型的对象。</param>
      <param name="name">字段的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary>使用指定的字段类型和字段名初始化 <see cref="T:System.CodeDom.CodeMemberField" /> 类的新实例。</summary>
      <param name="type">字段的类型。</param>
      <param name="name">字段的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary>使用指定的字段类型和字段名初始化 <see cref="T:System.CodeDom.CodeMemberField" /> 类的新实例。</summary>
      <param name="type">字段的类型。</param>
      <param name="name">字段的名称。</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary>获取或设置字段的初始化表达式。</summary>
      <returns>字段的初始化表达式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary>获取或设置字段的类型。</summary>
      <returns>字段的类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary>表示某种类型的方法的声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMemberMethod" /> 类的新实例。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary>获取由该方法实现的接口的数据类型，除非它是一个私有方法实现（这由 <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" /> 属性来指示）。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，指示由该方法实现的类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary>获取方法的参数声明。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />，指示方法的参数。</returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary>在首次访问 <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" /> 集合时将激发的事件。</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary>在首次访问 <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" /> 集合时将激发的事件。</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary>在首次访问 <see cref="P:System.CodeDom.CodeMemberMethod.Statements" /> 集合时将激发的事件。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary>获取或设置由此方法（如果是私有的）为其实现方法的接口的数据类型（如果有）。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示包含由私有方法（其声明由此 <see cref="T:System.CodeDom.CodeMemberMethod" /> 表示）实现的方法的接口的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary>获取或设置该方法的返回值的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示由该方法返回的值的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary>获取该方法的返回类型的自定义特性。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，指示自定义特性。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary>获取该方法内的语句。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，指示方法内的语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary>获取当前泛型方法的类型参数。</summary>
      <returns>包含该泛型方法的类型参数的 <see cref="T:System.CodeDom.CodeTypeParameterCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary>表示某种类型的属性的声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMemberProperty" /> 类的新实例。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary>获取该属性的 <see langword="get" /> 语句的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，包含该成员属性的 <see langword="get" /> 语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary>获取或设置指示该属性是否具有 <see langword="get" /> 方法访问器的值。</summary>
      <returns>如果 <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" /> 集合的 <see langword="true" /> 属性不为零，或者此属性的值已设置为 <see langword="Count" />，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary>获取或设置指示该属性是否具有 <see langword="set" /> 方法访问器的值。</summary>
      <returns>如果 <see cref="P:System.Collections.CollectionBase.Count" /> 集合的 <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" /> 属性不为零，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary>获取该属性实现的任何接口的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，指示该属性实现的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary>获取该属性的声明表达式的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />，指示该属性的声明表达式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary>获取或设置该属性（如果是私有的）实现的接口的数据类型（如果有）。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示该属性（如果是私有的）实现的接口的数据类型（如果有）。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary>获取该属性的 <see langword="set" /> 语句的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，包含该成员属性的 <see langword="set" /> 语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary>获取或设置属性的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示属性的数据类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary>表示调用方法的表达式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary>使用指定的目标对象、方法名称和参数初始化 <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示要对其调用方法的目标对象。</param>
      <param name="methodName">要调用的方法的名称。</param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 对象的数组，指示要用来调用该方法的参数。</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary>使用指定的方法和参数初始化 <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 类的新实例。</summary>
      <param name="method">
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />，指示要调用的方法。</param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 对象的数组，指示要用来调用该方法的参数。</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary>获取或设置要调用的方法。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />，指示要调用的方法。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary>获取要调用该方法的参数。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，指示要用来调用该方法的参数。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary>表示方法的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>使用指定的目标对象和方法名初始化 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示作为目标的对象。</param>
      <param name="methodName">要调用的方法的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary>使用指定的目标对象、方法名称和泛型类型参数初始化 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示作为目标的对象。</param>
      <param name="methodName">要调用的方法的名称。</param>
      <param name="typeParameters">指定此 <see cref="T:System.CodeDom.CodeTypeReference" /> 的 <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" /> 的 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 值的数组。</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary>获取或设置要引用的方法的名称。</summary>
      <returns>要引用的方法的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary>获取或设置指示要引用方法的表达式。</summary>
      <returns>表示要引用方法的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary>获取当前泛型方法引用表达式的类型参数。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，包含当前代码 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 的类型参数。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary>表示返回值语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>使用指定的表达式初始化 <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> 类的新实例。</summary>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" />，指示返回值。</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary>获取或设置返回值。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示要为返回语句返回的值；如果该语句是子例程的一部分，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary>表示命名空间声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespace" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary>使用指定的名称初始化 <see cref="T:System.CodeDom.CodeNamespace" /> 类的新实例。</summary>
      <param name="name">要声明的命名空间的名称。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary>获取命名空间的注释。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" />，指示命名空间的注释。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary>获取命名空间使用的命名空间导入指令集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />，指示命名空间使用的命名空间导入指令。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary>获取或设置命名空间的名称。</summary>
      <returns>命名空间的名称。</returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary>在首次访问 <see cref="P:System.CodeDom.CodeNamespace.Comments" /> 集合时将激发的事件。</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary>在首次访问 <see cref="P:System.CodeDom.CodeNamespace.Imports" /> 集合时将激发的事件。</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary>在首次访问 <see cref="P:System.CodeDom.CodeNamespace.Types" /> 集合时将激发的事件。</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary>获取命名空间包含的类型集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />，指示命名空间中所包含的类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeNamespace" /> 对象集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 类的新实例，该实例包含 <see cref="T:System.CodeDom.CodeNamespace" /> 对象的指定数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeNamespace" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeNamespaceCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <returns>新元素位置处插入的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 数组的元素复制到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespace" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 对象的内容添加到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeNamespaceCollection" />，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 对象。</summary>
      <param name="value">要在集合中搜索的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <returns>如果 <see cref="T:System.CodeDom.CodeNamespace" /> 包含在集合中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary>从指定的索引处开始，将集合对象复制到一维 <see cref="T:System.Array" /> 实例中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从集合所复制值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。  

或 - 
<see cref="T:System.CodeDom.CodeNamespaceCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 对象在 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 中的索引（如果它已存在于该集合中）。</summary>
      <param name="value">要查找的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <returns>如果在该集合中找到指定 <see cref="T:System.CodeDom.CodeNamespace" />，则为它在该集合中的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引，应在此位置插入新项。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 对象。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.CodeNamespace" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 对象。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary>表示某命名空间导入指令，该指令指示要使用的命名空间。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary>使用要导入的指定命名空间初始化 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 类的新实例。</summary>
      <param name="nameSpace">要导入的命名空间的名称。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary>获取或设置出现该语句的行和文件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeLinePragma" />，指示语句的上下文。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary>获取或设置要导入的命名空间。</summary>
      <returns>要导入的命名空间的名称。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 对象集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary>将 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 对象添加到集合中。</summary>
      <param name="value">要添加到集合的 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary>向集合添加一组 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 对象。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary>清除成员集合。</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary>获取集合中命名空间的数目。</summary>
      <returns>集合中的命名空间数。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary>获取枚举集合成员的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，指示集合成员。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 对象。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>位于每个有效索引位置的 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.ICollection" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.ICollection" /> 所复制的元素的目标数组。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。 此属性始终返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。  此属性始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回可循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary>将对象添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <param name="value">要添加到 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns>新元素的插入位置。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除所有项。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。</param>
      <returns>如果值在列表中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。</param>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>在 <see cref="T:System.Collections.IList" /> 中的指定位置插入项。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入到 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。  此属性始终返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。  此属性始终返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.IList" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.IList" /> 的指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary>为大部分代码文档对象模型 (CodeDOM) 对象提供通用基类。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeObject" /> 类的新实例。</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary>获取当前对象的用户可定义数据。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" />，包含当前对象的用户数据。</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary>表示创建某种类型的新实例的表达式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>使用指定的类型和参数初始化 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 类的新实例。</summary>
      <param name="createType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要创建的对象的数据类型。</param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 对象的数组，指示用于创建对象的参数。</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>使用指定的类型和参数初始化 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 类的新实例。</summary>
      <param name="createType">要创建对象的数据类型的名称。</param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 对象的数组，指示用于创建对象的参数。</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>使用指定的类型和参数初始化 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 类的新实例。</summary>
      <param name="createType">要创建对象的数据类型。</param>
      <param name="parameters">
        <see cref="T:System.CodeDom.CodeExpression" /> 对象的数组，指示用于创建对象的参数。</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary>获取或设置要创建的对象的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，引用要创建对象的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary>获取或设置创建对象时使用的参数。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpressionCollection" />，指示创建对象时要使用的参数。</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary>表示方法、属性或构造函数的参数声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>使用指定的参数类型和名称初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 类的新实例。</summary>
      <param name="type">一个对象，指示要声明的参数的类型。</param>
      <param name="name">要声明的参数的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary>使用指定的参数类型和名称初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 类的新实例。</summary>
      <param name="type">要声明的参数的类型。</param>
      <param name="name">要声明的参数的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary>使用指定的参数类型和名称初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 类的新实例。</summary>
      <param name="type">要声明的参数的类型。</param>
      <param name="name">要声明的参数的名称。</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary>获取或设置参数声明的自定义特性。</summary>
      <returns>指示自定义特性的对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary>获取或设置字段的方向。</summary>
      <returns>指示字段方向的对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary>获取或设置参数的名称。</summary>
      <returns>参数的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary>获取或设置参数类型。</summary>
      <returns>参数的类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 对象集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <returns>新元素位置处插入的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>将指定数组的元素复制到该集合的末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 类型的数组，包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 的内容添加到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />，包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</summary>
      <param name="value">要在该集合中搜索的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <returns>当集合包含指定的对象时为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例（从指定索引处开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从集合所复制值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。  

或 - 
<see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 在该集合中的索引（如果它在该集合中存在）。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 插入集合中的指定索引处。</summary>
      <param name="index">从零开始的索引，应在此处插入指定对象。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary>表示基元数据类型的值。</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodePrimitiveExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary>使用指定的对象初始化 <see cref="T:System.CodeDom.CodePrimitiveExpression" /> 类的新实例。</summary>
      <param name="value">要表示的对象。</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary>获取或设置要表示的基元数据类型。</summary>
      <returns>要表示其值的基元数据类型实例。</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary>表示属性值的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>使用指定的目标对象和属性名称初始化 <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> 类的新实例。</summary>
      <param name="targetObject">一个 <see cref="T:System.CodeDom.CodeExpression" />，它指示包含要引用的属性的对象。</param>
      <param name="propertyName">要引用的属性的名称。</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary>获取或设置要引用的属性名。</summary>
      <returns>要引用的属性的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary>获取或设置包含要引用属性的对象。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" />，它指示包含要引用的属性的对象。</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary>表示属性集方法内的属性集方法调用的值参数。</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary>指定代码区域的名称和模式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.CodeDom.CodeRegionDirective" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeRegionDirective" /> 类的新实例，指定它的模式和名称。</summary>
      <param name="regionMode">
        <see cref="T:System.CodeDom.CodeRegionMode" /> 值之一。</param>
      <param name="regionText">区域的名称。</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary>获取或设置区域指令的模式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeRegionMode" /> 值之一。 默认值为 <see cref="F:System.CodeDom.CodeRegionMode.None" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary>获取或设置区域的名称。</summary>
      <returns>区域的名称。</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary>指定代码区域的开始或结束。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary>区域的结束。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary>未使用。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary>区域的开始。</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary>表示移除事件处理程序的语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>使用指定的事件和事件处理程序初始化 <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 类的新实例。</summary>
      <param name="eventRef">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" />，指示要从中分离出事件处理程序的事件。</param>
      <param name="listener">一个 <see cref="T:System.CodeDom.CodeExpression" />，它指示要移除的事件处理程序。</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的目标对象、事件名称和事件处理程序初始化 <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 类的新实例。</summary>
      <param name="targetObject">
        <see cref="T:System.CodeDom.CodeExpression" />，指示包含事件的对象。</param>
      <param name="eventName">事件的名称。</param>
      <param name="listener">一个 <see cref="T:System.CodeDom.CodeExpression" />，它指示要移除的事件处理程序。</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary>获取或设置要从中移除侦听器的事件。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" />，指示要从中移除侦听器的事件。</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary>获取或设置要移除的事件处理程序。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" />，它指示要移除的事件处理程序。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary>表示可编译的原义代码片段。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> 类的新实例。</summary>
      <param name="value">要表示的原义代码片段。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary>获取或设置有关代码在源代码文档中的位置的行信息和文件信息。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeLinePragma" />，指示代码片段的位置。</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary>获取或设置要表示的原义代码片段。</summary>
      <returns>原义代码片段。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary>表示文本表达式。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary>使用指定的文本表达式初始化 <see cref="T:System.CodeDom.CodeSnippetExpression" /> 类的新实例。</summary>
      <param name="value">要表示的文本表达式。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary>获取或设置代码字符串。</summary>
      <returns>字符串。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary>使用原义代码片段表示一条语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary>使用指定的代码片段初始化 <see cref="T:System.CodeDom.CodeSnippetStatement" /> 类的新实例。</summary>
      <param name="value">要表示的语句的原义代码片段。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary>获取或设置原义代码片段语句。</summary>
      <returns>原义代码片段语句。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary>使用原义代码片段表示类型成员。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary>使用指定的文本初始化 <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> 类的新实例。</summary>
      <param name="text">类型成员的代码片段。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary>获取或设置类型成员的原义代码片段。</summary>
      <returns>类型成员的代码片段。</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary>表示从中派生所有代码语句的 <see langword="abstract" /> 基类。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeStatement" /> 类的新实例。</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary>获取包含结束指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</summary>
      <returns>包含结束指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary>获取或设置代码语句所在的行。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeLinePragma" /> 对象，指示代码语句的上下文。</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary>获取包含开始指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</summary>
      <returns>包含开始指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeStatement" /> 对象集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeStatementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeStatementCollection" /> 类的新实例，该实例包含 <see cref="T:System.CodeDom.CodeStatement" /> 对象的指定数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeStatement" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeStatementCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeStatementCollection" /> 对象，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</param>
      <returns>新元素位置处插入的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeStatement" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</param>
      <returns>新元素位置处插入的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary>向集合添加一组 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.CodeDom.CodeStatement" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeStatementCollection" /> 对象的内容添加到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeStatementCollection" /> 对象，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</summary>
      <param name="value">要在此集合中搜索的 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</param>
      <returns>当集合包含指定的对象时为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary>从指定的索引处开始，将 <see cref="T:System.CodeDom.CodeStatementCollection" /> 对象的元素复制到一维 <see cref="T:System.Array" /> 实例。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从集合所复制值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。  

或 - 
<see cref="T:System.CodeDom.CodeStatementCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeStatement" /> 对象在 <see cref="T:System.CodeDom.CodeStatementCollection" /> 中的索引（如果它已存在于该集合中）。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 –1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeStatement" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引，应在此处插入指定对象。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</param>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.CodeStatement" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary>表示对当前本地类实例的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeThisReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary>表示引发异常的语句。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>用指定的异常类型实例初始化 <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> 类的新实例。</summary>
      <param name="toThrow">
        <see cref="T:System.CodeDom.CodeExpression" />，指示要引发的异常。</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary>获取或设置要引发的异常。</summary>
      <returns>表示要引发的异常的实例的 <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary>表示一个 <see langword="try" /> 块，具有任意数量的 <see langword="catch" /> 子句和一个可选的 <see langword="finally" /> 块。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary>使用指定的 try 子句和 catch 子句的语句初始化 <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 类的新实例。</summary>
      <param name="tryStatements">
        <see cref="T:System.CodeDom.CodeStatement" /> 对象的数组，指示要尝试 (Try) 的语句。</param>
      <param name="catchClauses">
        <see cref="T:System.CodeDom.CodeCatchClause" /> 对象的数组，指示要捕捉 (Catch) 的子句。</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary>使用指定的 try 子句和 catch 子句的语句以及 finally 语句初始化 <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 类的新实例。</summary>
      <param name="tryStatements">
        <see cref="T:System.CodeDom.CodeStatement" /> 对象的数组，指示要尝试 (Try) 的语句。</param>
      <param name="catchClauses">
        <see cref="T:System.CodeDom.CodeCatchClause" /> 对象的数组，指示要捕捉 (Catch) 的子句。</param>
      <param name="finallyStatements">
        <see cref="T:System.CodeDom.CodeStatement" /> 对象的数组，指示要使用的 finally 语句。</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary>获取要使用的 catch 子句。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" />，指示要使用的 catch 子句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary>获取要使用的 finally 语句。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，指示 finally 语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary>获取要尝试的语句。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeStatementCollection" />，指示要尝试 (Try) 的语句。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary>表示类的静态构造函数。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeConstructor" /> 类的新实例。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary>表示类、结构、接口或枚举的类型声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 类的新实例。</summary>
      <param name="name">新类型的名称。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary>获取类型的基类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 对象，它指示类型的基类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary>获取或设置一个值，该值指示该类型是否是类或引用类型。</summary>
      <returns>如果该类型是类或引用类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary>获取或设置一个值，该值指示该类型是否是枚举。</summary>
      <returns>如果该类型是枚举，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary>获取或设置一个值，该值指示该类型是否是接口。</summary>
      <returns>如果该类型是接口，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary>获取或设置一个值，该值指示该类型声明是完整的类型声明还是分部类型声明。</summary>
      <returns>如果该类或结构声明是实现的分部表示形式，则为 <see langword="true" />；如果该声明是该类或结构的完整实现，则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary>获取或设置一个值，该值指示该类型是不是值类型（结构）。</summary>
      <returns>如果该类型是值类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary>获取所表示的类型的类成员的集合。</summary>
      <returns>一个指示类成员的 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 对象。</returns>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary>当首次访问 <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> 集合时发生。</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary>当首次访问 <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> 集合时发生。</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary>获取或设置类型的特性。</summary>
      <returns>一个 <see cref="T:System.Reflection.TypeAttributes" /> 对象，它指示该类型的特性。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary>获取类型声明的类型参数。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 包含类型声明的类型参数。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 类的新实例，该实例包含 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象的指定数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 对象，用来初始化集合。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象。</param>
      <returns>新元素位置处插入的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary>将指定数组的元素复制到该集合的末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 对象的内容添加到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 对象，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象。</summary>
      <param name="value">要在此集合中搜索的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象。</param>
      <returns>当集合包含指定的对象时为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary>从指定的索引处开始，将 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 对象中的元素复制到一维 <see cref="T:System.Array" /> 实例。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从集合所复制值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。  
或 
<see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象在 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 中的索引（如果它已存在于该集合中）。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</param>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 –1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引，应在此处插入指定对象。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary>表示委托声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDelegate" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDelegate" /> 类的新实例。</summary>
      <param name="name">委托的名称。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary>获取委托的参数。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />，指示委托的参数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary>获取或设置委托的返回类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示委托的返回类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary>为类型的成员提供基类。 类型成员包括字段、方法、属性、构造函数和嵌套类型。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeMember" /> 类的新实例。</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary>获取或设置成员的特性。</summary>
      <returns>
        <see cref="T:System.CodeDom.MemberAttributes" /> 值的按位组合用于指示成员的特性。 默认值为<see cref="F:System.CodeDom.MemberAttributes.Private" />。  |  <see cref="F:System.CodeDom.MemberAttributes.Final" /></returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary>获取类型成员的注释集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" />，指示成员的注释。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary>获取或设置成员的自定义特性。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，指示成员的自定义特性。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary>获取成员的结束指令。</summary>
      <returns>包含结束指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary>获取或设置类型成员语句所在的行。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeLinePragma" /> 对象，它指示类型成员声明的位置。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary>获取或设置成员名。</summary>
      <returns>成员名。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary>获取成员的开始指令。</summary>
      <returns>包含开始指令的 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeTypeMember" /> 对象集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeTypeMember" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeTypeMember" /> 对象数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" />，用来初始化集合。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary>向该集合添加具有指定值的 <see cref="T:System.CodeDom.CodeTypeMember" />。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <returns>新元素位置处插入的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeMember" /> 数组的元素复制到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMember" /> 类型的数组，包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary>将另一个 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 的内容添加到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" />，包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeTypeMember" />。</summary>
      <param name="value">要在集合中搜索的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <returns>当集合包含指定的对象时为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary>从指定的索引处开始，将集合对象复制到一维 <see cref="T:System.Array" /> 实例。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从集合所复制值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该目标数组是多维数组。  

或 - 
<see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeTypeMember" /> 在该集合中的索引（如果它在该集合中存在）。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <returns>如果在该集合中找到指定对象，则为此对象在该集合中的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeMember" /> 插入集合中的指定索引处。</summary>
      <param name="index">从零开始的索引，应在此处插入指定对象。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeTypeMember" />。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.CodeTypeMember" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary>从集合中移除特定的 <see cref="T:System.CodeDom.CodeTypeMember" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary>表示 <see langword="typeof" /> 表达式，该表达式返回指定类型名称的 <see cref="T:System.Type" />。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示 <see langword="typeof" /> 表达式的数据类型。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary>使用指定的类型初始化 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 类的新实例。</summary>
      <param name="type">
        <see langword="typeof" /> 表达式的数据类型的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary>使用指定的类型初始化 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 类的新实例。</summary>
      <param name="type">
        <see langword="typeof" /> 表达式的数据类型。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary>获取或设置 <see langword="typeof" /> 表达式所引用的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示 <see langword="typeof" /> 表达式所引用的数据类型。 此属性从来不会返回 <see langword="null" />，并且默认为 <see cref="T:System.Void" /> 类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary>表示泛型类型或方法的类型参数。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeParameter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary>用指定的类型参数名称初始化 <see cref="T:System.CodeDom.CodeTypeParameter" /> 类的新实例。</summary>
      <param name="name">类型参数的名称。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary>获取类型参数的约束。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 对象，它包含类型参数的约束。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary>获取类型参数的自定义特性。</summary>
      <returns>一个指示类型参数的自定义特性的 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary>获取或设置一个值，该值指示类型参数是否具有构造函数约束。</summary>
      <returns>如果类型参数具有构造函数约束，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary>获取或设置类型参数的名称。</summary>
      <returns>类型参数的名称。 默认值为空字符串("")。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 类的新的空实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" />，用来初始化集合。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeTypeParameter" />。</param>
      <returns>从零开始的索引；此处插入了新元素。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary>使用指定的数据类型名称将指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象添加到集合。</summary>
      <param name="value">要向集合中为其添加 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象的数据类型的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 数组的元素复制到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> 类型的数组，包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 的元素复制到集合末尾。</summary>
      <param name="value">包含要添加到集合中的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象的 <see cref="T:System.CodeDom.CodeTypeParameterCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary>确定集合是否包含指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</summary>
      <param name="value">要在此集合中搜索的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</param>
      <returns>如果集合中包含 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary>将集合中的项复制到指定一维 <see cref="T:System.Array" /> 的指定索引处。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从集合所复制值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。  

或 - 
<see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 中的元素数大于 <paramref name="index" /> 所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于目标数组的最低索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象在该集合中的索引（如果它在该集合中存在）。</summary>
      <param name="value">要在集合中定位的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</param>
      <returns>如果在集合中找到了指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象，则为它在集合中的从零开始的索引；如果找不到，则为 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象插入集合中指定的索引位置。</summary>
      <param name="index">从零开始的索引；将在此位置插入项。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</summary>
      <param name="index">要访问的集合对象的从零开始的索引。</param>
      <returns>指定索引处的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了集合的有效索引范围。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary>表示对某类型的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary>使用指定的代码类型参数初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
      <param name="typeParameter">一个表示类型参数的类型的 <see cref="T:System.CodeDom.CodeTypeParameter" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>使用指定的数组类型和秩初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
      <param name="arrayType">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示数组的类型。</param>
      <param name="rank">数组的维数。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary>使用指定的类型名称初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
      <param name="typeName">要引用的类型的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary>使用指定的类型名称和类型参数初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
      <param name="typeName">要引用的类型的名称。</param>
      <param name="typeArguments">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 值的数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>使用指定的类型名称和代码类型引用选项初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
      <param name="typeName">要引用的类型的名称。</param>
      <param name="codeTypeReferenceOption">代码类型引用选项，是 <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 的值之一。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary>使用指定的数组类型名称和秩初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
      <param name="baseType">数组元素类型的名称。</param>
      <param name="rank">数组的维数。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary>使用指定的类型初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
      <param name="type">要引用的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>使用指定的类型和代码类型引用初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
      <param name="type">要引用的 <see cref="T:System.Type" />。</param>
      <param name="codeTypeReferenceOption">代码类型引用选项，是 <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 的值之一。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary>获取或设置数组元素的类型。</summary>
      <returns>一个指示数组元素的类型的 <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary>获取或设置数组的数组秩。</summary>
      <returns>数组的维数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary>获取或设置所引用的类型的名称。</summary>
      <returns>所引用的类型的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary>获取或设置代码类型引用选项。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 值的按位组合。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary>获取当前泛型类型引用的类型参数。</summary>
      <returns>包含当前 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 对象的类型参数的 <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeTypeReference" /> 对象集合。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 类的新实例，该实例包含指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 对象数组。</summary>
      <param name="value">用于初始化该集合的 <see cref="T:System.CodeDom.CodeTypeReference" /> 对象数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 类的新实例，该实例包含指定源集合的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，用来初始化集合。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns>新元素位置处插入的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary>使用指定的数据类型名将 <see cref="T:System.CodeDom.CodeTypeReference" /> 添加到集合。</summary>
      <param name="value">要向集合中添加的 <see cref="T:System.CodeDom.CodeTypeReference" /> 的数据类型的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary>使用指定的数据类型将 <see cref="T:System.CodeDom.CodeTypeReference" /> 添加到集合。</summary>
      <param name="value">要向集合中添加的 <see cref="T:System.CodeDom.CodeTypeReference" /> 的数据类型。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 数组的元素复制到集合末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 类型的数组，包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 的内容添加到集合的末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />，包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
      <param name="value">要在集合中搜索的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns>如果 <see cref="T:System.CodeDom.CodeTypeReference" /> 包含在集合中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary>将集合中的项复制到指定一维 <see cref="T:System.Array" /> 的指定索引处。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从集合所复制值的目标位置。</param>
      <param name="index">插入开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 参数是多维的。  
或 
<see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 中的元素数大于 <paramref name="index" /> 参数所指定的目标数组索引位置与目标数组结尾位置之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary>获取指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 在该集合中的索引（如果它在该集合中存在）。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns>如果找到，为集合中指定 <see cref="T:System.CodeDom.CodeTypeReference" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary>将 <see cref="T:System.CodeDom.CodeTypeReference" /> 插入到集合中的指定索引位置。</summary>
      <param name="index">从零开始的索引，该项应插入此位置。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary>获取或设置集合中指定索引处的 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary>表示对某数据类型的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>使用指定的类型初始化 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要引用的数据类型。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary>使用指定的数据类型名称初始化 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 类的新实例。</summary>
      <param name="type">要引用的数据类型的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary>使用指定的数据类型初始化 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 类的新实例。</summary>
      <param name="type">要引用的数据类型的实例。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary>获取或设置要引用的数据类型。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示要引用的数据类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary>指定代码类型引用的解析方式。</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary>从类型参数解析类型。</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary>从根命名空间解析类型。</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary>表示变量声明。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>使用指定的类型和名称初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类的新实例。</summary>
      <param name="type">一个 <see cref="T:System.CodeDom.CodeTypeReference" />，它指示变量的数据类型。</param>
      <param name="name">变量的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的数据类型、变量名和初始化表达式初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeReference" />，指示变量的类型。</param>
      <param name="name">变量的名称。</param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" />，指示变量的初始化表达式。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary>使用指定的数据类型名称和变量名初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类的新实例。</summary>
      <param name="type">变量的数据类型的名称。</param>
      <param name="name">变量的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的数据类型、变量名和初始化表达式初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类的新实例。</summary>
      <param name="type">变量的数据类型的名称。</param>
      <param name="name">变量的名称。</param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" />，指示变量的初始化表达式。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary>使用指定的数据类型和变量名初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类的新实例。</summary>
      <param name="type">变量的数据类型。</param>
      <param name="name">变量的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary>使用指定的数据类型、变量名和初始化表达式初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类的新实例。</summary>
      <param name="type">变量的数据类型。</param>
      <param name="name">变量的名称。</param>
      <param name="initExpression">
        <see cref="T:System.CodeDom.CodeExpression" />，指示变量的初始化表达式。</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary>获取或设置变量的初始化表达式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeExpression" />，指示变量的初始化表达式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary>获取或设置变量名。</summary>
      <returns>变量的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary>获取或设置变量的数据类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" />，它指示变量的数据类型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary>表示局部变量的引用。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary>使用指定的局部变量名称初始化 <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> 类的新实例。</summary>
      <param name="variableName">要引用的局部变量的名称。</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary>获取或设置要引用的局部变量的名称。</summary>
      <returns>要引用的局部变量的名称。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary>提供 <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 接口的示例实现。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeCompiler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary>从指定的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 获取要传递到编译器的命令参数。</summary>
      <param name="options">指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" />。</param>
      <returns>命令参数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary>获取编译器可执行文件的名称。</summary>
      <returns>编译器可执行文件的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary>获取用于源文件的文件扩展名。</summary>
      <returns>用于源文件的文件扩展名。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>使用指定选项编译指定的编译单元，并返回编译结果。</summary>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="e">一个指示要编译的源的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 对象。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>使用指定选项编译指定的编译单元，并返回编译结果。</summary>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="ea">指示要编译的源的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 对象数组。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 <see langword="null" />。  
或 
 <paramref name="ea" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>使用指定选项编译指定文件，并返回编译结果。</summary>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="fileName">要编译的文件名。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 <see langword="null" />。  
或 
 <paramref name="fileName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>使用指定选项编译指定文件，并返回编译结果。</summary>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="fileNames">指示要编译的文件的文件名的字符串数组。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 <see langword="null" />。  

或 - 
<paramref name="fileNames" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>使用指定选项编译指定的源代码字符串，并返回编译结果。</summary>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="source">要编译的源代码字符串。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>使用指定选项编译指定的源代码字符串，并返回编译结果。</summary>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="sources">包含要编译的源代码的字符串数组。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 <see langword="null" />。  

或 - 
<paramref name="sources" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>获取调用编译器以生成响应文件时使用的命令参数。</summary>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="cmdArgs">命令参数字符串。</param>
      <returns>用于生成响应文件的命令参数；如果没有响应文件参数，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary>联接指定的字符串数组。</summary>
      <param name="sa">要联接的字符串数组。</param>
      <param name="separator">要使用的分隔符。</param>
      <returns>串联字符串。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary>处理指定 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 中的指定行。</summary>
      <param name="results">指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" />。</param>
      <param name="line">要处理的行。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />。</summary>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="e">指示要编译的源的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>有关此成员的说明，请参见 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />。</summary>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="ea">指示要编译的源的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 对象数组。</param>
      <returns>编译的结果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />。</summary>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="fileName">要编译的文件名。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>有关此成员的说明，请参见 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />。</summary>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="fileNames">指示要编译的文件名的字符串数组。</param>
      <returns>编译的结果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />。</summary>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="source">一个指示要编译的源代码的字符串。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>有关此成员的说明，请参见 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />。</summary>
      <param name="options">一个指示编译器选项的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象。</param>
      <param name="sources">指示要编译的源代码的字符串数组。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary>为 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现提供基类。 此类为抽象类。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>基于包含在 <see cref="N:System.CodeDom" /> 对象的指定数组中的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 树，使用指定的编译器设置编译程序集。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译的设置。</param>
      <param name="compilationUnits">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> 类型数组，指示要编译的代码。</param>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象，它指示编译的结果。</returns>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>从包含在指定文件中的源代码，使用指定的编译器设置编译程序集。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译的设置。</param>
      <param name="fileNames">要编译的文件名称的数组。</param>
      <returns>指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</returns>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>从包含源代码的字符串的指定数组，使用指定的编译器设置编译程序集。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示此编译的编译器设置。</param>
      <param name="sources">要编译的源代码字符串的数组。</param>
      <returns>指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</returns>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary>在派生类中重写时，创建一个新的代码编译器。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />，可用于编译基于 <see cref="N:System.CodeDom" /> 的源代码表示形式。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary>创建指定值的转义标识符。</summary>
      <param name="value">要为其创建转义标识符的字符串。</param>
      <returns>值的转义标识符。</returns>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary>在派生类中重写时，创建一个新的代码生成器。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />，可用于生成基于 <see cref="N:System.CodeDom" /> 的源代码表示形式。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary>在派生类中重写时，使用指定的 <see cref="T:System.IO.TextWriter" /> 创建新的代码生成器以用于输出。</summary>
      <param name="output">用于输出的 <see cref="T:System.IO.TextWriter" />。</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />，可用于生成基于 <see cref="N:System.CodeDom" /> 的源代码表示形式。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary>在派生类中重写时，使用指定文件名创建新的代码生成器以用于输出。</summary>
      <param name="fileName">要输出到的文件名。</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />，可用于生成基于 <see cref="N:System.CodeDom" /> 的源代码表示形式。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary>在派生类中重写时，创建一个新的代码分析器。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeParser" />，可用于分析源代码。 此基实现总是返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary>获取指定语言的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例。</summary>
      <param name="language">语言名称。</param>
      <returns>为指定语言名称实现的 CodeDOM 提供程序。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="language" /> 在此计算机上没有已配置的提供程序。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="language" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>获取指定的语言和提供程序选项的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例。</summary>
      <param name="language">语言名称。</param>
      <param name="providerOptions">来自配置文件的提供程序选项的集合。</param>
      <returns>为指定语言名称和选项实现的 CodeDOM 提供程序。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary>为指定的值创建有效标识符。</summary>
      <param name="value">要为其生成有效标识符的字符串。</param>
      <returns>指定值的有效标识符。</returns>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary>获取用于当前语言的源代码文件的默认文件扩展名。</summary>
      <returns>与当前语言的源文件扩展名相对应的文件扩展名。 此基实现总是返回 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 编译单元生成代码，并使用指定的选项将代码发送到指定的文本编写器。</summary>
      <param name="compileUnit">要为其生成代码的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <param name="writer">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 表达式生成代码，并使用指定的选项将代码发送到指定的文本编写器。</summary>
      <param name="expression">一个 <see cref="T:System.CodeDom.CodeExpression" /> 对象，指示要为其生成代码的表达式。</param>
      <param name="writer">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 成员声明生成代码，并使用指定的选项将代码发送到指定的文本编写器。</summary>
      <param name="member">一个 <see cref="T:System.CodeDom.CodeTypeMember" /> 对象，指示要为其生成代码的成员。</param>
      <param name="writer">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法不会在派生类中被重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 命名空间生成代码，并使用指定的选项将代码发送到指定的文本编写器。</summary>
      <param name="codeNamespace">一个 <see cref="T:System.CodeDom.CodeNamespace" /> 对象，指示要为其生成代码的命名空间。</param>
      <param name="writer">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 语句生成代码，并使用指定的选项将代码发送到指定的文本编写器。</summary>
      <param name="statement">
        <see cref="T:System.CodeDom.CodeStatement" />，包含要为其生成代码的 CodeDOM 元素。</param>
      <param name="writer">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 类型声明生成代码，并使用指定的选项将代码发送到指定的文本编写器。</summary>
      <param name="codeType">一个 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象，指示要为其生成代码的类型。</param>
      <param name="writer">输出代码将被发送到的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary>返回此计算机的语言提供程序和编译器配置设置。</summary>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 类型的数组，表示所有配置的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现的设置。</returns>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary>返回指定语言的语言提供程序和编译器配置设置。</summary>
      <param name="language">语言名称。</param>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 对象，由已配置的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现的设置填充。</returns>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="language" /> 在此计算机上没有已配置的提供程序。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="language" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary>获取指定数据类型的 <see cref="T:System.ComponentModel.TypeConverter" />。</summary>
      <param name="type">要为其检索类型转换器的对象类型。</param>
      <returns>指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />；如果无法找到指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary>返回与指定文件扩展名关联的语言名称，如 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 编译器配置节中所配置的那样。</summary>
      <param name="extension">文件扩展名。</param>
      <returns>与文件扩展名关联的语言名称，如 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 编译器配置设置中所配置的那样。</returns>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="extension" /> 在此计算机上没有已配置的语言提供程序。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="extension" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>获取由指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 指示的类型。</summary>
      <param name="type">指示返回类型的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns>指定类型的文本表示形式，针对此代码生成器生成代码时所用的语言进行了格式设置。 例如，在 Visual Basic 中，为 <see cref="T:System.CodeDom.CodeTypeReference" /> 类型传入 <see cref="T:System.Int32" /> 将返回“Integer”。</returns>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary>测试文件扩展名是否在计算机上配置了关联的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现。</summary>
      <param name="extension">文件扩展名。</param>
      <returns>如果为指定的文件扩展名配置了 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extension" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary>测试某语言是否已在计算机上配置了 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现。</summary>
      <param name="language">语言名称。</param>
      <returns>如果为指定语言配置了 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="language" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary>返回一个值，该值指示指定的值是否是当前语言的有效标识符。</summary>
      <param name="value">要验证为一个有效标识符的值。</param>
      <returns>如果 <paramref name="value" /> 参数是有效标识符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary>获取语言功能标识符。</summary>
      <returns>指示语言的特殊功能的 <see cref="T:System.CodeDom.Compiler.LanguageOptions" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary>将从指定文本流读取的代码编译进 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
      <param name="codeStream">用于读取待分析代码的 <see cref="T:System.IO.TextReader" /> 对象。</param>
      <returns>
        <see cref="T:System.CodeDom.CodeCompileUnit" />，包含已分析代码的表示形式。</returns>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>返回一个值，该值指示是否提供了指定的代码生成支持。</summary>
      <param name="generatorSupport">一个 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 对象，指示要验证的代码生成支持类型。</param>
      <returns>如果提供了指定的代码生成支持，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.NotImplementedException">此方法和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 方法均不在派生类中重写。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary>提供 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 接口的示例实现。 此类为抽象类。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeGenerator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary>生成行继续符并在新的一行上输出指定的字符串。</summary>
      <param name="st">要写在新行上的字符串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>创建指定值的转义标识符。</summary>
      <param name="value">要为其创建转义标识符的字符串。</param>
      <returns>值的转义标识符。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary>为指定的值创建有效标识符。</summary>
      <param name="value">要为其创建有效标识符的字符串。</param>
      <returns>该值的有效标识符。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary>获取当前类的代码类型声明。</summary>
      <returns>当前类的代码类型声明。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary>获取类的当前成员。</summary>
      <returns>类的当前成员。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary>获取当前成员名称。</summary>
      <returns>当前成员名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary>获取当前类名。</summary>
      <returns>当前类名。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary>为指定的参数引用表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary>为指定的数组创建表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeArrayCreateExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary>为指定的数组索引器表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary>为指定的赋值语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeAssignStatement" />，指示要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary>为指定的附加事件语句生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeAttachEventStatement" />，指示要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>为指定的特性块结尾生成代码。</summary>
      <param name="attributes">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，指示要为其生成代码的特性块结尾。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>为指定的特性块起始生成代码。</summary>
      <param name="attributes">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />，指示要为其生成代码的特性块起始。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary>为指定的基引用表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary>为指定的二进制运算符表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />，指示要为其生成代码的表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary>为指定的转换表达式生成代码。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeCastExpression" />，指示要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>使用指定的文本编写器和代码生成器选项为指定的类成员生成代码。</summary>
      <param name="member">要为其生成代码的类成员。</param>
      <param name="writer">要向其输出代码的文本编写器。</param>
      <param name="options">要在生成代码时使用的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> 属性不为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary>为指定的注释生成代码。</summary>
      <param name="e">要为其生成代码的 <see cref="T:System.CodeDom.CodeComment" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary>为指定的注释语句生成代码。</summary>
      <param name="e">为其生成代码的语句。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 的 <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> 属性未设置。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary>为指定的注释语句生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>为指定的编译单元生成代码。</summary>
      <param name="e">要为其生成代码的编译单元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary>为编译单元结尾生成代码。</summary>
      <param name="e">要为其生成代码的编译单元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary>为编译单元起始生成代码。</summary>
      <param name="e">要为其生成代码的编译单元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary>为指定的条件语句生成代码。</summary>
      <param name="e">为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的构造函数生成代码。</summary>
      <param name="e">要为其生成代码的构造函数。</param>
      <param name="c">此构造函数构造的对象类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary>为指定的十进制值生成代码。</summary>
      <param name="d">为其生成代码的十进制值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary>为对默认值的指定引用生成代码。</summary>
      <param name="e">要为其生成代码的引用。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary>为指定的委托创建表达式生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary>为指定的委托调用表达式生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary>为指定的方向表达式生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary>为指定的代码指令生成代码。</summary>
      <param name="directives">要为其生成代码的代码指令。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary>为双精度浮点数生成代码。</summary>
      <param name="d">要为其生成代码的值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的入口点方法生成代码。</summary>
      <param name="e">代码的入口点。</param>
      <param name="c">声明类型的代码。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的事件生成代码。</summary>
      <param name="e">要为其生成代码的成员事件。</param>
      <param name="c">发生此事件的对象的类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary>为指定的事件引用表达式生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary>为指定的代码表达式生成代码。</summary>
      <param name="e">要为其生成代码的代码表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 不是有效的 <see cref="T:System.CodeDom.CodeStatement" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary>为指定的表达式语句生成代码。</summary>
      <param name="e">为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary>为指定的成员字段生成代码。</summary>
      <param name="e">要为其生成代码的字段。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary>为指定的字段引用表达式生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary>为指定的 <see langword="goto" /> 语句生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary>为指定的索引器表达式生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary>为指定的迭代语句生成代码。</summary>
      <param name="e">为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary>为指定的标记语句生成代码。</summary>
      <param name="e">为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary>为指定的行杂注结尾生成代码。</summary>
      <param name="e">要为其生成代码的行杂注的结尾。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary>为指定的行杂注起始生成代码。</summary>
      <param name="e">要为其生成代码的行杂注起始。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的方法生成代码。</summary>
      <param name="e">要为其生成代码的成员方法。</param>
      <param name="c">发生此方法的对象的类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary>为指定的方法调用表达式生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary>为指定的方法引用表达式生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary>为指定的方法返回语句生成代码。</summary>
      <param name="e">为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary>为指定的命名空间生成代码。</summary>
      <param name="e">要为其生成代码的命名空间。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary>为命名空间结尾生成代码。</summary>
      <param name="e">要为其生成代码的命名空间。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary>为指定的命名空间导入生成代码。</summary>
      <param name="e">要为其生成代码的命名空间导入。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary>为指定的命名空间导入生成代码。</summary>
      <param name="e">要为其生成代码的命名空间导入。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary>为指定编译单元中的命名空间生成代码。</summary>
      <param name="e">要为其生成命名空间的编译单元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary>为命名空间起始生成代码。</summary>
      <param name="e">要为其生成代码的命名空间。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary>为指定的对象创建表达式生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>为指定的参数声明表达式生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary>为指定的基元表达式生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 使用无效的数据类型。 只有以下数据类型才是有效的： 

string 
char 
byte 
Int16 
Int32 
Int64 
Single 
Double 
Decimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的属性生成代码。</summary>
      <param name="e">要为其生成代码的属性。</param>
      <param name="c">发生此属性的对象的类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary>为指定的属性引用表达式生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary>为指定的属性设置值引用表达式生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary>为指定的移除事件语句生成代码。</summary>
      <param name="e">为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary>为单精度浮点数生成代码。</summary>
      <param name="s">要为其生成代码的值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary>输出指定的原义代码片段编译单元的代码。</summary>
      <param name="e">要为其生成代码的原义代码片段编译单元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary>输出指定的原义代码片段表达式的代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary>输出指定的原义代码片段类成员的代码。</summary>
      <param name="e">要为其生成代码的成员。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary>输出指定的原义代码片段语句的代码。</summary>
      <param name="e">为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary>为指定的语句生成代码。</summary>
      <param name="e">为其生成代码的语句。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 不是有效的 <see cref="T:System.CodeDom.CodeStatement" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary>为指定的语句集合生成代码。</summary>
      <param name="stms">要为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary>为指定的引用表达式生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary>为指定的引发异常语句生成代码。</summary>
      <param name="e">为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary>为指定的 <see langword="try...catch...finally" /> 语句生成代码。</summary>
      <param name="e">为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary>为指定的类构造函数生成代码。</summary>
      <param name="e">要为其生成代码的类构造函数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的类结尾生成代码。</summary>
      <param name="e">要为其生成代码的类结尾。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary>为指定的表达式类型生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary>为指定的类型引用表达式生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary>为指定的命名空间及其包含的类生成代码。</summary>
      <param name="e">要为其生成类的命名空间。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的类开头生成代码。</summary>
      <param name="e">要为其生成代码的类开头。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary>为指定的变量声明语句生成代码。</summary>
      <param name="e">为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary>为指定的变量引用表达式生成代码。</summary>
      <param name="e">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>获取指定数据类型的名称。</summary>
      <param name="value">将返回其名称的类型。</param>
      <returns>数据类型引用的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary>获取或设置每个缩进级别的缩进空间量。</summary>
      <returns>每个缩进级别的缩进间隔数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary>获取一个值，该值指示正在生成的当前对象是否为类。</summary>
      <returns>如果当前对象是类，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary>获取一个值，该值指示正在生成的当前对象是否为委托。</summary>
      <returns>如果当前对象是委托，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary>获取一个值，该值指示正在生成的当前对象是否为枚举。</summary>
      <returns>如果当前对象是枚举，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary>获取一个值，该值指示正在生成的当前对象是否为接口。</summary>
      <returns>如果当前对象是接口，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary>获取一个值，该值指示生成的当前对象是否为值类型或结构。</summary>
      <returns>如果当前对象为值类型或结构，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary>获取一个值，该值指示指定的值是否为有效的标识符。</summary>
      <param name="value">要测试其是否与有效的标识符发生冲突的值。</param>
      <returns>如果该值是有效的标识符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary>获取一个值，该值指示指定的字符串是否为有效的标识符。</summary>
      <param name="value">要测试其有效性的字符串。</param>
      <returns>如果指定的字符串是有效标识符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary>获取表示 <see langword="null" /> 的标记。</summary>
      <returns>表示 <see langword="null" /> 的标记。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary>获取供代码生成器使用的选项。</summary>
      <returns>一个对象，指示供代码生成器使用的选项。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary>获取用于输出的文本编写器。</summary>
      <returns>要用于输出的文本编写器。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary>输出特性块中的一个参数。</summary>
      <param name="arg">要为其生成代码的特性参数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>为指定的特性声明集合生成代码。</summary>
      <param name="attributes">要为其生成代码的特性。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary>为指定的 <see cref="T:System.CodeDom.FieldDirection" /> 生成代码。</summary>
      <param name="dir">指示字段特性的枚举值之一。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary>为指定的表达式列表生成代码。</summary>
      <param name="expressions">要为其生成代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary>为指定的表达式列表生成代码。</summary>
      <param name="expressions">要为其生成代码的表达式。</param>
      <param name="newlineBetweenItems">如果在每项之后插入新行，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>输出对应于指定特性的字段范围修饰符。</summary>
      <param name="attributes">指定特性的枚举值之一。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary>输出指定的标识符。</summary>
      <param name="ident">要输出的标识符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary>为指定的成员访问修饰符生成代码。</summary>
      <param name="attributes">枚举值之一，指示要为其生成代码的成员访问修饰符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>为指定的成员范围修饰符生成代码。</summary>
      <param name="attributes">枚举值之一，指示要为其生成代码的成员范围修饰符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary>为指定的运算符生成代码。</summary>
      <param name="op">要为其生成代码的运算符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>为指定的参数生成代码。</summary>
      <param name="parameters">要为其生成代码的参数声明表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary>为指定的类型生成代码。</summary>
      <param name="typeRef">要为其生成代码的类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary>为指定的类型特性生成代码。</summary>
      <param name="attributes">枚举值之一，指示要为其生成代码的类型特性。</param>
      <param name="isStruct">如果类型是结构，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="isEnum">如果类型是枚举，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary>为指定的对象类型和名称对生成代码。</summary>
      <param name="typeRef">类型。</param>
      <param name="name">对象的名称。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary>通过用转义码格式化指定的字符串来转换它。</summary>
      <param name="value">要转换的字符串。</param>
      <returns>已转换的字符串。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>获取一个值，该值指示是否提供了指定的代码生成支持。</summary>
      <param name="support">要测试的代码生成支持的类型。</param>
      <returns>如果提供了指定的代码生成支持，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary>创建指定值的转义标识符。</summary>
      <param name="value">要为其创建转义标识符的字符串。</param>
      <returns>值的转义标识符。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary>为指定的值创建有效标识符。</summary>
      <param name="value">要为其生成有效标识符的字符串。</param>
      <returns>指定值的有效标识符。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>生成指定代码文档对象模型 (CodeDOM) 编译单元的代码，并使用指定选项将其输出到指定的文本编写器。</summary>
      <param name="e">要为其生成代码的 CodeDOM 编译单元。</param>
      <param name="w">要向其输出代码的文本编写器。</param>
      <param name="o">要用于生成代码的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> 不可用。 <paramref name="w" /> 可能在调用方法之前已关闭。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>生成指定的代码文档对象模型 (CodeDOM) 表达式的代码，并将其输出到指定文本编写器。</summary>
      <param name="e">要为其生成代码的表达式。</param>
      <param name="w">要向其输出代码的文本编写器。</param>
      <param name="o">要用于生成代码的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> 不可用。 <paramref name="w" /> 可能在调用方法之前已关闭。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>生成指定的代码文档对象模型 (CodeDOM) 命名空间的代码，并使用指定选项将其输出到指定文本编写器。</summary>
      <param name="e">要为其生成代码的命名空间。</param>
      <param name="w">要向其输出代码的文本编写器。</param>
      <param name="o">要用于生成代码的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> 不可用。 <paramref name="w" /> 可能在调用方法之前已关闭。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>生成指定代码文档对象模型 (CodeDOM) 语句的代码，并使用指定选项将其输出到指定的文本编写器。</summary>
      <param name="e">包含要转换的 CodeDOM 元素的语句。</param>
      <param name="w">要向其输出代码的文本编写器。</param>
      <param name="o">要用于生成代码的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> 不可用。 <paramref name="w" /> 可能在调用方法之前已关闭。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>生成指定代码文档对象模型 (CodeDOM) 类型声明的代码，并使用指定选项将其输出到指定的文本编写器。</summary>
      <param name="e">要为其生成代码的类型。</param>
      <param name="w">要向其输出代码的文本编写器。</param>
      <param name="o">要用于生成代码的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> 不可用。 <paramref name="w" /> 可能在调用方法之前已关闭。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>获取由指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 指示的类型。</summary>
      <param name="type">要返回的类型。</param>
      <returns>数据类型引用的名称。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary>获取一个值，该值指示指定的值是否是当前语言的有效标识符。</summary>
      <param name="value">要测试的值。</param>
      <returns>如果 <paramref name="value" /> 参数是有效标识符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>获取一个值，该值指示该生成器是否支持指定的 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 对象表示的语言功能。</summary>
      <param name="support">要为其测试生成器的功能。</param>
      <returns>如果支持指定的功能，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary>如果指定的值不是一个有效的标识符，将引发异常。</summary>
      <param name="value">要验证的标识符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary>如果指定的字符串不是有效的标识符，将引发异常。</summary>
      <param name="value">要测试其标识符有效性的标识符。</param>
      <exception cref="T:System.ArgumentException">如果指定的标识符无效，或与保留关键字或语言关键字冲突。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary>尝试验证指定的 <see cref="T:System.CodeDom.CodeObject" /> 或 <see cref="N:System.CodeDom" /> 树中包含的每个标识符字段。</summary>
      <param name="e">要测试无效标识符的对象。</param>
      <exception cref="T:System.ArgumentException">指定的 <see cref="T:System.CodeDom.CodeObject" /> 包含无效标识符。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary>表示代码生成器使用的一组选项。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> 类的新实例。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary>获取或设置一个值，该值指示是否在成员之间插入空行。</summary>
      <returns>如果应插入空行，则为 <see langword="true" />；否则为 <see langword="false" />。 默认情况下，此属性的值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary>获取或设置用于大括号的样式。</summary>
      <returns>包含要使用的大括号样式的字符串。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary>获取或设置一个值，该值指示是否在前面每个 <see langword="else" /> 或 <see langword="catch" /> 块的结束行处追加 <see langword="finally" />、<see langword="if" /> 或 <see langword="try" /> 块（包括括号）。</summary>
      <returns>如果应追加 else，则为 <see langword="true" />；否则为 <see langword="false" />。 此属性的默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary>获取或设置用于缩进的字符串。</summary>
      <returns>包含用于缩进的字符的字符串。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary>获取或设置指定索引处的对象。</summary>
      <param name="index">与要检索对象相关联的名称。</param>
      <returns>与指定名称相关联的对象。 如果集合中不存在与指定名称相关联的对象，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary>获取或设置一个值，该值指示是否按成员在成员集合中出现的顺序生成成员。</summary>
      <returns>如果要按成员在成员集合中出现的顺序生成成员，则为 <see langword="true" />；否则为 <see langword="false" />。 此属性的默认值为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary>提供 <see cref="T:System.CodeDom.Compiler.ICodeParser" /> 接口的空实现。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeParser" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary>将指定文本流编译到 <see cref="T:System.CodeDom.CodeCompileUnit" /> 中。</summary>
      <param name="codeStream">用于读取待分析代码的 <see cref="T:System.IO.TextReader" />。</param>
      <returns>包含了分析代码后所生成的代码模型的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary>表示编译器错误或警告。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary>使用指定的文件名、行、列、错误号和错误文本初始化 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 类的新实例。</summary>
      <param name="fileName">编译器遇到错误时正在编译的文件的文件名。</param>
      <param name="line">错误源所在的行。</param>
      <param name="column">错误源所在的列。</param>
      <param name="errorNumber">错误的错误号。</param>
      <param name="errorText">错误消息文本。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary>获取或设置错误源所在的列号。</summary>
      <returns>编译器遇到错误时所在的源文件列号。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary>获取或设置错误号。</summary>
      <returns>字符串形式的错误号。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary>获取或设置错误消息的文本。</summary>
      <returns>错误消息的文本。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary>获取或设置包含导致错误的代码的源文件的文件名。</summary>
      <returns>包含导致错误的代码的源文件的文件名。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary>获取或设置一个值，该值指示错误是否是警告。</summary>
      <returns>如果错误是警告，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary>获取或设置错误源所在的行号。</summary>
      <returns>编译器遇到错误时所在的源文件行号。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary>提供对象的 <see cref="M:System.Object.ToString" /> 方法的实现。</summary>
      <returns>编译器错误的字符串表示形式。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary>表示 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象集合。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary>初始化包含指定的 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 对象数组的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 新实例。</summary>
      <param name="value">用来初始化集合的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 类的新实例，该实例包含指定 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 的内容。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 对象，用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary>将指定的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象添加到错误集合中。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象。</param>
      <returns>新元素位置处插入的索引。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary>将数组元素复制到错误集合的末尾。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> 类型的数组，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>将指定编译器的错误集合内容添加到错误集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 对象，其中包含要添加到集合中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary>获取一个值，该值指示集合是否包含指定的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象。</summary>
      <param name="value">要查找的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
      <returns>如果 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 包含在集合中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary>将集合的值复制到一维 <see cref="T:System.Array" /> 实例的指定索引位置。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，是从 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 复制的值的目标。</param>
      <param name="index">数组中复制起始处的索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 参数指示的数组是多维的。  
或 
<see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 中的元素数目大于 <paramref name="arrayIndex" /> 参数指示的数组中的 <paramref name="array" /> 参数索引值和 <paramref name="array" /> 参数指示的数组末尾之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于 <paramref name="array" /> 参数指示的数组下限。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary>获取一个值，该值指示集合是否包含错误。</summary>
      <returns>如果集合包含错误，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary>获取一个值，该值指示集合是否包含警告。</summary>
      <returns>如果集合包含警告，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary>获取指定的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象在集合中的索引（如果它已存在于该集合中）。</summary>
      <param name="value">要查找的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
      <returns>如果 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 中存在指定 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 的索引，则为该索引；否则为 -1。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary>将指定的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 插入集合中的指定索引处。</summary>
      <param name="index">从零开始的索引，应在此处插入编译器错误。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</summary>
      <param name="index">要在集合中定位的项的从零开始的索引。</param>
      <returns>每个有效索引位置的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数指示的索引值不在集合的有效索引范围内。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary>从集合中移除特定的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</summary>
      <param name="value">要从 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 移除的 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />。</param>
      <exception cref="T:System.ArgumentException">未在集合中找到指定的对象。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary>表示语言提供程序的配置设置。 此类不能被继承。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary>获取已配置的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现的类型。</summary>
      <returns>一个只读 <see cref="T:System.Type" /> 实例，它表示已配置的语言提供程序类型。</returns>
      <exception cref="T:System.Configuration.ConfigurationException">此计算机上没有配置语言提供程序。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">不能定位类型，因为它是 <see langword="null" /> 或空字符串。  
或 
不能定位类型，因为不能在配置文件中找到 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 的名称。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary>获取语言提供程序实现的配置的编译器设置。</summary>
      <returns>一个只读 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 实例，它包含为语言提供程序配置的编译器选项和设置。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary>返回当前语言提供程序设置的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例。</summary>
      <returns>与语言提供程序配置关联的 CodeDOM 提供程序。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>返回当前语言提供程序设置和指定选项的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例。</summary>
      <param name="providerOptions">来自配置文件的提供程序选项的集合。</param>
      <returns>与语言提供程序配置和指定选项关联的 CodeDOM 提供程序。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">提供程序不支持选项。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary>确定指定的对象是否表示与当前 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 相同的语言提供程序和编译器设置。</summary>
      <param name="o">将与当前 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 进行比较的对象。</param>
      <returns>如果 <paramref name="o" /> 为 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 对象并且它的值与此实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary>返回受语言提供程序支持的文件扩展名。</summary>
      <returns>受语言提供程序支持的文件扩展名数组。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 实例的 32 位带符号整数哈希代码，适合在哈希算法和数据结构（如哈希表）中使用。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary>获取受语言提供程序支持的语言名称。</summary>
      <returns>受语言提供程序支持的语言名称数组。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary>返回一个值，该值指示是否在计算机上配置了语言提供程序实现。</summary>
      <returns>如果在计算机上配置了语言提供程序实现类型，则为 <see langword="true" />；否则，为<see langword="false" />。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary>表示用于调用编译器的参数。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary>使用指定的程序集名称初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类的新实例。</summary>
      <param name="assemblyNames">要引用的程序集的名称。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary>使用指定的程序集名称和输出文件名初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类的新实例。</summary>
      <param name="assemblyNames">要引用的程序集的名称。</param>
      <param name="outputName">输出文件名。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary>使用指定的程序集名称、输出名和一个指示是否包含调试信息的值来初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类的新实例。</summary>
      <param name="assemblyNames">要引用的程序集的名称。</param>
      <param name="outputName">输出文件名。</param>
      <param name="includeDebugInformation">包含调试信息，则为 <see langword="true" />；排除调试信息，则为 <see langword="false" />。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary>获取或设置调用编译器时使用的可选命令行参数。</summary>
      <returns>用于编译器的任何附加命令行参数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary>获取或设置包含基类类型（如 <see cref="T:System.Object" />、<see cref="T:System.String" /> 或 <see cref="T:System.Int32" />）的核心或标准程序集的名称。</summary>
      <returns>包含基本类型的核心程序集的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary>获取要在编译程序集输出时包含的 .NET Framework 资源文件。</summary>
      <returns>一个集合，包含要在生成的程序集中包含的 .NET Framework 资源的文件路径。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary>获取或设置一个值，该值指示是否生成可执行文件。</summary>
      <returns>如果应生成可执行文件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary>获取或设置一个值，该值指示是否在内存中生成输出。</summary>
      <returns>如果编译器应在内存中生成输出，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary>获取或设置一个值，该值指示是否在已编译的可执行文件中包含调试信息。</summary>
      <returns>如果应生成调试信息，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary>获取当前源中引用的 .NET Framework 资源文件。</summary>
      <returns>一个集合，包含源要引用的 .NET Framework 资源的文件路径。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary>获取或设置主类的名称。</summary>
      <returns>主类的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary>获取或设置输出程序集的名称。</summary>
      <returns>输出程序集的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary>获取当前项目所引用的程序集。</summary>
      <returns>一个集合，包含由源引用以进行编译的程序集名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary>获取或设置包含临时文件的集合。</summary>
      <returns>包含临时文件的集合。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary>获取或设置一个值，该值指示是否将警告视为错误。</summary>
      <returns>如果应将警告视为错误，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary>获取或设置在创建编译器进程时使用的用户标记。</summary>
      <returns>要使用的用户标记。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary>获取或设置使编译器中止编译的警告等级。</summary>
      <returns>使编译器中止编译的警告级别。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary>获取或设置要链接到已编译程序集中的 Win32 资源文件的文件名。</summary>
      <returns>要链接到已编译程序集中的 Win32 资源文件。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary>表示从编译器返回的编译结果。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary>初始化使用指定临时文件的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 类的新实例。</summary>
      <param name="tempFiles">
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，用于管理和存储对编译期间生成的中间文件的引用。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary>获取或设置已编译的程序集。</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" />，指示已编译的程序集。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary>获取编译器错误和警告的集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />，指示由编译产生的错误和警告（如果有）。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary>获取或设置编译器的返回值。</summary>
      <returns>编译器的返回值。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary>获取编译器输出消息。</summary>
      <returns>包含输出消息的 <see cref="T:System.Collections.Specialized.StringCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary>获取或设置已编译程序集的路径。</summary>
      <returns>程序集的路径；如果程序集是在内存中生成的，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary>获取或设置要使用的临时文件集合。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，用于管理和存储对编译期间生成的中间文件的引用。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary>为调用编译器提供命令执行功能。 此类不能被继承。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary>使用指定的临时文件执行命令，并等待调用返回。</summary>
      <param name="cmd">要执行的命令。</param>
      <param name="tempFiles">
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，用于管理和存储对编译期间生成的中间文件的引用。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>使用指定的用户标记和临时文件执行指定的命令并等待调用返回，并将来自编译器的输出和错误信息存储在指定的字符串中。</summary>
      <param name="userToken">用来启动编译器进程的标记。</param>
      <param name="cmd">要执行的命令。</param>
      <param name="tempFiles">
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，用于管理和存储对编译期间生成的中间文件的引用。</param>
      <param name="outputName">对字符串的引用，该字符串将存储编译器的消息输出。</param>
      <param name="errorName">对字符串的引用，该字符串将存储遇到的一个或多个错误的名称。</param>
      <returns>来自编译器的返回值。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>使用指定的用户标记、当前目录和临时文件执行指定的命令；然后等待调用返回，并将来自编译器的输出和错误信息存储在指定的字符串中。</summary>
      <param name="userToken">用来启动编译器进程的标记。</param>
      <param name="cmd">要执行的命令。</param>
      <param name="currentDir">从中启动进程的目录。</param>
      <param name="tempFiles">
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，用于管理和存储对编译期间生成的中间文件的引用。</param>
      <param name="outputName">对字符串的引用，该字符串将存储编译器的消息输出。</param>
      <param name="errorName">对字符串的引用，该字符串将存储遇到的一个或多个错误的名称。</param>
      <returns>来自编译器的返回值。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>使用指定的临时文件执行指定的命令并等待调用返回，并将来自编译器的输出和错误信息存储在指定的字符串中。</summary>
      <param name="cmd">要执行的命令。</param>
      <param name="tempFiles">
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，用于管理和存储对编译期间生成的中间文件的引用。</param>
      <param name="outputName">对字符串的引用，该字符串将存储编译器的消息输出。</param>
      <param name="errorName">对字符串的引用，该字符串将存储遇到的一个或多个错误的名称。</param>
      <returns>来自编译器的返回值。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>使用指定的当前目录和临时文件执行指定的命令并等待调用返回，并将来自编译器的输出和错误信息存储在指定的字符串中。</summary>
      <param name="cmd">要执行的命令。</param>
      <param name="currentDir">当前目录。</param>
      <param name="tempFiles">
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，用于管理和存储对编译期间生成的中间文件的引用。</param>
      <param name="outputName">对字符串的引用，该字符串将存储编译器的消息输出。</param>
      <param name="errorName">对字符串的引用，该字符串将存储遇到的一个或多个错误的名称。</param>
      <returns>来自编译器的返回值。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary>定义用于确定代码生成器是否支持特定代码元素类型的标识符。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary>指示支持数组的数组的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary>指示支持程序集特性的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary>指示支持连锁构造函数参数的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary>指示支持复杂表达式的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary>指示支持委托声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary>指示支持枚举声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary>指示支持事件声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary>指示支持索引器属性的声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary>指示支持接口声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary>指示支持值类型声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary>指示支持程序入口点方法指定的生成器。 这在生成可执行文件时使用。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary>指示支持泛型类型声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary>指示支持泛型类型引用的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary>指示支持 goto 语句的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary>指示支持引用多维数组的生成器。 当前，CodeDom 不能用于实例化多维数组。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary>指示生成器支持实现多个接口的成员声明。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary>指示生成器支持嵌套类型声明。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary>指示支持参数特性的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary>指示支持分部类型声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary>指示支持公共静态成员的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary>指示生成器支持引用和输出参数。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary>指示支持使用 .NET Framework 资源的编译的生成器。 可以是直接编译为程序集的默认资源或在附属程序集中引用的资源。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary>指示支持返回类型特性声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary>指示生成器支持静态构造函数。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary>指示支持 <see langword="try...catch" /> 语句的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary>指示生成器支持使用 Win32 资源进行编译。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary>定义用于调用源代码编译的接口或使用指定编译器的 CodeDOM 树。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>使用指定的编译器设置从指定的 <see cref="N:System.CodeDom" /> 所包含的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 树中编译程序集。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译设置。</param>
      <param name="compilationUnit">
        <see cref="T:System.CodeDom.CodeCompileUnit" />，指示要编译的代码。</param>
      <returns>指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>基于包含在 <see cref="N:System.CodeDom" /> 对象的指定数组中的 <see cref="T:System.CodeDom.CodeCompileUnit" /> 树，使用指定的编译器设置编译程序集。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译设置。</param>
      <param name="compilationUnits">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> 类型数组，指示要编译的代码。</param>
      <returns>指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>从包含在指定文件中的源代码，使用指定的编译器设置编译程序集。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译设置。</param>
      <param name="fileName">包含要编译的源代码的文件的文件名。</param>
      <returns>指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>从包含在指定文件中的源代码，使用指定的编译器设置编译程序集。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译设置。</param>
      <param name="fileNames">要编译的文件的文件名。</param>
      <returns>指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>从包含源代码的指定字符串，使用指定的编译器设置编译程序集。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译设置。</param>
      <param name="source">要编译的源代码。</param>
      <returns>指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>从包含源代码的字符串的指定数组，使用指定的编译器设置编译程序集。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译设置。</param>
      <param name="sources">要编译的源代码字符串。</param>
      <returns>指示编译结果的 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 对象。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary>定义用于生成代码的接口。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>创建指定值的转义标识符。</summary>
      <param name="value">要为其创建转义标识符的字符串。</param>
      <returns>值的转义标识符。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary>为指定的值创建有效标识符。</summary>
      <param name="value">要为其生成有效标识符的字符串。</param>
      <returns>指定值的有效标识符。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>生成指定代码文档对象模型 (CodeDOM) 编译单元的代码，并使用指定选项将其输出到指定的文本编写器。</summary>
      <param name="e">要为其生成代码的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <param name="w">向其中输出代码的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>生成指定的代码文档对象模型 (CodeDOM) 表达式的代码，并将其输出到指定文本编写器。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeExpression" />，指示要为其生成代码的表达式。</param>
      <param name="w">向其中输出代码的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>生成指定的代码文档对象模型 (CodeDOM) 命名空间的代码，并使用指定选项将其输出到指定文本编写器。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeNamespace" />，指示要为其生成代码的命名空间。</param>
      <param name="w">向其中输出代码的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>生成指定代码文档对象模型 (CodeDOM) 语句的代码，并使用指定选项将其输出到指定的文本编写器。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeStatement" />，包含要翻译的 CodeDOM 元素。</param>
      <param name="w">向其中输出代码的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>生成指定代码文档对象模型 (CodeDOM) 类型声明的代码，并使用指定选项将其输出到指定的文本编写器。</summary>
      <param name="e">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" />，指示要为其生成代码的类型。</param>
      <param name="w">向其中输出代码的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />，指示用于生成代码的选项。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>获取由指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 指示的类型。</summary>
      <param name="type">指示返回类型的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns>指定类型的文本表示形式，该类型针对此代码生成器生成代码时所使用的语言。 例如，在 Visual Basic 中，传入类型 System.Int32 将返回“Integer”。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary>获取一个值，该值指示指定的值是否是当前语言的有效标识符。</summary>
      <param name="value">用来测试是否为有效标识符的值。</param>
      <returns>如果 <paramref name="value" /> 参数是有效标识符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>获取一个值，该值指示该生成器是否支持指定的 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 对象表示的语言功能。</summary>
      <param name="supports">要为其测试生成器的功能。</param>
      <returns>如果支持指定的功能，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary>如果指定的值不是一个有效的标识符，将引发异常。</summary>
      <param name="value">要验证的标识符。</param>
      <exception cref="T:System.ArgumentException">该标识符无效。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary>定义用于将代码语法分析到 <see cref="T:System.CodeDom.CodeCompileUnit" /> 中的接口。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary>在派生类中实施时，将指定的文本流编译到 <see cref="T:System.CodeDom.CodeCompileUnit" /> 中。</summary>
      <param name="codeStream">
        <see cref="T:System.IO.TextReader" />，可用于读取要编译的代码。</param>
      <returns>
        <see cref="T:System.CodeDom.CodeCompileUnit" />，包含已分析代码的表示形式。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary>定义指示语言的特殊功能的标识符。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary>语言不区分大小写。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary>语言具有默认特性。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary>表示临时文件的集合。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary>使用指定的临时目录初始化 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 类的新实例，该临时目录默认情况下设置为在生成并使用临时文件后将这些文件删除。</summary>
      <param name="tempDir">用于存储临时文件的临时目录的路径。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary>使用指定的临时目录和指定的值初始化 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 类的新实例，该值指示默认情况下生成并使用临时文件后是保留这些文件还是将它们删除。</summary>
      <param name="tempDir">用于存储临时文件的临时目录的路径。</param>
      <param name="keepFiles">如果使用临时文件后应保留它们，则为 <see langword="true" />；如果应删除临时文件，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary>将具有指定文件扩展名的文件名添加到集合中。</summary>
      <param name="fileExtension">要添加到集合中的自动生成的临时文件的文件扩展名。</param>
      <returns>刚添加到集合中的具有指定扩展名的文件名。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary>将具有指定文件扩展名的文件名添加到集合，并使用指定的值指示是删除还是保留该文件。</summary>
      <param name="fileExtension">要添加到集合中的自动生成的临时文件的文件扩展名。</param>
      <param name="keepFile">如果使用后应保留文件，则为 <see langword="true" />；如果应删除文件，则为 <see langword="false" />。</param>
      <returns>刚添加到集合中的具有指定扩展名的文件名。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileExtension" /> 为 <see langword="null" /> 或空字符串。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary>将指定的文件添加到集合，并使用指定的值指示在释放集合或调用 <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> 方法时是否保留该文件。</summary>
      <param name="fileName">要添加到集合的文件名。</param>
      <param name="keepFile">如果使用后应保留文件，则为 <see langword="true" />；如果应删除文件，则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> 为 <see langword="null" /> 或空字符串。  

或 - 
<paramref name="fileName" /> 是重复项。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary>获取基文件名的完整路径，该基文件名不带文件扩展名，位于临时目录路径上，用于生成该集合的临时文件名。</summary>
      <returns>基文件名的完整路径，该基文件名不带文件扩展名，位于临时目录路径上，用于生成该集合的临时文件名。</returns>
      <exception cref="T:System.Security.SecurityException">如果未设置 <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" /> 属性或者将其设置为 <see langword="null" />，则不会将 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> 授予 <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" /> 属性指出的临时目录。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary>从指定的索引处开始，将集合的成员复制到指定的字符串。</summary>
      <param name="fileNames">要复制到的字符串数组。</param>
      <param name="start">数组索引，从此处开始复制。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary>获取集合中文件的数目。</summary>
      <returns>集合中的文件数。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary>删除此集合中没有标记为保留的临时文件。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary>在垃圾回收收回此对象之前尝试删除这些临时文件。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary>获取一个枚举数，该枚举数可枚举集合的成员。</summary>
      <returns>包含集合成员的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary>获取或设置一个值，该值指示默认情况下在调用 <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> 方法或释放集合时是否保留这些文件。</summary>
      <returns>如果应保留文件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从目标数组中指定的索引位置开始，将集合中的元素复制到该数组中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="start">数组中从零开始的索引，在此处开始复制。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否为同步的（线程安全）。</summary>
      <returns>如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary>执行与释放或重置非托管资源关联的应用程序定义的任务。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary>获取用来存储临时文件的临时目录。</summary>
      <returns>用来存储临时文件的临时目录。</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary>定义用于指示参数的方向和参数声明的标识符。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary>传入字段。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary>输出字段。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary>传址方式字段。</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary>定义类成员的成员特性标识符。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary>抽象成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary>访问屏蔽。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary>在同一程序集中任何类都可以访问的成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary>常数成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary>可以在其类以及其派生类家族内访问的成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary>可以在其类以及其在同一程序集中的派生类中访问的成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary>可以在其类、其在任何程序集中的派生类以及在同一程序集的任何类中均访问的成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary>在派生类中不能重写的成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary>新成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary>重载成员。 某些语言（如 Visual Basic）要求显式指示重载成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary>重写基类成员的成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary>私有成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary>公共成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary>范围屏蔽。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary>静态成员。 在 Visual Basic 中，这等效于 <see langword="Shared" /> 关键字。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary>VTable 屏蔽。</summary>
    </member>
  </members>
</doc>
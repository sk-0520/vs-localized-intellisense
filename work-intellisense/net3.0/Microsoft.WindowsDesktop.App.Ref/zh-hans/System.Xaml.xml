<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Xaml</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute">
      <summary vsli:raw="Notates types for legacy reporting of XAML markup extension characteristics.">以符号表示 XAML 标记扩展特征的旧报告的类型。</summary>
    </member>
    <member name="M:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute" /> 类的新实例。</summary>
      <param name="type" vsli:raw="The return type that this attribute reports.">此特性报告的返回类型。</param>
    </member>
    <member name="P:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.Type">
      <summary vsli:raw="Gets or sets the return type that this attribute reports.">获取或设置此特性报告的返回类型。</summary>
      <returns vsli:raw="The return type that this attribute reports.">此特性报告的返回类型。</returns>
    </member>
    <member name="T:System.Windows.Markup.AmbientAttribute">
      <summary vsli:raw="Specifies that a property or type should be treated as ambient. The ambient concept relates to how XAML processors determine type owners of members.">指定应将某个属性或类型视为环境。 环境概念涉及 XAML 处理器如何确定成员的类型所有者。</summary>
    </member>
    <member name="M:System.Windows.Markup.AmbientAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.AmbientAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.AmbientAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Windows.Markup.ArrayExtension">
      <summary vsli:raw="Implements &lt;see langword=&quot;x:Array&quot; /&gt; support for .NET XAML Services.">实现对 .NET Framework XAML 服务的 <see langword="x:Array" /> 支持</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ArrayExtension&quot; /&gt; class. This creates an empty array.">初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 类的新实例。 这可以创建一个空数组。</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Array)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ArrayExtension&quot; /&gt; class based on the provided raw array.">基于所提供的原始数组初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 类的新实例。</summary>
      <param name="elements" vsli:raw="The array content that populates the created array.">用于填充创建的数组的数组内容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;elements&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="elements" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ArrayExtension&quot; /&gt; class and initializes the type of the array.">初始化 <see cref="T:System.Windows.Markup.ArrayExtension" /> 类的新实例，并初始化数组的类型。</summary>
      <param name="arrayType" vsli:raw="The object type of the new array.">新数组的对象类型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;arrayType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="arrayType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddChild(System.Object)">
      <summary vsli:raw="Appends the supplied object to the end of the array.">将所提供的对象添加到数组末尾。</summary>
      <param name="value" vsli:raw="The object to add to the end of the array.">要添加到数组末尾的对象。</param>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddText(System.String)">
      <summary vsli:raw="Adds a text node as a new array item.">将文本节点添加为新数组项。</summary>
      <param name="text" vsli:raw="The text to add to the end of the array.">要添加到数组末尾的文本。</param>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Items">
      <summary vsli:raw="Gets the contents of the array. Settable in XAML through XAML collection syntax.">获取数组的内容。 可在 XAML 中通过 XAML 集合语法设置。</summary>
      <returns vsli:raw="The array contents.">数组内容。</returns>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="Returns an array that is sized to the number of objects supplied in the &lt;see cref=&quot;P:System.Windows.Markup.ArrayExtension.Items&quot; /&gt; values.">返回一个数组，其大小为 <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> 值中提供的对象数。</summary>
      <param name="serviceProvider" vsli:raw="An object that can provide services for the markup extension.">可为标记扩展提供服务的对象。</param>
      <returns vsli:raw="The created array, or null.">创建的数组，或 null。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Processed an array that did not provide a valid &lt;see cref=&quot;P:System.Windows.Markup.ArrayExtension.Type&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; There is a type mismatch between the declared &lt;see cref=&quot;P:System.Windows.Markup.ArrayExtension.Type&quot; /&gt; of the array and one or more of its &lt;see cref=&quot;P:System.Windows.Markup.ArrayExtension.Items&quot; /&gt; values.">处理未提供有效 <see cref="P:System.Windows.Markup.ArrayExtension.Type" /> 的数组。  

或 - 
数组的已声明 <see cref="P:System.Windows.Markup.ArrayExtension.Type" /> 与其一个或多个 <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> 值之间存在类型不匹配。</exception>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Type">
      <summary vsli:raw="Gets or sets the type of array to be created when calling &lt;see cref=&quot;M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)&quot; /&gt;.">获取或设置要在调用 <see cref="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)" /> 时创建的数组类型。</summary>
      <returns vsli:raw="The type of the array.">数组的类型。</returns>
    </member>
    <member name="T:System.Windows.Markup.ConstructorArgumentAttribute">
      <summary vsli:raw="Specifies that an object can be initialized by using a non-parameterless constructor syntax, and that a property of the specified name supplies construction information.  This information is primarily for XAML serialization.">指定可以使用非无参数构造函数语法来初始化对象，而且由指定名称的属性提供构造信息。  此信息主要用于 XAML 序列化。</summary>
    </member>
    <member name="M:System.Windows.Markup.ConstructorArgumentAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ConstructorArgumentAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.ConstructorArgumentAttribute" /> 类的新实例。</summary>
      <param name="argumentName" vsli:raw="The name of the constructor that will initialize the associated property.">要初始化关联属性的构造函数的名称。</param>
    </member>
    <member name="P:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName">
      <summary vsli:raw="Gets the name parameter of the constructor that will initialize the associated property.">获取将初始化关联属性的构造函数的名称参数。</summary>
      <returns vsli:raw="The name of the constructor. Assuming CLR backing, this corresponds to the &lt;see cref=&quot;P:System.Reflection.ParameterInfo.Name&quot; /&gt; of the relevant constructor parameter.">构造函数的名称。 假定具有 CLR 支持，那么这对应于相关构造函数参数的 <see cref="P:System.Reflection.ParameterInfo.Name" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentPropertyAttribute">
      <summary vsli:raw="Indicates which property of a type is the XAML content property. A XAML processor uses this information when processing XAML child elements of XAML representations of the attributed type.">指示某种类型的哪个属性是 XAML 内容属性。 处理特性化类型的 XAML 表示形式的 XAML 子元素时，XAML 处理器会使用此信息。</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ContentPropertyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ContentPropertyAttribute&quot; /&gt; class, by using the specified name.">使用指定的名称初始化 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The property name for the property that is the content property.">作为内容属性的属性的名称。</param>
    </member>
    <member name="P:System.Windows.Markup.ContentPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the property that is the content property.">获取作为内容属性的属性的名称。</summary>
      <returns vsli:raw="The name of the property that is the content property.">作为内容属性的属性的名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentWrapperAttribute">
      <summary vsli:raw="Specifies one or more types on the associated collection type that will be used to wrap foreign content.">指定将用于包装外部内容的关联集合类型的一个或多个类型。</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ContentWrapperAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> 类的新实例。</summary>
      <param name="contentWrapper" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that is declared as a content wrapper for the collection type.">作为集合类型的内容包装声明的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper">
      <summary vsli:raw="Gets the type that is declared as a content wrapper for the collection type associated with this attribute.">获取作为与此特性关联的集合类型的内容包装声明的类型。</summary>
      <returns vsli:raw="The type that is declared as a content wrapper for the collection type.">作为集合类型的内容包装声明的类型。</returns>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Markup.ContentWrapperAttribute&quot; /&gt; is equivalent this &lt;see cref=&quot;T:System.Windows.Markup.ContentWrapperAttribute&quot; /&gt; by comparing the &lt;see cref=&quot;P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper&quot; /&gt; properties.">通过比较 <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> 属性确定指定的 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> 是否等效于此 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Markup.ContentWrapperAttribute&quot; /&gt; to compare.">要比较的 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper&quot; /&gt; properties are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> 属性相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.GetHashCode">
      <summary vsli:raw="Gets a hash code for this instance.">获取此实例的哈希代码。</summary>
      <returns vsli:raw="An integer hash code.">整数哈希代码</returns>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.TypeId">
      <summary vsli:raw="Gets a unique identifier for this attribute.">获取此特性的唯一标识符。</summary>
      <returns vsli:raw="A unique identifier for the attribute.">此属性的唯一标识符。</returns>
    </member>
    <member name="T:System.Windows.Markup.DateTimeValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">在 <see cref="T:System.String" /> 的实例与 <see cref="T:System.DateTime" /> 的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.DateTimeValueSerializer&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.DateTimeValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be convert to an instance of &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">确定是否可将指定的 <see cref="T:System.String" /> 转换为 <see cref="T:System.DateTime" /> 的一个实例。</summary>
      <param name="value" vsli:raw="The string to evaluate for conversion.">为转换而要计算的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该值可以转换，则为<see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if the specified object can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">确定能否将指定的对象转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to evaluate for conversion.">要进行计算以供转换的对象。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">将 <see cref="T:System.String" /> 转换为 <see cref="T:System.DateTime" />。</summary>
      <param name="value" vsli:raw="The string to convert into a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">要转换为 <see cref="T:System.DateTime" /> 的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.DateTime&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">基于所提供的 <paramref name="value" /> 的 <see cref="T:System.DateTime" /> 新实例。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.DateTime&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">将 <see cref="T:System.DateTime" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to convert into a string.">要转换为字符串的对象。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A string representation of the specified &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">指定的 <see cref="T:System.DateTime" /> 的字符串表示形式。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; or is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 不是 <see cref="T:System.DateTime" /> 或为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.DependsOnAttribute">
      <summary vsli:raw="Indicates that the attributed property is dependent on the value of another property.">指示特性化属性依赖于另一个属性的值。</summary>
    </member>
    <member name="M:System.Windows.Markup.DependsOnAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.DependsOnAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The property that the property associated with this &lt;see cref=&quot;T:System.Windows.Markup.DependsOnAttribute&quot; /&gt; depends on.">与此 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 关联的属性所依赖的属性。</param>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.Name">
      <summary vsli:raw="Gets the name of the related property declared in this &lt;see cref=&quot;T:System.Windows.Markup.DependsOnAttribute&quot; /&gt;.">获取此 <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 中声明的相关属性的名称。</summary>
      <returns vsli:raw="The name of the related property.">相关属性的名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.TypeId">
      <summary vsli:raw="Gets a unique identifier for this &lt;see cref=&quot;T:System.Windows.Markup.DependsOnAttribute&quot; /&gt;.">获取此 <see cref="T:System.Windows.Markup.DependsOnAttribute" />的唯一标识符。</summary>
      <returns vsli:raw="The unique identifier.">唯一标识符。</returns>
    </member>
    <member name="T:System.Windows.Markup.DictionaryKeyPropertyAttribute">
      <summary vsli:raw="Specifies a property of the associated class that provides the implicit key value. Implicit keys are used for keys rather than explicit &lt;see langword=&quot;x:Key&quot; /&gt; attributes defined in XAML for an item in &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; collections.">指定提供隐式键值的关联类的属性。 隐式键用于某些键，而不是用于在 XAML 中为 <see cref="T:System.Collections.IDictionary" /> 集合中的项定义的 <see langword="x:Key" /> 特性。</summary>
    </member>
    <member name="M:System.Windows.Markup.DictionaryKeyPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.DictionaryKeyPropertyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.DictionaryKeyPropertyAttribute" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The name of the property that provides the implicit key value.">提供隐式键值的属性的名称。</param>
    </member>
    <member name="P:System.Windows.Markup.DictionaryKeyPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the property that provides the implicit key value.">获取提供隐式键值的属性的名称。</summary>
      <returns vsli:raw="The name of the property that provides the implicit key value.">提供隐式键值的属性的名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.IComponentConnector">
      <summary vsli:raw="Provides markup compile and tools support for named XAML elements and for attaching event handlers to them.">为命名的 XAML 元素以及将事件处理程序附加到这些元素提供标记编译和工具支持。</summary>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.Connect(System.Int32,System.Object)">
      <summary vsli:raw="Attaches events and names to compiled content.">将事件和名称附加到已编译的内容。</summary>
      <param name="connectionId" vsli:raw="An identifier token to distinguish calls.">用于区分调用的标识符标记。</param>
      <param name="target" vsli:raw="The target to connect events and names to.">事件和名称所连接到的目标。</param>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
      <summary vsli:raw="Loads the compiled page of a component.">加载组件的已编译的页。</summary>
    </member>
    <member name="T:System.Windows.Markup.INameScope">
      <summary vsli:raw="Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.">关于如何在特定的 XMAL 名称范围内访问元素的名称，以及如何强制该 XAML 名称范围内名称的唯一性，定义一个协定。</summary>
    </member>
    <member name="M:System.Windows.Markup.INameScope.FindName(System.String)">
      <summary vsli:raw="Returns an object that has the provided identifying name.">返回一个具有提供的标识名称的对象。</summary>
      <param name="name" vsli:raw="The name identifier for the object being requested.">要请求的对象的名称标识符。</param>
      <returns vsli:raw="The object, if found. Returns &lt;see langword=&quot;null&quot; /&gt; if no object of that name was found.">对象（如果找到）。 如果找不到该名称的对象，则返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
      <summary vsli:raw="Registers the provided name into the current XAML namescope.">将提供的名称注册到当前的 XAML 名称范围中。</summary>
      <param name="name" vsli:raw="The name to register.">要注册的名称。</param>
      <param name="scopedElement" vsli:raw="The specific element that the provided &lt;paramref name=&quot;name&quot; /&gt; refers to.">提供的 <paramref name="name" /> 所引用的特定元素。</param>
    </member>
    <member name="M:System.Windows.Markup.INameScope.UnregisterName(System.String)">
      <summary vsli:raw="Unregisters the provided name from the current XAML namescope.">从当前 XAML 名称范围中注销提供的名称。</summary>
      <param name="name" vsli:raw="The name to unregister.">要注销的名称。</param>
    </member>
    <member name="T:System.Windows.Markup.INameScopeDictionary">
      <summary vsli:raw="Unifies enumerable, collection, and dictionary support that are useful for exposing a dictionary of names in a XAML namescope.">将可枚举的集合和字典支持进行了统一，可用于公开 XAML 名称范围中名称的字典。</summary>
    </member>
    <member name="T:System.Windows.Markup.IProvideValueTarget">
      <summary vsli:raw="Represents a service that reports situational object-property relationships for markup extension evaluation.">表示一个服务，该服务报告标记扩展评估的情景对象和属性的关系。</summary>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
      <summary vsli:raw="Gets the target object being reported.">获取被报告的目标对象。</summary>
      <returns vsli:raw="The target object being reported.">被报告的目标对象。</returns>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
      <summary vsli:raw="Gets an identifier for the target property being reported.">获取正在报告的目标属性的标识符。</summary>
      <returns vsli:raw="An identifier for the target property being reported.">正在报告的目标属性的标识符。</returns>
    </member>
    <member name="T:System.Windows.Markup.IQueryAmbient">
      <summary vsli:raw="Queries for whether a specified property should be treated as ambient in the current scope.">查询是否应将指定的属性视为当前范围中的环境属性。</summary>
    </member>
    <member name="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)">
      <summary vsli:raw="Queries for whether a specified named property can be considered ambient in the current scope.">查询可否将指定的命名属性视为当前范围中的环境属性。</summary>
      <param name="propertyName" vsli:raw="The name of the property to check for ambience state.">要检查其环境状态的属性的名称。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the requested property can be considered ambient; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果所请求的属性可视为环境属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.IUriContext">
      <summary vsli:raw="Represents a service that can use application context to resolve a provided relative URI to an absolute URI.">表示一个服务，该服务可使用应用程序上下文将提供的相对 URI 解析成绝对 URI。</summary>
    </member>
    <member name="P:System.Windows.Markup.IUriContext.BaseUri">
      <summary vsli:raw="Gets or sets the base URI of the current application context.">获取或设置当前应用程序上下文的基 URI。</summary>
      <returns vsli:raw="The base URI of the application context.">应用程序上下文的基 URI。</returns>
    </member>
    <member name="T:System.Windows.Markup.IValueSerializerContext">
      <summary vsli:raw="Defines a context that is provided to a &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt;. The context can be used to enable special cases of serialization or different modes of serialization.">定义提供给 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的上下文。 此上下文可用于实现序列化的特例或序列化的其他模式。</summary>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; for the given property descriptor.">获取给定属性描述符的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="descriptor" vsli:raw="The descriptor of the property being converted.">要转换的属性的描述符。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; capable of serializing the specified property.">一个可以序列化指定的属性的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.Type)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; associated with the specified type.">获取与指定类型关联的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="type" vsli:raw="The type of the value being converted.">要转换的值的类型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; capable of serializing the specified type.">一个可以序列化指定的类型的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.IXamlTypeResolver">
      <summary vsli:raw="Represents a service that resolves from named elements in XAML markup to the appropriate CLR type.">表示一种服务，该服务将 XAML 标记中的已命名元素解析为适当的 CLR 类型。</summary>
    </member>
    <member name="M:System.Windows.Markup.IXamlTypeResolver.Resolve(System.String)">
      <summary vsli:raw="Resolves a named XAML type to the corresponding CLR &lt;see cref=&quot;T:System.Type&quot; /&gt;.">将已命名的 XAML 类型解析为相应的 CLR <see cref="T:System.Type" />。</summary>
      <param name="qualifiedTypeName" vsli:raw="The XAML type name to resolve. The type name is optionally qualified by the prefix for a XML namespace. Otherwise the current default XML namespace is assumed.">要解析的 XAML 类型名称。 该类型名称可以由 XML 命名空间的前缀限定。 否则将采用当前默认的 XML 命名空间。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that &lt;paramref name=&quot;qualifiedTypeName&quot; /&gt; resolves to.">
        <paramref name="qualifiedTypeName" /> 要解析为的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtension">
      <summary vsli:raw="Provides a base class for XAML markup extension implementations that can be supported by .NET XAML Services and other XAML readers and XAML writers.">为可以由 .NET Framework XAML 服务及其他 XAML 读取器和 XAML 编写器支持的 XAML 标记扩展实现提供基类。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of a class derived from &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt;.">初始化从 <see cref="T:System.Windows.Markup.MarkupExtension" /> 派生的类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.">当在派生类中实现时，返回用作此标记扩展的目标属性值的对象。</summary>
      <param name="serviceProvider" vsli:raw="A service provider helper that can provide services for the markup extension.">可为标记扩展提供服务的服务提供程序帮助程序。</param>
      <returns vsli:raw="The object value to set on the property where the extension is applied.">要在应用了扩展的属性上设置的对象值。</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute">
      <summary vsli:raw="Reports the bracket characters that a markup extension can return.">报告标记扩展可以返回的括号字符。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.#ctor(System.Char,System.Char)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute&quot; /&gt; class using the provided characters.">使用提供的字符初始化 <see cref="T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute" /> 类的新实例。</summary>
      <param name="openingBracket" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that defines the opening bracket character.">用于定义左方括号字符的 <see cref="T:System.Char" />。</param>
      <param name="closingBracket" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that defines the closing bracket character.">用于定义右方括号字符的 <see cref="T:System.Char" />。</param>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.ClosingBracket">
      <summary vsli:raw="Specifies the character to be used as the closing delimiter in a &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt;.">指定要在 <see cref="T:System.Windows.Markup.MarkupExtension" /> 中用作结尾分隔符的字符。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; representing the character.">表示字符的 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.OpeningBracket">
      <summary vsli:raw="Specifies the character to be used as the opening delimiter in a &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt;.">指定要在 <see cref="T:System.Windows.Markup.MarkupExtension" /> 中用作起始分隔符的字符。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; representing the character.">表示字符的 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute">
      <summary vsli:raw="Reports the type that a markup extension can return.">报告标记扩展可以返回的类型。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&quot; /&gt; class using the provided &lt;see cref=&quot;T:System.Type&quot; /&gt;.">使用提供的 <see cref="T:System.Type" /> 初始化 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> 类的新实例。</summary>
      <param name="returnType" vsli:raw="The return type that this attribute reports.">此特性报告的返回类型。</param>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Deprecated; do not use.">已弃用；请勿使用。</summary>
      <param name="returnType" vsli:raw="The return type that this  .NET Framework attribute reports.">此 .NET Framework 特性 报告的返回类型。</param>
      <param name="expressionType" vsli:raw="Deprecated; do not use.">已弃用；请勿使用。</param>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ExpressionType">
      <summary vsli:raw="Deprecated; do not use.">已弃用；请勿使用。</summary>
      <returns vsli:raw="Deprecated; do not use.">已弃用；请勿使用。</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ReturnType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt; return type that this .NET Framework attribute reports.">获取此 .NET Framework 特性 报告的 <see cref="T:System.Windows.Markup.MarkupExtension" /> 返回类型。</summary>
      <returns vsli:raw="The type-safe return type of the specific &lt;see cref=&quot;M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)&quot; /&gt; implementation of the markup extension where the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute&quot; /&gt; .NET Framework attribute is applied.">应用了的标记扩展<see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /><see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> .NET Framework 特性的特定实现的类型安全返回类型。</returns>
    </member>
    <member name="T:System.Windows.Markup.MemberDefinition">
      <summary vsli:raw="Provides the base class that is used for a markup technique of defining members of a class in declarative XAML.">提供基类，该基类用于在声明性 XAML 中定义类成员的标记技术。</summary>
    </member>
    <member name="M:System.Windows.Markup.MemberDefinition.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.MemberDefinition&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.MemberDefinition" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Windows.Markup.MemberDefinition.Name">
      <summary vsli:raw="When implemented in a derived class, gets or sets the name of the member to define.">在派生类中实现时，获取或设置要定义的成员的名称。</summary>
      <returns vsli:raw="The name of the member to define.">要定义的成员的名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.NameReferenceConverter">
      <summary vsli:raw="Provides type conversion to convert a string name into an object reference to the object with that name, or to return the name of an object from the object graph.">提供类型转换，以将字符串名称转换成对具有该名称的对象的对象引用，或返回对象图中对象的名称。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.NameReferenceConverter&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.NameReferenceConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of one type to another object.">返回该转换器是否可以将一种类型的对象转换为另一个对象。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">一个 <see cref="T:System.Type" />，表示要转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该转换器能够执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether the converter can convert an object to the specified destination type.">返回一个值，该值指示转换器能否将对象转换为指定的目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType" vsli:raw="The type to convert to.">要转换为的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果转换器能执行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the provided object to another object, using the specified context and culture information.">使用指定的上下文和区域性信息将提供的对象转换为另一个对象。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The reference name string to convert.">要转换的引用名称字符串。</param>
      <returns vsli:raw="The returned object, which is potentially any object that is type-mapped in the relevant backing assemblies and capable of being declared in XAML with a XAML name reference.">返回的对象，该对象可能是在相关支持程序集中进行了类型映射的任何对象，并且可在 XAML 中通过 XAML 名称引用进行声明。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is a null string or empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see cref=&quot;T:System.Xaml.IXamlNameResolver&quot; /&gt; service is missing or invalid.">
        <paramref name="value" /> 为 null 字符串或空字符串。  

或 - 
<see cref="T:System.Xaml.IXamlNameResolver" /> 服务缺失或无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts an object to the specified type. This is intended to return XAML reference names for objects in an object graph.">将对象转换为指定类型。 这用于为对象图形中的对象返回 XAML 引用名称。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The object to retrieve the reference name for.">要检索其引用名称的对象。</param>
      <param name="destinationType" vsli:raw="The type to return. You should always reference the &lt;see cref=&quot;T:System.String&quot; /&gt; type.">要返回的类型。 应当始终引用 <see cref="T:System.String" /> 类型。</param>
      <returns vsli:raw="The reference name of the input &lt;paramref name=&quot;value&quot; /&gt; object.">输入 <paramref name="value" /> 对象的引用名称。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;T:System.Xaml.IXamlNameProvider&quot; /&gt; service is missing or invalid.">
        <see cref="T:System.Xaml.IXamlNameProvider" /> 服务缺失或无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.NameScopePropertyAttribute">
      <summary vsli:raw="Specifies a property of the associated class that provides the XAML namescope value.">指定提供 XAML 名称范围值的关联类的属性。</summary>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.NameScopePropertyAttribute&quot; /&gt; class with the specified name.">用指定的名称初始化 <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The name of the property on the attributed type that provides the XAML namescope.">特性化类型上提供 XAML 名称范围的属性的名称。</param>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.NameScopePropertyAttribute&quot; /&gt; class with the specified name and type.">用指定的名称和类型初始化 <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The name of the attachable member that provides the XAML name scope.">提供 XAML 名称范围的可附加成员的名称。</param>
      <param name="type" vsli:raw="The owner type of the attachable member that provides the XAML name scope.">提供 XAML 名称范围的可附加成员的所有者类型。</param>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the property that provides the XAML namescope.">获取提供 XAML 名称范围的属性的名称。</summary>
      <returns vsli:raw="A string value that is the name of the property that provides the XAML namescope.">一个字符串值，它是提供 XAML 名称范围的属性的名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Type">
      <summary vsli:raw="Gets the owner type of the attached property that provides the XAML namescope support.">获取提供 XAML 命名空间支持的所附加属性的所有者类型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; value that is the owner type of the attached property that provides the XAML namescope support, or &lt;see langword=&quot;null&quot; /&gt;.">一个 <see cref="T:System.Type" /> 值，该值是提供 XAML 命名空间支持的所附加属性的所有者类型；或者为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.NullExtension">
      <summary vsli:raw="Implements a XAML markup extension in order to return a null object, which you can use to explicitly set values to null in XAML.">实现 XAML 标记以返回 null 对象，可使用该对象在 XAML 中将值显式设置为 null。</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.NullExtension&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.NullExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="Provides &lt;see langword=&quot;null&quot; /&gt; to use as a value as the output of this markup extension.">提供要用作值的 <see langword="null" /> 作为此标记扩展的输出。</summary>
      <param name="serviceProvider" vsli:raw="An object that can provide services for the markup extension implementation.">可为标记扩展实现提供服务的对象。</param>
      <returns vsli:raw="A null reference.">一个空引用。</returns>
    </member>
    <member name="T:System.Windows.Markup.PropertyDefinition">
      <summary vsli:raw="Supports a markup technique of defining properties of a class in declarative XAML.">支持在声明性 XAML 中定义类属性的标记技术。</summary>
    </member>
    <member name="M:System.Windows.Markup.PropertyDefinition.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.PropertyDefinition&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.PropertyDefinition" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Attributes">
      <summary vsli:raw="Gets a list of associated CLR attributes.">获取关联的 CLR 特性的列表。</summary>
      <returns vsli:raw="A list of associated attributes.">关联的特性的列表。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Modifier">
      <summary vsli:raw="Gets or sets the access level of the defined property.">获取或设置定义的属性的访问级别。</summary>
      <returns vsli:raw="The access level of the defined property, as a string.">定义的属性的访问级别，以字符串的形式表示。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Name">
      <summary vsli:raw="Gets or sets the name of the property to define.">获取或设置要定义的属性的名称。</summary>
      <returns vsli:raw="The name of the property to define.">要定义的属性的名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Type">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the property to define.">获取或设置要定义的属性的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The XAML type identifier of the property to define.">要定义的属性的 XAML 类型标识符。</returns>
    </member>
    <member name="T:System.Windows.Markup.Reference">
      <summary vsli:raw="Implements the &lt;c&gt;{x:Reference}&lt;/c&gt; markup extension.">实现 <c>{x:Reference}</c> 标记扩展。</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.Reference&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.Reference" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.Reference&quot; /&gt; class with the &lt;paramref name=&quot;name&quot; /&gt; argument.">使用 <paramref name="name" /> 参数初始化 <see cref="T:System.Windows.Markup.Reference" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The XAML name of the element to reference.">要引用的元素的 XAML 名称。</param>
    </member>
    <member name="P:System.Windows.Markup.Reference.Name">
      <summary vsli:raw="Gets or sets the XAML name to obtain the reference for.">获取或设置要获取其引用的 XAML 名称。</summary>
      <returns vsli:raw="The XAML name of the element to obtain the reference for.">要获取其引用的元素的 XAML 名称。</returns>
    </member>
    <member name="M:System.Windows.Markup.Reference.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="Returns an object that is the value of the target property. For the &lt;see cref=&quot;T:System.Windows.Markup.Reference&quot; /&gt; type, this is the object that the provided &lt;see cref=&quot;P:System.Windows.Markup.Reference.Name&quot; /&gt; references.">返回一个对象，此对象为目标属性的值。 对于 <see cref="T:System.Windows.Markup.Reference" /> 类型，这是提供的 <see cref="P:System.Windows.Markup.Reference.Name" /> 引用的对象。</summary>
      <param name="serviceProvider" vsli:raw="A class that implements the &lt;see cref=&quot;T:System.Xaml.IXamlNameResolver&quot; /&gt; service.">实现 <see cref="T:System.Xaml.IXamlNameResolver" /> 服务的一个类。</param>
      <returns vsli:raw="The value of the target property. This is potentially any object that is type-mapped in the relevant backing assemblies.">目标属性的值。 这可能是在相关支持程序集中类型映射的任何对象。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;serviceProvider&quot; /&gt; value does not implement the &lt;see cref=&quot;T:System.Xaml.IXamlNameResolver&quot; /&gt; service.&#xA;&#xA; -or-&#xA;&#xA; &lt;see cref=&quot;P:System.Windows.Markup.Reference.Name&quot; /&gt; value has not been set through construction or positional usage.">
        <paramref name="serviceProvider" /> 值不实现 <see cref="T:System.Xaml.IXamlNameResolver" /> 服务。  

或 - 
<see cref="P:System.Windows.Markup.Reference.Name" /> 值尚未通过构造或位置的用法设置。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceProvider&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceProvider" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.RootNamespaceAttribute">
      <summary vsli:raw="Represents an assembly level attribute that is used to identify the value of the &lt;see langword=&quot;RootNamespace&quot; /&gt; property in a Visual Studio project file.">表示一个程序集级别特性，它用于标识 Visual Studio 项目文件中 <see langword="RootNamespace" /> 属性的值。</summary>
    </member>
    <member name="M:System.Windows.Markup.RootNamespaceAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.RootNamespaceAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.RootNamespaceAttribute" /> 类的新实例。</summary>
      <param name="nameSpace" vsli:raw="The root namespace value.">根命名空间值。</param>
    </member>
    <member name="P:System.Windows.Markup.RootNamespaceAttribute.Namespace">
      <summary vsli:raw="Gets the string that corresponds to the value of the &lt;see langword=&quot;RootNamespace&quot; /&gt; property in a Visual Studio project file.">获取与 Visual Studio 项目文件中的 <see langword="RootNamespace" /> 属性的值相对应的字符串。</summary>
      <returns vsli:raw="The string that corresponds to the value of the &lt;see langword=&quot;RootNamespace&quot; /&gt; property in a Visual Studio project file.">与 Visual Studio 项目文件中的<see langword="RootNamespace" />属性值相对应的字符串。</returns>
    </member>
    <member name="T:System.Windows.Markup.RuntimeNamePropertyAttribute">
      <summary vsli:raw="Represents a type-level attribute that reports which property of the type maps to the XAML x:Name attribute.">表示类型级别的特性，该特性报告类型的哪个属性映射到 XAML x:Name 特性。</summary>
    </member>
    <member name="M:System.Windows.Markup.RuntimeNamePropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.RuntimeNamePropertyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The name of the property to use as the &lt;see langword=&quot;x:Name&quot; /&gt; equivalent of the class.">用作类的 <see langword="x:Name" /> 等效项的属性的名称。</param>
    </member>
    <member name="P:System.Windows.Markup.RuntimeNamePropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the runtime name property that is specified by this &lt;see cref=&quot;T:System.Windows.Markup.RuntimeNamePropertyAttribute&quot; /&gt;.">获取由此 <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" /> 指定的运行时名称属性的名称。</summary>
      <returns vsli:raw="The name of the property.">属性的名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.StaticExtension">
      <summary vsli:raw="Implements a markup extension that returns static field and property references.">实现返回静态字段和属性引用的标记扩展。</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.StaticExtension&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.StaticExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.StaticExtension&quot; /&gt; class using the provided &lt;paramref name=&quot;member&quot; /&gt; string.">使用提供的 <paramref name="member" /> 字符串初始化 <see cref="T:System.Windows.Markup.StaticExtension" /> 类的新实例。</summary>
      <param name="member" vsli:raw="A string that identifies the member to make a reference to. This string uses the format &lt;c&gt;prefix:typeName.fieldOrPropertyName&lt;/c&gt;. &lt;c&gt;prefix&lt;/c&gt; is the mapping prefix for a XAML namespace, and is only required to reference static values that are not mapped to the default XAML namespace.">标识要引用的成员的字符串。 此字符串使用格式 <c>prefix:typeName.fieldOrPropertyName</c>。 <c>prefix</c> 是 XAML 命名空间的映射前缀，并且仅用于未映射到默认 XAML 命名空间的引用静态值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.Member">
      <summary vsli:raw="Gets or sets a member name string that is used to resolve a static field or property based on the service-provided type resolver.">获取或设置用于根据服务提供的类型解析程序解析静态字段或属性的成员名称字符串。</summary>
      <returns vsli:raw="A string that identifies the member to make a reference to.">标识要引用的成员的字符串。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Attempted to set &lt;see cref=&quot;P:System.Windows.Markup.StaticExtension.Member&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;.">尝试将 <see cref="P:System.Windows.Markup.StaticExtension.Member" /> 设置为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.MemberType">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Type&quot; /&gt; that defines the static member to return.">获取或设置用于定义要返回的静态成员的 <see cref="T:System.Type" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that defines the static member to return.">用于定义要返回的静态成员的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Attempted to set &lt;see cref=&quot;P:System.Windows.Markup.StaticExtension.MemberType&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;.">尝试将 <see cref="P:System.Windows.Markup.StaticExtension.MemberType" /> 设置为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="Returns an object value to set on the property where you apply this extension. For &lt;see cref=&quot;T:System.Windows.Markup.StaticExtension&quot; /&gt;, the return value is the static value that is evaluated for the requested static member.">返回一个要在此扩展所应用到的属性上设置的对象值。 对于 <see cref="T:System.Windows.Markup.StaticExtension" />，返回值是为所请求的静态成员计算的静态值。</summary>
      <param name="serviceProvider" vsli:raw="An object that can provide services for the markup extension. The service provider is expected to provide a service that implements a type resolver (&lt;see cref=&quot;T:System.Windows.Markup.IXamlTypeResolver&quot; /&gt;).">可为标记扩展提供服务的对象。 服务提供程序应提供实现类型解析程序 (<see cref="T:System.Windows.Markup.IXamlTypeResolver" />) 的服务。</param>
      <returns vsli:raw="The static value to set on the property where the extension is applied.">要在应用扩展的属性上设置的静态值。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;member&quot; /&gt; value for the extension is &lt;see langword=&quot;null&quot; /&gt; at the time of evaluation.">扩展的 <paramref name="member" /> 值在求值时为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Some part of the &lt;paramref name=&quot;member&quot; /&gt; string did not parse properly  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;serviceProvider&quot; /&gt; did not provide a service for &lt;see cref=&quot;T:System.Windows.Markup.IXamlTypeResolver&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; value did not resolve to a static member.">
        <paramref name="member" /> 字符串的某部分未进行正确分析 

或 - 
<paramref name="serviceProvider" /> 没有为 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 提供服务  

或 
 <paramref name="member" /> 值未解析为静态成员。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceProvider&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceProvider" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute">
      <summary vsli:raw="Indicates to XAML processors that the whitespace surrounding elements of the type in markup should be trimmed when serializing.">向 XAML 处理器指示在序列化时应修剪标记中该类型元素四周的空白。</summary>
    </member>
    <member name="M:System.Windows.Markup.TrimSurroundingWhitespaceAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Windows.Markup.TypeExtension">
      <summary vsli:raw="Implements a markup extension that returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; based on a string input.">实现根据字符串输入返回 <see cref="T:System.Type" /> 的标记扩展。</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.TypeExtension&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.TypeExtension&quot; /&gt; class, initializing the &lt;see cref=&quot;P:System.Windows.Markup.TypeExtension.TypeName&quot; /&gt; value based on the provided &lt;paramref name=&quot;typeName&quot; /&gt; string.">初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 类的新实例，并根据提供的 <paramref name="typeName" /> 字符串初始化 <see cref="P:System.Windows.Markup.TypeExtension.TypeName" /> 值。</summary>
      <param name="typeName" vsli:raw="A string that identifies the type to make a reference to. This string uses the format &lt;c&gt;prefix:className&lt;/c&gt;. &lt;c&gt;prefix&lt;/c&gt; is the mapping prefix for a XAML namespace, and is only required to reference types that are not mapped to the default XAML namespace.">标识要引用的类型的字符串。 此字符串使用格式 <c>prefix:className</c>。 <c>prefix</c> 是 XAML 命名空间的映射前缀，并且仅用于未映射到默认 XAML 命名空间的引用类型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Attempted to specify &lt;paramref name=&quot;typeName&quot; /&gt; as &lt;see langword=&quot;null&quot; /&gt;.">尝试将 <paramref name="typeName" /> 指定为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.TypeExtension&quot; /&gt; class, declaring the type directly.">初始化 <see cref="T:System.Windows.Markup.TypeExtension" /> 类的新实例，并直接声明类型。</summary>
      <param name="type" vsli:raw="The type to be represented by this &lt;see cref=&quot;T:System.Windows.Markup.TypeExtension&quot; /&gt;.">将通过此 <see cref="T:System.Windows.Markup.TypeExtension" /> 表示的类型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="type" /> 为 <see langword="null" /></exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)">
      <summary vsli:raw="Returns an object that should be set on the property where this extension is applied. For &lt;see cref=&quot;T:System.Windows.Markup.TypeExtension&quot; /&gt; , this is the &lt;see cref=&quot;T:System.Type&quot; /&gt; value as evaluated for the requested type name.">返回一个应在此扩展应用的属性上设置的对象。 对于 <see cref="T:System.Windows.Markup.TypeExtension" />，这是为请求的类型名称计算的 <see cref="T:System.Type" /> 值。</summary>
      <param name="serviceProvider" vsli:raw="Object that can provide services for the markup extension. The provider is expected to provide a service for &lt;see cref=&quot;T:System.Windows.Markup.IXamlTypeResolver&quot; /&gt;.">可以为标记扩展提供服务的对象。 此提供程序应为 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 提供服务。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to set on the property where the extension is applied.">要在应用了扩展的属性上设置的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; value for the extension is &lt;see langword=&quot;null&quot; /&gt;.">扩展的 <paramref name="member" /> 值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Some part of the &lt;paramref name=&quot;typeName&quot; /&gt; string did not parse properly.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;serviceProvider&quot; /&gt; did not provide a service for &lt;see cref=&quot;T:System.Windows.Markup.IXamlTypeResolver&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;typeName&quot; /&gt; value did not resolve to a type.">
        <paramref name="typeName" /> 字符串的某部分未进行正确分析。  
或 
 <paramref name="serviceProvider" /> 没有为 <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 提供服务  
或 
 <paramref name="typeName" /> 值未解析为类型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceProvider&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="serviceProvider" /> 为 <see langword="null" /></exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.Type">
      <summary vsli:raw="Gets or sets the type information for this extension.">获取或设置此扩展的类型信息。</summary>
      <returns vsli:raw="The established type. For runtime purposes, this may be &lt;see langword=&quot;null&quot; /&gt; for get access, but cannot be set to &lt;see langword=&quot;null&quot; /&gt;.">建立的类型。 对运行时而言，这可以是 <see langword="null" /> 以表示 get 访问，但不能设置为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Attempted to set to &lt;see langword=&quot;null&quot; /&gt;.">试图设置为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.TypeName">
      <summary vsli:raw="Gets or sets the type name represented by this markup extension.">获取或设置此标记扩展所表示的类型名称。</summary>
      <returns vsli:raw="A string that identifies the type. This string uses the format prefix&lt;c&gt;:&lt;/c&gt;className. (prefix is the mapping prefix for an XML namespace and is only required to reference types that are not mapped to the default XML namespace for WPF (&lt;c&gt;http://schemas.microsoft.com/winfx/2006/xaml/presentation&lt;/c&gt;).">用于标识类型的字符串。 此字符串使用格式前缀<c>:</c>className。 （prefix 是 XML 命名空间的映射前缀，并且仅当引用未映射到 WPF 默认 XML 命名空间的类型时才需要 (http://schemas.microsoft.com/winfx/2006/xaml/presentation)。）</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Attempted to set to &lt;see langword=&quot;null&quot; /&gt;.">已尝试设置为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Windows.Markup.UidPropertyAttribute">
      <summary vsli:raw="Indicates the CLR property of a class that provides the x:Uid Directive value.">指示提供 X:uid 指令值的类的 CLR 属性。</summary>
    </member>
    <member name="M:System.Windows.Markup.UidPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.UidPropertyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.UidPropertyAttribute" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The name of the property that provides the &lt;see langword=&quot;x:Uid&quot; /&gt; value.">用于提供 <see langword="x:Uid" /> 值的属性的名称。</param>
    </member>
    <member name="P:System.Windows.Markup.UidPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the CLR property that represents the x:Uid Directive value.">获取表示 x:Uid 指令值的 CLR 属性的名称。</summary>
      <returns vsli:raw="The name of the CLR property that represents x:Uid Directive.">表示 x:Uid 指令的 CLR 属性的名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.UsableDuringInitializationAttribute">
      <summary vsli:raw="Indicates whether this type is built top-down during XAML object graph creation.">指示在 XAML 对象图创建期间是否自上而下生成此类型。</summary>
    </member>
    <member name="M:System.Windows.Markup.UsableDuringInitializationAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.UsableDuringInitializationAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.UsableDuringInitializationAttribute" /> 类的新实例。</summary>
      <param name="usable" vsli:raw="Defines whether the associated class is usable during initialization.">定义关联的类在初始化期间是否可用。</param>
    </member>
    <member name="P:System.Windows.Markup.UsableDuringInitializationAttribute.Usable">
      <summary vsli:raw="Gets a value that indicates whether the associated class is usable during initialization.">获取一个值，该值指示关联类在初始化期间是否可用。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the associated class is usable during initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果关联类在初始化期间可用，则为<see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializer">
      <summary vsli:raw="Abstract class that defines conversion behavior for serialization from an object representation.">定义从对象表示形式进行序列化过程中的转换行为的抽象类。</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="When overridden in a derived class, determines whether the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be converted to an instance of the type that the implementation of &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; supports.">在派生类中重写时，确定指定的 <see cref="T:System.String" /> 能否转换为 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现所支持类型的实例。</summary>
      <param name="value" vsli:raw="The string to evaluate for conversion.">为转换而要计算的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该值可以转换，则为<see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="When overridden in a derived class, determines whether the specified object can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;.">在派生类中重写时，确定指定对象是否可以转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to evaluate for conversion.">要进行计算以供转换的对象。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false." />。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="When overridden in a derived class, converts a &lt;see cref=&quot;T:System.String&quot; /&gt; to an instance of the type that the implementation of &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; supports.">在派生类中重写时，将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现所支持类型的实例。</summary>
      <param name="value" vsli:raw="The string to convert.">要转换的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A new instance of the type that the implementation of &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; supports based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">
        <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现基于提供的 <paramref name="value" /> 而支持的类型的新实例。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; cannot be converted.">无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="When overridden in a derived class, converts the specified object to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">在派生类中重写时，将指定对象转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to convert into a string.">要转换为字符串的对象。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A string representation of the specified object.">指定对象的字符串表示形式。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; cannot be converted.">无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">返回无法执行转换时引发的异常。</summary>
      <param name="value" vsli:raw="The object that could not be converted.">未能转换的对象。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; object for the exception to throw when a &lt;see langword=&quot;ConvertFrom&quot; /&gt; conversion cannot be performed.">用于在无法执行 <see langword="ConvertFrom" /> 转换时引发异常的 <see cref="T:System.Exception" /> 对象。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">返回无法执行转换时引发的异常。</summary>
      <param name="value" vsli:raw="The object that could not be converted.">未能转换的对象。</param>
      <param name="destinationType" vsli:raw="A type that represents the type the conversion was trying to convert to.">一个类型，表示转换时尝试转换成的类型。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; object for the exception to throw when a &lt;see langword=&quot;ConvertTo&quot; /&gt; conversion cannot be performed.">用于在无法执行 <see langword="ConvertTo" /> 转换时引发异常的 <see cref="T:System.Exception" /> 对象。</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; declared for a property, by passing a CLR property descriptor for the property.">通过传递属性的 CLR 属性描述符，获取为该属性声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="descriptor" vsli:raw="The CLR property descriptor for the property to be serialized.">要序列化的属性的 CLR 属性描述符。</param>
      <returns vsli:raw="The serializer associated with the specified property. May return &lt;see langword=&quot;null&quot; /&gt;.">与指定的属性关联的序列化程序。 可以返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;descriptor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="descriptor" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; declared for the specified property, using the specified context.">使用指定的上下文获取为指定的属性声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="descriptor" vsli:raw="Descriptor for the property to be serialized.">要序列化的属性的描述符。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="The serializer associated with the specified property.">与指定的属性关联的序列化程序。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;descriptor&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="descriptor" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; declared for the specified type.">获取为指定的类型声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="type" vsli:raw="The type to get the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; for.">要为其获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的类型。</param>
      <returns vsli:raw="The serializer associated with the specified type. May return &lt;see langword=&quot;null&quot; /&gt;.">与指定的类型关联的序列化程序。 可以返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; declared for the specified type, using the specified context.">使用指定的上下文获取为指定的类型声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      <param name="type" vsli:raw="The type to get the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; for.">要为其获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的类型。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="The serializer associated with the specified type.">与指定的类型关联的序列化程序。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Gets an enumeration of the types referenced by the &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt;.">获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 引用的类型的枚举。</summary>
      <param name="value" vsli:raw="The value being serialized.">要序列化的值。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="The types converted by this serializer.">此序列化程序所转换的类型。</returns>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializerAttribute">
      <summary>标识类型或属性在序列化时应使用的 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类。</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.String)">
      <summary>使用程序集限定的类型名称字符串初始化 <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> 类的新实例。</summary>
      <param name="valueSerializerTypeName">要使用的 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类的程序集限定的类型名称字符串。</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.Type)">
      <summary>使用指定类型初始化 <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> 类的新实例。</summary>
      <param name="valueSerializerType">一个类型，它表示 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类的类型。</param>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerType">
      <summary>获取此特性报告的 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类的类型。</summary>
      <returns>
        <see cref="T:System.Windows.Markup.ValueSerializer" />的类型。</returns>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerTypeName">
      <summary>为此类型或属性获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类型的程序集限定名称。</summary>
      <returns>类型的程序集限定名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute">
      <summary vsli:raw="Indicates that a collection type should be processed as being whitespace significant by a XAML processor.">指示应该由 XAML 处理器将集合类型处理为空白有意义的。</summary>
    </member>
    <member name="M:System.Windows.Markup.WhitespaceSignificantCollectionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Windows.Markup.XamlDeferLoadAttribute">
      <summary vsli:raw="Indicates that a class or property has a deferred load usage for XAML (such as a template behavior), and reports the class that enables the deferring behavior and its destination/content type.">指示类或属性具有 XAML 的延迟加载用途（如模板行为），并报告启用延迟行为及其目标/内容类型的类。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlDeferLoadAttribute&quot; /&gt; class, using string names of types.">使用类型的字符串名称初始化 <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> 类的新实例。</summary>
      <param name="loaderType" vsli:raw="The string name of the type for the implementation to use for the defer load behavior.">实现用于延迟加载行为的类型的字符串名称。</param>
      <param name="contentType" vsli:raw="The string name of the type for the destination/content type of the defer load behavior.">延迟加载行为的目标/内容类型的类型字符串名称。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;loaderType&quot; /&gt; or &lt;paramref name=&quot;contentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="loaderType" /> 或 <paramref name="contentType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlDeferLoadAttribute&quot; /&gt; class, using CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; values.">使用 CLR <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> 值初始化 <see cref="T:System.Type" /> 类的新实例。</summary>
      <param name="loaderType" vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the implementation to use for the defer load behavior.">实现用于延迟加载行为的 CLR <see cref="T:System.Type" /> 值。</param>
      <param name="contentType" vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the destination/content type of the defer load behavior.">延迟加载行为的目标/内容类型的 CLR <see cref="T:System.Type" /> 值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;loaderType&quot; /&gt; or &lt;paramref name=&quot;contentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="loaderType" /> 或 <paramref name="contentType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentType">
      <summary vsli:raw="Gets the CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the destination/content type of the defer load behavior.">获取延迟加载行为的目标/内容类型的 CLR <see cref="T:System.Type" /> 值。</summary>
      <returns vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the destination/content type of the defer load behavior.">延迟加载行为的目标/内容类型的 CLR <see cref="T:System.Type" /> 值。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentTypeName">
      <summary vsli:raw="Gets the string name of the type for the implementation to use for the defer load behavior.">获取实现用于延迟加载行为的类型的字符串名称。</summary>
      <returns vsli:raw="The string name of the type for the converter to use for the defer load behavior.">转换器用于延迟加载行为的类型的字符串名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderType">
      <summary vsli:raw="Gets the CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the implementation to use for the defer load behavior.">获取实现用于延迟加载行为的 CLR <see cref="T:System.Type" /> 值。</summary>
      <returns vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the implementation to use for the defer load behavior.">实现用于延迟加载行为的 CLR <see cref="T:System.Type" /> 值。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderTypeName">
      <summary vsli:raw="Gets the string name of the type for the destination/content type of the defer load behavior.">获取延迟加载行为的目标/内容类型的类型字符串名称。</summary>
      <returns vsli:raw="The string name of the type for the destination/content type of the defer load behavior.">延迟加载行为的目标/内容类型的类型字符串名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute">
      <summary vsli:raw="Indicates that a class can use a markup extension to provide a value, and references a handler to use for markup extension set operations.">指示类可以使用标记扩展提供值，并引用要用于标记扩展设置操作的处理程序。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetMarkupExtensionAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" /> 类的新实例。</summary>
      <param name="xamlSetMarkupExtensionHandler" vsli:raw="The name of the handler to use for markup extension set operations.">用于标记扩展设置操作的处理程序的名称。</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionAttribute.XamlSetMarkupExtensionHandler">
      <summary vsli:raw="Gets the name of the handler to use for markup extension set operations.">获取用于标记扩展设置操作的处理程序的名称。</summary>
      <returns vsli:raw="The name of the handler to use for markup extension set operations.">用于标记扩展设置操作的处理程序的名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs">
      <summary vsli:raw="Provides data for callbacks that are invoked when a XAML object writer sets a value using a markup extension.">为 XAML 对象编写器在使用标记扩展设置值时调用的回调提供数据。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.#ctor(System.Xaml.XamlMember,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 类的新实例。</summary>
      <param name="member" vsli:raw="XAML type system / schema information for the member being set.">所设置的成员的 XAML 类型系统/架构信息。</param>
      <param name="value" vsli:raw="The markup extension reference to provide for the member being set.">要为所设置的成员提供的标记扩展引用。</param>
      <param name="serviceProvider" vsli:raw="Service provider information passed to the markup extension.">传递给标记扩展的服务提供程序信息。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.CallBase">
      <summary vsli:raw="Provides a way to invoke a callback as defined on a base class of the current acting type.">为调用针对当前活动类型基类定义的回调提供了一条途径。</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.MarkupExtension">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt; reference that is relevant to this &lt;see cref=&quot;T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&quot; /&gt;.">获取与此 <see cref="T:System.Windows.Markup.MarkupExtension" /> 相关的 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 引用。</summary>
      <returns vsli:raw="The markup extension reference that is relevant to this &lt;see cref=&quot;T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs&quot; /&gt;.">与此 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 相关的标记扩展引用。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.ServiceProvider">
      <summary vsli:raw="Gets service provider information that was passed to the markup extension.">获取传递给标记扩展的服务提供程序信息。</summary>
      <returns vsli:raw="Service provider information that was passed to the markup extension.">传递给标记扩展的服务提供程序信息。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterAttribute">
      <summary vsli:raw="Indicates that a class can use a type converter to provide a value, and references a handler to use for type converter setting cases.">指示类可以使用类型转换器提供值，并引用要用于类型转换器设置情况的处理程序。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetTypeConverterAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> 类的新实例。</summary>
      <param name="xamlSetTypeConverterHandler" vsli:raw="The name of the handler to use for type converter setting operations.">要用于类型转换器设置操作的处理程序的名称。</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterAttribute.XamlSetTypeConverterHandler">
      <summary vsli:raw="Gets the &lt;paramref name=&quot;xamlSetTypeConverterHandler&quot; /&gt; initialization value (the handler name) specified in the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetTypeConverterAttribute&quot; /&gt;.">获取在 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> 中指定的 <paramref name="xamlSetTypeConverterHandler" /> 初始化值（处理程序名称）。</summary>
      <returns vsli:raw="The &lt;paramref name=&quot;xamlSetTypeConverterHandler&quot; /&gt; value specified in the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetTypeConverterAttribute&quot; /&gt;.">在 <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> 中指定的 <paramref name="xamlSetTypeConverterHandler" /> 值。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterEventArgs">
      <summary vsli:raw="Provides data for callbacks that are invoked when a XAML writer sets a value using a type converter call.">为 XAML 编写器在使用类型转换器调用设置值时调用的回调提供数据。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.#ctor(System.Xaml.XamlMember,System.ComponentModel.TypeConverter,System.Object,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetTypeConverterEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" /> 类的新实例。</summary>
      <param name="member" vsli:raw="XAML type system / schema information for the member being set.">所设置的成员的 XAML 类型系统/架构信息。</param>
      <param name="typeConverter" vsli:raw="The specific type converter instance being invoked.">所调用的特定类型转换器实例。</param>
      <param name="value" vsli:raw="The value to provide for the member being set.">要为所设置的成员提供的值。</param>
      <param name="serviceProvider" vsli:raw="Service provider information that can be used by the &lt;paramref name=&quot;typeConverter&quot; /&gt; class.">可由 <paramref name="typeConverter" /> 类使用的服务提供程序信息。</param>
      <param name="cultureInfo" vsli:raw="Culture information that can be used by the &lt;paramref name=&quot;typeConverter&quot; /&gt; class when calling &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)&quot; /&gt; and other methods.">调用 <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> 和其他方法时可由 <paramref name="typeConverter" /> 类使用的区域性信息。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.CallBase">
      <summary vsli:raw="Provides a way to invoke a callback as defined on a base class of the current acting type.">为调用针对当前活动类型基类定义的回调提供了一条途径。</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.CultureInfo">
      <summary vsli:raw="Gets &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; information that can be used by the type converter class when calling &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)&quot; /&gt; and other methods.">获取调用 <see cref="T:System.Globalization.CultureInfo" /> 和其他方法时可由类型转换器类使用的 <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> 信息。</summary>
      <returns vsli:raw="Culture information that can be used by the type converter class.">可由类型转换器类使用的区域性信息</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.ServiceProvider">
      <summary vsli:raw="Gets &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt; information that can be used by the type converter class.">获取可由类型转换器类使用的 <see cref="T:System.IServiceProvider" /> 信息。</summary>
      <returns vsli:raw="Service provider information that can be used by the &lt;paramref name=&quot;typeConverter&quot; /&gt; class.">可由 <paramref name="typeConverter" /> 类使用的服务提供程序信息。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.TypeConverter">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; instance that is invoked and provides type conversion behavior.">获取所调用的 <see cref="T:System.ComponentModel.TypeConverter" /> 实例，并提供类型转换行为。</summary>
      <returns vsli:raw="The type converter that provides type conversion behavior.">提供类型转换行为的类型转换器。</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetValueEventArgs">
      <summary vsli:raw="Provides data for callbacks that are invoked when a &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; sets certain values.">为 <see cref="T:System.Xaml.XamlObjectWriter" /> 在设置某些值时调用的回调提供数据。</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetValueEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 类的新实例。</summary>
      <param name="member" vsli:raw="XAML type system / schema information for the member being set.">所设置的成员的 XAML 类型系统/架构信息。</param>
      <param name="value" vsli:raw="The value to provide for the member.">要为成员提供的值。</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase">
      <summary vsli:raw="When overridden in a derived class, provides a way to invoke a &lt;see langword=&quot;SetValue&quot; /&gt; callback as defined on a base class of the current acting type.">在派生类中重写时，为调用针对当前活动类型基类定义的 <see langword="SetValue" /> 回调提供了一条途径。</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Handled">
      <summary vsli:raw="Gets or sets a value that determines whether a caller that is using the &lt;see cref=&quot;T:System.Windows.Markup.XamlSetValueEventArgs&quot; /&gt; can use the values without having to call &lt;see cref=&quot;M:System.Windows.Markup.XamlSetValueEventArgs.CallBase&quot; /&gt;.">获取或设置一个值，该值确定使用 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 的调用方是否可以使用值，而不必调用 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values were useful and calling &lt;see cref=&quot;M:System.Windows.Markup.XamlSetValueEventArgs.CallBase&quot; /&gt; is not necessary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果值有用并且不必调用 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Member">
      <summary vsli:raw="Gets XAML type system and XAML schema information for the member being set.">获取所设置的成员的 XAML 类型系统和 XAML 架构信息。</summary>
      <returns vsli:raw="XAML type system and XAML schema information for the member being set.">所设置的成员的 XAML 类型系统和 XAML 架构信息。</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Value">
      <summary vsli:raw="Gets the value to provide for the member being set.">获取要为所设置的成员提供的值。</summary>
      <returns vsli:raw="The value to provide for the member being set.">要为所设置的成员提供的值。</returns>
    </member>
    <member name="T:System.Windows.Markup.XData">
      <summary vsli:raw="Represents literal data that can appear as the value for a &lt;see langword=&quot;Value&quot; /&gt; node.">表示可显示为 <see langword="Value" /> 节点的值的 literal 数据。</summary>
    </member>
    <member name="M:System.Windows.Markup.XData.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XData&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XData" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Windows.Markup.XData.Text">
      <summary vsli:raw="Gets or sets the literal value string that this &lt;see cref=&quot;T:System.Windows.Markup.XData&quot; /&gt; wraps.">获取或设置此 <see cref="T:System.Windows.Markup.XData" /> 包装的文本值字符串。</summary>
      <returns vsli:raw="The literal value string.">文本值字符串。</returns>
    </member>
    <member name="P:System.Windows.Markup.XData.XmlReader">
      <summary vsli:raw="Gets or sets a reader for the literal data.">获取或设置 literal 数据的读取器。</summary>
      <returns vsli:raw="A reader for the literal data.">literal 数据的读取器。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlLangPropertyAttribute">
      <summary vsli:raw="Identifies the property to associate with the xml:lang attribute.">标识要与 xml:lang 特性关联的属性。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlLangPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XmlLangPropertyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XmlLangPropertyAttribute" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The property name to associate with the &lt;see langword=&quot;xml:lang&quot; /&gt; attribute.">要与 <see langword="xml:lang" /> 属性关联的属性名称。</param>
    </member>
    <member name="P:System.Windows.Markup.XmlLangPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the property that is specified in this attribute.">获取此特性中指定的属性的名称。</summary>
      <returns vsli:raw="The name of the property.">属性的名称。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsCompatibleWithAttribute">
      <summary vsli:raw="Specifies that a XAML namespace can be subsumed by another XAML namespace. Typically, the subsuming XAML namespace is indicated in a previously defined &lt;see cref=&quot;T:System.Windows.Markup.XmlnsDefinitionAttribute&quot; /&gt;.">指定一个 XAML 命名空间可以由另一个 XAML 命名空间归入。 通常，先前定义的 <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> 中指示了包含 XAML 命令空间。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsCompatibleWithAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XmlnsCompatibleWithAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XmlnsCompatibleWithAttribute" /> 类的新实例。</summary>
      <param name="oldNamespace" vsli:raw="The reference XAML namespace identifier.">引用 XAML 命名空间标识符。</param>
      <param name="newNamespace" vsli:raw="The subsuming XAML namespace identifier.">归入 XAML 命名空间标识符。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;oldNamespace&quot; /&gt; or &lt;paramref name=&quot;newNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="oldNamespace" /> 或 <paramref name="newNamespace" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.NewNamespace">
      <summary vsli:raw="Gets the subsuming namespace identifier reported by this attribute.">获取此特性报告的归入命名空间标识符。</summary>
      <returns vsli:raw="The subsuming namespace identifier reported in the attribute.">此特性中报告的归入命名空间标识符。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.OldNamespace">
      <summary vsli:raw="Gets the reference namespace identifier reported by this attribute.">获取此特性报告的引用命名空间标识符。</summary>
      <returns vsli:raw="The reference namespace identifier.">引用命名空间标识符。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsDefinitionAttribute">
      <summary vsli:raw="Specifies a mapping on a per-assembly basis between a XAML namespace and a CLR namespace, which is then used for type resolution by a XAML object writer or XAML schema context.">指定 XAML 命名空间与 CLR 命名空间之间按程序集进行的映射，然后 XAML 对象编写器或 XAML 架构上下文将其用于类型解析。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XmlnsDefinitionAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> 类的新实例。</summary>
      <param name="xmlNamespace" vsli:raw="The XAML namespace identifier.">XAML 命名空间标识符。</param>
      <param name="clrNamespace" vsli:raw="A string that references a CLR namespace name.">引用 CLR 命名空间名称的字符串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlNamespace&quot; /&gt; or &lt;paramref name=&quot;clrNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlNamespace" /> 或 <paramref name="clrNamespace" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.AssemblyName">
      <summary vsli:raw="Gets or sets the name of the assembly associated with the attribute.">获取或设置与特性关联的程序集的名称。</summary>
      <returns vsli:raw="The assembly name.">程序集名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace">
      <summary vsli:raw="Gets the string name of the CLR namespace specified in this attribute.">获取此属性中指定 CLR 命名空间的字符串名称。</summary>
      <returns vsli:raw="The CLR namespace, specified as a string.">以字符串形式指定的 CLR 命名空间。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace">
      <summary vsli:raw="Gets the XAML namespace identifier specified in this attribute.">获取此特性中指定的 XAML 命名空间标识符。</summary>
      <returns vsli:raw="The XAML namespace identifier.">XAML 命名空间标识符。</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsPrefixAttribute">
      <summary vsli:raw="Identifies a recommended prefix to associate with a XAML namespace for XAML usage, when writing elements and attributes in a XAML file (serialization) or when interacting with a design environment that has XAML editing features.">标识一个建议的前缀，用于在向 XAML 文件中写入元素和特性（序列化）时或与具有 XAML 编辑功能的设计环境交互时与 XAML 命名空间关联以便使用 XAML。</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.XmlnsPrefixAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.XmlnsPrefixAttribute" /> 类的新实例。</summary>
      <param name="xmlNamespace" vsli:raw="The XAML namespace identifier.">XAML 命名空间标识符。</param>
      <param name="prefix" vsli:raw="The recommended prefix string.">推荐的前缀字符串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlNamespace&quot; /&gt; or &lt;paramref name=&quot;prefix&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlNamespace" /> 或 <paramref name="prefix" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.Prefix">
      <summary vsli:raw="Gets the recommended prefix associated with this attribute.">获取与此特性关联的推荐前缀。</summary>
      <returns vsli:raw="The recommended prefix string.">推荐的前缀字符串。</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace">
      <summary vsli:raw="Gets the XAML namespace identifier associated with this attribute.">获取与此特性关联的 XAML 命名空间标识符。</summary>
      <returns vsli:raw="The XAML namespace identifier.">XAML 命名空间标识符。</returns>
    </member>
    <member name="T:System.Xaml.AmbientPropertyValue">
      <summary vsli:raw="Reports information about an ambient property, as part of an &lt;see cref=&quot;T:System.Xaml.IAmbientProvider&quot; /&gt; implementation.">报告有关环境属性的信息，作为 <see cref="T:System.Xaml.IAmbientProvider" /> 实现的一部分。</summary>
    </member>
    <member name="M:System.Xaml.AmbientPropertyValue.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.AmbientPropertyValue&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.AmbientPropertyValue" /> 类的新实例。</summary>
      <param name="property" vsli:raw="The identifier that represents the ambient property.">表示环境属性的标识符。</param>
      <param name="value" vsli:raw="The value to report.">要报告的值。</param>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.RetrievedProperty">
      <summary vsli:raw="Gets the XAML type system identifier (&lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;) that represents the ambient property.">获取表示环境属性的 XAML 类型系统标识符 (<see cref="T:System.Xaml.XamlMember" />)。</summary>
      <returns vsli:raw="The identifier that represents the ambient property.">表示环境属性的标识符。</returns>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.Value">
      <summary vsli:raw="Gets the value of the ambient property.">获取环境属性的值。</summary>
      <returns vsli:raw="The value of the ambient property.">环境属性的值。</returns>
    </member>
    <member name="T:System.Xaml.AttachableMemberIdentifier">
      <summary vsli:raw="Provides a XAML type system identifier representation for attachable members. The identifier structure parallels the &lt;paramref name=&quot;declaringType&quot; /&gt;&lt;see langword=&quot;.&quot; /&gt;&lt;paramref name=&quot;memberName&quot; /&gt; string form for attachable member usage.">为可附加成员提供 XAML 类型系统标识符表示形式。 标识符结构与 <paramref name="declaringType" /><see langword="." /><paramref name="memberName" /> 字符串形式并列，便于使用可附加成员。</summary>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 类的新实例。</summary>
      <param name="declaringType" vsli:raw="The &lt;paramref name=&quot;declaringType&quot; /&gt; component of the identifier, which should match the name of the declaring &lt;see cref=&quot;P:System.Xaml.XamlMember.Type&quot; /&gt;.">标识符的 <paramref name="declaringType" /> 组成部分，它应与声明 <see cref="P:System.Xaml.XamlMember.Type" /> 的名称相匹配。</param>
      <param name="memberName" vsli:raw="The &lt;paramref name=&quot;memberName&quot; /&gt; component of the identifier, which should match the &lt;see cref=&quot;P:System.Xaml.XamlMember.Name&quot; /&gt;.">标识符的 <paramref name="memberName" /> 组成部分，它应与 <see cref="P:System.Xaml.XamlMember.Name" /> 相匹配。</param>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.DeclaringType">
      <summary vsli:raw="Gets or sets the &lt;paramref name=&quot;declaringType&quot; /&gt; component value of the &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">获取或设置 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <paramref name="declaringType" /> 组成部分值。</summary>
      <returns vsli:raw="The &lt;paramref name=&quot;declaringType&quot; /&gt; component value of the &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <paramref name="declaringType" /> 组成部分值。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; and a specified object have the same value.">确定此 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 实例是否与指定的对象具有相同的值。</summary>
      <param name="obj" vsli:raw="The object to compare with the current &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">将与当前 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; and if its value is the same as this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="obj" /> 为 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 并且它的值与此实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Xaml.AttachableMemberIdentifier)">
      <summary vsli:raw="Determines whether this instance and another specified &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; object have the same value.">确定此实例是否与另一个指定的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 对象具有相同的值。</summary>
      <param name="other" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">要与当前的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 进行比较的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the objects have the same value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果这些对象具有相同的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">返回该 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的哈希代码。</summary>
      <returns vsli:raw="An integer hash code.">整数哈希代码。</returns>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.MemberName">
      <summary vsli:raw="Gets or sets the &lt;paramref name=&quot;memberName&quot; /&gt; component value of the &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">获取或设置 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <paramref name="memberName" /> 组成部分值。</summary>
      <returns vsli:raw="The &lt;paramref name=&quot;memberName&quot; /&gt; component value of the &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 的 <paramref name="memberName" /> 组成部分值。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Equality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; objects have the same value.">确定两个指定的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 对象是否具有相同的值。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 或 <see langword="null" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;left&quot; /&gt; is the same as the value of &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的值与 <paramref name="left" /> 的值相同，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Inequality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; objects have different values.">确定两个指定的 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 对象是否具有不同的值。</summary>
      <param name="left" vsli:raw="An &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 或 <see langword="null" />。</param>
      <param name="right" vsli:raw="An &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;left&quot; /&gt; differs from the value of &lt;paramref name=&quot;right&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="left" /> 的值与 <paramref name="right" /> 的值不同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">返回一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt;.">一个 <see cref="T:System.String" />，表示当前的 <see cref="T:System.Xaml.AttachableMemberIdentifier" />。</returns>
    </member>
    <member name="T:System.Xaml.AttachablePropertyServices">
      <summary vsli:raw="Provides static helper methods that obtain values and accessor method information from an attachable property and that work with an attached property store.">提供一些静态帮助器方法，这些方法用于从可附加属性中获取值和访问器方法信息，并且和附加的属性存储一起工作。</summary>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.CopyPropertiesTo(System.Object,System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary vsli:raw="Copies all attachable property/value pairs from a specified attachable property store and into a destination array.">从指定的可附加属性存储中复制所有可附加属性/值对，并将它们复制到目标数组中。</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to access a static default attachable property store.">实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储；或者是任意不为 null 的对象，用于访问静态默认可附加属性存储。</param>
      <param name="array" vsli:raw="The destination array. The array is a generic array, should be passed undimensioned, and should have components of &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; and &lt;see langword=&quot;object&quot; /&gt;.">目标数组。 该数组为泛型数组，应以无维度方式传递，并且应具有 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 和 <see langword="object" /> 的组件。</param>
      <param name="index" vsli:raw="The source index into which to copy.">要在该处进行复制的源索引。</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.GetAttachedPropertyCount(System.Object)">
      <summary vsli:raw="Returns the count of the attachable property entries that are in the specified store.">返回指定存储中可附加属性条目的计数。</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to access a static default attachable property store.">实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储；或者是任意不为 null 的对象，用于访问静态默认可附加属性存储。</param>
      <returns vsli:raw="The integer count of entries in the store.">存储中条目的整数计数。</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.RemoveProperty(System.Object,System.Xaml.AttachableMemberIdentifier)">
      <summary vsli:raw="Removes the entry for the specified attachable property from the specified store.">从指定存储中移除指定可附加属性的条目。</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to access a static default attachable property store.">实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储；或者是任意不为 null 的对象，用于访问静态默认可附加属性存储。</param>
      <param name="name" vsli:raw="The identifier for the attachable property entry to remove from the store.">要从存储区中移除的可附加属性条目的标识符。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attachable property entry for &lt;paramref name=&quot;name&quot; /&gt; was found in the store and removed from it; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在存储区中找到了 <paramref name="name" /> 的可附加属性条目并已将其从中移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.SetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary vsli:raw="Sets a value for the specified attachable property in the specified store.">设置指定存储中的指定可附加属性的值。</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to use a static default attachable property store.">一个实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储，或者为任何不可为 null 的对象以使用静态默认可附加属性存储。</param>
      <param name="name" vsli:raw="The identifier of the attachable property entry for which to set a value.">要为其设置值的可附加属性条目的标识符。</param>
      <param name="value" vsli:raw="The value to set.">要设置的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="A value could not be set in the store.">未能在存储中设置值。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary vsli:raw="Attempts to get a value for the specified attachable property in the specified store. Does not throw an exception if the specific attachable property does not exist in the store.">尝试获取指定存储中的指定可附加属性的值。 如果特定可附加属性在存储中不存在，将不会引发异常。</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to use a static default attachable property store.">一个实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储，或者为任何不可为 null 的对象以使用静态默认可附加属性存储。</param>
      <param name="name" vsli:raw="The identifier of the attachable property entry for which to get a value.">要为其获取值的可附加属性条目的标识符。</param>
      <param name="value" vsli:raw="Out parameter. When this method returns, contains the destination object for the value if &lt;paramref name=&quot;name&quot; /&gt; exists in the store and has a value.">输出参数。 当此方法返回时，如果 <paramref name="name" /> 存在于存储中并且具有值，则会包含值的目标对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attachable property entry for &lt;paramref name=&quot;name&quot; /&gt; was found in the store and a value was posted to &lt;paramref name=&quot;value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在存储中找到了 <paramref name="name" /> 的可附加属性条目，并且值已传递到 <paramref name="value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty``1(System.Object,System.Xaml.AttachableMemberIdentifier,``0@)">
      <summary vsli:raw="Attempts to get a value for the specified attachable property in the specified store, returning a generic output form. Does not throw an exception if the specific attachable property does not exist in the store.">尝试获取指定存储中的指定可附加属性的值，返回泛型输出形式。 如果特定可附加属性在存储中不存在，将不会引发异常。</summary>
      <param name="instance" vsli:raw="A specific attachable property store that implements &lt;see cref=&quot;T:System.Xaml.IAttachedPropertyStore&quot; /&gt;; or any non-null object to access a static default attachable property store.">实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储；或者是任意不为 null 的对象，用于访问静态默认可附加属性存储。</param>
      <param name="name" vsli:raw="The identifier of the attachable property entry for which to get a value.">要为其获取值的可附加属性条目的标识符。</param>
      <param name="value" vsli:raw="Out parameter. When this method returns, contains the destination object for the value if &lt;paramref name=&quot;name&quot; /&gt; exists in the store and has a value.">输出参数。 当此方法返回时，如果 <paramref name="name" /> 存在于存储中并且具有值，则会包含值的目标对象。</param>
      <typeparam name="T" vsli:raw="The expected type of the output.">预期的输出类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attachable property entry for &lt;paramref name=&quot;name&quot; /&gt; was found in the store and a value was posted to &lt;paramref name=&quot;value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在存储中找到了 <paramref name="name" /> 的可附加属性条目，并且值已传递到 <paramref name="value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.IAmbientProvider">
      <summary vsli:raw="Represents a service that can return information items about ambient properties or ambient types to type converters and markup extensions.">返回一个服务，该服务可将有关环境属性或环境类型的信息项返回到类型转换器和标记扩展。</summary>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Boolean,System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary vsli:raw="Returns an enumerable set of ambient property information items for the requested set of types and properties.">针对所请求的种类和属性集，返回环境属性信息项的可枚举集合。</summary>
      <param name="ceilingTypes" vsli:raw="Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph. This type holds the desired ambient property. May be &lt;see langword=&quot;null&quot; /&gt;.">指定一个或多个类型，如果在对象图中向上遍历的过程中遇到这些类型，则这些类型应停止计算。 此类型包含所需的环境属性。 可为 <see langword="null" />。</param>
      <param name="searchLiveStackOnly" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not use a saved context; &lt;see langword=&quot;false&quot; /&gt; to use a saved context. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 则不使用已保存的上下文 ；<see langword="false" /> 则使用已保存的上下文。 默认值为 <see langword="false" />。</param>
      <param name="types" vsli:raw="Specifies one or more type identifier objects that identify the types to be considered ambient.">指定一个或多个类型标识符对象，这些对象标识要视为环境的类型。</param>
      <param name="properties" vsli:raw="Specifies one or more property identifier objects that identify the properties to be considered ambient.">指定一个或多个属性标识符对象，这些对象标识要视为环境属性的属性。</param>
      <returns vsli:raw="An enumerable set of ambient property information items for the requested set of types and properties. The property information for each &lt;see cref=&quot;T:System.Xaml.AmbientPropertyValue&quot; /&gt; that is returned will match one of the input &lt;paramref name=&quot;types&quot; /&gt; or &lt;paramref name=&quot;properties&quot; /&gt;.">针对所请求的类型和属性集的环境属性信息项的可枚举集合。 返回的每个 <see cref="T:System.Xaml.AmbientPropertyValue" /> 的属性信息将与其中一个输入 <paramref name="types" /> 或 <paramref name="properties" /> 相匹配。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary vsli:raw="Returns an enumerable set of ambient property information items for the requested set of properties.">针对所请求的属性集，返回环境属性信息项的可枚举集合。</summary>
      <param name="ceilingTypes" vsli:raw="Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph. This type holds the desired ambient property. May be &lt;see langword=&quot;null&quot; /&gt;.">指定一个或多个类型，如果在对象图中向上遍历的过程中遇到这些类型，则这些类型应停止计算。 此类型包含所需的环境属性。 可为 <see langword="null" />。</param>
      <param name="properties" vsli:raw="Specifies one or more property identifier objects that identify the properties to be considered ambient.">指定一个或多个属性标识符对象，这些对象标识要视为环境属性的属性。</param>
      <returns vsli:raw="An enumerable set of ambient property information items for the requested set of properties. The property information for each &lt;see cref=&quot;T:System.Xaml.AmbientPropertyValue&quot; /&gt; that is returned will match one of the input &lt;paramref name=&quot;properties&quot; /&gt;.">所请求属性集的环境属性信息的可枚举集合。 返回的每个 <see cref="T:System.Xaml.AmbientPropertyValue" /> 的属性信息将与其中一个输入 <paramref name="properties" /> 相匹配。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Xaml.XamlType[])">
      <summary vsli:raw="Returns an enumerable set of object instances of possible ambient types for the requested types.">针对请求的类型，返回可能的环境类型的对象实例的可枚举集合。</summary>
      <param name="types" vsli:raw="The set of types from which to retrieve ambient type information.">要从中检索环境类型信息的类型集。</param>
      <returns vsli:raw="An enumerable set of objects that represent the values for the requested set of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; identifiers.">对象的可枚举集合，这些对象表示所请求的 <see cref="T:System.Xaml.XamlType" /> 标识符集合的值。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary vsli:raw="Returns a single ambient property information item from the requested set of properties, based on which property is first encountered.">从请求的属性集中返回单个环境属性信息项，具体情况视哪个属性是遇到的第一个属性而定。</summary>
      <param name="ceilingTypes" vsli:raw="Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph. This type holds the desired ambient property.">指定一个或多个类型，如果在对象图中向上遍历的过程中遇到这些类型，则这些类型应停止计算。 此类型包含所需的环境属性。</param>
      <param name="properties" vsli:raw="Specifies one or more objects that identify the properties to be considered ambient.">指定一个或多个对象，这些对象标识要视为环境属性的属性。</param>
      <returns vsli:raw="A single ambient property information item for the first ambient property value from the &lt;paramref name=&quot;properties&quot; /&gt; list that is found.">所找到的 <paramref name="properties" /> 列表中第一个环境属性值的单个环境属性信息项。</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Xaml.XamlType[])">
      <summary vsli:raw="Returns the first matching object that is a possible ambient type for the requested types.">返回第一个匹配对象，该对象是所请求类型可能的环境类型。</summary>
      <param name="types" vsli:raw="The set of types from which to retrieve ambient type information.">要从中检索环境类型信息的类型集。</param>
      <returns vsli:raw="The first result object for the requested set.">所请求集合的第一个结果对象。</returns>
    </member>
    <member name="T:System.Xaml.IAttachedPropertyStore">
      <summary vsli:raw="Represents an attachable member store for an object where attachable members are set. This attachable member store can then be referenced with &lt;see cref=&quot;T:System.Xaml.AttachablePropertyServices&quot; /&gt;.">表示设置了可附加成员的对象的可附加成员存储。 随后可使用 <see cref="T:System.Xaml.AttachablePropertyServices" /> 引用此可附加成员存储。</summary>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.CopyPropertiesTo(System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary vsli:raw="Copies all attachable member/value pairs from this attachable member store into a destination array.">从此可附加成员存储区中复制所有可附加成员/值对，并将它们复制到目标数组中。</summary>
      <param name="array" vsli:raw="The destination array. The array is a generic array, should be passed undimensioned, and should have components of &lt;see cref=&quot;T:System.Xaml.AttachableMemberIdentifier&quot; /&gt; and &lt;see langword=&quot;object&quot; /&gt;.">目标数组。 该数组为泛型数组，应以无维度方式传递，并且应具有 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 和 <see langword="object" /> 的组件。</param>
      <param name="index" vsli:raw="The source index where copying should begin.">开始复制处的源索引。</param>
    </member>
    <member name="P:System.Xaml.IAttachedPropertyStore.PropertyCount">
      <summary vsli:raw="Gets the count of the attachable member entries in this attachable member store.">获取此可附加成员存储中的可附加成员条目的计数。</summary>
      <returns vsli:raw="The integer count of entries in the store.">存储中条目的整数计数。</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.RemoveProperty(System.Xaml.AttachableMemberIdentifier)">
      <summary vsli:raw="Removes the entry for the specified attachable member from this attachable member store.">从此可附加成员存储中移除指定可附加成员的条目。</summary>
      <param name="attachableMemberIdentifier" vsli:raw="The XAML type system identifier for the attachable member entry to remove.">要移除的可附加成员条目的 XAML 类型系统标识符。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attachable member entry for &lt;paramref name=&quot;attachableMemberIdentifier&quot; /&gt; was found in the store and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在存储中找到了 <paramref name="attachableMemberIdentifier" /> 的可附加成员条目并已将其移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.SetProperty(System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary vsli:raw="Sets a value for the specified attachable member in the specified store.">设置指定存储中的指定可附加成员的值。</summary>
      <param name="attachableMemberIdentifier" vsli:raw="The XAML type system identifier for the attachable member entry to set.">要设置的可附加成员条目的 XAML 类型系统标识符。</param>
      <param name="value" vsli:raw="The value to set.">要设置的值。</param>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.TryGetProperty(System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary vsli:raw="Attempts to get a value for the specified attachable member in the specified store.">尝试获取指定存储中的指定可附加成员的值。</summary>
      <param name="attachableMemberIdentifier" vsli:raw="The XAML type system identifier for the attachable member entry to get.">要获取的可附加成员条目的 XAML 类型系统标识符。</param>
      <param name="value" vsli:raw="Out parameter. When this method returns, contains the destination object for the value if &lt;paramref name=&quot;attachableMemberIdentifier&quot; /&gt; exists in the store and has a value.">输出参数。 当此方法返回时，如果 <paramref name="attachableMemberIdentifier" /> 存在于存储中并且具有值，则会包含值的目标对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attachable member entry for &lt;paramref name=&quot;attachableMemberIdentifier&quot; /&gt; was found in the store and a value was posted to &lt;paramref name=&quot;value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在存储中找到了 <paramref name="attachableMemberIdentifier" /> 的可附加成员条目，并且值已传递到 <paramref name="value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.IDestinationTypeProvider">
      <summary vsli:raw="Represents a service that can return a CLR type system identifier for the destination type. The destination type is relevant when the destination type for a property-setting operation is indirectly reported by reflection or other mechanisms.">表示一个服务，该服务可返回目标类型的 CLR 类型系统标识符。 与目标类型相关的情况是属性设置操作的目标类型由反射或其他机制间接报告。</summary>
    </member>
    <member name="M:System.Xaml.IDestinationTypeProvider.GetDestinationType">
      <summary vsli:raw="Returns the CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; that identifies the destination type for the relevant type converter or markup extension.">返回 CLR <see cref="T:System.Type" />，用于标识相关类型转换器或标记扩展的目标类型。</summary>
      <returns vsli:raw="A CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; value for the destination type.">目标类型的 CLR <see cref="T:System.Type" /> 值。</returns>
    </member>
    <member name="T:System.Xaml.INamespacePrefixLookup">
      <summary vsli:raw="Represents a service that can return the recommended prefix for a XAML namespace mapping to consumers. Consumers might include design environments or serializers.">表示一个服务，该服务可为到使用者的 XAML 命名空间映射返回建议的前缀。 使用者可以包括设计环境或序列化程序。</summary>
    </member>
    <member name="M:System.Xaml.INamespacePrefixLookup.LookupPrefix(System.String)">
      <summary vsli:raw="Returns the recommended prefix for a specified XAML namespace identifier.">针对指定的 XAML 命名空间标识符返回建议前缀。</summary>
      <param name="ns" vsli:raw="The XAML namespace identifier string for which to obtain a prefix.">要针对其获取前缀的 XAML 命名空间标识符字符串。</param>
      <returns vsli:raw="The recommended prefix.">建议的前缀。</returns>
    </member>
    <member name="T:System.Xaml.IRootObjectProvider">
      <summary vsli:raw="Describes a service that can return the root object of markup being parsed.">描述一个服务，该服务可返回所分析标记的根对象。</summary>
    </member>
    <member name="P:System.Xaml.IRootObjectProvider.RootObject">
      <summary vsli:raw="Gets the root object from markup or from an object graph.">从标记中或从对象图中获取根对象。</summary>
      <returns vsli:raw="The root object.">根对象。</returns>
    </member>
    <member name="T:System.Xaml.IXamlIndexingReader">
      <summary vsli:raw="Provides a service that represents indexed node control for a simple implementation of a node-based XAML reader.">提供一个服务，该服务表示基于节点的 XAML 读取器的简单实现的索引节点控件。</summary>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.Count">
      <summary vsli:raw="Gets the number of nodes in the current external node set.">获取当前外部节点集中的节点数。</summary>
      <returns vsli:raw="The number of nodes in the current external node set.">当前外部节点集中的节点数。</returns>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.CurrentIndex">
      <summary vsli:raw="Gets or sets the index number of the current reader position for the indexed list view of XAML nodes.">针对 XAML 节点的索引列表视图获取或设置当前读取器位置的索引号。</summary>
      <returns vsli:raw="The index number of the current reader position.">当前读取器位置的索引号。</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfo">
      <summary vsli:raw="Describes a service for reporting text line information in XAML reader implementations.">描述用于在 XAML 读取器实现中报告文本行信息的服务。</summary>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.HasLineInfo">
      <summary vsli:raw="Gets a value that specifies whether line information is available.">获取一个值，该值指定行信息是否可用。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if line information is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果行信息可用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LineNumber">
      <summary vsli:raw="Gets the line number to report.">获取要报告的行号。</summary>
      <returns vsli:raw="The line number to report.">要报告的行号。</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LinePosition">
      <summary vsli:raw="Gets the line position to report.">获取要报告的行位置。</summary>
      <returns vsli:raw="The line position to report.">要报告的行位置。</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfoConsumer">
      <summary vsli:raw="Describes a service where a XAML writer can use reported line information and then include the information in the output.">描述一个服务，在该服务中，XAML 编写器可以使用报告的行信息，然后将该信息包括在输出中。</summary>
    </member>
    <member name="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)">
      <summary vsli:raw="Collects line information.">收集行信息。</summary>
      <param name="lineNumber" vsli:raw="The line number to use in the output.">在输出中使用的行号。</param>
      <param name="linePosition" vsli:raw="The line position to use in the output.">在输出中使用的行位置。</param>
    </member>
    <member name="P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo">
      <summary vsli:raw="Gets a value that determines whether a line information service should provide values and therefore, should also call &lt;see cref=&quot;M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)&quot; /&gt; when relevant.">获取一个值，该值确定行信息服务是否应在相关时提供值，并因此是否应同时调用 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if line information is used by the implementation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果行信息由实现使用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.IXamlNameProvider">
      <summary vsli:raw="Provides a service that is used during save and write operations to input an object and return a XAML name.">提供一个服务，该服务用于在保存和写入操作过程中输入对象，并返回 XAML 名称。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameProvider.GetName(System.Object)">
      <summary vsli:raw="Retrieves the XAML name of the specified object.">检索指定对象的 XAML 名称。</summary>
      <param name="value" vsli:raw="The object to get the name for.">要为其获取名称的对象。</param>
      <returns vsli:raw="The XAML name value of the requested object.">所请求对象的 XAML 名称值。</returns>
    </member>
    <member name="T:System.Xaml.IXamlNameResolver">
      <summary vsli:raw="Describes a service that can return objects that are specified by XAML name, or alternatively, returns a token that defers name resolution. The service can also return an enumerable set of all named objects that are in the XAML namescope.">描述可返回 XAML 名称所指定对象的服务，或者返回推迟名称解析的标记。 该服务还可返回 XAML 名称范围中所有命名对象的可枚举集合。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetAllNamesAndValuesInScope">
      <summary vsli:raw="Returns an enumerable set of all named objects in the XAML namescope.">返回 XAML 名称范围中所有命名对象的可枚举集合。</summary>
      <returns vsli:raw="An enumerable set of &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; objects. For each &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, the &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Key&quot; /&gt; component is a string, and the &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Value&quot; /&gt; component is the object that uses the &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Key&quot; /&gt; name in the XAML namescope.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 对象的可枚举集合。 对于每个 <see cref="T:System.Collections.Generic.KeyValuePair`2" />，<see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 组件为字符串，<see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> 组件为在 XAML 名称范围中使用 <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 名称的对象。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String})">
      <summary vsli:raw="Returns an object that can correct for certain markup patterns that produce forward references.">返回一个对象，该对象可针对生成前向引用的某些标记模式进行修正。</summary>
      <param name="names" vsli:raw="A collection of names that are possible forward references.">可能转发引用的名称的集合。</param>
      <returns vsli:raw="An object that provides a token for lookup behavior to be evaluated later.">一个为要稍后计算的查找行为提供标记的对象。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary vsli:raw="Returns an object that can correct for certain markup patterns that produce forward references.">返回一个对象，该对象可针对生成前向引用的某些标记模式进行修正。</summary>
      <param name="names" vsli:raw="A collection of names that are possible forward references.">可能转发引用的名称的集合。</param>
      <param name="canAssignDirectly" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to immediately assign the resolved name reference to the target property. &lt;see langword=&quot;false&quot; /&gt; to call the user code for a reparse. The default behavior is &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则立即将已解析的名称引用指派给目标属性。 如果为 <see langword="false" />，则调用用户代码进行重新分析。 默认行为是 <see langword="false" />。</param>
      <returns vsli:raw="An object that provides a token for lookup behavior to be evaluated later.">一个为要稍后计算的查找行为提供标记的对象。</returns>
    </member>
    <member name="P:System.Xaml.IXamlNameResolver.IsFixupTokenAvailable">
      <summary vsli:raw="Gets a value that determines whether calling &lt;see cref=&quot;M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)&quot; /&gt; is available in order to resolve a name into a token for forward resolution.">获取一个值，该值确定是否可调用 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />，以便将名称解析为前向解析的标记。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)&quot; /&gt; is available as an implementation that returns a useful token for forward resolution; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果提供了 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" /> 作为可为前向解析返回有用标记的实现，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="E:System.Xaml.IXamlNameResolver.OnNameScopeInitializationComplete">
      <summary vsli:raw="Occurs when a XAML processor has registered all the relevant names to the backing XAML namescope.">在 XAML 处理器已向支持 XAML 名称范围注册了所有相关名称时发生。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String)">
      <summary vsli:raw="Resolves an object from a name reference.">从名称引用解析对象。</summary>
      <param name="name" vsli:raw="The name reference to resolve.">要解析的名称引用。</param>
      <returns vsli:raw="The resolved object; or null.">解析的对象；或者为 null。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String,System.Boolean@)">
      <summary vsli:raw="Resolves an object from a name reference, and provides a tracking value that reports whether the object is fully initialized for object graph purposes.">从名称引用解析对象，并提供一个跟踪值，该值报告是否为建立对象图而完全初始化对象。</summary>
      <param name="name" vsli:raw="The name reference to resolve.">要解析的名称引用。</param>
      <param name="isFullyInitialized" vsli:raw="When this method returns, &lt;see langword=&quot;true&quot; /&gt; if the returned object has any dependencies on unresolved references; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">当此方法返回时，如果返回的对象在未解析引用上有任何依赖项，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns vsli:raw="An object that provides a token for lookup behavior to be evaluated later.">一个为要稍后计算的查找行为提供标记的对象。</returns>
    </member>
    <member name="T:System.Xaml.IXamlNamespaceResolver">
      <summary vsli:raw="Describes a service that can return a XAML namespace that is based on its prefix as it is mapped in XAML markup.">描述一个服务，该服务可按照 XAML 标记中映射的方式基于 XAML 命名空间的前缀返回该命名空间。</summary>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespace(System.String)">
      <summary vsli:raw="Retrieves a XAML namespace identifier for the specified prefix string.">针对指定的前缀字符串检索 XAML 命名空间标识符。</summary>
      <param name="prefix" vsli:raw="The prefix for which to retrieve the XAML namespace information.">要针对其检索 XAML 命名空间信息的前缀。</param>
      <returns vsli:raw="The requested XAML namespace identifier, as a string.">所请求 XAML 命名空间标识符，表示为字符串形式。</returns>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespacePrefixes">
      <summary vsli:raw="Returns all the possible prefix-to-XAML namespace mappings (&lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt; values) that are available in the active XAML schema context.">返回所有可能的前缀到 XAML 命名空间映射（<see cref="T:System.Xaml.NamespaceDeclaration" /> 值），这些映射可在活动架构上下文中找到。</summary>
      <returns vsli:raw="An enumerable set of &lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt; values. To get all the prefix strings, get the &lt;see cref=&quot;P:System.Xaml.NamespaceDeclaration.Prefix&quot; /&gt; value from each value in the returned set. To get prefixes for specific XAML namespaces, process any return value that has the desired &lt;see cref=&quot;P:System.Xaml.NamespaceDeclaration.Namespace&quot; /&gt; value.">
        <see cref="T:System.Xaml.NamespaceDeclaration" /> 值的可枚举集合。 若要获取所有前缀字符串，请从返回的集内的每个值中获取 <see cref="P:System.Xaml.NamespaceDeclaration.Prefix" /> 值。 要获取特定 XAML 命名空间的前缀，请处理任何具有所需 <see cref="P:System.Xaml.NamespaceDeclaration.Namespace" /> 值的返回值。</returns>
    </member>
    <member name="T:System.Xaml.IXamlObjectWriterFactory">
      <summary vsli:raw="Represents a service that generates a &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; that is based on the current internal parser context.">表示一个服务，该服务基于当前的内部分析器上下文生成 <see cref="T:System.Xaml.XamlObjectWriter" />。</summary>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetParentSettings">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; from the original internal parser context.">从原始内部分析器上下文中返回 <see cref="T:System.Xaml.XamlObjectWriterSettings" />。</summary>
      <returns vsli:raw="The settings from the original internal parser context.">原始内部分析器上下文中的设置。</returns>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetXamlObjectWriter(System.Xaml.XamlObjectWriterSettings)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; that is based on active XAML schema context.">返回基于活动 XAML 架构上下文的 <see cref="T:System.Xaml.XamlObjectWriter" />。</summary>
      <param name="settings" vsli:raw="The settings to use for construction and initialization of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">用于构造和初始化 <see cref="T:System.Xaml.XamlObjectWriter" /> 的设置。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; that has the specified settings.">
        <see cref="T:System.Xaml.XamlObjectWriter" />，它具有指定的设置。</returns>
    </member>
    <member name="T:System.Xaml.IXamlSchemaContextProvider">
      <summary vsli:raw="Represents a service that provides XAML schema context information to type converters and markup extensions.">表示一个服务，该服务为类型转换器和标记扩展提供 XAML 架构上下文信息。</summary>
    </member>
    <member name="P:System.Xaml.IXamlSchemaContextProvider.SchemaContext">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; that is reported by the service context.">获取服务上下文所报告的 <see cref="T:System.Xaml.XamlSchemaContext" />。</summary>
      <returns vsli:raw="The XAML schema context that is reported by the service context.">服务上下文所报告的 XAML 架构上下文。</returns>
    </member>
    <member name="T:System.Xaml.NamespaceDeclaration">
      <summary vsli:raw="Declares the identifier and the prefix of a XAML namespace by storing these string values as separate properties.">为 XAML 命名空间声明标识符和前缀，方法是将这些字符串值存储为单独的属性。</summary>
    </member>
    <member name="M:System.Xaml.NamespaceDeclaration.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt; class using initial property values.">使用初始属性值初始化 <see cref="T:System.Xaml.NamespaceDeclaration" /> 类的新实例。</summary>
      <param name="ns" vsli:raw="The XAML namespace identifier, as a string.">以字符串形式指定的 XAML 命名空间标识符。</param>
      <param name="prefix" vsli:raw="The string prefix that is used for the namespace in prefix mappings.">在前缀映射中用于命名空间的字符串前缀。</param>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Namespace">
      <summary vsli:raw="Gets the identifier component of a &lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt;.">获取 <see cref="T:System.Xaml.NamespaceDeclaration" /> 的标识符组成部分。</summary>
      <returns vsli:raw="The identifier of the XAML namespace declaration.">XAML 命名空间声明的标识符。</returns>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Prefix">
      <summary vsli:raw="Gets the prefix that is used as the XAML namespace mapping prefix for a &lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt;.">获取用作 <see cref="T:System.Xaml.NamespaceDeclaration" /> 的 XAML 命名空间映射前缀的前缀。</summary>
      <returns vsli:raw="The prefix string for this &lt;see cref=&quot;T:System.Xaml.NamespaceDeclaration&quot; /&gt;.">此 <see cref="T:System.Xaml.NamespaceDeclaration" /> 的前缀字符串。</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlAccessLevel">
      <summary>定义对程序集和类型的访问控制以用于 XAML 加载。</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.Assembly)">
      <summary>基于 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 请求的程序集返回 <see cref="T:System.Reflection.Assembly" /> 实例。</summary>
      <param name="assembly">请求的程序集。</param>
      <returns>一个用 <paramref name="assembly" /> 值作为 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 的源信息的 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.AssemblyName)">
      <summary>基于 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 请求的程序集返回 <see cref="T:System.Reflection.AssemblyName" /> 实例。</summary>
      <param name="assemblyName">请求的程序集名称。</param>
      <returns>一个用 <paramref name="assemblyName" /> 值作为 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 的源信息的 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> 不是有效的完全限定程序集名称。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName">
      <summary>获取权限由此 <see cref="T:System.Reflection.AssemblyName" /> 来确定的程序集的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />。</summary>
      <returns>权限由此 <see cref="T:System.Reflection.AssemblyName" /> 来确定的程序集的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.String)">
      <summary>基于按限定名称指定的特定类型返回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例。</summary>
      <param name="assemblyQualifiedTypeName">一个作为程序集限定类型名称分析的字符串。</param>
      <returns>一个用 <paramref name="assemblyQualifiedTypeName" /> 值作为 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 和 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" />（由对类型的反射来确定）的源信息的 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyQualifiedTypeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyQualifiedTypeName" /> 不是有效的程序集限定的类型名称。  
或 
<paramref name="assemblyQualifiedTypeName" /> 内的程序集名称不是有效的程序集名称。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.Type)">
      <summary>基于 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 指定的特定类型返回 <see cref="T:System.Type" /> 实例。</summary>
      <param name="type">请求对其进行访问的 <see cref="T:System.Type" />。</param>
      <returns>一个用 <paramref name="type" /> 值作为 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 和 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" />（由对类型的反射来确定）的源信息的 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName">
      <summary>获取权限由此 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 来确定的类型的非限定字符串名称。</summary>
      <returns>权限由此 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 来确定的类型的非限定字符串名称。</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlLoadPermission">
      <summary>声明权限，这些权限用于加载 XAML 读取器或编写器所使用的程序集中的类型。</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Collections.Generic.IEnumerable{System.Xaml.Permissions.XamlAccessLevel})">
      <summary>使用一组可枚举的特定 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 值初始化 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 类的新实例。</summary>
      <param name="allowedAccess">一组可枚举的特定 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="allowedAccess" /> 包含无效信息，例如 null 项。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用现有权限初始化 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 类的新实例。</summary>
      <param name="state">一个 <see cref="T:System.Security.Permissions.PermissionState" /> 枚举值。</param>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>使用单一 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 值初始化 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 类的新实例。</summary>
      <param name="allowedAccess">定义的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess">
      <summary>获取此 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 表示的所有 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 值的列表。</summary>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值的只读列表，或者为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Copy">
      <summary>创建并返回当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的一个相同副本。</summary>
      <returns>当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的副本。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Equals(System.Object)">
      <param name="obj" />
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="elem">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elem" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elem" /> 不包含 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的 XML 编码。  
或 
<paramref name="elem" /> 中的版本特性不受支持。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.GetHashCode" />
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Includes(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>返回此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是否在其 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 列表中包含指定的 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />。</summary>
      <param name="requestedAccess">要检查的特定 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />。</param>
      <returns>如果 <paramref name="requestedAccess" /> 是当前 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> 的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 列表中的一项，则为 <see langword="true" />。 否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestedAccess" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />，这是当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 与指定权限的交集。</summary>
      <param name="target">要与当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 相交的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。 可以为 <see langword="null" />。</param>
      <returns>一项新权限，表示当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 与指定 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的交集。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不为 <see langword="null" /> 或不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 可以为 <see langword="null" />。</param>
      <returns>如果当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不为 <see langword="null" /> 或不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsUnrestricted">
      <summary>返回此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是否表示不受限制的权限。</summary>
      <returns>如果此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 表示不受限制的权限，则为 <see langword="true" />。 如果此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 在 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> 中具有特定访问级别限制，或者没有权限，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.ToXml">
      <summary>创建此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 及其当前状态的 XML 编码。</summary>
      <returns>此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 与指定权限的并集。</summary>
      <param name="other">要与当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 进行合并的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。 可以为 <see langword="null" />。</param>
      <returns>新的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />，它表示当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和指定 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的并集。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不为 <see langword="null" /> 或不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="T:System.Xaml.Schema.AllowedMemberLocations">
      <summary vsli:raw="Specifies the syntax restrictions enforced on a property when it is set in XAML, as reported by a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">指定在 XAML 中设置属性时针对该属性实施的语法限制，由 <see cref="T:System.Xaml.XamlDirective" /> 报告。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Any">
      <summary vsli:raw="Property can be set in either &lt;see cref=&quot;F:System.Xaml.Schema.AllowedMemberLocations.Attribute&quot; /&gt; or &lt;see cref=&quot;F:System.Xaml.Schema.AllowedMemberLocations.MemberElement&quot; /&gt; location. (This enumeration member is defined as the combination of those values.)">可在 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.Attribute" /> 或 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement" /> 位置中设置属性。 （此枚举成员定义为这些值的组合。）</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Attribute">
      <summary vsli:raw="Property can be set in XAML attribute syntax.">可在 XAML 特性语法中设置属性。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement">
      <summary vsli:raw="Property can be set in XAML property element syntax.">可在 XAML 属性元素语法中设置属性。</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.None">
      <summary vsli:raw="Property cannot be set in XAML at all. This is the default.">无法完全在 XAML 中设置属性。 这是默认设置。</summary>
    </member>
    <member name="T:System.Xaml.Schema.ShouldSerializeResult">
      <summary vsli:raw="Defines serialization behavior as reported by a &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">定义由 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 报告的序列化行为。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.Default">
      <summary vsli:raw="Unknown, defer to the type of the member.">未知，将遵从成员的类型。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.False">
      <summary vsli:raw="Do not serialize the result.">不对结果进行序列化。</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.True">
      <summary vsli:raw="Serialize the result.">对结果进行序列化。</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlCollectionKind">
      <summary vsli:raw="Describes the collection metaphor (if any) used by a XAML member.">描述 XAML 成员使用的集合形式（如果有）。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Array">
      <summary vsli:raw="XAML member supports an array collection.">XAML 成员支持数组集合。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Collection">
      <summary vsli:raw="XAML member supports a list or a collection.">XAML 成员支持列表或集合。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Dictionary">
      <summary vsli:raw="XAML member supports a dictionary (key-value pairs).">XAML 成员支持字典（键值对）。</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.None">
      <summary vsli:raw="XAML member does not support a collection.">XAML 成员不支持集合。</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlMemberInvoker">
      <summary vsli:raw="Provides an extension point that can access member characteristics of a XAML member through techniques other than reflection.">提供一个扩展点，该扩展点可通过除反射之外的其他技术来访问 XAML 成员的成员特征。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; class, based on a provided &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">基于提供的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。</summary>
      <param name="member" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; value for the specific XAML member relevant to this &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">与此 <see cref="T:System.Xaml.XamlMember" /> 相关的特定 XAML 成员的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="member" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
      <summary vsli:raw="Gets a value of the relevant property from an instance.">从实例中获取相关属性的值。</summary>
      <param name="instance" vsli:raw="An instance of the owner type for the member.">成员的所有者类型的实例。</param>
      <returns vsli:raw="The requested property value.">请求的属性值。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; that is based on an unknown &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Invoked this method on a write-only member.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see cref=&quot;P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">已在基于未知 <see cref="T:System.Xaml.XamlMember" /> 的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 上调用了此方法。  

或 -  

在只写成员上调用此方法。  

或 -  

 <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
      <summary vsli:raw="Sets a value of the relevant property on an instance.">对实例设置相关属性的值。</summary>
      <param name="instance" vsli:raw="An instance of the owner type for the member.">成员的所有者类型的实例。</param>
      <param name="value" vsli:raw="The property value to set.">要设置的属性值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; that is based on an unknown &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Invoked this method on a read-only member.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see cref=&quot;P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">已在基于未知 <see cref="T:System.Xaml.XamlMember" /> 的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 上调用了此方法。  

或 -  

在只读成员上调用此方法。  

或 -  

 <see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="Indicates whether the value needs to be persisted by serialization processes.">指示是否需要通过序列化过程保持值。</summary>
      <param name="instance" vsli:raw="The instance with the property to be examined for persistence.">具有要检查其持久性的属性的实例。</param>
      <returns vsli:raw="A value of the enumeration.">枚举的一个值。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the CLR method that gets values for the property that is relevant for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">获取 CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，该方法为与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相关的属性获取值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the CLR method that gets values for the property that is relevant for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">为与此 <see cref="T:System.Reflection.MethodInfo" /> 相关的属性获取值的 CLR 方法的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />，或者为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the CLR method that sets values for the property that is relevant for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">获取 CLR 方法的 <see cref="T:System.Reflection.MethodInfo" />，该方法为与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 相关的属性设置值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the CLR method that sets values for the property that is relevant for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">为与此 <see cref="T:System.Reflection.MethodInfo" /> 相关的属性设置值的 CLR 方法的 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />，或者为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker">
      <summary vsli:raw="Provides a static value that represents an unknown, not fully implemented &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">提供一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</summary>
      <returns vsli:raw="A static value that represents an unknown, not fully implemented &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt;.">一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />。</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeInvoker">
      <summary vsli:raw="Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.">提供一个扩展点，该扩展点可通过除反射和构造函数之外的其他技术来构造 XAML 类型的实例。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; class, based on a provided &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">基于提供的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; value for the specific XAML type relevant to this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">与此 <see cref="T:System.Xaml.XamlType" /> 相关的特定 XAML 类型的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
      <summary vsli:raw="Adds the provided item to an instance of the type that is relevant to this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">将所提供的项添加到类型与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相关的实例。</summary>
      <param name="instance" vsli:raw="An instance of the type specified by the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; used for constructing this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">一个类型由 <see cref="T:System.Xaml.XamlType" /> 指定的实例，用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</param>
      <param name="item" vsli:raw="The item to add.">要添加的项。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; that is based on an unknown &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; where the relevant type is not a collection.">已在基于未知 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。  

或 -  

在其相关类型不是集合的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用此方法。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Xaml.XamlSchemaException" vsli:raw="&lt;see cref=&quot;M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; returns &lt;see langword=&quot;null&quot; /&gt;.">此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 返回 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
      <summary vsli:raw="Adds the provided key and item value to an instance of the type that is relevant to this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">将所提供的密钥和项值添加到类型与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 相关的实例。</summary>
      <param name="instance" vsli:raw="An instance of the type specified by the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; used for constructing this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">一个类型由 <see cref="T:System.Xaml.XamlType" /> 指定的实例，用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</param>
      <param name="key" vsli:raw="Dictionary key for the item to add.">要添加的项的字典键。</param>
      <param name="item" vsli:raw="The item value to add.">要添加的项值。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; that is based on an unknown &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; where the relevant type is not a dictionary.">已在基于未知 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。  

或 -  

已在其相关类型不是字典的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Xaml.XamlSchemaException" vsli:raw="&lt;see cref=&quot;M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; returns &lt;see langword=&quot;null&quot; /&gt;.">此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> 返回 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
      <summary vsli:raw="Creates an object instance based on the construction-initiated &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">基于此 <see cref="T:System.Xaml.XamlType" /> 的构造启动的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 创建对象实例。</summary>
      <param name="arguments" vsli:raw="An array of objects that supply the &lt;see langword=&quot;x:ConstructorArgs&quot; /&gt; for the instance. May be &lt;see langword=&quot;null&quot; /&gt; for types that do not require or use &lt;see langword=&quot;x:ConstructorArgs&quot; /&gt;.">一个对象数组，这些对象为实例提供 <see langword="x:ConstructorArgs" />。 对于不需要或者不使用 <see langword="null" /> 的类型可能为 <see langword="x:ConstructorArgs" />。</param>
      <returns vsli:raw="The created instance based on the construction-initiated &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">基于此 <see cref="T:System.Xaml.XamlType" /> 的构造启动的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 所创建的实例。</returns>
      <exception cref="T:System.MissingMethodException" vsli:raw="Could not resolve a constructor.">未能解析构造函数。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
      <summary vsli:raw="Returns the relevant &lt;see langword=&quot;Add&quot; /&gt; method for a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; that is relevant to a collection or dictionary.">返回与集合或字典相关的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的相关 <see langword="Add" /> 方法。</summary>
      <param name="contentType" vsli:raw="&lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the item type that is used by the &lt;see langword=&quot;Add&quot; /&gt; method.">
        <see langword="Add" /> 方法所使用的项类型的 <see cref="T:System.Xaml.XamlType" />。</param>
      <returns vsli:raw="CLR &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; information for the &lt;see langword=&quot;Add&quot; /&gt; method, or null.">
        <see langword="Add" /> 方法的 CLR <see cref="T:System.Reflection.MethodInfo" /> 信息，或为 NULL。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;contentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="contentType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
      <summary vsli:raw="Returns an object representing a method that can enumerate over items.">返回一个对象，该对象表示可对项进行枚举的方法。</summary>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for an enumerator method, or &lt;see langword=&quot;null&quot; /&gt;.">枚举器方法的 <see cref="T:System.Reflection.MethodInfo" />，或为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object representing the set of items.">返回一个表示项集的 <see cref="T:System.Collections.IEnumerator" /> 对象。</summary>
      <param name="instance" vsli:raw="An instance of the type specified by the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; used for constructing this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">一个类型由 <see cref="T:System.Xaml.XamlType" /> 指定的实例，用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object, or &lt;see langword=&quot;null&quot; /&gt;.">一个 <see cref="T:System.Collections.IEnumerator" /> 对象，或为 <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; that is based on an unknown &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; Invoked this method on a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; where the relevant type is not a collection or dictionary.">已在基于未知 <see cref="T:System.Xaml.XamlType" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用了此方法。  

或 -  

在相关类型不是集合或字典的 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 上调用此方法。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
      <summary vsli:raw="Gets the handler to use when a &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; calls into an implemented &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt;.">获取要在 <see cref="T:System.Xaml.XamlObjectWriter" /> 调入所实现的 <see cref="T:System.Windows.Markup.MarkupExtension" /> 时使用的处理程序。</summary>
      <returns vsli:raw="A handler implementation that handles this case.">一个处理此情况的处理程序实现。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
      <summary vsli:raw="Gets the handler to use when a &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; calls into a CLR-implemented &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt;.">获取要在 <see cref="T:System.Xaml.XamlObjectWriter" /> 调入 CLR 实现的 <see cref="T:System.ComponentModel.TypeConverter" /> 时使用的处理程序。</summary>
      <returns vsli:raw="A handler implementation that handles this case.">一个处理此情况的处理程序实现。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
      <summary vsli:raw="Provides a static value that represents an unknown, not fully implemented &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">提供一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</summary>
      <returns vsli:raw="A static value that represents an unknown, not fully implemented &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt;.">一个静态值，该值表示未完全实现的未知 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />。</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeName">
      <summary vsli:raw="Provides a means to specify a XAML type in terms of name and namespace.">提供一种依据名称和命名空间来指定 XAML 类型的方法。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; class, based on name and namespace strings.">基于名称和命名空间字符串初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 类的新实例。</summary>
      <param name="xamlNamespace" vsli:raw="The XAML namespace that contains name.">其中包含 name 的 XAML 命名空间。</param>
      <param name="name" vsli:raw="The name of the type to create a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; for.">要为其创建 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的类型的名称。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; class, based on name and namespace strings as well as an array of type arguments.">基于名称和命名空间字符串以及类型参数数组，初始化 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 类的新实例。</summary>
      <param name="xamlNamespace" vsli:raw="The XAML namespace that contains &lt;paramref name=&quot;name&quot; /&gt;.">其中包含 <paramref name="name" /> 的 XAML 命名空间。</param>
      <param name="name" vsli:raw="The name of the type to create a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; for.">要为其创建 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的类型的名称。</param>
      <param name="typeArguments" vsli:raw="An array of type arguments, each of which must be a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">一个由类型参数组成的数组，其中每个参数都必须为 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; class, based on an existing &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">基于现有 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。</summary>
      <param name="xamlType" vsli:raw="An existing &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">现有 <see cref="T:System.Xaml.XamlType" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Name">
      <summary vsli:raw="Gets the name used to construct this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">获取用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的名称。</summary>
      <returns vsli:raw="The name of the type.">类型的名称。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Namespace">
      <summary vsli:raw="Gets the XAML namespace identifier used to construct this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">获取用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的 XAML 命名空间标识符。</summary>
      <returns vsli:raw="The XAML namespace identifier.">XAML 命名空间标识符。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value based on a type name and an object that can resolve a markup prefix into a namespace.">基于可将标记前缀解析为命名空间的类型名称和对象提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
      <param name="typeName" vsli:raw="The type name to create a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value for.">要为其创建 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值的类型名称。</param>
      <param name="namespaceResolver" vsli:raw="An object or service provider that implements &lt;see cref=&quot;T:System.Xaml.IXamlNamespaceResolver&quot; /&gt;.">一个实现 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的对象或服务提供程序。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">创建的 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; or &lt;paramref name=&quot;namespaceResolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> 或 <paramref name="namespaceResolver" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="String cannot be parsed.">无法分析字符串。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.">基于可指定多个类型名称的字符串以及可将标记前缀解析为命名空间的对象，提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
      <param name="typeNameList" vsli:raw="A string that contains multiple types.">其中包含多个类型的字符串。</param>
      <param name="namespaceResolver" vsli:raw="An object or service provider that implements &lt;see cref=&quot;T:System.Xaml.IXamlNamespaceResolver&quot; /&gt;.">一个实现 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的对象或服务提供程序。</param>
      <returns vsli:raw="The created &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">创建的 <see cref="T:System.Xaml.Schema.XamlTypeName" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeNameList&quot; /&gt; or &lt;paramref name=&quot;namespaceResolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeNameList" /> 或 <paramref name="namespaceResolver" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="String cannot be parsed.">无法分析字符串。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString">
      <summary vsli:raw="Converts the value of this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; to its equivalent string representation.">将此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的值转换为其等效的字符串表示形式。</summary>
      <returns vsli:raw="The equivalent string representation of this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的等效字符串表示形式。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
      <summary vsli:raw="Converts the value of this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; to its equivalent string representation, which can be used in markup syntax for an object element usage of multiple types.">将此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的值转换为其等效的字符串表示形式，可在多个类型的对象元素用法的标记语法中使用该表示形式。</summary>
      <param name="typeNameList" vsli:raw="A list of types.">类型的列表。</param>
      <param name="prefixLookup" vsli:raw="A service reference for prefix lookup.">用于前缀查找的服务引用。</param>
      <returns vsli:raw="A concatenated string of all type results.">所有类型结果的串联字符串。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;prefixLookup&quot; /&gt; or &lt;paramref name=&quot;typeNameList&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="prefixLookup" /> 或 <paramref name="typeNameList" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
      <summary vsli:raw="Converts the value of this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; to its equivalent string representation, which can be used in markup syntax for an object element usage of a type.">将此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的值转换为其等效的字符串表示形式，可在类型的对象元素用法的标记语法中使用该表示形式。</summary>
      <param name="prefixLookup" vsli:raw="A service reference for prefix lookup.">用于前缀查找的服务引用。</param>
      <returns vsli:raw="A prefixed usage string.">带前缀的用法字符串。</returns>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Xaml.Schema.XamlTypeName.Namespace&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see cref=&quot;P:System.Xaml.Schema.XamlTypeName.Name&quot; /&gt; is not valid.  &#xA;  &#xA; -or-  &#xA;  &#xA; Could not look up the prefix.">此 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" /> 的 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 是 <see langword="null" />。  

或 - 
<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> 无效。  

或 - 
未能查找前缀。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value based on a type name and an object that can resolve a markup prefix into a namespace.">基于可将标记前缀解析为命名空间的类型名称和对象提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
      <param name="typeName" vsli:raw="The type name to create a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value for.">要为其创建 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值的类型名称。</param>
      <param name="namespaceResolver" vsli:raw="An object or service provider that implements &lt;see cref=&quot;T:System.Xaml.IXamlNamespaceResolver&quot; /&gt;.">一个实现 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的对象或服务提供程序。</param>
      <param name="result" vsli:raw="Out parameter that contains the created &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; if the return value is &lt;see langword=&quot;true&quot; /&gt;.">在返回值为 <see langword="true" /> 的情况下，其中包含所创建 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的 Out 参数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the parse was successful and &lt;paramref name=&quot;result&quot; /&gt; contains a useful value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果分析成功并且 <paramref name="result" /> 包含有用的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; or &lt;paramref name=&quot;namespaceResolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> 或 <paramref name="namespaceResolver" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.">基于可指定多个类型名称的字符串以及可将标记前缀解析为命名空间的对象，提供 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 值。</summary>
      <param name="typeNameList" vsli:raw="A string that contains multiple types.">其中包含多个类型的字符串。</param>
      <param name="namespaceResolver" vsli:raw="An object or service provider that implements &lt;see cref=&quot;T:System.Xaml.IXamlNamespaceResolver&quot; /&gt;.">一个实现 <see cref="T:System.Xaml.IXamlNamespaceResolver" /> 的对象或服务提供程序。</param>
      <param name="result" vsli:raw="Out parameter that contains the created &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt; if the return value is &lt;see langword=&quot;true&quot; /&gt;.">在返回值为 <see langword="true" /> 的情况下，其中包含所创建 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的 Out 参数。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the parse was successful and &lt;paramref name=&quot;result&quot; /&gt; contains a useful value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果分析成功并且 <paramref name="result" /> 包含有用的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeNameList&quot; /&gt; or &lt;paramref name=&quot;namespaceResolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeNameList" /> 或 <paramref name="namespaceResolver" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
      <summary vsli:raw="Gets the type arguments used to construct this &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeName&quot; /&gt;.">获取用于构造此 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 的类型参数。</summary>
      <returns vsli:raw="The type arguments, if any. May be null.">类型参数（如果有）。 可能为 null。</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeTypeConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object to and from a string that represents the type name. This functionality is used for XAML extensibility by markup definitions, via &lt;see cref=&quot;T:System.Windows.Markup.PropertyDefinition&quot; /&gt;.">将 <see cref="T:System.Xaml.XamlType" /> 对象与代表类型名称的字符串相互转换。 此功能由标记定义通过 <see cref="T:System.Windows.Markup.PropertyDefinition" /> 用于 XAML 扩展性。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeTypeConverter&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.Schema.XamlTypeTypeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an object of the specified type can be converted to an instance of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, using the specified context.">确定是否可使用指定上下文，将指定类型的对象转换为 <see cref="T:System.Xaml.XamlType" /> 的实例。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="sourceType" vsli:raw="The type being evaluated for conversion.">要进行计算以供转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此转换器能够执行该操作，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an instance of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; can be converted to the specified type, using the specified context.">确定是否可使用指定的上下文将 <see cref="T:System.Xaml.XamlType" /> 的实例转换为指定类型。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="destinationType" vsli:raw="The type being evaluated for conversion.">要进行计算以供转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此转换器能够执行该操作，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert the specified object to a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, using the specified context.">尝试使用指定上下文将指定对象转换为 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture" vsli:raw="Culture specific information.">特定于区域性的信息。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <returns vsli:raw="The converted object.">被转换的对象。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; cannot be converted.">无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; to the specified type, using the specified context.">尝试使用指定上下文将 <see cref="T:System.Xaml.XamlType" /> 转换为指定类型。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture" vsli:raw="Culture specific information.">特定于区域性的信息。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">对象要转换为的类型。</param>
      <returns vsli:raw="The converted object.">被转换的对象。</returns>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; cannot be converted.">无法转换 <paramref name="value" />。</exception>
    </member>
    <member name="T:System.Xaml.Schema.XamlValueConverter`1">
      <summary vsli:raw="Provides a common API surface for techniques that generate initialization or serialization values for XAML based on input other than the eventual destination type. This includes markup extensions and type converters.">提供一个公共 API 接口，此接口适用于根据最终目标类型以外的输入为 XAML 生成初始化或序列化值的技术。 此类型包括标记扩展和类型转换器。</summary>
      <typeparam name="TConverterBase" vsli:raw="The CLR base class for the particular converter that this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; represents. Typically this is one of the following: &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt;; &lt;see cref=&quot;T:System.Windows.Markup.MarkupExtension&quot; /&gt;; &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt;.">此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 所表示的特定转换器的 CLR 基类。 它通常为以下类之一：<see cref="T:System.ComponentModel.TypeConverter" />；<see cref="T:System.Windows.Markup.MarkupExtension" />；<see cref="T:System.Windows.Markup.ValueSerializer" />；</typeparam>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; class, based on a converter implementing &lt;see cref=&quot;T:System.Type&quot; /&gt; and the target/destination type of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">基于实现 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 和 <see cref="T:System.Type" /> 的目标类型的转换器，初始化 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 类的新实例。</summary>
      <param name="converterType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that implements the converter behavior.">实现转换器行为的 <see cref="T:System.Type" />。</param>
      <param name="targetType" vsli:raw="The target/destination &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 的目标 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; class, based on a converter implementing &lt;see cref=&quot;T:System.Type&quot; /&gt; the target/destination type of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;, and a string name.">基于实现 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 和 <see cref="T:System.Type" /> 的目标类型的转换器以及一个字符串值，初始化 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 类的新实例。</summary>
      <param name="converterType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that implements the converter behavior.">实现转换器行为的 <see cref="T:System.Type" />。</param>
      <param name="targetType" vsli:raw="The target/destination &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 的目标 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</param>
      <param name="name" vsli:raw="The string name.">字符串名称。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="All three parameters are &lt;see langword=&quot;null&quot; /&gt; (at least one is required to be non-null).">所有三个参数都为 <see langword="null" />（至少需要有一个为非 null）。</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance">
      <summary vsli:raw="Gets a created instance of the converter implementation.">获取转换器实现的已创建实例。</summary>
      <returns vsli:raw="A created instance of the converter implementation, or &lt;see langword=&quot;null&quot; /&gt;.">转换器实现的已创建实例，或者为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; for the class that implements the converter behavior.">获取实现转换器行为的类的 <see cref="T:System.Type" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; for the class that implements the converter behavior.">实现转换器行为的类的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance">
      <summary vsli:raw="Returns an instance of the converter implementation.">返回转换器实现的实例。</summary>
      <returns vsli:raw="An instance of the converter implementation, or &lt;see langword=&quot;null&quot; /&gt;.">转换器实现的实例，或者为 <see langword="null" />。</returns>
      <exception cref="T:System.Xaml.XamlSchemaException" vsli:raw="Converter did not implement the correct base type.">转换器未实现正确的基类型。</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; and a specified object, which must also be a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, have the same value.">确定此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 实例是否与指定的对象（也必须是 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />）具有相同的值。</summary>
      <param name="obj" vsli:raw="The object to compare.">要比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; and its value is the same as this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是一个 <paramref name="obj" /> 且其值与此实例相等，则为 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Xaml.Schema.XamlValueConverter{`0})">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; and another &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object have the same value.">确定 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的此实例与另一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象是否具有相同的值。</summary>
      <param name="other" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; to compare.">要比较的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; is a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; and its value is the same as this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="other" /> 为 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 并且它的值与此实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">返回该 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的哈希代码。</summary>
      <returns vsli:raw="An integer hash code.">整数哈希代码。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.Name">
      <summary vsli:raw="Gets a string name for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">获取此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的字符串名称。</summary>
      <returns vsli:raw="A string name for this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的字符串名称。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; objects have the same value.">确定两个指定的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象是否具有相同的值。</summary>
      <param name="converter1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 <see langword="null" />。</param>
      <param name="converter2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;converter1&quot; /&gt; is the same as the value of &lt;paramref name=&quot;converter2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的值与 <paramref name="converter1" /> 的值相同，则为 <paramref name="converter2" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; objects have different values.">确定两个指定的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象是否具有不同的值。</summary>
      <param name="converter1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 <see langword="null" />。</param>
      <param name="converter2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt;.">一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;converter1&quot; /&gt; is different than the value of &lt;paramref name=&quot;converter2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="converter1" /> 的值与 <paramref name="converter2" /> 的值不同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.TargetType">
      <summary vsli:raw="Gets the target/destination &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">获取 <see cref="T:System.Xaml.XamlType" /> 的目标 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</summary>
      <returns vsli:raw="The target/destination &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 的目标 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">返回一个表示此 <see cref="T:System.String" /> 的 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents this &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt;.">表示此 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlBackgroundReader">
      <summary vsli:raw="Implements a double-buffered &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; that can split reading and writing to different threads.">实现一个双缓存 <see cref="T:System.Xaml.XamlReader" />，它可将读取和写入拆分为不同的线程。</summary>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.#ctor(System.Xaml.XamlReader)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlBackgroundReader&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlBackgroundReader" /> 类的新实例。</summary>
      <param name="wrappedReader" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; that this &lt;see cref=&quot;T:System.Xaml.XamlBackgroundReader&quot; /&gt; is based on.">此 <see cref="T:System.Xaml.XamlReader" /> 所基于的 <see cref="T:System.Xaml.XamlBackgroundReader" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;wrappedReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="wrappedReader" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Xaml.XamlBackgroundReader&quot; /&gt; and optionally releases the managed resources.">释放由 <see cref="T:System.Xaml.XamlBackgroundReader" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release managed resources; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示释放托管资源；否则为 <see langword="false" />。</param>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.HasLineInfo">
      <summary vsli:raw="Gets a value that specifies whether line information is available.">获取一个值，该值指定行信息是否可用。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if line information is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果行信息可用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.IsEof">
      <summary vsli:raw="Gets a value that reports whether the reader position is at end-of-file.">获取一个值，该值报告读取器位置是否位于文件结尾。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the position is at end-of-file; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果位置位于文件结尾，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LineNumber">
      <summary vsli:raw="Gets the line number to report.">获取要报告的行号。</summary>
      <returns vsli:raw="The line number to report.">要报告的行号。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LinePosition">
      <summary vsli:raw="Gets the line position to report.">获取要报告的行位置。</summary>
      <returns vsli:raw="The line position to report.">要报告的行位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Member">
      <summary vsli:raw="Gets the current member at the reader position, if the reader position is on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt;.">如果读取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，则获取位于读取器位置处的当前成员。</summary>
      <returns vsli:raw="The current member; or &lt;see langword=&quot;null&quot; /&gt;, if the position is not on a member.">当前成员；如果位置不在成员上，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Namespace">
      <summary vsli:raw="Gets the XAML namespace from the current node.">从当前节点中获取 XAML 命名空间。</summary>
      <returns vsli:raw="The XAML namespace, if it is available; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果可用，则为当前节点中的 XAML 命名空间；否则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.NodeType">
      <summary vsli:raw="Gets the type of the current node.">获取当前节点的类型。</summary>
      <returns vsli:raw="A value of the &lt;see cref=&quot;T:System.Xaml.XamlNodeType&quot; /&gt; enumeration.">
        <see cref="T:System.Xaml.XamlNodeType" /> 枚举的一个值。</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Read">
      <summary vsli:raw="Provides the next XAML node from the source, if a node is available.">提供源中的下一个 XAML 节点（如果节点可用）。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a node is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果某节点可用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.SchemaContext">
      <summary vsli:raw="Gets an object that provides schema context information for the information set.">获取一个对象，该对象提供信息集的架构上下文信息。</summary>
      <returns vsli:raw="An object that provides schema context information for the information set.">一个对象，该对象提供信息集的架构上下文信息。</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread">
      <summary vsli:raw="Creates and starts a new &lt;see cref=&quot;T:System.Threading.Thread&quot; /&gt; (constructed from &lt;see cref=&quot;T:System.Threading.ParameterizedThreadStart&quot; /&gt;) that handles a named thread for the &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;.">创建并启动一个新的 <see cref="T:System.Threading.Thread" />（从 <see cref="T:System.Threading.ParameterizedThreadStart" /> 构造），它用于处理 <see cref="T:System.Xaml.XamlReader" /> 的命名线程。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The thread is already started.">线程已启动。</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread(System.String)">
      <summary vsli:raw="Creates and starts a new &lt;see cref=&quot;T:System.Threading.Thread&quot; /&gt; (constructed from &lt;see cref=&quot;T:System.Threading.ParameterizedThreadStart&quot; /&gt;) that handles a named thread for the &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;. You specify the thread name as a parameter.">创建并启动一个新的 <see cref="T:System.Threading.Thread" />（从 <see cref="T:System.Threading.ParameterizedThreadStart" /> 构造），它用于处理 <see cref="T:System.Xaml.XamlReader" /> 的命名线程。 将线程名称指定为参数。</summary>
      <param name="threadName" vsli:raw="The name for the thread.">线程的名称。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The thread is already started.">线程已启动。</exception>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Type">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node.">获取当前节点的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the current reader position is not on an object.">当前节点的 <see cref="T:System.Xaml.XamlType" />；如果当前读取器位置不在对象上，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Value">
      <summary vsli:raw="Gets the value of the current node.">获取当前节点的值。</summary>
      <returns vsli:raw="The value of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the current reader position is not on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.Value&quot; /&gt; node type.">当前节点的值；如果当前读取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 节点类型上，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlDeferringLoader">
      <summary vsli:raw="Represents a XAML reader behavior that loads and returns deferred content.">表示加载和返回延迟内容的 XAML 读取器行为。</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDeferringLoader&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlDeferringLoader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Load(System.Xaml.XamlReader,System.IServiceProvider)">
      <summary vsli:raw="Loads XAML content in a deferred mode, which is based on a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; and certain required services from a service provider.">基于 <see cref="T:System.Xaml.XamlReader" /> 和服务提供程序提供的某些所需服务，在延迟模式下加载 XAML 内容。</summary>
      <param name="xamlReader" vsli:raw="The initiating reader that is returned on calls to &lt;see cref=&quot;M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)&quot; /&gt;.">在调用 <see cref="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)" /> 时返回的启动读取器。</param>
      <param name="serviceProvider" vsli:raw="The service provider for the required services.">所需服务的服务提供程序。</param>
      <returns vsli:raw="The root object that is produced by the input &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;.">输入 <see cref="T:System.Xaml.XamlReader" /> 生成的根对象。</returns>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)">
      <summary vsli:raw="Commits a value for deferred loading.">为延迟加载提交值。</summary>
      <param name="value" vsli:raw="The input value to commit for deferred loading.">要为延迟加载提交的输入值。</param>
      <param name="serviceProvider" vsli:raw="The service provider for the required services.">所需服务的服务提供程序。</param>
      <returns vsli:raw="A XAML reader that can be used to obtain the deferred value as XAML node information.">可用于以 XAML 节点信息形式获取延迟值的 XAML 读取器。</returns>
    </member>
    <member name="T:System.Xaml.XamlDirective">
      <summary vsli:raw="Provides the XAML type system identifier for a member if the member is also a XAML directive. XAML readers and XAML writers use the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; identifier during processing of member nodes. The identifier is used when the XAML reader is positioned on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt; and &lt;see cref=&quot;P:System.Xaml.XamlMember.IsDirective&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;.">在成员兼作 XAML 指令时为成员提供 XAML 类型系统标识符。 在处理成员节点的过程中，XAML 读取器和 XAML 编写器使用 <see cref="T:System.Xaml.XamlDirective" /> 标识符。 如果读取器位于 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，而且 <see cref="P:System.Xaml.XamlMember.IsDirective" /> 为 <see langword="true" />，则使用此标识符。</summary>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; class, specifying values for each per-case value of a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">初始化 <see cref="T:System.Xaml.XamlDirective" /> 类的新实例，同时为 <see cref="T:System.Xaml.XamlDirective" /> 各个情况下的每个可能值指定值。</summary>
      <param name="xamlNamespaces" vsli:raw="A set of XAML namespaces where this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; can exist, passed as an enumerable set of the identifier strings.">此 <see cref="T:System.Xaml.XamlDirective" /> 可存在于其中的 XAML 命名空间的集合，以标识符字符串的可枚举集合的形式传递。</param>
      <param name="name" vsli:raw="The identifying name of the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlDirective" /> 的标识名称。</param>
      <param name="xamlType" vsli:raw="The XAML type that backs the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">为 <see cref="T:System.Xaml.XamlDirective" /> 提供支持的 XAML 类型。</param>
      <param name="typeConverter" vsli:raw="The type converter that this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; uses for text syntax conversion.">此 <see cref="T:System.Xaml.XamlDirective" /> 用于文本语法转换的类型转换器。</param>
      <param name="allowedLocation" vsli:raw="A value of the &lt;see cref=&quot;T:System.Xaml.Schema.AllowedMemberLocations&quot; /&gt; enumeration.">
        <see cref="T:System.Xaml.Schema.AllowedMemberLocations" /> 枚举的一个值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;xamlType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlType" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; class, specifying values for a name and a single XAML namespace. Use this signature only when you want or expect &lt;see cref=&quot;P:System.Xaml.XamlMember.IsUnknown&quot; /&gt; to report &lt;see langword=&quot;true&quot; /&gt; for the directive.">初始化 <see cref="T:System.Xaml.XamlDirective" /> 类的新实例，同时为名称和单个 XAML 命名空间指定值。 只有在您希望或预计 <see cref="P:System.Xaml.XamlMember.IsUnknown" /> 对于指令报告 <see langword="true" /> 时，才使用此签名。</summary>
      <param name="xamlNamespace" vsli:raw="The primary XAML namespace where this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; can exist.">主 XAML 命名空间，此 <see cref="T:System.Xaml.XamlDirective" /> 可能存在于其中。</param>
      <param name="name" vsli:raw="The identifying name of the &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlDirective" /> 的标识名称。</param>
    </member>
    <member name="P:System.Xaml.XamlDirective.AllowedLocation">
      <summary vsli:raw="Gets a value that specifies the XAML node types where the directive can be specified.">获取一个值，该值指定可在其中指定指令的 XAML 节点类型。</summary>
      <returns vsli:raw="A value of the enumeration. The default is the enumeration default, which is &lt;see cref=&quot;F:System.Xaml.Schema.AllowedMemberLocations.None&quot; /&gt;.">枚举的一个值。 默认值为枚举默认值，即 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.None" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">返回该对象的哈希代码。</summary>
      <returns vsli:raw="An integer hash code.">整数哈希代码。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetXamlNamespaces">
      <summary vsli:raw="Returns a list of XAML namespaces where this XAML member can exist.">返回 XAML 命名空间的列表，此 XAML 成员可能存在于这些命名空间中。</summary>
      <returns vsli:raw="A list of XAML namespace identifiers, as strings.">字符串形式的 XAML 命名空间标识符的列表。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupCustomAttributeProvider">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; implementation. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">返回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。 此实现始终返回 <see langword="null" />。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDeferringLoader">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which is used during deferred loading of XAML-declared objects. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">返回一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象用于 XAML 声明的对象的延迟加载期间。 此实现始终返回 <see langword="null" />。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDependsOn">
      <summary vsli:raw="Returns a list of &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects. The list reports the members where dependency relationships for initialization order exist relative to this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">返回 <see cref="T:System.Xaml.XamlMember" /> 对象的列表。 此列表报告一些成员，其中的初始化顺序依赖关系相对于此 <see cref="T:System.Xaml.XamlMember" /> 存在。 此实现始终返回 <see langword="null" />。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupInvoker">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; that is associated with a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">返回与 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 关联的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information for this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 的 <see cref="T:System.Xaml.XamlMember" /> 信息。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsAmbient">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is reported as an ambient property.">返回的值指示是否将此 <see cref="T:System.Xaml.XamlMember" /> 作为环境属性报告。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt;.">始终返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsEvent">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents an event.">返回的值指示此 <see cref="T:System.Xaml.XamlDirective" /> 是否表示一个事件。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt;.">始终返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadOnly">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents an intended read-only property.">返回的值指示此 <see cref="T:System.Xaml.XamlDirective" /> 是否表示预期的只读属性。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt;.">始终返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadPublic">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents a property that has a public &lt;see langword=&quot;get&quot; /&gt; accessor.">返回的值指示此 <see cref="T:System.Xaml.XamlDirective" /> 是否表示一个具有公共 <see langword="get" /> 访问器的属性。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">始终返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsUnknown">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents a member that is not resolvable by the backing system that is used for type and member resolution.">返回的值指示此 <see cref="T:System.Xaml.XamlDirective" /> 是否表示一个用于类型和成员解析的支持系统无法解析的成员。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents a non-resolvable member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlDirective" /> 表示不可解析的成员，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWriteOnly">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents an intended write-only property.">返回的值指示此 <see cref="T:System.Xaml.XamlDirective" /> 是否表示预期的只写属性。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt;.">始终返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWritePublic">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; represents a property that has a public &lt;see langword=&quot;set&quot; /&gt; accessor.">返回的值指示此 <see cref="T:System.Xaml.XamlDirective" /> 是否表示一个具有公共 <see langword="set" /> 访问器的属性。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">始终返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTargetType">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type where the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; can exist. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">返回其中可能存在 <see cref="T:System.Xaml.XamlType" /> 的类型的 <see cref="T:System.Xaml.XamlMember" />。 此实现始终返回 <see langword="null" />。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupType">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">返回成员所使用的类型的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">成员所使用的类型的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTypeConverter">
      <summary vsli:raw="Returns a type converter implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">返回与此 <see cref="T:System.Xaml.XamlDirective" /> 关联的类型转换器实现。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; instance that has &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint; or &lt;see langword=&quot;null&quot; /&gt;.">一个具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.ComponentModel.TypeConverter" /> 实例，或者为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingGetter">
      <summary vsli:raw="Returns a &lt;see langword=&quot;get&quot; /&gt; accessor that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">返回与此 <see cref="T:System.Xaml.XamlDirective" /> 关联的 <see langword="get" /> 访问器。 此实现始终返回 <see langword="null" />。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingMember">
      <summary vsli:raw="Returns a CLR reflection &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">返回与此 <see cref="T:System.Reflection.MemberInfo" /> 关联的 CLR 反射 <see cref="T:System.Xaml.XamlDirective" />。 此实现始终返回 <see langword="null" />。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingSetter">
      <summary vsli:raw="Returns a &lt;see langword=&quot;set&quot; /&gt; accessor that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;. This implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">返回与此 <see cref="T:System.Xaml.XamlDirective" /> 关联的 <see langword="set" /> 访问器。 此实现始终返回 <see langword="null" />。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">始终返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.ToString">
      <summary vsli:raw="Returns a string representation of this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">返回此 <see cref="T:System.Xaml.XamlDirective" /> 的字符串表示形式。</summary>
      <returns vsli:raw="A string representation of this &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt;.">此 <see cref="T:System.Xaml.XamlDirective" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.Xaml.XamlDuplicateMemberException">
      <summary vsli:raw="The exception that is thrown when a XAML writer attempts to write a value for a duplicate member into the same object node.">在 XAML 编写器尝试将重复成员的值写入同一对象节点时所引发的异常。</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with a system-supplied message that describes the error.">使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with serialized data.">用序列化数据初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">承载序列化对象数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with a specified message that describes the error.">使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Xaml.XamlMember,System.Xaml.XamlType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with the relevant member and type information to report.">使用要报告的相关成员和类型信息初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
      <param name="member" vsli:raw="The XAML member identifier to report.">要报告的 XAML 成员标识符。</param>
      <param name="type" vsli:raw="The XAML type identifier to report as the parent type.">要作为父类型报告的 XAML 类型标识符。</param>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.DuplicateMember">
      <summary vsli:raw="Gets or sets the XAML member identifier for the property to report as a duplicate.">获取或设置要作为重复项报告的属性的 XAML 成员标识符。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; object (XAML member identifier) to report.">要报告的 <see cref="T:System.Xaml.XamlMember" /> 对象（XAML 成员标识符）。</returns>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlDuplicateMemberException&quot; /&gt; class with serialized data.">用序列化数据初始化 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">承载序列化对象数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.ParentType">
      <summary vsli:raw="Gets or sets the XAML type identifier to report as the parent type.">获取或设置要作为父类型报告的 XAML 类型标识符。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object (XAML type identifier) to report as the parent type.">要作为父类型报告的 <see cref="T:System.Xaml.XamlType" /> 对象（XAML 类型标识符）。</returns>
    </member>
    <member name="T:System.Xaml.XamlException">
      <summary vsli:raw="The exception that is thrown for a general XAML reader or XAML writer exception.">针对一般 XAML 读取器或 XAML 编写器异常引发的异常。</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlException&quot; /&gt; class. The instance contains a system-supplied message that describes the error.">初始化 <see cref="T:System.Xaml.XamlException" /> 类的新实例。 包含描述错误的系统提供消息的实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlException&quot; /&gt; class with serialized data.">用序列化数据初始化 <see cref="T:System.Xaml.XamlException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">承载序列化对象数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlException&quot; /&gt; class. The instance contains a specified message that describes the error.">初始化 <see cref="T:System.Xaml.XamlException" /> 类的新实例。 包含描述错误的指定消息的实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.">描述该异常的消息。 此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlException&quot; /&gt; class. The instance contains a specified error message and a reference to the inner exception that is the cause of this exception.">初始化 <see cref="T:System.Xaml.XamlException" /> 类的新实例。 一个包含指定错误消息、对造成此异常的内部异常的引用的实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.">描述该异常的消息。 此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlException&quot; /&gt; class. The instance contains a specified error message, inner exception, and line information.">初始化 <see cref="T:System.Xaml.XamlException" /> 类的新实例。 包含指定的错误消息、内部异常和行信息的实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture.">描述该异常的消息。 此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception.">导致当前异常的异常。</param>
      <param name="lineNumber" vsli:raw="The line number to report to debugging or to line information consumers.">要向调试或行信息使用者报告的行号。</param>
      <param name="linePosition" vsli:raw="The line position to report to debugging or line information consumers.">要向调试或行信息使用者报告的行位置。</param>
    </member>
    <member name="M:System.Xaml.XamlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements &lt;see cref=&quot;M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)&quot; /&gt; and provides serialization support for the line information data.">实现 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />，并提供对行信息数据的序列化支持。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">承载序列化对象数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlException.LineNumber">
      <summary vsli:raw="Gets or sets the line number component of XAML text line information that the exception reports.">获取或设置异常所报告的 XAML 文本行信息的行号组成部分。</summary>
      <returns vsli:raw="The line number component of the XAML text line information.">XAML 文本行信息的行号组成部分。</returns>
    </member>
    <member name="P:System.Xaml.XamlException.LinePosition">
      <summary vsli:raw="Gets or sets the line position component of XAML text line information that the exception reports.">获取或设置异常所报告的 XAML 文本行信息的行位置组成部分。</summary>
      <returns vsli:raw="The line position component of XAML text line information.">XAML 文本行信息的行位置组成部分。</returns>
    </member>
    <member name="P:System.Xaml.XamlException.Message">
      <summary vsli:raw="Gets or sets the exception message, and if line information is available, appends the line information to the message.">获取或设置异常消息，如果行信息可用，则在消息中追加行信息。</summary>
      <returns vsli:raw="The exception message that includes the appended line information.">包含追加的行信息的异常消息。</returns>
    </member>
    <member name="T:System.Xaml.XamlInternalException">
      <summary vsli:raw="The exception that is thrown for internal inconsistencies that occur during XAML reading and XAML writing.">针对在 XAML 读取和 XAML 写入过程中出现内部不一致所引发的异常。</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlInternalException&quot; /&gt; class with a system-supplied message that describes the error.">使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.Xaml.XamlInternalException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlInternalException&quot; /&gt; class with serialized data.">用序列化数据初始化 <see cref="T:System.Xaml.XamlInternalException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">承载序列化对象数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlInternalException&quot; /&gt; class with a specified message that describes the error.">使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlInternalException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception.">描述该异常的消息。</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlInternalException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlInternalException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception.">描述该异常的消息。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Xaml.XamlLanguage">
      <summary vsli:raw="Defines constants that provide strings or objects that are useful for XAML markup or for programming with XAML types. These strings or objects are relevant to XAML language concepts, to the implementation of XAML language concepts in .NET XAML Services, or to both.">定义一些提供字符串或对象的常量，这些字符串或对象对于 XAML 标记或使用 XAML 类型进行的编程非常有用。 这些字符串或对象与 XAML 语言概念和/或 .NET Framework XAML 中 XAML 语言概念的实现有关。</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllDirectives">
      <summary vsli:raw="Gets a read-only generic collection of each &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; identifier that is defined by .NET XAML Services.">获取由 .NET Framework XAML 服务定义的每个 <see cref="T:System.Xaml.XamlDirective" /> 标识符的只读泛型集合。</summary>
      <returns vsli:raw="A read-only generic collection of each &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; identifier that is defined by .NET XAML Services.">由 .NET Framework XAML 服务定义的每个 <see cref="T:System.Xaml.XamlDirective" /> 标识符的只读泛型集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllTypes">
      <summary vsli:raw="Gets a read-only generic collection of individual &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; values that match, or alias, a XAML language intrinsic that is defined by .NET XAML Services.">获取单独 <see cref="T:System.Xaml.XamlType" /> 值的只读泛型集合，这些值与 XAML 语言内部值匹配或其别名设置为该内部值，并且是由 .NET Framework XAML 服务定义的。</summary>
      <returns vsli:raw="A read-only generic collection of each &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that matches a XAML language intrinsic.">与 XAML 语言内部值匹配的每个 <see cref="T:System.Xaml.XamlType" /> 的只读泛型集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Arguments">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Arguments&quot; /&gt; of a factory method or a generic usage.">获取工厂方法或泛型用法的 <see langword="Arguments" /> 的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Arguments&quot; /&gt; of a factory method or generic usage.">工厂方法或泛型用法的 <see langword="Arguments" /> 的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Array">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Array&quot; /&gt; XAML language intrinsic.">获取 <see langword="Array" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Array&quot; /&gt; XAML language intrinsic.">
        <see langword="Array" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AsyncRecords">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;AsyncRecords&quot; /&gt; pseudomember.">获取 <see langword="AsyncRecords" /> 伪成员的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;AsyncRecords&quot; /&gt; pseudomember.">
        <see langword="AsyncRecords" /> 伪成员的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Base">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;base&quot; /&gt; directive from XML.">获取 XML 中 <see langword="base" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;base&quot; /&gt; directive from XML.">XML 中 <see langword="base" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Boolean">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Boolean&quot; /&gt; XAML language intrinsic.">获取 <see langword="Boolean" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Boolean&quot; /&gt; XAML language intrinsic.">
        <see langword="Boolean" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Byte">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Byte&quot; /&gt; XAML language intrinsic.">获取 <see langword="Byte" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Byte&quot; /&gt; XAML language intrinsic.">
        <see langword="Byte" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Char">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Char&quot; /&gt; XAML language intrinsic.">获取 <see langword="Char" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Char&quot; /&gt; XAML language intrinsic.">
        <see langword="Char" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Class">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Class&quot; /&gt; directive from XAML.">从 XAML 获取 <see langword="Class" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Class&quot; /&gt; directive from XAML.">来自 XAML 的 <see langword="Class" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassAttributes">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;ClassAttributes&quot; /&gt; directive from XAML.">从 XAML 获取 <see langword="ClassAttributes" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;ClassAttributes&quot; /&gt; directive from XAML.">来自 XAML 的 <see langword="ClassAttributes" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassModifier">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;ClassModifier&quot; /&gt; directive from XAML.">从 XAML 获取 <see langword="ClassModifier" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;ClassModifier&quot; /&gt; directive from XAML.">来自 XAML 的 <see langword="ClassModifier" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Code">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for &lt;see langword=&quot;Code&quot; /&gt; as detailed in [MS-XAML].">获取 <see langword="Code" /> 的 <see cref="T:System.Xaml.XamlDirective" />（如 [MS-XAML] 中详述）。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for &lt;see langword=&quot;Code&quot; /&gt; as detailed in [MS-XAML].">
        <see langword="Code" /> 的 <see cref="T:System.Xaml.XamlDirective" />（如 [MS-XAML] 中详述）。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ConnectionId">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that identifies a connection point for wiring events to handlers.">获取一个 <see cref="T:System.Xaml.XamlDirective" />，它标识用于将事件写入处理程序的连接点。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that identifies a connection point for wiring events to handlers.">一个 <see cref="T:System.Xaml.XamlDirective" />，它标识用于将事件写入处理程序的连接点。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Decimal">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Decimal&quot; /&gt; XAML language intrinsic.">获取 <see langword="Decimal" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Decimal&quot; /&gt; XAML language intrinsic.">
        <see langword="Decimal" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Double">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Double&quot; /&gt; XAML language intrinsic.">获取 <see langword="Double" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Double&quot; /&gt; XAML language intrinsic.">
        <see langword="Double" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FactoryMethod">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that identifies a factory method for XAML.">获取一个 <see cref="T:System.Xaml.XamlDirective" />，它标识 XAML 的工厂方法。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that identifies a factory method for XAML.">一个 <see cref="T:System.Xaml.XamlDirective" />，它标识 XAML 的工厂方法。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FieldModifier">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;FieldModifier&quot; /&gt; directive from XAML.">从 XAML 获取 <see langword="FieldModifier" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;FieldModifier&quot; /&gt; directive from XAML.">来自 XAML 的 <see langword="FieldModifier" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Initialization">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Initialization&quot; /&gt; directive from XAML.">从 XAML 获取 <see langword="Initialization" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Initialization&quot; /&gt; directive from XAML.">来自 XAML 的 <see langword="Initialization" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int16">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int16&quot; /&gt; XAML language intrinsic.">获取 <see langword="Int16" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int16&quot; /&gt; XAML language intrinsic.">
        <see langword="Int16" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int32">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; XAML language intrinsic.">获取 <see langword="Int32" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; XAML language intrinsic.">
        <see langword="Int32" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int64">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int64&quot; /&gt; XAML language intrinsic.">获取 <see langword="Int64" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see cref=&quot;T:System.Int64&quot; /&gt; XAML language intrinsic.">
        <see langword="Int64" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Items">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Items&quot; /&gt; directive from XAML.">从 XAML 获取 <see langword="Items" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Items&quot; /&gt; directive from XAML.">来自 XAML 的 <see langword="Items" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Key">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Key&quot; /&gt; directive from XAML.">从 XAML 获取 <see langword="Key" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Key&quot; /&gt; directive from XAML.">来自 XAML 的 <see langword="Key" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Lang">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;lang&quot; /&gt; directive from XML.">获取 XML 中 <see langword="lang" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;lang&quot; /&gt; directive from XML.">XML 中 <see langword="lang" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Member">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the type that is the item type of &lt;see cref=&quot;P:System.Xaml.XamlLanguage.Members&quot; /&gt;.">获取类型的 <see cref="T:System.Xaml.XamlType" />，该类型是 <see cref="P:System.Xaml.XamlLanguage.Members" /> 的项类型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the type that is the item type of &lt;see cref=&quot;P:System.Xaml.XamlLanguage.Members&quot; /&gt;.">类型的 <see cref="T:System.Xaml.XamlType" />，该类型是 <see cref="P:System.Xaml.XamlLanguage.Members" /> 的项类型。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Members">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Members&quot; /&gt; concept in XAML.">获取 XAML 中 <see langword="Members" /> 概念的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Members&quot; /&gt; concept in XAML.">XAML 中 <see langword="Members" /> 概念的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Name">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Name&quot; /&gt; directive from XAML.">从 XAML 获取 <see langword="Name" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Name&quot; /&gt; directive from XAML.">来自 XAML 的 <see langword="Name" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Null">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Null&quot; /&gt; or &lt;see langword=&quot;NullExtension&quot; /&gt; XAML language intrinsic.">获取 <see langword="Null" /> 或 <see langword="NullExtension" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Null&quot; /&gt;/&lt;see langword=&quot;NullExtension&quot; /&gt; XAML language intrinsic.">XAML 语言内部函数的<see cref="T:System.Xaml.XamlType" />。 <see langword="Null" /> / <see langword="NullExtension" /></returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Object">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Object&quot; /&gt; XAML language concept.">获取 <see langword="Object" /> XAML 语言概念的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Object&quot; /&gt; XAML language concept.">
        <see langword="Object" /> XAML 语言概念的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.PositionalParameters">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;PositionalParameters&quot; /&gt; directive from XAML.">从 XAML 获取 <see langword="PositionalParameters" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;PositionalParameters&quot; /&gt; directive from XAML.">来自 XAML 的 <see langword="PositionalParameters" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Property">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Property&quot; /&gt; concept in XAML.">获取 XAML 中 <see langword="Property" /> 概念的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Property&quot; /&gt; concept in XAML.">XAML 中 <see langword="Property" /> 概念的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Reference">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that represents a &lt;see langword=&quot;Reference&quot; /&gt; for XAML.">获取一个 <see cref="T:System.Xaml.XamlType" />，它表示 XAML 的 <see langword="Reference" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that represents a &lt;see langword=&quot;Reference&quot; /&gt; for XAML.">一个 <see cref="T:System.Xaml.XamlType" />，它表示 XAML 的 <see langword="Reference" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Shared">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Shared&quot; /&gt; directive for XAML.">获取 XAML 的 <see langword="Shared" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Shared&quot; /&gt; directive for XAML.">XAML 的 <see langword="Shared" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Single">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;c&gt;Single&lt;/c&gt; XAML language intrinsic.">获取 <see langword="Single" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;c&gt;Single&lt;/c&gt; XAML language intrinsic.">
        <see langword="Single" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Space">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;space&quot; /&gt; directive from XML.">获取 XML 中 <see langword="space" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;space&quot; /&gt; directive from XML.">XML 中 <see langword="space" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Static">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Static&quot; /&gt;/&lt;see langword=&quot;StaticExtension&quot; /&gt; XAML language intrinsic.">获取 <see langword="Static" />/<see langword="StaticExtension" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Static&quot; /&gt;/&lt;see langword=&quot;StaticExtension&quot; /&gt; XAML language intrinsic.">XAML 语言内部函数的<see cref="T:System.Xaml.XamlType" />。 <see langword="Static" /> / <see langword="StaticExtension" /></returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.String">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;String&quot; /&gt; XAML language intrinsic.">获取 <see langword="String" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;String&quot; /&gt; XAML language intrinsic.">
        <see langword="String" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Subclass">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Subclass&quot; /&gt; directive from XAML.">从 XAML 获取 <see langword="Subclass" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Subclass&quot; /&gt; directive from XAML.">来自 XAML 的 <see langword="Subclass" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.SynchronousMode">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that enables loading XAML asynchronously if the XAML processor supports such a mode.">获取一个 <see cref="T:System.Xaml.XamlDirective" />，利用它可以通过异步方式加载 XAML（如果 XAML 处理器支持此类模式）。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; that enables loading XAML asynchronously.">一个 <see cref="T:System.Xaml.XamlDirective" />，利用它可以通过异步方式加载 XAML。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TimeSpan">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;TimeSpan&quot; /&gt; concept in XAML language.">获取 XAML 语言中 <see langword="TimeSpan" /> 概念的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;TimeSpan&quot; /&gt; XAML language concept.">
        <see langword="TimeSpan" /> XAML 语言概念的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Type">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Type&quot; /&gt;/&lt;see langword=&quot;TypeExtension&quot; /&gt; XAML language intrinsic.">获取 <see langword="Type" />/<see langword="TypeExtension" /> XAML 语言内部值的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Type&quot; /&gt;/&lt;see langword=&quot;TypeExtension&quot; /&gt; XAML language intrinsic.">XAML 语言内部函数的<see cref="T:System.Xaml.XamlType" />。 <see langword="Type" /> / <see langword="TypeExtension" /></returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TypeArguments">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;TypeArguments&quot; /&gt; directive from XAML.">从 XAML 获取 <see langword="TypeArguments" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;TypeArguments&quot; /&gt; directive from XAML.">来自 XAML 的 <see langword="TypeArguments" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uid">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Uid&quot; /&gt; directive from XAML.">从 XAML 获取 <see langword="Uid" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;Uid&quot; /&gt; directive from XAML.">来自 XAML 的 <see langword="Uid" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.UnknownContent">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;UnknownContent&quot; /&gt; directive from XAML.">从 XAML 获取 <see langword="UnknownContent" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; for the &lt;see langword=&quot;UnknownContent&quot; /&gt; directive from XAML.">来自 XAML 的 <see langword="UnknownContent" /> 指令的 <see cref="T:System.Xaml.XamlDirective" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uri">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Uri&quot; /&gt; XAML language concept.">获取 <see langword="Uri" /> XAML 语言概念的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the &lt;see langword=&quot;Uri&quot; /&gt; XAML language concept.">
        <see langword="Uri" /> XAML 语言概念的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xaml2006Namespace">
      <summary vsli:raw="Gets a string value for the string that identifies the XAML (2006) language namespace. That namespace corresponds to the XAML (2006) &quot;x&quot; prefixed namespace as defined in [MS-XAML] Section 5.1.1.">获取字符串的字符串值，该字符串标识 XAML (2006) 语言命名空间。 该命名空间对应于 [MS-XAML] 第 5.1.1 节中定义的 XAML (2006)“x”前缀命名空间。</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XamlNamespaces">
      <summary vsli:raw="Gets a collection of the namespace identifiers for XAML.">获取 XAML 的命名空间标识符的集合。</summary>
      <returns vsli:raw="A collection of the namespace identifiers for XAML.">XAML 的命名空间标识符的集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XData">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the XAML type that backs an &lt;see langword=&quot;XData&quot; /&gt; block in XAML.">获取在 XAML 中为 <see langword="XData" /> 块提供支持的 XAML 类型的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the XAML type that backs an &lt;see langword=&quot;XData&quot; /&gt; block. See [MS-XAML] Section 5.2.23.">为 <see langword="XData" /> 块提供支持的 XAML 类型的 <see cref="T:System.Xaml.XamlType" />。 请参阅[5.2.23] 部分。</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xml1998Namespace">
      <summary vsli:raw="Gets a string value for the string that identifies the XML (1998) language namespace. That namespace corresponds to the XML &quot;xml&quot; prefixed namespace as referenced in [MS-XAML] Section 5.1.2.">获取字符串的字符串值，该字符串标识 XML (1998) 语言命名空间。 该命名空间对应于 [MS-XAML] 第 5.1.2 节中引用的 XML“xml”前缀命名空间。</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XmlNamespaces">
      <summary vsli:raw="Gets a collection of the namespace identifiers for XML.">获取 XML 的命名空间标识符的集合。</summary>
      <returns vsli:raw="A collection of the namespace identifiers for XML.">XML 的命名空间标识符的集合。</returns>
    </member>
    <member name="T:System.Xaml.XamlMember">
      <summary vsli:raw="Provides the XAML type system identifier for members of XAML types. The identifier is used by XAML readers and XAML writers during processing of member nodes (when the XAML reader is positioned on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt;) and also for general XAML type system logic.">为 XAML 类型的成员提供 XAML 类型系统标识符。 该标识符由 XAML 读取器和 XAML 编写器在处理成员节点的过程中使用（如果 XAML 读取器位于 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上），另外还用于常规 XAML 类型系统逻辑。</summary>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class using CLR type system &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;.">使用 CLR 类型系统 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.EventInfo" /> 初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</summary>
      <param name="eventInfo" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; that represents the event member.">用于表示事件成员的 CLR 类型系统 <see cref="T:System.Reflection.EventInfo" />。</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class using CLR type system &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;, including &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information.">使用 CLR 类型系统 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.EventInfo" />（包括 <see cref="T:System.Xaml.XamlSchemaContext" /> 信息）初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类的新实例。</summary>
      <param name="eventInfo" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; that represents the event member.">用于表示事件成员的 CLR 类型系统 <see cref="T:System.Reflection.EventInfo" />。</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</param>
      <param name="invoker" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that handles run-time reflection calls against the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">可针对 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 处理运行时反射调用的 <see cref="T:System.Xaml.XamlMember" /> 实现。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class using CLR type system &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;.">使用 CLR 类型系统 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.PropertyInfo" /> 初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</summary>
      <param name="propertyInfo" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property member.">用于表示属性成员的 CLR 类型系统 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class using reflection &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;, including &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information.">使用反射 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.PropertyInfo" />（包括 <see cref="T:System.Xaml.XamlSchemaContext" /> 信息）初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类的新实例。</summary>
      <param name="propertyInfo" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; that represents the property member.">用于表示属性成员的 CLR 类型系统 <see cref="T:System.Reflection.PropertyInfo" />。</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</param>
      <param name="invoker" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that handles run-time invocation calls against the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">用于针对 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 处理运行时调用的 <see cref="T:System.Xaml.XamlMember" /> 实现。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class for a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that represents an attachable property.">针对表示可附加属性的 <see cref="T:System.Xaml.XamlMember" /> 初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。</summary>
      <param name="attachablePropertyName" vsli:raw="The string name of the attachable property.">可附加属性的字符串名称。</param>
      <param name="getter" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the &lt;see langword=&quot;get&quot; /&gt; accessor of the attachable member's backing implementation.">可附加成员的支持实现的 <see langword="get" /> 访问器的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="setter" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the &lt;see langword=&quot;set&quot; /&gt; accessor of the attachable member's backing implementation.">可附加成员的支持实现的 <see langword="set" /> 访问器的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class for a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that represents an attachable property, including &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information.">针对表示可附加属性的 <see cref="T:System.Xaml.XamlMember" />（包括 <see cref="T:System.Xaml.XamlMember" /> 信息）初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类的新实例。</summary>
      <param name="attachablePropertyName" vsli:raw="The string name of the attachable property.">可附加属性的字符串名称。</param>
      <param name="getter" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the &lt;see langword=&quot;get&quot; /&gt; accessor of the attachable member's backing implementation.">可附加成员的支持实现的 <see langword="get" /> 访问器的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="setter" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the &lt;see langword=&quot;set&quot; /&gt; accessor of the attachable member's backing implementation.">可附加成员的支持实现的 <see langword="set" /> 访问器的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</param>
      <param name="invoker" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that handles run-time invocation calls against the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">用于针对 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 处理运行时调用的 <see cref="T:System.Xaml.XamlMember" /> 实现。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class for a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that represents an attachable event.">针对表示可附加事件的 <see cref="T:System.Xaml.XamlMember" /> 初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。</summary>
      <param name="attachableEventName" vsli:raw="The string name of the attachable event.">可附加事件的字符串名称。</param>
      <param name="adder" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the handler &lt;see langword=&quot;Add&quot; /&gt; method of the attachable member's backing implementation.">可附加成员的支持实现的处理程序 <see langword="Add" /> 方法的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class for a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that represents an attachable event, including &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information.">针对表示可附加事件的 <see cref="T:System.Xaml.XamlMember" />（包括 <see cref="T:System.Xaml.XamlMember" /> 信息）初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类的新实例。</summary>
      <param name="attachableEventName" vsli:raw="The string name of the attachable event.">可附加事件的字符串名称。</param>
      <param name="adder" vsli:raw="The CLR type system &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the handler &lt;see langword=&quot;Add&quot; /&gt; method of the attachable member's backing implementation.">可附加成员的支持实现的处理程序 <see langword="Add" /> 方法的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="schemaContext" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; context that qualifies the member.">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</param>
      <param name="invoker" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that handles run-time invocation calls against the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">用于针对 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 处理运行时调用的 <see cref="T:System.Xaml.XamlMember" /> 实现。</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; class using a string name and declaring &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; information. A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that is constructed with this signature has significant limitations.">使用字符串名称和声明 <see cref="T:System.Xaml.XamlMember" /> 信息初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。 使用此签名构造的 <see cref="T:System.Xaml.XamlMember" /> 具有很大的限制。</summary>
      <param name="name" vsli:raw="The string name of the member.">成员的字符串名称。</param>
      <param name="declaringType" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; information for the declaring type.">声明类型的 <see cref="T:System.Xaml.XamlType" /> 信息。</param>
      <param name="isAttachable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the member is attachable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果要指示成员是可附加的，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;declaringType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 或 <paramref name="declaringType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlMember.DeclaringType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the type that declares the member that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">获取类型的 <see cref="T:System.Xaml.XamlType" />，该类型声明与此 <see cref="T:System.Xaml.XamlMember" /> 关联的成员。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the type that declares the member that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">类型的 <see cref="T:System.Xaml.XamlType" />，该类型声明与此 <see cref="T:System.Xaml.XamlMember" /> 关联的成员。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DeferringLoader">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which is used for deferred loading of XAML declared objects.">获取一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象用于 XAML 声明的对象的延迟加载。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Xaml.XamlDeferringLoader&quot; /&gt; constraint on the generic.">一个对泛型具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Xaml.XamlDeferringLoader" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DependsOn">
      <summary vsli:raw="Gets a list of &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects. These report the members where dependency relationships for initialization order exist relative to this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">获取 <see cref="T:System.Xaml.XamlMember" /> 对象的列表。 这些对象报告一些成员，其中的初始化顺序依赖关系相对于此 <see cref="T:System.Xaml.XamlMember" /> 存在。</summary>
      <returns vsli:raw="A list of &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects.">
        <see cref="T:System.Xaml.XamlMember" /> 对象的列表。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the current object is equal to another object.">指示当前对象是否等于另一个对象。</summary>
      <param name="obj" vsli:raw="The object to compare with this object.">要与此对象进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is equal to the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前对象等于 <paramref name="obj" /> 参数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
      <summary vsli:raw="Indicates whether the current object is equal to another object of the same type.">指示当前对象是否等于同一类型的另一个对象。</summary>
      <param name="other" vsli:raw="An object to compare with this object.">与此对象进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is equal to the &lt;paramref name=&quot;other&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前对象等于 <paramref name="other" /> 参数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">返回该对象的哈希代码。</summary>
      <returns vsli:raw="An integer hash code.">整数哈希代码。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetXamlNamespaces">
      <summary vsli:raw="Returns a list of XAML namespaces where this XAML member can exist.">返回 XAML 命名空间的列表，此 XAML 成员可能存在于这些命名空间中。</summary>
      <returns vsli:raw="A list of XAML namespace identifiers as strings.">字符串形式的 XAML 命名空间标识符的列表。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Invoker">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">获取与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 关联的 <see cref="T:System.Xaml.XamlMember" /> 实现。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 关联的 <see cref="T:System.Xaml.XamlMember" /> 实现。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAmbient">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is reported as an ambient property.">获取一个值，该值指示是否将此 <see cref="T:System.Xaml.XamlMember" /> 报告为一个环境属性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is reported as an ambient property; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果将此 <see cref="T:System.Xaml.XamlMember" /> 报告为环境属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAttachable">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is an attachable member.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否为可附加成员。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is an attachable member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlMember" /> 是可附加成员，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsDirective">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is a XAML directive.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否为 XAML 指令。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is a XAML directive; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlMember" /> 是 XAML 指令，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsEvent">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents an event member.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示事件成员。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents an event; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示事件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsNameValid">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is initialized with a valid &lt;see langword=&quot;xamlName&quot; /&gt; string as its &lt;see cref=&quot;P:System.Xaml.XamlMember.Name&quot; /&gt;.">获取一个值，该值指示是否使用有效的 <see langword="xamlName" /> 字符串作为其 <see cref="T:System.Xaml.XamlMember" /> 来初始化此 <see cref="P:System.Xaml.XamlMember.Name" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is initialized with a valid &lt;see langword=&quot;xamlName&quot; /&gt; string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果使用有效的 <see langword="true" /> 字符串来初始化此 <see cref="T:System.Xaml.XamlMember" />，则为 <see langword="xamlName" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a read-only member.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示只读成员。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a read-only member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示只读成员，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadPublic">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a member with a callable public &lt;see langword=&quot;get&quot; /&gt; accessor.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个具有可调用公共 <see langword="get" /> 访问器的成员。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a callable public &lt;see langword=&quot;get&quot; /&gt; accessor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示可调用公共 <see langword="true" /> 访问器，则为 <see langword="get" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsUnknown">
      <summary vsli:raw="Gets a value that indicates whether the member is not resolvable by the backing system that is used for type and member resolution.">获取一个值，该值指示用于类型和成员解析的支持系统是否无法解析成员。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is not resolvable; &lt;see langword=&quot;false&quot; /&gt; if the member is resolvable.">如果成员不可解析，则为 <see langword="true" />；如果成员可解析，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWriteOnly">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a write-only member.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示只写成员。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a write-only member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示只写成员，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWritePublic">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a member that has a callable public &lt;see langword=&quot;set&quot; /&gt; accessor.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个具有可调用公共 <see langword="set" /> 访问器的成员。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a callable public &lt;see langword=&quot;set&quot; /&gt; accessor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示可调用公共 <see langword="true" /> 访问器，则为 <see langword="set" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
      <summary vsli:raw="When implemented in a derived class, returns an &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; implementation.">在派生类中实现时，返回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; implementation.">
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDeferringLoader">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which is used for deferred loading of XAML declared objects.">返回一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象用于 XAML 声明的对象的延迟加载。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; that has a &lt;see cref=&quot;T:System.Xaml.XamlDeferringLoader&quot; /&gt; constraint on the generic.">对泛型具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Xaml.XamlDeferringLoader" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDependsOn">
      <summary vsli:raw="Returns a list of &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects. Items in the list report the members where dependency relationships for initialization order exist relative to this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">返回 <see cref="T:System.Xaml.XamlMember" /> 对象的列表。 此列表中的项报告一些成员，其中的初始化顺序依赖关系相对于此 <see cref="T:System.Xaml.XamlMember" /> 存在。</summary>
      <returns vsli:raw="A list of &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects.">
        <see cref="T:System.Xaml.XamlMember" /> 对象的列表。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupInvoker">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">返回与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 关联的 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlMemberInvoker&quot; /&gt; information for this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;; or &lt;see langword=&quot;null&quot; /&gt;.">此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 的 <see cref="T:System.Xaml.XamlMember" /> 信息；或者为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsAmbient">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; is reported as an ambient property.">返回的值指示是否将此 <see cref="T:System.Xaml.XamlMember" /> 作为环境属性报告。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to report this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; as an ambient property; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果要将此 <see cref="T:System.Xaml.XamlMember" /> 报告为环境属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsEvent">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents an event.">返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to report that this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents an event; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果要报告此 <see cref="T:System.Xaml.XamlMember" /> 表示事件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadOnly">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents an intended read-only property.">返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示预期的只读属性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to report this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; as an intended read-only property; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果要将此 <see cref="T:System.Xaml.XamlMember" /> 报告为预期的只读属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadPublic">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a property that has a public &lt;see langword=&quot;get&quot; /&gt; accessor.">返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个具有公共 <see langword="get" /> 访问器的属性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a property that has a public &lt;see langword=&quot;get&quot; /&gt; accessor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示具有公共 <see langword="true" /> 访问器的属性，则为 <see langword="get" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsUnknown">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a member that is not resolvable by the backing system that is used for type and member resolution.">返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个用于类型和成员解析的支持系统无法解析的成员。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a non-resolvable member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示不可解析的成员，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWriteOnly">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a member that has a public &lt;see langword=&quot;set&quot; /&gt; accessor but not a public &lt;see langword=&quot;get&quot; /&gt; accessor.">返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个具有公共 <see langword="set" /> 访问器但没有公共 <see langword="get" /> 访问器的成员。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a write-only member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示只写成员，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWritePublic">
      <summary vsli:raw="Returns whether this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a member that has a public &lt;see langword=&quot;set&quot; /&gt; accessor.">返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个具有公共 <see langword="set" /> 访问器的成员。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; represents a writable member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示可写成员，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters">
      <summary vsli:raw="Returns the opening and closing bracket characters for a markup extension.">返回标记扩展的开始和结束括号字符。</summary>
      <returns vsli:raw="A collection containing the opening and closing bracket characters.">包含开始和结束括号字符的集合。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTargetType">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type where the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; can exist.">返回其中可能存在 <see cref="T:System.Xaml.XamlType" /> 的类型的 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns vsli:raw="The type where the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; can exist.">其中可能存在 <see cref="T:System.Xaml.XamlMember" /> 的类型。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupType">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">返回成员所使用的类型的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">成员所使用的类型的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTypeConverter">
      <summary vsli:raw="Returns a type converter implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">返回与此 <see cref="T:System.Xaml.XamlMember" /> 关联的类型转换器实现。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; instance with &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint; or &lt;see langword=&quot;null&quot; /&gt;.">一个具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.ComponentModel.TypeConverter" /> 实例，或者为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
      <summary vsli:raw="Returns a &lt;see langword=&quot;get&quot; /&gt; accessor that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">返回与此 <see cref="T:System.Xaml.XamlMember" /> 关联的 <see langword="get" /> 访问器。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the associated &lt;see langword=&quot;get&quot; /&gt; accessor; or &lt;see langword=&quot;null&quot; /&gt;.">关联 <see langword="get" /> 访问器的 <see cref="T:System.Reflection.MethodInfo" />，或者为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingMember">
      <summary vsli:raw="Returns a CLR type system &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">返回与此 <see cref="T:System.Reflection.MemberInfo" /> 关联的 CLR 类型系统 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns vsli:raw="A CLR type system &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; object that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;; or &lt;see langword=&quot;null&quot; /&gt;.">与此 <see cref="T:System.Reflection.MemberInfo" /> 关联的 CLR 类型系统 <see cref="T:System.Xaml.XamlMember" /> 对象，或者为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
      <summary vsli:raw="Returns a &lt;see langword=&quot;set&quot; /&gt; accessor that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">返回与此 <see cref="T:System.Xaml.XamlMember" /> 关联的 <see langword="set" /> 访问器。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; for the associated &lt;see langword=&quot;set&quot; /&gt; accessor; or &lt;see langword=&quot;null&quot; /&gt;.">关联 <see langword="set" /> 访问器的 <see cref="T:System.Reflection.MethodInfo" />，或者为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupValueSerializer">
      <summary vsli:raw="Returns a value serializer implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">返回与此 <see cref="T:System.Xaml.XamlMember" /> 关联的值序列化程序实现。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; instance with &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint, or &lt;see langword=&quot;null&quot; /&gt;.">一个具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Windows.Markup.ValueSerializer" /> 实例，或者为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters">
      <summary vsli:raw="Defines the opening and closing bracket characters for a markup extension.">定义标记扩展的开始和结束括号字符。</summary>
      <returns vsli:raw="A collection containing the opening and closing bracket characters.">包含开始和结束括号字符的集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Name">
      <summary vsli:raw="Gets the &lt;see langword=&quot;xamlName&quot; /&gt; name string that declares this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">获取 <see langword="xamlName" /> 名称字符串，该字符串声明此 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;xamlName&quot; /&gt; name string that declares this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">
        <see langword="xamlName" /> 名称字符串，该字符串声明此 <see cref="T:System.Xaml.XamlMember" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects have the same value.">确定两个指定的 <see cref="T:System.Xaml.XamlMember" /> 对象是否具有相同的值。</summary>
      <param name="xamlMember1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</param>
      <param name="xamlMember2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;xamlMember1&quot; /&gt; is the same as the value of &lt;paramref name=&quot;xamlMember2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的值与 <paramref name="xamlMember1" /> 的值相同，则为 <paramref name="xamlMember2" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; objects have different values.">确定两个指定的 <see cref="T:System.Xaml.XamlMember" /> 对象是否具有不同的值。</summary>
      <param name="xamlMember1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</param>
      <param name="xamlMember2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;xamlMember1&quot; /&gt; differs from the value of &lt;paramref name=&quot;xamlMember2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="xamlMember1" /> 的值与 <paramref name="xamlMember2" /> 的值不同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.PreferredXamlNamespace">
      <summary vsli:raw="Gets the single XAML namespace URI that identifies the primary XAML namespace for this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">获取单个 XAML 命名空间 URI，该 URI 标识此 <see cref="T:System.Xaml.XamlMember" /> 的主 XAML 命名空间。</summary>
      <returns vsli:raw="The identifier for the primary XAML namespace for this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;, as a string.">此 <see cref="T:System.Xaml.XamlMember" /> 的主 XAML 命名空间的标识符（字符串形式）。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.SerializationVisibility">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibility&quot; /&gt; value, which indicates how a visual designer should process the member.">获取一个 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 值，该值指示可视化设计器应如何处理成员。</summary>
      <returns vsli:raw="A value of the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibility&quot; /&gt; enumeration. The default is &lt;see cref=&quot;F:System.ComponentModel.DesignerSerializationVisibility.Visible&quot; /&gt;.">
        <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 枚举的一个值。 默认值为 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TargetType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type where the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; can exist.">获取其中可能存在 <see cref="T:System.Xaml.XamlType" /> 的类型的 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <returns vsli:raw="The type where the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; can exist.">其中可能存在 <see cref="T:System.Xaml.XamlMember" /> 的类型。</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.ToString">
      <summary vsli:raw="Returns a string representation of this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">返回此 <see cref="T:System.Xaml.XamlMember" /> 的字符串表示形式。</summary>
      <returns vsli:raw="A string representation of this &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">此 <see cref="T:System.Xaml.XamlMember" /> 的字符串表示形式。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Type">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">获取成员所使用的类型的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the type that is used by the member.">成员所使用的类型的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TypeConverter">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which can be used for type conversion construction of XAML declared objects.">获取一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象可用于 XAML 声明的对象的类型转换构造。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; value, with a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint on the generic.">一个对泛型具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.ComponentModel.TypeConverter" /> 值。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.UnderlyingMember">
      <summary vsli:raw="Gets the CLR type system &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that is available for a member that is constructed by &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt;.">获取 CLR 类型系统 <see cref="T:System.Reflection.MemberInfo" />，它可用于由 <see cref="T:System.Reflection.PropertyInfo" />、<see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.EventInfo" /> 构造的成员。</summary>
      <returns vsli:raw="CLR type system &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; information, as cast from the initial constructor parameters. A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; that is constructed with the &lt;see cref=&quot;M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)&quot; /&gt; signature returns &lt;see langword=&quot;null&quot; /&gt;.">从初始构造函数参数强制转换的 CLR 类型系统 <see cref="T:System.Reflection.MemberInfo" /> 信息。 使用 <see cref="T:System.Xaml.XamlMember" /> 签名构造的 <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /> 返回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.ValueSerializer">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which is used for value serialization of XAML declared objects.">获取一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象用于 XAML 声明的对象的值序列化。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint on the generic.">一个对泛型具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeList">
      <summary vsli:raw="Provides a list of XAML nodes, which can be used for scenarios such as writing XAML nodes in a deferred manner.">为诸如采用延迟方式编写 XAML 节点等方案提供 XAML 节点的列表。</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlNodeList&quot; /&gt; class, using a provided schema context.">使用提供的架构上下文初始化 <see cref="T:System.Xaml.XamlNodeList" /> 类的新实例。</summary>
      <param name="schemaContext" vsli:raw="The schema context to use for node operations.">要用于节点操作的架构上下文。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlNodeList&quot; /&gt; class, using a provided schema context and list size.">使用提供的架构上下文和列表大小初始化 <see cref="T:System.Xaml.XamlNodeList" /> 类的新实例。</summary>
      <param name="schemaContext" vsli:raw="The schema context to use for node operations.">要用于节点操作的架构上下文。</param>
      <param name="size" vsli:raw="The intended item count of the list.">列表的预期项计数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.Clear">
      <summary vsli:raw="Clears the items in this list.">清除此列表中的项。</summary>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Count">
      <summary vsli:raw="Gets the number of nodes in this &lt;see cref=&quot;T:System.Xaml.XamlNodeList&quot; /&gt;.">获取此 <see cref="T:System.Xaml.XamlNodeList" /> 中的节点数。</summary>
      <returns vsli:raw="The number of nodes in this &lt;see cref=&quot;T:System.Xaml.XamlNodeList&quot; /&gt;.">此 <see cref="T:System.Xaml.XamlNodeList" /> 中的节点数。</returns>
    </member>
    <member name="M:System.Xaml.XamlNodeList.GetReader">
      <summary vsli:raw="Returns a XAML reader implementation delegate.">返回 XAML 读取器实现委托。</summary>
      <returns vsli:raw="A XAML reader implementation delegate.">XAML 读取器实现委托。</returns>
      <exception cref="T:System.Xaml.XamlException" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlNodeList&quot; /&gt; is still in Write mode.  &#xA;  &#xA; -or-  &#xA;  &#xA; The writer that is used for the node list has no schema context.">
        <see cref="T:System.Xaml.XamlNodeList" /> 仍处于写入模式。  
或 
用于节点列表的编写器没有架构上下文。</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Writer">
      <summary vsli:raw="Gets the associated XAML writer.">获取关联的 XAML 编写器。</summary>
      <returns vsli:raw="The associated XAML writer.">关联的 XAML 编写器。</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeQueue">
      <summary vsli:raw="Provides a buffer for writing nodes and reading them again.">提供用于写入节点和再次读取节点的缓冲区。</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeQueue.#ctor(System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt; class using a provided XAML schema context.">使用提供的 XAML 架构上下文初始化 <see cref="T:System.Xaml.XamlNodeQueue" /> 类的新实例。</summary>
      <param name="schemaContext" vsli:raw="The schema context to use for node operations.">要用于节点操作的架构上下文。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlSchemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlSchemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Count">
      <summary vsli:raw="Gets the number of nodes in the &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt;.">获取 <see cref="T:System.Xaml.XamlNodeQueue" /> 中的节点数。</summary>
      <returns vsli:raw="The number of nodes in the &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlNodeQueue" /> 中的节点数。</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.IsEmpty">
      <summary vsli:raw="Gets a value that determines whether this &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt; does not contain nodes.">获取一个值，该值确定此 <see cref="T:System.Xaml.XamlNodeQueue" /> 是否不包含节点。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt; does not contain nodes; &lt;see langword=&quot;false&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlNodeQueue&quot; /&gt; contains nodes.">如果此 <see cref="T:System.Xaml.XamlNodeQueue" /> 不包含节点，则为 <see langword="true" />；如果此 <see cref="T:System.Xaml.XamlNodeQueue" /> 包含节点，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Reader">
      <summary vsli:raw="Gets a XAML reader implementation delegate.">获取 XAML 读取器实现委托。</summary>
      <returns vsli:raw="A XAML reader implementation delegate.">XAML 读取器实现委托。</returns>
      <exception cref="T:System.Xaml.XamlException" vsli:raw="The XAML writer that is used for the node list has no valid XAML schema context.">用于节点列表的 XAML 编写器没有有效的 XAML 架构上下文。</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Writer">
      <summary vsli:raw="Gets the associated XAML writer.">获取关联的 XAML 编写器。</summary>
      <returns vsli:raw="The associated XAML writer.">关联的 XAML 编写器。</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeType">
      <summary vsli:raw="Describes the type of the node that is currently being processed by a XAML reader.">描述 XAML 读取器当前正在处理的节点的类型。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndMember">
      <summary vsli:raw="The reader is at the end of a member node.">读取器位于成员节点的末尾。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndObject">
      <summary vsli:raw="The reader is at the end of an object node.">读取器位于对象节点的末尾。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.GetObject">
      <summary vsli:raw="The reader is within an object node and writing a default or implicit value, instead of being a specified object value.">读取器位于对象节点内并正在写入默认值或隐式值，而不是作为指定的对象值。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.NamespaceDeclaration">
      <summary vsli:raw="The reader is within an XML namespace declaration.">读取器位于 XML 命名空间声明内。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.None">
      <summary vsli:raw="The reader is not positioned at a true node (for example, the reader might be at end-of-file).">读取器不在真正的节点上（例如，读取器可能位于文件结尾）。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartMember">
      <summary vsli:raw="The reader is at the start of a member node.">读取器位于成员节点的开头。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartObject">
      <summary vsli:raw="The reader is at the start of an object node.">读取器位于对象节点的开头。</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.Value">
      <summary vsli:raw="The reader is within a node and processing a value.">读取器位于节点内并正在处理值。</summary>
    </member>
    <member name="T:System.Xaml.XamlObjectEventArgs">
      <summary vsli:raw="Provides data for callbacks that can be inserted in the sequence for object initialization and property setting. This influences the object graph that is produced by &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">为可插入序列以实现对象初始化和属性设置的回调提供数据。 这会影响由 <see cref="T:System.Xaml.XamlObjectWriter" /> 生成的对象关系图。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 类的新实例。</summary>
      <param name="instance" vsli:raw="The object instance that is relevant to the event data.">与事件数据相关的对象实例。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.ElementLineNumber">
      <summary vsli:raw="Gets or sets the line number of the relevant object instance.">获取或设置相关对象实例的行号。</summary>
      <returns vsli:raw="The line number of the element.">元素的行号。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.ElementLinePosition">
      <summary vsli:raw="Gets or sets the position in the line of the relevant object instance.">获取或设置相关对象实例在行中的位置。</summary>
      <returns vsli:raw="The position in the line of the element.">元素在行中的位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.Instance">
      <summary vsli:raw="Gets the object instance that is relevant to the event data.">获取与事件数据相关的对象实例。</summary>
      <returns vsli:raw="The object instance that is relevant to the event data.">与事件数据相关的对象实例。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.SourceBamlUri">
      <summary vsli:raw="Gets or sets the BAML URI of the relevant object instance.">获取或设置相关对象实例的 BAML URI。</summary>
      <returns vsli:raw="The BAML URI of the relevant object instance.">相关对象实例的 BAML URI。</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReader">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; implementation that reads object graphs and generates a XAML node stream.">提供一个 <see cref="T:System.Xaml.XamlReader" /> 实现，该实现读取对象图并生成 XAML 节点流。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 类的新实例。</summary>
      <param name="instance" vsli:raw="The root of the object tree / object graph to read.">要读取的对象树/对象图的根。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlObjectReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; class with the specified reader settings.">使用指定的读取器设置初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 类的新实例。</summary>
      <param name="instance" vsli:raw="The root of the object tree to read.">要读取的对象树的根。</param>
      <param name="settings" vsli:raw="A settings object.">一个设置对象。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; class with the specified schema context.">使用指定的架构上下文初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 类的新实例。</summary>
      <param name="instance" vsli:raw="The root of the object tree to read.">要读取的对象树的根。</param>
      <param name="schemaContext" vsli:raw="The schema context for the reader to use.">要使用的读取器的架构上下文。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; class with the specified schema context and reader settings.">使用指定的架构上下文和读取器设置初始化 <see cref="T:System.Xaml.XamlObjectReader" /> 类的新实例。</summary>
      <param name="instance" vsli:raw="The root of the object tree to read.">要读取的对象树的根。</param>
      <param name="schemaContext" vsli:raw="The schema context for the reader to use.">要使用的读取器的架构上下文。</param>
      <param name="settings" vsli:raw="A settings object.">一个设置对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Instance">
      <summary vsli:raw="Gets the object instance that is available at the current reader position.">获取在当前读取器位置可用的对象实例。</summary>
      <returns vsli:raw="The object instance at the current reader position; or &lt;see langword=&quot;null&quot; /&gt; if the reader position is not on an object.">位于当前读取器位置的对象实例；如果读取器位置不在对象上，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.IsEof">
      <summary vsli:raw="Gets a value that reports whether the reader position is at the end of the file.">获取一个值，该值报告读取器位置是否位于文件结尾。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader position is at the end of the file; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果读取器位置位于文件结尾，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Member">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; at the reader position, if the reader position is on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt;.">如果读取器位置在 <see cref="T:System.Xaml.XamlMember" /> 上，则获取位于读取器位置的当前 <see cref="F:System.Xaml.XamlNodeType.StartMember" />。</summary>
      <returns vsli:raw="The current member; or &lt;see langword=&quot;null&quot; /&gt; if the reader position is not on a member.">当前成员；如果读取器位置不在成员上，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Namespace">
      <summary vsli:raw="Gets the XAML namespace declaration from the current reader position.">从当前读取器位置中获取 XAML 命名空间声明。</summary>
      <returns vsli:raw="The XAML namespace declaration if the reader is positioned on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.NamespaceDeclaration&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果读取器位于 <see cref="F:System.Xaml.XamlNodeType.NamespaceDeclaration" /> 上，则为 XAML 命名空间声明；否则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.NodeType">
      <summary vsli:raw="Gets the type of the current node.">获取当前节点的类型。</summary>
      <returns vsli:raw="The type of the current node.">当前节点的类型。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.Read">
      <summary vsli:raw="Provides the next XAML node from the source object graph, if a node is available.">提供源对象图中的下一个 XAML 节点（如果节点可用）。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a node is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果某节点可用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.SchemaContext">
      <summary vsli:raw="Gets an object that provides schema information for the information set.">获取一个对象，该对象提供信息集的架构信息。</summary>
      <returns vsli:raw="An object that provides schema information for the information set.">一个对象，该对象提供信息集的架构信息。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Type">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the object at the current reader position.">获取位于当前读取器位置的对象的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the object at the current reader position; or &lt;see langword=&quot;null&quot; /&gt; if the position is not on an object.">位于当前读取器位置的对象的 <see cref="T:System.Xaml.XamlType" />；如果位置不在对象上，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Value">
      <summary vsli:raw="Gets the value of the node at the current reader position.">获取位于当前读取器位置的节点的值。</summary>
      <returns vsli:raw="The value of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the reader position is not on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.Value&quot; /&gt; node type.">当前节点的值；如果读取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 节点类型上，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderException">
      <summary vsli:raw="The exception that is thrown by several &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; internal helper APIs.">由若干 <see cref="T:System.Xaml.XamlObjectReader" /> 内部帮助器 API 引发的异常。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReaderException&quot; /&gt; class with a system-supplied message that describes the error.">使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReaderException&quot; /&gt; class with serialized data.">用序列化数据初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">承载序列化对象数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReaderException&quot; /&gt; class with a specified message that describes the error.">使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReaderException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlObjectReaderException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderSettings">
      <summary vsli:raw="Specifies processing rules or option settings for a &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt;.">为 <see cref="T:System.Xaml.XamlObjectReader" /> 指定处理规则或选项设置。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectReaderSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlObjectReaderSettings" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xaml.XamlObjectReaderSettings.RequireExplicitContentVisibility">
      <summary vsli:raw="Gets or sets a value that determines whether writers that use the associated &lt;see cref=&quot;T:System.Xaml.XamlObjectReader&quot; /&gt; for context should use designer settings for writing content explicitly.">获取或设置一个值，该值确定为上下文使用关联 <see cref="T:System.Xaml.XamlObjectReader" /> 的编写器是否应使用设计器设置来显式写入内容。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that writers that use this context should use designer settings for writing any output content in cases where &lt;see cref=&quot;P:System.Xaml.XamlMember.IsWritePublic&quot; /&gt; reports &lt;see langword=&quot;false&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if designer settings should be ignored.">如果要指定使用此上下文的编写器在 <see cref="P:System.Xaml.XamlMember.IsWritePublic" /> 报告<see langword="true" /> 的情况下应使用设计器设置来写入任何输出，则为 <see langword="false" />；如果应忽略设计器设置，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectWriter">
      <summary vsli:raw="Creates an object graph from a source XAML node stream.">从源 XAML 节点流创建对象图。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; class using  the XAML schema context that is used by a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;.">使用 <see cref="T:System.Xaml.XamlObjectWriter" /> 所用的 XAML 架构上下文初始化 <see cref="T:System.Xaml.XamlReader" /> 类的新实例。</summary>
      <param name="schemaContext" vsli:raw="A XAML schema context that is shared with the XAML reader that provides nodes for writing.">与 XAML 读取器共享的 XAML 架构上下文，该读取器提供节点用于编写。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; class using the context that is used by a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; and its settings.">使用 <see cref="T:System.Xaml.XamlObjectWriter" /> 所用的上下文及其设置初始化 <see cref="T:System.Xaml.XamlReader" /> 类的新实例。</summary>
      <param name="schemaContext" vsli:raw="A XAML schema context that is shared with the XAML reader that provides nodes for writing.">与 XAML 读取器共享的 XAML 架构上下文，该读取器提供节点用于编写。</param>
      <param name="settings" vsli:raw="A settings object that specifies certain options for &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; behavior and output.">一个设置对象，该对象为 <see cref="T:System.Xaml.XamlObjectWriter" /> 行为和输出指定某些选项。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Clear">
      <summary vsli:raw="Resets all possible frames and clears the object graph.">重置所有可能的框架并清除对象图。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;, and optionally, releases the managed resources.">释放由 <see cref="T:System.Xaml.XamlObjectWriter" /> 占用的非托管资源，也可以选择释放托管资源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release the managed resources; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示释放托管资源；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
      <summary vsli:raw="Invokes any &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler&quot; /&gt; method that is associated with &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">为此 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 关联的 <see cref="T:System.Xaml.XamlObjectWriter" /> 方法。</summary>
      <param name="value" vsli:raw="The object to report on. The object is packaged into &lt;see cref=&quot;T:System.Xaml.XamlObjectEventArgs&quot; /&gt; when the handler is invoked.">要报告的对象。 在调用处理程序时，此对象封装在 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
      <summary vsli:raw="Invokes any &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler&quot; /&gt; method that is associated with &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">为此 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 关联的 <see cref="T:System.Xaml.XamlObjectWriter" /> 方法。</summary>
      <param name="value" vsli:raw="The object to report on. The value  is packaged into &lt;see cref=&quot;T:System.Xaml.XamlObjectEventArgs&quot; /&gt; when the handler is invoked.">要报告的对象。 在调用处理程序时，此值封装在 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
      <summary vsli:raw="Invokes any &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler&quot; /&gt; referenced method that is associated with &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">为此 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" />  关联的 <see cref="T:System.Xaml.XamlObjectWriter" /> 引用的方法。</summary>
      <param name="value" vsli:raw="The object to report on. This is packaged into &lt;see cref=&quot;T:System.Xaml.XamlObjectEventArgs&quot; /&gt; when the handler is invoked.">要报告的对象。 在调用处理程序时，此对象封装在 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)">
      <summary vsli:raw="Invokes any &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler&quot; /&gt; referenced method that is associated with &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; for this &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">为此 <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" />  关联的 <see cref="T:System.Xaml.XamlObjectWriter" /> 引用的方法。</summary>
      <param name="value" vsli:raw="The value to pass through &lt;see cref=&quot;T:System.Xaml.XamlObjectEventArgs&quot; /&gt; when the handler is invoked.">要在调用处理程序时通过 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 传递的值。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
      <summary vsli:raw="Invokes any &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler&quot; /&gt; referenced method that is associated with &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; for this writer, as long as &lt;paramref name=&quot;handled&quot; /&gt; in &lt;see cref=&quot;T:System.Windows.Markup.XamlSetValueEventArgs&quot; /&gt; event data is not &lt;see langword=&quot;true&quot; /&gt;.">为此编写器调用任何与 <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> 关联的 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 引用的方法（只要 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 事件数据中的 <paramref name="handled" /> 不为 <see langword="true" />）。</summary>
      <param name="eventSender" vsli:raw="The object to report as the source to the handler.">要作为源向处理程序报告的对象。</param>
      <param name="member" vsli:raw="The name of the property to set, which is passed to the handler as part of &lt;see cref=&quot;T:System.Windows.Markup.XamlSetValueEventArgs&quot; /&gt;.">要设置的属性的名称，该名称将作为 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 的一部分传递到处理程序。</param>
      <param name="value" vsli:raw="The value to provide for the property that is named by &lt;paramref name=&quot;property&quot; /&gt;. The value is passed to the handler as part of &lt;see cref=&quot;T:System.Windows.Markup.XamlSetValueEventArgs&quot; /&gt;.">要为由 <paramref name="property" /> 命名的属性提供的值。 此值作为 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 的一部分传递给处理程序。</param>
      <returns vsli:raw="A Boolean value that is set by any associated handler; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">由任何关联的处理程序设置的布尔值；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.Result">
      <summary vsli:raw="Gets the last object that was written. Typically only called when the node stream is at its end and the object graph is complete.">获取写入的最后一个对象。 通常，仅在节点流位于结尾且对象关系图完整时才调用。</summary>
      <returns vsli:raw="The last object written, or &lt;see langword=&quot;null&quot; /&gt;.">写入的最后一个对象，或者为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.RootNameScope">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.INameScope&quot; /&gt; service that maintains the XAML namescope for the absolute node root of the XAML object writer.">获取 <see cref="T:System.Windows.Markup.INameScope" /> 服务，该服务为 XAML 对象编写器的绝对根节点维护 XAML 名称范围。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Markup.INameScope&quot; /&gt; service that maintains the XAML namescope for the current root of the object writer.">
        <see cref="T:System.Windows.Markup.INameScope" /> 服务，该服务为对象编写器的当前根维护 XAML 名称范围。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.SchemaContext">
      <summary vsli:raw="Gets the active XAML schema context.">获取活动 XAML 架构上下文。</summary>
      <returns vsli:raw="The XAML schema context.">XAML 架构上下文。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
      <summary vsli:raw="Implements &lt;see cref=&quot;M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)&quot; /&gt; and provides line information for exceptions.">实现 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />，并为异常提供行信息。</summary>
      <param name="lineNumber" vsli:raw="The line number from the reader.">读取器中的行号。</param>
      <param name="linePosition" vsli:raw="The line position from the reader.">读取器中的行位置。</param>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
      <summary vsli:raw="Gets a value that reports whether a line information service should provide values and therefore, should also call the &lt;see cref=&quot;M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)&quot; /&gt; method when it is relevant.">获取一个值，该值报告行信息服务是否应提供值并因此在相关时同时调用 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> 方法。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if line information is used by the writer; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果行信息由编写器使用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndMember">
      <summary vsli:raw="Closes the current member scope, and may write the value of the member scope while it closes. The new scope becomes the parent object scope of the member.">关闭当前成员范围，并且可能在关闭时写入成员范围的值。 新范围将成为成员的父对象范围。</summary>
      <exception cref="T:System.Xaml.XamlObjectWriterException" vsli:raw="Failed to create member value from a value node that is encountered between this call and a previous &lt;see langword=&quot;StartMember&quot; /&gt;.">未能从在此调用和上一个 <see langword="StartMember" /> 之间遇到的值节点创建成员值。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndObject">
      <summary vsli:raw="Closes the current object scope in the writer. The new object scope becomes the parent member scope.">关闭编写器中的当前对象范围。 新对象范围将成为的父成员范围。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteGetObject">
      <summary vsli:raw="Writes the conceptual &lt;see langword=&quot;StartObject&quot; /&gt; into the object graph when the specified object is a default or implicit value of the parent property. The implicit value comes from information that is obtained from the XAML schema context and backing type information, instead of being specified as an object value in the input XAML node set.">当指定对象是父属性的默认值或隐式值时，将概念 <see langword="StartObject" /> 写入对象关系图。 隐式值来自从 XAML 架构上下文中获取的信息以及后备类型信息，而不是指定为输入 XAML 节点集中的对象值。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary vsli:raw="Defines a namespace declaration that applies to the next object scope or member scope.">定义一个命名空间声明，该声明适用于下一个对象范围或成员范围。</summary>
      <param name="namespaceDeclaration" vsli:raw="The namespace declaration to write.">要写入的命名空间声明。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;namespaceDeclaration&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="namespaceDeclaration" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A component of &lt;paramref name=&quot;namespaceDeclaration&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="namespaceDeclaration" /> 的组件为 <see langword="null" />。</exception>
      <exception cref="T:System.Xaml.XamlObjectReaderException" vsli:raw="Tried to write a XAML namespace node in an invalid scope.">尝试在无效的范围中写入 XAML 命名空间节点。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary vsli:raw="Writes a new member node into the current object scope, and the scope becomes a new member scope.">将新成员节点写入当前对象范围，并且该范围将成为新的成员范围。</summary>
      <param name="property" vsli:raw="The XAML property to write. Typically you obtain this value from a XAML reader through the XAML node stream intermediate.">要写入的 XAML 属性。 通常，您通过中间 XAML 节点流从 XAML 读取器中获取此值。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; has &lt;see cref=&quot;P:System.Xaml.XamlMember.IsUnknown&quot; /&gt; set to &lt;see langword=&quot;true&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see cref=&quot;P:System.Xaml.XamlLanguage.UnknownContent&quot; /&gt; passed, which indicates that the XAML node stream contained content for an object that does not support content.  &#xA;  &#xA; -or-  &#xA;  &#xA; Attempted to write a start member in an invalid scope.">
        <paramref name="property" /> 将 <see cref="P:System.Xaml.XamlMember.IsUnknown" /> 设置为 <see langword="true" />。  
或 
 <see cref="P:System.Xaml.XamlLanguage.UnknownContent" /> 传递，指示 XAML 节点流为不支持内容的对象包含内容。  
或 
尝试在无效的范围中写入开始成员。</exception>
      <exception cref="T:System.Xaml.XamlDuplicateMemberException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; specifies a property that is already explicitly set in the parent object scope.">
        <paramref name="property" /> 指定父对象作用域中已显式设置的属性。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="property" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary vsli:raw="Writes an object node into the current scope, and sets the scope to a new object scope.">将对象节点写入当前范围，并将该范围设置为新对象范围。</summary>
      <param name="xamlType" vsli:raw="The type to write. Typically you obtain this value from a XAML reader.">要写入的类型。 通常，您从 XAML 读取器中获取此值。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException" vsli:raw="Processing an &lt;see cref=&quot;P:System.Xaml.XamlType.IsUnknown&quot; /&gt; type and cannot create an object.  &#xA;  &#xA; -or-  &#xA;  &#xA; Attempted to write a start object in an invalid scope.">处理 <see cref="P:System.Xaml.XamlType.IsUnknown" /> 类型，且无法创建对象。  
或 
尝试在无效的范围中写入开始对象。</exception>
      <exception cref="T:System.Xaml.XamlParseException" vsli:raw="Attempted to write a root object when the root object was already provided in the settings.">尝试在根对象已经在设置中提供时写入根对象。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
      <summary vsli:raw="Writes a value to the current member scope. If the current scope is inside a collection, dictionary, or array object, the value should be added to the collection, dictionary, or array.">将值写入当前成员范围。 如果当前范围位于集合、字典或数组对象内部，则应将该值添加到集合、字典或数组中。</summary>
      <param name="value" vsli:raw="The value to write.">要写入的值。</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException" vsli:raw="Attempted to write a value in an invalid scope.">尝试在无效的范围中写入值。</exception>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterException">
      <summary vsli:raw="The exception that is thrown when a XAML writer (such as the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; class) encounters an error while attempting to produce object graphs from a XAML node stream.">当 XAML 编写器（例如 <see cref="T:System.Xaml.XamlObjectWriter" /> 类）在尝试从 XAML 节点流生成对象图的同时遇到错误时所引发的异常。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterException&quot; /&gt; class with a system-supplied message that describes the error.">使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterException&quot; /&gt; class with serialized data.">用序列化数据初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">承载序列化对象数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterException&quot; /&gt; class with a specified message that describes the error.">使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlObjectWriterException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterSettings">
      <summary vsli:raw="Provides specific XAML writer settings for &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt;.">为 <see cref="T:System.Xaml.XamlObjectWriter" /> 提供特定 XAML 编写器设置。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor(System.Xaml.XamlObjectWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriterSettings&quot; /&gt; class that is based on the copy of an existing instance.">初始化 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 类的新实例，该类基于现有实例的副本。</summary>
      <param name="settings" vsli:raw="The settings instance to copy.">要复制的设置实例。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;settings&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="settings" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AccessLevel">
      <summary vsli:raw="Gets or sets &lt;see cref=&quot;T:System.Xaml.Permissions.XamlAccessLevel&quot; /&gt; permissions that the XAML writer observes.">获取或设置 XAML 编写器遵守的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 权限。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Permissions.XamlAccessLevel&quot; /&gt; permissions.">
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 权限。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler">
      <summary vsli:raw="Gets or sets a reference to a callback that is invoked by the XAML writer at the &lt;see cref=&quot;M:System.ComponentModel.ISupportInitialize.BeginInit&quot; /&gt; phase of the object lifetime for each created object.">获取或设置对回调的引用，该回调由 XAML 编写器在每个所创建对象的对象生存期的 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> 阶段调用。</summary>
      <returns vsli:raw="A callback that is invoked by the XAML writer at the &lt;see cref=&quot;M:System.ComponentModel.ISupportInitialize.BeginInit&quot; /&gt; phase of object lifetime.">由 XAML 编写器在对象生存期的 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> 阶段调用的回调。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler">
      <summary vsli:raw="Gets or sets a reference to a callback that is invoked by the XAML writer at the &lt;see cref=&quot;M:System.ComponentModel.ISupportInitialize.EndInit&quot; /&gt; phase of the object lifetime for each created object.">获取或设置对回调的引用，该回调由 XAML 编写器在每个所创建对象的对象生存期的 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> 阶段调用。</summary>
      <returns vsli:raw="A callback that is invoked by the XAML writer at the &lt;see cref=&quot;M:System.ComponentModel.ISupportInitialize.EndInit&quot; /&gt; phase of object lifetime.">由 XAML 编写器在对象生存期的 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> 阶段调用的回调。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler">
      <summary vsli:raw="Gets or sets a reference to a callback that is invoked by the XAML writer at the post-member-write phase of the object lifetime for each created object.">获取或设置对回调的引用，该回调由 XAML 编写器在每个所创建对象的对象生存期的成员写入后阶段调用。</summary>
      <returns vsli:raw="A callback that is invoked by the XAML writer at the post-member-write phase of object lifetime.">由 XAML 编写器在对象生存期的成员写入后阶段调用的回调。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler">
      <summary vsli:raw="Gets or sets a reference to a callback that is invoked by the XAML writer at the pre-member-write phase of the object lifetime for each created object.">获取或设置对回调的引用，该回调由 XAML 编写器在每个所创建对象的对象生存期的成员写入前阶段调用。</summary>
      <returns vsli:raw="A callback that is invoked by the XAML writer at the pre-member-write phase of object lifetime.">由 XAML 编写器在对象生存期的成员写入前阶段调用的回调。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope">
      <summary vsli:raw="Gets or sets the XAML namescope to use for registering names from the XAML writer if &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;.">如果 <see cref="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope" /> 为 <see langword="true" />，从 XAML 编写器中获取或设置要用于注册名称的 XAML 名称范围。</summary>
      <returns vsli:raw="The XAML namescope to use for registering names. The default is &lt;see langword=&quot;null&quot; /&gt;.">要用于注册名称的 XAML 名称范围。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.IgnoreCanConvert">
      <summary vsli:raw="Gets or sets a value that specifies whether the XAML writer should ignore (not call) &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)&quot; /&gt; implementations on a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; in type-converter situations.">获取或设置一个值，该值指定 XAML 编写器是否应在类型转换器情形中忽略（不调用）<see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> 上的 <see cref="T:System.ComponentModel.TypeConverter" /> 实现。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the XAML writer ignores &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)&quot; /&gt; implementations; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果 XAML 编写器忽略 <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> 实现，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.PreferUnconvertedDictionaryKeys">
      <summary vsli:raw="Gets or sets a value that determines whether to disable a default &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; feature that runs type conversion on the &lt;paramref name=&quot;K&quot; /&gt; component of a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; before writing the object graph representation.">获取或设置一个值，此值确定是否在写入对象图表示形式之前，禁用对 <see cref="T:System.Xaml.XamlObjectWriter" /> 的 <paramref name="K" /> 组件运行类型转换这一默认 <see cref="T:System.Collections.Generic.Dictionary`2" /> 功能。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;K&quot; /&gt; type conversion for a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; object should be disabled. &lt;see langword=&quot;false&quot; /&gt; if performing &lt;paramref name=&quot;K&quot; /&gt; type conversion for a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; object applies. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果应禁用 <see cref="T:System.Collections.Generic.Dictionary`2" /> 对象的 <paramref name="K" /> 类型转换，则为 <see langword="true" />。 如果适合对 <see cref="T:System.Collections.Generic.Dictionary`2" /> 对象执行 <paramref name="K" /> 类型转换，则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope">
      <summary vsli:raw="Gets or sets a value that determines whether name registration should occur against the specified &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope&quot; /&gt;.">获取或设置一个值，该值确定是否应针对指定的 <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" /> 进行名称注册。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if name registration should occur against the &lt;see cref=&quot;P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if name registration should occur into the parent XAML namescope. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果应针对 <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" /> 进行名称注册，则为 <see langword="true" />；如果应在父 XAML 命名范围内进行名称注册，则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RootObjectInstance">
      <summary vsli:raw="Gets or sets a preexisting root object for &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; operations.">为 <see cref="T:System.Xaml.XamlObjectWriter" /> 操作获取或设置预先存在的根对象。</summary>
      <returns vsli:raw="A preexisting root object for &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; operations.">用于 <see cref="T:System.Xaml.XamlObjectWriter" /> 操作的预先存在的根对象。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipDuplicatePropertyCheck">
      <summary vsli:raw="Gets or sets a value that determines whether the XAML writer omits to check for the code path that checks for duplicate properties.">获取或设置一个值，该值确定 XAML 编写器是否省略检查可查看重复属性存在与否的代码路径。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the duplicate property check should be omitted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果应省略重复属性检查，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipProvideValueOnRoot">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; should omit to call &lt;see langword=&quot;ProvideValue&quot; /&gt; on a markup extension, which is relevant when the markup extension represents the root of an object graph.">获取或设置一个值，该值指示 <see cref="T:System.Xaml.XamlObjectWriter" /> 是否应省略对标记扩展调用 <see langword="ProvideValue" /> 的过程，当标记扩展表示对象图的根时，此过程有相关意义。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xaml.XamlObjectWriter&quot; /&gt; should omit to call &lt;see langword=&quot;ProvideValue&quot; /&gt; on a markup extension; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Xaml.XamlObjectWriter" /> 应省略对标记扩展调用 <see langword="true" /> 的过程，则为 <see langword="ProvideValue" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SourceBamlUri">
      <summary vsli:raw="Used in the &lt;see langword=&quot;BeginInitHandler&quot; /&gt; in place of the actual &lt;see langword=&quot;BaseUri&quot; /&gt;.">用于在 <see langword="BeginInitHandler" /> 中替代实际 <see langword="BaseUri" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Uri&quot; /&gt; to be used in place of the actual &lt;see langword=&quot;BaseUri&quot; /&gt;.">用于替代实际 <see langword="BaseUri" /> 的 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler">
      <summary vsli:raw="Gets or sets the handler to use when the object writer calls into a CLR-implemented &lt;see langword=&quot;SetValue&quot; /&gt; for dependency properties.">获取或设置要在对象编写器为依赖项属性调入 CLR 实现的 <see langword="SetValue" /> 时使用的处理程序。</summary>
      <returns vsli:raw="A handler implementation that handles this case.">一个处理此情况的处理程序实现。</returns>
    </member>
    <member name="T:System.Xaml.XamlParseException">
      <summary vsli:raw="The exception that is thrown when a XAML reader cannot process elements of the XAML reader source into a XAML node stream.">在 XAML 读取器无法将 XAML 读取器源的元素处理为 XAML 节点流时引发的异常。</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlParseException&quot; /&gt; class with a system-supplied message that describes the error.">使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.Xaml.XamlParseException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlParseException&quot; /&gt; class with serialized data.">用序列化数据初始化 <see cref="T:System.Xaml.XamlParseException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">承载序列化对象数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlParseException&quot; /&gt; class with a specified message that describes the error.">使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlParseException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlParseException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlParseException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Xaml.XamlReader">
      <summary vsli:raw="Provides base definitions for classes that consume XAML input and produce XAML node streams.">为使用 XAML 输入并生成 XAML 节点流的类提供基定义。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.#ctor">
      <summary vsli:raw="Initializes the &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlReader" /> 类。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Close">
      <summary vsli:raw="Closes the XAML node stream.">关闭 XAML 节点流。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;, and optionally, releases the managed resources.">释放由 <see cref="T:System.Xaml.XamlReader" /> 占用的非托管资源，也可以选择释放托管资源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release the managed resources; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示释放托管资源；否则为 <see langword="false" />。</param>
    </member>
    <member name="P:System.Xaml.XamlReader.IsDisposed">
      <summary vsli:raw="Gets whether &lt;see cref=&quot;M:System.Xaml.XamlReader.Dispose(System.Boolean)&quot; /&gt; has been called.">获取的值指示是否已调用了 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Xaml.XamlReader.Dispose(System.Boolean)&quot; /&gt; has been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已调用 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.IsEof">
      <summary vsli:raw="When implemented in a derived class, gets a value that reports whether the reader position is at end-of-file.">在派生类中实现时，获取一个值，该值报告读取器位置是否位于文件结尾。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the position is at the conceptual end-of-file of the XAML node stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果位置在 XAML 节点流的概念上的文件末尾，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Member">
      <summary vsli:raw="When implemented in a derived class, gets the current member at the reader position, if the reader position is on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt;.">在派生类中实现时，如果读取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，则获取位于读取器位置处的当前成员。</summary>
      <returns vsli:raw="The current member; or &lt;see langword=&quot;null&quot; /&gt;, if the reader position is not on a member.">当前成员；如果读取器位置不在成员上，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Namespace">
      <summary vsli:raw="When implemented in a derived class, gets the XAML namespace information from the current node.">在派生类中实现时，从当前节点中获取 XAML 命名空间信息。</summary>
      <returns vsli:raw="The XAML namespace information, if it is available; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果可用，则为当前节点中的 XAML 命名空间信息；否则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.NodeType">
      <summary vsli:raw="When implemented in a derived class, gets the type of the current node.">在派生类中实现时，获取当前节点的类型。</summary>
      <returns vsli:raw="A value of the &lt;see cref=&quot;T:System.Xaml.XamlNodeType&quot; /&gt; enumeration.">
        <see cref="T:System.Xaml.XamlNodeType" /> 枚举的一个值。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Read">
      <summary vsli:raw="When implemented in a derived class, provides the next XAML node from the source, if a node is available.">在派生类中实现时，提供源中的下一个 XAML 节点（如果节点可用）。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a node is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果某节点可用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.ReadSubtree">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; that is based on the current &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt;, where the returned &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; is used to iterate through a subtree of the XAML node structure.">返回基于当前 <see cref="T:System.Xaml.XamlReader" /> 的 <see cref="T:System.Xaml.XamlReader" />，其中返回的 <see cref="T:System.Xaml.XamlReader" /> 用于循环访问 XAML 节点结构。</summary>
      <returns vsli:raw="A new XAML reader instance for the subtree.">子树的新 XAML 读取器实例。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.SchemaContext">
      <summary vsli:raw="When implemented in a derived class, gets an object that provides XAML schema context information for the information set.">在派生类中实现时，获取一个对象，该对象提供信息集的 XAML 架构上下文信息。</summary>
      <returns vsli:raw="An object that provides XAML schema context information for the information set.">一个对象，该对象提供信息集的 XAML 架构上下文信息。</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Skip">
      <summary vsli:raw="Skips the current node and advances the reader position to the next node.">跳过当前节点并将读取器位置推进到下一个节点。</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the current instance of the &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; class.">释放 <see cref="T:System.Xaml.XamlReader" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="P:System.Xaml.XamlReader.Type">
      <summary vsli:raw="When implemented in a derived class, gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node.">在派生类中实现时，获取当前节点的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the current reader position is not on an object.">当前节点的 <see cref="T:System.Xaml.XamlType" />；如果当前读取器位置不在对象上，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Value">
      <summary vsli:raw="When implemented in a derived class, gets the value of the current node.">在派生类中实现时，获取当前节点的值。</summary>
      <returns vsli:raw="The value of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the current reader position is not on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.Value&quot; /&gt; node type.">当前节点的值；如果当前读取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 节点类型上，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlReaderSettings">
      <summary vsli:raw="Specifies processing rules or option settings for a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; implementation.">为 <see cref="T:System.Xaml.XamlReader" /> 实现指定处理规则或选项设置。</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlReaderSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlReaderSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor(System.Xaml.XamlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlReaderSettings&quot; /&gt; class based on values in another &lt;see cref=&quot;T:System.Xaml.XamlReaderSettings&quot; /&gt; object.">基于另一个 <see cref="T:System.Xaml.XamlReaderSettings" /> 对象中的值初始化 <see cref="T:System.Xaml.XamlReaderSettings" /> 类的新实例。</summary>
      <param name="settings" vsli:raw="An existing &lt;see cref=&quot;T:System.Xaml.XamlReaderSettings&quot; /&gt; object.">一个现有的 <see cref="T:System.Xaml.XamlReaderSettings" /> 对象。</param>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.AllowProtectedMembersOnRoot">
      <summary vsli:raw="Gets or sets a value that indicates whether the root object may include members that have a protected code access model when it reports the XAML type representation.">获取或设置一个值，该值指示根对象在报告 XAML 类型表示形式时是否可包括具有受保护代码访问模型的成员。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the root object may include members that have a protected code access model; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果根对象可包括具有受保护代码访问模型的成员，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.BaseUri">
      <summary vsli:raw="Gets or sets the base URI that is used to resolve relative paths.">获取或设置用于解析相对路径的基 URI。</summary>
      <returns vsli:raw="The base URI to use. The default is &lt;see langword=&quot;null&quot; /&gt;.">要使用的基 URI。 默认值为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.IgnoreUidsOnPropertyElements">
      <summary vsli:raw="Gets or sets a value that specifies whether the XAML reader should ignore values for &lt;see langword=&quot;x:Uid&quot; /&gt; attributes that exist on property elements.">获取或设置一个值，该值指定 XAML 读取器是否应忽略存在于属性元素上的 <see langword="x:Uid" /> 特性的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader should ignore values for &lt;see langword=&quot;x:Uid&quot; /&gt; attributes on property elements. &lt;see langword=&quot;false&quot; /&gt; if the reader should process &lt;see langword=&quot;x:Uid&quot; /&gt; attributes on property elements. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果读取器应忽略属性元素 <see langword="true" /> 特性的值，则为 <see langword="x:Uid" />。 如果读取器应处理属性元素的 <see langword="false" /> 特性，则为 <see langword="x:Uid" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.LocalAssembly">
      <summary vsli:raw="Gets or sets the object that represents the current local assembly for processing. This assembly information is used for calls to helper APIs such as &lt;see cref=&quot;M:System.Xaml.XamlType.GetAllMembers&quot; /&gt;.">获取或设置表示要处理的当前本地程序集的对象。 此程序集信息用于调用帮助器 API，例如 <see cref="M:System.Xaml.XamlType.GetAllMembers" />。</summary>
      <returns vsli:raw="A CLR reflection &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; object.">CLR 反射 <see cref="T:System.Reflection.Assembly" /> 对象。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ProvideLineInfo">
      <summary vsli:raw="Gets or sets a value that specifies whether the reader can provide line number and position.">获取或设置一个值，该值指定读取器是否可提供行号和位置。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader can provide line number and position information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果读取器可提供行号和位置信息，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ValuesMustBeString">
      <summary vsli:raw="Gets or sets a value that specifies whether the reader enforces that all &lt;see langword=&quot;Value&quot; /&gt; nodes are processed as a &lt;see langword=&quot;String&quot; /&gt; type.">获取或设置一个值，该值指定读取器是否强制将所有 <see langword="Value" /> 节点处理为 <see langword="String" /> 类型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader enforces that only &lt;see langword=&quot;String&quot; /&gt; is contained in &lt;see langword=&quot;Value&quot; /&gt; nodes; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果读取器强制在 <see langword="true" /> 节点中仅含 <see langword="String" />，则为 <see langword="Value" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaContext">
      <summary vsli:raw="Defines a reusable context for interpreting or mapping XAML types, and the types in the assemblies that underlie them.">定义一个可重用上下文，用于解释或映射 XAML 类型以及为这些类型提供支持的程序集中的类型。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; class, based on a set of reference assemblies.">基于一组引用程序集初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</summary>
      <param name="referenceAssemblies" vsli:raw="An enumerable set of assembly information items. Each assembly information item is specified by an &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; value.">一组可枚举的程序集信息项。 每个程序集信息项都由一个 <see cref="T:System.Reflection.Assembly" /> 值指定。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; class, based on a set of reference assemblies and a settings object.">基于一组引用程序集和一个设置对象初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</summary>
      <param name="referenceAssemblies" vsli:raw="An enumerable set of assembly information. Each assembly information item is specified by an &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; value.">一组可枚举的程序集信息。 每个程序集信息项都由一个 <see cref="T:System.Reflection.Assembly" /> 值指定。</param>
      <param name="settings" vsli:raw="The settings object to use to construct the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;.">用于构造 <see cref="T:System.Xaml.XamlSchemaContext" /> 的设置对象。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; class, based on a settings object.">基于一个设置对象初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</summary>
      <param name="settings" vsli:raw="The settings object to use to construct the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;.">用于构造 <see cref="T:System.Xaml.XamlSchemaContext" /> 的设置对象。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.Finalize">
      <summary vsli:raw="Provides a nonstandard &lt;see langword=&quot;Finalize&quot; /&gt; implementation that does not invoke &lt;see langword=&quot;Dispose&quot; /&gt;.">提供一个非标准 <see langword="Finalize" /> 实现，该实现不调用 <see langword="Dispose" />。</summary>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary vsli:raw="Gets a value that specifies whether a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup API.">获取一个值，该值指定 XAML 架构及其上下文是否在查找 API 返回的值中使用完全限定的程序集名称。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup APIs; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 XAML 架构及其上下文在查找 API 返回的值中使用完全限定的程序集名称，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces">
      <summary vsli:raw="Searches the assemblies that are held by this &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; and returns a set of namespaces.">搜索由此 <see cref="T:System.Xaml.XamlSchemaContext" /> 持有的程序集，并返回一组命名空间。</summary>
      <returns vsli:raw="An enumerable set of namespace identifiers. These identifiers are provided as strings.">命名空间标识符的可枚举集合。 这些标识符以字符串形式提供。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)">
      <summary vsli:raw="Searches the assemblies that are held by this &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; and returns a set of types from the specified XAML namespace.">搜索由此 <see cref="T:System.Xaml.XamlSchemaContext" /> 持有的程序集，并从指定的 XAML 命名空间中返回一组类型。</summary>
      <param name="xamlNamespace" vsli:raw="The XAML namespace to return types for.">要为其返回类型的 XAML 命名空间。</param>
      <returns vsli:raw="An enumerable set of XAML types. Each XAML type in the set is represented by a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object.">XAML 类型的可枚举集合。 集合中的每个 XAML 类型都由一个 <see cref="T:System.Xaml.XamlType" /> 对象表示。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
      <summary vsli:raw="Gets a string that is reported as the preferred prefix for consumers to use when they map the specified XAML namespace.">获取一个报告为首选前缀的字符串，供使用者在映射指定的 XAML 命名空间时使用。</summary>
      <param name="xmlns" vsli:raw="The XAML namespace to get the preferred prefix for.">要为其获取首选前缀的 XAML 命名空间。</param>
      <returns vsli:raw="A string that consumers should use when they map the specified XAML namespace for markup use.">一个字符串，使用者在为标记使用映射指定的 XAML 命名空间时应使用该字符串。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlns&quot; /&gt; is null.">
        <paramref name="xmlns" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)">
      <summary vsli:raw="Returns a value converter that can convert to the requested &lt;paramref name=&quot;targetType&quot; /&gt;.">返回一个值转换器，该转换器可将值转换为请求的 <paramref name="targetType" />。</summary>
      <param name="converterType" vsli:raw="The converter implementation.">转换器实现。</param>
      <param name="targetType" vsli:raw="The desired destination type for the converter.">转换器需要的目标类型。</param>
      <typeparam name="TConverterBase" vsli:raw="The specific converter base class.">特定转换器基类。</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with a constraint that matches the constraint that is put on the method call.">一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，具有与施加于方法调用的约束相匹配的约束。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; value that represents a directive, either for the XAML language or for a particular implementation.">返回一个 <see cref="T:System.Xaml.XamlDirective" /> 值，该值表示用于 XAML 语言或用于特定实现的指令。</summary>
      <param name="xamlNamespace" vsli:raw="The XAML namespace that contains the named directive.">其中包含命名指令的 XAML 命名空间。</param>
      <param name="name" vsli:raw="The name of the directive to obtain.">要获取的指令的名称。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlDirective&quot; /&gt; object that represents the requested directive.">一个 <see cref="T:System.Xaml.XamlDirective" /> 对象，表示请求的指令。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlNamespace&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlNamespace" /> 或 <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that is based on a XAML namespace and a string for the type name. This signature can specify the type arguments for cases where the desired type is a generic type.">基于 XAML 命名空间以及类型名称的字符串返回一个 <see cref="T:System.Xaml.XamlType" />。 此签名可以针对所需类型是泛型类型的情况指定类型参数。</summary>
      <param name="xamlNamespace" vsli:raw="The XAML namespace that contains the desired type.">包含所需类型的 XAML 命名空间。</param>
      <param name="name" vsli:raw="The string name of the desired type.">所需类型的字符串名称。</param>
      <param name="typeArguments" vsli:raw="The initialization type arguments for a generic type.">用于泛型类型的初始化类型参数。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that matches the input criteria.">与输入条件匹配的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that is based on a CLR type identifier.">返回基于 CLR 类型标识符的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="type" vsli:raw="The type to get a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for.">要为其获取 <see cref="T:System.Xaml.XamlType" /> 的类型。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that matches the input &lt;paramref name=&quot;type&quot; /&gt;.">与输入 <paramref name="type" /> 匹配的 <see cref="T:System.Xaml.XamlType" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that is based on a XAML system type name.">返回基于 XAML 系统类型名称的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="xamlTypeName" vsli:raw="The XAML type name to get a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for.">要为其获取 <see cref="T:System.Xaml.XamlType" /> 的 XAML 类型名称。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that matches the input &lt;paramref name=&quot;xamlTypeName&quot; /&gt;.">与输入 <paramref name="xamlTypeName" /> 匹配的 <see cref="T:System.Xaml.XamlType" />。</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="A component of &lt;paramref name=&quot;xamlTypeName&quot; /&gt; (&lt;see cref=&quot;P:System.Xaml.Schema.XamlTypeName.Name&quot; /&gt; or &lt;see cref=&quot;P:System.Xaml.Schema.XamlTypeName.Namespace&quot; /&gt;) is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlTypeName" /> 的组件（<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> 或 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />）为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlTypeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlTypeName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)">
      <summary vsli:raw="Called when operations use this schema context to resolve an assembly that is required in order to resolve the XAML namespaces that it contains.">在操作使用此架构上下文来解析程序集时调用，必须提供该程序集才能解析它包含的 XAML 命名空间。</summary>
      <param name="assemblyName" vsli:raw="The name of the assembly to load.">要加载的程序集的名称。</param>
      <returns vsli:raw="The resolved assembly.">解析的程序集。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.ReferenceAssemblies">
      <summary vsli:raw="Gets an enumerable set of reference assemblies for the XAML schema context.">获取 XAML 架构上下文的引用程序集的可枚举集合。</summary>
      <returns vsli:raw="An enumerable set of reference assemblies for the schema context. Each assembly information item is specified by an &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; value.">架构上下文的引用程序集的可枚举集合。 每个程序集信息项都由一个 <see cref="T:System.Reflection.Assembly" /> 值指定。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
      <summary vsli:raw="Gets a value that specifies whether a XAML schema and its context support markup extensions that have two constructors with the same arity (number of input parameters).">获取一个值，该值指定 XAML 架构及其上下文是否支持存在 arity（输入参数的数量）相同的两个构造函数的标记扩展。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the schema context permits markup extensions that have duplicate arity; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果架构上下文允许 arity 重复的标记扩展，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
      <summary vsli:raw="Returns the success or failure of a request for a compatible XAML namespace. A successful request reports that XAML namespace as an out parameter.">返回兼容 XAML 命名空间的请求的成功或失败状态。 成功的请求会将该 XAML 命名空间报告为输出参数。</summary>
      <param name="xamlNamespace" vsli:raw="The &lt;see langword=&quot;xmlns&quot; /&gt; string for the XAML namespace to be checked for a compatible result.">要检查是否存在兼容结果的 XAML 命名空间的 <see langword="xmlns" /> 字符串。</param>
      <param name="compatibleNamespace" vsli:raw="When this method returns, the &lt;see langword=&quot;xmlns&quot; /&gt; string for a compatible XAML namespace request. This might be identical to &lt;paramref name=&quot;xamlNamespace&quot; /&gt; if the method returns &lt;see langword=&quot;false&quot; /&gt;.">当此方法返回时，为兼容的 XAML 命名空间请求的 <see langword="xmlns" /> 字符串。 如果方法返回 <see langword="false" />，则这可能与 <paramref name="xamlNamespace" /> 相同。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;compatibleNamespace&quot; /&gt; contains a usable result; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="compatibleNamespace" /> 包含可用的结果，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlNamespace&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlNamespace" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Xaml.XamlSchemaContextSettings">
      <summary vsli:raw="Provides optional settings for a &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt;.">为 <see cref="T:System.Xaml.XamlSchemaContext" /> 提供可选设置。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContextSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaContextSettings&quot; /&gt; class by copying the values of an existing &lt;see cref=&quot;T:System.Xaml.XamlSchemaContextSettings&quot; /&gt; instance.">通过复制现有 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 实例的值来初始化 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 类的新实例。</summary>
      <param name="settings" vsli:raw="An existing &lt;see cref=&quot;T:System.Xaml.XamlSchemaContextSettings&quot; /&gt;.">现有 <see cref="T:System.Xaml.XamlSchemaContextSettings" />。</param>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary vsli:raw="Gets or sets a value that specifies whether a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup API.">获取或设置一个值，该值指定 XAML 架构及其上下文是否在查找 API 返回的值中使用完全限定的程序集名称。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a XAML schema and its context use fully qualified assembly names in the values that are returned by the lookup APIs; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 XAML 架构及其上下文在查找 API 返回的值中使用完全限定的程序集名称，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity">
      <summary vsli:raw="Gets or sets a value that specifies whether a XAML schema context allows for markup extensions that have two constructors with the same arity (number of input parameters).">获取或设置一个值，该值指定 XAML 架构上下文是否允许存在 arity（输入参数的数量）相同的两个构造函数的标记扩展。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the schema context allows for markup extensions that have duplicate arity; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果架构上下文允许 arity 重复的标记扩展，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaException">
      <summary vsli:raw="The exception that is thrown when a binding system or another schema representation system for XAML reports an exception to the schema context.">在绑定系统或 XAML 的其他架构表示形式系统报告架构上下文出现异常时所引发的异常。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaException&quot; /&gt; class with a system-supplied message that describes the error.">使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaException&quot; /&gt; class with serialized data.">用序列化数据初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">承载序列化对象数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaException&quot; /&gt; class with a specified message that describes the error.">使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlSchemaException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlSchemaException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Xaml.XamlServices">
      <summary vsli:raw="Provides higher-level services (static methods) for the common XAML tasks of reading XAML and writing an object graph; or reading an object graph and writing XAML file output for serialization purposes.">提供适用于常见 XAML 任务（读取 XAML 和写入对象图，或者读取对象图并为序列化目的而写入 XAML 文件输出）的更高级别服务（静态方法）。</summary>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
      <summary vsli:raw="Loads a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; source for a XAML reader and writes its output as an object graph.">加载 XAML 读取器的 <see cref="T:System.IO.Stream" /> 源，并将其输出写为对象关系图。</summary>
      <param name="stream" vsli:raw="The stream to load as input.">要作为输入加载的流。</param>
      <returns vsli:raw="The object graph that is written as output.">写为输出的对象关系图。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.TextReader)">
      <summary vsli:raw="Creates a XAML reader from a &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;, and returns an object graph.">从 <see cref="T:System.IO.TextReader" /> 创建 XAML 读取器，并返回对象关系图。</summary>
      <param name="textReader" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; to use as the basis for the created &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">要用作所创建 <see cref="T:System.IO.TextReader" /> 的基础的 <see cref="T:System.Xml.XmlReader" />。</param>
      <returns vsli:raw="The object graph that is returned.">返回的对象图。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textReader" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.String)">
      <summary vsli:raw="Loads a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; source for a XAML reader and returns an object graph.">加载 XAML 读取器的 <see cref="T:System.IO.Stream" /> 源，并返回对象关系图。</summary>
      <param name="fileName" vsli:raw="The file name to load and use as source.">要加载并用作源的文件名。</param>
      <returns vsli:raw="The object graph that is returned.">返回的对象图。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" /> 输入为 <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
      <summary vsli:raw="Loads a specific XAML reader implementation and returns an object graph.">加载特定 XAML 读取器实现，并返回对象图。</summary>
      <param name="xamlReader" vsli:raw="The XAML reader implementation to use as the reader for this &lt;see langword=&quot;Load&quot; /&gt; operation.">要用作此 <see langword="Load" /> 操作的读取器的 XAML 读取器实现。</param>
      <returns vsli:raw="The object graph that is returned.">返回的对象图。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlReader&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlReader" /> 输入为 <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)">
      <summary vsli:raw="Loads a specific XML reader implementation and returns an object graph.">加载特定 XML 读取器实现，并返回对象图。</summary>
      <param name="xmlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implementation to use as the reader for this &lt;see langword=&quot;Load&quot; /&gt; operation.">要用作此 <see langword="Load" /> 操作的读取器的 <see cref="T:System.Xml.XmlReader" /> 实现。</param>
      <returns vsli:raw="The output object graph.">输出对象关系图。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlReader&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlReader" /> 输入为 <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Parse(System.String)">
      <summary vsli:raw="Reads XAML as string output and returns an object graph.">以字符串输出形式读取 XAML，并返回对象图。</summary>
      <param name="xaml" vsli:raw="The XAML string input to parse.">要分析的 XAML 字符串输入。</param>
      <returns vsli:raw="The object graph that is returned.">返回的对象图。</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xaml&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xaml" /> 输入为 <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
      <summary vsli:raw="Processes a provided object graph into a XAML node representation and then into an output stream for serialization.">将提供的对象图处理为 XAML 节点表示形式，然后再处理为输出流以便进行序列化。</summary>
      <param name="stream" vsli:raw="The destination stream.">目标流。</param>
      <param name="instance" vsli:raw="The root of the object graph to process.">要处理的对象关系图的根。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 输入为 <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)">
      <summary vsli:raw="Processes a provided object graph into a XAML node representation and then into an output that goes to the provided &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">将提供的对象图处理为 XAML 节点表示形式，然后处理为将进入所提供 <see cref="T:System.IO.TextWriter" /> 的输出。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; that writes the output.">写入输出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="instance" vsli:raw="The root of the object graph to process.">要处理的对象关系图的根。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 输入为 <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Object)">
      <summary vsli:raw="Processes a provided object tree into a XAML node representation, and returns a string representation of the output XAML.">将提供的对象树处理为 XAML 节点表示形式，并返回输出 XAML 的字符串表示形式。</summary>
      <param name="instance" vsli:raw="The root of the object graph to process.">要处理的对象关系图的根。</param>
      <returns vsli:raw="The XAML markup output as a string.">字符串形式的 XAML 标记输出。</returns>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.String,System.Object)">
      <summary vsli:raw="Processes a provided object graph into a XAML node representation and then writes it to an output file at a provided location.">将提供的对象图处理为 XAML 节点表示形式，然后将其写入所提供位置的输出文件。</summary>
      <param name="fileName" vsli:raw="The name and location of the file to write the output to.">要将输出写入其中的文件的名称和位置。</param>
      <param name="instance" vsli:raw="The root of the object graph to process.">要处理的对象关系图的根。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is an empty string.">
        <paramref name="fileName" /> 是一个空字符串。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
      <summary vsli:raw="Processes a provided object graph into a XAML node representation and then writes it to the provided XAML writer.">将提供的对象图处理为 XAML 节点表示形式，然后将其写入提供的 XAML 编写器。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; implementation to use.">要使用的 <see cref="T:System.Xaml.XamlWriter" /> 实现。</param>
      <param name="instance" vsli:raw="The root of the object graph to process.">要处理的对象关系图的根。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 输入为 <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)">
      <summary vsli:raw="Processes a provided object graph into a XAML node representation and then writes it to the provided &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">将提供的对象图处理为 XAML 节点表示形式，然后将其写入提供的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; implementation to use.">要使用的 <see cref="T:System.Xml.XmlWriter" /> 实现。</param>
      <param name="instance" vsli:raw="The root of the object graph to process.">要处理的对象关系图的根。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;writer&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 输入为 <see langword="null" />.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
      <summary vsli:raw="Connects a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; to use a common XAML node set intermediary. Potentially transforms the content, depending on the types of readers and writers that are provided.">连接 <see cref="T:System.Xaml.XamlReader" /> 和 <see cref="T:System.Xaml.XamlWriter" /> 以立即使用公共 XAML 节点集。 可能会转换内容，具体情况视所提供的读取器和编写器的类型而定。</summary>
      <param name="xamlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; implementation to use.">要使用的 <see cref="T:System.Xaml.XamlReader" /> 实现。</param>
      <param name="xamlWriter" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; to use.">要使用的 <see cref="T:System.Xaml.XamlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlReader&quot; /&gt; or &lt;paramref name=&quot;xamlWriter&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlReader" /> 或 <paramref name="xamlWriter" /> 输入为 <see langword="null" />。</exception>
      <exception cref="T:System.Xaml.XamlException" vsli:raw="The XAML schema context does not match between the provided &lt;paramref name=&quot;xamlReader&quot; /&gt; and &lt;paramref name=&quot;xamlWriter&quot; /&gt;.">XAML 架构上下文在提供的 <paramref name="xamlReader" /> 和 <paramref name="xamlWriter" /> 之间不匹配。</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
      <summary vsli:raw="Connects a &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; and a &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; to use a common XAML node set intermediary. Potentially transforms the content, depending on the types of readers and writers that are provided. Provides a parameter for specifying whether to close the writer after the call is completed.">连接 <see cref="T:System.Xaml.XamlReader" /> 和 <see cref="T:System.Xaml.XamlWriter" /> 以立即使用公共 XAML 节点集。 可能会转换内容，具体情况视所提供的读取器和编写器的类型而定。 提供一个参数，指定是否在调用完成之后关闭编写器。</summary>
      <param name="xamlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlReader&quot; /&gt; implementation to use.">要使用的 <see cref="T:System.Xaml.XamlReader" /> 实现。</param>
      <param name="xamlWriter" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; to use.">要使用的 <see cref="T:System.Xaml.XamlWriter" />。</param>
      <param name="closeWriter" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to close the writer after the call is complete; &lt;see langword=&quot;false&quot; /&gt; to leave the writer active at the last written position.">设置为 <see langword="true" /> 以在调用完成之后关闭编写器；设置为 <see langword="false" /> 以使编写器在最后一个写入的位置保持活动状态。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xamlReader&quot; /&gt; or &lt;paramref name=&quot;xamlWriter&quot; /&gt; input is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xamlReader" /> 或 <paramref name="xamlWriter" /> 输入为 <see langword="null" />。</exception>
      <exception cref="T:System.Xaml.XamlException" vsli:raw="The XAML schema context does not match between the provided &lt;paramref name=&quot;xamlReader&quot; /&gt; and &lt;paramref name=&quot;xamlWriter&quot; /&gt;.">XAML 架构上下文在提供的 <paramref name="xamlReader" /> 和 <paramref name="xamlWriter" /> 之间不匹配。</exception>
    </member>
    <member name="T:System.Xaml.XamlType">
      <summary vsli:raw="Reports information about XAML types as part of the overall XAML system that is implemented in .NET XAML Services.">报告作为整体 XAML 系统（在 .NET Framework XAML 服务中实现）的一部分的 XAML 类型相关信息。</summary>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; class based on a string name for the type.">基于类型的字符串名称初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。</summary>
      <param name="typeName" vsli:raw="The name of the type to create.">要创建的类型的名称。</param>
      <param name="typeArguments" vsli:raw="The type arguments for a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that represents a generic type. Can be (and often is) &lt;see langword=&quot;null&quot; /&gt;, which indicates that the represented type is not a generic type.">用于表示泛型类型的 <see cref="T:System.Xaml.XamlType" /> 的类型参数。 可能为（并且通常为） <see langword="null" />，指示表示的类型不是泛型类型。</param>
      <param name="schemaContext" vsli:raw="XAML schema context for XAML readers and XAML writers.">XAML 读取器和 XAML 编写器的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of &lt;paramref name=&quot;typeName&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">一个或多个 <paramref name="typeName" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; class based on the XAML namespace and a string name for the type. This constructor is exclusively for analysis and XAML-node recording of type usages that are known to not have backing in the supporting type system and XAML schema context.">基于 XAML 命名空间和类型的字符串名称初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。 此构造函数专用于已知在支持类型系统和 XAML 架构上下文中，没有支持的类型用法的分析和 XAML 节点记录。</summary>
      <param name="unknownTypeNamespace" vsli:raw="The XAML namespace for the type, as a string.">类型的 XAML 命名空间（字符串形式）。</param>
      <param name="unknownTypeName" vsli:raw="The name of the type in the provided &lt;paramref name=&quot;unknownTypeNamespace&quot; /&gt; XAML namespace.">提供的 <paramref name="unknownTypeNamespace" /> XAML 命名空间中类型的名称。</param>
      <param name="typeArguments" vsli:raw="The type arguments for a &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; that represents a generic type. Can be (and often is) &lt;see langword=&quot;null&quot; /&gt;, which indicates that the represented type is not a generic type.">用于表示泛型类型的 <see cref="T:System.Xaml.XamlType" /> 的类型参数。 可能为（并且通常为） <see langword="null" />，指示表示的类型不是泛型类型。</param>
      <param name="schemaContext" vsli:raw="XAML schema context for XAML readers or XAML writers.">XAML 读取器或 XAML 编写器的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of &lt;paramref name=&quot;unknownTypeNamespace&quot; /&gt;, &lt;paramref name=&quot;unknownTypeName&quot; /&gt;, or &lt;paramref name=&quot;schemaContext&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">一个或多个 <paramref name="unknownTypeNamespace" />、<paramref name="unknownTypeName" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; class based on the underlying CLR type information.">基于基础 CLR 类型信息初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。</summary>
      <param name="underlyingType" vsli:raw="The underlying CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; for the XAML type to construct.">要构造的 XAML 类型的基础 CLR <see cref="T:System.Type" />。</param>
      <param name="schemaContext" vsli:raw="XAML schema context for XAML readers or XAML writers.">XAML 读取器或 XAML 编写器的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of &lt;paramref name=&quot;underlyingType&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">一个或多个 <paramref name="underlyingType" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; class based on underlying type information and a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; implementation.">基于基础类型信息和 <see cref="T:System.Xaml.XamlType" /> 实现初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 类的新实例。</summary>
      <param name="underlyingType" vsli:raw="The underlying type for the XAML type to construct.">要构造的 XAML 类型的基础类型。</param>
      <param name="schemaContext" vsli:raw="XAML schema context for the XAML reader.">XAML 读取器的 XAML 架构上下文。</param>
      <param name="invoker" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; implementation that handles run-time reflection calls against the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">可针对 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 处理运行时反射调用的 <see cref="T:System.Xaml.XamlType" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of &lt;paramref name=&quot;underlyingType&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">一个或多个 <paramref name="underlyingType" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlType.AllowedContentTypes">
      <summary vsli:raw="Gets a read-only collection of the types that are usable as the &lt;see cref=&quot;P:System.Xaml.XamlType.ContentProperty&quot; /&gt; value for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">获取类型的只读集合，这些类型可用作此 <see cref="P:System.Xaml.XamlType.ContentProperty" /> 的 <see cref="T:System.Xaml.XamlType" /> 值。</summary>
      <returns vsli:raw="A read-only collection of possible content types.">可能的内容类型的只读集合。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.BaseType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the immediate base type of this XAML type. Determination of this value is based on the underlying type of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; and schema context.">获取此 XAML 类型的直接基类型的 <see cref="T:System.Xaml.XamlType" />。 将基于此 <see cref="T:System.Xaml.XamlType" /> 的基础类型和架构上下文来确定此值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the immediate base type of this XAML type.">此 XAML 类型的直接基类型的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
      <summary vsli:raw="Returns a value that indicates whether an instance of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; has the specified &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; in its list of assignable types.">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 的实例在其可分配类型的列表中是否有指定的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="xamlType" vsli:raw="The type to check against the current &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; .">要针对当前的 <see cref="T:System.Xaml.XamlType" /> 检查的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;xamlType&quot; /&gt; is in the assignable types list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="xamlType" /> 在可分配的类型列表中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ConstructionRequiresArguments">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; must have arguments (generic constraints through &lt;see langword=&quot;x:TypeArguments&quot; /&gt;, initialization text, or other XAML techniques) to construct a valid instance of the type.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否必须具有参数（通过 <see langword="x:TypeArguments" /> 实现的泛型约束、初始化文本或其他 XAML 技术）才能构造有效的类型实例。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if construction of an instance requires some argument value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果需要某个参数值才能构造实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentProperty">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the content property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">获取此 <see cref="T:System.Xaml.XamlMember" /> 的内容属性的 <see cref="T:System.Xaml.XamlType" /> 信息。</summary>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the content property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;. May be &lt;see langword=&quot;null&quot; /&gt; if no content property exists.">此 <see cref="T:System.Xaml.XamlMember" /> 的内容属性的 <see cref="T:System.Xaml.XamlType" /> 信息。 如果不存在内容属性，则可能为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentWrappers">
      <summary vsli:raw="Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed &lt;see langword=&quot;Collection&amp;lt;T&amp;gt;&quot; /&gt;.">获取用于在内容属性不是严格类型匹配时包装其内容的类型，例如强类型 <see langword="Collection&lt;T&gt;" /> 中的字符串。</summary>
      <returns vsli:raw="A read-only collection of possible content wrapper types; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">可能的内容包装类型的只读集合；否则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.DeferringLoader">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; that represents the deferred loading conversion behavior for this type.">获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，它表示此类型的延迟加载转换行为。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Xaml.XamlDeferringLoader&quot; /&gt; constraint that represents the deferred loading behavior for this type.">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Xaml.XamlDeferringLoader" />，表示此类型的延迟加载行为。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the current object is equal to another object.">指示当前对象是否等于另一个对象。</summary>
      <param name="obj" vsli:raw="The object to compare with this object.">要与此对象进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is equal to the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前对象等于 <paramref name="obj" /> 参数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
      <summary vsli:raw="Indicates whether the current object is equal to another object of the same type.">指示当前对象是否等于同一类型的另一个对象。</summary>
      <param name="other" vsli:raw="An object to compare with this object.">与此对象进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is equal to the &lt;paramref name=&quot;other&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前对象等于 <paramref name="other" /> 参数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
      <summary vsli:raw="Returns the XAML member that is aliased to a XAML directive by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">返回由此 <see cref="T:System.Xaml.XamlType" /> 将其别名设置为 XAML 指令的 XAML 成员。</summary>
      <param name="directive" vsli:raw="The directive for which to find the aliased member.">要为其查找别名成员的指令。</param>
      <returns vsli:raw="The aliased member, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果可找到，则为别名成员，否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllAttachableMembers">
      <summary vsli:raw="Returns a collection that contains all the attachable properties that are exposed by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">返回一个集合，该集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公开的所有可附加的属性。</summary>
      <returns vsli:raw="A collection that contains zero or more &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; values.">一个包含零个或多个 <see cref="T:System.Xaml.XamlMember" /> 值的集合。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllMembers">
      <summary vsli:raw="Returns a collection that contains all the members that are exposed by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">返回一个集合，该集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公开的所有成员。</summary>
      <returns vsli:raw="A collection that contains zero or more &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; values.">一个包含零个或多个 <see cref="T:System.Xaml.XamlMember" /> 值的集合。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; representing a specific named attachable member of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">返回一个 <see cref="T:System.Xaml.XamlMember" />，表示此 <see cref="T:System.Xaml.XamlType" /> 的一个命名的特定可附加成员。</summary>
      <param name="name" vsli:raw="The name of the attachable member to get, in &lt;c&gt;ownerTypeName.MemberName&lt;/c&gt; form.">要获取的可附加成员的名称，形式为 <c>ownerTypeName.MemberName</c>。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; object for the requested attachable member; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if no attachable member by that name exists.">请求的可附加成员的 <see cref="T:System.Xaml.XamlMember" /> 对象；如果不存在该名称的可附加成员，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">返回该对象的哈希代码。</summary>
      <returns vsli:raw="An integer hash code.">整数哈希代码。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetMember(System.String)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; for a specific named member from this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">从此 <see cref="T:System.Xaml.XamlMember" /> 中返回特定命名成员的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="name" vsli:raw="The name of the member to get (as a string).">要获取的成员的名称（字符串形式）。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the member, if such a member was found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果已找到此类成员，则为成员的 <see cref="T:System.Xaml.XamlMember" /> 信息；否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
      <summary vsli:raw="For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">对于标记扩展类型，返回此 <see cref="T:System.Xaml.XamlType" /> 的特定标记扩展用法中所支持位置参数的类型。</summary>
      <param name="parameterCount" vsli:raw="The count (arity) of the particular syntax or constructor mode that you want information about.">您需要其相关信息的特定语法或构造函数模式的计数 (arity)。</param>
      <returns vsli:raw="A list of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; values, where each &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is the type for that position in the syntax. You must specify the types in the same order when you supply markup input for the markup extension.">
        <see cref="T:System.Xaml.XamlType" /> 值的列表，其中每个 <see cref="T:System.Xaml.XamlType" /> 都是该位置在语法中的类型。 您必须按照为标记扩展提供标记输入时的相同顺序指定类型。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetXamlNamespaces">
      <summary vsli:raw="Returns a list of string identifiers for XAML namespaces that the type is included in.">为包括了类型的 XAML 命名空间返回字符串标识符的列表。</summary>
      <returns vsli:raw="A list of string values, where each string is the URI identifier for a XAML namespace.">字符串值的列表，其中的每个字符串都是 XAML 命名空间的 URI 标识符。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Invoker">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">获取与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 关联的 <see cref="T:System.Xaml.XamlType" /> 实现。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; implementation that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 关联的 <see cref="T:System.Xaml.XamlType" /> 实现。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsAmbient">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an ambient type, as per the XAML definition.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示环境类型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an ambient type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示环境类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsArray">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an array.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示数组。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an array; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示数组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsCollection">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a collection.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示集合。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示集合，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsConstructible">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a constructible type, as per the XAML definition.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示可构造类型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a constructible type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示可构造类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsDictionary">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a dictionary, as per the XAML definition.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示字典。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a dictionary; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示字典，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsGeneric">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a generic type.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示泛型类型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示泛型类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsMarkupExtension">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a markup extension.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示标记扩展。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a markup extension; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示标记扩展，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameScope">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a XAML namescope, as per the XAML definition.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示 XAML 名称范围。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a XAML namescope; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示 XAML 名称范围，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameValid">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is initialized by using a valid &lt;see langword=&quot;xamlName&quot; /&gt; string as its &lt;see cref=&quot;P:System.Xaml.XamlType.Name&quot; /&gt;.">获取一个值，该值指示是否使用有效的 <see langword="xamlName" /> 字符串作为其 <see cref="T:System.Xaml.XamlType" /> 来初始化此 <see cref="P:System.Xaml.XamlType.Name" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is initialized by using a valid &lt;see langword=&quot;xamlName&quot; /&gt; string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果使用有效的 <see langword="true" /> 字符串来初始化此 <see cref="T:System.Xaml.XamlType" />，则为 <see langword="xamlName" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNullable">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a nullable type, as per the XAML definition.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示可以为 null 的类型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a nullable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示可以为 null 的类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsPublic">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a public type in the relevant type system.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示相关类型系统中的公共类型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a public type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示公共类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUnknown">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a type that cannot be resolved in the underlying type system.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示无法在基础类型系统中解析的类型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an unresolvable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示不可解析的类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUsableDuringInitialization">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is built top-down during XAML initialization.">获取一个值，该值指示在 XAML 初始化过程中是否自上而下生成此 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is built top-down during XAML initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果在 XAML 初始化过程中自上而下生成此 <see cref="T:System.Xaml.XamlType" />，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a whitespace significant collection, as per the XML definition.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XML 定义是否表示空白有意义集合。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a whitespace significant collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示空白有意义集合，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsXData">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents XML &lt;see langword=&quot;XDATA&quot; /&gt;, as per the XAML definition.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示 XML <see langword="XDATA" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents &lt;see langword=&quot;XDATA&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示 <see langword="true" />，则为 <see langword="XDATA" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ItemType">
      <summary vsli:raw="Gets a value that provides the type information for the &lt;see langword=&quot;Items&quot; /&gt; property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">获取一个值，该值为此 <see cref="T:System.Xaml.XamlType" /> 的 <see langword="Items" /> 属性提供类型信息。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the type of the items in the collection; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a collection.">集合中项的类型的 <see cref="T:System.Xaml.XamlType" /> 对象；如果此 <see cref="T:System.Xaml.XamlType" /> 不表示集合，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.KeyType">
      <summary vsli:raw="Gets a value that provides the type information for the key property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, if the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a dictionary.">如果 <see cref="T:System.Xaml.XamlType" /> 表示字典，则获取一个值，该值为此 <see cref="T:System.Xaml.XamlType" /> 的键属性提供类型信息。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the type of the key for dictionary usage, otherwise, &lt;see langword=&quot;null&quot; /&gt;, if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a dictionary.">字典用法键的类型的 <see cref="T:System.Xaml.XamlType" /> 对象；否则，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示字典，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
      <summary vsli:raw="Returns the XAML member that is aliased to a XAML directive by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">返回由此 <see cref="T:System.Xaml.XamlType" /> 将其别名设置为 XAML 指令的 XAML 成员。</summary>
      <param name="directive" vsli:raw="The directive for which to find the aliased member.">要为其查找别名成员的指令。</param>
      <returns vsli:raw="The aliased member, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果可找到，则为别名成员，否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllAttachableMembers">
      <summary vsli:raw="Returns an enumerable set that contains all attachable properties that are exposed by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">返回一个可枚举集合，该集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公开的所有可附加的属性。</summary>
      <returns vsli:raw="An enumerable set that contains zero or more &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; values; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">包含零个或多个 <see cref="T:System.Xaml.XamlMember" /> 值的可枚举集合；否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllMembers">
      <summary vsli:raw="Returns an enumerable set that contains all the members that are exposed by this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">返回一个可枚举集合，该集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公开的所有成员。</summary>
      <returns vsli:raw="An enumerable set that contains zero or more &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; values.">包含零个或多个 <see cref="T:System.Xaml.XamlMember" /> 值的可枚举集合。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllowedContentTypes">
      <summary vsli:raw="Returns a list of the types that are usable as the &lt;see cref=&quot;P:System.Xaml.XamlType.ContentProperty&quot; /&gt; value for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">返回类型的列表，这些类型可用作此 <see cref="P:System.Xaml.XamlType.ContentProperty" /> 的 <see cref="T:System.Xaml.XamlType" /> 值。</summary>
      <returns vsli:raw="A list of possible content types.">可能的内容类型的列表。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; for a specific named attachable from this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">为 <see cref="T:System.Xaml.XamlType" /> 中特定的已命名可附加成员返回 <see cref="T:System.Xaml.XamlMember" />。</summary>
      <param name="name" vsli:raw="The name of the attachable member to get, in &lt;c&gt;ownerTypeName.MemberName&lt;/c&gt; form.">要获取的可附加成员的名称，形式为 <c>ownerTypeName.MemberName</c>。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; object for the requested attachable member; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if no attachable member by that name exists.">请求的可附加成员的 <see cref="T:System.Xaml.XamlMember" /> 对象；如果不存在该名称的可附加成员，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupBaseType">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the immediate base type of this XAML type. Determination of this value is based on the underlying type of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; and schema context.">返回此 XAML 类型的直接基类型的 <see cref="T:System.Xaml.XamlType" />。 将基于此 <see cref="T:System.Xaml.XamlType" /> 的基础类型和架构上下文来确定此值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; for the immediate base type of this XAML type.">此 XAML 类型的直接基类型的 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCollectionKind">
      <summary vsli:raw="Returns a value of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlCollectionKind&quot; /&gt; enumeration that declares which specific collection type this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; uses.">返回 <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 枚举的一个值，该枚举声明此 <see cref="T:System.Xaml.XamlType" /> 使用哪种特定集合类型。</summary>
      <returns vsli:raw="A value of the &lt;see cref=&quot;T:System.Xaml.Schema.XamlCollectionKind&quot; /&gt; enumeration.">
        <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 枚举的一个值。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; must have arguments (generic constraints through &lt;see langword=&quot;x:TypeArguments&quot; /&gt;, initialization text, or other XAML techniques) to construct a valid instance of the type.">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否必须具有参数（通过 <see langword="x:TypeArguments" /> 实现的泛型约束、初始化文本或其他 XAML 技术）才能构造有效的类型实例。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if construction of an instance requires some argument value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果需要某个参数值才能构造实例，则为 <see langword="true" />；否则为 false。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentProperty">
      <summary vsli:raw="Returns &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the content property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">返回此 <see cref="T:System.Xaml.XamlMember" /> 的内容属性的 <see cref="T:System.Xaml.XamlType" /> 信息。</summary>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the content property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;. May be &lt;see langword=&quot;null&quot; /&gt;.">此 <see cref="T:System.Xaml.XamlMember" /> 的内容属性的 <see cref="T:System.Xaml.XamlType" /> 信息。 可为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentWrappers">
      <summary vsli:raw="Gets a list of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; values that represent the content wrappers for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">获取 <see cref="T:System.Xaml.XamlType" /> 值的列表，这些值表示此 <see cref="T:System.Xaml.XamlType" /> 的内容包装。</summary>
      <returns vsli:raw="A list of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; values that represent the content wrappers for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 值的列表，这些值表示此 <see cref="T:System.Xaml.XamlType" /> 的内容包装。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
      <summary vsli:raw="When implemented in a derived class, returns an &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; implementation.">在派生类中实现时，返回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.ICustomAttributeProvider&quot; /&gt; implementation.">
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupDeferringLoader">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; object, which is used for deferred loading of XAML-declared objects.">返回一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象用于 XAML 声明的对象的延迟加载。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; that has a &lt;see cref=&quot;T:System.Xaml.XamlDeferringLoader&quot; /&gt; constraint on the generic.">对泛型具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Xaml.XamlDeferringLoader" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupInvoker">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; that is associated with this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">返回与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 关联的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.Schema.XamlTypeInvoker&quot; /&gt; information for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="T:System.Xaml.XamlType" /> 信息；否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsAmbient">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an ambient type, as per the XAML definition.">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示环境类型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents an ambient type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示环境类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsConstructible">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a constructible type, as per the XAML definition.">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示可构造类型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a constructible type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示可构造类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsMarkupExtension">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a markup extension.">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示标记扩展。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a markup extension; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示标记扩展，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNameScope">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a XAML namescope, as per the XAML definition.">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示 XAML 名称范围。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a XAML namescope; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示 XAML 名称范围，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNullable">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a nullable type, as per the XAML definition.">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示可以为 null 的类型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a nullable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示可以为 null 的类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsPublic">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a public type in the relevant type system.">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示相关类型系统中的公共类型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a public type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示公共类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsUnknown">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a type that cannot be resolved in the underlying type system.">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示无法在基础类型系统中解析的类型。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a nonresolvable type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示不可解析的类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a whitespace significant collection, as per the XML definition.">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XML 定义是否表示空白有意义集合。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a white-space significant collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示空白有意义集合，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsXData">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents XML &lt;see langword=&quot;XDATA&quot; /&gt;, as per the XAML definition.">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示 XML <see langword="XDATA" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents &lt;see langword=&quot;XDATA&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示 <see langword="true" />，则为 <see langword="XDATA" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupItemType">
      <summary vsli:raw="Returns a value that provides the type information for the &lt;see langword=&quot;Items&quot; /&gt; property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">返回一个值，该值为此 <see cref="T:System.Xaml.XamlType" /> 的 <see langword="Items" /> 属性提供类型信息。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the type of the items in the collection; otherwise, &lt;see langword=&quot;null&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a collection.">集合中项的类型的 <see cref="T:System.Xaml.XamlType" /> 对象；如果此 <see cref="T:System.Xaml.XamlType" /> 不表示集合，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupKeyType">
      <summary vsli:raw="Returns a value that provides the type information for the key property of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, if the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a dictionary.">如果 <see cref="T:System.Xaml.XamlType" /> 表示字典，则返回一个值，该值为此 <see cref="T:System.Xaml.XamlType" /> 的键属性提供类型信息。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the type of the key for dictionary usage, or &lt;see langword=&quot;null&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a dictionary.">字典用法的键类型的 <see cref="T:System.Xaml.XamlType" /> 对象，或者，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示字典，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
      <summary vsli:raw="Returns a value that provides the type information for the returned &lt;see langword=&quot;ProvideValue&quot; /&gt; of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, if it represents a markup extension.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示标记扩展，则返回一个为其已返回的 <see langword="ProvideValue" /> 提供类型信息的值。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the return type for markup extension usage; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a markup extension.">标记扩展用法的返回类型的 <see cref="T:System.Xaml.XamlType" /> 对象；否则，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示标记扩展，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; for a specific named member from this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">从此 <see cref="T:System.Xaml.XamlMember" /> 中返回特定命名成员的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <param name="name" vsli:raw="The name of the member to get (as a string).">要获取的成员的名称（字符串形式）。</param>
      <param name="skipReadOnlyCheck" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return a member even if that member has a &lt;see langword=&quot;true&quot; /&gt; value for &lt;see cref=&quot;P:System.Xaml.XamlMember.IsReadOnly&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; to not return a &lt;see cref=&quot;P:System.Xaml.XamlMember.IsReadOnly&quot; /&gt; member. The default is &lt;see langword=&quot;false&quot; /&gt;.">设置为 <see langword="true" /> 以返回成员，即使该成员的 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 值为 <see langword="true" />；设置为 <see langword="false" /> 以返回 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 成员。 默认值为 <see langword="false" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt; information for the member, if a member was found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果已找到成员，则为成员的 <see cref="T:System.Xaml.XamlMember" /> 信息；否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
      <summary vsli:raw="For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">对于标记扩展类型，返回此 <see cref="T:System.Xaml.XamlType" /> 的特定标记扩展用法中所支持位置参数的类型。</summary>
      <param name="parameterCount" vsli:raw="The count (arity) of the particular syntax or constructor mode that you want information about.">您需要其相关信息的特定语法或构造函数模式的计数 (arity)。</param>
      <returns vsli:raw="A list of &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; values where each such &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is the type for that position in the syntax. You must specify those types in the same order when supplying markup input for the markup extension.">
        <see cref="T:System.Xaml.XamlType" /> 值的列表，其中每个此类 <see cref="T:System.Xaml.XamlType" /> 都是该位置在语法中的类型。 您必须按照为标记扩展提供标记输入时的相同顺序指定这些类型。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
      <summary vsli:raw="Returns a handler callback to use for the set operations of markup extensions.">返回一个用于标记扩展的 set 操作的处理程序回调。</summary>
      <returns vsli:raw="A handler callback to use for the set operations of markup extensions.">用于标记扩展的 set 操作的处理程序回调。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
      <summary vsli:raw="Returns a handler to use for type converter setting cases.">返回一个用于类型转换器设置情况的处理程序。</summary>
      <returns vsli:raw="A handler to use for type converter setting cases.">一个用于类型转换器设置情况的处理程序。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; should be serialized using a mode that  trims surrounding whitespace.">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否应使用修整周围空白的模式进行序列化。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; should be serialized in a mode that trims surrounding whitespace; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 应使用修整周围空白的模式进行序列化，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTypeConverter">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; that has a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint, which represents type-conversion behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">返回具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.ComponentModel.TypeConverter" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的类型转换行为。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint that represents type-conversion behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.ComponentModel.TypeConverter" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的类型转换行为；否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUnderlyingType">
      <summary vsli:raw="Returns the CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; that underlies this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">返回为此 <see cref="T:System.Type" /> 提供支持的 CLR <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; that underlies this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">为此 <see cref="T:System.Type" /> 提供支持的 CLR <see cref="T:System.Xaml.XamlType" />；否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is built top-down during XAML initialization.">返回一个值，该值指示在 XAML 初始化过程中是否自上而下生成此 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; is built top-down during XAML initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在 XAML 初始化过程中自上而下生成此 <see cref="T:System.Xaml.XamlType" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupValueSerializer">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; that has a &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint, which represents value serialization behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">返回具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Windows.Markup.ValueSerializer" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的值序列化行为。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint that represents value serialization behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Windows.Markup.ValueSerializer" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的值序列化行为；否则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.MarkupExtensionReturnType">
      <summary vsli:raw="Gets a value that provides the type information for the returned &lt;see langword=&quot;ProvideValue&quot; /&gt; of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;, if it represents a markup extension.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示标记扩展，则获取一个为其已返回的 <see langword="ProvideValue" /> 提供类型信息的值。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; object for the return type for markup extension usage; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a markup extension.">标记扩展用法的返回类型的 <see cref="T:System.Xaml.XamlType" /> 对象；否则，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示标记扩展，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Name">
      <summary vsli:raw="Gets the string name of the type that this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents.">获取此 <see cref="T:System.Xaml.XamlType" /> 表示的类型的字符串名称。</summary>
      <returns vsli:raw="The string name of this XAML type.">此 XAML 类型的字符串名称。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; objects have the same value.">确定两个指定的 <see cref="T:System.Xaml.XamlType" /> 对象是否具有相同的值。</summary>
      <param name="xamlType1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</param>
      <param name="xamlType2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;xamlType1&quot; /&gt; is the same as the value of &lt;paramref name=&quot;xamlType2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的值与 <paramref name="xamlType1" /> 的值相同，则为 <paramref name="xamlType2" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; objects have different values.">确定两个指定的 <see cref="T:System.Xaml.XamlType" /> 对象是否具有不同的值。</summary>
      <param name="xamlType1" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</param>
      <param name="xamlType2" vsli:raw="A &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;xamlType1&quot; /&gt; is different from the value of &lt;paramref name=&quot;xamlType2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="xamlType1" /> 的值与 <paramref name="xamlType2" /> 的值不同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.PreferredXamlNamespace">
      <summary vsli:raw="Gets the single XAML namespace that is the primary XAML namespace for this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">获取单个 XAML 命名空间，该命名空间是此 <see cref="T:System.Xaml.XamlType" /> 的主 XAML 命名空间。</summary>
      <returns vsli:raw="The identifier, as a string, of the primary XAML namespace for this XAML type.">此 XAML 类型的主 XAML 命名空间的标识符（字符串形式）。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.SchemaContext">
      <summary vsli:raw="Gets the active &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; for processing this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">获取用于处理此 <see cref="T:System.Xaml.XamlSchemaContext" /> 的活动 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The active &lt;see cref=&quot;T:System.Xaml.XamlSchemaContext&quot; /&gt; for processing this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">用于处理此 <see cref="T:System.Xaml.XamlSchemaContext" /> 的活动 <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlType.ToString">
      <summary vsli:raw="Returns a string representation of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">返回此 <see cref="T:System.Xaml.XamlType" /> 的字符串表示形式。</summary>
      <returns vsli:raw="A string representation of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">此 <see cref="T:System.Xaml.XamlType" /> 的字符串表示形式。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; has whitespace handling behavior for serialization that trims the surrounding whitespace in its content.">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否具有用于在其内容中修整周围空白的序列化空白处理行为。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a type that uses whitespace trimming; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Xaml.XamlType" /> 表示使用空白修整的类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeArguments">
      <summary vsli:raw="Gets a list of type arguments for cases where this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; represents a generic.">针对此 <see cref="T:System.Xaml.XamlType" /> 表示泛型的情况获取类型参数的列表。</summary>
      <returns vsli:raw="A list of type argument types; otherwise, &lt;see langword=&quot;null&quot; /&gt;, if this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; does not represent a generic.">类型参数类型的列表；否则，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示泛型，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeConverter">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint that represents type conversion behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">获取一个具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.ComponentModel.TypeConverter" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的类型转换行为。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; constraint that represents type conversion behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">一个具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.ComponentModel.TypeConverter" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的类型转换行为。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.UnderlyingType">
      <summary vsli:raw="Gets the CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; that underlies this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">获取为此 <see cref="T:System.Type" /> 提供支持的 CLR <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The CLR &lt;see cref=&quot;T:System.Type&quot; /&gt; that underlies this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">为此 <see cref="T:System.Type" /> 提供支持的 CLR <see cref="T:System.Xaml.XamlType" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ValueSerializer">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint that represents value serialization behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">获取具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Windows.Markup.ValueSerializer" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的值序列化行为。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xaml.Schema.XamlValueConverter`1&quot; /&gt; with &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; constraint that represents value serialization behavior for values of this &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Windows.Markup.ValueSerializer" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的值序列化行为；否则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlWriter">
      <summary vsli:raw="Provides default implementation and base class definitions for a XAML writer. This is not a working default XAML writer; you must either derive from &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; and implement its abstract members, or use an existing &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; derived class.">为 XAML 编写器提供默认实现和基类定义。 这不是工作默认 XAML 编写器；您必须从 <see cref="T:System.Xaml.XamlWriter" /> 派生并实现其抽象成员，或者使用现有的 <see cref="T:System.Xaml.XamlWriter" /> 派生类。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlWriter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Close">
      <summary vsli:raw="Closes the XAML writer object.">关闭 XAML 编写器对象。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; and optionally releases the managed resources.">释放由 <see cref="T:System.Xaml.XamlWriter" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release the managed resources; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示释放托管资源；否则为 <see langword="false" />。</param>
    </member>
    <member name="P:System.Xaml.XamlWriter.IsDisposed">
      <summary vsli:raw="Gets whether &lt;see cref=&quot;M:System.Xaml.XamlWriter.Dispose(System.Boolean)&quot; /&gt; has been called.">获取的值指示是否已调用了 <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Xaml.XamlWriter.Dispose(System.Boolean)&quot; /&gt; has been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已调用 <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlWriter.SchemaContext">
      <summary vsli:raw="When implemented in a derived class, gets the active XAML schema context.">在派生类中实现时，获取或设置活动 XAML 架构上下文。</summary>
      <returns vsli:raw="The active XAML schema context.">活动 XAML 架构上下文。</returns>
    </member>
    <member name="M:System.Xaml.XamlWriter.System#IDisposable#Dispose">
      <summary vsli:raw="See &lt;see cref=&quot;M:System.IDisposable.Dispose&quot; /&gt;.">请参阅 <see cref="M:System.IDisposable.Dispose" />。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndMember">
      <summary vsli:raw="When implemented in a derived class, produces the representation of an end member node.">在派生类中实现时，生成结束成员节点的表示形式。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndObject">
      <summary vsli:raw="When implemented in a derived class, produces the representation of an end object node.">在派生类中实现时，生成结束对象节点的表示形式。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteGetObject">
      <summary vsli:raw="When implemented in a derived class, produces an object for cases where the object is a default or implicit value of the property being set, instead of being specified as a discrete object value in the input XAML node set.">在派生类中实现时，针对对象是所设置属性的默认值或隐式值的情况生成对象，而不是指定为输入 XAML 节点集中的离散对象值。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary vsli:raw="When implemented in a derived class, writes a XAML namespace declaration node.">在派生类中实现时，写入 XAML 命名空间声明节点。</summary>
      <param name="namespaceDeclaration" vsli:raw="The namespace declaration to write.">要写入的命名空间声明。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
      <summary vsli:raw="Performs switching based on node type from the XAML reader (&lt;see cref=&quot;P:System.Xaml.XamlReader.NodeType&quot; /&gt;) and calls the relevant &lt;see langword=&quot;Write&quot; /&gt; method for the writer implementation.">基于 XAML 读取器中的节点类型 (<see cref="P:System.Xaml.XamlReader.NodeType" />) 执行切换，并为编写器实现调用相关的 <see langword="Write" /> 方法。</summary>
      <param name="reader" vsli:raw="The reader to use for node determination.">要用于确定节点的读取器。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reader" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotImplementedException" vsli:raw="The default implementation encountered a &lt;see cref=&quot;T:System.Xaml.XamlNodeType&quot; /&gt; that is not in the default enumeration.">默认实现遇到不在默认枚举中的 <see cref="T:System.Xaml.XamlNodeType" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary vsli:raw="When implemented in a derived class, writes the representation of a start member node.">在派生类中实现时，写入开始成员节点的表示形式。</summary>
      <param name="xamlMember" vsli:raw="The member node to write.">要写入的成员节点。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary vsli:raw="When implemented in a derived class, writes the representation of a start object node.">在派生类中实现时，写入开始对象节点的表示形式。</summary>
      <param name="type" vsli:raw="The XAML type of the object to write.">要写入的对象的 XAML 类型。</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteValue(System.Object)">
      <summary vsli:raw="When implemented in a derived class, writes a value node.">在派生类中实现时，写入值节点。</summary>
      <param name="value" vsli:raw="The value to write.">要写入的值。</param>
    </member>
    <member name="T:System.Xaml.XamlWriterSettings">
      <summary vsli:raw="Provides initialization settings for a &lt;see cref=&quot;T:System.Xaml.XamlWriter&quot; /&gt; implementation.">为 <see cref="T:System.Xaml.XamlWriter" /> 实现提供初始化设置。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlWriterSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlWriterSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor(System.Xaml.XamlWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlWriterSettings&quot; /&gt; class using another existing settings instance.">使用另一个现有设置实例初始化 <see cref="T:System.Xaml.XamlWriterSettings" /> 类的新实例。</summary>
      <param name="settings" vsli:raw="An existing &lt;see cref=&quot;T:System.Xaml.XamlWriterSettings&quot; /&gt; object.">一个现有的 <see cref="T:System.Xaml.XamlWriterSettings" /> 对象。</param>
    </member>
    <member name="T:System.Xaml.XamlXmlReader">
      <summary vsli:raw="Processes XAML markup from XML files by using an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; intermediary, and produces a XAML node stream.">使用 <see cref="T:System.Xml.XmlReader" /> 中介处理 XML 文件中的 XAML 标记，并生成 XAML 节点流。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a stream.">基于流初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="stream" vsli:raw="The initial stream to load into the reader.">要加载到读取器中的初始流。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a stream, and using a supplied XAML schema context.">使用提供的 XAML 架构上下文基于流初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="stream" vsli:raw="The initial stream to load into the reader.">要加载到读取器中的初始流。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">XAML 处理的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a stream, with a supplied XAML schema context and XAML-specific settings.">使用提供的 XAML 架构上下文和特定于 XAML 的设置基于流初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="stream" vsli:raw="The initial stream to load into the reader.">要加载到读取器中的初始流。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">XAML 处理的 XAML 架构上下文。</param>
      <param name="settings" vsli:raw="The specific reader settings.">特定读取器设置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a stream, with XAML-specific settings.">使用特定于 XAML 的设置基于流初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="stream" vsli:raw="The initial stream to load into the reader.">要加载到读取器中的初始流。</param>
      <param name="settings" vsli:raw="The specific reader settings.">特定读取器设置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;.">基于 <see cref="T:System.Xaml.XamlXmlReader" /> 初始化 <see cref="T:System.IO.TextReader" /> 类的新实例。</summary>
      <param name="textReader" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; to use for initialization.">要用于初始化的 <see cref="T:System.IO.TextReader" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textReader" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;, with a supplied schema context and XAML-specific settings.">使用提供的架构上下文和特定于 XAML 的设置，基于 <see cref="T:System.Xaml.XamlXmlReader" /> 初始化 <see cref="T:System.IO.TextReader" /> 类的新实例。</summary>
      <param name="textReader" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; to use for initialization.">要用于初始化的 <see cref="T:System.IO.TextReader" />。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">XAML 处理的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textReader" /> 为 <see langword="null" />。  

或 - 
<paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;, and using a supplied schema context and XAML-specific settings.">使用提供的架构上下文和特定于 XAML 的设置，基于 <see cref="T:System.Xaml.XamlXmlReader" /> 初始化 <see cref="T:System.IO.TextReader" /> 类的新实例。</summary>
      <param name="textReader" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; to use for initialization.">要用于初始化的 <see cref="T:System.IO.TextReader" />。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">XAML 处理的 XAML 架构上下文。</param>
      <param name="settings" vsli:raw="The specific reader settings.">特定读取器设置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textReader" /> 为 <see langword="null" />。  

或 - 
<paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;, and using XAML-specific settings.">使用特定于 XAML 的设置，基于 <see cref="T:System.Xaml.XamlXmlReader" /> 初始化 <see cref="T:System.IO.TextReader" /> 类的新实例。</summary>
      <param name="textReader" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; to use for initialization.">要用于初始化的 <see cref="T:System.IO.TextReader" />。</param>
      <param name="settings" vsli:raw="The specific reader settings.">特定读取器设置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textReader" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on a file name of a file to load into a default XML reader.">基于要加载到默认读取器中的文件的文件名初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="fileName" vsli:raw="The name of the XML file to load.">要加载的 XML 文件的名称。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on the file name of a file to load into a default XML reader, with a supplied XAML schema context.">使用提供的 XAML 架构上下文，基于要加载到默认 XML 读取器中的文件的文件名初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="fileName" vsli:raw="The name of the file to load.">要加载的文件的名称。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">XAML 处理的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on the file name of a file to load into a default XML reader, and using a supplied XAML schema context and XAML-specific reader settings.">使用提供的 XAML 架构上下文和特定于 XAML 的读取器设置，基于要加载到默认 XML 读取器中的文件的文件名初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="fileName" vsli:raw="The name of the XML file to load.">要加载的 XML 文件的名称。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">XAML 处理的 XAML 架构上下文。</param>
      <param name="settings" vsli:raw="The specific reader settings.">特定读取器设置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" /> 为 <see langword="null" />。  

或 - 
<paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, based on the file name of a file to load into a default XML reader, and using XAML-specific reader settings.">使用特定于 XAML 的读取器设置，基于要加载到默认 XML 读取器中的文件的文件名初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="fileName" vsli:raw="The name of the XML file to load.">要加载的 XML 文件的名称。</param>
      <param name="settings" vsli:raw="The specific reader settings.">特定读取器设置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class using the provided &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">使用提供的 <see cref="T:System.Xml.XmlReader" /> 初始化 <see cref="T:System.Xaml.XamlXmlReader" /> 类的新实例。</summary>
      <param name="xmlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to use as the intermediary XML processor.">要用作中间 XML 处理器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlReader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlReader" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class using the provided &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and schema context.">使用提供的 <see cref="T:System.Xaml.XamlXmlReader" /> 和架构上下文初始化 <see cref="T:System.Xml.XmlReader" /> 类的新实例。</summary>
      <param name="xmlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to use as the intermediary XML processor.">要用作中间 XML 处理器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">XAML 处理的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlReader&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlReader" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class using the provided &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;, schema context, and reader settings.">使用提供的 <see cref="T:System.Xaml.XamlXmlReader" />、架构上下文和读取器设置初始化 <see cref="T:System.Xml.XmlReader" /> 类的新实例。</summary>
      <param name="xmlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to use as the intermediary XML processor.">要用作中间 XML 处理器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for XAML processing.">XAML 处理的 XAML 架构上下文。</param>
      <param name="settings" vsli:raw="The specific XAML reader settings.">特定 XAML 读取器设置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlReader&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlReader" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; class, using the provided &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and reader settings.">使用提供的 <see cref="T:System.Xaml.XamlXmlReader" /> 和读取器设置初始化 <see cref="T:System.Xml.XmlReader" /> 类的新实例。</summary>
      <param name="xmlReader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to use as the intermediary XML processor.">要用作中间 XML 处理器的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="settings" vsli:raw="The specific XAML reader settings.">特定 XAML 读取器设置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlReader&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlReader" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.HasLineInfo">
      <summary vsli:raw="Gets a value that specifies whether line information is available.">获取一个值，该值指定行信息是否可用。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if line information is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果行信息可用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.IsEof">
      <summary vsli:raw="Gets a value that reports whether the reader position in the XAML node stream is at end-of-file.">获取一个值，该值报告 XAML 节点流中的读取器位置是否位于文件结尾。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the position is at the conceptual end-of-file in the node stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果位置在节点流的概念上的文件末尾，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LineNumber">
      <summary vsli:raw="Gets the line number to report.">获取要报告的行号。</summary>
      <returns vsli:raw="The line number to report.">要报告的行号。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LinePosition">
      <summary vsli:raw="Gets the line position to report.">获取要报告的行位置。</summary>
      <returns vsli:raw="The line position to report.">要报告的行位置。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Member">
      <summary vsli:raw="Gets the current member at the reader position, if the current reader position is on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.StartMember&quot; /&gt;.">如果当前读取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，则获取位于读取器位置处的当前成员。</summary>
      <returns vsli:raw="The current member; or &lt;see langword=&quot;null&quot; /&gt;, if the current reader position is not on a member.">当前成员；如果当前读取器位置不在成员上，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Namespace">
      <summary vsli:raw="Gets the XAML namespace from the current node.">从当前节点中获取 XAML 命名空间。</summary>
      <returns vsli:raw="The XAML namespace from the current node, if it is available; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果可用，则为当前节点中的 XAML 命名空间；否则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.NodeType">
      <summary vsli:raw="Gets the type of the current node.">获取当前节点的类型。</summary>
      <returns vsli:raw="A value of the &lt;see cref=&quot;T:System.Xaml.XamlNodeType&quot; /&gt; enumeration.">
        <see cref="T:System.Xaml.XamlNodeType" /> 枚举的一个值。</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.Read">
      <summary vsli:raw="Provides the next XAML node from the loaded source, if a XAML node is available.">提供所加载的源中的下一个 XAML 节点（如果 XAML 节点可用）。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a node is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果某节点可用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.SchemaContext">
      <summary vsli:raw="Gets an object that provides schema information for the information set.">获取一个对象，该对象提供信息集的架构信息。</summary>
      <returns vsli:raw="An object that provides schema information for the information set.">一个对象，该对象提供信息集的架构信息。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Type">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node.">获取当前节点的 <see cref="T:System.Xaml.XamlType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the position is not on an object.">当前节点的 <see cref="T:System.Xaml.XamlType" />；如果位置不在对象上，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Value">
      <summary vsli:raw="Gets the value of the current node.">获取当前节点的值。</summary>
      <returns vsli:raw="The value of the current node; or &lt;see langword=&quot;null&quot; /&gt;, if the position is not on a &lt;see cref=&quot;F:System.Xaml.XamlNodeType.Value&quot; /&gt; node type.">当前节点的值；如果位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 节点类型上，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xaml.XamlXmlReaderSettings">
      <summary vsli:raw="Specifies processing rules or option settings for the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; XAML reader implementation.">为 <see cref="T:System.Xaml.XamlXmlReader" /> XAML 读取器实现指定处理规则或选项设置。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReaderSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor(System.Xaml.XamlXmlReaderSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlReaderSettings&quot; /&gt; class by copying settings from an existing &lt;see cref=&quot;T:System.Xaml.XamlXmlReaderSettings&quot; /&gt; object.">通过从现有 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 对象中复制设置来初始化 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 类的新实例。</summary>
      <param name="settings" vsli:raw="The existing &lt;see cref=&quot;T:System.Xaml.XamlXmlReaderSettings&quot; /&gt; object to copy.">要复制的现有 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 对象。</param>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.CloseInput">
      <summary vsli:raw="Gets or sets a value that indicates whether the underlying stream or text reader should be closed when the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; is closed.">获取或设置一个值，该值指示当 <see cref="T:System.Xaml.XamlXmlReader" /> 关闭时，是否应关闭基础流或文本读取器。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the underlying stream or reader should be closed when the &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; is closed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果当 <see cref="T:System.Xaml.XamlXmlReader" /> 关闭时基础流或读取器也应关闭，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.SkipXmlCompatibilityProcessing">
      <summary vsli:raw="Gets or sets a value that determines whether the reader should differ from the default &lt;see cref=&quot;T:System.Xaml.XamlXmlReader&quot; /&gt; behavior of how markup compatibility content is processed.">获取或设置一个值，该值确定读取器是否应与如何处理标记兼容性内容这一默认 <see cref="T:System.Xaml.XamlXmlReader" /> 行为有所区别。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the initiating reader is directly used, which means that XML compatibility markup is processed as part of the main stream and compatibility is not considered. &lt;see langword=&quot;false&quot; /&gt; if the default behavior is used, which processes XML compatibility separately. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果直接使用启动读取器（这意味着将 XML 兼容性标记作为主要流的一部分进行处理，而不考虑兼容性），则为 <see langword="true" />。 如果使用默认行为（即单独处理 XML 兼容性），则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlLang">
      <summary vsli:raw="Gets or sets the language setting value that the reader may promote to writers that write &lt;see langword=&quot;xml:lang&quot; /&gt; attributes in nodes.">获取或设置语言设置值，该值确定读取器可能提升到在节点中写出 <see langword="xml:lang" /> 特性的编写器。</summary>
      <returns vsli:raw="The string to use for possible &lt;see langword=&quot;xml:lang&quot; /&gt; output that is based on the reader.">要用于基于读取器的可能 <see langword="xml:lang" /> 输出的字符串。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlSpacePreserve">
      <summary vsli:raw="Gets or sets a value that determines whether the XAML reader instructs any XAML writers to write &lt;see langword=&quot;xml:space&quot; /&gt; attributes in nodes. If that behavior is desired, this information is passed through shared XAML schema context.">获取或设置一个值，该值确定 XAML 读取器是否让任何 XAML 编写器在节点中写入 <see langword="xml:space" /> 特性。 如果需要该行为，则此信息会通过共享 XAML 架构上下文传递。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if writers that are processing the XAML node stream can write &lt;c&gt;xml:space=&quot;preserve&quot;&lt;/c&gt; in output; &lt;see langword=&quot;false&quot; /&gt; if &lt;see langword=&quot;xml:space&quot; /&gt; attributes cannot be written in nodes.">
        <see langword="true" />如果处理 XAML 节点流的编写器可以在输出中写入<c>xml: space = "preserve"</c> , 则为;如果无法在节点中写入特性, 则<see langword="xml:space" />为。 <see langword="false" /></returns>
    </member>
    <member name="T:System.Xaml.XamlXmlWriter">
      <summary vsli:raw="Uses a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; support class to write a XAML node stream to a text or markup serialized form.">使用 <see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.Xml.XmlWriter" /> 支持类将 XAML 节点流写入文本或标记序列化形式。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a stream.">从流中初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 类的新实例。</summary>
      <param name="stream" vsli:raw="The stream to write.">要写入的流。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 编写器的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 为 <see langword="null" />。  
或 
 <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a stream using a writer settings object.">使用编写器设置对象从流中初始化 <see cref="T:System.Xaml.XamlXmlWriter" /> 类的新实例。</summary>
      <param name="stream" vsli:raw="The stream to write.">要写入的流。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 编写器的 XAML 架构上下文。</param>
      <param name="settings" vsli:raw="An instance of &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterSettings&quot; /&gt;, which typically has specific non-default settings.">
        <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 的实例，此实例通常具有特定的非默认设置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="stream" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" /></exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; basis.">从 <see cref="T:System.Xaml.XamlXmlWriter" /> 基础初始化 <see cref="T:System.IO.TextWriter" /> 类的新实例。</summary>
      <param name="textWriter" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; that writes the output.">写入输出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 编写器的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textWriter&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textWriter" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; basis using a settings object.">使用设置对象从 <see cref="T:System.Xaml.XamlXmlWriter" /> 基础初始化 <see cref="T:System.IO.TextWriter" /> 类的新实例。</summary>
      <param name="textWriter" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; that writes the output.">写入输出的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 编写器的 XAML 架构上下文。</param>
      <param name="settings" vsli:raw="An instance of &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterSettings&quot; /&gt;, which typically has specific non-default settings.">
        <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 的实例，此实例通常具有特定的非默认设置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;textWriter&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="textWriter" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; basis.">从 <see cref="T:System.Xaml.XamlXmlWriter" /> 基础初始化 <see cref="T:System.Xml.XmlWriter" /> 类的新实例。</summary>
      <param name="xmlWriter" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; that writes the output.">写入输出的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 编写器的 XAML 架构上下文。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlWriter&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlWriter" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; class from a &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; basis using a settings object.">使用设置对象从 <see cref="T:System.Xaml.XamlXmlWriter" /> 基础初始化 <see cref="T:System.Xml.XmlWriter" /> 类的新实例。</summary>
      <param name="xmlWriter" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; that writes the output.">写入输出的 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="schemaContext" vsli:raw="The XAML schema context for the XAML writer.">XAML 编写器的 XAML 架构上下文。</param>
      <param name="settings" vsli:raw="An instance of &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterSettings&quot; /&gt;, which typically has specific non-default settings.">
        <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 的实例，此实例通常具有特定的非默认设置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlWriter&quot; /&gt; or &lt;paramref name=&quot;schemaContext&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlWriter" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; and optionally releases the managed resources.">释放 <see cref="T:System.Xaml.XamlXmlWriter" /> 占用的非托管资源，也可以选择释放托管资源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release the unmanaged resources; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">设置为 <see langword="true" /> 以释放非托管资源；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Flush">
      <summary vsli:raw="Calls the &lt;see langword=&quot;Flush&quot; /&gt; method of the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;, which writes anything that is currently in the buffer, and then closes the writer.">调用基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" /> 的 <see langword="Flush" /> 方法，该方法将写出当前位于缓冲区中的任何内容，然后关闭编写器。</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.SchemaContext">
      <summary vsli:raw="Gets the XAML schema context that this &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; uses for processing.">获取此 <see cref="T:System.Xaml.XamlXmlWriter" /> 用于处理的 XAML 架构上下文。</summary>
      <returns vsli:raw="The XAML schema context that this &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; uses for XAML processing.">此 <see cref="T:System.Xaml.XamlXmlWriter" /> 用于 XAML 处理的 XAML 架构上下文。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.Settings">
      <summary vsli:raw="Gets the writer settings that this &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; uses for XAML processing.">获取此 <see cref="T:System.Xaml.XamlXmlWriter" /> 用于 XAML 处理的编写器设置。</summary>
      <returns vsli:raw="The writer settings that this &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; uses for XAML processing.">此 <see cref="T:System.Xaml.XamlXmlWriter" /> 用于 XAML 处理的编写器设置。</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndMember">
      <summary vsli:raw="Writes a XAML end member node to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. Throws an exception if the current position of the XAML node stream is not within a member, or if the internal writer state does not support writing to an end member.">将 XAML 结束成员节点写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 节点流的当前位置不在成员内，或者如果内部编写器状态不支持写入结束成员，则引发异常。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current position of the XAML node stream is not within a member.">XAML 节点流的当前位置不在成员内。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The current writer state does not support writing an end member.">当前编写器状态不支持写入结束成员。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndObject">
      <summary vsli:raw="Writes a XAML end object node to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. Throws an exception if the current position of the XAML node stream that is being processed is incompatible with writing an end object.">将 XAML 结束对象节点写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果所处理的 XAML 节点流的当前位置与写入结束对象不兼容，则引发异常。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current position of the XAML node stream is not in a scope where an end member can be written.">XAML 节点流的当前位置不在可以写入结束成员的范围内。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The current writer state does not support writing an end object.">当前编写器状态不支持写入结束对象。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteGetObject">
      <summary vsli:raw="Writes an object for cases where the specified object is a default or implicit value of the property that is being written, instead of being specified as an object value in the input XAML node set.">针对指定对象是所编写属性的默认值或隐式值的情况写出对象，而不是指定为输入 XAML 节点集中的对象值。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary vsli:raw="Writes namespace information to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. May throw an exception for certain states; however, may instead defer writing the namespace information until the writer and the XAML node stream that is being processed reaches a position where a XAML namespace declaration can be inserted.">将命名空间信息写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 对于某些状态可能会引发异常；但在编写器和所处理的 XAML 节点流到达可放置 XAML 命名空间声明的位置之前，可能会改为延迟写入命名空间信息。</summary>
      <param name="namespaceDeclaration" vsli:raw="The XAML namespace declaration to write.">要写入的 XAML 命名空间声明。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;namespaceDeclaration&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="namespaceDeclaration" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;namespaceDeclaration&quot; /&gt; is not a valid XAML namespace declaration (has a null prefix or null identifier component).">
        <paramref name="namespaceDeclaration" /> 不是有效的 XAML 命名空间声明（具有 null 前缀或 null 标识符组件）。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The current writer state does not support writing a XAML namespace declaration.">当前编写器状态不支持编写 XAML 命名空间声明。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary vsli:raw="Writes a XAML start member node to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. Throws an exception if the current position of the XAML node stream is within another member, or if it is not in a scope or writer state where a start member can be written.">将 XAML 起始成员节点写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 节点流的当前位置在另一个成员内，或者未处于可写入起始成员的范围或编写器状态中，则引发异常。</summary>
      <param name="property" vsli:raw="The XAML member identifier for the member to write.">要写入的成员的 XAML 成员标识符。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="property" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;property&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Xaml.XamlMember&quot; /&gt;.">
        <paramref name="property" /> 不是有效的 <see cref="T:System.Xaml.XamlMember" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current position of the XAML node stream is invalid for writing a start member.">XAML 节点流的当前位置无效，无法写入起始成员。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The writer state is not valid for writing a start member.  &#xA;  &#xA; -or-  &#xA;  &#xA; The XAML writer attempted to write a duplicate member. This exception may have a more precise inner exception.">编写器状态对于编写开始成员是无效的。  

或 -  

 XAML 编写器尝试编写重复的成员。 此异常可能具有更精确的内部异常。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary vsli:raw="Writes a XAML start object node to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. Throws an exception if the current position of the XAML node stream is not in a scope where a start object can be written, or if the writer is not in a state that can write a start object.">将 XAML 起始对象节点写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 节点流的当前位置不在可写入起始对象的范围内，或者编写器未处于可写入起始对象的状态，则引发异常。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt; (XAML type identifier) for the object to write.">要写入的对象的 <see cref="T:System.Xaml.XamlType" />（XAML 类型标识符）。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Xaml.XamlType&quot; /&gt;.">
        <paramref name="type" /> 不是有效的 <see cref="T:System.Xaml.XamlType" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current position of the XAML node stream is not valid for writing a new start object.">XAML 节点流的当前位置无效，无法写入新的开始对象。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The state of the XAML writer is not valid for writing a new start object.">XAML 编写器的状态无效，无法写入新的开始对象。</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteValue(System.Object)">
      <summary vsli:raw="Writes a XAML value node to the underlying &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. Throws an exception if the current position of the XAML node stream is invalid for writing a value, or the writer is in a state where a value cannot be written.">将 XAML 值节点写入到基础 <see cref="T:System.Xml.XmlWriter" /> 或 <see cref="T:System.IO.TextWriter" />。 如果 XAML 节点流的当前位置对于写入值操作无效，或者编写器处于无法写入值的状态，则引发异常。</summary>
      <param name="value" vsli:raw="The value information to write.">要写入的值信息。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current position of the XAML node stream is not valid for writing a value.">XAML 节点流的当前位置无效，无法写入值。</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException" vsli:raw="The XAML writer state does not support the writing of a value node.">XAML 编写器状态不支持对值节点的写入。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; specifies a value that is not null or a string.">
        <paramref name="value" /> 指定的值不为 null，也不为字符串。</exception>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterException">
      <summary vsli:raw="The exception that is thrown by certain &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; APIs.">由某些 <see cref="T:System.Xaml.XamlXmlWriter" /> API 引发的异常。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterException&quot; /&gt; class with a system-supplied message that describes the error.">使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterException&quot; /&gt; class with serialized data.">用序列化数据初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 类的新实例。</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">承载序列化对象数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterException&quot; /&gt; class with a specified message that describes the error.">使用指定的描述错误的消息初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Xaml.XamlXmlWriterException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterSettings">
      <summary vsli:raw="Provides initialization settings for the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; XAML writer implementation.">为 <see cref="T:System.Xaml.XamlXmlWriter" /> XAML 编写器实现提供初始化设置。</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.AssumeValidInput">
      <summary vsli:raw="Gets or sets a value that specifies whether the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; should always assume valid XAML input for purposes of duplicate resolution or other error checking.">获取或设置一个值，该值指定 <see cref="T:System.Xaml.XamlXmlWriter" /> 是否应始终采用有效的 XAML 输入来进行重复项解析或其他错误检查。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; skips certain validation or error checks, such as throwing exceptions on duplicate members. &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; throws exceptions when invalid XAML is encountered. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则让 <see cref="T:System.Xaml.XamlXmlWriter" /> 跳过某些验证或错误检查，例如在出现重复成员时引发异常。 如果为 <see langword="false" />，则让 <see cref="T:System.Xaml.XamlXmlWriter" /> 在遇到无效 XAML 时，引发异常。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.CloseOutput">
      <summary vsli:raw="Gets or sets a value that specifies whether the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; should close immediately on &lt;see langword=&quot;Dispose&quot; /&gt; or other operations, or whether the XAML writer should instead write the buffer output before closing. Use this setting with caution; closing immediately can result in invalid XAML that cannot be loaded again.">获取或设置一个值，该值指定 <see cref="T:System.Xaml.XamlXmlWriter" /> 应在进行 <see langword="Dispose" /> 或其他操作时立即关闭，还是 XAML 编写器应在关闭之前写入缓冲区输出。 应慎重使用此设置；立即关闭可能会导致 XAML 无效而无法重新加载。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; immediately closes on a &lt;see langword=&quot;Dispose&quot; /&gt; or similar operations. &lt;see langword=&quot;false&quot; /&gt; if the remaining buffer output is written before the &lt;see cref=&quot;T:System.Xaml.XamlXmlWriter&quot; /&gt; is released. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果为 <see langword="true" />，则在进行 <see langword="Dispose" /> 或类似操作时，立即关闭 <see cref="T:System.Xaml.XamlXmlWriter" />。 如果为 <see langword="false" />，则在释放 <see cref="T:System.Xaml.XamlXmlWriter" /> 之前写入剩余的缓冲区输出。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.Copy">
      <summary vsli:raw="Returns a copy of this &lt;see cref=&quot;T:System.Xaml.XamlXmlWriterSettings&quot; /&gt; instance.">返回此 <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 实例的副本。</summary>
      <returns vsli:raw="The returned copy.">返回的副本。</returns>
    </member>
  </members>
</doc>
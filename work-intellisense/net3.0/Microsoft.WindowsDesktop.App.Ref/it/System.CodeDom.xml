<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.CodeDom</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary vsli:raw="Provides access to instances of the C# code generator and code compiler.">Fornisce l'accesso alle istanze del generatore e del compilatore di codice C#.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.CSharp.CSharpCodeProvider&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:Microsoft.CSharp.CSharpCodeProvider" />.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.CSharp.CSharpCodeProvider&quot; /&gt; class by using the specified provider options.">Inizializza una nuova istanza della classe <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> tramite le opzioni del provider specificate.</summary>
      <param name="providerOptions" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; object that contains the provider options.">Oggetto <see cref="T:System.Collections.Generic.IDictionary`2" /> che contiene le opzioni del provider del file di configurazione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary vsli:raw="Gets an instance of the C# code compiler.">Ottiene un'istanza del compilatore di codice C#.</summary>
      <returns vsli:raw="An instance of the C# &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; implementation.">Istanza dell'implementazione C# di <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary vsli:raw="Gets an instance of the C# code generator.">Ottiene un'istanza del generatore di codice C#.</summary>
      <returns vsli:raw="An instance of the C# &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; implementation.">Istanza dell'implementazione C# di <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />.</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary vsli:raw="Gets the file name extension to use when creating source code files.">Ottiene l'estensione di file da usare per la creazione di file di codice sorgente.</summary>
      <returns vsli:raw="The file name extension to use for generated source code files.">Estensione di file da usare per i file di codice sorgente generati.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">Genera codice per il membro della classe specificato usando le opzioni del writer di testo e del generatore di codice specificate.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeTypeMember" /> per il quale deve essere generato il codice.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">
        <see cref="T:System.IO.TextWriter" /> in cui scrivere.</param>
      <param name="options" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; to use when generating the code.">Oggetto <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> da usare per la generazione del codice.</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type of object.">Ottiene un oggetto <see cref="T:System.ComponentModel.TypeConverter" /> per il tipo di oggetto specificato.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">Tipo di oggetto per il quale recuperare un convertitore di tipi.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">Oggetto <see cref="T:System.ComponentModel.TypeConverter" /> per il tipo specificato.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary vsli:raw="Provides access to instances of the Visual Basic code generator and code compiler.">Consente di accedere alle istanze del generatore e del compilatore di codice Visual Basic.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.VisualBasic.VBCodeProvider&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:Microsoft.VisualBasic.VBCodeProvider" />.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.VisualBasic.VBCodeProvider&quot; /&gt; class by using the specified provider options.">Inizializza una nuova istanza della classe <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> tramite le opzioni del provider specificate.</summary>
      <param name="providerOptions" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; object that contains the provider options.">Oggetto <see cref="T:System.Collections.Generic.IDictionary`2" /> che contiene le opzioni del provider del file di configurazione.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary vsli:raw="Gets an instance of the Visual Basic code compiler.">Ottiene un'istanza del compilatore di codice Visual Basic.</summary>
      <returns vsli:raw="An instance of the Visual Basic &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; implementation.">Istanza dell'implementazione di <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> di Visual Basic.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary vsli:raw="Gets an instance of the Visual Basic code generator.">Ottiene un'istanza del generatore di codice Visual Basic.</summary>
      <returns vsli:raw="An instance of the Visual Basic &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; implementation.">Istanza dell'implementazione di <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> di Visual Basic.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary vsli:raw="Gets the file name extension to use when creating source code files.">Ottiene l'estensione del nome file da utilizzare per la creazione di file di codice sorgente.</summary>
      <returns vsli:raw="The file name extension to use for generated source code files.">Estensione di file da usare per i file di codice sorgente generati.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">Genera codice per il membro della classe specificato usando le opzioni del writer di testo e del generatore di codice specificate.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeTypeMember" /> per il quale deve essere generato il codice.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">
        <see cref="T:System.IO.TextWriter" /> in cui scrivere.</param>
      <param name="options" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; to use when generating the code.">Oggetto <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> da usare per la generazione del codice.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type of object.">Ottiene un oggetto <see cref="T:System.ComponentModel.TypeConverter" /> per il tipo di oggetto specificato.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">Tipo di oggetto per il quale recuperare un convertitore di tipi.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">Oggetto <see cref="T:System.ComponentModel.TypeConverter" /> per il tipo specificato.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary vsli:raw="Gets a language features identifier.">Ottiene un identificatore delle funzionalità del linguaggio.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.LanguageOptions&quot; /&gt; that indicates special features of the language.">Oggetto <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> che indica speciali funzionalità del linguaggio.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary vsli:raw="Represents a reference to the value of an argument passed to a method.">Rappresenta un riferimento al valore di un argomento passato a un metodo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; class using the specified parameter name.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> con il nome del parametro specificato.</summary>
      <param name="parameterName" vsli:raw="The name of the parameter to reference.">Nome del parametro cui fare riferimento.</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary vsli:raw="Gets or sets the name of the parameter this expression references.">Ottiene o imposta il nome del parametro al quale fa riferimento questa espressione.</summary>
      <returns vsli:raw="The name of the parameter to reference.">Nome del parametro cui fare riferimento.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary vsli:raw="Represents an expression that creates an array.">Rappresenta un'espressione che crea una matrice.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and code expression indicating the number of indexes for the array.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> utilizzando il tipo di dati della matrice specificato e l'espressione di codice indicante il numero di indici della matrice.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; indicating the data type of the array to create.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati della matrice da creare.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">Espressione che indica il numero di indici della matrice da creare.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and initialization expressions.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con il tipo di dati e le espressioni di inizializzazione di matrice specificati.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the array to create.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati della matrice da creare.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">Matrice di espressioni da utilizzare per inizializzare la matrice.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and number of indexes for the array.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> utilizzando il tipo di dati e il numero di indici della matrice specificati.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; indicating the data type of the array to create.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati della matrice da creare.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">Numero di indici della matrice da creare.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and code expression indicating the number of indexes for the array.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> utilizzando il nome del tipo di dati della matrice specificato e l'espressione di codice indicante il numero di indici della matrice.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">Nome del tipo di dati della matrice da creare.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">Espressione che indica il numero di indici della matrice da creare.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and initializers.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con il nome del tipo di dati e gli inizializzatori di matrice specificati.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">Nome del tipo di dati della matrice da creare.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">Matrice di espressioni da utilizzare per inizializzare la matrice.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and number of indexes for the array.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> utilizzando il nome del tipo di dati e il numero di indici della matrice specificati.</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">Nome del tipo di dati della matrice da creare.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">Numero di indici della matrice da creare.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and code expression indicating the number of indexes for the array.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> utilizzando il tipo di dati della matrice specificato e l'espressione di codice indicante il numero di indici della matrice.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">Tipo di dati della matrice da creare.</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">Espressione che indica il numero di indici della matrice da creare.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and initializers.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> con il tipo di dati e gli inizializzatori di matrice specificati.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">Tipo di dati della matrice da creare.</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">Matrice di espressioni da utilizzare per inizializzare la matrice.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and number of indexes for the array.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> utilizzando il tipo di dati e il numero di indici della matrice specificati.</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">Tipo di dati della matrice da creare.</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">Numero di indici della matrice da creare.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary vsli:raw="Gets or sets the type of array to create.">Ottiene o imposta il tipo di matrice da creare.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo della matrice da creare.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary vsli:raw="Gets the initializers with which to initialize the array.">Restituisce gli inizializzatori con i quali inizializzare la matrice.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the initialization values.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> che indica i valori di inizializzazione.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary vsli:raw="Gets or sets the number of indexes in the array.">Ottiene o imposta il numero di indici della matrice.</summary>
      <returns vsli:raw="The number of indexes in the array.">Numero di indici della matrice.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary vsli:raw="Gets or sets the expression that indicates the size of the array.">Ottiene o imposta l'espressione che indica la dimensione della matrice.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the size of the array.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica la dimensione della matrice.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary vsli:raw="Represents a reference to an index of an array.">Rappresenta un riferimento a un indice di una matrice.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; class using the specified target object and indexes.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> utilizzando l'oggetto di destinazione e gli indici specificati.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the array the indexer targets.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto su cui viene applicato l'indicizzatore.</param>
      <param name="indices" vsli:raw="The index or indexes to reference.">Indice o indici cui fare riferimento.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary vsli:raw="Gets or sets the index or indexes of the indexer expression.">Ottiene o imposta l'indice o gli indici dell'espressione dell'indicizzatore.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the index or indexes of the indexer expression.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> che indica l'indice o gli indici dell'espressione dell'indicizzatore.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary vsli:raw="Gets or sets the target object of the array indexer.">Ottiene o imposta l'oggetto di destinazione dell'indicizzatore della matrice.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the array being indexed.">
        <see cref="T:System.CodeDom.CodeExpression" /> che rappresenta la matrice da indicizzare.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary vsli:raw="Represents a simple assignment statement.">Rappresenta un'istruzione di assegnazione semplice.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeAssignStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; class using the specified expressions.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeAssignStatement" /> utilizzando le espressioni specificate.</summary>
      <param name="left" vsli:raw="The variable to assign to.">Variabile a cui assegnare un valore.</param>
      <param name="right" vsli:raw="The value to assign.">Il valore da assegnare.</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary vsli:raw="Gets or sets the expression representing the object or reference to assign to.">Ottiene o imposta l'espressione che rappresenta l'oggetto o il riferimento al quale assegnare un valore.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object or reference to assign to.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto o il riferimento al quale assegnare un valore.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary vsli:raw="Gets or sets the expression representing the object or reference to assign.">Ottiene o imposta l'espressione che rappresenta l'oggetto o il riferimento da assegnare.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object or reference to assign.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto o il riferimento da assegnare.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary vsli:raw="Represents a statement that attaches an event-handler delegate to an event.">Rappresenta un'istruzione che consente di associare un delegato gestore eventi a un evento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeAttachEventStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class using the specified event and delegate.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeAttachEventStatement" /> utilizzando l'evento e il delegato specificati.</summary>
      <param name="eventRef" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to attach an event handler to.">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> che indica l'evento a cui associare un gestore eventi.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica il nuovo gestore eventi.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class using the specified object containing the event, event name, and event-handler delegate.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeAttachEventStatement" /> utilizzando l'oggetto specificato che contiene l'evento, il nome dell'evento e il delegato gestore eventi.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto che contiene l'evento.</param>
      <param name="eventName" vsli:raw="The name of the event to attach an event handler to.">Nome dell'evento cui associare un gestore eventi.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica il nuovo gestore eventi.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary vsli:raw="Gets or sets the event to attach an event-handler delegate to.">Ottiene o imposta l'evento al quale associare un delegato gestore eventi.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to attach an event handler to.">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> che indica l'evento a cui associare un gestore eventi.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary vsli:raw="Gets or sets the new event-handler delegate to attach to the event.">Ottiene o imposta il nuovo delegato gestore eventi da associare all'evento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler to attach.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica il nuovo gestore eventi da associare.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary vsli:raw="Represents an argument used in a metadata attribute declaration.">Rappresenta un argomento utilizzato in una dichiarazione di attributo dei metadati.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class using the specified value.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeAttributeArgument" /> con il valore specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the value of the argument.">
        <see cref="T:System.CodeDom.CodeExpression" /> che rappresenta il valore dell'argomento.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class using the specified name and value.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeAttributeArgument" />con il nome e il valore specificati.</summary>
      <param name="name" vsli:raw="The name of the attribute property the argument applies to.">Il nome della proprietà dell'attributo al quale si applica l'argomento.</param>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the value of the argument.">
        <see cref="T:System.CodeDom.CodeExpression" /> che rappresenta il valore dell'argomento.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary vsli:raw="Gets or sets the name of the attribute.">Ottiene o imposta il nome dell'attributo.</summary>
      <returns vsli:raw="The name of the attribute property the argument is for.">Il nome della proprietà dell'attributo al quale è destinato l'argomento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary vsli:raw="Gets or sets the value for the attribute argument.">Ottiene o imposta il valore dell'argomento dell'attributo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the value for the attribute argument.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica il valore dell'attributo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> contenente la matrice specificata di oggetti <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects with which to initialize the collection.">Matrice di oggetti <see cref="T:System.CodeDom.CodeAttributeArgument" /> con cui inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Uno o più oggetti della matrice sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class containing the elements of the specified source collection.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> contenente gli elementi dell'insieme di origine specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> con il quale inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to the collection.">Aggiunge l'oggetto <see cref="T:System.CodeDom.CodeAttributeArgument" /> specificato alla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to add.">L'oggetto <see cref="T:System.CodeDom.CodeAttributeArgument" /> da aggiungere.</param>
      <returns vsli:raw="The index at which the new element was inserted.">L'indice in corrispondenza del quale è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; array to the end of the collection.">Copia gli elementi della matrice di oggetti <see cref="T:System.CodeDom.CodeAttributeArgument" /> specificata alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the objects to add to the collection.">Matrice di tipo <see cref="T:System.CodeDom.CodeAttributeArgument" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; object to the end of the collection.">Copia il contenuto di un altro oggetto <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; that contains the objects to add to the collection.">Oggetto <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> che contiene gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object.">Ottiene un valore che indica se l'insieme contiene l'oggetto <see cref="T:System.CodeDom.CodeAttributeArgument" /> specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to locate in the collection.">Oggetto <see cref="T:System.CodeDom.CodeAttributeArgument" /> da individuare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme contiene l'oggetto specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Consente di copiare gli oggetti dell'insieme in un'istanza della <see cref="T:System.Array" /> unidimensionale a partire dall'indice specificato.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionale che rappresenta la destinazione dei valori copiati dall'insieme.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Indice della matrice da cui iniziare l'inserimento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matrice di destinazione è multidimensionale.  
In alternativa 
Il numero degli elementi in <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> è maggiore dello spazio disponibile tra l'indice della matrice di destinazione specificata dal parametro <paramref name="index" /> e la fine della matrice di destinazione.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Il parametro <paramref name="index" /> è minore dell'indice minimo della matrice di destinazione.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object in the collection, if it exists in the collection.">Ottiene l'indice dell'oggetto <see cref="T:System.CodeDom.CodeAttributeArgument" /> specificato nell'insieme, se esistente.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to locate in the collection.">Oggetto <see cref="T:System.CodeDom.CodeAttributeArgument" /> da individuare nell'insieme.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">Indice dell'oggetto specificato, se presente nell'insieme, in caso contrario -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object into the collection at the specified index.">Inserisce l'oggetto <see cref="T:System.CodeDom.CodeAttributeArgument" /> specificato nella raccolta in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Indice in base zero in corrispondenza del quale inserire l'oggetto specificato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to insert.">Oggetto <see cref="T:System.CodeDom.CodeAttributeArgument" /> da inserire.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object at the specified index in the collection.">Ottiene o imposta l'oggetto <see cref="T:System.CodeDom.CodeAttributeArgument" /> nella raccolta, in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Indice dell'insieme al quale accedere.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> in ciascun indice valido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Il parametro <paramref name="index" /> non è compreso nell'intervallo valido di indici per la raccolta.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object from the collection.">Rimuove l'oggetto <see cref="T:System.CodeDom.CodeAttributeArgument" /> specificato dalla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to remove from the collection.">Oggetto <see cref="T:System.CodeDom.CodeAttributeArgument" /> da rimuovere dalla raccolta.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Impossibile trovare l'oggetto specificato nell'insieme.</exception>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary vsli:raw="Represents an attribute declaration.">Rappresenta una dichiarazione di attributo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified code type reference.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> utilizzando il riferimento al tipo di codice specificato.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the attribute.">Oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> che identifica l'attributo.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified code type reference and arguments.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> utilizzando il riferimento al tipo di codice e gli argomenti specificati.</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the attribute.">Oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> che identifica l'attributo.</param>
      <param name="arguments" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the arguments for the attribute.">Matrice di tipo <see cref="T:System.CodeDom.CodeAttributeArgument" /> che contiene gli argomenti dell'attributo.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified name.">Inizializza una nuova istanza per la classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> usando il nome specificato.</summary>
      <param name="name" vsli:raw="The name of the attribute.">Nome dell'attributo.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified name and arguments.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" />con il nome e gli argomenti specificati.</summary>
      <param name="name" vsli:raw="The name of the attribute.">Nome dell'attributo.</param>
      <param name="arguments" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the arguments for the attribute.">Matrice di tipo <see cref="T:System.CodeDom.CodeAttributeArgument" /> che contiene gli argomenti dell'attributo.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary vsli:raw="Gets the arguments for the attribute.">Restituisce gli argomenti dell'attributo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; that contains the arguments for the attribute.">Oggetto <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> contenente gli argomenti dell'attributo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary vsli:raw="Gets the code type reference for the code attribute declaration.">Ottiene il riferimento al tipo di codice per la dichiarazione dell'attributo del codice.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt;.">Oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> che identifica l'oggetto <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary vsli:raw="Gets or sets the name of the attribute being declared.">Ottiene o imposta il nome dell'attributo dichiarato.</summary>
      <returns vsli:raw="The name of the attribute.">Nome dell'attributo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> contenente la matrice specificata di oggetti <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects with which to initialize the collection.">Matrice di oggetti <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> con cui inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Uno o più oggetti della matrice sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class containing the elements of the specified source collection.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> contenente gli elementi dell'insieme di origine specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> con il quale inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object with the specified value to the collection.">Aggiunge all'insieme un oggetto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> con il valore specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to add.">L'oggetto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> da aggiungere.</param>
      <returns vsli:raw="The index at which the new element was inserted.">L'indice in corrispondenza del quale è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; array to the end of the collection.">Copia gli elementi della matrice di oggetti <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> specificata alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; that contains the objects to add to the collection.">Matrice di tipo <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; object to the end of the collection.">Copia il contenuto di un altro oggetto <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that contains the objects to add to the collection.">Oggetto <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> che contiene gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Gets or sets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object.">Ottiene o imposta un valore che indica se l'insieme contiene l'oggetto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to locate.">Oggetto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> da individuare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme contiene l'oggetto specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Consente di copiare gli oggetti dell'insieme in un'istanza della <see cref="T:System.Array" /> unidimensionale a partire dall'indice specificato.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionale che rappresenta la destinazione dei valori copiati dall'insieme.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Indice della matrice da cui iniziare l'inserimento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matrice di destinazione è multidimensionale.  
-oppure- 
Il numero degli elementi in <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> è maggiore dello spazio disponibile tra l'indice della matrice di destinazione specificata dal parametro <paramref name="index" /> e la fine della matrice di destinazione.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Il parametro <paramref name="index" /> è minore dell'indice minimo della matrice di destinazione.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object in the collection, if it exists in the collection.">Ottiene l'indice dell'oggetto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> specificato nell'insieme, se esistente.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to locate in the collection.">Oggetto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> da individuare nell'insieme.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">Indice nell'insieme dell'oggetto specificato, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object into the collection at the specified index.">Inserisce l'oggetto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> specificato nella raccolta in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Indice in base zero in corrispondenza del quale inserire l'oggetto specificato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to insert.">Oggetto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> da inserire.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object at the specified index.">Ottiene o imposta l'oggetto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Indice dell'insieme al quale accedere.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> in ciascun indice valido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Il parametro <paramref name="index" /> non è compreso nell'intervallo valido di indici per la raccolta.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object from the collection.">Rimuove l'oggetto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> specificato dalla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to remove from the collection.">Oggetto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> da rimuovere dalla raccolta.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Impossibile trovare l'oggetto specificato nell'insieme.</exception>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary vsli:raw="Represents a reference to the base class.">Rappresenta un riferimento alla classe di base.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBaseReferenceExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary vsli:raw="Represents an expression that consists of a binary operation between two expressions.">Rappresenta un'espressione composta da un'operazione binaria tra due espressioni.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; class using the specified parameters.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> con i parametri specificati.</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; on the left of the operator.">
        <see cref="T:System.CodeDom.CodeExpression" /> a sinistra dell'operatore.</param>
      <param name="op" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorType&quot; /&gt; indicating the type of operator.">
        <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> che indica il tipo di operatore.</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; on the right of the operator.">
        <see cref="T:System.CodeDom.CodeExpression" /> a destra dell'operatore.</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary vsli:raw="Gets or sets the code expression on the left of the operator.">Ottiene o imposta l'espressione del codice a sinistra dell'operatore.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the left operand.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'operando di sinistra.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary vsli:raw="Gets or sets the operator in the binary operator expression.">Ottiene o imposta l'operatore nell'espressione dell'operatore binario.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorType&quot; /&gt; that indicates the type of operator in the expression.">
        <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> che indica il tipo di operatore nell'espressione.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary vsli:raw="Gets or sets the code expression on the right of the operator.">Ottiene o imposta l'espressione del codice a destra dell'operatore.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the right operand.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'operando di destra.</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary vsli:raw="Defines identifiers for supported binary operators.">Definisce gli identificatori per gli operatori binari supportati.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary vsli:raw="Addition operator.">Operatore di addizione.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary vsli:raw="Assignment operator.">Operatore di assegnazione.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary vsli:raw="Bitwise and operator.">Operatore AND bit per bit.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary vsli:raw="Bitwise or operator.">Operatore OR bit per bit.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary vsli:raw="Boolean and operator. This represents a short circuiting operator. A short circuiting operator will evaluate only as many expressions as necessary before returning a correct value.">Operatore AND booleano. Rappresenta un operatore di corto circuito che calcola solo il numero di espressioni necessarie per restituire un valore corretto.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary vsli:raw="Boolean or operator. This represents a short circuiting operator. A short circuiting operator will evaluate only as many expressions as necessary before returning a correct value.">Operatore OR booleano. Rappresenta un operatore di corto circuito che calcola solo il numero di espressioni necessarie per restituire un valore corretto.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary vsli:raw="Division operator.">Operatore di divisione.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary vsli:raw="Greater than operator.">Operatore maggiore di.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary vsli:raw="Greater than or equal operator.">Operatore maggiore o uguale a.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary vsli:raw="Identity equal operator.">Operatore di uguaglianza per identità.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary vsli:raw="Identity not equal operator.">Operatore di non uguaglianza per identità.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary vsli:raw="Less than operator.">Operatore minore di.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary vsli:raw="Less than or equal operator.">Operatore minore o uguale a.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary vsli:raw="Modulus operator.">Operatore di modulo.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary vsli:raw="Multiplication operator.">Operatore di moltiplicazione.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary vsli:raw="Subtraction operator.">Operatore di sottrazione.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary vsli:raw="Value equal operator.">Operatore di uguaglianza per valore.</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary vsli:raw="Represents an expression cast to a data type or interface.">Rappresenta il cast di un'espressione in un tipo di dati o in un'interfaccia.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeCastExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeCastExpression" /> utilizzando il tipo di destinazione e l'espressione specificati.</summary>
      <param name="targetType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the destination type of the cast.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di destinazione del cast.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">
        <see cref="T:System.CodeDom.CodeExpression" /> da impostare.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeCastExpression" /> utilizzando il tipo di destinazione e l'espressione specificati.</summary>
      <param name="targetType" vsli:raw="The name of the destination type of the cast.">Nome del tipo di destinazione del cast.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">
        <see cref="T:System.CodeDom.CodeExpression" /> da impostare.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeCastExpression" /> utilizzando il tipo di destinazione e l'espressione specificati.</summary>
      <param name="targetType" vsli:raw="The destination data type of the cast.">Tipo di dati di destinazione del cast.</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">
        <see cref="T:System.CodeDom.CodeExpression" /> da impostare.</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary vsli:raw="Gets or sets the expression to cast.">Ottiene o imposta l'espressione di cui eseguire il cast.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the code to cast.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica il codice di cui eseguire il cast.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary vsli:raw="Gets or sets the destination type of the cast.">Ottiene o imposta il tipo di destinazione del cast.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the destination type to cast to.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di destinazione sul quale eseguire il cast.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary vsli:raw="Represents a &lt;see langword=&quot;catch&quot; /&gt; exception block of a &lt;see langword=&quot;try/catch&quot; /&gt; statement.">Rappresenta un blocco di eccezioni <see langword="catch" /> di un'istruzione <see langword="try/catch" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.CodeDom.CodeCatchClause" /> utilizzando il nome della variabile locale specificato per l'eccezione.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">Nome della variabile locale dichiarata nella clausola catch dell'eccezione. Ciò è facoltativo.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception and exception type.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.CodeDom.CodeCatchClause" /> utilizzando il nome della variabile locale per l'eccezione e il tipo di eccezione specificati.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">Nome della variabile locale dichiarata nella clausola catch dell'eccezione. Ciò è facoltativo.</param>
      <param name="catchExceptionType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of exception to catch.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di eccezione da intercettare.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception, exception type and statement collection.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.CodeDom.CodeCatchClause" /> utilizzando il nome della variabile locale per l'eccezione, il tipo di eccezione e l'insieme di istruzioni specificati.</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">Nome della variabile locale dichiarata nella clausola catch dell'eccezione. Ciò è facoltativo.</param>
      <param name="catchExceptionType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of exception to catch.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di eccezione da intercettare.</param>
      <param name="statements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that represent the contents of the catch block.">Matrice di oggetti <see cref="T:System.CodeDom.CodeStatement" /> che rappresentano il contenuto del blocco catch.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary vsli:raw="Gets or sets the type of the exception to handle with the catch block.">Ottiene o imposta il tipo di eccezione da gestire con il blocco catch.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the exception to handle.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di eccezione da gestire.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary vsli:raw="Gets or sets the variable name of the exception that the &lt;see langword=&quot;catch&quot; /&gt; clause handles.">Ottiene o imposta il nome della variabile dell'eccezione gestita dalla clausola <see langword="catch" />.</summary>
      <returns vsli:raw="The name for the exception variable that the &lt;see langword=&quot;catch&quot; /&gt; clause handles.">Nome della variabile dell'eccezione gestita dalla clausola <see langword="catch" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary vsli:raw="Gets the statements within the catch block.">Ottiene le istruzioni all'interno del blocco catch.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements within the catch block.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> contenente le istruzioni all'interno del blocco catch.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeCatchClauseCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> contenente la matrice specificata di oggetti <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects with which to initialize the collection.">Matrice di oggetti <see cref="T:System.CodeDom.CodeCatchClause" /> con cui inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Uno o più oggetti della matrice sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class containing the elements of the specified source collection.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> contenente gli elementi dell'insieme di origine specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> con il quale inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to the collection.">Aggiunge l'oggetto <see cref="T:System.CodeDom.CodeCatchClause" /> specificato alla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to add.">L'oggetto <see cref="T:System.CodeDom.CodeCatchClause" /> da aggiungere.</param>
      <returns vsli:raw="The index at which the new element was inserted.">L'indice in corrispondenza del quale è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; array to the end of the collection.">Copia gli elementi della matrice di oggetti <see cref="T:System.CodeDom.CodeCatchClause" /> specificata alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; that contains the objects to add to the collection.">Matrice di tipo <see cref="T:System.CodeDom.CodeCatchClause" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; object to the end of the collection.">Copia il contenuto di un altro oggetto <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; that contains the objects to add to the collection.">Oggetto <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> che contiene gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object.">Ottiene un valore che indica se l'insieme contiene l'oggetto <see cref="T:System.CodeDom.CodeCatchClause" /> specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to locate in the collection.">Oggetto <see cref="T:System.CodeDom.CodeCatchClause" /> da individuare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme contiene l'oggetto specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Consente di copiare gli oggetti dell'insieme in un'istanza della <see cref="T:System.Array" /> unidimensionale a partire dall'indice specificato.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionale che rappresenta la destinazione dei valori copiati dall'insieme.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Indice della matrice da cui iniziare l'inserimento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matrice di destinazione è multidimensionale.  
-oppure- 
Il numero degli elementi in <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> è maggiore dello spazio disponibile tra l'indice della matrice di destinazione specificata dal parametro <paramref name="index" /> e la fine della matrice di destinazione.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Il parametro <paramref name="index" /> è minore dell'indice minimo della matrice di destinazione.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object in the collection, if it exists in the collection.">Ottiene l'indice dell'oggetto <see cref="T:System.CodeDom.CodeCatchClause" /> specificato nell'insieme, se esistente.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to locate in the collection.">Oggetto <see cref="T:System.CodeDom.CodeCatchClause" /> da individuare nell'insieme.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">Indice dell'oggetto specificato, se presente nell'insieme, in caso contrario -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object into the collection at the specified index.">Inserisce l'oggetto <see cref="T:System.CodeDom.CodeCatchClause" /> specificato nella raccolta in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Indice in base zero in corrispondenza del quale inserire l'oggetto specificato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to insert.">Oggetto <see cref="T:System.CodeDom.CodeCatchClause" /> da inserire.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object at the specified index in the collection.">Ottiene o imposta l'oggetto <see cref="T:System.CodeDom.CodeCatchClause" /> nella raccolta, in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Indice dell'insieme al quale accedere.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object at each valid index.">Oggetto <see cref="T:System.CodeDom.CodeCatchClause" /> in corrispondenza di ciascun indice valido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Il parametro <paramref name="index" /> non è compreso nell'intervallo valido di indici per la raccolta.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object from the collection.">Rimuove l'oggetto <see cref="T:System.CodeDom.CodeCatchClause" /> specificato dalla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to remove from the collection.">Oggetto <see cref="T:System.CodeDom.CodeCatchClause" /> da rimuovere dalla raccolta.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Impossibile trovare l'oggetto specificato nell'insieme.</exception>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary vsli:raw="Represents a code checksum pragma code entity.">Rappresenta un'entità di codice pragma del checksum di un codice.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeChecksumPragma&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeChecksumPragma" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeChecksumPragma&quot; /&gt; class using a file name, a GUID representing the checksum algorithm, and a byte stream representing the checksum data.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeChecksumPragma" /> utilizzando un nome file, un GUID che rappresenta l'algoritmo di checksum e un flusso di byte che rappresenta i dati di checksum.</summary>
      <param name="fileName" vsli:raw="The path to the checksum file.">Percorso del file di checksum.</param>
      <param name="checksumAlgorithmId" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that identifies the checksum algorithm to use.">
        <see cref="T:System.Guid" /> che identifica l'algoritmo di checksum da utilizzare.</param>
      <param name="checksumData" vsli:raw="A byte array that contains the checksum data.">Matrice di byte che contiene i dati di checksum.</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary vsli:raw="Gets or sets a GUID that identifies the checksum algorithm to use.">Ottiene o imposta un GUID che identifica l'algoritmo di checksum da utilizzare.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that identifies the checksum algorithm to use.">
        <see cref="T:System.Guid" /> che identifica l'algoritmo di checksum da utilizzare.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary vsli:raw="Gets or sets the value of the data for the checksum calculation.">Ottiene o imposta il valore dei dati per il calcolo del checksum.</summary>
      <returns vsli:raw="A byte array that contains the data for the checksum calculation.">Matrice di byte che contiene i dati per il calcolo del checksum.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary vsli:raw="Gets or sets the path to the checksum file.">Ottiene o imposta il percorso del file di checksum.</summary>
      <returns vsli:raw="The path to the checksum file.">Percorso del file di checksum.</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary vsli:raw="Represents a comment.">Rappresenta un commento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeComment" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class with the specified text as contents.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeComment" /> utilizzando il testo specificato come contenuto.</summary>
      <param name="text" vsli:raw="The contents of the comment.">Contenuto del commento.</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class using the specified text and documentation comment flag.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeComment" />  con il testo e il flag di documentazione tratta dal commento specificati.</summary>
      <param name="text" vsli:raw="The contents of the comment.">Contenuto del commento.</param>
      <param name="docComment" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il commento è un commento relativo alla documentazione; in caso contrario <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary vsli:raw="Gets or sets a value that indicates whether the comment is a documentation comment.">Ottiene o imposta un valore che indica se il commento è relativo alla documentazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il commento è un commento relativo alla documentazione; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary vsli:raw="Gets or sets the text of the comment.">Ottiene o imposta il testo del commento.</summary>
      <returns vsli:raw="A string containing the comment text.">Stringa contenente il testo del commento.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary vsli:raw="Represents a statement consisting of a single comment.">Rappresenta un'istruzione composta da un singolo commento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified comment.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeCommentStatement" /> con il commento specificato.</summary>
      <param name="comment" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; that indicates the comment.">
        <see cref="T:System.CodeDom.CodeComment" /> che indica il commento.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified text as contents.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeCommentStatement" /> usando il testo specificato come contenuto.</summary>
      <param name="text" vsli:raw="The contents of the comment.">Contenuto del commento.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified text and documentation comment flag.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeCommentStatement" />  con il testo e il flag di documentazione tratta dal commento specificati.</summary>
      <param name="text" vsli:raw="The contents of the comment.">Contenuto del commento.</param>
      <param name="docComment" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il commento è un commento relativo alla documentazione; in caso contrario <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary vsli:raw="Gets or sets the contents of the comment.">Ottiene o imposta il contenuto del commento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; that indicates the comment.">
        <see cref="T:System.CodeDom.CodeComment" /> che indica il commento.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeCommentStatementCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> contenente la matrice specificata di oggetti <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects with which to initialize the collection.">Matrice di oggetti <see cref="T:System.CodeDom.CodeCommentStatement" /> con cui inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Uno o più oggetti della matrice sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class containing the elements of the specified source collection.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> contenente gli elementi dell'insieme di origine specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> con il quale inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to the collection.">Aggiunge l'oggetto <see cref="T:System.CodeDom.CodeCommentStatement" /> specificato alla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to add.">L'oggetto <see cref="T:System.CodeDom.CodeCommentStatement" /> da aggiungere.</param>
      <returns vsli:raw="The index at which the new element was inserted.">L'indice in corrispondenza del quale è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; array to the end of the collection.">Copia gli elementi della matrice di oggetti <see cref="T:System.CodeDom.CodeCommentStatement" /> specificata alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; that contains the objects to add to the collection.">Matrice di tipo <see cref="T:System.CodeDom.CodeCommentStatement" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; object to the end of the collection.">Copia il contenuto di un altro oggetto <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that contains the objects to add to the collection.">Oggetto <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> che contiene gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object.">Ottiene un valore che indica se l'insieme contiene l'oggetto <see cref="T:System.CodeDom.CodeCommentStatement" /> specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; to search for in the collection.">Oggetto <see cref="T:System.CodeDom.CodeCommentStatement" /> da cercare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme contiene l'oggetto specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; beginning at the specified index.">Consente di copiare gli oggetti dell'insieme nella <see cref="T:System.Array" /> unidimensionale specificata partendo dall'indice specificato.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionale che rappresenta la destinazione dei valori copiati dall'insieme.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Indice della matrice da cui iniziare l'inserimento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matrice di destinazione è multidimensionale.  
-oppure- 
Il numero degli elementi in <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> è maggiore dello spazio disponibile tra l'indice della matrice di destinazione specificata dal parametro <paramref name="index" /> e la fine della matrice di destinazione.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Il parametro <paramref name="index" /> è minore dell'indice minimo della matrice di destinazione.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object in the collection, if it exists in the collection.">Ottiene l'indice dell'oggetto <see cref="T:System.CodeDom.CodeCommentStatement" /> specificato nell'insieme, se esistente.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to locate.">Oggetto <see cref="T:System.CodeDom.CodeCommentStatement" /> da individuare.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">Indice dell'oggetto specificato, se presente nell'insieme, in caso contrario -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Inserts a &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object into the collection at the specified index.">Inserisce un oggetto <see cref="T:System.CodeDom.CodeCommentStatement" /> nell'insieme, in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index where the item should be inserted.">Indice in base zero in cui inserire l'elemento.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to insert.">Oggetto <see cref="T:System.CodeDom.CodeCommentStatement" /> da inserire.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object at the specified index in the collection.">Ottiene o imposta l'oggetto <see cref="T:System.CodeDom.CodeCommentStatement" /> nella raccolta, in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Indice dell'insieme al quale accedere.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object at each valid index.">Oggetto <see cref="T:System.CodeDom.CodeCommentStatement" /> in corrispondenza di ciascun indice valido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Il parametro <paramref name="index" /> non è compreso nell'intervallo valido di indici per la raccolta.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object from the collection.">Rimuove l'oggetto <see cref="T:System.CodeDom.CodeCommentStatement" /> specificato dalla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to remove from the collection.">Oggetto <see cref="T:System.CodeDom.CodeCommentStatement" /> da rimuovere dalla raccolta.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Impossibile trovare l'oggetto specificato nell'insieme.</exception>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary vsli:raw="Provides a container for a CodeDOM program graph.">Fornisce un contenitore per un grafico di programma CodeDOM.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary vsli:raw="Gets a collection of custom attributes for the generated assembly.">Restituisce un insieme di attributi personalizzati per l'assembly generato.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes for the generated assembly.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> che indica gli attributi personalizzati per l'assembly generato.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Ottiene un oggetto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> contenente le direttive finali.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Oggetto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> contenente le direttive finali.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary vsli:raw="Gets the collection of namespaces.">Restituisce l'insieme degli spazi dei nomi.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; that indicates the namespaces that the compile unit uses.">
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> che indica gli spazi dei nomi utilizzati dall'unità di compilazione.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary vsli:raw="Gets the referenced assemblies.">Restituisce gli assembly a cui si fa riferimento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.StringCollection&quot; /&gt; that contains the file names of the referenced assemblies.">
        <see cref="T:System.Collections.Specialized.StringCollection" /> che contiene i nomi file degli assembly cui si fa riferimento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Ottiene un oggetto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> contenente le direttive iniziali.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Oggetto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> contenente le direttive iniziali.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary vsli:raw="Represents a conditional branch statement, typically represented as an &lt;see langword=&quot;if&quot; /&gt; statement.">Rappresenta un'istruzione branch condizionale, normalmente rappresentata da un'istruzione <see langword="if" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeConditionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class using the specified condition and statements.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeConditionStatement" /> con la condizione e le istruzioni specificate.</summary>
      <param name="condition" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to evaluate.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'espressione da valutare.</param>
      <param name="trueStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;true&quot; /&gt;.">Matrice di tipo <see cref="T:System.CodeDom.CodeStatement" /> contenente le istruzioni da eseguire se la condizione è <see langword="true" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class using the specified condition and statements.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeConditionStatement" /> con la condizione e le istruzioni specificate.</summary>
      <param name="condition" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the condition to evaluate.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica la condizione da valutare.</param>
      <param name="trueStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;true&quot; /&gt;.">Matrice di tipo <see cref="T:System.CodeDom.CodeStatement" /> contenente le istruzioni da eseguire se la condizione è <see langword="true" />.</param>
      <param name="falseStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Matrice di tipo <see cref="T:System.CodeDom.CodeStatement" /> contenente le istruzioni da eseguire se la condizione è <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary vsli:raw="Gets or sets the expression to evaluate &lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">Ottiene o imposta l'espressione da valutare come <see langword="true" /> o <see langword="false" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to evaluate &lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeExpression" /> da valutare come <see langword="true" /> o <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary vsli:raw="Gets the collection of statements to execute if the conditional expression evaluates to &lt;see langword=&quot;false&quot; /&gt;.">Restituisce l'insieme di istruzioni da eseguire se l'espressione condizionale restituisce <see langword="false" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements to execute if the conditional expression evaluates to &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> che contiene le istruzioni da eseguire se l'espressione condizionale restituisce <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary vsli:raw="Gets the collection of statements to execute if the conditional expression evaluates to &lt;see langword=&quot;true&quot; /&gt;.">Restituisce l'insieme di istruzioni da eseguire se l'espressione condizionale restituisce <see langword="true" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements to execute if the conditional expression evaluates to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> che contiene le istruzioni da eseguire se l'espressione condizionale restituisce <see langword="true" />.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary vsli:raw="Represents a declaration for an instance constructor of a type.">Rappresenta una dichiarazione di un costruttore di istanze di un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConstructor&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeConstructor" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary vsli:raw="Gets the collection of base constructor arguments.">Restituisce l'insieme degli argomenti del costruttore di base.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the base constructor arguments.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> che contiene gli argomenti del costruttore base.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary vsli:raw="Gets the collection of chained constructor arguments.">Restituisce l'insieme degli argomenti concatenati del costruttore.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the chained constructor arguments.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> che contiene gli argomenti concatenati del costruttore.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary vsli:raw="Represents a reference to a default value.">Rappresenta un riferimento a un valore predefinito.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDefaultValueExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeDefaultValueExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDefaultValueExpression&quot; /&gt; class using the specified code type reference.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> utilizzando il riferimento al tipo di codice specificato.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that specifies the reference to a value type.">Oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> che specifica il riferimento a un tipo di valore.</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary vsli:raw="Gets or sets the data type reference for a default value.">Ottiene o imposta il riferimento al tipo di dati per un valore predefinito.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; object representing a data type that has a default value.">Oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> che rappresenta un tipo di dati a cui è associato un valore predefinito.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary vsli:raw="Represents an expression that creates a delegate.">Rappresenta un'espressione che crea un delegato.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateCreateExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateCreateExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />.</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the delegate.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati del delegato.</param>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object containing the event-handler method.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto contenente il metodo gestore eventi.</param>
      <param name="methodName" vsli:raw="The name of the event-handler method.">Nome del metodo gestore eventi.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary vsli:raw="Gets or sets the data type of the delegate.">Ottiene o imposta il tipo di dati del delegato.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the delegate.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati del delegato.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary vsli:raw="Gets or sets the name of the event handler method.">Ottiene o imposta il nome del metodo gestore eventi.</summary>
      <returns vsli:raw="The name of the event handler method.">Nome del metodo gestore eventi.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the event-handler method.">Ottiene o imposta l'oggetto che contiene il metodo gestore eventi.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object containing the event-handler method.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto contenente il metodo gestore eventi.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary vsli:raw="Represents an expression that raises an event.">Rappresenta un'espressione che genera un evento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class using the specified target object.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> con l'oggetto di destinazione specificato.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto di destinazione.</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class using the specified target object and parameters.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> con l'oggetto di destinazione e i parametri specificati.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto di destinazione.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters.">Matrice di oggetti <see cref="T:System.CodeDom.CodeExpression" /> che indicano i parametri.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary vsli:raw="Gets or sets the parameters to pass to the event handling methods attached to the event.">Ottiene o imposta i parametri da passare ai metodi di gestione degli eventi associati all'evento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the parameters to pass to the event handling methods attached to the event.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica i parametri da passare ai metodi di gestione degli eventi associati all'evento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary vsli:raw="Gets or sets the event to invoke.">Ottiene o imposta l'evento da richiamare.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event to invoke.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'evento da richiamare.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary vsli:raw="Represents an expression used as a method invoke parameter along with a reference direction indicator.">Rappresenta un'espressione utilizzata come parametro di richiamo del metodo con un indicatore di direzione di riferimento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectionExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeDirectionExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectionExpression&quot; /&gt; class using the specified field direction and expression.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeDirectionExpression" /> utilizzando l'espressione e la direzione del campo specificate.</summary>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt; that indicates the field direction of the expression.">
        <see cref="T:System.CodeDom.FieldDirection" /> che indica la direzione del campo dell'espressione.</param>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the code expression to represent.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'espressione del codice da rappresentare.</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary vsli:raw="Gets or sets the field direction for this direction expression.">Ottiene o imposta la direzione del campo per questa espressione di direzione.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt; that indicates the field direction for this direction expression.">
        <see cref="T:System.CodeDom.FieldDirection" /> che indica la direzione del campo dell'espressione di direzione.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary vsli:raw="Gets or sets the code expression to represent.">Ottiene o imposta l'espressione del codice da rappresentare.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to represent.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'espressione da rappresentare.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary vsli:raw="Serves as the base class for code directive classes.">Funge da classe base per le classi di direttive di codice.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeDirective" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.CodeDom.CodeDirective" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeDirectiveCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class with the code directive objects in the specified array.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeDirectiveCollection" /> con gli oggetti della direttiva del codice nella matrice specificata.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects with which to initialize the collection.">Matrice di oggetti <see cref="T:System.CodeDom.CodeDirective" /> con cui inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class with the elements in the specified code directive collection.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeDirectiveCollection" /> con gli elementi nell'insieme della direttiva del codice specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object with which to initialize the collection.">Oggetto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> con il quale inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to the collection.">Aggiunge l'oggetto <see cref="T:System.CodeDom.CodeDirective" /> specificato alla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to add.">L'oggetto <see cref="T:System.CodeDom.CodeDirective" /> da aggiungere.</param>
      <returns vsli:raw="The index position at which the new element was inserted.">Posizione di indice in corrispondenza della quale è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary vsli:raw="Adds an array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to the end of the collection.">Aggiunge una matrice di oggetti <see cref="T:System.CodeDom.CodeDirective" /> alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to add to the collection.">Matrice di oggetti <see cref="T:System.CodeDom.CodeDirective" /> da aggiungere alla raccolta.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object to the end of the collection.">Aggiunge il contenuto dell'oggetto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> specificato alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to add to the collection.">Oggetto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> contenente gli oggetti <see cref="T:System.CodeDom.CodeDirective" /> da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object.">Restituisce un valore che indica se l'insieme contiene l'oggetto <see cref="T:System.CodeDom.CodeDirective" /> specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to search for in the collection.">L'oggetto <see cref="T:System.CodeDom.CodeDirective" /> da cercare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme contiene l'oggetto specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary vsli:raw="Copies the contents of the collection to a one-dimensional array beginning at the specified index.">Copia il contenuto dell'insieme in una matrice unidimensionale a partire dall'indice specificato.</summary>
      <param name="array" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; that is the destination of the values copied from the collection.">Matrice di tipo <see cref="T:System.CodeDom.CodeDirective" /> che rappresenta la destinazione dei valori copiati dall'insieme.</param>
      <param name="index" vsli:raw="The index in the array at which to begin inserting collection objects.">Indice della matrice a partire dal quale iniziare l'inserimento degli oggetti dell'insieme.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; is greater than the available space between the index of the target array specified by &lt;paramref name=&quot;index&quot; /&gt; and the end of the target array.">La matrice di destinazione è multidimensionale.  
In alternativa 
Il numero degli elementi dell'oggetto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> è maggiore dello spazio disponibile tra l'indice della matrice di destinazione specificato dal parametro <paramref name="index" /> e la fine della matrice di destinazione.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the target array's minimum index.">
        <paramref name="index" /> è minore dell'indice minimo della matrice di destinazione.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object, if it exists in the collection.">Ottiene l'indice nell'insieme dell'oggetto <see cref="T:System.CodeDom.CodeDirective" /> specificato, se esistente nell'insieme.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to locate in the collection.">Oggetto <see cref="T:System.CodeDom.CodeDirective" /> da individuare nell'insieme.</param>
      <returns vsli:raw="The index position in the collection of the specified object, if found; otherwise, -1.">Posizione di indice nell'insieme dell'oggetto specificato, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object into the collection at the specified index.">Inserisce l'oggetto <see cref="T:System.CodeDom.CodeDirective" /> specificato nella raccolta in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index position where the specified object should be inserted.">Posizione di indice in base zero in corrispondenza della quale inserire l'oggetto specificato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to insert.">Oggetto <see cref="T:System.CodeDom.CodeDirective" /> da inserire.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.CollectionBase.Count&quot; /&gt;.">
        <paramref name="index" /> è minore di 0.  
In alternativa 
 <paramref name="index" /> è maggiore di <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object at the specified index in the collection.">Ottiene o imposta l'oggetto <see cref="T:System.CodeDom.CodeDirective" /> nella raccolta, in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index position to access.">Posizione di indice alla quale accedere.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; at the index position.">Oggetto <see cref="T:System.CodeDom.CodeDirective" /> in corrispondenza della posizione di indice.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the valid range of index positions for the collection.">
        <paramref name="index" /> non è compreso nell'intervallo valido di posizioni di indice per l'insieme.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object from the collection.">Rimuove l'oggetto <see cref="T:System.CodeDom.CodeDirective" /> specificato dalla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to remove from the collection.">Oggetto <see cref="T:System.CodeDom.CodeDirective" /> da rimuovere dalla raccolta.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Impossibile trovare l'oggetto specificato nell'insieme.</exception>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary vsli:raw="Represents the entry point method of an executable.">Rappresenta il metodo del punto di ingresso di un eseguibile.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEntryPointMethod&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeEntryPointMethod" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary vsli:raw="Represents a reference to an event.">Rappresenta un riferimento a un evento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeEventReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; class using the specified target object and event name.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> con l'oggetto di destinazione e il nome dell'evento specificati.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto che contiene l'evento.</param>
      <param name="eventName" vsli:raw="The name of the event to reference.">Nome dell'evento a cui fare riferimento.</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary vsli:raw="Gets or sets the name of the event.">Ottiene o imposta il nome dell'evento.</summary>
      <returns vsli:raw="The name of the event.">Nome dell'evento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the event.">Ottiene o imposta l'oggetto che contiene l'evento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto che contiene l'evento.</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary vsli:raw="Represents a code expression. This is a base class for other code expression objects that is never instantiated.">Rappresenta un'espressione del codice. È una classe base per altri oggetti espressione del codice di cui non viene mai creata un'istanza.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.CodeDom.CodeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeExpressionCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeExpressionCollection" /> contenente la matrice specificata di oggetti <see cref="T:System.CodeDom.CodeExpression" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects with which to initialize the collection.">Matrice di oggetti <see cref="T:System.CodeDom.CodeExpression" /> con cui inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Uno o più oggetti della matrice sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class containing the elements of the specified source collection.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeExpressionCollection" /> contenente gli elementi dell'insieme di origine specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> con il quale inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to the collection.">Aggiunge l'oggetto <see cref="T:System.CodeDom.CodeExpression" /> specificato alla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to add.">L'oggetto <see cref="T:System.CodeDom.CodeExpression" /> da aggiungere.</param>
      <returns vsli:raw="The index at which the new element was inserted.">L'indice in corrispondenza del quale è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">Consente di copiare gli elementi della matrice specificata alla fine della raccolta.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that contains the objects to add to the collection.">Matrice di tipo <see cref="T:System.CodeDom.CodeExpression" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; object to the end of the collection.">Copia il contenuto di un altro oggetto <see cref="T:System.CodeDom.CodeExpressionCollection" /> alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the objects to add to the collection.">Oggetto <see cref="T:System.CodeDom.CodeExpressionCollection" /> che contiene gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object.">Ottiene un valore che indica se l'insieme contiene l'oggetto <see cref="T:System.CodeDom.CodeExpression" /> specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to locate in the collection.">Oggetto <see cref="T:System.CodeDom.CodeExpression" /> da individuare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme contiene l'oggetto specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Consente di copiare gli oggetti dell'insieme in un'istanza della <see cref="T:System.Array" /> unidimensionale a partire dall'indice specificato.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionale che rappresenta la destinazione dei valori copiati dall'insieme.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Indice della matrice da cui iniziare l'inserimento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matrice di destinazione è multidimensionale.  
-oppure- 
Il numero degli elementi in <see cref="T:System.CodeDom.CodeExpressionCollection" /> è maggiore dello spazio disponibile tra l'indice della matrice di destinazione specificata dal parametro <paramref name="index" /> e la fine della matrice di destinazione.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Il parametro <paramref name="index" /> è minore dell'indice minimo della matrice di destinazione.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object in the collection, if it exists in the collection.">Ottiene l'indice dell'oggetto <see cref="T:System.CodeDom.CodeExpression" /> specificato nell'insieme, se esistente.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to locate in the collection.">Oggetto <see cref="T:System.CodeDom.CodeExpression" /> da individuare nell'insieme.</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">Indice dell'oggetto specificato, se presente nell'insieme, in caso contrario -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object into the collection at the specified index.">Inserisce l'oggetto <see cref="T:System.CodeDom.CodeExpression" /> specificato nella raccolta in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Indice in base zero in corrispondenza del quale inserire l'oggetto specificato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to insert.">Oggetto <see cref="T:System.CodeDom.CodeExpression" /> da inserire.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object at the specified index in the collection.">Ottiene o imposta l'oggetto <see cref="T:System.CodeDom.CodeExpression" /> nella raccolta, in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the collection to access.">Indice in base zero dell'insieme al quale accedere.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object at each valid index.">Oggetto <see cref="T:System.CodeDom.CodeExpression" /> in corrispondenza di ciascun indice valido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Il parametro <paramref name="index" /> non è compreso nell'intervallo valido di indici per la raccolta.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object from the collection.">Rimuove l'oggetto <see cref="T:System.CodeDom.CodeExpression" /> specificato dalla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to remove from the collection.">Oggetto <see cref="T:System.CodeDom.CodeExpression" /> da rimuovere dalla raccolta.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Impossibile trovare l'oggetto specificato nell'insieme.</exception>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary vsli:raw="Represents a statement that consists of a single expression.">Rappresenta un'istruzione costituita da un'unica espressione.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionStatement&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeExpressionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionStatement&quot; /&gt; class by using the specified expression.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeExpressionStatement" /> utilizzando l'espressione specificata.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; for the statement.">
        <see cref="T:System.CodeDom.CodeExpression" /> per l'istruzione.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary vsli:raw="Gets or sets the expression for the statement.">Ottiene o imposta l'espressione per l'istruzione.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression for the statement.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'espressione per l'istruzione.</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary vsli:raw="Represents a reference to a field.">Rappresenta un riferimento a un campo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeFieldReferenceExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeFieldReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeFieldReferenceExpression&quot; /&gt; class using the specified target object and field name.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> con l'oggetto di destinazione e il nome di campo specificati.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the field.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto che contiene il campo.</param>
      <param name="fieldName" vsli:raw="The name of the field.">Nome del campo.</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary vsli:raw="Gets or sets the name of the field to reference.">Ottiene o imposta il nome del campo cui fare riferimento.</summary>
      <returns vsli:raw="A string containing the field name.">Stringa contenente il nome del campo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the field to reference.">Ottiene o imposta l'oggetto che contiene il campo cui fare riferimento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the field to reference.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto che contiene il campo cui fare riferimento.</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;goto&quot; /&gt; statement.">Rappresenta un'istruzione <see langword="goto" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeGotoStatement&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeGotoStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeGotoStatement&quot; /&gt; class using the specified label name.">Inizializza una nuova istanza di <see cref="T:System.CodeDom.CodeGotoStatement" /> con il nome di etichetta specificato.</summary>
      <param name="label" vsli:raw="The name of the label at which to continue program execution.">Nome dell'etichetta in corrispondenza del quale proseguire l'esecuzione del programma.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;Label&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="Label" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary vsli:raw="Gets or sets the name of the label at which to continue program execution.">Ottiene o imposta il nome dell'etichetta in corrispondenza della quale proseguire l'esecuzione del programma.</summary>
      <returns vsli:raw="A string that indicates the name of the label at which to continue program execution.">Stringa che indica il nome dell'etichetta in corrispondenza della quale proseguire l'esecuzione del programma.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The label cannot be set because &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.">Non è possibile impostare l'etichetta perché <paramref name="value" /> è <see langword="null" /> o una stringa vuota.</exception>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary vsli:raw="Represents a reference to an indexer property of an object.">Rappresenta un riferimento a una proprietà indicizzatore di un oggetto.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIndexerExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeIndexerExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIndexerExpression&quot; /&gt; class using the specified target object and index.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeIndexerExpression" /> con l'oggetto di destinazione e l'indice specificati.</summary>
      <param name="targetObject" vsli:raw="The target object.">Oggetto di destinazione.</param>
      <param name="indices" vsli:raw="The index or indexes of the indexer expression.">Indice o indici dell'espressione dell'indicizzatore.</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary vsli:raw="Gets the collection of indexes of the indexer expression.">Restituisce l'insieme di indici dell'espressione dell'indicizzatore.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the index or indexes of the indexer expression.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> che indica l'indice o gli indici dell'espressione dell'indicizzatore.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary vsli:raw="Gets or sets the target object that can be indexed.">Ottiene o imposta l'oggetto di destinazione che può essere indicizzato.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the indexer object.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto indicizzatore.</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;for&quot; /&gt; statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop.">Rappresenta un'istruzione <see langword="for" /> o un ciclo in un blocco di istruzioni che utilizza un'espressione di test come condizione per la continuazione del ciclo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIterationStatement&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeIterationStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIterationStatement&quot; /&gt; class using the specified parameters.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeIterationStatement" /> con i parametri specificati.</summary>
      <param name="initStatement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the loop initialization statement.">
        <see cref="T:System.CodeDom.CodeStatement" /> che contiene l'istruzione di inizializzazione del ciclo.</param>
      <param name="testExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; containing the expression to test for exit condition.">
        <see cref="T:System.CodeDom.CodeExpression" /> che contiene l'espressione da sottoporre a test per una condizione di uscita.</param>
      <param name="incrementStatement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the per-cycle increment statement.">
        <see cref="T:System.CodeDom.CodeStatement" /> che contiene l'istruzione di incremento per ciclo.</param>
      <param name="statements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements within the loop.">Matrice di tipo <see cref="T:System.CodeDom.CodeStatement" /> che contiene le istruzioni all'interno del ciclo.</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary vsli:raw="Gets or sets the statement that is called after each loop cycle.">Ottiene o imposta l'istruzione che viene chiamata dopo ogni iterazione del ciclo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the per cycle increment statement.">
        <see cref="T:System.CodeDom.CodeStatement" /> che indica l'istruzione di incremento per ciclo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary vsli:raw="Gets or sets the loop initialization statement.">Ottiene o imposta l'istruzione di inizializzazione del ciclo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the loop initialization statement.">
        <see cref="T:System.CodeDom.CodeStatement" /> che indica l'istruzione di inizializzazione del ciclo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary vsli:raw="Gets the collection of statements to be executed within the loop.">Restituisce l'insieme di istruzioni da eseguire all'interno del ciclo.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the statements within the loop.">Matrice di tipo <see cref="T:System.CodeDom.CodeStatement" /> che indica le istruzioni all'interno del ciclo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary vsli:raw="Gets or sets the expression to test as the condition that continues the loop.">Ottiene o imposta l'espressione da sottoporre a test come condizione per continuare il ciclo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to test.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'espressione da sottoporre a test.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary vsli:raw="Represents a labeled statement or a stand-alone label.">Rappresenta un'istruzione con etichetta o un'etichetta autonoma.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeLabeledStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class using the specified label name.">Inizializza una nuova istanza di <see cref="T:System.CodeDom.CodeLabeledStatement" /> con il nome di etichetta specificato.</summary>
      <param name="label" vsli:raw="The name of the label.">Nome dell'etichetta.</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class using the specified label name and statement.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeLabeledStatement" /> utilizzando il nome dell'etichetta e l'istruzione specificati.</summary>
      <param name="label" vsli:raw="The name of the label.">Nome dell'etichetta.</param>
      <param name="statement" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to associate with the label.">
        <see cref="T:System.CodeDom.CodeStatement" /> da associare all'etichetta.</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary vsli:raw="Gets or sets the name of the label.">Ottiene o imposta il nome dell'etichetta.</summary>
      <returns vsli:raw="The name of the label.">Nome dell'etichetta.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary vsli:raw="Gets or sets the optional associated statement.">Ottiene o imposta l'istruzione facoltativa associata.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the statement associated with the label.">
        <see cref="T:System.CodeDom.CodeStatement" /> che indica l'istruzione associata all'etichetta.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary vsli:raw="Represents a specific location within a specific file.">Rappresenta una posizione specifica all'interno di un determinato file.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeLinePragma" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeLinePragma" />.</summary>
      <param name="fileName" vsli:raw="The file name of the associated file.">Nome del file associato.</param>
      <param name="lineNumber" vsli:raw="The line number to store a reference to.">Numero della riga in cui memorizzare un riferimento.</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary vsli:raw="Gets or sets the name of the associated file.">Ottiene o imposta il nome del file associato.</summary>
      <returns vsli:raw="The file name of the associated file.">Nome del file associato.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary vsli:raw="Gets or sets the line number of the associated reference.">Ottiene o imposta il numero di riga del riferimento associato.</summary>
      <returns vsli:raw="The line number.">Numero di riga.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary vsli:raw="Represents a declaration for an event of a type.">Rappresenta una dichiarazione per un evento di un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberEvent&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeMemberEvent" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary vsli:raw="Gets or sets the data type that the member event implements.">Ottiene o imposta il tipo di dati implementati dall'evento membro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the data type or types that the member event implements.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> che indica il tipo o i tipi di dati che l'evento membro implementa.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the privately implemented data type, if any.">Ottiene o imposta il tipo di dati implementati in modo privato, se presenti.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type that the event privately implements.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati che l'evento implementa in modo privato.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary vsli:raw="Gets or sets the data type of the delegate type that handles the event.">Ottiene o imposta il tipo di dati del tipo di delegato che gestisce l'evento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the delegate type that handles the event.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di delegato che gestisce l'evento.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary vsli:raw="Represents a declaration for a field of a type.">Rappresenta una dichiarazione per un campo di un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeMemberField" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeMemberField" /> utilizzando il tipo e il nome di campo specificati.</summary>
      <param name="type" vsli:raw="An object that indicates the type of the field.">Oggetto che indica il tipo del campo.</param>
      <param name="name" vsli:raw="The name of the field.">Nome del campo.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeMemberField" /> utilizzando il tipo e il nome di campo specificati.</summary>
      <param name="type" vsli:raw="The type of the field.">Tipo del campo.</param>
      <param name="name" vsli:raw="The name of the field.">Nome del campo.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeMemberField" /> utilizzando il tipo e il nome di campo specificati.</summary>
      <param name="type" vsli:raw="The type of the field.">Tipo del campo.</param>
      <param name="name" vsli:raw="The name of the field.">Nome del campo.</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary vsli:raw="Gets or sets the initialization expression for the field.">Ottiene o imposta l'espressione di inizializzazione per il campo.</summary>
      <returns vsli:raw="The initialization expression for the field.">Espressione di inizializzazione per il campo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary vsli:raw="Gets or sets the type of the field.">Ottiene o imposta il tipo del campo.</summary>
      <returns vsli:raw="The type of the field.">Tipo del campo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary vsli:raw="Represents a declaration for a method of a type.">Rappresenta una dichiarazione per un metodo di un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberMethod&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeMemberMethod" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary vsli:raw="Gets the data types of the interfaces implemented by this method, unless it is a private method implementation, which is indicated by the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.PrivateImplementationType&quot; /&gt; property.">Restituisce i tipi di dati delle interfacce implementate da questo metodo, a meno che si tratti dell'implementazione di un metodo privato, indicata dalla proprietà <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the interfaces implemented by this method.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> che indica le interfacce implementate da questo metodo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary vsli:raw="Gets the parameter declarations for the method.">Restituisce le dichiarazioni dei parametri relativi al metodo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the method parameters.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> che indica i parametri del metodo.</returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.ImplementationTypes&quot; /&gt; collection is accessed.">Evento che verrà generato al primo accesso all'insieme <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.Parameters&quot; /&gt; collection is accessed.">Evento che verrà generato al primo accesso all'insieme <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.Statements&quot; /&gt; collection is accessed.">Evento che verrà generato al primo accesso all'insieme <see cref="P:System.CodeDom.CodeMemberMethod.Statements" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the data type of the interface this method, if private, implements a method of, if any.">Ottiene o imposta il tipo di dati dell'interfaccia di cui il metodo, se privato, implementa un metodo, se esistente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the interface with the method that the private method whose declaration is represented by this &lt;see cref=&quot;T:System.CodeDom.CodeMemberMethod&quot; /&gt; implements.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati dell'interfaccia con il metodo implementato dal metodo privato la cui dichiarazione è rappresentata da questo <see cref="T:System.CodeDom.CodeMemberMethod" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary vsli:raw="Gets or sets the data type of the return value of the method.">Ottiene o imposta il tipo di dati del valore restituito dal metodo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the value returned by the method.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati del valore restituito dal metodo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the return type of the method.">Restituisce gli attributi personalizzati del tipo restituito dal metodo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> che indica gli attributi personalizzati.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary vsli:raw="Gets the statements within the method.">Restituisce le istruzioni all'interno del metodo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the statements within the method.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> che indica le istruzioni all'interno del metodo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary vsli:raw="Gets the type parameters for the current generic method.">Ottiene i parametri del tipo per il metodo generico corrente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; that contains the type parameters for the generic method.">Oggetto <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> che contiene i parametri del tipo del metodo generico.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary vsli:raw="Represents a declaration for a property of a type.">Rappresenta una dichiarazione di una proprietà di un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberProperty&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeMemberProperty" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary vsli:raw="Gets the collection of &lt;see langword=&quot;get&quot; /&gt; statements for the property.">Restituisce l'insieme delle istruzioni <see langword="get" /> della proprietà.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that contains the &lt;see langword=&quot;get&quot; /&gt; statements for the member property.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> che contiene le istruzioni <see langword="get" /> per la proprietà del membro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary vsli:raw="Gets or sets a value indicating whether the property has a &lt;see langword=&quot;get&quot; /&gt; method accessor.">Ottiene o imposta un valore che indica se la proprietà dispone di una funzione di accesso al metodo <see langword="get" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see langword=&quot;Count&quot; /&gt; property of the &lt;see cref=&quot;P:System.CodeDom.CodeMemberProperty.GetStatements&quot; /&gt; collection is non-zero, or if the value of this property has been set to &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la proprietà <see langword="Count" /> dell'insieme <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" /> è diversa da zero oppure se il valore di questa proprietà è stato impostato su <see langword="true" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary vsli:raw="Gets or sets a value indicating whether the property has a &lt;see langword=&quot;set&quot; /&gt; method accessor.">Ottiene o imposta un valore che indica se la proprietà dispone di una funzione di accesso al metodo <see langword="set" />.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Collections.CollectionBase.Count&quot; /&gt; property of the &lt;see cref=&quot;P:System.CodeDom.CodeMemberProperty.SetStatements&quot; /&gt; collection is non-zero; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la proprietà <see cref="P:System.Collections.CollectionBase.Count" /> dell'insieme <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" /> è diversa da zero; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary vsli:raw="Gets the data types of any interfaces that the property implements.">Restituisce i tipi di dati di qualsiasi interfaccia implementata dalla proprietà.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the data types the property implements.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> che indica il tipo di dati implementato dalla proprietà.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary vsli:raw="Gets the collection of declaration expressions for the property.">Restituisce l'insieme delle espressioni di dichiarazione della proprietà.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the declaration expressions for the property.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> che indica le espressioni di dichiarazione per la proprietà.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the data type of the interface, if any, this property, if private, implements.">Ottiene o imposta il tipo di dati dell'interfaccia, se esistente, implementata da questa proprietà, se privata.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the interface, if any, the property, if private, implements.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati dell'interfaccia, se esistente, implementata dalla proprietà, se privata.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary vsli:raw="Gets the collection of &lt;see langword=&quot;set&quot; /&gt; statements for the property.">Restituisce l'insieme delle istruzioni <see langword="set" /> della proprietà.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that contains the &lt;see langword=&quot;set&quot; /&gt; statements for the member property.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> che contiene le istruzioni <see langword="set" /> per la proprietà del membro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary vsli:raw="Gets or sets the data type of the property.">Ottiene o imposta il tipo di dati della proprietà.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the property.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati della proprietà.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary vsli:raw="Represents an expression that invokes a method.">Rappresenta un'espressione che richiama un metodo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class using the specified target object, method name, and parameters.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> con l'oggetto di destinazione, il nome del metodo e i parametri specificati.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object with the method to invoke.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto di destinazione con il metodo da richiamare.</param>
      <param name="methodName" vsli:raw="The name of the method to invoke.">Il nome del metodo da chiamare.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters to call the method with.">Matrice di oggetti <see cref="T:System.CodeDom.CodeExpression" /> che indicano i parametri con i quali richiamare il metodo.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class using the specified method and parameters.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> con i parametri e i metodi specificati.</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; that indicates the method to invoke.">
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> che indica il metodo da richiamare.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters with which to invoke the method.">Matrice di oggetti <see cref="T:System.CodeDom.CodeExpression" /> che indicano i parametri con i quali richiamare il metodo.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary vsli:raw="Gets or sets the method to invoke.">Ottiene o imposta il metodo da richiamare.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; that indicates the method to invoke.">
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> che indica il metodo da richiamare.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary vsli:raw="Gets the parameters to invoke the method with.">Restituisce i parametri con cui richiamare il metodo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the parameters to invoke the method with.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> che indica i parametri con cui richiamare il metodo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary vsli:raw="Represents a reference to a method.">Rappresenta un riferimento a un metodo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class using the specified target object and method name.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> con l'oggetto di destinazione e il nome del metodo specificati.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object to target.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto di destinazione.</param>
      <param name="methodName" vsli:raw="The name of the method to call.">Nome del metodo da chiamare.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class using the specified target object, method name, and generic type arguments.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> utilizzando l'oggetto di destinazione, il nome del metodo e gli argomenti del tipo generici specificati.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object to target.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto di destinazione.</param>
      <param name="methodName" vsli:raw="The name of the method to call.">Nome del metodo da chiamare.</param>
      <param name="typeParameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; values that specify the &lt;see cref=&quot;P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments&quot; /&gt; for this &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt;.">Matrice di valori <see cref="T:System.CodeDom.CodeTypeReference" /> che specificano gli argomenti <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" /> per l'oggetto <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary vsli:raw="Gets or sets the name of the method to reference.">Ottiene o imposta il nome del metodo a cui fare riferimento.</summary>
      <returns vsli:raw="The name of the method to reference.">Nome del metodo a cui fare riferimento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the expression that indicates the method to reference.">Ottiene o imposta l'espressione che indica il metodo a cui fare riferimento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the method to reference.">
        <see cref="T:System.CodeDom.CodeExpression" /> che rappresenta il metodo a cui fare riferimento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary vsli:raw="Gets the type arguments for the current generic method reference expression.">Ottiene gli argomenti del tipo per l'espressione di riferimento al metodo generico corrente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the type arguments for the current code &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt;.">Oggetto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> che contiene gli argomenti del tipo dell'oggetto <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> del codice corrente.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary vsli:raw="Represents a return value statement.">Rappresenta un'istruzione per la restituzione di valori.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReturnStatement&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeMethodReturnStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReturnStatement&quot; /&gt; class using the specified expression.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> con l'espressione specificata.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the return value.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica il valore restituito.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary vsli:raw="Gets or sets the return value.">Ottiene o imposta il valore restituito.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the value to return for the return statement, or &lt;see langword=&quot;null&quot; /&gt; if the statement is part of a subroutine.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica il valore da restituire per l'istruzione return, oppure <see langword="null" /> se l'istruzione è parte di una subroutine.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary vsli:raw="Represents a namespace declaration.">Rappresenta una dichiarazione dello spazio dei nomi.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; class using the specified name.">Inizializza una nuova istanza per la classe <see cref="T:System.CodeDom.CodeNamespace" /> usando il nome specificato.</summary>
      <param name="name" vsli:raw="The name of the namespace being declared.">Nome dello spazio dei nomi da dichiarare.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary vsli:raw="Gets the comments for the namespace.">Ottiene i commenti per lo spazio dei nomi.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that indicates the comments for the namespace.">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> che indica i commenti per lo spazio dei nomi.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary vsli:raw="Gets the collection of namespace import directives used by the namespace.">Ottiene l'insieme delle direttive di importazione dello spazio dei nomi utilizzate dallo spazio dei nomi.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImportCollection&quot; /&gt; that indicates the namespace import directives used by the namespace.">
        <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> che indica le direttive di importazione dello spazio dei nomi utilizzate dallo spazio dei nomi.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary vsli:raw="Gets or sets the name of the namespace.">Ottiene o imposta il nome dello spazio dei nomi.</summary>
      <returns vsli:raw="The name of the namespace.">Nome dello spazio dei nomi.</returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Comments&quot; /&gt; collection is accessed.">Evento che verrà generato al primo accesso all'insieme <see cref="P:System.CodeDom.CodeNamespace.Comments" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Imports&quot; /&gt; collection is accessed.">Evento che verrà generato al primo accesso all'insieme <see cref="P:System.CodeDom.CodeNamespace.Imports" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Types&quot; /&gt; collection is accessed.">Evento che verrà generato al primo accesso all'insieme <see cref="P:System.CodeDom.CodeNamespace.Types" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary vsli:raw="Gets the collection of types that the namespace contains.">Ottiene l'insieme dei tipi contenuti nello spazio dei nomi.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; that indicates the types contained in the namespace.">
        <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> che indica i tipi contenuti nello spazio dei nomi.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeNamespaceCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeNamespaceCollection" /> contenente la matrice specificata di oggetti <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects with which to initialize the collection.">Matrice di oggetti <see cref="T:System.CodeDom.CodeNamespace" /> con cui inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">Uno o più oggetti della matrice sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class that contains the elements of the specified source collection.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeNamespaceCollection" /> contenente gli elementi dell'insieme di origine specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> con la quale inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object to the collection.">Aggiunge l'oggetto <see cref="T:System.CodeDom.CodeNamespace" /> specificato alla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to add.">Oggetto <see cref="T:System.CodeDom.CodeNamespace" /> da aggiungere.</param>
      <returns vsli:raw="The index at which the new element was inserted.">L'indice in corrispondenza del quale è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; array to the end of the collection.">Copia gli elementi della matrice di oggetti <see cref="T:System.CodeDom.CodeNamespace" /> specificata alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; that contains the objects to add to the collection.">Matrice di tipo <see cref="T:System.CodeDom.CodeNamespace" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; object to the end of the collection.">Aggiunge il contenuto dell'oggetto <see cref="T:System.CodeDom.CodeNamespaceCollection" /> specificato alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; that contains the objects to add to the collection.">Oggetto <see cref="T:System.CodeDom.CodeNamespaceCollection" /> che contiene gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object.">Ottiene un valore che indica se l'insieme contiene l'oggetto <see cref="T:System.CodeDom.CodeNamespace" /> specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to search for in the collection.">Oggetto <see cref="T:System.CodeDom.CodeNamespace" /> da cercare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <see cref="T:System.CodeDom.CodeNamespace" /> è incluso nella raccolta; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">Copia gli oggetti dell'insieme in un'istanza dell'oggetto <see cref="T:System.Array" /> unidimensionale, a partire dall'indice specificato.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionale che rappresenta la destinazione dei valori copiati dall'insieme.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Indice della matrice da cui iniziare l'inserimento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matrice di destinazione è multidimensionale.  
In alternativa 
Il numero degli elementi in <see cref="T:System.CodeDom.CodeNamespaceCollection" /> è maggiore dello spazio disponibile tra l'indice della matrice di destinazione specificata dal parametro <paramref name="index" /> e la fine della matrice di destinazione.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Il parametro <paramref name="index" /> è minore dell'indice minimo della matrice di destinazione.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt;, if it exists in the collection.">Ottiene l'indice dell'oggetto <see cref="T:System.CodeDom.CodeNamespace" /> specificato in <see cref="T:System.CodeDom.CodeNamespaceCollection" />, se esistente.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to locate.">La classe <see cref="T:System.CodeDom.CodeNamespace" /> da individuare.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt;, if it is found, in the collection; otherwise, -1.">Indice dell'oggetto <see cref="T:System.CodeDom.CodeNamespace" /> specificato, se trovato nell'insieme, in caso contrario -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object into the collection at the specified index.">Inserisce l'oggetto <see cref="T:System.CodeDom.CodeNamespace" /> specificato nella raccolta in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index where the new item should be inserted.">Indice in base zero in cui inserire il nuovo elemento.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to insert.">Oggetto <see cref="T:System.CodeDom.CodeNamespace" /> da inserire.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; object at the specified index in the collection.">Ottiene o imposta l'oggetto <see cref="T:System.CodeDom.CodeNamespaceCollection" /> nella raccolta, in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Indice dell'insieme al quale accedere.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.CodeNamespace" /> in ciascun indice valido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Il parametro <paramref name="index" /> non è compreso nell'intervallo valido di indici per la raccolta.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object from the collection.">Rimuove l'oggetto <see cref="T:System.CodeDom.CodeNamespace" /> specificato dalla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to remove from the collection.">Oggetto <see cref="T:System.CodeDom.CodeNamespace" /> da rimuovere dalla raccolta.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Impossibile trovare l'oggetto specificato nell'insieme.</exception>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary vsli:raw="Represents a namespace import directive that indicates a namespace to use.">Rappresenta una direttiva di importazione dello spazio dei nomi che indica uno spazio dei nomi da utilizzare.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeNamespaceImport" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; class using the specified namespace to import.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeNamespaceImport" /> con lo spazio dei nomi specificato per l'importazione.</summary>
      <param name="nameSpace" vsli:raw="The name of the namespace to import.">Nome dello spazio dei nomi da importare.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary vsli:raw="Gets or sets the line and file the statement occurs on.">Ottiene o imposta la riga e il file in cui è presente l'istruzione.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; that indicates the context of the statement.">
        <see cref="T:System.CodeDom.CodeLinePragma" /> che indica il contesto dell'istruzione.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary vsli:raw="Gets or sets the namespace to import.">Ottiene o imposta lo spazio dei nomi da importare.</summary>
      <returns vsli:raw="The name of the namespace to import.">Nome dello spazio dei nomi da importare.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.CodeDom.CodeNamespaceImport" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImportCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object to the collection.">Aggiunge un oggetto <see cref="T:System.CodeDom.CodeNamespaceImport" /> alla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object to add to the collection.">Oggetto <see cref="T:System.CodeDom.CodeNamespaceImport" /> da aggiungere alla raccolta.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary vsli:raw="Adds a set of &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; objects to the collection.">Aggiunge un gruppo di oggetti <see cref="T:System.CodeDom.CodeNamespaceImport" /> alla raccolta.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; that contains the objects to add to the collection.">Matrice di tipo <see cref="T:System.CodeDom.CodeNamespaceImport" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary vsli:raw="Clears the collection of members.">Consente di cancellare l'insieme di membri.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary vsli:raw="Gets the number of namespaces in the collection.">Restituisce il numero degli spazi dei nomi contenuti nell'insieme.</summary>
      <returns vsli:raw="The number of namespaces in the collection.">Numero di spazi dei nomi nell'insieme.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that enumerates the collection members.">Restituisce un enumeratore che enumera i membri dell'insieme.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that indicates the collection members.">
        <see cref="T:System.Collections.IEnumerator" /> che indica i membri dell'insieme.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object at the specified index in the collection.">Ottiene o imposta l'oggetto <see cref="T:System.CodeDom.CodeNamespaceImport" /> nella raccolta, in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Indice dell'insieme al quale accedere.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object at each valid index.">Oggetto <see cref="T:System.CodeDom.CodeNamespaceImport" /> in corrispondenza di ciascun indice valido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Il parametro <paramref name="index" /> non è compreso nell'intervallo valido di indici per la raccolta.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia gli elementi di <see cref="T:System.Collections.ICollection" /> in <see cref="T:System.Array" /> a partire da un particolare indice <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">Oggetto unidimensionale <see cref="T:System.Array" /> che rappresenta la destinazione degli elementi copiati da <see cref="T:System.Collections.ICollection" />. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ottiene il numero di elementi contenuti in <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Il numero di elementi contenuti in <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Ottiene un valore che indica se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;. This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe); in caso contrario, <see langword="false" />. Questa proprietà restituisce sempre <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Ottiene un oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  This property always returns &lt;see langword=&quot;null&quot; /&gt;.">Oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.  Questa proprietà restituisce sempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through a collection.">Restituisce un enumeratore che può scorrere un insieme.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Oggetto <see cref="T:System.Collections.IEnumerator" /> che può essere usato per eseguire l'iterazione della raccolta.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an object to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Aggiunge un oggetto all'oggetto <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> da aggiungere a <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="The position at which the new element was inserted.">Posizione in cui il nuovo elemento è stato inserito.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Rimuove tutti gli elementi da <see cref="T:System.Collections.IList" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; contains a specific value.">Stabilisce se <see cref="T:System.Collections.IList" /> contiene un valore specifico.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> da individuare in <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore è presente nell'elenco. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Determina l'indice di un elemento specifico in <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> da individuare in <see cref="T:System.Collections.IList" />.</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if it is found in the list; otherwise, -1.">Indice di <paramref name="value" /> se si trova nell'elenco. In caso contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; at the specified position.">Inserisce un elemento nell'oggetto <see cref="T:System.Collections.IList" /> in corrispondenza della posizione specificata.</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">Indice in base zero nel quale <paramref name="value" /> deve essere inserito.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> da inserire in <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">Ottiene un valore che indica se <see cref="T:System.Collections.IList" /> ha dimensioni fisse.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.IList" /> è di dimensioni fisse; in caso contrario, <see langword="false" />.  Questa proprietà restituisce sempre <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only.">Ottiene un valore che indica se <see cref="T:System.Collections.IList" /> è di sola lettura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <see cref="T:System.Collections.IList" /> è di sola lettura; in caso contrario, <see langword="false" />.  Questa proprietà restituisce sempre <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">Ottiene o imposta l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">Indice in base zero dell'elemento da ottenere o impostare.</param>
      <returns vsli:raw="The element at the specified index.">Elemento in corrispondenza dell'indice specificato.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Rimuove la prima occorrenza di un oggetto specifico da <see cref="T:System.Collections.IList" />.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Oggetto <see cref="T:System.Object" /> da rimuovere da <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">Consente di rimuovere l'elemento in corrispondenza dell'indice specificato di <see cref="T:System.Collections.IList" />.</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">Indice in base zero dell'elemento da rimuovere.</param>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary vsli:raw="Provides a common base class for most Code Document Object Model (CodeDOM) objects.">Fornisce una classe base comune per la maggior parte degli oggetti CodeDOM (Code Document Object Model).</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeObject" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary vsli:raw="Gets the user-definable data for the current object.">Ottiene i dati definibili dall'utente per l'oggetto corrente.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing user data for the current object.">
        <see cref="T:System.Collections.IDictionary" /> che contiene i dati utente per l'oggetto corrente.</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary vsli:raw="Represents an expression that creates a new instance of a type.">Rappresenta un'espressione che consente di creare una nuova istanza di un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> con i parametri e il tipo specificati.</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the object to create.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati dell'oggetto da creare.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">Matrice di oggetti <see cref="T:System.CodeDom.CodeExpression" /> che indica i parametri da utilizzare per creare l'oggetto.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> con i parametri e il tipo specificati.</summary>
      <param name="createType" vsli:raw="The name of the data type of object to create.">Nome del tipo di dati dell'oggetto da creare.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">Matrice di oggetti <see cref="T:System.CodeDom.CodeExpression" /> che indica i parametri da utilizzare per creare l'oggetto.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> con i parametri e il tipo specificati.</summary>
      <param name="createType" vsli:raw="The data type of the object to create.">Tipo di dati dell'oggetto da creare.</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">Matrice di oggetti <see cref="T:System.CodeDom.CodeExpression" /> che indica i parametri da utilizzare per creare l'oggetto.</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary vsli:raw="Gets or sets the data type of the object to create.">Ottiene o imposta il tipo di oggetto da creare.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the data type of the object to create.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati dell'oggetto da creare.</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary vsli:raw="Gets or sets the parameters to use in creating the object.">Ottiene o imposta i parametri da utilizzare nella creazione dell'oggetto.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the parameters to use when creating the object.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> che indica i parametri da utilizzare per creare l'oggetto.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary vsli:raw="Represents a parameter declaration for a method, property, or constructor.">Rappresenta una dichiarazione di parametro per un metodo, una proprietà o un costruttore.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> con il tipo e il nome di parametro specificati.</summary>
      <param name="type" vsli:raw="An object that indicates the type of the parameter to declare.">Oggetto che indica il tipo del parametro da dichiarare.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">Nome del parametro da dichiarare.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> con il tipo e il nome di parametro specificati.</summary>
      <param name="type" vsli:raw="The type of the parameter to declare.">Tipo del parametro da dichiarare.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">Nome del parametro da dichiarare.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> con il tipo e il nome di parametro specificati.</summary>
      <param name="type" vsli:raw="The type of the parameter to declare.">Tipo del parametro da dichiarare.</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">Nome del parametro da dichiarare.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary vsli:raw="Gets or sets the custom attributes for the parameter declaration.">Ottiene o imposta gli attributi personalizzati della dichiarazione di parametro.</summary>
      <returns vsli:raw="An object that indicates the custom attributes.">Oggetto che indica gli attributi personalizzati.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary vsli:raw="Gets or sets the direction of the field.">Ottiene o imposta la direzione del campo.</summary>
      <returns vsli:raw="An object that indicates the direction of the field.">Oggetto che indica la direzione del campo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary vsli:raw="Gets or sets the name of the parameter.">Ottiene o imposta il nome del parametro.</summary>
      <returns vsli:raw="The name of the parameter.">Nome del parametro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary vsli:raw="Gets or sets the type of the parameter.">Ottiene o imposta il tipo di parametro.</summary>
      <returns vsli:raw="The type of the parameter.">Tipo del parametro.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> contenente la matrice specificata di oggetti <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects with which to initialize the collection.">Matrice di oggetti <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> con cui inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="one or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">uno o più oggetti della matrice sono <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class containing the elements of the specified source collection.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> contenente gli elementi dell'insieme di origine specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> con il quale inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to the collection.">Aggiunge l'oggetto <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> specificato alla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to add.">Oggetto <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> da aggiungere.</param>
      <returns vsli:raw="The index at which the new element was inserted.">L'indice in corrispondenza del quale è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">Consente di copiare gli elementi della matrice specificata alla fine della raccolta.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; containing the objects to add to the collection.">Matrice di tipo <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; to the end of the collection.">Aggiunge alla fine dell'insieme il contenuto di un altro oggetto <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; containing the objects to add to the collection.">Oggetto <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt;.">Restituisce un valore che indica se l'insieme contiene l'argomento <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to search for in the collection.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> da cercare all'interno dell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme contiene l'oggetto specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">Consente di copiare gli oggetti dell'insieme in un'istanza della <see cref="T:System.Array" /> unidimensionale a partire dall'indice specificato.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionale che rappresenta la destinazione dei valori copiati dall'insieme.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Indice della matrice da cui iniziare l'inserimento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matrice di destinazione è multidimensionale.  
-oppure- 
Il numero degli elementi in <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> è maggiore dello spazio disponibile tra l'indice della matrice di destinazione specificata dal parametro <paramref name="index" /> e la fine della matrice di destinazione.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Il parametro <paramref name="index" /> è minore dell'indice minimo della matrice di destinazione.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt;, if it exists in the collection.">Restituisce l'indice nell'insieme dell'oggetto <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> specificato, se esistente all'interno dell'insieme.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to locate in the collection.">Oggetto <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> da individuare nella raccolta.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">Indice nell'insieme dell'oggetto specificato, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; into the collection at the specified index.">Inserisce l'oggetto <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> specificato nell'insieme in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Indice in base zero in corrispondenza del quale inserire l'oggetto specificato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to insert.">Oggetto <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> da inserire.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; at the specified index in the collection.">Ottiene o imposta l'oggetto <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> nell'insieme in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Indice dell'insieme al quale accedere.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> in ciascun indice valido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Il parametro <paramref name="index" /> non è compreso nell'intervallo valido di indici per la raccolta.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; from the collection.">Rimuove l'oggetto <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> specificato dalla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to remove from the collection.">Oggetto <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> da rimuovere dalla raccolta.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Impossibile trovare l'oggetto specificato nell'insieme.</exception>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary vsli:raw="Represents a primitive data type value.">Rappresenta un valore di tipo di dati primitivo.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePrimitiveExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodePrimitiveExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePrimitiveExpression&quot; /&gt; class using the specified object.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodePrimitiveExpression" /> utilizzando l'oggetto specificato.</summary>
      <param name="value" vsli:raw="The object to represent.">Oggetto da rappresentare.</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary vsli:raw="Gets or sets the primitive data type to represent.">Ottiene o imposta il tipo di dati primitivo da rappresentare.</summary>
      <returns vsli:raw="The primitive data type instance to represent the value of.">Istanza del tipo di dati primitivo di cui rappresentare il valore.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary vsli:raw="Represents a reference to the value of a property.">Rappresenta un riferimento al valore di una proprietà.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertyReferenceExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodePropertyReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertyReferenceExpression&quot; /&gt; class using the specified target object and property name.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> con l'oggetto di destinazione e il nome di proprietà specificati.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the property to reference.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto contenente la proprietà a cui fare riferimento.</param>
      <param name="propertyName" vsli:raw="The name of the property to reference.">Nome della proprietà cui fare riferimento.</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary vsli:raw="Gets or sets the name of the property to reference.">Ottiene o imposta il nome della proprietà cui fare riferimento.</summary>
      <returns vsli:raw="The name of the property to reference.">Nome della proprietà cui fare riferimento.</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the property to reference.">Ottiene o imposta l'oggetto che contiene la proprietà a cui fare riferimento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the property to reference.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto contenente la proprietà a cui fare riferimento.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary vsli:raw="Represents the value argument of a property set method call within a property set method.">Rappresenta l'argomento valore di una chiamata al metodo per l'impostazione di proprietà all'interno di un metodo per l'impostazione di proprietà.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertySetValueReferenceExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary vsli:raw="Specifies the name and mode for a code region.">Specifica nome e modalità di una direttiva region del codice.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionDirective&quot; /&gt; class with default values.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeRegionDirective" /> con i valori predefiniti.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionDirective&quot; /&gt; class, specifying its mode and name.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeRegionDirective" />, specificandone modalità e nome.</summary>
      <param name="regionMode" vsli:raw="One of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionMode&quot; /&gt; values.">Uno dei valori di <see cref="T:System.CodeDom.CodeRegionMode" />.</param>
      <param name="regionText" vsli:raw="The name for the region.">Nome dell'area.</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary vsli:raw="Gets or sets the mode for the region directive.">Ottiene o imposta la modalità per la direttiva region.</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionMode&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.CodeDom.CodeRegionMode.None&quot; /&gt;.">Uno dei valori di <see cref="T:System.CodeDom.CodeRegionMode" />. Il valore predefinito è <see cref="F:System.CodeDom.CodeRegionMode.None" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary vsli:raw="Gets or sets the name of the region.">Ottiene o imposta il nome dell'area.</summary>
      <returns vsli:raw="The name of the region.">Il nome dell'area.</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary vsli:raw="Specifies the start or end of a code region.">Specifica l'inizio o la fine di un'area di codice.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary vsli:raw="End of the region.">Fine dell'area.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary vsli:raw="Not used.">Non usato.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary vsli:raw="Start of the region.">Inizio dell'area.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary vsli:raw="Represents a statement that removes an event handler.">Rappresenta un'istruzione che rimuove un gestore eventi.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeRemoveEventStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class with the specified event and event handler.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> con l'evento e il gestore eventi specificati.</summary>
      <param name="eventRef" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to detach the event handler from.">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> che indica l'evento da cui disconnettere il gestore eventi.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica il gestore eventi da rimuovere.</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class using the specified target object, event name, and event handler.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> utilizzando l'oggetto di destinazione, il nome dell'evento e il gestore eventi specificati.</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'oggetto che contiene l'evento.</param>
      <param name="eventName" vsli:raw="The name of the event.">Nome dell'evento.</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica il gestore eventi da rimuovere.</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary vsli:raw="Gets or sets the event to remove a listener from.">Ottiene o imposta l'evento dal quale rimuovere un listener.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to remove a listener from.">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> che indica l'evento da cui rimuovere un listener.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary vsli:raw="Gets or sets the event handler to remove.">Ottiene o imposta il gestore eventi da rimuovere.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica il gestore eventi da rimuovere.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary vsli:raw="Represents a literal code fragment that can be compiled.">Rappresenta un frammento di codice letterale che può essere compilato.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetCompileUnit&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetCompileUnit&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />.</summary>
      <param name="value" vsli:raw="The literal code fragment to represent.">Frammento di codice letterale da rappresentare.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary vsli:raw="Gets or sets the line and file information about where the code is located in a source code document.">Ottiene o imposta le informazioni sulla riga e sul file relative alla posizione del codice in un documento di codice sorgente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; that indicates the position of the code fragment.">
        <see cref="T:System.CodeDom.CodeLinePragma" /> che indica la posizione del frammento di codice.</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary vsli:raw="Gets or sets the literal code fragment to represent.">Ottiene o imposta il frammento di codice letterale da rappresentare.</summary>
      <returns vsli:raw="The literal code fragment.">Frammento di codice letterale.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary vsli:raw="Represents a literal expression.">Rappresenta un'espressione letterale.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeSnippetExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetExpression&quot; /&gt; class using the specified literal expression.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeSnippetExpression" /> con l'espressione letterale specificata.</summary>
      <param name="value" vsli:raw="The literal expression to represent.">Espressione letterale da rappresentare.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary vsli:raw="Gets or sets the literal string of code.">Ottiene o imposta la stringa letterale di codice.</summary>
      <returns vsli:raw="The literal string.">Stringa letterale.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary vsli:raw="Represents a statement using a literal code fragment.">Rappresenta un'istruzione con un frammento di codice letterale.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetStatement&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeSnippetStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetStatement&quot; /&gt; class using the specified code fragment.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeSnippetStatement" /> con il frammento di codice specificato.</summary>
      <param name="value" vsli:raw="The literal code fragment of the statement to represent.">Frammento di codice letterale dell'istruzione da rappresentare.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary vsli:raw="Gets or sets the literal code fragment statement.">Ottiene o imposta l'istruzione con il frammento di codice letterale.</summary>
      <returns vsli:raw="The literal code fragment statement.">Istruzione con il frammento di codice letterale.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary vsli:raw="Represents a member of a type using a literal code fragment.">Rappresenta un membro di un tipo che utilizza un frammento di codice letterale.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetTypeMember&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeSnippetTypeMember" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetTypeMember&quot; /&gt; class using the specified text.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> con il testo specificato.</summary>
      <param name="text" vsli:raw="The literal code fragment for the type member.">Frammento di codice letterale per il membro del tipo.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary vsli:raw="Gets or sets the literal code fragment for the type member.">Ottiene o imposta il frammento di codice letterale per il membro del tipo.</summary>
      <returns vsli:raw="The literal code fragment for the type member.">Frammento di codice letterale per il membro del tipo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary vsli:raw="Represents the &lt;see langword=&quot;abstract&quot; /&gt; base class from which all code statements derive.">Rappresenta la classe base <see langword="abstract" /> da cui derivano tutte le istruzioni di codice.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeStatement" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object that contains end directives.">Ottiene un oggetto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> contenente le direttive finali.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Oggetto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> contenente le direttive finali.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary vsli:raw="Gets or sets the line on which the code statement occurs.">Ottiene o imposta la riga in cui si verifica l'istruzione di codice.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; object that indicates the context of the code statement.">Oggetto <see cref="T:System.CodeDom.CodeLinePragma" /> che indica il contesto dell'istruzione di codice.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object that contains start directives.">Ottiene un oggetto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> contenente le direttive iniziali.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Oggetto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> contenente le direttive iniziali.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.CodeDom.CodeStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeStatementCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeStatementCollection" /> contenente la matrice specificata di oggetti <see cref="T:System.CodeDom.CodeStatement" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects with which to initialize the collection.">Matrice di oggetti <see cref="T:System.CodeDom.CodeStatement" /> con cui inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class that contains the elements of the specified source collection.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeStatementCollection" /> contenente gli elementi dell'insieme di origine specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object with which to initialize the collection.">Oggetto <see cref="T:System.CodeDom.CodeStatementCollection" /> con il quale inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to the collection.">Aggiunge l'oggetto <see cref="T:System.CodeDom.CodeExpression" /> specificato alla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to add.">Oggetto <see cref="T:System.CodeDom.CodeExpression" /> da aggiungere.</param>
      <returns vsli:raw="The index at which the new element was inserted.">L'indice in corrispondenza del quale è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to the collection.">Aggiunge l'oggetto <see cref="T:System.CodeDom.CodeStatement" /> specificato alla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to add.">L'oggetto <see cref="T:System.CodeDom.CodeStatement" /> da aggiungere.</param>
      <returns vsli:raw="The index at which the new element was inserted.">L'indice in corrispondenza del quale è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Adds a set of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects to the collection.">Aggiunge un gruppo di oggetti <see cref="T:System.CodeDom.CodeStatement" /> alla raccolta.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects to add to the collection.">Matrice di oggetti <see cref="T:System.CodeDom.CodeStatement" /> da aggiungere alla raccolta.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object to the end of the collection.">Aggiunge il contenuto di un altro oggetto <see cref="T:System.CodeDom.CodeStatementCollection" /> alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object that contains the objects to add to the collection.">Oggetto <see cref="T:System.CodeDom.CodeStatementCollection" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object.">Ottiene un valore che indica se l'insieme contiene l'oggetto <see cref="T:System.CodeDom.CodeStatement" /> specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to search for in the collection.">L'oggetto <see cref="T:System.CodeDom.CodeStatement" /> da cercare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme contiene l'oggetto specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">Copia gli elementi dell'oggetto <see cref="T:System.CodeDom.CodeStatementCollection" /> in un'istanza di <see cref="T:System.Array" /> unidimensionale, a partire dall'indice specificato.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionale che rappresenta la destinazione dei valori copiati dall'insieme.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Indice della matrice da cui iniziare l'inserimento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matrice di destinazione è multidimensionale.  
-oppure- 
Il numero degli elementi in <see cref="T:System.CodeDom.CodeStatementCollection" /> è maggiore dello spazio disponibile tra l'indice della matrice di destinazione specificata dal parametro <paramref name="index" /> e la fine della matrice di destinazione.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Il parametro <paramref name="index" /> è minore dell'indice minimo della matrice di destinazione.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt;, if it exists in the collection.">Ottiene l'indice dell'oggetto <see cref="T:System.CodeDom.CodeStatement" /> specificato in <see cref="T:System.CodeDom.CodeStatementCollection" />, se esistente.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to locate in the collection.">Oggetto <see cref="T:System.CodeDom.CodeStatement" /> da individuare nella raccolta.</param>
      <returns vsli:raw="The index of the specified object, if it is found, in the collection; otherwise, -1.">Indice dell'oggetto specificato, se trovato nell'insieme, in caso contrario -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object into the collection at the specified index.">Inserisce l'oggetto <see cref="T:System.CodeDom.CodeStatement" /> specificato nella raccolta in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Indice in base zero in corrispondenza del quale inserire l'oggetto specificato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to insert.">Oggetto <see cref="T:System.CodeDom.CodeStatement" /> da inserire.</param>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object at the specified index in the collection.">Ottiene o imposta l'oggetto <see cref="T:System.CodeDom.CodeStatement" /> nella raccolta, in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Indice dell'insieme al quale accedere.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.CodeStatement" /> in ciascun indice valido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Il parametro <paramref name="index" /> non è compreso nell'intervallo valido di indici per la raccolta.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object from the collection.">Rimuove l'oggetto <see cref="T:System.CodeDom.CodeStatement" /> specificato dalla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to remove from the collection.">Oggetto <see cref="T:System.CodeDom.CodeStatement" /> da rimuovere dalla raccolta.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Impossibile trovare l'oggetto specificato nell'insieme.</exception>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary vsli:raw="Represents a reference to the current local class instance.">Rappresenta un riferimento all'istanza della classe locale corrente.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThisReferenceExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeThisReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary vsli:raw="Represents a statement that throws an exception.">Rappresenta un'istruzione che lancia un'eccezione.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThrowExceptionStatement&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeThrowExceptionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThrowExceptionStatement&quot; /&gt; class with the specified exception type instance.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> con l'istanza del tipo di eccezione specificata.</summary>
      <param name="toThrow" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the exception to throw.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'eccezione da lanciare.</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary vsli:raw="Gets or sets the exception to throw.">Ottiene o imposta l'eccezione da generare.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; representing an instance of the exception to throw.">
        <see cref="T:System.CodeDom.CodeExpression" /> che rappresenta un'istanza dell'eccezione da generare.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;try&quot; /&gt; block with any number of &lt;see langword=&quot;catch&quot; /&gt; clauses and, optionally, a &lt;see langword=&quot;finally&quot; /&gt; block.">Rappresenta un blocco <see langword="try" /> con un numero qualsiasi di clausole <see langword="catch" /> ed eventualmente un blocco <see langword="finally" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class using the specified statements for try and catch clauses.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> con le istruzioni specificate per le clausole try e catch.</summary>
      <param name="tryStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the statements to try.">Matrice di oggetti <see cref="T:System.CodeDom.CodeStatement" /> che indicano le istruzioni da provare.</param>
      <param name="catchClauses" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects that indicate the clauses to catch.">Matrice di oggetti <see cref="T:System.CodeDom.CodeCatchClause" /> che indicano le clausole da intercettare.</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class using the specified statements for try, catch clauses, and finally statements.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> con le istruzioni specificate per le clausole try e catch e le istruzioni finally.</summary>
      <param name="tryStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the statements to try.">Matrice di oggetti <see cref="T:System.CodeDom.CodeStatement" /> che indicano le istruzioni da provare.</param>
      <param name="catchClauses" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects that indicate the clauses to catch.">Matrice di oggetti <see cref="T:System.CodeDom.CodeCatchClause" /> che indicano le clausole da intercettare.</param>
      <param name="finallyStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the finally statements to use.">Matrice di oggetti <see cref="T:System.CodeDom.CodeStatement" /> che indicano le istruzioni finally da utilizzare.</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary vsli:raw="Gets the catch clauses to use.">Restituisce le clausole catch da utilizzare.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; that indicates the catch clauses to use.">
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> che indica le clausole catch da utilizzare.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary vsli:raw="Gets the finally statements to use.">Restituisce le istruzioni finally da utilizzare.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the finally statements.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> che indica le istruzioni finally.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary vsli:raw="Gets the statements to try.">Restituisce le istruzioni da provare.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the statements to try.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> che indica le istruzioni da provare.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary vsli:raw="Represents a static constructor for a class.">Rappresenta un costruttore statico per una classe.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeConstructor&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeConstructor" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary vsli:raw="Represents a type declaration for a class, structure, interface, or enumeration.">Rappresenta una dichiarazione del tipo per una classe, una struttura, un'interfaccia o un'enumerazione.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; class with the specified name.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeDeclaration" /> con il nome specificato.</summary>
      <param name="name" vsli:raw="The name for the new type.">Nome del nuovo tipo.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary vsli:raw="Gets the base types of the type.">Ottiene i tipi di base del tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; object that indicates the base types of the type.">Oggetto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> che indica i tipi di base del tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary vsli:raw="Gets or sets a value indicating whether the type is a class or reference type.">Ottiene o imposta un valore che indica se il tipo è una classe o un tipo di riferimento.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a class or reference type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il tipo è una classe o un tipo di riferimento; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary vsli:raw="Gets or sets a value indicating whether the type is an enumeration.">Ottiene o imposta un valore che indica se il tipo è un'enumerazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an enumeration; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il tipo è un'enumerazione; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary vsli:raw="Gets or sets a value indicating whether the type is an interface.">Ottiene o imposta un valore che indica se il tipo è un'interfaccia.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il tipo è un'interfaccia; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary vsli:raw="Gets or sets a value indicating whether the type declaration is complete or partial.">Ottiene o imposta un valore che indica se la dichiarazione del tipo è completa o parziale.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class or structure declaration is a partial representation of the implementation; &lt;see langword=&quot;false&quot; /&gt; if the declaration is a complete implementation of the class or structure. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la dichiarazione della classe o della struttura è una rappresentazione parziale dell'implementazione; <see langword="false" /> se la dichiarazione è un'implementazione completa della classe o della struttura. Il valore predefinito è <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary vsli:raw="Gets or sets a value indicating whether the type is a value type (struct).">Ottiene o imposta un valore che indica se il tipo è un tipo di valore, ad esempio una struttura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a value type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il tipo è un tipo di valore; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary vsli:raw="Gets the collection of class members for the represented type.">Restituisce l'insieme dei membri della classe per il tipo rappresentato.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; object that indicates the class members.">Oggetto <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> che indica i membri della classe.</returns>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.CodeDom.CodeTypeDeclaration.BaseTypes&quot; /&gt; collection is accessed for the first time.">Si verifica quando si accede per la prima volta all'insieme <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />.</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.CodeDom.CodeTypeDeclaration.Members&quot; /&gt; collection is accessed for the first time.">Si verifica quando si accede per la prima volta all'insieme <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary vsli:raw="Gets or sets the attributes of the type.">Ottiene o imposta gli attributi del tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.TypeAttributes&quot; /&gt; object that indicates the attributes of the type.">Oggetto <see cref="T:System.Reflection.TypeAttributes" /> che indica gli attributi del tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary vsli:raw="Gets the type parameters for the type declaration.">Ottiene i parametri del tipo per la dichiarazione del tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; that contains the type parameters for the type declaration.">Oggetto <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> che contiene i parametri del tipo per la dichiarazione del tipo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> contenente la matrice specificata di oggetti <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects with which to initialize the collection.">Matrice di oggetti <see cref="T:System.CodeDom.CodeTypeDeclaration" /> con cui inizializzare l'insieme.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class that contains the elements of the specified source collection.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> contenente gli elementi dell'insieme di origine specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object with which to initialize the collection.">Oggetto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> con il quale inizializzare l'insieme.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to the collection.">Aggiunge l'oggetto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> specificato alla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to add.">L'oggetto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> da aggiungere.</param>
      <returns vsli:raw="The index at which the new element was inserted.">L'indice in corrispondenza del quale è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">Consente di copiare gli elementi della matrice specificata alla fine della raccolta.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; that contains the objects to add to the collection.">Matrice di tipo <see cref="T:System.CodeDom.CodeTypeDeclaration" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object to the end of the collection.">Aggiunge il contenuto di un altro oggetto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object that contains the objects to add to the collection.">Oggetto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object.">Ottiene un valore che indica se l'insieme contiene l'oggetto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to search for in the collection.">L'oggetto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> da cercare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme contiene l'oggetto specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary vsli:raw="Copies the elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">Copia gli elementi dell'oggetto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> in un'istanza di <see cref="T:System.Array" /> unidimensionale, a partire dall'indice specificato.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionale che rappresenta la destinazione dei valori copiati dall'insieme.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Indice della matrice da cui iniziare l'inserimento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matrice di destinazione è multidimensionale.  
In alternativa 
Il numero degli elementi in <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> è maggiore dello spazio disponibile tra l'indice della matrice di destinazione specificata dal parametro <paramref name="index" /> e la fine della matrice di destinazione.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Il parametro <paramref name="index" /> è minore dell'indice minimo della matrice di destinazione.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt;, if it exists in the collection.">Ottiene l'indice dell'oggetto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> specificato in <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />, se esistente.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; to locate in the collection.">Oggetto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> da individuare nella raccolta.</param>
      <returns vsli:raw="The index of the specified object, if it is found, in the collection; otherwise, -1.">Indice dell'oggetto specificato, se trovato nell'insieme, in caso contrario -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object into the collection at the specified index.">Inserisce l'oggetto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> specificato nella raccolta in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Indice in base zero in corrispondenza del quale inserire l'oggetto specificato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to insert.">Oggetto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> da inserire.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object at the specified index in the collection.">Ottiene o imposta l'oggetto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> nella raccolta, in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Indice dell'insieme al quale accedere.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> in ciascun indice valido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Il parametro <paramref name="index" /> non è compreso nell'intervallo valido di indici per la raccolta.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object from the collection.">Rimuove l'oggetto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> specificato dalla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; to remove from the collection.">Oggetto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> da rimuovere dalla raccolta.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Impossibile trovare l'oggetto specificato nell'insieme.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary vsli:raw="Represents a delegate declaration.">Rappresenta una dichiarazione delegata.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDelegate&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeDelegate" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDelegate&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeDelegate" />.</summary>
      <param name="name" vsli:raw="The name of the delegate.">Nome del delegato.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary vsli:raw="Gets the parameters of the delegate.">Restituisce i parametri del delegato.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the parameters of the delegate.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> che indica i parametri del delegato.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary vsli:raw="Gets or sets the return type of the delegate.">Ottiene o imposta il tipo restituito del delegato.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the return type of the delegate.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo restituito del delegato.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary vsli:raw="Provides a base class for a member of a type. Type members include fields, methods, properties, constructors and nested types.">Fornisce una classe base per un membro di un tipo. I membri di un tipo comprendono campi, metodi, proprietà, costruttori e tipi annidati.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary vsli:raw="Gets or sets the attributes of the member.">Ottiene o imposta gli attributi del membro.</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.CodeDom.MemberAttributes&quot; /&gt; values used to indicate the attributes of the member. The default value is &lt;see cref=&quot;F:System.CodeDom.MemberAttributes.Private&quot; /&gt; | &lt;see cref=&quot;F:System.CodeDom.MemberAttributes.Final&quot; /&gt;.">Combinazione bit per bit dei valori <see cref="T:System.CodeDom.MemberAttributes" /> utilizzati per indicare gli attributi del membro. Il valore predefinito è <see cref="F:System.CodeDom.MemberAttributes.Private" />.  |  <see cref="F:System.CodeDom.MemberAttributes.Final" /></returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary vsli:raw="Gets the collection of comments for the type member.">Ottiene l'insieme di commenti per il membro del tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that indicates the comments for the member.">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> che indica i commenti per il membro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary vsli:raw="Gets or sets the custom attributes of the member.">Ottiene o imposta gli attributi personalizzati del membro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes of the member.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> che indica gli attributi personalizzati del membro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary vsli:raw="Gets the end directives for the member.">Ottiene le direttive finali per il membro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">Oggetto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> contenente le direttive finali.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary vsli:raw="Gets or sets the line on which the type member statement occurs.">Ottiene o imposta la riga in cui è contenuta l'istruzione per il membro del tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; object that indicates the location of the type member declaration.">Oggetto <see cref="T:System.CodeDom.CodeLinePragma" /> che indica la posizione della dichiarazione del membro del tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary vsli:raw="Gets or sets the name of the member.">Ottiene o imposta il nome del membro.</summary>
      <returns vsli:raw="The name of the member.">Nome del membro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary vsli:raw="Gets the start directives for the member.">Ottiene le direttive iniziali per il membro.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">Oggetto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> contenente le direttive iniziali.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeMemberCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> contenente la matrice specificata di oggetti <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects with which to initialize the collection.">Matrice di oggetti <see cref="T:System.CodeDom.CodeTypeMember" /> con cui inizializzare l'insieme.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class containing the elements of the specified source collection.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> contenente gli elementi dell'insieme di origine specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> con il quale inizializzare l'insieme.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; with the specified value to the collection.">Consente di aggiungere all'insieme un oggetto <see cref="T:System.CodeDom.CodeTypeMember" /> con il valore specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to add.">Oggetto <see cref="T:System.CodeDom.CodeTypeMember" /> da aggiungere.</param>
      <returns vsli:raw="The index at which the new element was inserted.">L'indice in corrispondenza del quale è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; array to the end of the collection.">Copia gli elementi della matrice di oggetti <see cref="T:System.CodeDom.CodeTypeMember" /> specificata alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; containing the objects to add to the collection.">Matrice di tipo <see cref="T:System.CodeDom.CodeTypeMember" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; to the end of the collection.">Aggiunge alla fine dell'insieme il contenuto di un altro oggetto <see cref="T:System.CodeDom.CodeTypeMemberCollection" />.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; containing the objects to add to the collection.">Oggetto <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt;.">Restituisce un valore che indica se l'insieme contiene l'argomento <see cref="T:System.CodeDom.CodeTypeMember" /> specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to search for in the collection.">Oggetto <see cref="T:System.CodeDom.CodeTypeMember" /> da cercare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme contiene l'oggetto specificato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, beginning at the specified index.">Consente di copiare gli oggetti dell'insieme in un'istanza di <see cref="T:System.Array" /> unidimensionale, a partire dall'indice specificato.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionale che rappresenta la destinazione dei valori copiati dall'insieme.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Indice della matrice da cui iniziare l'inserimento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">La matrice di destinazione è multidimensionale.  
In alternativa 
Il numero degli elementi in <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> è maggiore dello spazio disponibile tra l'indice della matrice di destinazione specificata dal parametro <paramref name="index" /> e la fine della matrice di destinazione.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Il parametro <paramref name="index" /> è minore dell'indice minimo della matrice di destinazione.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt;, if it exists in the collection.">Restituisce l'indice nell'insieme dell'oggetto <see cref="T:System.CodeDom.CodeTypeMember" /> specificato, se esistente all'interno dell'insieme.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to locate in the collection.">Oggetto <see cref="T:System.CodeDom.CodeTypeMember" /> da individuare nella raccolta.</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">Indice nell'insieme dell'oggetto specificato, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; into the collection at the specified index.">Inserisce l'oggetto <see cref="T:System.CodeDom.CodeTypeMember" /> specificato nell'insieme in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">Indice in base zero in corrispondenza del quale inserire l'oggetto specificato.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to insert.">Oggetto <see cref="T:System.CodeDom.CodeTypeMember" /> da inserire.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; at the specified index in the collection.">Ottiene o imposta l'oggetto <see cref="T:System.CodeDom.CodeTypeMember" /> nell'insieme in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Indice dell'insieme al quale accedere.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> in ciascun indice valido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Il parametro <paramref name="index" /> non è compreso nell'intervallo valido di indici per la raccolta.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Removes a specific &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; from the collection.">Rimuove dall'insieme un oggetto <see cref="T:System.CodeDom.CodeTypeMember" /> specifico.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to remove from the collection.">Oggetto <see cref="T:System.CodeDom.CodeTypeMember" /> da rimuovere dalla raccolta.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Impossibile trovare l'oggetto specificato nell'insieme.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary vsli:raw="Represents a &lt;see langword=&quot;typeof&quot; /&gt; expression, an expression that returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; for a specified type name.">Rappresenta un'espressione <see langword="typeof" /> che restituisce un oggetto <see cref="T:System.Type" /> per un nome di tipo specificato.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeOfExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeOfExpression" />.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type for the &lt;see langword=&quot;typeof&quot; /&gt; expression.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati dell'espressione <see langword="typeof" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class using the specified type.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeOfExpression" /> utilizzando il tipo specificato.</summary>
      <param name="type" vsli:raw="The name of the data type for the &lt;see langword=&quot;typeof&quot; /&gt; expression.">Nome del tipo di dati dell'espressione <see langword="typeof" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class using the specified type.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeOfExpression" /> utilizzando il tipo specificato.</summary>
      <param name="type" vsli:raw="The data type of the data type of the &lt;see langword=&quot;typeof&quot; /&gt; expression.">Tipo di dati del tipo di dati dell'espressione <see langword="typeof" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary vsli:raw="Gets or sets the data type referenced by the &lt;see langword=&quot;typeof&quot; /&gt; expression.">Ottiene o imposta il tipo di dati cui fa riferimento l'espressione <see langword="typeof" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type referenced by the &lt;see langword=&quot;typeof&quot; /&gt; expression. This property will never return &lt;see langword=&quot;null&quot; /&gt;, and defaults to the &lt;see cref=&quot;T:System.Void&quot; /&gt; type.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati cui fa riferimento l'espressione <see langword="typeof" />. La proprietà non restituirà mai <see langword="null" /> e l'impostazione predefinita sarà il tipo <see cref="T:System.Void" />.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary vsli:raw="Represents a type parameter of a generic type or method.">Rappresenta un parametro del tipo di un tipo o metodo generico.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; class with the specified type parameter name.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeParameter" /> con il nome del parametro del tipo specificato.</summary>
      <param name="name" vsli:raw="The name of the type parameter.">Nome del parametro di tipo.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary vsli:raw="Gets the constraints for the type parameter.">Ottiene i vincoli per il parametro del tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; object that contains the constraints for the type parameter.">Oggetto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> che contiene i vincoli per il parametro del tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the type parameter.">Ottiene gli attributi personalizzati per il parametro del tipo.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes of the type parameter. The default is &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> che indica gli attributi personalizzati del parametro del tipo. Il valore predefinito è <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary vsli:raw="Gets or sets a value indicating whether the type parameter has a constructor constraint.">Ottiene o imposta un valore che indica se al parametro del tipo è associato un vincolo constructor.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type parameter has a constructor constraint; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se al parametro del tipo è associato un vincolo constructor; altrimenti <see langword="false" />. Il valore predefinito è <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary vsli:raw="Gets or sets the name of the type parameter.">Ottiene o imposta il nome del parametro del tipo.</summary>
      <returns vsli:raw="The name of the type parameter. The default is an empty string (&quot;&quot;).">Nome del parametro di tipo. Il valore predefinito è una stringa vuota ("").</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary vsli:raw="Initializes a new, empty instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class.">Inizializza una nuova istanza vuota della classe <see cref="T:System.CodeDom.CodeTypeParameterCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> contenente la matrice specificata di oggetti <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects with which to initialize the collection.">Matrice di oggetti <see cref="T:System.CodeDom.CodeTypeParameter" /> con cui inizializzare l'insieme.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class containing the elements of the specified source collection.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> contenente gli elementi dell'insieme di origine specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> con il quale inizializzare l'insieme.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection.">Aggiunge l'oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> specificato alla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; to add.">Oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> da aggiungere.</param>
      <returns vsli:raw="The zero-based index at which the new element was inserted.">Indice a base zero in corrispondenza del quale è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection using the specified data type name.">Aggiunge all'insieme l'oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> specificato utilizzando il nome del tipo di dati specificato.</summary>
      <param name="value" vsli:raw="The name of a data type for which to add the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection.">Nome di un tipo di dati per il quale aggiungere l'oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> all’insieme.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; array to the end of the collection.">Copia gli elementi della matrice di oggetti <see cref="T:System.CodeDom.CodeTypeParameter" /> specificata alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; containing the objects to add to the collection.">Matrice di tipo <see cref="T:System.CodeDom.CodeTypeParameter" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; to the end of the collection.">Copia gli elementi della classe <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> specificata alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; containing the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects to add to the collection.">Oggetto <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> contenente gli oggetti <see cref="T:System.CodeDom.CodeTypeParameter" /> da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Determines whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object.">Determina se l'insieme contiene l'oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to search for in the collection.">L'oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> da cercare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> è incluso nell'insieme, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary vsli:raw="Copies the items in the collection to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; at the specified index.">Consente di copiare gli elementi nell'insieme nella <see cref="T:System.Array" /> unidimensionale specificata in corrispondenza dell'indice specificato.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionale che rappresenta la destinazione dei valori copiati dall'insieme.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Indice della matrice da cui iniziare l'inserimento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; is greater than the available space between the index of the target array specified by &lt;paramref name=&quot;index&quot; /&gt; and the end of the target array.">
        <paramref name="array" /> è multidimensionale.  
-oppure- 
Il numero degli elementi dell'oggetto <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> è maggiore dello spazio disponibile tra l'indice della matrice di destinazione specificato dal parametro <paramref name="index" /> e la fine della matrice di destinazione.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the target array's lowest index.">
        <paramref name="index" /> è minore dell'indice minimo della matrice di destinazione.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object, if it exists in the collection.">Ottiene l'indice nell'insieme dell'oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> specificato, se esistente nell'insieme.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to locate in the collection.">Oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> da individuare nell'insieme.</param>
      <returns vsli:raw="The zero-based index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object in the collection if found; otherwise, -1.">Indice a base zero dell'oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> specificato dell'insieme, se trovato; altrimenti -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object into the collection at the specified index.">Inserisce l'oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> specificato nella raccolta in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">Indice a base zero in corrispondenza del quale inserire l'elemento.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to insert.">Oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> da inserire.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object at the specified index in the collection.">Ottiene o imposta l'oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> nella raccolta, in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the collection object to access.">Indice a base zero dell'oggetto Collection al quale accedere.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object at the specified index.">Oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> in corrispondenza dell'indice specificato.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the valid range of indexes for the collection.">
        <paramref name="index" /> non è compreso nell'intervallo valido di indici per la raccolta.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object from the collection.">Rimuove l'oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> specificato dalla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to remove from the collection.">Oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> da rimuovere dall'insieme.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Impossibile trovare l'oggetto specificato nell'insieme.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary vsli:raw="Represents a reference to a type.">Rappresenta un riferimento a un tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified code type parameter.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeReference" /> utilizzando il parametro del tipo di codice specificato.</summary>
      <param name="typeParameter" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; that represents the type of the type parameter.">Oggetto <see cref="T:System.CodeDom.CodeTypeParameter" /> che rappresenta il tipo del parametro del tipo.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified array type and rank.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeReference" /> utilizzando il tipo matrice e il numero di dimensioni specificati.</summary>
      <param name="arrayType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo della matrice da creare.</param>
      <param name="rank" vsli:raw="The number of dimensions in the array.">Numero di dimensioni nella matrice.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeReference" /> utilizzando il nome del tipo specificato.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">Il nome del tipo al quale fare riferimento.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name and type arguments.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeReference" /> utilizzando il nome del tipo e gli argomenti del tipo specificati.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">Il nome del tipo al quale fare riferimento.</param>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; values.">Matrice di valori <see cref="T:System.CodeDom.CodeTypeReference" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name and code type reference option.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeReference" /> utilizzando il nome del tipo e l'opzione di riferimento al tipo di codice specificati.</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">Il nome del tipo al quale fare riferimento.</param>
      <param name="codeTypeReferenceOption" vsli:raw="The code type reference option, one of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">Opzione di riferimento al tipo di codice, vale a dire uno dei valori di <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified array type name and rank.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeReference" /> utilizzando il nome del tipo matrice e il numero di dimensioni specificati.</summary>
      <param name="baseType" vsli:raw="The name of the type of the elements of the array.">Nome del tipo degli elementi della matrice.</param>
      <param name="rank" vsli:raw="The number of dimensions of the array.">Numero di dimensioni della matrice.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeReference" /> utilizzando il tipo specificato.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to reference.">Oggetto <see cref="T:System.Type" /> a cui fare riferimento.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type and code type reference.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeReference" /> utilizzando il tipo e il riferimento al tipo di codice specificati.</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to reference.">Oggetto <see cref="T:System.Type" /> a cui fare riferimento.</param>
      <param name="codeTypeReferenceOption" vsli:raw="The code type reference option, one of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">Opzione di riferimento al tipo di codice, vale a dire uno dei valori di <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary vsli:raw="Gets or sets the type of the elements in the array.">Ottiene o imposta il tipo degli elementi della matrice.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array elements.">Oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo degli elementi della matrice.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary vsli:raw="Gets or sets the array rank of the array.">Ottiene o imposta il rango della matrice.</summary>
      <returns vsli:raw="The number of dimensions of the array.">Numero di dimensioni della matrice.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary vsli:raw="Gets or sets the name of the type being referenced.">Ottiene o imposta il nome del tipo al quale viene fatto riferimento.</summary>
      <returns vsli:raw="The name of the type being referenced.">Nome del tipo a cui si fa riferimento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary vsli:raw="Gets or sets the code type reference option.">Ottiene o imposta l'opzione di riferimento al tipo di codice.</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">Combinazione bit per bit dei valori di <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary vsli:raw="Gets the type arguments for the current generic type reference.">Ottiene gli argomenti del tipo per il riferimento al tipo generico corrente.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the type arguments for the current &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; object.">Oggetto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> contenente gli argomenti del tipo per l'oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> corrente.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> contenente la matrice specificata di oggetti <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects with which to initialize the collection.">Matrice di oggetti <see cref="T:System.CodeDom.CodeTypeReference" /> con cui inizializzare l'insieme.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class containing the elements of the specified source collection.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> contenente gli elementi dell'insieme di origine specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; with which to initialize the collection.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> con il quale inizializzare l'insieme.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">Aggiunge l'oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> specificato alla raccolta.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to add.">Oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> da aggiungere.</param>
      <returns vsli:raw="The index at which the new element was inserted.">L'indice in corrispondenza del quale è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection using the specified data type name.">Consente di aggiungere un oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> all’insieme utilizzando il nome del tipo di dati specificato.</summary>
      <param name="value" vsli:raw="The name of a data type for which to add a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">Nome di un tipo di dati per il quale aggiungere un <see cref="T:System.CodeDom.CodeTypeReference" /> all’insieme.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection using the specified data type.">Consente di aggiungere un <see cref="T:System.CodeDom.CodeTypeReference" /> all'insieme utilizzando il tipo di dati specificato.</summary>
      <param name="value" vsli:raw="The data type for which to add a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">Tipo di dati per il quale aggiungere un <see cref="T:System.CodeDom.CodeTypeReference" /> all'insieme.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; array to the end of the collection.">Copia gli elementi della matrice di oggetti <see cref="T:System.CodeDom.CodeTypeReference" /> specificata alla fine dell'insieme.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; containing the objects to add to the collection.">Matrice di tipo <see cref="T:System.CodeDom.CodeTypeReference" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; to the end of the collection.">Consente di aggiungere alla fine dell'insieme il contenuto dell'oggetto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the objects to add to the collection.">Oggetto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Restituisce un valore che indica se l'insieme contiene l'argomento <see cref="T:System.CodeDom.CodeTypeReference" /> specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to search for in the collection.">Oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> da cercare nell'insieme.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> è incluso nella raccolta; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary vsli:raw="Copies the items in the collection to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; at the specified index.">Consente di copiare gli elementi nell'insieme nella <see cref="T:System.Array" /> unidimensionale specificata in corrispondenza dell'indice specificato.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">
        <see cref="T:System.Array" /> unidimensionale che rappresenta la destinazione dei valori copiati dall'insieme.</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">Indice della matrice da cui iniziare l'inserimento.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">Il parametro <paramref name="array" /> è multidimensionale.  
-oppure- 
Il numero degli elementi in <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> è maggiore dello spazio disponibile tra l'indice della matrice di destinazione specificata dal parametro <paramref name="index" /> e la fine della matrice di destinazione.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">Il parametro <paramref name="index" /> è minore dell'indice minimo della matrice di destinazione.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;, if it exists in the collection.">Restituisce l'indice nell'insieme dell'oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> specificato, se esistente all'interno dell'insieme.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to locate in the collection.">Oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> da individuare nella raccolta.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; in the collection if found; otherwise, -1.">Indice dell'oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> specificato nell'insieme, se presente; in caso contrario, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Inserts a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; into the collection at the specified index.">Inserisce un oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> nella raccolta in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index where the item should be inserted.">Indice in base zero in cui inserire l'elemento.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to insert.">Oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> da inserire.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; at the specified index in the collection.">Ottiene o imposta l'oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> nell'insieme in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The index of the collection to access.">Indice dell'insieme al quale accedere.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> in ciascun indice valido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Il parametro <paramref name="index" /> non è compreso nell'intervallo valido di indici per la raccolta.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; from the collection.">Rimuove la classe <see cref="T:System.CodeDom.CodeTypeReference" /> specificata dall'insieme.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to remove from the collection.">Oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> da rimuovere dalla raccolta.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Impossibile trovare l'oggetto specificato nell'insieme.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary vsli:raw="Represents a reference to a data type.">Rappresenta un riferimento a un tipo di dati.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified type.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> utilizzando il tipo specificato.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type to reference.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati al quale fare riferimento.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified data type name.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />  con il nome del tipo di dati specificato.</summary>
      <param name="type" vsli:raw="The name of the data type to reference.">Nome del tipo di dati a cui fare riferimento.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified data type.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> con il tipo di dati specificato.</summary>
      <param name="type" vsli:raw="An instance of the data type to reference.">Istanza del tipo di dati al quale fare riferimento.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary vsli:raw="Gets or sets the data type to reference.">Ottiene o imposta il tipo di dati al quale fare riferimento.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type to reference.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati al quale fare riferimento.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary vsli:raw="Specifies how the code type reference is to be resolved.">Specifica come risolvere il riferimento al tipo di codice.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary vsli:raw="Resolve the type from the type parameter.">Risolve il tipo dal parametro di tipo.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary vsli:raw="Resolve the type from the root namespace.">Risolve il tipo dallo spazio dei nomi di primo livello.</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary vsli:raw="Represents a variable declaration.">Rappresenta una dichiarazione di variabile.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified type and name.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> con il tipo e il nome specificati.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the variable.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati della variabile.</param>
      <param name="name" vsli:raw="The name of the variable.">Nome della variabile.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> con il tipo di dati, il nome di variabile e l'espressione di inizializzazione specificati.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the variable.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo della variabile.</param>
      <param name="name" vsli:raw="The name of the variable.">Nome della variabile.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'espressione di inizializzazione per la variabile.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type name and variable name.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> con il nome del tipo di dati e il nome di variabile specificati.</summary>
      <param name="type" vsli:raw="The name of the data type of the variable.">Nome del tipo di dati della variabile.</param>
      <param name="name" vsli:raw="The name of the variable.">Nome della variabile.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> con il tipo di dati, il nome di variabile e l'espressione di inizializzazione specificati.</summary>
      <param name="type" vsli:raw="The name of the data type of the variable.">Nome del tipo di dati della variabile.</param>
      <param name="name" vsli:raw="The name of the variable.">Nome della variabile.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'espressione di inizializzazione per la variabile.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type and variable name.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> con il tipo di dati e il nome di variabile specificati.</summary>
      <param name="type" vsli:raw="The data type for the variable.">Tipo di dati della variabile.</param>
      <param name="name" vsli:raw="The name of the variable.">Nome della variabile.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> con il tipo di dati, il nome di variabile e l'espressione di inizializzazione specificati.</summary>
      <param name="type" vsli:raw="The data type of the variable.">Tipo di dati della variabile.</param>
      <param name="name" vsli:raw="The name of the variable.">Nome della variabile.</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'espressione di inizializzazione per la variabile.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary vsli:raw="Gets or sets the initialization expression for the variable.">Ottiene o imposta l'espressione di inizializzazione per la variabile.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">
        <see cref="T:System.CodeDom.CodeExpression" /> che indica l'espressione di inizializzazione per la variabile.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary vsli:raw="Gets or sets the name of the variable.">Ottiene o imposta il nome della variabile.</summary>
      <returns vsli:raw="The name of the variable.">Nome della variabile.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary vsli:raw="Gets or sets the data type of the variable.">Ottiene o imposta il tipo di dati della variabile.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the variable.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo di dati della variabile.</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary vsli:raw="Represents a reference to a local variable.">Rappresenta un riferimento a una variabile locale.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableReferenceExpression&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.CodeVariableReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableReferenceExpression&quot; /&gt; class using the specified local variable name.">Consente l'inizializzazione di una nuova istanza della classe <see cref="T:System.CodeDom.CodeVariableReferenceExpression" />con il nome di variabile locale specificato.</summary>
      <param name="variableName" vsli:raw="The name of the local variable to reference.">Il nome della variabile locale a cui fare riferimento.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary vsli:raw="Gets or sets the name of the local variable to reference.">Ottiene o imposta il nome della variabile locale alla quale fare riferimento.</summary>
      <returns vsli:raw="The name of the local variable to reference.">Il nome della variabile locale a cui fare riferimento.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary vsli:raw="Provides an example implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; interface.">Fornisce un'implementazione di esempio dell'interfaccia <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeCompiler&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.CodeCompiler" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary vsli:raw="Gets the command arguments to be passed to the compiler from the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt;.">Ottiene gli argomenti di comando che devono essere passati al compilatore dall'oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> specificato.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; that indicates the compiler options.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le opzioni di compilazione.</param>
      <returns vsli:raw="The command arguments.">Argomenti di comando.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary vsli:raw="Gets the name of the compiler executable.">Ottiene il nome dell'eseguibile del compilatore.</summary>
      <returns vsli:raw="The name of the compiler executable.">Nome dell'eseguibile del compilatore.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary vsli:raw="Gets the file name extension to use for source files.">Ottiene l'estensione del nome file da utilizzare per i file di origine.</summary>
      <returns vsli:raw="The file name extension to use for source files.">Estensione del nome file da utilizzare per i file di origine.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Compiles the specified compile unit using the specified options, and returns the results from the compilation.">Compila l'unità di compilazione specificata utilizzando le opzioni selezionate e restituisce i risultati della compilazione.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le opzioni del compilatore.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; object that indicates the source to compile.">Oggetto <see cref="T:System.CodeDom.CodeCompileUnit" /> che indica il codice sorgente da compilare.</param>
      <returns vsli:raw="The results of compilation.">Risultati della compilazione.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles the specified compile units using the specified options, and returns the results from the compilation.">Compila le unità di compilazione specificate utilizzando le opzioni selezionate e restituisce i risultati della compilazione.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le opzioni del compilatore.</param>
      <param name="ea" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects that indicates the source to compile.">Matrice di oggetti <see cref="T:System.CodeDom.CodeCompileUnit" /> che indica il codice sorgente da compilare.</param>
      <returns vsli:raw="The results of compilation.">Risultati della compilazione.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;ea&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> è <see langword="null" />.  
-oppure- 
 <paramref name="ea" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles the specified file using the specified options, and returns the results from the compilation.">Compila il file specificato utilizzando le opzioni selezionate e restituisce i risultati della compilazione.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le opzioni del compilatore.</param>
      <param name="fileName" vsli:raw="The file name to compile.">Nome del file da compilare.</param>
      <returns vsli:raw="The results of compilation.">Risultati della compilazione.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> è <see langword="null" />.  
-oppure- 
 <paramref name="fileName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles the specified files using the specified options, and returns the results from the compilation.">Compila i file specificati utilizzando le opzioni selezionate e restituisce i risultati della compilazione.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le opzioni del compilatore.</param>
      <param name="fileNames" vsli:raw="An array of strings that indicates the file names of the files to compile.">Matrice di stringhe che indica i nomi dei file da compilare.</param>
      <returns vsli:raw="The results of compilation.">Risultati della compilazione.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileNames&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> è <see langword="null" />.  
In alternativa 
 <paramref name="fileNames" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles the specified source code string using the specified options, and returns the results from the compilation.">Compila la stringa di codice sorgente specificata utilizzando le opzioni selezionate e restituisce i risultati della compilazione.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le opzioni del compilatore.</param>
      <param name="source" vsli:raw="The source code string to compile.">Stringa di codice sorgente da compilare.</param>
      <returns vsli:raw="The results of compilation.">Risultati della compilazione.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles the specified source code strings using the specified options, and returns the results from the compilation.">Compila le stringhe di codice sorgente specificate utilizzando le opzioni selezionate e restituisce i risultati della compilazione.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le opzioni del compilatore.</param>
      <param name="sources" vsli:raw="An array of strings containing the source code to compile.">Matrice di stringhe contenente il codice sorgente da compilare.</param>
      <returns vsli:raw="The results of compilation.">Risultati della compilazione.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;sources&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> è <see langword="null" />.  
-oppure- 
 <paramref name="sources" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Gets the command arguments to use when invoking the compiler to generate a response file.">Ottiene gli argomenti di comando da utilizzare quando viene richiamato il compilatore per generare un file di risposta.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le opzioni del compilatore.</param>
      <param name="cmdArgs" vsli:raw="A command arguments string.">Stringa di argomenti di comando.</param>
      <returns vsli:raw="The command arguments to use to generate a response file, or &lt;see langword=&quot;null&quot; /&gt; if there are no response file arguments.">Gli argomenti di comando utilizzati per generare un file di risposta oppure <see langword="null" />, in assenza di argomenti relativi al file di risposta.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary vsli:raw="Joins the specified string arrays.">Unisce le matrici di stringhe specificate.</summary>
      <param name="sa" vsli:raw="The array of strings to join.">Matrice di stringhe da unire.</param>
      <param name="separator" vsli:raw="The separator to use.">Il separatore da utilizzare.</param>
      <returns vsli:raw="The concatenated string.">Stringa concatenata.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary vsli:raw="Processes the specified line from the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt;.">Elabora la riga specificata dell'oggetto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> indicato.</summary>
      <param name="results" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; that indicates the results of compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> che indica i risultati della compilazione.</param>
      <param name="line" vsli:raw="The line to process.">Riga da elaborare.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le opzioni del compilatore.</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the source to compile.">Oggetto <see cref="T:System.CodeDom.CodeCompileUnit" /> che indica il codice sorgente da compilare.</param>
      <returns vsli:raw="The results of compilation.">Risultati della compilazione.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le opzioni del compilatore.</param>
      <param name="ea" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects that indicates the source to compile.">Matrice di oggetti <see cref="T:System.CodeDom.CodeCompileUnit" /> che indica il codice sorgente da compilare.</param>
      <returns vsli:raw="The results of compilation.">Risultati della compilazione.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le opzioni del compilatore.</param>
      <param name="fileName" vsli:raw="The file name to compile.">Nome del file da compilare.</param>
      <returns vsli:raw="The results of compilation.">Risultati della compilazione.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le opzioni del compilatore.</param>
      <param name="fileNames" vsli:raw="An array of strings that indicates the file names to compile.">Matrice di stringhe che indica i nomi dei file da compilare.</param>
      <returns vsli:raw="The results of compilation.">Risultati della compilazione.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le opzioni del compilatore.</param>
      <param name="source" vsli:raw="A string that indicates the source code to compile.">Oggetto che indica il codice sorgente da compilare.</param>
      <returns vsli:raw="The results of compilation.">Risultati della compilazione.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])&quot; /&gt;.">Per una descrizione di questo membro, vedere <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le opzioni del compilatore.</param>
      <param name="sources" vsli:raw="An array of strings that indicates the source code to compile.">Matrice di stringhe che indica il codice sorgente da compilare.</param>
      <returns vsli:raw="The results of compilation.">Risultati della compilazione.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> è <see langword="null" />.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary vsli:raw="Provides a base class for &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementations. This class is abstract.">Fornisce una classe base per le implementazioni di <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />. Questa classe è astratta.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles an assembly based on the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; trees contained in the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects, using the specified compiler settings.">Compila un assembly in base alle strutture ad albero <see cref="N:System.CodeDom" /> contenute nella matrice di oggetti <see cref="T:System.CodeDom.CodeCompileUnit" /> specificata utilizzando le impostazioni del compilatore specificato.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for the compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le impostazioni per la compilazione.</param>
      <param name="compilationUnits" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">Matrice di tipo <see cref="T:System.CodeDom.CodeCompileUnit" /> che indica il codice da compilare.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of the compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> che indica i risultati della compilazione.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">Né questo metodo né il metodo <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> vengono sottoposti a override in una classe derivata.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.">Compila un assembly dal codice sorgente contenuto nei file specificati, utilizzando le impostazioni del compilatore specificato.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for the compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le impostazioni per la compilazione.</param>
      <param name="fileNames" vsli:raw="An array of the names of the files to compile.">Matrice dei nomi dei file da compilare.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> che indica i risultati della compilazione.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">Né questo metodo né il metodo <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> vengono sottoposti a override in una classe derivata.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.">Compila un assembly dalla matrice di stringhe specificata contenente il codice sorgente utilizzando le impostazioni del compilatore specificato.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler settings for this compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le impostazioni del compilatore per la compilazione.</param>
      <param name="sources" vsli:raw="An array of source code strings to compile.">Matrice di stringhe del codice sorgente da compilare.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> che indica i risultati della compilazione.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">Né questo metodo né il metodo <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> vengono sottoposti a override in una classe derivata.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary vsli:raw="When overridden in a derived class, creates a new code compiler.">Quando è sottoposto a override in una classe derivata, crea un nuovo compilatore di codice.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; that can be used for compilation of &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">Oggetto <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> che può essere utilizzato per compilare rappresentazioni del codice sorgente basate su <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Crea un identificatore di escape per il valore specificato.</summary>
      <param name="value" vsli:raw="The string for which to create an escaped identifier.">Stringa per la quale deve essere creato un identificatore di escape.</param>
      <returns vsli:raw="The escaped identifier for the value.">Identificatore di escape per il valore.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Né questo metodo né il metodo <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> vengono sottoposti a override in una classe derivata.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator.">Quando è sottoposto a override in una classe derivata, crea un nuovo generatore di codice.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">Oggetto <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> che può essere utilizzato per generare rappresentazioni del codice sorgente basate su <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator using the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; for output.">Quando è sottoposto a override in una classe derivata, crea un nuovo generatore di codice utilizzando per l'output l'oggetto <see cref="T:System.IO.TextWriter" /> specificato.</summary>
      <param name="output" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to use to output.">Oggetto <see cref="T:System.IO.TextWriter" /> da utilizzare per l'output.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">Oggetto <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> che può essere utilizzato per generare rappresentazioni del codice sorgente basate su <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator using the specified file name for output.">Quando è sottoposto a override in una classe derivata, crea un nuovo generatore di codice utilizzando per l'output il nome file specificato.</summary>
      <param name="fileName" vsli:raw="The file name to output to.">Nome file da utilizzare per l'output.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">Oggetto <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> che può essere utilizzato per generare rappresentazioni del codice sorgente basate su <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary vsli:raw="When overridden in a derived class, creates a new code parser.">Quando è sottoposto a override in una classe derivata, crea un nuovo parser di codice.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeParser&quot; /&gt; that can be used to parse source code. The base implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">Oggetto <see cref="T:System.CodeDom.Compiler.ICodeParser" /> che può essere utilizzato per analizzare il codice sorgente. L'implementazione di base restituisce sempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the specified language.">Ottiene un'istanza della classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> per il linguaggio specificato.</summary>
      <param name="language" vsli:raw="The language name.">Nome di linguaggio.</param>
      <returns vsli:raw="A CodeDOM provider that is implemented for the specified language name.">Provider CodeDOM implementato per il nome di linguaggio specificato.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; does not have a configured provider on this computer.">
        <paramref name="language" /> non è associato a un provider configurato nel computer.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">L'elemento <paramref name="language" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the specified language and provider options.">Ottiene un'istanza di <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> per le opzioni della lingua e del provider specificate.</summary>
      <param name="language" vsli:raw="The language name.">Nome di linguaggio.</param>
      <param name="providerOptions" vsli:raw="A collection of provider options from the configuration file.">Insieme di opzioni del provider del file di configurazione.</param>
      <returns vsli:raw="A CodeDOM provider that is implemented for the specified language name and options.">Provider CodeDOM implementato per il nome di linguaggio indicato e per le opzioni specificate.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Crea un identificatore valido per il valore specificato.</summary>
      <param name="value" vsli:raw="The string for which to generate a valid identifier.">Stringa per la quale deve essere generato un identificatore valido.</param>
      <returns vsli:raw="A valid identifier for the specified value.">Identificatore valido per il valore specificato.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Né questo metodo né il metodo <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> vengono sottoposti a override in una classe derivata.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary vsli:raw="Gets the default file name extension to use for source code files in the current language.">Ottiene l'estensione del nome file predefinita da utilizzare per i file di origine nel linguaggio corrente.</summary>
      <returns vsli:raw="A file name extension corresponding to the extension of the source files of the current language. The base implementation always returns &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.">Estensione del nome file corrispondente all'estensione dei file di origine del linguaggio corrente. L'implementazione di base restituisce sempre <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.">Genera il codice per l'unità di compilazione CodeDOM (Code Document Object Model) specificata e lo invia al writer di testo indicato utilizzando le opzioni selezionate.</summary>
      <param name="compileUnit" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; for which to generate code.">Oggetto <see cref="T:System.CodeDom.CodeCompileUnit" /> per il quale deve essere generato il codice.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which the output code is sent.">Oggetto <see cref="T:System.IO.TextWriter" /> a cui viene inviato il codice di output.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Oggetto <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> che indica le opzioni da utilizzare per la generazione del codice.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Né questo metodo né il metodo <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> vengono sottoposti a override in una classe derivata.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.">Genera il codice per l'espressione CodeDOM (Code Document Object Model) specificata e lo invia al writer di testo indicato utilizzando le opzioni selezionate.</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object that indicates the expression for which to generate code.">Oggetto <see cref="T:System.CodeDom.CodeExpression" /> che indica l'espressione per la quale deve essere generato il codice.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">Oggetto <see cref="T:System.IO.TextWriter" /> a cui viene inviato il codice di output.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Oggetto <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> che indica le opzioni da utilizzare per la generazione del codice.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Né questo metodo né il metodo <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> vengono sottoposti a override in una classe derivata.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.">Genera il codice per la dichiarazione di membro CodeDOM (Code Document Object Model) specificata e lo invia al writer di testo indicato utilizzando le opzioni selezionate.</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; object that indicates the member for which to generate code.">Oggetto <see cref="T:System.CodeDom.CodeTypeMember" /> che indica il membro per il quale deve essere generato il codice.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">Oggetto <see cref="T:System.IO.TextWriter" /> a cui viene inviato il codice di output.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Oggetto <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> che indica le opzioni da utilizzare per la generazione del codice.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="This method is not overridden in a derived class.">Il metodo non viene sottoposto a override in una classe derivata.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.">Genera il codice per lo spazio dei nomi CodeDOM (Code Document Object Model) specificato e lo invia al writer di testo indicato utilizzando le opzioni selezionate.</summary>
      <param name="codeNamespace" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object that indicates the namespace for which to generate code.">Oggetto <see cref="T:System.CodeDom.CodeNamespace" /> che indica lo spazio dei nomi per il quale deve essere generato il codice.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">Oggetto <see cref="T:System.IO.TextWriter" /> a cui viene inviato il codice di output.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Oggetto <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> che indica le opzioni da utilizzare per la generazione del codice.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Né questo metodo né il metodo <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> vengono sottoposti a override in una classe derivata.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.">Genera il codice per l'istruzione CodeDOM (Code Document Object Model) specificata e lo invia al writer di testo indicato utilizzando le opzioni selezionate.</summary>
      <param name="statement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the CodeDOM elements for which to generate code.">Oggetto <see cref="T:System.CodeDom.CodeStatement" /> contenente gli elementi CodeDOM per i quali deve essere generato il codice.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">Oggetto <see cref="T:System.IO.TextWriter" /> a cui viene inviato il codice di output.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Oggetto <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> che indica le opzioni da utilizzare per la generazione del codice.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Né questo metodo né il metodo <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> vengono sottoposti a override in una classe derivata.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.">Genera il codice per la dichiarazione di tipo CodeDOM (Code Document Object Model) specificata e lo invia al writer di testo indicato utilizzando le opzioni selezionate.</summary>
      <param name="codeType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object that indicates the type for which to generate code.">Oggetto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> che indica il tipo per il quale deve essere generato il codice.</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">Oggetto <see cref="T:System.IO.TextWriter" /> a cui viene inviato il codice di output.</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Oggetto <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> che indica le opzioni da utilizzare per la generazione del codice.</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Né questo metodo né il metodo <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> vengono sottoposti a override in una classe derivata.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary vsli:raw="Returns the language provider and compiler configuration settings for this computer.">Restituisce le impostazioni di configurazione del compilatore e del provider del linguaggio per il computer.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; representing the settings of all configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementations.">Una matrice di tipo <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> che rappresenta le impostazioni di tutte le implementazioni di <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurate.</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary vsli:raw="Returns the language provider and compiler configuration settings for the specified language.">Restituisce le impostazioni di configurazione del compilatore e del provider del linguaggio per il linguaggio specificato.</summary>
      <param name="language" vsli:raw="A language name.">Nome di linguaggio.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; object populated with settings of the configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> in cui sono inserite le impostazioni dell'implementazione della classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurata.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; does not have a configured provider on this computer.">
        <paramref name="language" /> non è associato a un provider configurato nel computer.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">L'elemento <paramref name="language" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified data type.">Ottiene un <see cref="T:System.ComponentModel.TypeConverter" /> per il tipo di dati specificato.</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">Tipo di oggetto per il quale recuperare un convertitore di tipi.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type, or &lt;see langword=&quot;null&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type cannot be found.">Un <see cref="T:System.ComponentModel.TypeConverter" /> per il tipo specificato oppure <see langword="null" /> se non è possibile trovare un <see cref="T:System.ComponentModel.TypeConverter" /> per il tipo specificato.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary vsli:raw="Returns a language name associated with the specified file name extension, as configured in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; compiler configuration section.">Restituisce un nome di linguaggio associato all'estensione di file specificata, in base alle impostazioni nella sezione di configurazione del compilatore <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
      <param name="extension" vsli:raw="A file name extension.">Estensione di file.</param>
      <returns vsli:raw="A language name associated with the file name extension, as configured in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; compiler configuration settings.">Nome di linguaggio associato all'estensione di file, in base alle impostazioni di configurazione del compilatore <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; does not have a configured language provider on this computer.">
        <paramref name="extension" /> non è associato a un provider configurato nel computer.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">L'elemento <paramref name="extension" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Ottiene il tipo indicato dall'oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> specificato.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type to return.">Oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo da restituire.</param>
      <returns vsli:raw="A text representation of the specified type, formatted for the language in which code is generated by this code generator. In Visual Basic, for example, passing in a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type will return &quot;Integer&quot;.">Rappresentazione testo del tipo specificato, formattata per il linguaggio in cui viene generato il codice dal generatore di codice. In Visual Basic ad esempio se si passa un oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> per il tipo <see cref="T:System.Int32" /> viene restituito "Integer".</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Né questo metodo né il metodo <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> vengono sottoposti a override in una classe derivata.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary vsli:raw="Tests whether a file name extension has an associated &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation configured on the computer.">Verifica se un'estensione di file è associata a un'implementazione della classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurata nel computer.</summary>
      <param name="extension" vsli:raw="A file name extension.">Estensione di file.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation is configured for the specified file name extension; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se un'implementazione di <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> è configurata per l'estensione di file specificata; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">L'elemento <paramref name="extension" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary vsli:raw="Tests whether a language has a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation configured on the computer.">Verifica se per un linguaggio è configurata un'implementazione della classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> nel computer.</summary>
      <param name="language" vsli:raw="The language name.">Nome di linguaggio.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation is configured for the specified language; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se un'implementazione di <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> è configurata per il linguaggio specificato; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">L'elemento <paramref name="language" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary vsli:raw="Returns a value that indicates whether the specified value is a valid identifier for the current language.">Restituisce un valore che indica se il valore specificato rappresenta un identificatore valido per il linguaggio corrente.</summary>
      <param name="value" vsli:raw="The value to verify as a valid identifier.">Valore di cui verificare la validità come identificatore.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il parametro <paramref name="value" /> è un identificatore valido, in caso contrario <see langword="false" /> .</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Né questo metodo né il metodo <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> vengono sottoposti a override in una classe derivata.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary vsli:raw="Gets a language features identifier.">Ottiene un identificatore delle funzionalità del linguaggio.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.LanguageOptions&quot; /&gt; that indicates special features of the language.">Oggetto <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> che indica speciali funzionalità del linguaggio.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary vsli:raw="Compiles the code read from the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Compila il codice letto dal flusso di testo specificato in un oggetto <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; object that is used to read the code to be parsed.">Oggetto <see cref="T:System.IO.TextReader" /> utilizzato per leggere il codice da analizzare.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that contains a representation of the parsed code.">Oggetto <see cref="T:System.CodeDom.CodeCompileUnit" /> che contiene una rappresentazione del codice analizzato.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Né questo metodo né il metodo <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> vengono sottoposti a override in una classe derivata.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Returns a value indicating whether the specified code generation support is provided.">Restituisce un valore che indica se viene fornito il supporto per la generazione di codice specificato.</summary>
      <param name="generatorSupport" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object that indicates the type of code generation support to verify.">Oggetto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> che indica il tipo di supporto per la generazione di codice da verificare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified code generation support is provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se viene fornito il supporto specificato per la generazione di codice, in caso contrario <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">Né questo metodo né il metodo <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> vengono sottoposti a override in una classe derivata.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary vsli:raw="Provides an example implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; interface. This class is abstract.">Fornisce un'implementazione di esempio dell'interfaccia <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />. Questa classe è astratta.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGenerator&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.CodeGenerator" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary vsli:raw="Generates a line-continuation character and outputs the specified string on a new line.">Genera un carattere di continuazione di riga e restituisce la stringa specificata su una nuova riga.</summary>
      <param name="st" vsli:raw="The string to write on the new line.">Stringa da scrivere sulla nuova riga.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Crea un identificatore di escape per il valore specificato.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">Stringa per la quale deve essere creato un identificatore di escape.</param>
      <returns vsli:raw="The escaped identifier for the value.">Identificatore di escape per il valore.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Crea un identificatore valido per il valore specificato.</summary>
      <param name="value" vsli:raw="A string to create a valid identifier for.">Stringa per la quale deve essere creato un identificatore valido.</param>
      <returns vsli:raw="A valid identifier for the value.">Identificatore valido per il valore.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary vsli:raw="Gets the code type declaration for the current class.">Ottiene la dichiarazione del tipo di codice per la classe corrente.</summary>
      <returns vsli:raw="The code type declaration for the current class.">Dichiarazione del tipo di codice per la classe corrente.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary vsli:raw="Gets the current member of the class.">Ottiene il membro corrente della classe.</summary>
      <returns vsli:raw="The current member of the class.">Membro corrente della classe.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary vsli:raw="Gets the current member name.">Ottiene il nome del membro corrente.</summary>
      <returns vsli:raw="The name of the current member.">Nome del membro corrente.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary vsli:raw="Gets the current class name.">Ottiene il nome della classe corrente.</summary>
      <returns vsli:raw="The current class name.">Nome della classe corrente.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary vsli:raw="Generates code for the specified argument reference expression.">Genera il codice per l'espressione specificata di riferimento a un argomento.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; that indicates the expression to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> che indica l'espressione per la quale deve essere generato il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary vsli:raw="Generates code for the specified array creation expression.">Genera il codice per l'espressione specificata di creazione di una matrice.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; that indicates the expression to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> che indica l'espressione per la quale deve essere generato il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary vsli:raw="Generates code for the specified array indexer expression.">Genera il codice per l'espressione specificata dell'indicizzatore di matrici.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; that indicates the expression to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> che indica l'espressione per la quale deve essere generato il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary vsli:raw="Generates code for the specified assignment statement.">Genera il codice per l'istruzione di assegnazione specificata.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; that indicates the statement to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeAssignStatement" /> che indica l'istruzione per la quale deve essere generato il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary vsli:raw="Generates code for the specified attach event statement.">Genera il codice per l'istruzione specificata relativa all'evento di collegamento.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; that indicates the statement to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeAttachEventStatement" /> che indica l'istruzione per la quale deve essere generato il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute block end.">Genera il codice per la fine specificata del blocco di attributi.</summary>
      <param name="attributes" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the end of the attribute block to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> che indica la fine del blocco di attributi per la quale deve essere generato il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute block start.">Genera il codice per l'inizio specificato del blocco di attributi.</summary>
      <param name="attributes" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the start of the attribute block to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> che indica l'inizio del blocco di attributi per il quale deve essere generato il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary vsli:raw="Generates code for the specified base reference expression.">Genera il codice per l'espressione specificata di riferimento di base.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBaseReferenceExpression&quot; /&gt; that indicates the expression to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> che indica l'espressione per la quale deve essere generato il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary vsli:raw="Generates code for the specified binary operator expression.">Genera il codice per l'espressione specificata dell'operatore binario.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; that indicates the expression to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> che indica l'espressione per la quale deve essere generato il codice.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary vsli:raw="Generates code for the specified cast expression.">Genera il codice per l'espressione specificata di cast.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; that indicates the expression to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeCastExpression" /> che indica l'espressione per la quale deve essere generato il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">Genera codice per il membro della classe specificato usando le opzioni del writer di testo e del generatore di codice specificate.</summary>
      <param name="member" vsli:raw="The class member to generate code for.">Membro della classe per cui generare il codice.</param>
      <param name="writer" vsli:raw="The text writer to output code to.">Writer di testo a cui restituire il codice.</param>
      <param name="options" vsli:raw="The options to use when generating the code.">Opzioni da utilizzare per la generazione del codice.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.CodeDom.Compiler.CodeGenerator.Output&quot; /&gt; property is not &lt;see langword=&quot;null&quot; /&gt;.">La proprietà <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> non è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary vsli:raw="Generates code for the specified comment.">Genera il codice per il commento specificato.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeComment" /> per il quale deve essere generato il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Generates code for the specified comment statement.">Genera il codice per l'istruzione di commento specificata.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Istruzione per cui generare il codice.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.CodeDom.CodeCommentStatement.Comment&quot; /&gt; property of &lt;paramref name=&quot;e&quot; /&gt; is not set.">La proprietà <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> di <paramref name="e" /> non è impostata.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Generates code for the specified comment statements.">Genera il codice per le istruzioni di commento specificate.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the specified compile unit.">Genera il codice per l'unità di compilazione specificata.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">Unità di compilazione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the end of a compile unit.">Genera il codice per la fine di un'unità di compilazione.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">Unità di compilazione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the start of a compile unit.">Genera il codice per l'inizio di un'unità di compilazione.</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">Unità di compilazione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary vsli:raw="Generates code for the specified conditional statement.">Genera il codice per l'istruzione condizionale specificata.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Istruzione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified constructor.">Genera il codice per il costruttore specificato.</summary>
      <param name="e" vsli:raw="The constructor to generate code for.">Costruttore per cui generare il codice.</param>
      <param name="c" vsli:raw="The type of the object that this constructor constructs.">Tipo dell'oggetto costruito da questo costruttore.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary vsli:raw="Generates code for the specified decimal value.">Genera il codice per il valore decimale specificato.</summary>
      <param name="d" vsli:raw="The decimal value to generate code for.">Valore decimale per il quale deve essere generato il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary vsli:raw="Generates code for the specified reference to a default value.">Genera il codice per il riferimento specificato a un valore predefinito.</summary>
      <param name="e" vsli:raw="The reference to generate code for.">Riferimento per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary vsli:raw="Generates code for the specified delegate creation expression.">Genera il codice per l'espressione specificata di creazione dei delegati.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary vsli:raw="Generates code for the specified delegate invoke expression.">Genera il codice per l'espressione specificata di chiamata del delegato.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary vsli:raw="Generates code for the specified direction expression.">Genera il codice per l'espressione di direzione specificata.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Generates code for the specified code directives.">Genera il codice per le direttive di codice specificate.</summary>
      <param name="directives" vsli:raw="The code directives to generate code for.">Direttive di codice per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary vsli:raw="Generates code for a double-precision floating point number.">Genera il codice per un numero in virgola mobile e precisione doppia.</summary>
      <param name="d" vsli:raw="The value to generate code for.">Valore per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified entry point method.">Genera il codice per il metodo del punto di ingresso specificato.</summary>
      <param name="e" vsli:raw="The entry point for the code.">Punto di ingresso del codice.</param>
      <param name="c" vsli:raw="The code that declares the type.">Codice che dichiara il tipo.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified event.">Genera il codice per l'evento specificato.</summary>
      <param name="e" vsli:raw="The member event to generate code for.">Evento del membro per cui generare il codice.</param>
      <param name="c" vsli:raw="The type of the object that this event occurs on.">Tipo dell'oggetto in cui si verifica questo evento.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary vsli:raw="Generates code for the specified event reference expression.">Genera il codice per l'espressione specificata di riferimento a un evento.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Generates code for the specified code expression.">Genera il codice per l'espressione specificata di codice.</summary>
      <param name="e" vsli:raw="The code expression to generate code for.">Espressione di codice per cui generare il codice.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt;.">
        <paramref name="e" /> non è un oggetto <see cref="T:System.CodeDom.CodeStatement" /> valido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary vsli:raw="Generates code for the specified expression statement.">Genera il codice per l'istruzione di espressione specificata.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Istruzione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary vsli:raw="Generates code for the specified member field.">Genera il codice per il campo membro specificato.</summary>
      <param name="e" vsli:raw="The field to generate code for.">Campo per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary vsli:raw="Generates code for the specified field reference expression.">Genera il codice per l'espressione specificata di riferimento a un campo.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary vsli:raw="Generates code for the specified &lt;see langword=&quot;goto&quot; /&gt; statement.">Genera il codice per l'istruzione <see langword="goto" /> specificata.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary vsli:raw="Generates code for the specified indexer expression.">Genera il codice per l'espressione specificata dell'indicizzatore.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary vsli:raw="Generates code for the specified iteration statement.">Genera il codice per l'istruzione specificata di reiterazione.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Istruzione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary vsli:raw="Generates code for the specified labeled statement.">Genera il codice per l'istruzione con etichetta specificata.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Istruzione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary vsli:raw="Generates code for the specified line pragma end.">Genera il codice per la fine specificata del pragma di linea.</summary>
      <param name="e" vsli:raw="The end of the line pragma to generate code for.">Pragma di fine della riga per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary vsli:raw="Generates code for the specified line pragma start.">Genera il codice per l'inizio specificato del pragma di linea.</summary>
      <param name="e" vsli:raw="The start of the line pragma to generate code for.">Pragma di inizio della riga per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified method.">Genera il codice per il metodo specificato.</summary>
      <param name="e" vsli:raw="The member method to generate code for.">Metodo del membro per cui generare il codice.</param>
      <param name="c" vsli:raw="The type of the object that this method occurs on.">Tipo dell'oggetto in cui si verifica questo metodo.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary vsli:raw="Generates code for the specified method invoke expression.">Genera il codice per l'espressione specificata di chiamata del metodo.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary vsli:raw="Generates code for the specified method reference expression.">Genera il codice per l'espressione specificata di riferimento a un metodo.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary vsli:raw="Generates code for the specified method return statement.">Genera il codice per l'istruzione return specificata relativa a un metodo.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Istruzione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace.">Genera il codice per lo spazio dei nomi specificato.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">Spazio dei nomi per il quale deve essere generato il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the end of a namespace.">Genera il codice per la fine di uno spazio dei nomi.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">Spazio dei nomi per il quale deve essere generato il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary vsli:raw="Generates code for the specified namespace import.">Genera il codice per l'importazione dello spazio dei nomi specificato.</summary>
      <param name="e" vsli:raw="The namespace import to generate code for.">Importazione dello spazio dei nomi per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace import.">Genera il codice per l'importazione dello spazio dei nomi specificato.</summary>
      <param name="e" vsli:raw="The namespace import to generate code for.">Importazione dello spazio dei nomi per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the namespaces in the specified compile unit.">Genera il codice per gli spazi dei nomi dell'unità di compilazione specificata.</summary>
      <param name="e" vsli:raw="The compile unit to generate namespaces for.">Unità di compilazione per cui generare lo spazio dei nomi.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the start of a namespace.">Genera il codice per l'inizio di uno spazio dei nomi.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">Spazio dei nomi per il quale deve essere generato il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary vsli:raw="Generates code for the specified object creation expression.">Genera il codice per l'espressione specificata di creazione di oggetti.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Generates code for the specified parameter declaration expression.">Genera il codice per l'espressione specificata di dichiarazione di parametri.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary vsli:raw="Generates code for the specified primitive expression.">Genera il codice per l'espressione primaria specificata.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; uses an invalid data type. Only the following data types are valid:  &#xA;  &#xA;- string  &#xA;  &#xA;- char  &#xA;  &#xA;- byte  &#xA;  &#xA;- Int16  &#xA;  &#xA;- Int32  &#xA;  &#xA;- Int64  &#xA;&#xA;- Half&#xA;  &#xA;- Single  &#xA;  &#xA;- Double  &#xA;  &#xA;- Decimal">
        <paramref name="e" /> utilizza un tipo di dati non valido. Solo i seguenti tipi di dati sono validi: 

string 
char 
byte 
Int16 
Int32 
Int64 
Single 
Double 
Decimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified property.">Genera il codice per la proprietà specificata.</summary>
      <param name="e" vsli:raw="The property to generate code for.">Proprietà per cui generare il codice.</param>
      <param name="c" vsli:raw="The type of the object that this property occurs on.">Tipo dell'oggetto in cui si verifica questa proprietà.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary vsli:raw="Generates code for the specified property reference expression.">Genera il codice per l'espressione specificata di riferimento a una proprietà.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary vsli:raw="Generates code for the specified property set value reference expression.">Genera il codice per l'espressione specificata di riferimento a un valore di un insieme di proprietà.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary vsli:raw="Generates code for the specified remove event statement.">Genera il codice per l'istruzione specificata relativa all'evento di rimozione.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Istruzione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary vsli:raw="Generates code for a single-precision floating point number.">Genera il codice per un numero in virgola mobile e precisione singola.</summary>
      <param name="s" vsli:raw="The value to generate code for.">Valore per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment compile unit.">Restituisce il codice dell'unità di compilazione specificata del frammento di codice letterale.</summary>
      <param name="e" vsli:raw="The literal code fragment compile unit to generate code for.">Unità di compilazione del frammento di codice letterale per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment expression.">Restituisce il codice dell'espressione specificata del frammento di codice letterale.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment class member.">Restituisce il codice del membro di classe specificato del frammento di codice letterale.</summary>
      <param name="e" vsli:raw="The member to generate code for.">Membro per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment statement.">Restituisce il codice dell'istruzione specificata del frammento di codice letterale.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Istruzione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Generates code for the specified statement.">Genera il codice per l'istruzione specificata.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Istruzione per cui generare il codice.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt;.">
        <paramref name="e" /> non è un oggetto <see cref="T:System.CodeDom.CodeStatement" /> valido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Generates code for the specified statement collection.">Genera il codice per l'insieme di istruzioni specificato.</summary>
      <param name="stms">Istruzioni per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary vsli:raw="Generates code for the specified this reference expression.">Genera il codice per l'espressione specificata del riferimento this.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary vsli:raw="Generates code for the specified throw exception statement.">Genera il codice per l'istruzione specificata di generazione di un'eccezione.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Istruzione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary vsli:raw="Generates code for the specified &lt;c&gt;try-catch-finally&lt;/c&gt; statement.">Genera il codice per l'istruzione <see langword="try...catch...finally" /> specificata.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Istruzione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary vsli:raw="Generates code for the specified class constructor.">Genera il codice per il costruttore specificato della classe.</summary>
      <param name="e" vsli:raw="The class constructor to generate code for.">Costruttore della classe per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified end of the class.">Genera il codice per la fine della classe specificata.</summary>
      <param name="e" vsli:raw="The end of the class to generate code for.">Fine della classe per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary vsli:raw="Generates code for the specified type of expression.">Genera il codice per il tipo di espressione specificato.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary vsli:raw="Generates code for the specified type reference expression.">Genera il codice per l'espressione specificata di riferimento al tipo.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace and the classes it contains.">Genera il codice per lo spazio dei nomi specificato e per le classi che questo contiene.</summary>
      <param name="e" vsli:raw="The namespace to generate classes for.">Spazio dei nomi per cui generare le classi.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified start of the class.">Genera il codice per l'inizio della classe specificata.</summary>
      <param name="e" vsli:raw="The start of the class to generate code for.">Inizio della classe per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary vsli:raw="Generates code for the specified variable declaration statement.">Genera il codice per l'istruzione specificata di dichiarazione delle variabili.</summary>
      <param name="e" vsli:raw="The statement to generate code for.">Istruzione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary vsli:raw="Generates code for the specified variable reference expression.">Genera il codice per l'espressione specificata di riferimento a una variabile.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the name of the specified data type.">Ottiene il nome del tipo di dati specificato.</summary>
      <param name="value" vsli:raw="The type whose name will be returned.">Tipo di cui verrà restituito il nome.</param>
      <returns vsli:raw="The name of the data type reference.">Nome del riferimento al tipo di dati.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary vsli:raw="Gets or sets the amount of spaces to indent each indentation level.">Ottiene o imposta il numero di spazi per ciascun livello di rientro.</summary>
      <returns vsli:raw="The number of spaces to indent for each indentation level.">Numero di spazi per ciascun livello di rientro.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a class.">Ottiene un valore che indica se l'oggetto corrente da generare è una classe.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto corrente è una classe, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a delegate.">Ottiene un valore che indica se l'oggetto corrente da generare è un delegato.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a delegate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto corrente è un delegato, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is an enumeration.">Ottiene un valore che indica se l'oggetto corrente da generare è un'enumerazione.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is an enumeration; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto corrente è un'enumerazione, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is an interface.">Ottiene un valore che indica se l'oggetto corrente da generare è un'interfaccia.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is an interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto corrente è un'interfaccia, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a value type or struct.">Ottiene un valore che indica se l'oggetto corrente da generare è un tipo valore o una struttura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a value type or struct; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto corrente è un tipo valore o una struttura, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified value is a valid identifier.">Ottiene un valore che indica se il valore specificato è un identificatore valido.</summary>
      <param name="value" vsli:raw="The value to test for conflicts with valid identifiers.">Il valore di cui verificare l'assenza di conflitti con identificatori validi.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore è un identificatore valido, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified string is a valid identifier.">Ottiene un valore che indica se la stringa specificata è un identificatore valido.</summary>
      <param name="value" vsli:raw="The string to test for validity.">Stringa di cui deve essere eseguito il test della validità.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la stringa specificata è un identificatore valido, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary vsli:raw="Gets the token that represents &lt;see langword=&quot;null&quot; /&gt;.">Ottiene il token che rappresenta <see langword="null" />.</summary>
      <returns vsli:raw="The token that represents &lt;see langword=&quot;null&quot; /&gt;.">Token che rappresenta <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary vsli:raw="Gets the options to be used by the code generator.">Ottiene le opzioni che verranno utilizzate dal generatore di codice.</summary>
      <returns vsli:raw="An object that indicates the options for the code generator to use.">Oggetto che indica le opzioni che verranno utilizzate dal generatore di codice.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary vsli:raw="Gets the text writer to use for output.">Ottiene il writer di testo da utilizzare per l'output.</summary>
      <returns vsli:raw="The text writer to use for output.">Writer di testo da utilizzare per l'output.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Outputs an argument in an attribute block.">Restituisce un argomento in un blocco di attributi.</summary>
      <param name="arg" vsli:raw="The attribute argument to generate code for.">Argomento dell'attributo per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute declaration collection.">Genera il codice per l'insieme specificato di dichiarazioni di attributo.</summary>
      <param name="attributes" vsli:raw="The attributes to generate code for.">Attributi per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary vsli:raw="Generates code for the specified &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt;.">Genera il codice per l'oggetto <see cref="T:System.CodeDom.FieldDirection" /> specificato.</summary>
      <param name="dir" vsli:raw="One of the enumeration values that indicates the attribute of the field.">Uno dei valori di enumerazione che indica l'attributo del campo.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Generates code for the specified expression list.">Genera il codice per l'elenco di espressioni specificato.</summary>
      <param name="expressions" vsli:raw="The expressions to generate code for.">Espressioni per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary vsli:raw="Generates code for the specified expression list.">Genera il codice per l'elenco di espressioni specificato.</summary>
      <param name="expressions" vsli:raw="The expressions to generate code for.">Espressioni per cui generare il codice.</param>
      <param name="newlineBetweenItems" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to insert a new line after each item; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per inserire una nuova riga dopo ciascun elemento, in caso contrario <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Outputs a field scope modifier that corresponds to the specified attributes.">Restituisce un modificatore di ambito del campo corrispondente agli attributi specificati.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that specifies the attributes.">Uno dei valori di enumerazione che specifica gli attributi.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary vsli:raw="Outputs the specified identifier.">Restituisce l'identificatore specificato.</summary>
      <param name="ident" vsli:raw="The identifier to output.">Identificatore che deve essere restituito.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Generates code for the specified member access modifier.">Genera il codice per il modificatore specificato di accesso del membro.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the member access modifier to generate code for.">Uno dei valori di enumerazione che indica il modificatore di accesso del membro per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Generates code for the specified member scope modifier.">Genera il codice per il modificatore specificato di ambito del membro.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the member scope modifier to generate code for.">Uno dei valori di enumerazione che indica il modificatore di ambito del membro per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary vsli:raw="Generates code for the specified operator.">Genera il codice per l'operatore specificato.</summary>
      <param name="op" vsli:raw="The operator to generate code for.">Operatore per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Generates code for the specified parameters.">Genera il codice per i parametri specificati.</summary>
      <param name="parameters" vsli:raw="The parameter declaration expressions to generate code for.">Espressioni di dichiarazione di parametro per cui generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Generates code for the specified type.">Genera il codice per il tipo specificato.</summary>
      <param name="typeRef" vsli:raw="The type to generate code for.">Tipo per il quale generare il codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary vsli:raw="Generates code for the specified type attributes.">Genera il codice per gli attributi di tipo specificati.</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the type attributes to generate code for.">Uno dei valori di enumerazione che indica gli attributi di tipo per cui generare il codice.</param>
      <param name="isStruct" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a struct; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il tipo corrisponde a una struttura, in caso contrario <see langword="false" />.</param>
      <param name="isEnum" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an enum; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il tipo corrisponde a un'enumerazione, in caso contrario <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Generates code for the specified object type and name pair.">Genera il codice per la coppia di nomi e per il tipo di oggetto specificati.</summary>
      <param name="typeRef" vsli:raw="The type.">Tipo.</param>
      <param name="name" vsli:raw="The name for the object.">Nome dell'oggetto.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary vsli:raw="Converts the specified string by formatting it with escape codes.">Converte la stringa specificata formattandola con codici di escape.</summary>
      <param name="value" vsli:raw="The string to convert.">Stringa da convertire.</param>
      <returns vsli:raw="The converted string.">Stringa convertita.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the specified code generation support is provided.">Ottiene un valore che indica se viene fornito il supporto specificato per la generazione di codice.</summary>
      <param name="support" vsli:raw="The type of code generation support to test for.">Tipo di supporto alla generazione di codice per cui eseguire il test.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified code generation support is provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se viene fornito il supporto specificato per la generazione di codice, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Crea un identificatore di escape per il valore specificato.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">Stringa per la quale deve essere creato un identificatore di escape.</param>
      <returns vsli:raw="The escaped identifier for the value.">Identificatore di escape per il valore.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Crea un identificatore valido per il valore specificato.</summary>
      <param name="value" vsli:raw="The string to generate a valid identifier for.">Stringa per la quale deve essere generato un identificatore valido.</param>
      <returns vsli:raw="A valid identifier for the specified value.">Identificatore valido per il valore specificato.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.">Genera il codice per l'unità di compilazione CodeDOM (Code Document Object Model) specificata e lo restituisce al writer di testo specificato in base alle opzioni impostate.</summary>
      <param name="e" vsli:raw="The CodeDOM compilation unit to generate code for.">Unità di compilazione CodeDOM per la quale generare il codice.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Writer di testo a cui restituire il codice.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Opzioni da usare per la generazione del codice.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> non è disponibile. <paramref name="w" /> potrebbe essere stato chiuso prima della chiamata al metodo.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.">Genera il codice per l'espressione CodeDOM (Code Document Object Model) specificata e lo restituisce al writer di testo specificato.</summary>
      <param name="e" vsli:raw="The expression to generate code for.">Espressione per cui generare il codice.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Writer di testo a cui restituire il codice.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Opzioni da usare per la generazione del codice.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> non è disponibile. <paramref name="w" /> potrebbe essere stato chiuso prima della chiamata al metodo.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.">Genera il codice per lo spazio dei nomi Code Document Object Model (CodeDOM) specificato e lo restituisce al writer di testo specificato in base alle opzioni impostate.</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">Spazio dei nomi per il quale deve essere generato il codice.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Writer di testo a cui restituire il codice.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Opzioni da usare per la generazione del codice.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> non è disponibile. <paramref name="w" /> potrebbe essere stato chiuso prima della chiamata al metodo.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.">Genera il codice per l'istruzione CodeDOM (Code Document Object Model) specificata e lo restituisce al writer di testo specificato in base alle opzioni impostate.</summary>
      <param name="e" vsli:raw="The statement that contains the CodeDOM elements to translate.">Istruzione che contiene gli elementi CodeDOM da convertire.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Writer di testo a cui restituire il codice.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Opzioni da usare per la generazione del codice.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> non è disponibile. <paramref name="w" /> potrebbe essere stato chiuso prima della chiamata al metodo.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.">Genera il codice per la dichiarazione di tipo CodeDOM (Code Document Object Model) specificata e lo restituisce al writer di testo specificato in base alle opzioni impostate.</summary>
      <param name="e" vsli:raw="The type to generate code for.">Tipo per il quale generare il codice.</param>
      <param name="w" vsli:raw="The text writer to output code to.">Writer di testo a cui restituire il codice.</param>
      <param name="o" vsli:raw="The options to use for generating code.">Opzioni da usare per la generazione del codice.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> non è disponibile. <paramref name="w" /> potrebbe essere stato chiuso prima della chiamata al metodo.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Ottiene il tipo indicato dall'oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> specificato.</summary>
      <param name="type" vsli:raw="The type to return.">Tipo da restituire.</param>
      <returns vsli:raw="The name of the data type reference.">Nome del riferimento al tipo di dati.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value that indicates whether the specified value is a valid identifier for the current language.">Ottiene un valore che indica se il valore specificato costituisce un identificatore valido per il linguaggio utilizzato.</summary>
      <param name="value" vsli:raw="The value to test.">Valore su cui eseguire il test.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il parametro <paramref name="value" /> è un identificatore valido, in caso contrario <see langword="false" /> .</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the generator provides support for the language features represented by the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object.">Ottiene un valore che indica se il generatore fornisce supporto per le funzionalità del linguaggio rappresentate dall'oggetto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> specificato.</summary>
      <param name="support" vsli:raw="The capabilities to test the generator for.">Capacità di cui verificare il supporto nel generatore.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified capabilities are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se sono supportate le funzionalità specificate, in caso contrario <see langword="false" /> .</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified value is not a valid identifier.">Genera un'eccezione se il valore specificato non è un identificatore valido.</summary>
      <param name="value" vsli:raw="The identifier to validate.">Identificatore da convalidare.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified string is not a valid identifier.">Genera un'eccezione se la stringa specificata non è un identificatore valido.</summary>
      <param name="value" vsli:raw="The identifier to test for validity as an identifier.">Identificatore del quale deve essere eseguito il test della validità come identificatore.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified identifier is invalid or conflicts with reserved or language keywords.">Se l'identificatore non è valido o è in conflitto con parole chiave riservate o di linguaggio.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary vsli:raw="Attempts to validate each identifier field contained in the specified &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; or &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; tree.">Tenta di convalidare ogni campo dell'identificatore contenuto nell'oggetto <see cref="T:System.CodeDom.CodeObject" /> specificato o nella struttura ad albero <see cref="N:System.CodeDom" />.</summary>
      <param name="e" vsli:raw="An object to test for invalid identifiers.">Oggetto per il test degli identificatori non validi.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; contains an invalid identifier.">Nell'oggetto <see cref="T:System.CodeDom.CodeObject" /> specificato è contenuto un identificatore non valido.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary vsli:raw="Represents a set of options used by a code generator.">Rappresenta un insieme di opzioni utilizzate da un generatore di codice.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary vsli:raw="Gets or sets a value indicating whether to insert blank lines between members.">Ottiene o imposta un valore che indica se inserire righe vuote tra i membri.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if blank lines should be inserted; otherwise, &lt;see langword=&quot;false&quot; /&gt;. By default, the value of this property is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> se devono essere inserite righe vuote, in caso contrario <see langword="false" />. Il valore predefinito di questa proprietà è <see langword="true" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary vsli:raw="Gets or sets the style to use for bracing.">Ottiene o imposta lo stile da utilizzare per le parentesi graffe.</summary>
      <returns vsli:raw="A string containing the bracing style to use.">Stringa contenente lo stile da utilizzare per le parentesi graffe.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary vsli:raw="Gets or sets a value indicating whether to append an &lt;see langword=&quot;else&quot; /&gt;, &lt;see langword=&quot;catch&quot; /&gt;, or &lt;see langword=&quot;finally&quot; /&gt; block, including brackets, at the closing line of each previous &lt;see langword=&quot;if&quot; /&gt; or &lt;see langword=&quot;try&quot; /&gt; block.">Ottiene o imposta un valore che indica se aggiungere un blocco <see langword="else" />, <see langword="catch" /> o <see langword="finally" />, comprese le parentesi quadre, alla fine della riga di chiusura di ciascun blocco <see langword="if" /> o <see langword="try" /> precedente.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an else should be appended; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value of this property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se deve essere aggiunto un blocco else, in caso contrario <see langword="false" />. Il valore predefinito di questa proprietà è <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary vsli:raw="Gets or sets the string to use for indentations.">Ottiene o imposta lo stile da utilizzare per il rientro.</summary>
      <returns vsli:raw="A string containing the characters to use for indentations.">Stringa contenente i caratteri da utilizzare per il rientro.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary vsli:raw="Gets or sets the object at the specified index.">Ottiene o imposta l'oggetto in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The name associated with the object to retrieve.">Nome associato all'oggetto da recuperare.</param>
      <returns vsli:raw="The object associated with the specified name. If no object associated with the specified name exists in the collection, &lt;see langword=&quot;null&quot; /&gt;.">Oggetto associato al nome specificato. Se nell'insieme non esiste alcun oggetto associato al nome specificato, sarà <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary vsli:raw="Gets or sets a value indicating whether to generate members in the order in which they occur in member collections.">Ottiene o imposta un valore che indica se generare i membri nell'ordine in cui compaiono nell'insieme dei membri.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to generate the members in the order in which they occur in the member collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value of this property is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> per generare i membri nell'ordine in cui compaiono nell'insieme dei membri, <see langword="false" />, in caso contrario. Il valore predefinito di questa proprietà è <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary vsli:raw="Provides an empty implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeParser&quot; /&gt; interface.">Fornisce un'implementazione vuota dell'interfaccia <see cref="T:System.CodeDom.Compiler.ICodeParser" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeParser&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.CodeParser" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary vsli:raw="Compiles the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Compila il flusso di testo specificato in un oggetto <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; that is used to read the code to be parsed.">Un <see cref="T:System.IO.TextReader" /> utilizzato per leggere il codice da analizzare.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; containing the code model produced from parsing the code.">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> contenente il modello di codice prodotto dall'analisi del codice.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary vsli:raw="Represents a compiler error or warning.">Rappresenta un avviso o un errore di compilazione.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; class using the specified file name, line, column, error number, and error text.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.CompilerError" /> utilizzando il nome file, la riga, la colonna, il numero e il testo di errore specificati.</summary>
      <param name="fileName" vsli:raw="The file name of the file that the compiler was compiling when it encountered the error.">Nome del file che era in compilazione quando il compilatore ha rilevato l'errore.</param>
      <param name="line" vsli:raw="The line of the source of the error.">Riga in cui è stato generato l'errore.</param>
      <param name="column" vsli:raw="The column of the source of the error.">Colonna in cui è stato generato l'errore.</param>
      <param name="errorNumber" vsli:raw="The error number of the error.">Numero dell'errore.</param>
      <param name="errorText" vsli:raw="The error message text.">Testo del messaggio di errore.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary vsli:raw="Gets or sets the column number where the source of the error occurs.">Ottiene o imposta il numero della colonna in cui è stato generato l'errore.</summary>
      <returns vsli:raw="The column number of the source file where the compiler encountered the error.">Numero della colonna del file di origine in cui il compilatore ha rilevato l'errore.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary vsli:raw="Gets or sets the error number.">Ottiene o imposta il numero di errore.</summary>
      <returns vsli:raw="The error number as a string.">Numero di errore in formato stringa.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary vsli:raw="Gets or sets the text of the error message.">Ottiene o imposta il testo del messaggio di errore.</summary>
      <returns vsli:raw="The text of the error message.">Il testo del messaggio di errore,</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary vsli:raw="Gets or sets the file name of the source file that contains the code which caused the error.">Ottiene o imposta il nome del file di origine in cui è contenuto il codice che ha causato l'errore.</summary>
      <returns vsli:raw="The file name of the source file that contains the code which caused the error.">Nome del file di origine in cui è contenuto il codice che ha causato l'errore.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary vsli:raw="Gets or sets a value that indicates whether the error is a warning.">Ottiene o imposta un valore che indica se l'errore corrisponde a un avviso.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the error is a warning; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'errore corrisponde a un avviso, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary vsli:raw="Gets or sets the line number where the source of the error occurs.">Ottiene o imposta il numero di riga in cui è stato generato l'errore.</summary>
      <returns vsli:raw="The line number of the source file where the compiler encountered the error.">Numero di riga del file di origine in cui il compilatore ha rilevato l'errore.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary vsli:raw="Provides an implementation of Object's &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt; method.">Fornisce un'implementazione del metodo <see cref="M:System.Object.ToString" /> dell'oggetto.</summary>
      <returns vsli:raw="A string representation of the compiler error.">Rappresentazione in forma di stringa dell'errore del compilatore.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects.">Rappresenta una raccolta di oggetti <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects.">Inzializza una nuova istanza di <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> contenente la matrice specificata di oggetti <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects to initialize the collection with.">Matrice di oggetti <see cref="T:System.CodeDom.Compiler.CompilerError" /> con cui inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; class that contains the contents of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> contenente il contenuto dell'oggetto <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; object with which to initialize the collection.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> con il quale inizializzare l'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object to the error collection.">Aggiunge l'oggetto <see cref="T:System.CodeDom.Compiler.CompilerError" /> specificato all'insieme di errori.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object to add.">L'oggetto <see cref="T:System.CodeDom.Compiler.CompilerError" /> da aggiungere.</param>
      <returns vsli:raw="The index at which the new element was inserted.">L'indice in corrispondenza del quale è stato inserito il nuovo elemento.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary vsli:raw="Copies the elements of an array to the end of the error collection.">Copia gli elementi di una matrice alla fine dell'insieme di errori.</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; that contains the objects to add to the collection.">Matrice di tipo <see cref="T:System.CodeDom.Compiler.CompilerError" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary vsli:raw="Adds the contents of the specified compiler error collection to the end of the error collection.">Aggiunge alla fine dell'insieme di errori il contenuto dell'insieme di errori di compilazione specificato.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; object that contains the objects to add to the collection.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> contenente gli oggetti da aggiungere all'insieme.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object.">Ottiene un valore che indica se l'insieme contiene l'oggetto <see cref="T:System.CodeDom.Compiler.CompilerError" /> specificato.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to locate.">La classe <see cref="T:System.CodeDom.Compiler.CompilerError" /> da individuare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'oggetto <see cref="T:System.CodeDom.Compiler.CompilerError" /> è incluso nella raccolta; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary vsli:raw="Copies the collection values to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance at the specified index.">Copia i valori dell'insieme in un'istanza di un oggetto <see cref="T:System.Array" /> unidimensionale in corrispondenza dell'indice specificato.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">Oggetto <see cref="T:System.Array" /> unidimensionale in cui vengono copiati i valori di <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
      <param name="index" vsli:raw="The index in the array at which to start copying.">Indice nella matrice in corrispondenza della quale iniziare a eseguire la copia.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; is greater than the available space between the index value of the &lt;paramref name=&quot;arrayIndex&quot; /&gt; parameter in the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter and the end of the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter.">La matrice indicata dal parametro <paramref name="array" /> è multidimensionale.  
-oppure- 
Il numero degli elementi dell'oggetto <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> è maggiore dello spazio disponibile tra il valore di indice del parametro <paramref name="arrayIndex" /> della matrice indicata dal parametro <paramref name="array" /> e la fine della matrice indicata dal parametro <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Il valore del parametro <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the lowbound of the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter.">Il parametro <paramref name="index" /> è minore del limite inferiore della matrice indicata dal parametro <paramref name="array" />.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary vsli:raw="Gets a value that indicates whether the collection contains errors.">Ottiene un valore che indica se l'insieme contiene errori.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme contiene errori, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary vsli:raw="Gets a value that indicates whether the collection contains warnings.">Ottiene un valore che indica se l'insieme contiene avvisi.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains warnings; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'insieme contiene avvisi, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object in the collection, if it exists in the collection.">Ottiene l'indice dell'oggetto <see cref="T:System.CodeDom.Compiler.CompilerError" /> specificato nell'insieme, se esistente.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to locate.">La classe <see cref="T:System.CodeDom.Compiler.CompilerError" /> da individuare.</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;, if found; otherwise, -1.">Indice dell'oggetto <see cref="T:System.CodeDom.Compiler.CompilerError" /> specificato incluso in <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />, se presente. In caso contrario è -1.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; into the collection at the specified index.">Inserisce l'oggetto <see cref="T:System.CodeDom.Compiler.CompilerError" /> specificato nell'insieme in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index where the compiler error should be inserted.">Indice con inizio zero in cui viene inserito l'errore di compilazione.</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to insert.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerError" /> da inserire.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; at the specified index.">Ottiene o imposta l'oggetto <see cref="T:System.CodeDom.Compiler.CompilerError" /> in corrispondenza dell'indice specificato.</summary>
      <param name="index" vsli:raw="The zero-based index of the entry to locate in the collection.">L'indice in base zero della voce da individuare all'interno dell'insieme.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; at each valid index.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> in ciascun indice valido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index value indicated by the &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">Il valore di indice specificato dal parametro <paramref name="index" /> non è compreso nell'intervallo di indici validi per l'insieme.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Removes a specific &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; from the collection.">Rimuove dall'insieme un oggetto <see cref="T:System.CodeDom.Compiler.CompilerError" /> specifico.</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerError" /> da rimuovere da <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">Impossibile trovare l'oggetto specificato nell'insieme.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary vsli:raw="Represents the configuration settings of a language provider. This class cannot be inherited.">Rappresenta le impostazioni di configurazione di un provider del linguaggio. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary vsli:raw="Gets the type of the configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation.">Ottiene il tipo dell'implementazione della classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurata.</summary>
      <returns vsli:raw="A read-only &lt;see cref=&quot;T:System.Type&quot; /&gt; instance that represents the configured language provider type.">Istanza della classe <see cref="T:System.Type" /> in sola lettura che rappresenta il tipo di provider del linguaggio configurato.</returns>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The language provider is not configured on this computer.">Il provider del linguaggio non è configurato nel computer.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="Cannot locate the type because it is a &lt;see langword=&quot;null&quot; /&gt; or empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; Cannot locate the type because the name for the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; cannot be found in the configuration file.">Impossibile trovare il tipo perché è un valore <see langword="null" /> o una stringa vuota.  
-oppure- 
Impossibile trovare il tipo perché il nome perché la classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> non è stata trovata nel file di configurazione.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary vsli:raw="Gets the configured compiler settings for the language provider implementation.">Ottiene le impostazioni del compilatore configurate per l'implementazione del provider del linguaggio.</summary>
      <returns vsli:raw="A read-only &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; instance that contains the compiler options and settings configured for the language provider.">Istanza della classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> in sola lettura che contiene le opzioni e le impostazioni del compilatore configurate per il provider del linguaggio.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the current language provider settings.">Restituisce un'istanza della classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> per le impostazioni del provider del linguaggio correnti.</summary>
      <returns vsli:raw="A CodeDOM provider associated with the language provider configuration.">Provider CodeDOM associato alla configurazione del provider del linguaggio.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the current language provider settings and specified options.">Restituisce un'istanza di <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> per le impostazioni del provider del linguaggio correnti e le opzioni specificate.</summary>
      <param name="providerOptions" vsli:raw="A collection of provider options from the configuration file.">Insieme di opzioni del provider del file di configurazione.</param>
      <returns vsli:raw="A CodeDOM provider associated with the language provider configuration and specified options.">Provider CodeDOM associato alla configurazione e alle opzioni del provider del linguaggio specificate.</returns>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The provider does not support options.">Il provider non supporta opzioni.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified object represents the same language provider and compiler settings as the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt;.">Determina se l'oggetto specificato rappresenta le stesse impostazioni del compilatore e del provider di linguaggio di quelle della classe <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> corrente.</summary>
      <param name="o" vsli:raw="The object to compare with the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt;.">Oggetto da confrontare con l'oggetto <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is a &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; object and its value is the same as this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="o" /> è un oggetto <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> con lo stesso valore di questa istanza. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary vsli:raw="Returns the file name extensions supported by the language provider.">Restituisce le estensioni di file supportate dal provider del linguaggio.</summary>
      <returns vsli:raw="An array of file name extensions supported by the language provider.">Matrice di estensioni di file supportate dal provider del linguaggio.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary vsli:raw="Returns the hash code for the current instance.">Restituisce il codice hash per l'istanza corrente.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code for the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; instance, suitable for use in hashing algorithms and data structures such as a hash table.">Codice hash di interi con segno a 32 bit per l'istanza corrente della classe <see cref="T:System.CodeDom.Compiler.CompilerInfo" />, utilizzabile in algoritmi di hash e in strutture di dati, ad esempio una tabella hash.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary vsli:raw="Gets the language names supported by the language provider.">Ottiene i nomi di linguaggio supportati dal provider del linguaggio.</summary>
      <returns vsli:raw="An array of language names supported by the language provider.">Matrice di nomi di linguaggio supportati dal provider del linguaggio.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary vsli:raw="Returns a value indicating whether the language provider implementation is configured on the computer.">Restituisce un valore che indica se l'implementazione del provider del linguaggio è configurata nel computer.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the language provider implementation type is configured on the computer; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il tipo di implementazione del provider del linguaggio è configurata nel computer; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary vsli:raw="Represents the parameters used to invoke a compiler.">Rappresenta i parametri utilizzati per richiamare un compilatore.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" />con i nomi degli assembly specificati.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">Nomi degli assembly a cui fare riferimento.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names and output file name.">Consente di inizializzare una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> con i nomi degli assembly e il nome del file di output specificati.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">Nomi degli assembly a cui fare riferimento.</param>
      <param name="outputName" vsli:raw="The output file name.">Nome del file di output.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names, output name, and a value indicating whether to include debug information.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> utilizzando i nomi degli assembly e il nome del file di output specificati nonché un valore che indica se includere informazioni di debug.</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">Nomi degli assembly a cui fare riferimento.</param>
      <param name="outputName" vsli:raw="The output file name.">Nome del file di output.</param>
      <param name="includeDebugInformation" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include debug information; &lt;see langword=&quot;false&quot; /&gt; to exclude debug information.">
        <see langword="true" /> per includere informazioni di debug; <see langword="false" /> per escludere informazioni di debug.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary vsli:raw="Gets or sets optional command-line arguments to use when invoking the compiler.">Ottiene o imposta gli argomenti opzionali della riga di comando da utilizzare quando viene invocato il compilatore.</summary>
      <returns vsli:raw="Any additional command-line arguments for the compiler.">Argomenti della riga di comando aggiuntiva per il compilatore.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary vsli:raw="Gets or sets the name of the core or standard assembly that contains basic types such as &lt;see cref=&quot;T:System.Object&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">Ottiene o imposta il nome dell'assembly principale o standard contenente i tipi di base come <see cref="T:System.Object" />, <see cref="T:System.String" /> o <see cref="T:System.Int32" />.</summary>
      <returns vsli:raw="The name of the core assembly that contains basic types.">Nome dell'assembly principale contenente i tipi di base.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary vsli:raw="Gets the .NET resource files to include when compiling the assembly output.">Ottiene i file di risorse .NET Framework da includere durante la compilazione dell'output dell'assembly.</summary>
      <returns vsli:raw="A collection that contains the file paths of .NET resources to include in the generated assembly.">Raccolta che contiene i percorsi dei file delle risorse .NET Framework da includere nell'assembly generato.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary vsli:raw="Gets or sets a value indicating whether to generate an executable.">Ottiene o imposta un valore che indica se deve essere generato un eseguibile.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an executable should be generated; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se è necessario che venga generato un eseguibile, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary vsli:raw="Gets or sets a value indicating whether to generate the output in memory.">Ottiene o imposta un valore che indica se deve essere generato output in memoria.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the compiler should generate the output in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il compilatore deve generare l'output in memoria, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary vsli:raw="Gets or sets a value indicating whether to include debug information in the compiled executable.">Ottiene o imposta un valore che indica se includere le informazioni di debug nell'eseguibile compilato.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if debug information should be generated; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se devono essere generate informazioni di debug, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary vsli:raw="Gets the .NET resource files that are referenced in the current source.">Ottiene i file di risorse .NET Framework a cui viene fatto riferimento nell'origine corrente.</summary>
      <returns vsli:raw="A collection that contains the file paths of .NET resources that are referenced by the source.">Raccolta che contiene i percorsi dei file delle risorse .NET Framework a cui viene fatto riferimento dall'origine.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary vsli:raw="Gets or sets the name of the main class.">Ottiene o imposta il nome della classe principale.</summary>
      <returns vsli:raw="The name of the main class.">Nome della classe principale.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary vsli:raw="Gets or sets the name of the output assembly.">Ottiene o imposta il nome dell'assembly di output.</summary>
      <returns vsli:raw="The name of the output assembly.">Nome dell'assembly di output.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary vsli:raw="Gets the assemblies referenced by the current project.">Ottiene gli assembly cui fa riferimento il progetto corrente.</summary>
      <returns vsli:raw="A collection that contains the assembly names that are referenced by the source to compile.">Raccolta che contiene i nomi di assembly cui viene fatto riferimento dall'origine da compilare.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary vsli:raw="Gets or sets the collection that contains the temporary files.">Ottiene o imposta l'insieme che contiene i file temporanei.</summary>
      <returns vsli:raw="A collection that contains the temporary files.">Raccolta contenente i file temporanei.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary vsli:raw="Gets or sets a value indicating whether to treat warnings as errors.">Ottiene o imposta un valore che indica se gli avvisi devono essere considerati come errori.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if warnings should be treated as errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se gli avvisi devono essere gestiti come errori, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary vsli:raw="Gets or sets the user token to use when creating the compiler process.">Ottiene o imposta il token utente da utilizzare durante la creazione del processo di compilazione.</summary>
      <returns vsli:raw="The user token to use.">Token utente da utilizzare.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary vsli:raw="Gets or sets the warning level at which the compiler aborts compilation.">Ottiene o imposta il livello di avviso in corrispondenza del quale il compilatore interrompe la compilazione.</summary>
      <returns vsli:raw="The warning level at which the compiler aborts compilation.">Livello di avviso in corrispondenza del quale il compilatore interrompe la compilazione.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary vsli:raw="Gets or sets the file name of a Win32 resource file to link into the compiled assembly.">Ottiene o imposta il nome di un file di risorse Win32 da collegare nell'assembly compilato.</summary>
      <returns vsli:raw="A Win32 resource file that will be linked into the compiled assembly.">File di risorse Win32 che verrà collegato nell'assembly compilato.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary vsli:raw="Represents the results of compilation that are returned from a compiler.">Rappresenta i risultati della compilazione restituiti da un compilatore.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; class that uses the specified temporary files.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.CompilerResults" /> che utilizza i file temporanei specificati.</summary>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con cui gestire e archiviare i riferimenti a file intermedi generati durante la compilazione.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary vsli:raw="Gets or sets the compiled assembly.">Ottiene o imposta l'assembly compilato.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that indicates the compiled assembly.">Oggetto <see cref="T:System.Reflection.Assembly" /> che indica l'assembly compilato.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary vsli:raw="Gets the collection of compiler errors and warnings.">Ottiene l'insieme degli errori e degli avvisi del compilatore.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; that indicates the errors and warnings resulting from compilation, if any.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> che indica gli eventuali errori e avvisi risultanti dalla compilazione.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary vsli:raw="Gets or sets the compiler's return value.">Ottiene o imposta il valore restituito dal compilatore.</summary>
      <returns vsli:raw="The compiler's return value.">Valore restituito dal compilatore.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary vsli:raw="Gets the compiler output messages.">Ottiene i messaggi di output del compilatore.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.StringCollection&quot; /&gt; that contains the output messages.">Oggetto <see cref="T:System.Collections.Specialized.StringCollection" /> che contiene i messaggi di output.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary vsli:raw="Gets or sets the path of the compiled assembly.">Ottiene o imposta il percorso dell'assembly compilato.</summary>
      <returns vsli:raw="The path of the assembly, or &lt;see langword=&quot;null&quot; /&gt; if the assembly was generated in memory.">Percorso dell'assembly o <see langword="null" /> se l'assembly è stato generato nella memoria.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary vsli:raw="Gets or sets the temporary file collection to use.">Ottiene o imposta l'insieme dei file temporanei da utilizzare.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con cui gestire e archiviare i riferimenti a file intermedi generati durante la compilazione.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary vsli:raw="Provides command execution functions for invoking compilers. This class cannot be inherited.">Fornisce funzioni di esecuzione dei comandi per richiamare i compilatori. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary vsli:raw="Executes the command using the specified temporary files and waits for the call to return.">Esegue il comando usando i file temporanei specificati e attende la chiamata da restituire.</summary>
      <param name="cmd" vsli:raw="The command to execute.">Comando da eseguire.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con cui gestire e archiviare i riferimenti a file intermedi generati durante la compilazione.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified user token and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.">Esegue il comando specificato utilizzando i file temporanei e il token utente specificati e attende il risultato della chiamata, memorizzando le informazioni sugli errori e l'output generati dal compilatore nelle stringhe specificate.</summary>
      <param name="userToken" vsli:raw="The token to start the compiler process with.">Token con cui deve essere avviato il processo di compilazione.</param>
      <param name="cmd" vsli:raw="The command to execute.">Comando da eseguire.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con cui gestire e archiviare i riferimenti a file intermedi generati durante la compilazione.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Riferimento a una stringa in cui verrà memorizzato l'output di messaggi generato dal compilatore.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Riferimento a una stringa in cui verrà memorizzato il nome dell'errore o degli errori riscontrati.</param>
      <returns vsli:raw="The return value from the compiler.">Valore restituito dal compilatore.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified user token, current directory, and temporary files; then waits for the call to return, storing output and error information from the compiler in the specified strings.">Esegue il comando specificato utilizzando i file temporanei, la directory corrente e il token utente specificati e attende il risultato della chiamata, memorizzando le informazioni sugli errori e l'output generati dal compilatore nelle stringhe specificate.</summary>
      <param name="userToken" vsli:raw="The token to start the compiler process with.">Token con cui deve essere avviato il processo di compilazione.</param>
      <param name="cmd" vsli:raw="The command to execute.">Comando da eseguire.</param>
      <param name="currentDir" vsli:raw="The directory to start the process in.">Directory in cui deve essere avviato il processo.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con cui gestire e archiviare i riferimenti a file intermedi generati durante la compilazione.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Riferimento a una stringa in cui verrà memorizzato l'output di messaggi generato dal compilatore.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Riferimento a una stringa in cui verrà memorizzato il nome dell'errore o degli errori riscontrati.</param>
      <returns vsli:raw="The return value from the compiler.">Valore restituito dal compilatore.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified temporary files and waits for the call to return, storing output and error information from the compiler in the specified strings.">Esegue il comando specificato utilizzando i file temporanei specificati e attende il risultato della chiamata, memorizzando le informazioni sugli errori e l'output generati dal compilatore nelle stringhe specificate.</summary>
      <param name="cmd" vsli:raw="The command to execute.">Comando da eseguire.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con cui gestire e archiviare i riferimenti a file intermedi generati durante la compilazione.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Riferimento a una stringa in cui verrà memorizzato l'output di messaggi generato dal compilatore.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Riferimento a una stringa in cui verrà memorizzato il nome dell'errore o degli errori riscontrati.</param>
      <returns vsli:raw="The return value from the compiler.">Valore restituito dal compilatore.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified current directory and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.">Esegue il comando specificato utilizzando i file temporanei e la directory corrente specificati e attende il risultato della chiamata, memorizzando le informazioni sugli errori e l'output generati dal compilatore nelle stringhe specificate.</summary>
      <param name="cmd" vsli:raw="The command to execute.">Comando da eseguire.</param>
      <param name="currentDir" vsli:raw="The current directory.">La directory corrente.</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con cui gestire e archiviare i riferimenti a file intermedi generati durante la compilazione.</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">Riferimento a una stringa in cui verrà memorizzato l'output di messaggi generato dal compilatore.</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">Riferimento a una stringa in cui verrà memorizzato il nome dell'errore o degli errori riscontrati.</param>
      <returns vsli:raw="The return value from the compiler.">Valore restituito dal compilatore.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary vsli:raw="Defines identifiers used to determine whether a code generator supports certain types of code elements.">Definisce gli identificatori utilizzati per stabilire se un generatore di codice supporta determinati tipi di elementi di codice.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary vsli:raw="Indicates the generator supports arrays of arrays.">Indica che il generatore supporta le matrici di matrici.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary vsli:raw="Indicates the generator supports assembly attributes.">Indica che il generatore supporta gli attributi di assembly.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary vsli:raw="Indicates the generator supports chained constructor arguments.">Indica che il generatore supporta gli argomenti concatenati del costruttore.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary vsli:raw="Indicates the generator supports complex expressions.">Indica che il generatore supporta le espressioni complesse.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary vsli:raw="Indicates the generator supports delegate declarations.">Indica che il generatore supporta le dichiarazioni delegate.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary vsli:raw="Indicates the generator supports enumeration declarations.">Indica che il generatore supporta le dichiarazioni di enumerazione.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary vsli:raw="Indicates the generator supports event declarations.">Indica che il generatore supporta le dichiarazioni di evento.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary vsli:raw="Indicates the generator supports the declaration of indexer properties.">Indica che il generatore supporta la dichiarazione di proprietà di indicizzatore.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary vsli:raw="Indicates the generator supports interface declarations.">Indica che il generatore supporta le dichiarazioni di interfaccia.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary vsli:raw="Indicates the generator supports value type declarations.">Indica che il generatore supporta le dichiarazioni di tipi di valore.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary vsli:raw="Indicates the generator supports a program entry point method designation. This is used when building executables.">Indica che il generatore supporta una designazione del metodo del punto di ingresso del programma. Utilizzato nella compilazione di eseguibili.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary vsli:raw="Indicates the generator supports generic type declarations.">Indica che il generatore supporta le dichiarazioni di tipi generici.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary vsli:raw="Indicates the generator supports generic type references.">Indica che il generatore supporta riferimenti a tipi generici.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary vsli:raw="Indicates the generator supports goto statements.">Indica che il generatore supporta le istruzioni goto.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary vsli:raw="Indicates the generator supports referencing multidimensional arrays. Currently, the CodeDom cannot be used to instantiate multidimensional arrays.">Indica che il generatore supporta il riferimento a matrici multidimensionali. Non è attualmente possibile utilizzare CodeDom per creare istanze di matrici multidimensionali.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary vsli:raw="Indicates the generator supports the declaration of members that implement multiple interfaces.">Indica che il generatore supporta la dichiarazione di membri che implementano più interfacce.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary vsli:raw="Indicates the generator supports the declaration of nested types.">Indica che il generatore supporta la dichiarazione di tipi annidati.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary vsli:raw="Indicates the generator supports parameter attributes.">Indica che il generatore supporta gli attributi di parametro.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary vsli:raw="Indicates the generator supports partial type declarations.">Indica che il generatore supporta le dichiarazioni di tipi parziali.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary vsli:raw="Indicates the generator supports public static members.">Indica che il generatore supporta membri statici pubblici.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary vsli:raw="Indicates the generator supports reference and out parameters.">Indica che il generatore supporta i parametri reference e out.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary vsli:raw="Indicates the generator supports compilation with .NET resources. These can be default resources compiled directly into an assembly, or resources referenced in a satellite assembly.">Indica che il generatore supporta la compilazione con risorse .NET Framework, che possono essere risorse predefinite compilate direttamente in un assembly oppure risorse a cui viene fatto riferimento in un assembly satellite.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary vsli:raw="Indicates the generator supports return type attribute declarations.">Indica che il generatore supporta le dichiarazioni di attributi di tipi restituiti.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary vsli:raw="Indicates the generator supports static constructors.">Indica che il generatore supporta i costruttori statici.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary vsli:raw="Indicates the generator supports &lt;c&gt;try-catch&lt;/c&gt; statements.">Indica che il generatore supporta le istruzioni <see langword="try...catch" />.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary vsli:raw="Indicates the generator supports compilation with Win32 resources.">Indica che il generatore supporta la compilazione con risorse Win32.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary vsli:raw="Defines an interface for invoking compilation of source code or a CodeDOM tree using a specific compiler.">Definisce un'interfaccia per richiamare mediante un compilatore specifico la compilazione di codice sorgente o una struttura ad albero CodeDOM.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Compiles an assembly from the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; tree contained in the specified &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;, using the specified compiler settings.">Compila un assembly dalla struttura ad albero <see cref="N:System.CodeDom" /> contenuta nella <see cref="T:System.CodeDom.CodeCompileUnit" /> specificata utilizzando le impostazioni del compilatore specificato.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le impostazioni per la compilazione.</param>
      <param name="compilationUnit" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">Oggetto <see cref="T:System.CodeDom.CodeCompileUnit" /> che indica il codice da compilare.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> che indica i risultati della compilazione.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles an assembly based on the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; trees contained in the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects, using the specified compiler settings.">Compila un assembly in base alle strutture ad albero <see cref="N:System.CodeDom" /> contenute nella matrice di oggetti <see cref="T:System.CodeDom.CodeCompileUnit" /> specificata utilizzando le impostazioni del compilatore specificato.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le impostazioni per la compilazione.</param>
      <param name="compilationUnits" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">Matrice di tipo <see cref="T:System.CodeDom.CodeCompileUnit" /> che indica il codice da compilare.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> che indica i risultati della compilazione.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles an assembly from the source code contained within the specified file, using the specified compiler settings.">Compila un assembly dal codice sorgente contenuto nel file specificato utilizzando le impostazioni del compilatore specificato.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le impostazioni per la compilazione.</param>
      <param name="fileName" vsli:raw="The file name of the file that contains the source code to compile.">Nome del file contenente il codice sorgente da compilare.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> che indica i risultati della compilazione.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the source code contained within the specified files, using the specified compiler settings.">Compila un assembly dal codice sorgente contenuto nei file specificati utilizzando le impostazioni del compilatore specificato.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le impostazioni per la compilazione.</param>
      <param name="fileNames" vsli:raw="The file names of the files to compile.">Nomi dei file da compilare.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> che indica i risultati della compilazione.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles an assembly from the specified string containing source code, using the specified compiler settings.">Compila un assembly dalla stringa specificata contenente il codice sorgente utilizzando le impostazioni del compilatore specificato.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le impostazioni per la compilazione.</param>
      <param name="source" vsli:raw="The source code to compile.">Codice sorgente da compilare.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> che indica i risultati della compilazione.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.">Compila un assembly dalla matrice di stringhe specificata contenente il codice sorgente utilizzando le impostazioni del compilatore specificato.</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> che indica le impostazioni per la compilazione.</param>
      <param name="sources" vsli:raw="The source code strings to compile.">Stringhe di codice sorgente da compilare.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">Oggetto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> che indica i risultati della compilazione.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary vsli:raw="Defines an interface for generating code.">Definisce un'interfaccia per la generazione di codice.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">Crea un identificatore di escape per il valore specificato.</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">Stringa per la quale deve essere creato un identificatore di escape.</param>
      <returns vsli:raw="The escaped identifier for the value.">Identificatore di escape per il valore.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">Crea un identificatore valido per il valore specificato.</summary>
      <param name="value" vsli:raw="The string to generate a valid identifier for.">Stringa per la quale deve essere generato un identificatore valido.</param>
      <returns vsli:raw="A valid identifier for the specified value.">Identificatore valido per il valore specificato.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.">Genera il codice per l'unità di compilazione CodeDOM (Code Document Object Model) specificata e lo restituisce al writer di testo specificato in base alle opzioni impostate.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeCompileUnit" /> per il quale deve essere generato il codice.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">Oggetto <see cref="T:System.IO.TextWriter" /> nel quale deve essere restituito il codice.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Oggetto <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> che indica le opzioni da utilizzare per la generazione del codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.">Genera il codice per l'espressione CodeDOM (Code Document Object Model) specificata e lo restituisce al writer di testo specificato.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeExpression" /> che indica l'espressione per la quale deve essere generato il codice.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">Oggetto <see cref="T:System.IO.TextWriter" /> nel quale deve essere restituito il codice.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Oggetto <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> che indica le opzioni da utilizzare per la generazione del codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.">Genera il codice per lo spazio dei nomi Code Document Object Model (CodeDOM) specificato e lo restituisce al writer di testo specificato in base alle opzioni impostate.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; that indicates the namespace to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeNamespace" /> che indica lo spazio dei nomi per il quale deve essere generato il codice.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">Oggetto <see cref="T:System.IO.TextWriter" /> nel quale deve essere restituito il codice.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Oggetto <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> che indica le opzioni da utilizzare per la generazione del codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.">Genera il codice per l'istruzione CodeDOM (Code Document Object Model) specificata e lo restituisce al writer di testo specificato in base alle opzioni impostate.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the CodeDOM elements to translate.">Oggetto <see cref="T:System.CodeDom.CodeStatement" /> contenente gli elementi CodeDOM da convertire.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">Oggetto <see cref="T:System.IO.TextWriter" /> nel quale deve essere restituito il codice.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Oggetto <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> che indica le opzioni da utilizzare per la generazione del codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.">Genera il codice per la dichiarazione di tipo CodeDOM (Code Document Object Model) specificata e lo restituisce al writer di testo specificato in base alle opzioni impostate.</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; that indicates the type to generate code for.">Oggetto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> che indica il tipo per il quale deve essere generato il codice.</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">Oggetto <see cref="T:System.IO.TextWriter" /> nel quale deve essere restituito il codice.</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">Oggetto <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> che indica le opzioni da utilizzare per la generazione del codice.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">Ottiene il tipo indicato dall'oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> specificato.</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type to return.">Oggetto <see cref="T:System.CodeDom.CodeTypeReference" /> che indica il tipo da restituire.</param>
      <returns vsli:raw="A text representation of the specified type for the language this code generator is designed to generate code in. For example, in Visual Basic, passing in type System.Int32 will return &quot;Integer&quot;.">Rappresentazione testo del tipo specificato per il linguaggio in cui il generatore di codice è progettato per generare codice. In Visual Basic ad esempio se si passa il tipo System.Int32, verrà restituito "Integer".</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value that indicates whether the specified value is a valid identifier for the current language.">Ottiene un valore che indica se il valore specificato costituisce un identificatore valido per il linguaggio utilizzato.</summary>
      <param name="value" vsli:raw="The value to test for being a valid identifier.">Valore di cui verificare la validità come identificatore.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il parametro <paramref name="value" /> è un identificatore valido, in caso contrario <see langword="false" /> .</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the generator provides support for the language features represented by the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object.">Ottiene un valore che indica se il generatore fornisce supporto per le funzionalità del linguaggio rappresentate dall'oggetto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> specificato.</summary>
      <param name="supports" vsli:raw="The capabilities to test the generator for.">Capacità di cui verificare il supporto nel generatore.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified capabilities are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se sono supportate le funzionalità specificate, in caso contrario <see langword="false" /> .</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified value is not a valid identifier.">Genera un'eccezione se il valore specificato non è un identificatore valido.</summary>
      <param name="value" vsli:raw="The identifier to validate.">Identificatore da convalidare.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The identifier is not valid.">L'identificatore non è valido.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary vsli:raw="Defines an interface for parsing code into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Definisce un'interfaccia per l'analisi del codice in un'<see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary vsli:raw="When implemented in a derived class, compiles the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">Quando implementato in una classe derivata, compila il flusso di testo specificato in un'<see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; that can be used to read the code to be compiled.">Oggetto <see cref="T:System.IO.TextReader" /> che può essere utilizzato per la lettura del codice da compilare.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that contains a representation of the parsed code.">Oggetto <see cref="T:System.CodeDom.CodeCompileUnit" /> che contiene una rappresentazione del codice analizzato.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary vsli:raw="Defines identifiers that indicate special features of a language.">Definisce gli identificatori che indicano speciali funzionalità di un linguaggio.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary vsli:raw="The language is case-insensitive.">Il linguaggio non rileva la distinzione tra maiuscole e minuscole.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary vsli:raw="The language has default characteristics.">Il linguaggio dispone di caratteristiche predefinite.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary vsli:raw="Represents a collection of temporary files.">Rappresenta una raccolta di file temporanei.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class with default values.">Inizializza una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> con i valori predefiniti.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class using the specified temporary directory that is set to delete the temporary files after their generation and use, by default.">Per impostazione predefinita, inizializza una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> utilizzando la directory temporanea specificata impostata per l'eliminazione dei file temporanei dopo che sono stati generati e utilizzati.</summary>
      <param name="tempDir" vsli:raw="A path to the temporary directory to use for storing the temporary files.">Percorso della directory temporanea da utilizzare per la memorizzazione dei file temporanei.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class using the specified temporary directory and specified value indicating whether to keep or delete the temporary files after their generation and use, by default.">Per impostazione predefinita, inizializza una nuova istanza della classe <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> utilizzando la directory temporanea specificata e il valore specificato che indica se conservare o eliminare i file temporanei dopo che sono stati generati e utilizzati.</summary>
      <param name="tempDir" vsli:raw="A path to the temporary directory to use for storing the temporary files.">Percorso della directory temporanea da utilizzare per la memorizzazione dei file temporanei.</param>
      <param name="keepFiles" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the temporary files should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the temporary files should be deleted.">
        <see langword="true" /> se i file temporanei devono essere conservati dopo l'utilizzo, <see langword="false" /> se devono essere eliminati.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary vsli:raw="Adds a file name with the specified file name extension to the collection.">Aggiunge all'insieme un nome file con l'estensione specificata.</summary>
      <param name="fileExtension" vsli:raw="The file name extension for the auto-generated temporary file name to add to the collection.">Estensione del nome di file temporaneo generato automaticamente da aggiungere all'insieme.</param>
      <returns vsli:raw="A file name with the specified extension that was just added to the collection.">Nuovo nome file con l'estensione specificata aggiunto all'insieme.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary vsli:raw="Adds a file name with the specified file name extension to the collection, using the specified value indicating whether the file should be deleted or retained.">Aggiunge all'insieme un nome file con l'estensione specificata, utilizzando il valore specificato che indica se il file debba essere eliminato o conservato.</summary>
      <param name="fileExtension" vsli:raw="The file name extension for the auto-generated temporary file name to add to the collection.">Estensione del nome di file temporaneo generato automaticamente da aggiungere all'insieme.</param>
      <param name="keepFile" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the file should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the file should be deleted.">
        <see langword="true" /> se il file deve essere conservato dopo l'utilizzo, <see langword="false" /> se deve essere eliminato.</param>
      <returns vsli:raw="A file name with the specified extension that was just added to the collection.">Nuovo nome file con l'estensione specificata aggiunto all'insieme.</returns>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileExtension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.">
        <paramref name="fileExtension" /> è <see langword="null" /> o una stringa vuota.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary vsli:raw="Adds the specified file to the collection, using the specified value indicating whether to keep the file after the collection is disposed or when the &lt;see cref=&quot;M:System.CodeDom.Compiler.TempFileCollection.Delete&quot; /&gt; method is called.">Aggiunge all'insieme il file specificato, utilizzando il valore specificato che indica se il file debba essere conservato quando l'insieme viene eliminato o quando viene chiamato il metodo <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" />.</summary>
      <param name="fileName" vsli:raw="The name of the file to add to the collection.">Nome del file da aggiungere all'insieme.</param>
      <param name="keepFile" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the file should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the file should be deleted.">
        <see langword="true" /> se il file deve essere conservato dopo l'utilizzo, <see langword="false" /> se deve essere eliminato.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileName&quot; /&gt; is a duplicate.">
        <paramref name="fileName" /> è <see langword="null" /> o una stringa vuota.  
-oppure- 
 <paramref name="fileName" /> è un duplicato.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary vsli:raw="Gets the full path to the base file name, without a file name extension, on the temporary directory path, that is used to generate temporary file names for the collection.">Ottiene il percorso completo del nome di file di base privo di estensione nel percorso della directory temporanea utilizzata per generare nomi di file temporanei per l'insieme.</summary>
      <returns vsli:raw="The full path to the base file name, without a file name extension, on the temporary directory path, that is used to generate temporary file names for the collection.">Percorso completo del nome di file di base privo di estensione nel percorso della directory temporanea utilizzata per generare nomi di file temporanei per l'insieme.</returns>
      <exception cref="T:System.Security.SecurityException" vsli:raw="If the &lt;see cref=&quot;P:System.CodeDom.Compiler.TempFileCollection.BasePath&quot; /&gt; property has not been set or is set to &lt;see langword=&quot;null&quot; /&gt;, and &lt;see cref=&quot;F:System.Security.Permissions.FileIOPermissionAccess.AllAccess&quot; /&gt; is not granted for the temporary directory indicated by the &lt;see cref=&quot;P:System.CodeDom.Compiler.TempFileCollection.TempDir&quot; /&gt; property.">Se la proprietà <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" /> non è stata impostata o è impostata su <see langword="null" /> e <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> non è concesso per la directory temporanea indicata dalla proprietà <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary vsli:raw="Copies the members of the collection to the specified string, beginning at the specified index.">Copia i membri dell'insieme nella stringa specificata, a partire dall'indice specificato.</summary>
      <param name="fileNames" vsli:raw="The array of strings to copy to.">Matrice di stringhe in cui deve essere effettuata la copia.</param>
      <param name="start" vsli:raw="The index of the array to begin copying to.">Indice della matrice in corrispondenza del quale deve iniziare la copiatura.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary vsli:raw="Gets the number of files in the collection.">Ottiene il numero di file nell'insieme.</summary>
      <returns vsli:raw="The number of files in the collection.">Numero dei file inclusi nell'insieme.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary vsli:raw="Deletes the temporary files within this collection that were not marked to be kept.">Elimina dall'insieme i file temporanei non contrassegnati per la conservazione.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; and optionally releases the managed resources.">Rilascia le risorse non gestite usate da <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> e, facoltativamente, le risorse gestite.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite, <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary vsli:raw="Attempts to delete the temporary files before this object is reclaimed by garbage collection.">Tenta di eliminare i file temporanei prima che questo oggetto venga recuperato dalla procedura di Garbage Collection.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that can enumerate the members of the collection.">Ottiene un enumeratore in grado di enumerare i membri dell'insieme.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that contains the collection's members.">Oggetto <see cref="T:System.Collections.IEnumerator" /> che contiene i membri dell'insieme.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary vsli:raw="Gets or sets a value indicating whether to keep the files, by default, when the &lt;see cref=&quot;M:System.CodeDom.Compiler.TempFileCollection.Delete&quot; /&gt; method is called or the collection is disposed.">Per impostazione predefinita, ottiene o imposta un valore che indica se conservare i file quando viene chiamato il metodo <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> o viene eliminato l'insieme.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the files should be kept; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se i file devono essere conservati, in caso contrario <see langword="false" /> .</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at the specified index of the target array.">Copia gli elementi dell'insieme in una matrice, iniziando dall'indice specificato della matrice di destinazione.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">Oggetto <see cref="T:System.Array" /> unidimensionale che rappresenta la destinazione degli elementi copiati dall'oggetto <see cref="T:System.Collections.ICollection" />. L'indicizzazione di <see cref="T:System.Array" /> deve essere in base zero.</param>
      <param name="start" vsli:raw="The zero-based index in array at which copying begins.">Indice in base zero nella matrice in corrispondenza del quale ha inizio la copia.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">Ottiene il numero di elementi contenuti nella raccolta.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Il numero di elementi contenuti in <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread safe).">Ottiene un valore che indica se l'accesso alla raccolta è sincronizzato (thread-safe).</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'accesso a <see cref="T:System.Collections.ICollection" /> è sincronizzato (thread-safe); in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">Ottiene un oggetto che può essere usato per sincronizzare l'accesso alla raccolta.</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">Oggetto che può essere usato per sincronizzare l'accesso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Oggetto <see cref="T:System.Collections.IEnumerator" /> che può essere usato per eseguire l'iterazione della raccolta.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary vsli:raw="Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.">Esegue attività definite dall'applicazione, come rilasciare o reimpostare risorse non gestite.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary vsli:raw="Gets the temporary directory to store the temporary files in.">Ottiene la directory temporanea in cui devono essere memorizzati i file temporanei.</summary>
      <returns vsli:raw="The temporary directory to store the temporary files in.">Directory temporanea in cui devono essere memorizzati i file temporanei.</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary vsli:raw="Defines identifiers used to indicate the direction of parameter and argument declarations.">Definisce gli identificatori utilizzati per indicare la direzione delle dichiarazioni di parametri e argomenti.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary vsli:raw="An incoming field.">Campo in ingresso.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary vsli:raw="An outgoing field.">Campo in uscita.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary vsli:raw="A field by reference.">Campo per riferimento.</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary vsli:raw="Defines member attribute identifiers for class members.">Definisce gli identificatori degli attributi dei membri per i membri della classe.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary vsli:raw="An abstract member.">Membro astratto.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary vsli:raw="An access mask.">Maschera di accesso.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary vsli:raw="A member that is accessible to any class within the same assembly.">Membro accessibile a qualsiasi classe all'interno dello stesso assembly.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary vsli:raw="A constant member.">Membro costante.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary vsli:raw="A member that is accessible within the family of its class and derived classes.">Membro accessibile all'interno della famiglia della propria classe e delle classi derivate.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary vsli:raw="A member that is accessible within its class, and derived classes in the same assembly.">Membro accessibile all'interno della propria classe e delle classi derivate nello stesso assembly.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary vsli:raw="A member that is accessible within its class, its derived classes in any assembly, and any class in the same assembly.">Membro accessibile all'interno della propria classe, delle classi derivate in qualsiasi assembly e di qualsiasi classe nello stesso assembly.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary vsli:raw="A member that cannot be overridden in a derived class.">Membro che non può essere sottoposto a override in una classe derivata.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary vsli:raw="A new member.">Nuovo membro.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary vsli:raw="An overloaded member. Some languages, such as Visual Basic, require overloaded members to be explicitly indicated.">Membro di overload. In alcuni linguaggi, come Visual Basic, è necessario indicare in modo esplicito i membri di overload.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary vsli:raw="A member that overrides a base class member.">Membro che esegue l'override di un membro di classe base.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary vsli:raw="A private member.">Membro privato.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary vsli:raw="A public member.">Membro pubblico.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary vsli:raw="A scope mask.">Maschera di ambito.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary vsli:raw="A static member. In Visual Basic, this is equivalent to the &lt;see langword=&quot;Shared&quot; /&gt; keyword.">Membro statico. In Visual Basic, è equivalente alla parola chiave <see langword="Shared" />.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary vsli:raw="A VTable mask.">Maschera VTable.</summary>
    </member>
  </members>
</doc>
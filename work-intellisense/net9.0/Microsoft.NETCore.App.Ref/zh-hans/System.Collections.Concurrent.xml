<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections.Concurrent</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Concurrent.BlockingCollection`1">
      <summary vsli:raw="Provides blocking and bounding capabilities for thread-safe collections that implement &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">为实现 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 的线程安全集合提供阻塞和限制功能。</summary>
      <typeparam name="T" vsli:raw="The type of elements in the collection.">集合中的元素类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; class without an upper-bound.">初始化 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的新实例，该实例没有上限。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; class without an upper-bound and using the provided &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt; as its underlying data store.">初始化 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的新实例，该实例没有上限，并使用提供的 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 作为其基础数据存储区。</summary>
      <param name="collection" vsli:raw="The collection to use as the underlying data store.">要用作基础数据存储区的集合。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collection&quot; /&gt; argument is null.">
        <paramref name="collection" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; class with the specified upper-bound and using the provided &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt; as its underlying data store.">初始化 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的新实例，该实例具有指定的上限，并使用提供的 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 作为其基础数据存储区。</summary>
      <param name="collection" vsli:raw="The collection to use as the underlying data store.">要用作基础数据存储区的集合。</param>
      <param name="boundedCapacity" vsli:raw="The bounded size of the collection.">集合的限制大小。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collection&quot; /&gt; argument is null.">
        <paramref name="collection" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;boundedCapacity&quot; /&gt; is not a positive value.">
        <paramref name="boundedCapacity" /> 不是正值。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The supplied &lt;paramref name=&quot;collection&quot; /&gt; contains more values than is permitted by &lt;paramref name=&quot;boundedCapacity&quot; /&gt;.">所提供 <paramref name="collection" /> 包含的值比 <paramref name="boundedCapacity" /> 允许的值多。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; class with the specified upper-bound.">初始化 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的新实例，该实例具有指定的上限。</summary>
      <param name="boundedCapacity" vsli:raw="The bounded size of the collection.">集合的限制大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;boundedCapacity&quot; /&gt; is not a positive value.">
        <paramref name="boundedCapacity" /> 不是正值。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0)">
      <summary vsli:raw="Adds the item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">将项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中。</summary>
      <param name="item" vsli:raw="The item to be added to the collection. The value can be a null reference.">要添加到集合的项。 该值可以是 null 引用。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加。  
  
- 或 - 
基础集合未接受该项。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)">
      <summary vsli:raw="Adds the item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">将项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中。</summary>
      <param name="item" vsli:raw="The item to be added to the collection. The value can be a null reference.">要添加到集合的项。 该值可以是 null 引用。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">如果已取消 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed or the &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; that owns &lt;paramref name=&quot;cancellationToken&quot; /&gt; has been disposed.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已被释放，或拥有 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加。  
  
- 或 - 
基础集合未接受该项。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
      <summary vsli:raw="Adds the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">向任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中添加指定的项。</summary>
      <param name="collections" vsli:raw="The array of collections.">集合的数组。</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">要添加到其中一个集合的项。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">至少已释放其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="collections" /> 的计数大于上限（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">
        <paramref name="collections" /> 参数是一个长度为 0 的数组，或者包含 NULL 元素，或者至少一个集合已标记为完成添加。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">至少一个基础集合未接受该项。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added.">向其添加项的集合在 <paramref name="collections" /> 数组中的索引。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)">
      <summary vsli:raw="Adds the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">向任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中添加指定的项。</summary>
      <param name="collections" vsli:raw="The array of collections.">集合的数组。</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">要添加到其中一个集合的项。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">如果已取消 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">至少一个基础集合未接受该项。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="collections" /> 的计数大于上限（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">
        <paramref name="collections" /> 参数是一个长度为 0 的数组，或者包含 NULL 元素，或者至少一个集合已标记为完成添加。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed, or the &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; that created &lt;paramref name=&quot;cancellationToken&quot; /&gt; has been disposed.">已释放至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例，或已释放创建 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added.">向其添加项的集合在 <paramref name="collections" /> 数组中的索引。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding">
      <summary vsli:raw="Marks the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances as not accepting any more additions.">将 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例标记为不任何更多的添加。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies all of the items in the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance to a compatible one-dimensional array, starting at the specified index of the target array.">将 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中的所有项复制到兼容的一维数组中，复制从目标数组的指定索引处开始。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance. The array must have zero-based indexing.">一维数组，它是从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; argument is null.">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; argument is less than zero.">
        <paramref name="index" /> 参数小于零。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; argument is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA; The destination array is too small to hold all of the BlockingCollection elements.&#xA;&#xA; The array rank doesn't match.&#xA;&#xA; The array type is incompatible with the type of the BlockingCollection elements.">
        <paramref name="index" /> 参数等于或大于 <paramref name="array" /> 的长度。  
  
目标数组太小，不能容纳所有 BlockingCollection 元素。  
  
数组秩不匹配。  
  
数组类型与 BlockingCollection 元素类型不兼容。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Dispose">
      <summary vsli:raw="Releases all resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; class.">释放 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)">
      <summary vsli:raw="Releases resources used by the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">释放由 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例使用的资源。</summary>
      <param name="disposing" vsli:raw="Whether being disposed explicitly (true) or due to a finalizer (false).">是显式释放 (true)，还是由于终结器释放 (false)。</param>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable">
      <summary vsli:raw="Provides a consuming &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; for items in the collection.">为集合中的项提供一个使用 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that removes and returns items from the collection.">从集合中移除并返回项的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)">
      <summary vsli:raw="Provides a consuming &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; for items in the collection.">为集合中的项提供一个使用 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">如果已取消 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed or the &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; that created &lt;paramref name=&quot;cancellationToken&quot; /&gt; has been disposed">已释放 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />，或已释放创建 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /></exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that removes and returns items from the collection.">从集合中移除并返回项的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Provides an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; for items in the collection.">为集合中的项提供 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; for the items in the collection.">集合中的项的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies all of the items in the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance to a compatible one-dimensional array, starting at the specified index of the target array.">将 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中的所有项复制到兼容的一维数组中，复制从目标数组的指定索引处开始。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance. The array must have zero-based indexing.">一维数组，它是从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; argument is null.">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; argument is less than zero.">
        <paramref name="index" /> 参数小于零。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; argument is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt;, the array is multidimensional, or the type parameter for the collection cannot be cast automatically to the type of the destination array.">
        <paramref name="index" /> 参数等于或大于 <paramref name="array" /> 的长度，该数组是多维的，或集合的类型参数无法自动强制转换为目标数组的类型。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Provides an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for items in the collection.">为集合中的项提供 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the items in the collection.">集合中的项的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Take">
      <summary vsli:raw="Removes an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance, or the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; is empty and has been marked as complete with regards to additions.">基础集合在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外修改，或 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 为空，并且集合已标记为完成添加。</exception>
      <exception cref="T:System.OperationCanceledException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 为空，并且已被标记为完成添加。</exception>
      <returns vsli:raw="The item that was removed from the collection.">从集合中移除的项。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)">
      <summary vsli:raw="Removes an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。</summary>
      <param name="cancellationToken" vsli:raw="A token that can be used to cancel the &quot;take&quot; operation.">可用于取消获取操作的对象。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">
        <see cref="T:System.Threading.CancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />，或已取消创建该标记的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance, or the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; is empty and has been marked as complete with regards to additions.">基础集合在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外修改，或该 BlockingCollection 被标记为完成添加，或 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 为空。</exception>
      <returns vsli:raw="The item that was removed from the collection.">从集合中移除的项。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)">
      <summary vsli:raw="Takes an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中获取一个项。</summary>
      <param name="collections" vsli:raw="The array of collections.">集合的数组。</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">从其中一个集合中移除的项。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">至少已释放其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="collections" /> 的计数大于上限（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element or &lt;see cref=&quot;M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding&quot; /&gt; has been called on the collection.">
        <paramref name="collections" /> 参数是一个长度为 0 的数组，或包含 NULL 元素，或 <see cref="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding" /> 在集合上已被调用。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">至少一个基础集合已在其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例之外进行了修改。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed.">从其中移除项的集合在 <paramref name="collections" /> 数组中的索引。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)">
      <summary vsli:raw="Takes an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances while observing the specified cancellation token.">在观察指定的取消标记时从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中获取一个项。</summary>
      <param name="collections" vsli:raw="The array of collections.">集合的数组。</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">从其中一个集合中移除的项。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">如果已取消 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">至少一个基础集合已在其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例之外进行了修改。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="collections" /> 的计数大于上限（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or &lt;see cref=&quot;M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding&quot; /&gt; has been called on the collection.">
        <paramref name="collections" /> 参数是一个长度为 0 的数组，或包含 NULL 元素，或 <see cref="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding" /> 在集合上已被调用。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">至少已释放其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed.">从其中移除项的集合在 <paramref name="collections" /> 数组中的索引。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.ToArray">
      <summary vsli:raw="Copies the items from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance into a new array.">将项从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例复制到新数组中。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <returns vsli:raw="An array containing copies of the elements of the collection.">包含集合元素副本的数组。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)">
      <summary vsli:raw="Tries to add the specified item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">尝试将指定的项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</summary>
      <param name="item" vsli:raw="The item to be added to the collection.">要添加到集合的项。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加。  
  
- 或 - 
基础集合未接受该项。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; could be added; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown.">如果可以添加 <paramref name="item" />，则返回 <see langword="true" />；否则，返回 <see langword="false" />。 如果该项有重复，并且基础集合不接受重复项，则会引发 <see cref="T:System.InvalidOperationException" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)">
      <summary vsli:raw="Tries to add the specified item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; within the specified time period.">尝试在指定的时间段内将指定的项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</summary>
      <param name="item" vsli:raw="The item to be added to the collection.">要添加到集合的项。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the collection to accept the item, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加。  
  
- 或 - 
基础集合未接受该项。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;item&quot; /&gt; could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown.">如果在指定的时间内可以将 <paramref name="item" /> 添加到集合中，则为 <see langword="true" />；否则为 false。 如果该项有重复，并且基础集合不接受重复项，则会引发 <see cref="T:System.InvalidOperationException" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)">
      <summary vsli:raw="Tries to add the specified item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; within the specified time period, while observing a cancellation token.">在观察取消标记时，尝试在指定的时间段内将指定的项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</summary>
      <param name="item" vsli:raw="The item to be added to the collection.">要添加到集合的项。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the collection to accept the item, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">如果已取消 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed or the underlying &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; has been disposed.">已释放 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />，或已释放基础 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加。  
  
- 或 - 
基础集合未接受该项。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;item&quot; /&gt; could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown.">如果在指定的时间内可以将 <paramref name="item" /> 添加到集合中，则为 <see langword="true" />；否则为 false。 如果该项有重复，并且基础集合不接受重复项，则会引发 <see cref="T:System.InvalidOperationException" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)">
      <summary vsli:raw="Tries to add the specified item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">尝试将指定的项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</summary>
      <param name="item" vsli:raw="The item to be added to the collection.">要添加到集合的项。</param>
      <param name="timeout" vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents the number of milliseconds to wait, or a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents -1 milliseconds to wait indefinitely.">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加。  
  
- 或 - 
基础集合未接受该项。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;item&quot; /&gt; could be added to the collection within the specified time span; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在指定的时间跨度内可以将 <paramref name="item" /> 添加到集合中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
      <summary vsli:raw="Tries to add the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">尝试将指定的项添加到任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</summary>
      <param name="collections" vsli:raw="The array of collections.">集合的数组。</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">要添加到其中一个集合的项。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">至少已释放其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="collections" /> 的计数大于上限（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">
        <paramref name="collections" /> 参数是一个长度为 0 的数组，或者包含 NULL 元素，或者至少一个集合已标记为完成添加。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">至少一个基础集合未接受该项。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added, or -1 if the item could not be added.">向其添加项的集合在 <paramref name="collections" /> 数组中的索引；如果未能添加项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)">
      <summary vsli:raw="Tries to add the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">尝试将指定的项添加到任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</summary>
      <param name="collections" vsli:raw="The array of collections.">集合的数组。</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">要添加到其中一个集合的项。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the collection to accept the item, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">至少已释放其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.&#xA;&#xA; -or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。 
- 或 - 
<paramref name="collections" /> 的计数大于上限（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">
        <paramref name="collections" /> 参数是一个长度为 0 的数组，或者包含 NULL 元素，或者至少一个集合已标记为完成添加。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">至少一个基础集合未接受该项。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added, or -1 if the item could not be added.">向其添加项的集合在 <paramref name="collections" /> 数组中的索引；如果未能添加项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)">
      <summary vsli:raw="Tries to add the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">尝试将指定的项添加到任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</summary>
      <param name="collections" vsli:raw="The array of collections.">集合的数组。</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">要添加到其中一个集合的项。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the collection to accept the item, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">如果已取消 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">至少一个基础集合未接受该项。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.&#xA;&#xA; -or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。 
- 或 - 
<paramref name="collections" /> 的计数大于上限（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">
        <paramref name="collections" /> 参数是一个长度为 0 的数组，或者包含 NULL 元素，或者至少一个集合已标记为完成添加。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">至少已释放其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added, or -1 if the item could not be added.">向其添加项的集合在 <paramref name="collections" /> 数组中的索引；如果未能添加项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)">
      <summary vsli:raw="Tries to add the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances while observing the specified cancellation token.">在观察指定的取消标记时，尝试将指定的项添加到任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</summary>
      <param name="collections" vsli:raw="The array of collections.">集合的数组。</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">要添加到其中一个集合的项。</param>
      <param name="timeout" vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents the number of milliseconds to wait, or a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents -1 milliseconds to wait indefinitely.">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances or the &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; that created &lt;paramref name=&quot;cancellationToken&quot; /&gt; has been disposed.">已释放至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例，或已释放创建 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.&#xA;&#xA;-or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。  
  
- 或 - 
<paramref name="collections" /> 的计数大于上限（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">
        <paramref name="collections" /> 参数是一个长度为 0 的数组，或者包含 NULL 元素，或者至少一个集合已标记为完成添加。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">至少一个基础集合未接受该项。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added, or -1 if the item could not be added.">向其添加项的集合在 <paramref name="collections" /> 数组中的索引；如果未能添加项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)">
      <summary vsli:raw="Tries to remove an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">尝试从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。</summary>
      <param name="item" vsli:raw="The item to be removed from the collection.">要从集合中移除的项。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">该基础集合已在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外部进行了修改。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以移除项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)">
      <summary vsli:raw="Tries to remove an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; in the specified time period.">尝试在指定的时间段内从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。</summary>
      <param name="item" vsli:raw="The item to be removed from the collection.">要从集合中移除的项。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the item to be removed, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">该基础集合已在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外部进行了修改。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be removed from the collection within the specified  time; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在指定的时间内可以从集合中移除一个项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)">
      <summary vsli:raw="Tries to remove an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; in the specified time period while observing a cancellation token.">在观察取消标记时，尝试在指定的时间段内从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。</summary>
      <param name="item" vsli:raw="The item to be removed from the collection.">要从集合中移除的项。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the item to be removed, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; has been canceled.">已取消 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed or the underlying &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; has been disposed.">已释放 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />，或已释放基础 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">该基础集合已在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外部进行了修改。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be removed from the collection within the specified  time; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在指定的时间内可以从集合中移除一个项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)">
      <summary vsli:raw="Tries to remove an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; in the specified time period.">尝试在指定的时间段内从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。</summary>
      <param name="item" vsli:raw="The item to be removed from the collection.">要从集合中移除的项。</param>
      <param name="timeout" vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents the number of milliseconds to wait for the item to be removed, or a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents -1 milliseconds to wait indefinitely.">一个对象，表示等待的毫秒数，或为 -1 毫秒，表示无限期等待。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。 
- 或 - 
 <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">该基础集合已在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外部进行了修改。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be removed from the collection within the specified time; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在指定的时间内可以从集合中移除一个项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)">
      <summary vsli:raw="Tries to remove an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">尝试从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中移除一个项。</summary>
      <param name="collections" vsli:raw="The array of collections.">集合的数组。</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">从其中一个集合中移除的项。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">至少已释放其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="collections" /> 的计数大于上限（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element.">
        <paramref name="collections" /> 参数是一个长度为 0 的数组，或包含 NULL 元素。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">至少一个基础集合已在其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例之外进行了修改。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed, or -1 if an item could not be removed.">从其中移除项的集合在 <paramref name="collections" /> 数组中的索引；如果未能移除项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)">
      <summary vsli:raw="Tries to remove an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">尝试从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中移除一个项。</summary>
      <param name="collections" vsli:raw="The array of collections to remove an item from.">集合的数组。</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">从其中一个集合中移除的项。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the item to be removed, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">至少已释放其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.&#xA;&#xA; -or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。 
- 或 - 
<paramref name="collections" /> 的计数大于上限（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element.">
        <paramref name="collections" /> 参数是一个长度为 0 的数组，或包含 NULL 元素。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">至少一个基础集合已在其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例之外进行了修改。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed, or -1 if an item could not be removed.">从其中移除项的集合在 <paramref name="collections" /> 数组中的索引；如果未能移除项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)">
      <summary vsli:raw="Tries to remove an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">尝试从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中移除一个项。</summary>
      <param name="collections" vsli:raw="The array of collections to remove an item from.">集合的数组。</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">从其中一个集合中移除的项。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the item to be removed, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">如果已取消 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">至少一个基础集合已在其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例之外进行了修改。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.&#xA;&#xA; -or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。 
- 或 - 
<paramref name="collections" /> 的计数大于上限（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element.">
        <paramref name="collections" /> 参数是一个长度为 0 的数组，或包含 NULL 元素。</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">至少已释放其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed, or -1 if an item could not be removed.">从其中移除项的集合在 <paramref name="collections" /> 数组中的索引；如果未能移除项，则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)">
      <summary vsli:raw="Tries to remove an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">尝试从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中移除一个项。</summary>
      <param name="collections" vsli:raw="The array of collections.">集合的数组。</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">从其中一个集合中移除的项。</param>
      <param name="timeout" vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents the number of milliseconds to wait, or a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents -1 milliseconds to wait indefinitely.">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">至少已释放其中一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.&#xA;&#xA; -or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="timeout" /> 是 -1 毫秒之外的负数，表示无限超时或者超时大于 <see cref="F:System.Int32.MaxValue" />。  
  
- 或 - 
<paramref name="collections" /> 的计数大于上限（STA 为 62，MTA 为 63）。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element.">
        <paramref name="collections" /> 参数是一个长度为 0 的数组，或包含 NULL 元素。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">至少一个基础集合已在其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例之外进行了修改。</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed, or -1 if an item could not be removed.">从其中移除项的集合在 <paramref name="collections" /> 数组中的索引；如果未能移除项，则为 -1。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity">
      <summary vsli:raw="Gets the bounded capacity of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">获取此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例的限定容量。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <returns vsli:raw="The bounded capacity of this collection, or -1 if no bound was supplied.">此集合的限定容量；如果未提供限制，则为 int.MaxValue。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.Count">
      <summary vsli:raw="Gets the number of items contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">获取 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中包含的项的数量。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <returns vsli:raw="The number of items contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中包含的项的数量。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted">
      <summary vsli:raw="Gets whether this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete for adding.">获取此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 是否已标记为完成添加。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <returns vsli:raw="Whether this collection has been marked as complete for adding.">此集合是否已标记为完成添加。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.IsCompleted">
      <summary vsli:raw="Gets whether this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete for adding and is empty.">获取此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 是否已标记为完成添加并且为空。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <returns vsli:raw="Whether this collection has been marked as complete for adding and is empty.">此集合是否已标记为完成添加并且为空。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt; to indicate the access is not synchronized.">始终返回 <see langword="false" /> ，指示未同步访问。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. This property is not supported.">获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 不支持此属性。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The SyncRoot property is not supported.">不支持 SyncRoot 属性。</exception>
      <returns vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt;.">返回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentBag`1">
      <summary vsli:raw="Represents a thread-safe, unordered collection of objects.">表示对象的线程安全的无序集合。</summary>
      <typeparam name="T" vsli:raw="The type of the elements to be stored in the collection.">要存储在集合中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; class.">初始化 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; class that contains elements copied from the specified collection.">初始化 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 类的新实例，该类包含从指定集合中复制的元素。</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">其元素被复制到新的 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中的集合。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="collection" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.Add(`0)">
      <summary vsli:raw="Adds an object to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">将对象添加到 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中。</summary>
      <param name="item" vsli:raw="The object to be added to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">要添加到 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的对象。 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.Clear">
      <summary vsli:raw="Removes all values from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中删除所有值。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">从指定数组索引开始将 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 所复制的元素的目标位置。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- the number of elements in the source &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度 - 或 - 源 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的枚举数。</summary>
      <returns vsli:raw="An enumerator for the contents of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的内容的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary vsli:raw="Attempts to add an object to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">尝试将一个对象添加到 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中。</summary>
      <param name="item" vsli:raw="The object to be added to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">要添加到 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的对象。 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。</param>
      <returns vsli:raw="Always returns true.">始终返回 true</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">从特定的 <see cref="T:System.Collections.ICollection" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 所复制的元素的目标位置。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional. -or- &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing. -or- &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;. -or- The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> 是多维的。 - 或 -<paramref name="array" /> 没有从零开始的索引。 - 或 - <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的枚举数。</summary>
      <returns vsli:raw="An enumerator for the contents of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的内容的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.ToArray">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; elements to a new array.">将 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 元素复制到新数组。</summary>
      <returns vsli:raw="A new array containing a snapshot of elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">新数组包含从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 复制的元素的快照。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryPeek(`0@)">
      <summary vsli:raw="Attempts to return an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; without removing it.">尝试从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 返回一个对象但不移除该对象。</summary>
      <param name="result" vsli:raw="When this method returns, &lt;paramref name=&quot;result&quot; /&gt; contains an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; or the default value of &lt;typeparamref name=&quot;T&quot; /&gt; if the operation failed.">此方法返回时，<paramref name="result" /> 包含 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中的对象；如果操作失败，则返回 <typeparamref name="T" /> 的默认值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an object was returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功返回了对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryTake(`0@)">
      <summary vsli:raw="Attempts to remove and return an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">尝试从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中移除和返回一个对象。</summary>
      <param name="result" vsli:raw="When this method returns, &lt;paramref name=&quot;result&quot; /&gt; contains the object removed from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; or the default value of &lt;typeparamref name=&quot;T&quot; /&gt; if the bag is empty.">此方法返回时，<paramref name="result" /> 包含从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中移除的对象；如果包为空，则返回 <typeparamref name="T" /> 的默认值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an object was removed successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功移除对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">获取 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中包含的元素数。</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; is empty.">获取一个值，该值指示 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 是否为空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 为空，则为 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized with the SyncRoot.">获取一个指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否与 SyncRoot 同步的值。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt; to indicate access is not synchronized.">始终返回 <see langword="false" /> ，指示未同步访问。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. This property is not supported.">获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 不支持此属性。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The SyncRoot property is not supported.">不支持 SyncRoot 属性。</exception>
      <returns vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt;.">返回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentDictionary`2">
      <summary vsli:raw="Represents a thread-safe collection of key/value pairs that can be accessed by multiple threads concurrently.">表示可由多个线程同时访问的键/值对的线程安全集合。</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">字典中的键的类型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">字典中的值的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that is empty, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.">初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例为空，具有默认的并发级别和默认的初始容量，并为键类型使用默认比较器。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.">初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中复制的元素，具有默认的并发级别和默认的初始容量，并为键类型使用默认比较器。</summary>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，它的元素被复制到新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or any of its keys is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> 或其中的任一键为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="collection" /> 包含一个或多个重复键。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; has the default concurrency level, has the default initial capacity, and uses the specified  &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.IEnumerable" /> 中复制的元素，具有默认的并发级别和默认的初始容量，并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，它的元素被复制到新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />。</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys.">在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> 或 <paramref name="comparer" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that is empty, has the default concurrency level and capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例为空，具有默认的并发级别和容量，并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="comparer" vsli:raw="The equality comparison implementation to use when comparing keys.">在对键进行比较时使用的相等比较实现。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.IEnumerable" /> 中复制的元素并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="concurrencyLevel" vsli:raw="The estimated number of threads that will update the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; concurrently, or in .NET 8+ only, -1 to indicate the default concurrency level.">将同时更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的线程的估计数量。</param>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />，它的元素被复制到新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />。</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys.">在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> 或 <paramref name="comparer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;concurrencyLevel&quot; /&gt; is less than 1.">
        <paramref name="concurrencyLevel" /> 小于 1。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="collection" /> 包含一个或多个重复键。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that is empty, has the specified concurrency level and capacity, and uses the default comparer for the key type.">初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例为空，具有指定的并发级别和容量，并为键类型使用默认比较器。</summary>
      <param name="concurrencyLevel" vsli:raw="The estimated number of threads that will update the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; concurrently, or in .NET 8+ only, -1 to indicate the default concurrency level.">将同时更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的线程的估计数量。</param>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 可包含的初始元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;concurrencyLevel&quot; /&gt; is less than 1.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="concurrencyLevel" /> 小于 1。  
  
- 或 - 
 <paramref name="capacity" /> 小于 0。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that is empty, has the specified concurrency level, has the specified initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">初始化 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 类的新实例，该实例为空，具有指定的并发级别和指定的初始容量，并使用指定的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
      <param name="concurrencyLevel" vsli:raw="The estimated number of threads that will update the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; concurrently, or in .NET 8+ only, -1 to indicate the default concurrency level.">将同时更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的线程的估计数量。</param>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 可包含的初始元素数。</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys.">在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;concurrencyLevel&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than 1.">
        <paramref name="concurrencyLevel" /> 或 <paramref name="capacity" /> 小于 1。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
      <summary vsli:raw="Adds a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key does not already exist, or updates a key/value pair in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; by using the specified function if the key already exists.">如果该键不存在，则将键/值对添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中；如果该键已经存在，则通过使用指定的函数更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中的键/值对。</summary>
      <param name="key" vsli:raw="The key to be added or whose value should be updated.">要添加的键或应更新其值的键</param>
      <param name="addValue" vsli:raw="The value to be added for an absent key.">要为空缺键添加的值</param>
      <param name="updateValueFactory" vsli:raw="The function used to generate a new value for an existing key based on the key's existing value.">用于基于键的现有值为现有键生成新值的函数</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; or &lt;paramref name=&quot;updateValueFactory&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 或 <paramref name="updateValueFactory" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">字典包含过多元素。</exception>
      <returns vsli:raw="The new value for the key. This will be either be &lt;paramref name=&quot;addValue&quot; /&gt; (if the key was absent) or the result of &lt;paramref name=&quot;updateValueFactory&quot; /&gt; (if the key was present).">键的新值。 这将为 <paramref name="addValue" /> （若没有键）或 <paramref name="updateValueFactory" /> 的结果（若有键）。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
      <summary vsli:raw="Uses the specified functions to add a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key does not already exist, or to update a key/value pair in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key already exists.">如果该键不存在，则使用指定函数将键/值对添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />；如果该键已存在，则使用该函数更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中的键/值对。</summary>
      <param name="key" vsli:raw="The key to be added or whose value should be updated.">要添加的键或应更新其值的键</param>
      <param name="addValueFactory" vsli:raw="The function used to generate a value for an absent key.">用于为空缺键生成值的函数</param>
      <param name="updateValueFactory" vsli:raw="The function used to generate a new value for an existing key based on the key's existing value.">用于基于键的现有值为现有键生成新值的函数</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt;, &lt;paramref name=&quot;addValueFactory&quot; /&gt;, or &lt;paramref name=&quot;updateValueFactory&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />、<paramref name="addValueFactory" /> 或 <paramref name="updateValueFactory" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">字典包含过多元素。</exception>
      <returns vsli:raw="The new value for the key. This will be either be the result of &lt;paramref name=&quot;addValueFactory&quot; /&gt; (if the key was absent) or the result of &lt;paramref name=&quot;updateValueFactory&quot; /&gt; (if the key was present).">键的新值。 这将为 <paramref name="addValueFactory" /> 的结果（若没有键）或 <paramref name="updateValueFactory" /> 的结果（若有键）。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)">
      <summary vsli:raw="Uses the specified functions and argument to add a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key does not already exist, or to update a key/value pair in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key already exists.">使用指定函数和参数将键/值对添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />中（若尚无键）；或使用指定函数和参数更新 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中的键/值对（若已有键）。</summary>
      <param name="key" vsli:raw="The key to be added or whose value should be updated.">要添加的键或应更新其值的键。</param>
      <param name="addValueFactory" vsli:raw="The function used to generate a value for an absent key.">用于为空缺键生成值的函数。</param>
      <param name="updateValueFactory" vsli:raw="The function used to generate a new value for an existing key based on the key's existing value.">用以基于键的现有值为现有键生成新值的函数。</param>
      <param name="factoryArgument" vsli:raw="An argument to pass into &lt;paramref name=&quot;addValueFactory&quot; /&gt; and &lt;paramref name=&quot;updateValueFactory&quot; /&gt;.">要传入 <paramref name="addValueFactory" /> 和 <paramref name="updateValueFactory" /> 的参数。</param>
      <typeparam name="TArg" vsli:raw="The type of an argument to pass into &lt;paramref name=&quot;addValueFactory&quot; /&gt; and &lt;paramref name=&quot;updateValueFactory&quot; /&gt;.">要传递到和的参数的类型 <paramref name="addValueFactory" /><paramref name="updateValueFactory" /> 。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt;, &lt;paramref name=&quot;addValueFactory&quot; /&gt;, or &lt;paramref name=&quot;updateValueFactory&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="key" />、<paramref name="addValueFactory" /> 或 <paramref name="updateValueFactory" /> 为空引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">字典包含过多元素。</exception>
      <returns vsli:raw="The new value for the key. This will be either be the result of &lt;paramref name=&quot;addValueFactory&quot; /&gt; (if the key was absent) or the result of &lt;paramref name=&quot;updateValueFactory&quot; /&gt; (if the key was present).">键的新值。 这将为 <paramref name="addValueFactory" /> 的结果（若没有键）或 <paramref name="updateValueFactory" /> 的结果（若有键）。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.Clear">
      <summary vsli:raw="Removes all keys and values from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">将所有键和值从 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中移除。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; contains the specified key.">确定是否 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 包含指定键。</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">要在 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的枚举数。</summary>
      <returns vsli:raw="An enumerator for the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">用于 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)">
      <summary vsli:raw="Adds a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key does not already exist. Returns the new value, or the existing value if the key exists.">如果指定的键尚不存在，则将键/值对添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中。 如果该键存在，则返回新值或现有值。</summary>
      <param name="key" vsli:raw="The key of the element to add.">要添加的元素的键。</param>
      <param name="value" vsli:raw="The value to be added, if the key does not already exist.">当键不存在时要添加的值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">字典包含过多元素。</exception>
      <returns vsli:raw="The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.">键的值。 如果字典中已存在指定的键，则为该键的现有值；如果字典中不存在指定的键，则为新值。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
      <summary vsli:raw="Adds a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; by using the specified function if the key does not already exist. Returns the new value, or the existing value if the key exists.">如果该键不存在，则通过使用指定的函数将键/值对添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中。 如果该键存在，则返回新值或现有值。</summary>
      <param name="key" vsli:raw="The key of the element to add.">要添加的元素的键。</param>
      <param name="valueFactory" vsli:raw="The function used to generate a value for the key.">用于为键生成值的函数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; or &lt;paramref name=&quot;valueFactory&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 或 <paramref name="valueFactory" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">字典包含过多元素。</exception>
      <returns vsli:raw="The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.">键的值。 如果字典中已存在该键，则为该键的现有值；如果字典中不存在该键，则为新值。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)">
      <summary vsli:raw="Adds a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; by using the specified function and an argument if the key does not already exist, or returns the existing value if the key exists.">使用指定函数和参数将键/值对添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />中（若尚无键）；或返回现有值（若已有键）。</summary>
      <param name="key" vsli:raw="The key of the element to add.">要添加的元素的键。</param>
      <param name="valueFactory" vsli:raw="The function used to generate a value for the key.">用于为键生成值的函数。</param>
      <param name="factoryArgument" vsli:raw="An argument value to pass into &lt;paramref name=&quot;valueFactory&quot; /&gt;.">要传入 <paramref name="valueFactory" /> 的参数值。</param>
      <typeparam name="TArg" vsli:raw="The type of an argument to pass into &lt;paramref name=&quot;valueFactory&quot; /&gt;.">要传入的参数的类型 <paramref name="valueFactory" /> 。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is a &lt;see langword=&quot;null&quot; /&gt; reference (Nothing in Visual Basic).">
        <paramref name="key" /> 为 <see langword="null" /> 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">字典包含过多元素。</exception>
      <returns vsli:raw="The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.">键的值。 如果字典中已存在该键，则为该键的现有值；如果字典中不存在该键，则为新值。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds an item to the collection.">向集合中添加一项。</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to add to the dictionary.">要添加到字典中的 <see cref="T:System.Collections.Generic.KeyValuePair`2" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Key&quot; /&gt; of &lt;paramref name=&quot;keyValuePair&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyValuePair" /> 的 <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains too many elements.">
        <see cref="T:System.Collections.Generic.Dictionary`2" />，它包含太多元素。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 中已存在具有相同键的元素。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Gets whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains an element with the specified key.">获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含具有指定键的元素。</summary>
      <param name="keyValuePair" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的键。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an array, starting at the specified array index.">从指定的数组索引开始，将 <see cref="T:System.Collections.ICollection" /> 中的元素复制到一个数组中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">一维数组，它是从 <see cref="T:System.Collections.ICollection" /> 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。

- 或 -

源 <see cref="T:System.Collections.ICollection" /> 中的元素个数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the specified key/value pair from the collection.">将指定的键/值对从集合中移除。</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to remove.">要移除的 <see cref="T:System.Collections.Generic.KeyValuePair`2" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Key&quot; /&gt; property of &lt;paramref name=&quot;keyValuePair&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyValuePair" /> 的 <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 属性为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns false if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。 如果在原始 <see cref="T:System.Collections.Generic.ICollection`1" /> 中找不到 <paramref name="key" />，此方法也会返回 false。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary vsli:raw="Adds the specified key and value to the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">向 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中添加指定的键和值。</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">用作要添加的元素的键的对象。</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">用作要添加的元素的值的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中已存在具有相同键的元素。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">字典包含过多元素。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">从 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中移除包含指定键的元素。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。 如果在原始 <see langword="false" /> 中没有找到 <paramref name="key" />，此方法也会返回 <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an array, starting at the specified array index.">从指定的数组索引开始，将 <see cref="T:System.Collections.ICollection" /> 中的元素复制到一个数组中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">一维数组，它是从 <see cref="T:System.Collections.ICollection" /> 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度。  
  
- 或 - 
源 <see cref="T:System.Collections.ICollection" /> 中的元素个数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds the specified key and value to the dictionary.">将指定的键和值添加到字典中。</summary>
      <param name="key" vsli:raw="The object to use as the key.">要用作键的对象。</param>
      <param name="value" vsli:raw="The object to use as the value.">要用作值的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type  of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the type of values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; A value with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <paramref name="key" /> 所属类型不可分配给 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的键类型。  
  
- 或 - 
 <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值类型的类型。  
  
- 或 - 
<see cref="T:System.Collections.Generic.Dictionary`2" /> 中已存在相同键的值。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">字典包含过多元素。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Gets a value that indicates the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; contains an element with the specified key.">获取一个值，它指示 <see cref="T:System.Collections.Generic.IDictionary`2" /> 包含具有指定键的元素。</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">要在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中定位的键。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Generic.IDictionary`2" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">为 <see cref="T:System.Collections.IDictionaryEnumerator" /> 提供 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">用于 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">从 <see cref="T:System.Collections.IDictionary" /> 中移除包含指定键的元素。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的枚举数。</summary>
      <returns vsli:raw="An enumerator for the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">用于 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.ToArray">
      <summary vsli:raw="Copies the key and value pairs stored in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; to a new array.">将 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中存储的键和值对复制到新数组中。</summary>
      <returns vsli:raw="A new array containing a snapshot of key and value pairs copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">一个新数组，其中包含从 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 复制的键和值对的快照。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)">
      <summary vsli:raw="Attempts to add the specified key and value to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">尝试将指定的键和值添加到 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中。</summary>
      <param name="key" vsli:raw="The key of the element to add.">要添加的元素的键。</param>
      <param name="value" vsli:raw="The value of the element to add. The value can be  &lt;see langword=&quot;null&quot; /&gt; for reference types.">要添加的元素的值。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">字典包含过多元素。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key/value pair was added to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; successfully; &lt;see langword=&quot;false&quot; /&gt; if the key already exists.">如果成功地将键/值对添加到 <see langword="true" />，则为 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />；如果该键已存在，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Attempts to get the value associated with the specified key from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">尝试从 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 获取与指定的键关联的值。</summary>
      <param name="key" vsli:raw="The key of the value to get.">要获取的值的键。</param>
      <param name="value" vsli:raw="When this method returns, contains the object from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; that has the specified key, or the default value of the type if the operation failed.">当此方法返回时，将包含 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中具有指定键的对象；如果操作失败，则包含类型的默认值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key was found in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果在 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中找到该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)">
      <summary vsli:raw="Attempts to remove and return the value that has the specified key from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">尝试从 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中移除并返回具有指定键的值。</summary>
      <param name="key" vsli:raw="The key of the element to remove and return.">要移除并返回的元素的键。</param>
      <param name="value" vsli:raw="When this method returns, contains the object removed from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;, or the default value of  the &lt;see langword=&quot;TValue&quot; /&gt; type if &lt;paramref name=&quot;key&quot; /&gt; does not exist.">当此方法返回时，将包含从 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中移除的对象；如果 <paramref name="key" /> 不存在，则包含 <see langword="TValue" /> 类型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object was removed successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功地移除了对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes a key and value from the dictionary.">从字典中移除键和值。</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; representing the key and value to remove.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />，它表示要删除的键和值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Key&quot; /&gt; property of &lt;paramref name=&quot;item&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="item" /> 的 <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 属性为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key and value represented by &lt;paramref name=&quot;item&quot; /&gt; are successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功找到并删除 <paramref name="item" /> 代表的键和值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)">
      <summary vsli:raw="Updates the value associated with &lt;paramref name=&quot;key&quot; /&gt; to &lt;paramref name=&quot;newValue&quot; /&gt; if the existing value with &lt;paramref name=&quot;key&quot; /&gt; is equal to &lt;paramref name=&quot;comparisonValue&quot; /&gt;.">如果具有 <paramref name="key" /> 的现有值等于 <paramref name="comparisonValue" />，则将与 <paramref name="key" /> 关联的值更新为 <paramref name="newValue" />。</summary>
      <param name="key" vsli:raw="The key of the value that is compared with &lt;paramref name=&quot;comparisonValue&quot; /&gt; and possibly replaced.">与 <paramref name="comparisonValue" /> 进行比较并且可能被替换的值键。</param>
      <param name="newValue" vsli:raw="The value that replaces the value of the element that has the specified &lt;paramref name=&quot;key&quot; /&gt; if the comparison results in equality.">一个值，当比较结果相等时，将替换具有指定 <paramref name="key" /> 的元素的值。</param>
      <param name="comparisonValue" vsli:raw="The value that is compared with the value of the element that has the specified &lt;paramref name=&quot;key&quot; /&gt;.">与具有指定 <paramref name="key" /> 的元素的值进行比较的值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value with &lt;paramref name=&quot;key&quot; /&gt; was equal to &lt;paramref name=&quot;comparisonValue&quot; /&gt; and was replaced with &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果具有 <see langword="true" /> 的值与 <paramref name="key" /> 相等且被替换为 <paramref name="comparisonValue" />，则为 <paramref name="newValue" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">获取包含在 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中的键/值对的数目。</summary>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">字典包含过多元素。</exception>
      <returns vsli:raw="The number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">包含在 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 中的键/值对的数目。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; is empty.">获取一个值，该值指示 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 是否为空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 为空，则为 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">获取或设置与指定的键关联的值。</summary>
      <param name="key" vsli:raw="The key of the value to get or set.">要获取或设置的值的键。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is retrieved and &lt;paramref name=&quot;key&quot; /&gt; does not exist in the collection.">已检索该属性且集合中不存在 <paramref name="key" />。</exception>
      <returns vsli:raw="The value of the key/value pair at the specified index.">位于指定索引处的键/值对的值。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">获得一个包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键的集合。</summary>
      <returns vsli:raw="A collection of keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键的集合。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is read-only.">获取一个值，该值指示 <see cref="T:System.Collections.ICollection" /> 是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">获得一个包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键的集合。</summary>
      <returns vsli:raw="A collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的键的集合。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets a collection that contains the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">获取包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值的集合。</summary>
      <returns vsli:raw="A collection that contains the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值的集合。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized with the SyncRoot.">获取一个值，它指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否与 SyncRoot 同步。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;. For &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; this property always returns &lt;see langword=&quot;false&quot; /&gt;.">如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。 对于 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 此属性，始终返回 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. This property is not supported.">获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 不支持此属性。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This property is not supported.">不支持此属性。</exception>
      <returns vsli:raw="Always returns null.">始终返回 null。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; has a fixed size.">获取一个值，该值指示 <see cref="T:System.Collections.Generic.IDictionary`2" /> 是否具有固定大小。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;. For &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.Generic.IDictionary`2" />；否则为 <see langword="false" />。 对于 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />，该属性总是返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">获取一个值，该值指示 <see cref="T:System.Collections.Generic.IDictionary`2" /> 是否为只读。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;. For &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.IDictionary`2" />；否则为 <see langword="false" />。 对于 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />，该属性总是返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">获取或设置与指定的键关联的值。</summary>
      <param name="key" vsli:raw="The key of the value to get or set.">要获取或设置的值的键。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A value is being assigned, and &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type or the value type of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">将分配一个值，并且 <paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的键类型或值类型的类型。</exception>
      <returns vsli:raw="The value associated with the specified key, or  &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not in the dictionary or &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">与指定键关联的值；如果 <paramref name="key" /> 不在字典中或 <paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> 的键类型的类型，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that contains the keys of the  &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">获取包含 <see cref="T:System.Collections.ICollection" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns vsli:raw="An interface that contains the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键的接口。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that contains the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">获取一个包含 <see cref="T:System.Collections.ICollection" /> 中的值的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns vsli:raw="An interface that contains the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">包含 <see cref="T:System.Collections.IDictionary" /> 中的值的接口。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Values">
      <summary vsli:raw="Gets a collection that contains the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">获取包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值的集合。</summary>
      <returns vsli:raw="A collection that contains the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">包含 <see cref="T:System.Collections.Generic.Dictionary`2" /> 中的值的集合。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentQueue`1">
      <summary vsli:raw="Represents a thread-safe first in-first out (FIFO) collection.">表示线程安全的先进先出 (FIFO) 集合。</summary>
      <typeparam name="T" vsli:raw="The type of the elements contained in the queue.">队列中包含的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; class.">初始化 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; class that contains elements copied from the specified collection.">初始化 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 类的新实例，该类包含从指定集合中复制的元素。</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">其元素被复制到新的 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 中的集合。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collection&quot; /&gt; argument is null.">
        <paramref name="collection" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Clear">
      <summary vsli:raw="Removes all objects from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">从 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 中移除所有对象。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">从指定数组索引开始将 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 所复制的元素的目标位置。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the source &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度 - 或 - 源 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an object to the end of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">将对象添加到 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 的结尾处。</summary>
      <param name="item" vsli:raw="The object to add to the end of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">要添加到 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 末尾的对象。 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 的枚举数。</summary>
      <returns vsli:raw="An enumerator for the contents of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 的内容的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary vsli:raw="Attempts to add an object to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">尝试将一个对象添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中。</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">要添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 的对象。 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object was added successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功添加了对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
      <summary vsli:raw="Attempts to remove and return an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">尝试从 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中移除和返回一个对象。</summary>
      <param name="item" vsli:raw="When this method returns, if the operation was successful, &lt;paramref name=&quot;item&quot; /&gt; contains the object removed. If no object was available to be removed, the value is unspecified.">如果操作成功，则此方法返回时，<paramref name="item" /> 包含所移除的对象。 如果没有可供移除的对象，则不指定该值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element was removed and returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功删除并返回了元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">从特定的 <see cref="T:System.Collections.ICollection" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 所复制的元素的目标位置。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional. -or- &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing. -or- &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;. -or- The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> 是多维的。 - 或 -<paramref name="array" /> 没有从零开始的索引。 - 或 - <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">返回循环访问集合的枚举数。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.ToArray">
      <summary vsli:raw="Copies the elements stored in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; to a new array.">将 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 中存储的元素复制到新数组中。</summary>
      <returns vsli:raw="A new array containing a snapshot of elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">新数组包含从 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 复制的元素的快照。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
      <summary vsli:raw="Tries to remove and return the object at the beginning of the concurrent queue.">尝试移除并返回并发队列开头处的对象。</summary>
      <param name="result" vsli:raw="When this method returns, if the operation was successful, &lt;paramref name=&quot;result&quot; /&gt; contains the object removed. If no object was available to be removed, the value is unspecified.">如果操作成功，则此方法返回时，<paramref name="result" /> 包含所移除的对象。 如果没有可供移除的对象，则不指定该值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element was removed and returned from the beginning of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功在 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 开头处移除并返回了元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)">
      <summary vsli:raw="Tries to return an object from the beginning of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; without removing it.">尝试返回 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 开头处的对象但不将其移除。</summary>
      <param name="result" vsli:raw="When this method returns, &lt;paramref name=&quot;result&quot; /&gt; contains an object from the beginning of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; or an unspecified value if the operation failed.">此方法返回时，<paramref name="result" /> 包含 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 开头处的对象；如果操作失败，则包含未指定的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an object was returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功返回了对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">获取 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 中包含的元素数。</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; is empty.">获取一个值，该值指示 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> 是否为空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 为空，则为 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized with the SyncRoot.">获取一个指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否与 SyncRoot 同步的值。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt; to indicate access is not synchronized.">始终返回 <see langword="false" /> ，指示未同步访问。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. This property is not supported.">获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 不支持此属性。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The SyncRoot property is not supported.">不支持 SyncRoot 属性。</exception>
      <returns vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt;.">返回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentStack`1">
      <summary vsli:raw="Represents a thread-safe last in-first out (LIFO) collection.">表示线程安全的后进先出 (LIFO) 集合。</summary>
      <typeparam name="T" vsli:raw="The type of the elements contained in the stack.">堆栈中包含的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; class.">初始化 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; class that contains elements copied from the specified collection.">初始化 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 类的新实例，该类包含从指定集合中复制的元素。</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">其元素被复制到新的 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中的集合。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collection&quot; /&gt; argument is null.">
        <paramref name="collection" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.Clear">
      <summary vsli:raw="Removes all objects from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中移除所有对象。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">从指定数组索引开始将 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 所复制的元素的目标位置。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the source &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度 - 或 - 源 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的枚举数。</summary>
      <returns vsli:raw="An enumerator for the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">用于 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">在 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部插入一个对象。</summary>
      <param name="item" vsli:raw="The object to push onto the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">要推入到 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中的对象。 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])">
      <summary vsli:raw="Inserts multiple objects at the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; atomically.">自动将多个对象插入 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部。</summary>
      <param name="items" vsli:raw="The objects to push onto the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">要推入到 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="items" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Inserts multiple objects at the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; atomically.">自动将多个对象插入 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部。</summary>
      <param name="items" vsli:raw="The objects to push onto the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">要推入到 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中的对象。</param>
      <param name="startIndex" vsli:raw="The zero-based offset in &lt;paramref name=&quot;items&quot; /&gt; at which to begin inserting elements onto the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">
        <paramref name="items" /> 中从零开始的偏移量，在此开始将元素插入到 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部。</param>
      <param name="count" vsli:raw="The number of elements to be inserted onto the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">要插入到 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的元素数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="items" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is negative. Or &lt;paramref name=&quot;startIndex&quot; /&gt; is greater than or equal to the length of &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 为负数。 或 <paramref name="startIndex" /> 大于或等于 <paramref name="items" /> 的长度。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; + &lt;paramref name=&quot;count&quot; /&gt; is greater than the length of &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="startIndex" /> + <paramref name="count" /> 大于 <paramref name="items" /> 的长度。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary vsli:raw="Attempts to add an object to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">尝试将一个对象添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中。</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">要添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 的对象。 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object was added successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功添加了对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
      <summary vsli:raw="Attempts to remove and return an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">尝试从 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中移除和返回一个对象。</summary>
      <param name="item" vsli:raw="When this method returns, if the operation was successful, &lt;paramref name=&quot;item&quot; /&gt; contains the object removed. If no object was available to be removed, the value is unspecified.">如果操作成功，则此方法返回时，<paramref name="item" /> 包含所移除的对象。 如果没有可供移除的对象，则不指定该值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element was removed and returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功删除并返回了元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">从特定的 <see cref="T:System.Collections.ICollection" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 所复制的元素的目标位置。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional. -or- &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing. -or- &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;. -or- The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> 是多维的。 - 或 -<paramref name="array" /> 没有从零开始的索引。 - 或 - <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。 - 或 - 源 <see cref="T:System.Collections.ICollection" /> 的类型无法自动转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">返回循环访问集合的枚举数。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.ToArray">
      <summary vsli:raw="Copies the items stored in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; to a new array.">将 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中存储的项复制到一个新的数组。</summary>
      <returns vsli:raw="A new array containing a snapshot of elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">新数组包含从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 复制的元素的快照。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)">
      <summary vsli:raw="Attempts to return an object from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; without removing it.">尝试从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部返回一个对象而无需移除它。</summary>
      <param name="result" vsli:raw="When this method returns, &lt;paramref name=&quot;result&quot; /&gt; contains an object from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; or an unspecified value if the operation failed.">当此方法返回时，<paramref name="result" /> 包含来自 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的一个对象，或者如果操作失败，则包含一个未指定的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and object was returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功返回了对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)">
      <summary vsli:raw="Attempts to pop and return the object at the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">尝试弹出并返回 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的对象。</summary>
      <param name="result" vsli:raw="When this method returns, if the operation was successful, &lt;paramref name=&quot;result&quot; /&gt; contains the object removed. If no object was available to be removed, the value is unspecified.">如果操作成功，则此方法返回时，<paramref name="result" /> 包含所移除的对象。 如果没有可供移除的对象，则不指定该值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element was removed and returned from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 的顶部成功删除并返回了元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])">
      <summary vsli:raw="Attempts to pop and return multiple objects from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; atomically.">尝试自动弹出并返回 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的多个对象。</summary>
      <param name="items" vsli:raw="The &lt;see cref=&quot;T:System.Array&quot; /&gt; to which objects popped from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; will be added.">要将从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部弹出的对象添加到的 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; is a null argument (Nothing in Visual Basic).">
        <paramref name="items" /> 是 null 参数（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="The number of objects successfully popped from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; and inserted in &lt;paramref name=&quot;items&quot; /&gt;.">成功从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部弹出并插入 <paramref name="items" /> 中的对象数。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Attempts to pop and return multiple objects from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; atomically.">尝试自动弹出并返回 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部的多个对象。</summary>
      <param name="items" vsli:raw="The &lt;see cref=&quot;T:System.Array&quot; /&gt; to which objects popped from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; will be added.">要将从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部弹出的对象添加到的 <see cref="T:System.Array" />。</param>
      <param name="startIndex" vsli:raw="The zero-based offset in &lt;paramref name=&quot;items&quot; /&gt; at which to begin inserting elements from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">
        <paramref name="items" /> 中从零开始的偏移量，在此开始从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部插入元素。</param>
      <param name="count" vsli:raw="The number of elements to be popped from top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; and inserted into &lt;paramref name=&quot;items&quot; /&gt;.">从 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 顶部弹出并插入 <paramref name="items" /> 中的元素数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="items" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is negative. Or &lt;paramref name=&quot;startIndex&quot; /&gt; is greater than or equal to the length of &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 为负数。 或 <paramref name="startIndex" /> 大于或等于 <paramref name="items" /> 的长度。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; + &lt;paramref name=&quot;count&quot; /&gt; is greater than the length of &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="startIndex" /> + <paramref name="count" /> 大于 <paramref name="items" /> 的长度。</exception>
      <returns vsli:raw="The number of objects successfully popped from the top of the stack and inserted in &lt;paramref name=&quot;items&quot; /&gt;.">成功从堆栈顶部弹出并插入 <paramref name="items" /> 中的对象数。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">获取 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中包含的元素数。</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; is empty.">获取一个值，该值指示 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> 是否为空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 为空，则为 <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized with the SyncRoot.">获取一个指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否与 SyncRoot 同步的值。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt; to indicate access is not synchronized.">始终返回 <see langword="false" /> ，指示未同步访问。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. This property is not supported.">获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 不支持此属性。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The SyncRoot property is not supported">不支持 SyncRoot 属性。</exception>
      <returns vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt;.">返回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.EnumerablePartitionerOptions">
      <summary vsli:raw="Specifies options to control the buffering behavior of a partitioner.">指定控制分区程序的缓冲行为的选项。</summary>
    </member>
    <member name="F:System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering">
      <summary vsli:raw="Create a partitioner that takes items from the source enumerable one at a time and does not use intermediate storage that can be accessed more efficiently by multiple threads. This option provides support for low latency (items will be processed as soon as they are available from the source) and provides partial support for dependencies between items (a thread cannot deadlock waiting for an item that the thread itself is responsible for processing).">创建分区程序，该程序从源可枚举项中一次提取项而不使用中间存储，多个线程可以更有效地访问该存储。 此选项支持低延迟（一从源获得项目就对其进行处理）且部分支持项目间的依赖项（线程无法死锁等待线程自身负责处理的项目）。</summary>
    </member>
    <member name="F:System.Collections.Concurrent.EnumerablePartitionerOptions.None">
      <summary vsli:raw="Use the default behavior, which is to use buffering to achieve optimal performance.">使用默认行为，就是使用缓冲实现最佳性能。</summary>
    </member>
    <member name="T:System.Collections.Concurrent.IProducerConsumerCollection`1">
      <summary vsli:raw="Defines methods to manipulate thread-safe collections intended for producer/consumer usage. This interface provides a unified representation for producer/consumer collections so that higher level abstractions such as &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; can use the collection as the underlying storage mechanism.">定义供制造者/使用者用来操作线程安全集合的方法。 此接口提供一个统一的表示（为生产者/消费者集合），从而更高级别抽象如 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 可以使用集合作为基础的存储机制。</summary>
      <typeparam name="T" vsli:raw="Specifies the type of elements in the collection.">指定集合中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a specified index.">从指定的索引位置开始，将 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 的元素复制到 <see cref="T:System.Array" /> 中。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.  &#xA;  &#xA; The array must have zero-based indexing.">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 所复制的元素的目标位置。  
  
该数组的索引必须从零开始。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the collection is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> 等于或大于 <paramref name="array" /> 的长度 - 或 - 集合中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 结尾的可用空间。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray">
      <summary vsli:raw="Copies the elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt; to a new array.">将 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中包含的元素复制到新数组中。</summary>
      <returns vsli:raw="A new array containing the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">一个新数组，其中包含从 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 复制的元素。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)">
      <summary vsli:raw="Attempts to add an object to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">尝试将一个对象添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中。</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">要添加到 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 的对象。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;item&quot; /&gt; was invalid for this collection.">
        <paramref name="item" /> 对于此集合无效。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object was added successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功添加了对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)">
      <summary vsli:raw="Attempts to remove and return an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">尝试从 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 中移除和返回一个对象。</summary>
      <param name="item" vsli:raw="When this method returns, if the object was removed and returned successfully, &lt;paramref name=&quot;item&quot; /&gt; contains the removed object. If no object was available to be removed, the value is unspecified.">此方法返回时，如果成功移除并返回了对象，则 <paramref name="item" /> 包含所移除的对象。 如果没有可供移除的对象，则不指定该值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an object was removed and returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功移除并返回了对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.OrderablePartitioner`1">
      <summary vsli:raw="Represents a particular manner of splitting an orderable data source into multiple partitions.">表示将可排序数据源拆分为多个分区的特定方式。</summary>
      <typeparam name="TSource" vsli:raw="Type of the elements in the collection.">集合中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary vsli:raw="Called from constructors in derived classes to initialize the &lt;see cref=&quot;T:System.Collections.Concurrent.OrderablePartitioner`1&quot; /&gt; class with the specified constraints on the index keys.">从派生类中的构造函数进行调用以便使用索引键上指定的约束初始化 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 类。</summary>
      <param name="keysOrderedInEachPartition" vsli:raw="Indicates whether the elements in each partition are yielded in the order of increasing keys.">指示是否按键增加的顺序生成每个分区中的元素。</param>
      <param name="keysOrderedAcrossPartitions" vsli:raw="Indicates whether elements in an earlier partition always come before elements in a later partition. If true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.">指示前一分区中的元素是否始终排在后一分区中的元素之前。 如果为 true，则分区 0 中的每个元素的顺序键比分区 1 中的任何元素都要小，分区 1 中的每个元素的顺序键比分区 2 中的任何元素都要小，依次类推。</param>
      <param name="keysNormalized" vsli:raw="Indicates whether keys are normalized. If true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If false, order keys must still be distinct, but only their relative order is considered, not their absolute values.">指示是否规范化键。 如果为 true，所有顺序键均为范围 [0 . numberOfElements-1] 中的不同整数。 如果为 false，顺序键仍必须互不相同，但只考虑其相对顺序，而不考虑其绝对值。</param>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions">
      <summary vsli:raw="Creates an object that can partition the underlying collection into a variable number of partitions.">创建一个可将基础集合分区成可变数目的分区的对象。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Dynamic partitioning is not supported by the base class. It must be implemented in derived classes.">该基类不支持动态分区。 它必须在派生类中实现。</exception>
      <returns vsli:raw="An object that can create partitions over the underlying data source.">一个可针对基础数据源创建分区的对象。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions">
      <summary vsli:raw="Creates an object that can partition the underlying collection into a variable number of partitions.">创建一个可将基础集合分区成可变数目的分区的对象。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Dynamic partitioning is not supported by this partitioner.">此分区程序不支持动态分区。</exception>
      <returns vsli:raw="An object that can create partitions over the underlying data source.">一个可针对基础数据源创建分区的对象。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)">
      <summary vsli:raw="Partitions the underlying collection into the specified number of orderable partitions.">将基础集合分区成指定数目的可排序分区。</summary>
      <param name="partitionCount" vsli:raw="The number of partitions to create.">要创建的分区数。</param>
      <returns vsli:raw="A list containing &lt;paramref name=&quot;partitionCount&quot; /&gt; enumerators.">一个包含 <paramref name="partitionCount" /> 枚举器的列表。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)">
      <summary vsli:raw="Partitions the underlying collection into the given number of ordered partitions.">将基础集合分区成给定数目的可排序分区。</summary>
      <param name="partitionCount" vsli:raw="The number of partitions to create.">要创建的分区数。</param>
      <returns vsli:raw="A list containing &lt;paramref name=&quot;partitionCount&quot; /&gt; enumerators.">一个包含 <paramref name="partitionCount" /> 枚举器的列表。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized">
      <summary vsli:raw="Gets whether order keys are normalized.">获取是否规范化顺序键。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the keys are normalized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果密钥已规范化，则为;否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions">
      <summary vsli:raw="Gets whether elements in an earlier partition always come before elements in a later partition.">获取前一分区中的元素是否始终排在后一分区中的元素之前。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the elements in an earlier partition always come before elements in a later partition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果前面分区中的元素始终位于后面分区的元素之前，则为; 否则为。否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition">
      <summary vsli:raw="Gets whether elements in each partition are yielded in the order of increasing keys.">获取是否按键增加的顺序生成每个分区中的元素。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the elements in each partition are yielded in the order of increasing keys; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果按递增键的顺序生成每个分区中的元素，则为; 否则为。否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.Partitioner">
      <summary vsli:raw="Provides common partitioning strategies for arrays, lists, and enumerables.">提供针对数组、列表和可枚举项的常见分区策略。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a partitioner that chunks the user-specified range.">创建一个按用户指定的范围划分区块的分区程序。</summary>
      <param name="fromInclusive" vsli:raw="The lower, inclusive bound of the range.">范围下限（含）。</param>
      <param name="toExclusive" vsli:raw="The upper, exclusive bound of the range.">范围上限（不含）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;toExclusive&quot; /&gt; argument is less than or equal to the &lt;paramref name=&quot;fromInclusive&quot; /&gt; argument.">
        <paramref name="toExclusive" /> 参数小于或等于 <paramref name="fromInclusive" /> 参数。</exception>
      <returns vsli:raw="A partitioner.">一个分区程序。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Creates a partitioner that chunks the user-specified range.">创建一个按用户指定的范围划分区块的分区程序。</summary>
      <param name="fromInclusive" vsli:raw="The lower, inclusive bound of the range.">范围下限（含）。</param>
      <param name="toExclusive" vsli:raw="The upper, exclusive bound of the range.">范围上限（不含）。</param>
      <param name="rangeSize" vsli:raw="The size of each subrange.">每个子范围的大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;toExclusive&quot; /&gt; argument is less than or equal to the &lt;paramref name=&quot;fromInclusive&quot; /&gt; argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;rangeSize&quot; /&gt; argument is less than or equal to 0.">
        <paramref name="toExclusive" /> 参数小于或等于 <paramref name="fromInclusive" /> 参数。  
  
- 或 - 
<paramref name="rangeSize" /> 参数小于或等于 0。</exception>
      <returns vsli:raw="A partitioner.">一个分区程序。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)">
      <summary vsli:raw="Creates a partitioner that chunks the user-specified range.">创建一个按用户指定的范围划分区块的分区程序。</summary>
      <param name="fromInclusive" vsli:raw="The lower, inclusive bound of the range.">范围下限（含）。</param>
      <param name="toExclusive" vsli:raw="The upper, exclusive bound of the range.">范围上限（不含）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;toExclusive&quot; /&gt; argument is less than or equal to the &lt;paramref name=&quot;fromInclusive&quot; /&gt; argument.">
        <paramref name="toExclusive" /> 参数小于或等于 <paramref name="fromInclusive" /> 参数。</exception>
      <returns vsli:raw="A partitioner.">一个分区程序。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)">
      <summary vsli:raw="Creates a partitioner that chunks the user-specified range.">创建一个按用户指定的范围划分区块的分区程序。</summary>
      <param name="fromInclusive" vsli:raw="The lower, inclusive bound of the range.">范围下限（含）。</param>
      <param name="toExclusive" vsli:raw="The upper, exclusive bound of the range.">范围上限（不含）。</param>
      <param name="rangeSize" vsli:raw="The size of each subrange.">每个子范围的大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;toExclusive&quot; /&gt; argument is less than or equal to the &lt;paramref name=&quot;fromInclusive&quot; /&gt; argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;rangeSize&quot; /&gt; argument is less than or equal to 0.">
        <paramref name="toExclusive" /> 参数小于或等于 <paramref name="fromInclusive" /> 参数。  
  
- 或 - 
<paramref name="rangeSize" /> 参数小于或等于 0。</exception>
      <returns vsli:raw="A partitioner.">一个分区程序。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)">
      <summary vsli:raw="Creates an orderable partitioner from a &lt;see cref=&quot;T:System.Array&quot; /&gt; instance.">从 <see cref="T:System.Array" /> 实例创建一个可排序分区程序。</summary>
      <param name="array" vsli:raw="The array to be partitioned.">要进行分区的数组。</param>
      <param name="loadBalance" vsli:raw="A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.">一个布尔值，该值指示创建的分区程序是否应在各分区之间保持动态负载平衡，而不是静态负载平衡。</param>
      <typeparam name="TSource" vsli:raw="Type of the elements in source array.">源数组中的元素的类型。</typeparam>
      <returns vsli:raw="An orderable partitioner based on the input array.">基于输入数组的可排序分区程序。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates an orderable partitioner from a &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; instance.">从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 实例创建一个可排序分区程序。</summary>
      <param name="source" vsli:raw="The enumerable to be partitioned.">要进行分区的可枚举项。</param>
      <typeparam name="TSource" vsli:raw="Type of the elements in source enumerable.">源可枚举项中的元素的类型。</typeparam>
      <returns vsli:raw="An orderable partitioner based on the input array.">基于输入数组的可排序分区程序。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)">
      <summary vsli:raw="Creates an orderable partitioner from a &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; instance.">从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 实例创建一个可排序分区程序。</summary>
      <param name="source" vsli:raw="The enumerable to be partitioned.">要进行分区的可枚举项。</param>
      <param name="partitionerOptions" vsli:raw="Options to control the buffering behavior of the partitioner.">控制分区缓冲行为的选项。</param>
      <typeparam name="TSource" vsli:raw="Type of the elements in source enumerable.">源可枚举项中的元素的类型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;partitionerOptions&quot; /&gt; argument specifies an invalid value for &lt;see cref=&quot;T:System.Collections.Concurrent.EnumerablePartitionerOptions&quot; /&gt;.">
        <paramref name="partitionerOptions" /> 参数为 <see cref="T:System.Collections.Concurrent.EnumerablePartitionerOptions" /> 指定无效值。</exception>
      <returns vsli:raw="An orderable partitioner based on the input array.">基于输入数组的可排序分区程序。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)">
      <summary vsli:raw="Creates an orderable partitioner from an &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; instance.">从 <see cref="T:System.Collections.Generic.IList`1" /> 实例创建一个可排序分区程序。</summary>
      <param name="list" vsli:raw="The list to be partitioned.">要进行分区的列表。</param>
      <param name="loadBalance" vsli:raw="A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.">一个布尔值，该值指示创建的分区程序是否应在各分区之间保持动态负载平衡，而不是静态负载平衡。</param>
      <typeparam name="TSource" vsli:raw="Type of the elements in source list.">源列表中的元素的类型。</typeparam>
      <returns vsli:raw="An orderable partitioner based on the input list.">基于输入列表的可排序分区程序。</returns>
    </member>
    <member name="T:System.Collections.Concurrent.Partitioner`1">
      <summary vsli:raw="Represents a particular manner of splitting a data source into multiple partitions.">表示将数据源拆分为多个分区的特定方式。</summary>
      <typeparam name="TSource" vsli:raw="Type of the elements in the collection.">集合中的元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.#ctor">
      <summary vsli:raw="Creates a new partitioner instance.">创建新的分区程序实例。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions">
      <summary vsli:raw="Creates an object that can partition the underlying collection into a variable number of partitions.">创建一个可将基础集合分区成可变数目的分区的对象。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Dynamic partitioning is not supported by the base class. You must implement it in a derived class.">该基类不支持动态分区。 必须在派生类中实现它。</exception>
      <returns vsli:raw="An object that can create partitions over the underlying data source.">一个可针对基础数据源创建分区的对象。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)">
      <summary vsli:raw="Partitions the underlying collection into the given number of partitions.">将基础集合分区成给定数目的分区。</summary>
      <param name="partitionCount" vsli:raw="The number of partitions to create.">要创建的分区数。</param>
      <returns vsli:raw="A list containing &lt;paramref name=&quot;partitionCount&quot; /&gt; enumerators.">一个包含 <paramref name="partitionCount" /> 枚举器的列表。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions">
      <summary vsli:raw="Gets whether additional partitions can be created dynamically.">获取是否可以动态创建附加分区。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.Partitioner`1&quot; /&gt; can create partitions dynamically as they are requested; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.Partitioner`1&quot; /&gt; can only allocate partitions statically.">
        <see langword="true" /> 如果 <see cref="T:System.Collections.Concurrent.Partitioner`1" /> 可以在请求时动态创建分区，则为; <see langword="false" /> 如果只能 <see cref="T:System.Collections.Concurrent.Partitioner`1" /> 静态分配分区，则为。</returns>
    </member>
  </members>
</doc>
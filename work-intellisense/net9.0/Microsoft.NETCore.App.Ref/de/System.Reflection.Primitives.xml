<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Primitives</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.FlowControl">
      <summary vsli:raw="Describes how an instruction alters the flow of control.">Beschreibt, wie eine Anweisung die Ablaufsteuerung ändert.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Branch">
      <summary vsli:raw="Branch instruction.">Verzweigungsanweisung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Break">
      <summary vsli:raw="Break instruction.">Unterbrechungsanweisung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Call">
      <summary vsli:raw="Call instruction.">Aufrufanweisung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Cond_Branch">
      <summary vsli:raw="Conditional branch instruction.">Bedingte Verzweigungsanweisung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Meta">
      <summary vsli:raw="Provides information about a subsequent instruction. For example, the &lt;see langword=&quot;Unaligned&quot; /&gt; instruction of &lt;see langword=&quot;Reflection.Emit.Opcodes&quot; /&gt; has &lt;see langword=&quot;FlowControl.Meta&quot; /&gt; and specifies that the subsequent pointer instruction might be unaligned.">Liefert Informationen zu einer nachfolgenden Anweisung. Die <see langword="Unaligned" />-Anweisung von <see langword="Reflection.Emit.Opcodes" /> weist z. B. <see langword="FlowControl.Meta" /> auf und zeigt an, dass die nachfolgende Zeigeranweisung möglicherweise nicht ausgerichtet ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Next">
      <summary vsli:raw="Normal flow of control.">Normale Ablaufsteuerung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Phi">
      <summary vsli:raw="This enumerator value is reserved and should not be used.">Dieser Enumeratorwert ist reserviert und sollte nicht verwendet werden.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Return">
      <summary vsli:raw="Return instruction.">Rückgabeanweisung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Throw">
      <summary vsli:raw="Exception throw instruction.">Anweisung zum Auslösen einer Ausnahme.</summary>
    </member>
    <member name="T:System.Reflection.Emit.OpCode">
      <summary vsli:raw="Describes an intermediate language (IL) instruction.">Beschreibt eine IL-Anweisung (Intermediate Language).</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Object)">
      <summary vsli:raw="Tests whether the given object is equal to this &lt;see langword=&quot;Opcode&quot; /&gt;.">Testet, ob das angegebene Objekt gleich diesem <see langword="Opcode" /> ist.</summary>
      <param name="obj" vsli:raw="The object to compare to this object.">Das mit diesem Objekt zu vergleichende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;Opcode&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="obj" /> eine Instanz von <see langword="Opcode" /> und gleich diesem Objekt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Indicates whether the current instance is equal to the specified &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt;.">Gibt an, ob die aktuelle Instanz und der angegebene <see cref="T:System.Reflection.Emit.OpCode" /> gleich sind.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to the current instance.">Der <see cref="T:System.Reflection.Emit.OpCode" />, der mit der aktuellen Instanz verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;obj&quot; /&gt; is equal to the value of the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Wert von <paramref name="obj" /> dem Wert der aktuellen Instanz entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.GetHashCode">
      <summary vsli:raw="Returns the generated hash code for this &lt;see langword=&quot;Opcode&quot; /&gt;.">Gibt den für diesen <see langword="Opcode" /> generierten Hashcode zurück.</summary>
      <returns vsli:raw="The hash code for this instance.">Der Hashcode für diese Instanz.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; structures are equal.">Gibt an, ob zwei <see cref="T:System.Reflection.Emit.OpCode" />-Strukturen gleich sind.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">Das <see cref="T:System.Reflection.Emit.OpCode" />, das mit <paramref name="b" /> verglichen werden soll.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">Das <see cref="T:System.Reflection.Emit.OpCode" />, das mit <paramref name="a" /> verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="a" /> und <paramref name="b" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; structures are not equal.">Gibt an, ob zwei <see cref="T:System.Reflection.Emit.OpCode" />-Strukturen ungleich sind.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">Das <see cref="T:System.Reflection.Emit.OpCode" />, das mit <paramref name="b" /> verglichen werden soll.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">Das <see cref="T:System.Reflection.Emit.OpCode" />, das mit <paramref name="a" /> verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is not equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="a" /> und <paramref name="b" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.ToString">
      <summary vsli:raw="Returns this &lt;see langword=&quot;Opcode&quot; /&gt; as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Gibt diesen <see langword="Opcode" /> als <see cref="T:System.String" /> zurück.</summary>
      <returns vsli:raw="A string containing the name of this &lt;see langword=&quot;Opcode&quot; /&gt;.">Eine Zeichenfolge mit dem Namen dieser <see langword="Opcode" />-Zahl.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.FlowControl">
      <summary vsli:raw="The flow control characteristics of the intermediate language (IL) instruction.">Die Eigenschaften der Ablaufsteuerung der IL-Anweisung (Intermediate Language).</summary>
      <returns vsli:raw="Read-only. The type of flow control.">Schreibgeschützt. Der Typ der Ablaufsteuerung.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Name">
      <summary vsli:raw="The name of the intermediate language (IL) instruction.">Der Name der IL-Anweisung (Intermediate Language).</summary>
      <returns vsli:raw="Read-only. The name of the IL instruction.">Schreibgeschützt. Der Name der IL-Anweisung.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OpCodeType">
      <summary vsli:raw="The type of intermediate language (IL) instruction.">Der Typ der IL-Anweisung (Intermediate Language).</summary>
      <returns vsli:raw="Read-only. The type of intermediate language (IL) instruction.">Schreibgeschützt. Der Typ der IL-Anweisung (Intermediate Language).</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OperandType">
      <summary vsli:raw="The operand type of an intermediate language (IL) instruction.">Der Operandentyp einer IL-Anweisung (Intermediate Language).</summary>
      <returns vsli:raw="Read-only. The operand type of an IL instruction.">Schreibgeschützt. Der Operandentyp einer IL-Anweisung.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Size">
      <summary vsli:raw="The size of the intermediate language (IL) instruction.">Die Größe der IL-Anweisung (Intermediate Language).</summary>
      <returns vsli:raw="Read-only. The size of the IL instruction.">Schreibgeschützt. Die Größe der IL-Anweisung.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPop">
      <summary vsli:raw="How the intermediate language (IL) instruction pops the stack.">Art des Stapelabrufs durch die IL-Anweisung (Intermediate Language).</summary>
      <returns vsli:raw="Read-only. The way the IL instruction pops the stack.">Schreibgeschützt. Die Art, in der die IL-Anweisung den Stapel abruft.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPush">
      <summary vsli:raw="How the intermediate language (IL) instruction pushes operand onto the stack.">Art, in der die IL-Anweisung (Intermediate Language) einen Operanden auf den Stapel legt.</summary>
      <returns vsli:raw="Read-only. The way the IL instruction pushes operand onto the stack.">Schreibgeschützt. Die Art, in der die IL-Anweisung einen Operanden auf den Stapel legt.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Value">
      <summary vsli:raw="Gets the numeric value of the intermediate language (IL) instruction.">Ruft den numerischen Wert für die Intermediate Language (IL)-Anweisung ab.</summary>
      <returns vsli:raw="Read-only. The numeric value of the IL instruction.">Schreibgeschützt. Ruft den numerischen Wert der IL-Anweisung ab.</returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodes">
      <summary vsli:raw="Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; class members (such as &lt;see cref=&quot;M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)&quot; /&gt;).">Stellt Felddarstellungen der MSIL (Microsoft Intermediate Language)-Anweisungen für die Ausgabe durch die <see cref="T:System.Reflection.Emit.ILGenerator" />-Klassenmember bereit, beispielsweise <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add">
      <summary vsli:raw="Adds two values and pushes the result onto the evaluation stack.">Addiert zwei Werte und legt das Ergebnis auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf">
      <summary vsli:raw="Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.">Addiert zwei ganze Zahlen, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">
      <summary vsli:raw="Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.">Addiert zwei Ganzzahlwerte ohne Vorzeichen, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.And">
      <summary vsli:raw="Computes the bitwise AND of two values and pushes the result onto the evaluation stack.">Berechnet das bitweise AND für zwei Werte und legt das Ergebnis auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Arglist">
      <summary vsli:raw="Returns an unmanaged pointer to the argument list of the current method.">Gibt einen nicht verwalteten Zeiger auf die Argumentliste der aktuellen Methode zurück.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq">
      <summary vsli:raw="Transfers control to a target instruction if two values are equal.">Überträgt die Steuerung an eine Zielanweisung, wenn zwei Werte übereinstimmen.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if two values are equal.">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn zwei Werte übereinstimmen.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge">
      <summary vsli:raw="Transfers control to a target instruction if the first value is greater than or equal to the second value.">Überträgt die Steuerung an eine Zielanweisung, wenn der erste Wert größer oder gleich dem zweiten Wert ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn der erste Wert größer oder gleich dem zweiten Wert ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un">
      <summary vsli:raw="Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.">Überträgt die Steuerung an eine Zielanweisung, wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert größer als der zweite Wert ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert größer als der zweite Wert ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt">
      <summary vsli:raw="Transfers control to a target instruction if the first value is greater than the second value.">Überträgt die Steuerung an eine Zielanweisung, wenn der erste Wert größer als der zweite Wert ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is greater than the second value.">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn der erste Wert größer als der zweite Wert ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un">
      <summary vsli:raw="Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.">Überträgt die Steuerung an eine Zielanweisung, wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert größer als der zweite Wert ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert größer als der zweite Wert ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble">
      <summary vsli:raw="Transfers control to a target instruction if the first value is less than or equal to the second value.">Überträgt die Steuerung an eine Zielanweisung, wenn der erste Wert kleiner oder gleich dem zweiten Wert ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn der erste Wert kleiner oder gleich dem zweiten Wert ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un">
      <summary vsli:raw="Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.">Überträgt die Steuerung an eine Zielanweisung, wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert kleiner oder gleich dem zweiten Wert ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert kleiner oder gleich dem zweiten Wert ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt">
      <summary vsli:raw="Transfers control to a target instruction if the first value is less than the second value.">Überträgt die Steuerung an eine Zielanweisung, wenn der erste Wert kleiner als der zweite Wert ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is less than the second value.">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn der erste Wert kleiner als der zweite Wert ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un">
      <summary vsli:raw="Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.">Überträgt die Steuerung an eine Zielanweisung, wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert kleiner als der zweite Wert ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte verglichen werden und der erste Wert kleiner als der zweite Wert ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un">
      <summary vsli:raw="Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.">Überträgt die Steuerung an eine Zielanweisung, wenn zwei Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte ungleich sind.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn zwei Ganzzahlwerte ohne Vorzeichen oder ungeordnete Gleitkommawerte ungleich sind.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Box">
      <summary vsli:raw="Converts a value type to an object reference (type &lt;see langword=&quot;O&quot; /&gt;).">Konvertiert einen Werttyp in einen Objektverweis (Typ <see langword="O" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br">
      <summary vsli:raw="Unconditionally transfers control to a target instruction.">Überträgt die Steuerung bedingungslos an eine Zielanweisung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br_S">
      <summary vsli:raw="Unconditionally transfers control to a target instruction (short form).">Überträgt die Steuerung bedingungslos an eine Zielanweisung (Kurzform).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Break">
      <summary vsli:raw="Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.">Signalisiert CLI (Common Language Infrastructure), den Debugger darüber zu informieren, dass ein Haltepunkt erreicht wurde.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse">
      <summary vsli:raw="Transfers control to a target instruction if &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;, a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic), or zero.">Überträgt die Steuerung an eine Zielanweisung, wenn <paramref name="value" /> entweder <see langword="false" />, ein NULL-Verweis (<see langword="Nothing" /> in Visual Basic) oder 0 (null) ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse_S">
      <summary vsli:raw="Transfers control to a target instruction if &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;, a null reference, or zero.">Überträgt die Steuerung an eine Zielanweisung, wenn <paramref name="value" /> entweder <see langword="false" />, ein NULL-Verweis oder 0 (null) ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue">
      <summary vsli:raw="Transfers control to a target instruction if &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, not null, or non-zero.">Überträgt die Steuerung an eine Zielanweisung, wenn <paramref name="value" /> entweder <see langword="true" />, nicht NULL oder ungleich 0 (null) ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, not null, or non-zero.">Überträgt die Steuerung an eine Zielanweisung (Kurzform), wenn <paramref name="value" /> entweder <see langword="true" />, nicht NULL oder ungleich 0 (null) ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Call">
      <summary vsli:raw="Calls the method indicated by the passed method descriptor.">Ruft die Methode auf, die der übergebene Methodendeskriptor angibt.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Calli">
      <summary vsli:raw="Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.">Ruft die angegebene Methode auf dem Auswertungsstapel (als Zeiger auf einen Einstiegspunkt) mit Argumenten auf, die durch eine Aufrufkonvention beschrieben sind.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Callvirt">
      <summary vsli:raw="Calls a late-bound method on an object, pushing the return value onto the evaluation stack.">Ruft eine spät gebundene Methode für ein Objekt auf und legt den Rückgabewert auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Castclass">
      <summary vsli:raw="Attempts to cast an object passed by reference to the specified class.">Wandelt ein als Verweis übergebenes Objekt in die angegebene Klasse um.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ceq">
      <summary vsli:raw="Compares two values. If they are equal, the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">Vergleicht zwei Werte. Wenn sie gleich sind, wird der Ganzzahlwert 1 <see langword="(int32" />) auf dem Auswertungsstapel abgelegt, andernfalls wird 0 (<see langword="int32" />) auf dem Auswertungsstapel abgelegt.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt">
      <summary vsli:raw="Compares two values. If the first value is greater than the second, the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">Vergleicht zwei Werte. Wenn der erste Wert größer als der zweite Wert ist, wird der Ganzzahlwert 1 <see langword="(int32" />) auf dem Auswertungsstapel abgelegt, andernfalls wird 0 (<see langword="int32" />) auf dem Auswertungsstapel abgelegt.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt_Un">
      <summary vsli:raw="Compares two unsigned or unordered values. If the first value is greater than the second, the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">Vergleicht zwei Werte ohne Vorzeichen oder zwei ungeordnete Werte. Wenn der erste Wert größer als der zweite Wert ist, wird der Ganzzahlwert 1 <see langword="(int32" />) auf dem Auswertungsstapel abgelegt, andernfalls wird 0 (<see langword="int32" />) auf dem Auswertungsstapel abgelegt.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ckfinite">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.ArithmeticException&quot; /&gt; if value is not a finite number.">Löst <see cref="T:System.ArithmeticException" /> aus, wenn der Wert keine endliche Zahl ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt">
      <summary vsli:raw="Compares two values. If the first value is less than the second, the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">Vergleicht zwei Werte. Wenn der erste Wert kleiner als der zweite Wert ist, wird der Ganzzahlwert 1 <see langword="(int32" />) auf dem Auswertungsstapel abgelegt, andernfalls wird 0 (<see langword="int32" />) auf dem Auswertungsstapel abgelegt.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt_Un">
      <summary vsli:raw="Compares the unsigned or unordered values &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt;. If &lt;paramref name=&quot;value1&quot; /&gt; is less than &lt;paramref name=&quot;value2&quot; /&gt;, then the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">Vergleicht die Werte ohne Vorzeichen oder die ungeordneten Werte <paramref name="value1" /> und <paramref name="value2" />. Wenn <paramref name="value1" /> kleiner als <paramref name="value2" /> ist, wird der Ganzzahlwert 1 <see langword="(int32" />) auf dem Auswertungsstapel abgelegt, andernfalls wird 0 (<see langword="int32" />) auf dem Auswertungsstapel abgelegt.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Constrained">
      <summary vsli:raw="Constrains the type on which a virtual method call is made.">Schränkt den Typ ein, für den eine virtuelle Methode aufgerufen wird.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;native int&quot; /&gt;.">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="native int" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I1">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;int8&quot; /&gt;, then extends (pads) it to &lt;see langword=&quot;int32&quot; /&gt;.">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="int8" /> und erweitert ihn dann zu <see langword="int32" /> (durch Auffüllen).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I2">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;int16&quot; /&gt;, then extends (pads) it to &lt;see langword=&quot;int32&quot; /&gt;.">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="int16" /> und erweitert ihn dann zu <see langword="int32" /> (durch Auffüllen).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I4">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;int32&quot; /&gt;.">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I8">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;int64&quot; /&gt;.">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="int64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;native int&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in <see langword="native int" />. Bei einem Überlauf wird eine <see cref="T:System.OverflowException" /> ausgelöst.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;native int&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in <see langword="native int" /> mit Vorzeichen und löst bei einem Überlauf eine <see cref="T:System.OverflowException" /> aus.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;int8&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in <see langword="int8" /> mit Vorzeichen und erweitert ihn auf <see langword="int32" />. Bei einem Überlauf wird eine <see cref="T:System.OverflowException" /> ausgelöst.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;int8&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in <see langword="int8" /> mit Vorzeichen und erweitert ihn auf <see langword="int32" />. Bei einem Überlauf wird eine <see cref="T:System.OverflowException" /> ausgelöst.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;int16&quot; /&gt; and extending it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in <see langword="int16" /> mit Vorzeichen und erweitert ihn auf <see langword="int32" />. Bei einem Überlauf wird eine <see cref="T:System.OverflowException" /> ausgelöst.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;int16&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in <see langword="int16" /> mit Vorzeichen und erweitert ihn auf <see langword="int32" />. Bei einem Überlauf wird eine <see cref="T:System.OverflowException" /> ausgelöst.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in <see langword="int32" />. Bei einem Überlauf wird eine <see cref="T:System.OverflowException" /> ausgelöst.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in <see langword="int32" /> mit Vorzeichen und löst bei einem Überlauf eine <see cref="T:System.OverflowException" /> aus.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;int64&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in <see langword="int64" />. Bei einem Überlauf wird eine <see cref="T:System.OverflowException" /> ausgelöst.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;int64&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in <see langword="int64" /> mit Vorzeichen und löst bei einem Überlauf eine <see cref="T:System.OverflowException" /> aus.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned native int&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in <see langword="unsigned native int" /> und löst bei einem Überlauf eine <see cref="T:System.OverflowException" /> aus.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned native int&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in <see langword="unsigned native int" /> und löst bei einem Überlauf eine <see cref="T:System.OverflowException" /> aus.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned int8&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in <see langword="unsigned int8" /> und erweitert ihn auf <see langword="int32" />. Bei einem Überlauf wird eine <see cref="T:System.OverflowException" /> ausgelöst.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned int8&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in <see langword="unsigned int8" /> und erweitert ihn auf <see langword="int32" />. Bei einem Überlauf wird eine <see cref="T:System.OverflowException" /> ausgelöst.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned int16&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in <see langword="unsigned int16" /> und erweitert ihn auf <see langword="int32" />. Bei einem Überlauf wird eine <see cref="T:System.OverflowException" /> ausgelöst.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned int16&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in <see langword="unsigned int16" /> und erweitert ihn auf <see langword="int32" />. Bei einem Überlauf wird eine <see cref="T:System.OverflowException" /> ausgelöst.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in <see langword="unsigned int32" /> und löst bei einem Überlauf eine <see cref="T:System.OverflowException" /> aus.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in <see langword="unsigned int32" /> und löst bei einem Überlauf eine <see cref="T:System.OverflowException" /> aus.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned int64&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert mit Vorzeichen an oberster Position des Auswertungsstapels in <see langword="unsigned int64" /> und löst bei einem Überlauf eine <see cref="T:System.OverflowException" /> aus.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned int64&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Konvertiert den Wert ohne Vorzeichen an oberster Position des Auswertungsstapels in <see langword="unsigned int64" /> und löst bei einem Überlauf eine <see cref="T:System.OverflowException" /> aus.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R_Un">
      <summary vsli:raw="Converts the unsigned integer value on top of the evaluation stack to &lt;see langword=&quot;float32&quot; /&gt;.">Konvertiert den Ganzzahlwert ohne Vorzeichen an oberster Position des Auswertungsstapels in <see langword="float32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R4">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;float32&quot; /&gt;.">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="float32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R8">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;float64&quot; /&gt;.">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="float64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned native int&quot; /&gt;, and extends it to &lt;see langword=&quot;native int&quot; /&gt;.">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="unsigned native int" /> und erweitert ihn dann zu <see langword="native int" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U1">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned int8&quot; /&gt;, and extends it to &lt;see langword=&quot;int32&quot; /&gt;.">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="unsigned int8" /> und erweitert ihn dann zu <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U2">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned int16&quot; /&gt;, and extends it to &lt;see langword=&quot;int32&quot; /&gt;.">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="unsigned int16" /> und erweitert ihn dann zu <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U4">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned int32&quot; /&gt;, and extends it to &lt;see langword=&quot;int32&quot; /&gt;.">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="unsigned int32" /> und erweitert ihn dann zu <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U8">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned int64&quot; /&gt;, and extends it to &lt;see langword=&quot;int64&quot; /&gt;.">Konvertiert den Wert an oberster Position des Auswertungsstapels in <see langword="unsigned int64" /> und erweitert ihn dann zu <see langword="int64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpblk">
      <summary vsli:raw="Copies a specified number bytes from a source address to a destination address.">Kopiert eine angegebene Anzahl von Bytes von einer Quelladresse an eine Zieladresse.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpobj">
      <summary vsli:raw="Copies the value type located at the address of an object (type &lt;see langword=&quot;&amp;amp;&quot; /&gt;, &lt;see langword=&quot;*&quot; /&gt; or &lt;see langword=&quot;native int&quot; /&gt;) to the address of the destination object (type &lt;see langword=&quot;&amp;amp;&quot; /&gt;, &lt;see langword=&quot;*&quot; /&gt; or &lt;see langword=&quot;native int&quot; /&gt;).">Kopiert den Werttyp, der an der Adresse eines Objekts gespeichert ist (Typ <see langword="&amp;" />, <see langword="*" /> oder <see langword="native int" />), an die Adresse des Zielobjekts (Typ <see langword="&amp;" />, <see langword="*" /> oder <see langword="native int" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div">
      <summary vsli:raw="Divides two values and pushes the result as a floating-point (type &lt;see langword=&quot;F&quot; /&gt;) or quotient (type &lt;see langword=&quot;int32&quot; /&gt;) onto the evaluation stack.">Dividiert zwei Werte und legt das Ergebnis als Gleitkommawert (Typ <see langword="F" />) oder Quotient (Typ <see langword="int32" />) auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div_Un">
      <summary vsli:raw="Divides two unsigned integer values and pushes the result (&lt;see langword=&quot;int32&quot; /&gt;) onto the evaluation stack.">Dividiert zwei Ganzzahlwerte ohne Vorzeichen und legt das Ergebnis (<see langword="int32" />) auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Dup">
      <summary vsli:raw="Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.">Kopiert den obersten Wert auf dem Auswertungsstapel und legt die Kopie dann auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfilter">
      <summary vsli:raw="Transfers control from the &lt;see langword=&quot;filter&quot; /&gt; clause of an exception back to the Common Language Infrastructure (CLI) exception handler.">Überträgt die Steuerung von der <see langword="filter" />-Klausel einer Ausnahme zurück an den CLI-Ausnahmehandler (Common Language Infrastructure).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfinally">
      <summary vsli:raw="Transfers control from the &lt;see langword=&quot;fault&quot; /&gt; or &lt;see langword=&quot;finally&quot; /&gt; clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.">Überträgt die Steuerung aus der <see langword="fault" />-Klausel oder <see langword="finally" />-Klausel eines Ausnahmeblockes zurück an den CLI-Ausnahmehandler (Common Language Infrastructure).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initblk">
      <summary vsli:raw="Initializes a specified block of memory at a specific address to a given size and initial value.">Initialisiert einen angegebenen Speicherblock an einer bestimmten Adresse mit einer angegebenen Größe und einem angegebenen Anfangswert.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initobj">
      <summary vsli:raw="Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.">Initialisiert alle Felder des Werttyps an einer angegebenen Adresse mit einem NULL-Verweis oder dem Wert 0 des entsprechenden primitiven Typs.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Isinst">
      <summary vsli:raw="Tests whether an object reference (type &lt;see langword=&quot;O&quot; /&gt;) is an instance of a particular class.">Überprüft, ob ein Objektverweis (Typ <see langword="O" />) eine Instanz einer bestimmten Klasse ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Jmp">
      <summary vsli:raw="Exits current method and jumps to specified method.">Beendet die aktuelle Methode und wechselt zur angegebenen Methode.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg">
      <summary vsli:raw="Loads an argument (referenced by a specified index value) onto the stack.">Lädt ein Argument, auf das ein angegebener Indexwert verweist, in den Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_0">
      <summary vsli:raw="Loads the argument at index 0 onto the evaluation stack.">Lädt das Argument am Index 0 in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_1">
      <summary vsli:raw="Loads the argument at index 1 onto the evaluation stack.">Lädt das Argument am Index 1 in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_2">
      <summary vsli:raw="Loads the argument at index 2 onto the evaluation stack.">Lädt das Argument am Index 2 in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_3">
      <summary vsli:raw="Loads the argument at index 3 onto the evaluation stack.">Lädt das Argument am Index 3 in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_S">
      <summary vsli:raw="Loads the argument (referenced by a specified short form index) onto the evaluation stack.">Lädt das Argument, auf das ein angegebener Kurzformindex verweist, in den Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga">
      <summary vsli:raw="Load an argument address onto the evaluation stack.">Lädt eine Argumentadresse in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga_S">
      <summary vsli:raw="Load an argument address, in short form, onto the evaluation stack.">Lädt eine Argumentadresse in Kurzform in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4">
      <summary vsli:raw="Pushes a supplied value of type &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Legt einen bereitgestellten Wert vom Typ <see langword="int32" /> als <see langword="int32" /> auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">
      <summary vsli:raw="Pushes the integer value of 0 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Legt den Ganzzahlwert 0 als <see langword="int32" /> auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">
      <summary vsli:raw="Pushes the integer value of 1 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Legt den Ganzzahlwert 1 als <see langword="int32" /> auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">
      <summary vsli:raw="Pushes the integer value of 2 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Legt den Ganzzahlwert 2 als <see langword="int32" /> auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">
      <summary vsli:raw="Pushes the integer value of 3 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Legt den Ganzzahlwert 3 als <see langword="int32" /> auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">
      <summary vsli:raw="Pushes the integer value of 4 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Legt den Ganzzahlwert 4 als <see langword="int32" /> auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">
      <summary vsli:raw="Pushes the integer value of 5 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Legt den Ganzzahlwert 5 als <see langword="int32" /> auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">
      <summary vsli:raw="Pushes the integer value of 6 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Legt den Ganzzahlwert 6 als <see langword="int32" /> auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">
      <summary vsli:raw="Pushes the integer value of 7 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Legt den Ganzzahlwert 7 als <see langword="int32" /> auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">
      <summary vsli:raw="Pushes the integer value of 8 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Legt den Ganzzahlwert 8 als <see langword="int32" /> auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">
      <summary vsli:raw="Pushes the integer value of -1 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Legt den Ganzzahlwert -1 als <see langword="int32" /> auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">
      <summary vsli:raw="Pushes the supplied &lt;see langword=&quot;int8&quot; /&gt; value onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;, short form.">Legt den bereitgestellten <see langword="int8" />-Wert als <see langword="int32" />, Kurzform, auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I8">
      <summary vsli:raw="Pushes a supplied value of type &lt;see langword=&quot;int64&quot; /&gt; onto the evaluation stack as an &lt;see langword=&quot;int64&quot; /&gt;.">Legt einen bereitgestellten Wert vom Typ <see langword="int64" /> als <see langword="int64" /> auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R4">
      <summary vsli:raw="Pushes a supplied value of type &lt;see langword=&quot;float32&quot; /&gt; onto the evaluation stack as type &lt;see langword=&quot;F&quot; /&gt; (float).">Legt einen bereitgestellten Wert vom Typ <see langword="float32" /> als Typ <see langword="F" /> (Gleitkommawert) auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R8">
      <summary vsli:raw="Pushes a supplied value of type &lt;see langword=&quot;float64&quot; /&gt; onto the evaluation stack as type &lt;see langword=&quot;F&quot; /&gt; (float).">Legt einen bereitgestellten Wert vom Typ <see langword="float64" /> als Typ <see langword="F" /> (Gleitkommawert) auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem">
      <summary vsli:raw="Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.">Lädt das Element an einem angegebenen Arrayindex als der in der Anweisung angegebene Typ auf die oberste Position des Auswertungsstapels.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;native int&quot; /&gt; at a specified array index onto the top of the evaluation stack as a &lt;see langword=&quot;native int&quot; /&gt;.">Lädt das Element mit dem Typ <see langword="native int" /> an einem angegebenen Arrayindex als <see langword="native int" /> auf die oberste Position des Auswertungsstapels.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I1">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;int8&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Lädt das Element mit dem Typ <see langword="int8" /> an einem angegebenen Arrayindex als <see langword="int32" /> an die oberste Position des Auswertungsstapels.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I2">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;int16&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Lädt das Element mit dem Typ <see langword="int16" /> an einem angegebenen Arrayindex als <see langword="int32" /> an die oberste Position des Auswertungsstapels.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I4">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;int32&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Lädt das Element mit dem Typ <see langword="int32" /> an einem angegebenen Arrayindex als <see langword="int32" /> an die oberste Position des Auswertungsstapels.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I8">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;int64&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int64&quot; /&gt;.">Lädt das Element mit dem Typ <see langword="int64" /> an einem angegebenen Arrayindex als <see langword="int64" /> an die oberste Position des Auswertungsstapels.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R4">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;float32&quot; /&gt; at a specified array index onto the top of the evaluation stack as type &lt;see langword=&quot;F&quot; /&gt; (float).">Lädt das Element vom Typ <see langword="float32" /> an einem angegebenen Arrayindex als Typ <see langword="F" /> (Gleitkommawert) an die oberste Position des Auswertungsstapels.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R8">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;float64&quot; /&gt; at a specified array index onto the top of the evaluation stack as type &lt;see langword=&quot;F&quot; /&gt; (float).">Lädt das Element vom Typ <see langword="float64" /> an einem angegebenen Arrayindex als Typ <see langword="F" /> (Gleitkommawert) an die oberste Position des Auswertungsstapels.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">
      <summary vsli:raw="Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type &lt;see langword=&quot;O&quot; /&gt; (object reference).">Lädt das Element mit Objektverweis an einem angegebenen Arrayindex als Typ <see langword="O" /> (Objektverweis) an die oberste Position des Auswertungsstapels.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U1">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;unsigned int8&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Lädt das Element mit dem Typ <see langword="unsigned int8" /> an einem angegebenen Arrayindex als <see langword="int32" /> an die oberste Position des Auswertungsstapels.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U2">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;unsigned int16&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Lädt das Element mit dem Typ <see langword="unsigned int16" /> an einem angegebenen Arrayindex als <see langword="int32" /> an die oberste Position des Auswertungsstapels.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U4">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;unsigned int32&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Lädt das Element mit dem Typ <see langword="unsigned int32" /> an einem angegebenen Arrayindex als <see langword="int32" /> an die oberste Position des Auswertungsstapels.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelema">
      <summary vsli:raw="Loads the address of the array element at a specified array index onto the top of the evaluation stack as type &lt;see langword=&quot;&amp;amp;&quot; /&gt; (managed pointer).">Lädt die Adresse des Arrayelements an einem angegebenen Arrayindex als Typ <see langword="&amp;" /> (verwalteter Zeiger) an die oberste Position des Auswertungsstapels.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldfld">
      <summary vsli:raw="Finds the value of a field in the object whose reference is currently on the evaluation stack.">Sucht den Wert eines Felds in dem Objekt, für das sich derzeit ein Verweis auf dem Auswertungsstapel befindet.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldflda">
      <summary vsli:raw="Finds the address of a field in the object whose reference is currently on the evaluation stack.">Sucht die Adresse eines Felds in dem Objekt, für das sich derzeit ein Verweis auf dem Auswertungsstapel befindet.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldftn">
      <summary vsli:raw="Pushes an unmanaged pointer (type &lt;see langword=&quot;native int&quot; /&gt;) to the native code implementing a specific method onto the evaluation stack.">Legt einen nicht verwalteten Zeiger (Typ <see langword="native int" />) auf dem Auswertungsstapel ab. Dieser Zeiger zeigt auf den systemeigenen Code, der eine bestimmte Methode implementiert.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;native int&quot; /&gt; as a &lt;see langword=&quot;native int&quot; /&gt; onto the evaluation stack indirectly.">Lädt einen Wert vom Typ <see langword="native int" /> indirekt als <see langword="native int" /> in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I1">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;int8&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Lädt einen Wert vom Typ <see langword="int8" /> indirekt als <see langword="int32" /> in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I2">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;int16&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Lädt einen Wert vom Typ <see langword="int16" /> indirekt als <see langword="int32" /> in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I4">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;int32&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Lädt einen Wert vom Typ <see langword="int32" /> indirekt als <see langword="int32" /> in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I8">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;int64&quot; /&gt; as an &lt;see langword=&quot;int64&quot; /&gt; onto the evaluation stack indirectly.">Lädt einen Wert vom Typ <see langword="int64" /> indirekt als <see langword="int64" /> in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R4">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;float32&quot; /&gt; as a type &lt;see langword=&quot;F&quot; /&gt; (float) onto the evaluation stack indirectly.">Lädt einen Wert vom Typ <see langword="float32" /> indirekt als Typ <see langword="F" /> (Gleitkommawert) in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R8">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;float64&quot; /&gt; as a type &lt;see langword=&quot;F&quot; /&gt; (float) onto the evaluation stack indirectly.">Lädt einen Wert vom Typ <see langword="float64" /> indirekt als Typ <see langword="F" /> (Gleitkommawert) in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_Ref">
      <summary vsli:raw="Loads an object reference as a type &lt;see langword=&quot;O&quot; /&gt; (object reference) onto the evaluation stack indirectly.">Lädt einen Objektverweis indirekt als Typ <see langword="O" /> (Objektverweis) in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U1">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;unsigned int8&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Lädt einen Wert vom Typ <see langword="unsigned int8" /> indirekt als <see langword="int32" /> in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U2">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;unsigned int16&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Lädt einen Wert vom Typ <see langword="unsigned int16" /> indirekt als <see langword="int32" /> in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U4">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;unsigned int32&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Lädt einen Wert vom Typ <see langword="unsigned int32" /> indirekt als <see langword="int32" /> in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldlen">
      <summary vsli:raw="Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.">Legt die Anzahl der Elemente eines nullbasierten, eindimensionalen Arrays auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc">
      <summary vsli:raw="Loads the local variable at a specific index onto the evaluation stack.">Lädt die lokale Variable an einem bestimmten Index in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_0">
      <summary vsli:raw="Loads the local variable at index 0 onto the evaluation stack.">Lädt die lokale Variable am Index 0 in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_1">
      <summary vsli:raw="Loads the local variable at index 1 onto the evaluation stack.">Lädt die lokale Variable am Index 1 in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_2">
      <summary vsli:raw="Loads the local variable at index 2 onto the evaluation stack.">Lädt die lokale Variable am Index 2 in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_3">
      <summary vsli:raw="Loads the local variable at index 3 onto the evaluation stack.">Lädt die lokale Variable am Index 3 in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_S">
      <summary vsli:raw="Loads the local variable at a specific index onto the evaluation stack, short form.">Lädt die lokale Variable an einem bestimmten Index in den Auswertungsstapel, Kurzform.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca">
      <summary vsli:raw="Loads the address of the local variable at a specific index onto the evaluation stack.">Lädt die Adresse der lokalen Variablen am angegebenen Index in den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca_S">
      <summary vsli:raw="Loads the address of the local variable at a specific index onto the evaluation stack, short form.">Lädt die Adresse der lokalen Variablen am angegebenen Index in den Auswertungsstapel, Kurzform.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldnull">
      <summary vsli:raw="Pushes a null reference (type &lt;see langword=&quot;O&quot; /&gt;) onto the evaluation stack.">Legt einen NULL-Verweis (Typ <see langword="O" />) auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldobj">
      <summary vsli:raw="Copies the value type object pointed to by an address to the top of the evaluation stack.">Kopiert das Werttypobjekt, auf das eine Adresse zeigt, an die oberste Position des Auswertungsstapels.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsfld">
      <summary vsli:raw="Pushes the value of a static field onto the evaluation stack.">Legt den Wert eines statischen Felds auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsflda">
      <summary vsli:raw="Pushes the address of a static field onto the evaluation stack.">Legt die Adresse eines statischen Felds auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldstr">
      <summary vsli:raw="Pushes a new object reference to a string literal stored in the metadata.">Legt einen neuen Objektverweis auf ein in den Metadaten gespeichertes Zeichenfolgenliteral mittels Push ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldtoken">
      <summary vsli:raw="Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.">Konvertiert ein Metadatentoken in seine Laufzeitdarstellung und legt es auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldvirtftn">
      <summary vsli:raw="Pushes an unmanaged pointer (type &lt;see langword=&quot;native int&quot; /&gt;) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.">Legt einen nicht verwalteten Zeiger (Typ <see langword="native int" />) auf systemeigenen Code auf dem Auswertungsstapel ab. Dieser Code implementiert eine bestimmte virtuelle Methode, die einem angegebenen Objekt zugeordnet ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave">
      <summary vsli:raw="Exits a protected region of code, unconditionally transferring control to a specific target instruction.">Beendet einen geschützten Codebereich, wobei die Steuerung bedingungslos an eine bestimmte Zielanweisung übertragen wird.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave_S">
      <summary vsli:raw="Exits a protected region of code, unconditionally transferring control to a target instruction (short form).">Beendet einen geschützten Codebereich, wobei die Steuerung bedingungslos an eine bestimmte Zielanweisung übertragen wird, Kurzform.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Localloc">
      <summary vsli:raw="Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type &lt;see langword=&quot;*&quot; /&gt;) of the first allocated byte onto the evaluation stack.">Belegt eine bestimmte Anzahl von Bytes aus dem lokalen dynamischen Speicherpool und legt die Adresse (einen flüchtigen Zeiger, Typ <see langword="*" />) des ersten reservierten Bytes auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mkrefany">
      <summary vsli:raw="Pushes a typed reference to an instance of a specific type onto the evaluation stack.">Legt einen typisierten Verweis auf eine Instanz eines bestimmten Typs auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul">
      <summary vsli:raw="Multiplies two values and pushes the result on the evaluation stack.">Multipliziert zwei Werte und legt das Ergebnis auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf">
      <summary vsli:raw="Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.">Multipliziert zwei Ganzzahlwerte, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">
      <summary vsli:raw="Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.">Multipliziert zwei Ganzzahlwerte ohne Vorzeichen, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Neg">
      <summary vsli:raw="Negates a value and pushes the result onto the evaluation stack.">Negiert einen Wert und legt das Ergebnis auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newarr">
      <summary vsli:raw="Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.">Legt einen Objektverweis auf ein neues nullbasiertes, eindimensionales Array auf dem Auswertungsstapel ab, dessen Elemente einen bestimmten Typ aufweisen.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newobj">
      <summary vsli:raw="Creates a new object or a new instance of a value type, pushing an object reference (type &lt;see langword=&quot;O&quot; /&gt;) onto the evaluation stack.">Erstellt ein neues Objekt oder eine neue Instanz eines Werttyps, wobei ein Objektverweis (Typ <see langword="O" />) auf dem Auswertungsstapel abgelegt wird.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Nop">
      <summary vsli:raw="Fills space if opcodes are patched. No meaningful operation is performed although a processing cycle can be consumed.">Füllt Speicherplatz auf, wenn Opcodes gepatcht werden. Es wird keine sinnvolle Operation ausgeführt, obwohl ein Verarbeitungszyklus ausgeführt werden kann.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Not">
      <summary vsli:raw="Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.">Berechnet das bitweise Komplement des Ganzzahlwerts an oberster Position des Stapels und legt das Ergebnis als denselben Typ auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Or">
      <summary vsli:raw="Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.">Berechnet das bitweise Komplement der beiden Ganzzahlwerte an oberster Position des Stapels und legt das Ergebnis auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Pop">
      <summary vsli:raw="Removes the value currently on top of the evaluation stack.">Entfernt den Wert, der sich derzeit an oberster Position des Auswertungsstapels befindet.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix1">
      <summary vsli:raw="This is a reserved instruction.">Dies ist eine reservierte Anweisung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix2">
      <summary vsli:raw="This is a reserved instruction.">Dies ist eine reservierte Anweisung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix3">
      <summary vsli:raw="This is a reserved instruction.">Dies ist eine reservierte Anweisung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix4">
      <summary vsli:raw="This is a reserved instruction.">Dies ist eine reservierte Anweisung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix5">
      <summary vsli:raw="This is a reserved instruction.">Dies ist eine reservierte Anweisung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix6">
      <summary vsli:raw="This is a reserved instruction.">Dies ist eine reservierte Anweisung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix7">
      <summary vsli:raw="This is a reserved instruction.">Dies ist eine reservierte Anweisung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefixref">
      <summary vsli:raw="This is a reserved instruction.">Dies ist eine reservierte Anweisung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Readonly">
      <summary vsli:raw="Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.">Gibt an, dass beim nachfolgenden Vorgang zur Arrayadresse zur Laufzeit keine Typüberprüfung durchgeführt wird und dass ein verwalteter Zeiger zurückgegeben wird, der nur bedingt geändert werden kann.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanytype">
      <summary vsli:raw="Retrieves the type token embedded in a typed reference.">Ruft das Typtoken ab, das in einen typisierten Verweis eingebettet ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanyval">
      <summary vsli:raw="Retrieves the address (type &lt;see langword=&quot;&amp;amp;&quot; /&gt;) embedded in a typed reference.">Ruft die Adresse (Typ <see langword="&amp;" />) ab, die in einen typisierten Verweis eingebettet ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem">
      <summary vsli:raw="Divides two values and pushes the remainder onto the evaluation stack.">Dividiert zwei Werte und legt den Rest auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem_Un">
      <summary vsli:raw="Divides two unsigned values and pushes the remainder onto the evaluation stack.">Dividiert zwei Werte ohne Vorzeichen und legt den Rest auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ret">
      <summary vsli:raw="Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.">Wird von der aktuellen Methode zurückgegeben und legt einen Rückgabewert (sofern vorhanden) vom Auswertungsstapel des Aufgerufenen auf dem Auswertungsstapel des Aufrufenden ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rethrow">
      <summary vsli:raw="Rethrows the current exception.">Löst erneut die aktuelle Ausnahme aus.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shl">
      <summary vsli:raw="Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.">Verschiebt einen ganzzahligen Wert um eine angegebene Anzahl von Bits nach links, wobei die frei werdenden Stellen mit 0-Bits aufgefüllt werden, und legt das Ergebnis auf den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr">
      <summary vsli:raw="Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.">Verschiebt einen ganzzahligen Wert um eine angegebene Anzahl von Bits nach rechts, wobei das Vorzeichen mitgeführt wird, und legt das Ergebnis auf den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr_Un">
      <summary vsli:raw="Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.">Verschiebt einen ganzzahligen Wert ohne Vorzeichen um eine angegebene Anzahl von Bits nach rechts, wobei die frei werdenden Stellen mit 0-Bits aufgefüllt werden, und legt das Ergebnis auf den Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sizeof">
      <summary vsli:raw="Pushes the size, in bytes, of a supplied value type onto the evaluation stack.">Legt die Größe eines bereitgestellten Werttyps in Bytes auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg">
      <summary vsli:raw="Stores the value on top of the evaluation stack in the argument slot at a specified index.">Speichert den an der obersten Position des Auswertungsstapels befindlichen Wert im Argumentslot an einem angegebenen Index.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg_S">
      <summary vsli:raw="Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.">Speichert den an der obersten Position des Auswertungsstapels befindlichen Wert im Argumentslot an einem angegebenen Index, Kurzform.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem">
      <summary vsli:raw="Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.">Ersetzt das Arrayelement am angegebenen Index durch den Wert im Auswertungsstapel, dessen Typ in der Anweisung angegeben ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;native int&quot; /&gt; value on the evaluation stack.">Ersetzt das Arrayelement am angegebenen Index durch den <see langword="native int" />-Wert im Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I1">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;int8&quot; /&gt; value on the evaluation stack.">Ersetzt das Arrayelement am angegebenen Index durch den <see langword="int8" />-Wert im Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I2">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;int16&quot; /&gt; value on the evaluation stack.">Ersetzt das Arrayelement am angegebenen Index durch den <see langword="int16" />-Wert im Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I4">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;int32&quot; /&gt; value on the evaluation stack.">Ersetzt das Arrayelement am angegebenen Index durch den <see langword="int32" />-Wert im Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I8">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;int64&quot; /&gt; value on the evaluation stack.">Ersetzt das Arrayelement am angegebenen Index durch den <see langword="int64" />-Wert im Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R4">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;float32&quot; /&gt; value on the evaluation stack.">Ersetzt das Arrayelement am angegebenen Index durch den <see langword="float32" />-Wert im Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R8">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;float64&quot; /&gt; value on the evaluation stack.">Ersetzt das Arrayelement am angegebenen Index durch den <see langword="float64" />-Wert im Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_Ref">
      <summary vsli:raw="Replaces the array element at a given index with the object ref value (type &lt;see langword=&quot;O&quot; /&gt;) on the evaluation stack.">Ersetzt das Arrayelement am angegebenen Index durch den Wert des Objektverweises (Typ <see langword="O" />) im Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stfld">
      <summary vsli:raw="Replaces the value stored in the field of an object reference or pointer with a new value.">Ersetzt den im Feld eines Objektsverweises oder Zeigers gespeicherten Wert durch einen neuen Wert.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;native int&quot; /&gt; at a supplied address.">Speichert einen Wert vom Typ <see langword="native int" /> an einer angegebenen Adresse.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I1">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;int8&quot; /&gt; at a supplied address.">Speichert einen Wert vom Typ <see langword="int8" /> an einer angegebenen Adresse.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I2">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;int16&quot; /&gt; at a supplied address.">Speichert einen Wert vom Typ <see langword="int16" /> an einer angegebenen Adresse.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I4">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;int32&quot; /&gt; at a supplied address.">Speichert einen Wert vom Typ <see langword="int32" /> an einer angegebenen Adresse.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I8">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;int64&quot; /&gt; at a supplied address.">Speichert einen Wert vom Typ <see langword="int64" /> an einer angegebenen Adresse.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R4">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;float32&quot; /&gt; at a supplied address.">Speichert einen Wert vom Typ <see langword="float32" /> an einer angegebenen Adresse.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R8">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;float64&quot; /&gt; at a supplied address.">Speichert einen Wert vom Typ <see langword="float64" /> an einer angegebenen Adresse.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_Ref">
      <summary vsli:raw="Stores a object reference value at a supplied address.">Speichert einen Objektverweiswert an einer angegebenen Adresse.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at a specified index.">Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am angegebenen Index.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_0">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at index 0.">Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am Index 0.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_1">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at index 1.">Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am Index 1.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_2">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at index 2.">Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am Index 2.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_3">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at index 3.">Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am Index 3.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_S">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at &lt;paramref name=&quot;index&quot; /&gt; (short form).">Holt den aktuellen Wert von der obersten Position des Auswertungsstapels und speichert ihn in der Liste der lokalen Variablen am <paramref name="index" /> (Kurzform).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stobj">
      <summary vsli:raw="Copies a value of a specified type from the evaluation stack into a supplied memory address.">Kopiert einen Wert mit dem angegebenen Typ vom Auswertungsstapel in die angegebene Speicheradresse.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stsfld">
      <summary vsli:raw="Replaces the value of a static field with a value from the evaluation stack.">Ersetzt den Wert eines statischen Felds durch einen Wert vom Auswertungsstapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub">
      <summary vsli:raw="Subtracts one value from another and pushes the result onto the evaluation stack.">Subtrahiert einen Wert von einem anderen Wert und legt das Ergebnis auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf">
      <summary vsli:raw="Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.">Subtrahiert einen Ganzzahlwert von einem anderen Ganzzahlwert, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">
      <summary vsli:raw="Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.">Subtrahiert einen Ganzzahlwert ohne Vorzeichen von einem anderen Ganzzahlwert, führt eine Überlaufprüfung durch und legt das Ergebnis auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Switch">
      <summary vsli:raw="Implements a jump table.">Implementiert eine Sprungtabelle.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Tailcall">
      <summary vsli:raw="Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.">Führt eine Postfix-Methodenaufrufanweisung in der Weise aus, dass der Stapelrahmen der aktuellen Methode vor der Ausführung der eigentlichen Aufrufanweisung entfernt wird.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Throw">
      <summary vsli:raw="Throws the exception object currently on the evaluation stack.">Löst das Ausnahmeobjekt aus, das sich momentan auf dem Auswertungsstapel befindet.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unaligned">
      <summary vsli:raw="Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following &lt;see langword=&quot;ldind&quot; /&gt;, &lt;see langword=&quot;stind&quot; /&gt;, &lt;see langword=&quot;ldfld&quot; /&gt;, &lt;see langword=&quot;stfld&quot; /&gt;, &lt;see langword=&quot;ldobj&quot; /&gt;, &lt;see langword=&quot;stobj&quot; /&gt;, &lt;see langword=&quot;initblk&quot; /&gt;, or &lt;see langword=&quot;cpblk&quot; /&gt; instruction.">Gibt an, dass eine Adresse, die sich momentan oben auf dem Stapel befindet, möglicherweise nicht an der eigentlichen Größe der unmittelbar darauf folgenden <see langword="ldind" />-Anweisung, <see langword="stind" />-Anweisung, <see langword="ldfld" />-Anweisung, <see langword="stfld" />-Anweisung, <see langword="ldobj" />-Anweisung, <see langword="stobj" />-Anweisung, <see langword="initblk" />-Anweisung oder <see langword="cpblk" />-Anweisung ausgerichtet ist.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox">
      <summary vsli:raw="Converts the boxed representation of a value type to its unboxed form.">Konvertiert die Darstellung eines mittels Boxing gepackten Werttyps in seine mittels Unboxing entpackte Entsprechung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox_Any">
      <summary vsli:raw="Converts the boxed representation of a type specified in the instruction to its unboxed form.">Konvertiert die geschachtelte Darstellung eines n der Anweisung angegebenen Typs in seine nicht geschachtelte Form.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Volatile">
      <summary vsli:raw="Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.">Gibt an, dass es sich bei einer Adresse, die sich momentan oben auf dem Auswertungsstapel befindet, möglicherweise um eine flüchtige Adresse handelt und daher die aus diesem Speicherort gelesenen Ergebnisse nicht zwischengespeichert werden können oder mehrere für diesen Speicherort ausgeführte Speichervorgänge nicht unterdrückt werden können.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Xor">
      <summary vsli:raw="Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.">Berechnet das bitweise XOR der beidem auf dem Stapel an oberster Position befindlichen Werte und legt das Ergebnis auf dem Auswertungsstapel ab.</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Returns true or false if the supplied opcode takes a single byte argument.">Gibt TRUE oder FALSE zurück, wenn der bereitgestellte Opcode ein Einzelbyte-Argument akzeptiert.</summary>
      <param name="inst" vsli:raw="An instance of an Opcode object.">Eine Instanz eines eines Opcodeobjekts.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> oder <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodeType">
      <summary vsli:raw="Describes the types of the Microsoft intermediate language (MSIL) instructions.">Beschreibt die Typen der MSIL-Anweisungen (Microsoft Intermediate Language).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Annotation">
      <summary vsli:raw="This enumerator value is reserved and should not be used.">Dieser Enumeratorwert ist reserviert und sollte nicht verwendet werden.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Macro">
      <summary vsli:raw="These are Microsoft intermediate language (MSIL) instructions that are used as a synonym for other MSIL instructions. For example, &lt;see langword=&quot;ldarg.0&quot; /&gt; represents the &lt;see langword=&quot;ldarg&quot; /&gt; instruction with an argument of 0.">Es handelt sich um MSIL-Anweisungen (Microsoft Intermediate Language), die als Synonyme für andere MSIL-Anweisungen verwendet werden. Beispielsweise stellt <see langword="ldarg.0" /> die <see langword="ldarg" />-Anweisung mit einem Argument von 0 dar.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Nternal">
      <summary vsli:raw="Describes a reserved Microsoft intermediate language (MSIL) instruction.">Beschreibt eine reservierte MSIL-Anweisung (Microsoft Intermediate Language).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Objmodel">
      <summary vsli:raw="Describes a Microsoft intermediate language (MSIL) instruction that applies to objects.">Beschreibt eine MSIL-Anweisung (Microsoft Intermediate Language), die auf Objekte angewendet wird.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Prefix">
      <summary vsli:raw="Describes a prefix instruction that modifies the behavior of the following instruction.">Beschreibt eine Präfixanweisung, die das Verhalten der folgenden Anweisung verändert.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Primitive">
      <summary vsli:raw="Describes a built-in instruction.">Beschreibt eine integrierte Anweisung.</summary>
    </member>
    <member name="T:System.Reflection.Emit.OperandType">
      <summary vsli:raw="Describes the operand type of Microsoft intermediate language (MSIL) instruction.">Beschreibt den Operandentyp der MSIL-Anweisung (Microsoft Intermediate Language).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineBrTarget">
      <summary vsli:raw="The operand is a 32-bit integer branch target.">Der Operand ist ein Verzweigungsziel in Form einer 32-Bit-Ganzzahl.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineField">
      <summary vsli:raw="The operand is a 32-bit metadata token.">Der Operand ist ein 32-Bit-Metadatentoken.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI">
      <summary vsli:raw="The operand is a 32-bit integer.">Der Operand ist eine 32-Bit-Ganzzahl.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI8">
      <summary vsli:raw="The operand is a 64-bit integer.">Der Operand ist eine 64-Bit-Ganzzahl.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineMethod">
      <summary vsli:raw="The operand is a 32-bit metadata token.">Der Operand ist ein 32-Bit-Metadatentoken.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineNone">
      <summary vsli:raw="No operand.">Kein Operand.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlinePhi">
      <summary vsli:raw="The operand is reserved and should not be used.">Dieser Operand ist reserviert und sollte nicht verwendet werden.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineR">
      <summary vsli:raw="The operand is a 64-bit IEEE floating point number.">Der Operand ist eine 64-Bit-IEEE-Gleitkommazahl.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSig">
      <summary vsli:raw="The operand is a 32-bit metadata signature token.">Der Operand ist ein 32-Bit-Metadatensignaturtoken.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineString">
      <summary vsli:raw="The operand is a 32-bit metadata string token.">Der Operand ist ein 32-Bit-Metadatenzeichenfolgetoken.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSwitch">
      <summary vsli:raw="The operand is the 32-bit integer argument to a switch instruction.">Der Operand ist das 32-Bit-Ganzzahlargument zu einer switch-Anweisung.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineTok">
      <summary vsli:raw="The operand is a &lt;see langword=&quot;FieldRef&quot; /&gt;, &lt;see langword=&quot;MethodRef&quot; /&gt;, or &lt;see langword=&quot;TypeRef&quot; /&gt; token.">Der Operand ist ein <see langword="FieldRef" />-Token, ein <see langword="MethodRef" />-Token oder ein <see langword="TypeRef" />-Token.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineType">
      <summary vsli:raw="The operand is a 32-bit metadata token.">Der Operand ist ein 32-Bit-Metadatentoken.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineVar">
      <summary vsli:raw="The operand is 16-bit integer containing the ordinal of a local variable or an argument.">Der Operand ist eine 16-Bit-Ganzzahl mit der Ordnungszahl einer lokalen Variablen oder einem Argument.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineBrTarget">
      <summary vsli:raw="The operand is an 8-bit integer branch target.">Der Operand ist ein Verzweigungsziel in Form einer 8-Bit-Ganzzahl.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineI">
      <summary vsli:raw="The operand is an 8-bit integer.">Der Operand ist eine 8-Bit-Ganzzahl.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineR">
      <summary vsli:raw="The operand is a 32-bit IEEE floating point number.">Der Operand ist eine 32-Bit-IEEE-Gleitkommazahl.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineVar">
      <summary vsli:raw="The operand is an 8-bit integer containing the ordinal of a local variable or an argumenta.">Der Operand ist eine 8-Bit-Ganzzahl mit der Ordnungszahl einer lokalen Variablen oder einem Argument.</summary>
    </member>
    <member name="T:System.Reflection.Emit.PackingSize">
      <summary vsli:raw="Specifies one of two factors that determine the memory alignment of fields when a type is marshaled.">Gibt einen von zwei Faktoren an, welche die Speicherausrichtung von Feldern bestimmen, wenn ein Typ gemarshallt wird.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size1">
      <summary vsli:raw="The packing size is 1 byte.">Die Komprimierungsgröße ist 1 Byte.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size128">
      <summary vsli:raw="The packing size is 128 bytes.">Die Komprimierungsgröße ist 128 Bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size16">
      <summary vsli:raw="The packing size is 16 bytes.">Die Komprimierungsgröße ist 16 Bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size2">
      <summary vsli:raw="The packing size is 2 bytes.">Die Komprimierungsgröße ist 2 Bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size32">
      <summary vsli:raw="The packing size is 32 bytes.">Die Komprimierungsgröße ist 32 Bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size4">
      <summary vsli:raw="The packing size is 4 bytes.">Die Komprimierungsgröße ist 4 Bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size64">
      <summary vsli:raw="The packing size is 64 bytes.">Die Komprimierungsgröße ist 64 Bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size8">
      <summary vsli:raw="The packing size is 8 bytes.">Die Komprimierungsgröße ist 8 Bytes.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Unspecified">
      <summary vsli:raw="The packing size is not specified.">Die Komprimierungsgröße ist nicht angegeben.</summary>
    </member>
    <member name="T:System.Reflection.Emit.StackBehaviour">
      <summary vsli:raw="Describes how values are pushed onto a stack or popped off a stack.">Beschreibt, wie Werte auf einen Stapel gelegt bzw. von einem Stapel geholt werden.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop0">
      <summary vsli:raw="No values are popped off the stack.">Vom Stapel werden keine Werte geholt.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1">
      <summary vsli:raw="Pops one value off the stack.">Holt einen Wert vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1_pop1">
      <summary vsli:raw="Pops 1 value off the stack for the first operand, and 1 value of the stack for the second operand.">Holt einen Wert für den ersten Operanden und einen Wert für den zweiten Operanden vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi">
      <summary vsli:raw="Pops a 32-bit integer off the stack.">Holt eine 32-Bit-Ganzzahl vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_pop1">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a value off the stack for the second operand.">Holt eine 32-Bit-Ganzzahl für den ersten Operanden und einen Wert für den zweiten Operanden vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a 32-bit integer off the stack for the second operand.">Holt eine 32-Bit-Ganzzahl für den ersten Operanden und eine 32-Bit-Ganzzahl für den zweiten Operanden vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi_popi">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, a 32-bit integer off the stack for the second operand, and a 32-bit integer off the stack for the third operand.">Holt eine 32-Bit-Ganzzahl für den ersten Operanden, eine 32-Bit-Ganzzahl für den zweiten Operanden und eine 32-Bit-Ganzzahl für den dritten Operanden vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi8">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a 64-bit integer off the stack for the second operand.">Holt eine 32-Bit-Ganzzahl für den ersten Operanden und eine 64-Bit-Ganzzahl für den zweiten Operanden vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr4">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a 32-bit floating point number off the stack for the second operand.">Holt eine 32-Bit-Ganzzahl für den ersten Operanden und eine 32-Bit-Gleitkommazahl für den zweiten Operanden vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr8">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a 64-bit floating point number off the stack for the second operand.">Holt eine 32-Bit-Ganzzahl für den ersten Operanden und eine 64-Bit-Gleitkommazahl für den zweiten Operanden vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref">
      <summary vsli:raw="Pops a reference off the stack.">Holt einen Verweis vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_pop1">
      <summary vsli:raw="Pops a reference off the stack for the first operand, and a value off the stack for the second operand.">Holt einen Verweis für den ersten Operanden und einen Wert für den zweiten Operanden vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi">
      <summary vsli:raw="Pops a reference off the stack for the first operand, and a 32-bit integer off the stack for the second operand.">Holt einen Verweis für den ersten Operanden und eine 32-Bit-Ganzzahl für den zweiten Operanden vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_pop1">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.">Holt einen Verweis für den ersten Operanden, einen Wert für den zweiten Operanden und eine 32-Bit-Ganzzahl für den dritten Operanden vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a value off the stack for the third operand.">Holt einen Verweis für den ersten Operanden, einen Wert für den zweiten Operanden und einen Wert für den dritten Operanden vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi8">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit integer off the stack for the third operand.">Holt einen Verweis für den ersten Operanden, einen Wert für den zweiten Operanden und eine 64-Bit-Ganzzahl für den dritten Operanden vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr4">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.">Holt einen Verweis für den ersten Operanden, einen Wert für den zweiten Operanden und eine 32-Bit-Ganzzahl für den dritten Operanden vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr8">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit floating point number off the stack for the third operand.">Holt einen Verweis für den ersten Operanden, einen Wert für den zweiten Operanden und eine 64-Bit-Gleitkommazahl für den dritten Operanden vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popref">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a reference off the stack for the third operand.">Holt einen Verweis für den ersten Operanden, einen Wert für den zweiten Operanden und einen Verweis für den dritten Operanden vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push0">
      <summary vsli:raw="No values are pushed onto the stack.">Auf den Stapel werden keine Werte gelegt.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1">
      <summary vsli:raw="Pushes one value onto the stack.">Legt einen Wert auf den Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1_push1">
      <summary vsli:raw="Pushes 1 value onto the stack for the first operand, and 1 value onto the stack for the second operand.">Legt einen Wert für den ersten Operanden und einen Wert für den zweiten Operanden auf den Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi">
      <summary vsli:raw="Pushes a 32-bit integer onto the stack.">Legt eine 32-Bit-Ganzzahl auf den Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi8">
      <summary vsli:raw="Pushes a 64-bit integer onto the stack.">Legt eine 64-Bit-Ganzzahl auf den Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr4">
      <summary vsli:raw="Pushes a 32-bit floating point number onto the stack.">Legt eine 32-Bit-Gleitkommazahl  auf den Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr8">
      <summary vsli:raw="Pushes a 64-bit floating point number onto the stack.">Legt eine 64-Bit-Gleitkommazahl auf den Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushref">
      <summary vsli:raw="Pushes a reference onto the stack.">Legt einen Verweis auf den Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpop">
      <summary vsli:raw="Pops a variable off the stack.">Holt eine Variable vom Stapel.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpush">
      <summary vsli:raw="Pushes a variable onto the stack.">Legt eine Variable auf den Stapel.</summary>
    </member>
  </members>
</doc>
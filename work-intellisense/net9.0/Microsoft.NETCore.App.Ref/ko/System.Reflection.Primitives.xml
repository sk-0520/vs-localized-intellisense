<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Primitives</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.FlowControl">
      <summary vsli:raw="Describes how an instruction alters the flow of control.">명령이 제어 흐름을 변경하는 방법을 설명합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Branch">
      <summary vsli:raw="Branch instruction.">분기 명령입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Break">
      <summary vsli:raw="Break instruction.">중단 명령입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Call">
      <summary vsli:raw="Call instruction.">호출 명령입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Cond_Branch">
      <summary vsli:raw="Conditional branch instruction.">조건부 분기 명령입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Meta">
      <summary vsli:raw="Provides information about a subsequent instruction. For example, the &lt;see langword=&quot;Unaligned&quot; /&gt; instruction of &lt;see langword=&quot;Reflection.Emit.Opcodes&quot; /&gt; has &lt;see langword=&quot;FlowControl.Meta&quot; /&gt; and specifies that the subsequent pointer instruction might be unaligned.">다음 명령에 대한 정보를 제공합니다. 예를 들어 <see langword="Unaligned" />의 <see langword="Reflection.Emit.Opcodes" /> 명령에는 <see langword="FlowControl.Meta" />가 포함되어 있고, 이것은 다음 포인터 명령이 정렬되지 않을 수 있다는 것을 지정합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Next">
      <summary vsli:raw="Normal flow of control.">일반적인 제어 흐름입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Phi">
      <summary vsli:raw="This enumerator value is reserved and should not be used.">이 열거자 값은 예약되었으므로 사용하지 않아야 합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Return">
      <summary vsli:raw="Return instruction.">반환 명령입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Throw">
      <summary vsli:raw="Exception throw instruction.">예외 throw 명령입니다.</summary>
    </member>
    <member name="T:System.Reflection.Emit.OpCode">
      <summary vsli:raw="Describes an intermediate language (IL) instruction.">IL(중간 언어) 명령을 설명합니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Object)">
      <summary vsli:raw="Tests whether the given object is equal to this &lt;see langword=&quot;Opcode&quot; /&gt;.">지정된 개체가 이 <see langword="Opcode" />와 같은지 여부를 검사합니다.</summary>
      <param name="obj" vsli:raw="The object to compare to this object.">이 개체와 비교할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;Opcode&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" />가 <see langword="true" />의 인스턴스이고 해당 개체와 같으면 <see langword="Opcode" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Indicates whether the current instance is equal to the specified &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt;.">현재 인스턴스와 지정된 <see cref="T:System.Reflection.Emit.OpCode" />이 같은지 여부를 나타냅니다.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to the current instance.">현재 인스턴스와 비교할 <see cref="T:System.Reflection.Emit.OpCode" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;obj&quot; /&gt; is equal to the value of the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" />의 값이 현재 인스턴스의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.GetHashCode">
      <summary vsli:raw="Returns the generated hash code for this &lt;see langword=&quot;Opcode&quot; /&gt;.">이 <see langword="Opcode" />의 생성된 해시 코드를 반환합니다.</summary>
      <returns vsli:raw="The hash code for this instance.">이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; structures are equal.">두 개의 <see cref="T:System.Reflection.Emit.OpCode" /> 구조체가 같은지 여부를 나타냅니다.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">
        <paramref name="b" />와 비교할 <see cref="T:System.Reflection.Emit.OpCode" />입니다.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">
        <paramref name="a" />와 비교할 <see cref="T:System.Reflection.Emit.OpCode" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="a" />와 같으면 <paramref name="b" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; structures are not equal.">두 개의 <see cref="T:System.Reflection.Emit.OpCode" /> 구조체가 같지 않은지 여부를 나타냅니다.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">
        <paramref name="b" />와 비교할 <see cref="T:System.Reflection.Emit.OpCode" />입니다.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">
        <paramref name="a" />와 비교할 <see cref="T:System.Reflection.Emit.OpCode" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is not equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 <paramref name="a" />와 다르면 <paramref name="b" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.ToString">
      <summary vsli:raw="Returns this &lt;see langword=&quot;Opcode&quot; /&gt; as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">이 <see langword="Opcode" />를 <see cref="T:System.String" />으로 반환합니다.</summary>
      <returns vsli:raw="A string containing the name of this &lt;see langword=&quot;Opcode&quot; /&gt;.">이 <see langword="Opcode" />의 이름이 들어 있는 문자열입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.FlowControl">
      <summary vsli:raw="The flow control characteristics of the intermediate language (IL) instruction.">IL(중간 언어) 명령의 흐름 제어 특성입니다.</summary>
      <returns vsli:raw="Read-only. The type of flow control.">읽기 전용입니다. 흐름 제어의 형식입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Name">
      <summary vsli:raw="The name of the intermediate language (IL) instruction.">IL(중간 언어) 명령의 이름입니다.</summary>
      <returns vsli:raw="Read-only. The name of the IL instruction.">읽기 전용입니다. IL 명령의 이름입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OpCodeType">
      <summary vsli:raw="The type of intermediate language (IL) instruction.">IL(중간 언어) 명령의 형식입니다.</summary>
      <returns vsli:raw="Read-only. The type of intermediate language (IL) instruction.">읽기 전용입니다. IL(중간 언어) 명령의 형식입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OperandType">
      <summary vsli:raw="The operand type of an intermediate language (IL) instruction.">IL(중간 언어) 명령의 피연산자 형식입니다.</summary>
      <returns vsli:raw="Read-only. The operand type of an IL instruction.">읽기 전용입니다. IL 명령의 피연산자 형식입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Size">
      <summary vsli:raw="The size of the intermediate language (IL) instruction.">IL(중간 언어) 명령의 크기입니다.</summary>
      <returns vsli:raw="Read-only. The size of the IL instruction.">읽기 전용입니다. IL 명령의 크기입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPop">
      <summary vsli:raw="How the intermediate language (IL) instruction pops the stack.">IL(중간 언어) 명령에서 스택을 팝하는 방법입니다.</summary>
      <returns vsli:raw="Read-only. The way the IL instruction pops the stack.">읽기 전용입니다. IL 명령에서 스택을 팝 하는 방법입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPush">
      <summary vsli:raw="How the intermediate language (IL) instruction pushes operand onto the stack.">IL(중간 언어) 명령에서 스택에 피연산자를 푸시하는 방법입니다.</summary>
      <returns vsli:raw="Read-only. The way the IL instruction pushes operand onto the stack.">읽기 전용입니다. IL 명령에서 스택에 피연산자를 푸시하는 방법입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Value">
      <summary vsli:raw="Gets the numeric value of the intermediate language (IL) instruction.">IL(중간 언어) 명령의 숫자 값을 가져옵니다.</summary>
      <returns vsli:raw="Read-only. The numeric value of the IL instruction.">읽기 전용입니다. IL 명령의 숫자 값입니다.</returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodes">
      <summary vsli:raw="Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; class members (such as &lt;see cref=&quot;M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)&quot; /&gt;).">
        <see cref="T:System.Reflection.Emit.ILGenerator" /> 같은 <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" /> 클래스 멤버를 사용한 내보내기 작업에 사용되는 MSIL(Microsoft Intermediate Language) 명령의 필드 표현을 제공합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add">
      <summary vsli:raw="Adds two values and pushes the result onto the evaluation stack.">두 개 값을 더하여 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf">
      <summary vsli:raw="Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.">두 정수를 더하고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">
      <summary vsli:raw="Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.">부호 없는 두 정수 값을 더하고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.And">
      <summary vsli:raw="Computes the bitwise AND of two values and pushes the result onto the evaluation stack.">두 값의 비트 AND를 계산하여 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Arglist">
      <summary vsli:raw="Returns an unmanaged pointer to the argument list of the current method.">현재 메서드의 인수 목록에 대한 관리되지 않는 포인터를 반환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq">
      <summary vsli:raw="Transfers control to a target instruction if two values are equal.">두 값이 같으면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if two values are equal.">두 값이 같으면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge">
      <summary vsli:raw="Transfers control to a target instruction if the first value is greater than or equal to the second value.">첫째 값이 둘째 값보다 크거나 같으면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.">첫째 값이 둘째 값보다 크거나 같으면 대상 명령(약식)으로 제어를 전달합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un">
      <summary vsli:raw="Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.">부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 크면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.">부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 크면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt">
      <summary vsli:raw="Transfers control to a target instruction if the first value is greater than the second value.">첫째 값이 둘째 값보다 크면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is greater than the second value.">첫째 값이 둘째 값보다 크면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un">
      <summary vsli:raw="Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.">부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 크면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.">부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 크면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble">
      <summary vsli:raw="Transfers control to a target instruction if the first value is less than or equal to the second value.">첫째 값이 둘째 값보다 작거나 같으면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.">첫째 값이 둘째 값보다 작거나 같으면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un">
      <summary vsli:raw="Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.">부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 작거나 같으면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.">부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 작거나 같으면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt">
      <summary vsli:raw="Transfers control to a target instruction if the first value is less than the second value.">첫째 값이 둘째 값보다 작으면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is less than the second value.">첫째 값이 둘째 값보다 작으면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un">
      <summary vsli:raw="Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.">부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 작으면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.">부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 작으면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un">
      <summary vsli:raw="Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.">두 개의 부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값이 서로 다르면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.">두 개의 부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값이 서로 다르면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Box">
      <summary vsli:raw="Converts a value type to an object reference (type &lt;see langword=&quot;O&quot; /&gt;).">값 형식을 개체 참조(<see langword="O" /> 형식)로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br">
      <summary vsli:raw="Unconditionally transfers control to a target instruction.">조건에 상관 없이 대상 명령으로 제어를 전달합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br_S">
      <summary vsli:raw="Unconditionally transfers control to a target instruction (short form).">조건에 상관 없이 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Break">
      <summary vsli:raw="Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.">중단점이 설정되었음을 디버거에 알리기 위해 CLI(공용 언어 인프라)에 신호를 보냅니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse">
      <summary vsli:raw="Transfers control to a target instruction if &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;, a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic), or zero.">
        <paramref name="value" />가 <see langword="false" />, null 참조(Visual Basic에서는 <see langword="Nothing" />) 또는 0인 경우 대상 명령으로 제어를 전달합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse_S">
      <summary vsli:raw="Transfers control to a target instruction if &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;, a null reference, or zero.">
        <paramref name="value" />가 <see langword="false" />, null 참조 또는 0인 경우 대상 명령으로 제어를 전달합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue">
      <summary vsli:raw="Transfers control to a target instruction if &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, not null, or non-zero.">
        <paramref name="value" />가 <see langword="true" />이거나 null이 아니거나 0이 아닌 경우 대상 명령으로 제어를 전달합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, not null, or non-zero.">
        <paramref name="value" />가 <see langword="true" />이거나 null이 아니거나 0이 아닌 경우 대상 명령(약식)으로 제어를 전달합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Call">
      <summary vsli:raw="Calls the method indicated by the passed method descriptor.">전송된 메서드 설명자가 나타내는 메서드를 호출합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Calli">
      <summary vsli:raw="Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.">호출 규칙에서 설명하는 인수를 사용하여 계산 스택에 표시된 메서드를 진입점에 대한 포인터로 호출합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Callvirt">
      <summary vsli:raw="Calls a late-bound method on an object, pushing the return value onto the evaluation stack.">개체에서 런타임에 바인딩된 메서드를 호출하고 반환 값을 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Castclass">
      <summary vsli:raw="Attempts to cast an object passed by reference to the specified class.">참조로 전송된 개체를 지정된 클래스로 캐스팅하려고 합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ceq">
      <summary vsli:raw="Compares two values. If they are equal, the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">두 값을 비교합니다. 두 값이 같으면 정수 값 1(<see langword="(int32" />)이 계산 스택으로 푸시되고, 그렇지 않으면 0(<see langword="int32" />)이 계산 스택으로 푸시됩니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt">
      <summary vsli:raw="Compares two values. If the first value is greater than the second, the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">두 값을 비교합니다. 첫째 값이 둘째 값보다 크면 정수 값 1(<see langword="(int32" />)이 계산 스택으로 푸시되고, 그렇지 않으면 0(<see langword="int32" />)이 계산 스택으로 푸시됩니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt_Un">
      <summary vsli:raw="Compares two unsigned or unordered values. If the first value is greater than the second, the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">부호가 없거나 순서가 없는 두 값을 비교합니다. 첫째 값이 둘째 값보다 크면 정수 값 1(<see langword="(int32" />)이 계산 스택으로 푸시되고, 그렇지 않으면 0(<see langword="int32" />)이 계산 스택으로 푸시됩니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ckfinite">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.ArithmeticException&quot; /&gt; if value is not a finite number.">값이 유한 값이 아니면 <see cref="T:System.ArithmeticException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt">
      <summary vsli:raw="Compares two values. If the first value is less than the second, the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">두 값을 비교합니다. 첫째 값이 둘째 값보다 작으면 정수 값 1(<see langword="(int32" />)이 계산 스택으로 푸시되고, 그렇지 않으면 0(<see langword="int32" />)이 계산 스택으로 푸시됩니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt_Un">
      <summary vsli:raw="Compares the unsigned or unordered values &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt;. If &lt;paramref name=&quot;value1&quot; /&gt; is less than &lt;paramref name=&quot;value2&quot; /&gt;, then the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">부호가 없거나 순서가 없는 <paramref name="value1" />과 <paramref name="value2" />를 비교합니다. <paramref name="value1" />이 <paramref name="value2" />보다 작으면 정수 값 1(<see langword="(int32" />)이 계산 스택으로 푸시되고, 그렇지 않으면 0(<see langword="int32" />)이 계산 스택으로 푸시됩니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Constrained">
      <summary vsli:raw="Constrains the type on which a virtual method call is made.">가상 메서드가 호출되는 형식을 제한합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;native int&quot; /&gt;.">계산 스택 맨 위에 있는 값을 <see langword="native int" />로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I1">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;int8&quot; /&gt;, then extends (pads) it to &lt;see langword=&quot;int32&quot; /&gt;.">계산 스택 맨 위에 있는 값을 <see langword="int8" />으로 변환하여 <see langword="int32" />로 확장합니다(채웁니다).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I2">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;int16&quot; /&gt;, then extends (pads) it to &lt;see langword=&quot;int32&quot; /&gt;.">계산 스택 맨 위에 있는 값을 <see langword="int16" />으로 변환하여 <see langword="int32" />로 확장합니다(채웁니다).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I4">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;int32&quot; /&gt;.">계산 스택 맨 위에 있는 값을 <see langword="int32" />로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I8">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;int64&quot; /&gt;.">계산 스택 맨 위에 있는 값을 <see langword="int64" />로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;native int&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 있는 값을 부호 있는 <see langword="native int" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" /> 을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;native int&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 없는 값을 부호 있는 <see langword="native int" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;int8&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 있는 값을 부호 있는 <see langword="int8" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;int8&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 없는 값을 부호 있는 <see langword="int8" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;int16&quot; /&gt; and extending it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 있는 값을 부호 있는 <see langword="int16" />으로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;int16&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 없는 값을 부호 있는 <see langword="int16" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 있는 값을 부호 있는 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" /> 을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 없는 값을 부호 있는 <see langword="int32" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;int64&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 있는 값을 부호 있는 <see langword="int64" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" /> 을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;int64&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 없는 값을 부호 있는 <see langword="int64" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned native int&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 있는 값을 <see langword="unsigned native int" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned native int&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 없는 값을 <see langword="unsigned native int" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned int8&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 있는 값을 <see langword="unsigned int8" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned int8&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 없는 값을 <see langword="unsigned int8" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned int16&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 있는 값을 <see langword="unsigned int16" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned int16&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 없는 값을 <see langword="unsigned int16" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 있는 값을 <see langword="unsigned int32" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 없는 값을 <see langword="unsigned int32" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned int64&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 있는 값을 <see langword="unsigned int64" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned int64&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">계산 스택 맨 위에 있는 부호 없는 값을 <see langword="unsigned int64" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R_Un">
      <summary vsli:raw="Converts the unsigned integer value on top of the evaluation stack to &lt;see langword=&quot;float32&quot; /&gt;.">계산 스택 맨 위에 있는 부호 없는 정수 값을 <see langword="float32" />로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R4">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;float32&quot; /&gt;.">계산 스택 맨 위에 있는 값을 <see langword="float32" />로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R8">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;float64&quot; /&gt;.">계산 스택 맨 위에 있는 값을 <see langword="float64" />로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned native int&quot; /&gt;, and extends it to &lt;see langword=&quot;native int&quot; /&gt;.">계산 스택 맨 위에 있는 값을 <see langword="unsigned native int" />로 변환하고 <see langword="native int" />로 확장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U1">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned int8&quot; /&gt;, and extends it to &lt;see langword=&quot;int32&quot; /&gt;.">계산 스택 맨 위에 있는 값을 <see langword="unsigned int8" />로 변환하고 <see langword="int32" />로 확장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U2">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned int16&quot; /&gt;, and extends it to &lt;see langword=&quot;int32&quot; /&gt;.">계산 스택 맨 위에 있는 값을 <see langword="unsigned int16" />로 변환하고 <see langword="int32" />로 확장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U4">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned int32&quot; /&gt;, and extends it to &lt;see langword=&quot;int32&quot; /&gt;.">계산 스택 맨 위에 있는 값을 <see langword="unsigned int32" />로 변환하고 <see langword="int32" />로 확장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U8">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned int64&quot; /&gt;, and extends it to &lt;see langword=&quot;int64&quot; /&gt;.">계산 스택 맨 위에 있는 값을 <see langword="unsigned int64" />로 변환하고 <see langword="int64" />로 확장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpblk">
      <summary vsli:raw="Copies a specified number bytes from a source address to a destination address.">지정된 수의 바이트를 소스 주소에서 대상 주소로 복사합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpobj">
      <summary vsli:raw="Copies the value type located at the address of an object (type &lt;see langword=&quot;&amp;amp;&quot; /&gt;, &lt;see langword=&quot;*&quot; /&gt; or &lt;see langword=&quot;native int&quot; /&gt;) to the address of the destination object (type &lt;see langword=&quot;&amp;amp;&quot; /&gt;, &lt;see langword=&quot;*&quot; /&gt; or &lt;see langword=&quot;native int&quot; /&gt;).">개체(<see langword="&amp;" />, <see langword="*" /> 또는 <see langword="native int" /> 형식)의 주소에 있는 값 형식을 대상 개체(<see langword="&amp;" />, <see langword="*" /> 또는 <see langword="native int" /> 형식)의 주소로 복사합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div">
      <summary vsli:raw="Divides two values and pushes the result as a floating-point (type &lt;see langword=&quot;F&quot; /&gt;) or quotient (type &lt;see langword=&quot;int32&quot; /&gt;) onto the evaluation stack.">두 값을 나누고 결과를 부동 소수점(<see langword="F" /> 형식)이나 몫(<see langword="int32" /> 형식)으로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div_Un">
      <summary vsli:raw="Divides two unsigned integer values and pushes the result (&lt;see langword=&quot;int32&quot; /&gt;) onto the evaluation stack.">두 개의 부호 없는 정수를 나누고 결과(<see langword="int32" />)를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Dup">
      <summary vsli:raw="Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.">현재 계산 스택 맨 위에 있는 값을 복사하여 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfilter">
      <summary vsli:raw="Transfers control from the &lt;see langword=&quot;filter&quot; /&gt; clause of an exception back to the Common Language Infrastructure (CLI) exception handler.">예외의 <see langword="filter" /> 절에서 CLI(공용 언어 인프라) 예외 처리기로 다시 제어를 전달합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfinally">
      <summary vsli:raw="Transfers control from the &lt;see langword=&quot;fault&quot; /&gt; or &lt;see langword=&quot;finally&quot; /&gt; clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.">예외 블록의 <see langword="fault" /> 절이나 <see langword="finally" /> 절에서 CLI(공용 언어 인프라) 예외 처리기로 다시 제어를 전달합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initblk">
      <summary vsli:raw="Initializes a specified block of memory at a specific address to a given size and initial value.">특정 주소에 지정된 메모리 블록을 주어진 크기와 초기 값으로 초기화합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initobj">
      <summary vsli:raw="Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.">지정된 주소에서 값 형식의 각 필드를 null 참조 또는 적절한 기본 형식의 0으로 초기화합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Isinst">
      <summary vsli:raw="Tests whether an object reference (type &lt;see langword=&quot;O&quot; /&gt;) is an instance of a particular class.">개체 참조(<see langword="O" /> 형식)가 특정 클래스의 인스턴스인지 여부를 테스트합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Jmp">
      <summary vsli:raw="Exits current method and jumps to specified method.">현재 메서드를 종료하고 지정된 메서드로 점프합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg">
      <summary vsli:raw="Loads an argument (referenced by a specified index value) onto the stack.">지정된 인덱스 값이 참조하는 인수를 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_0">
      <summary vsli:raw="Loads the argument at index 0 onto the evaluation stack.">인덱스 0에 있는 인수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_1">
      <summary vsli:raw="Loads the argument at index 1 onto the evaluation stack.">인덱스 1에 있는 인수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_2">
      <summary vsli:raw="Loads the argument at index 2 onto the evaluation stack.">인덱스 2에 있는 인수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_3">
      <summary vsli:raw="Loads the argument at index 3 onto the evaluation stack.">인덱스 3에 있는 인수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_S">
      <summary vsli:raw="Loads the argument (referenced by a specified short form index) onto the evaluation stack.">지정된 약식 인덱스가 참조하는 인수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga">
      <summary vsli:raw="Load an argument address onto the evaluation stack.">인수 주소를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga_S">
      <summary vsli:raw="Load an argument address, in short form, onto the evaluation stack.">인수 주소를 계산 스택에 약식으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4">
      <summary vsli:raw="Pushes a supplied value of type &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">
        <see langword="int32" /> 형식의 주어진 값을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">
      <summary vsli:raw="Pushes the integer value of 0 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">정수 값 0을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">
      <summary vsli:raw="Pushes the integer value of 1 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">정수 값 1을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">
      <summary vsli:raw="Pushes the integer value of 2 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">정수 값 2를 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">
      <summary vsli:raw="Pushes the integer value of 3 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">정수 값 3을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">
      <summary vsli:raw="Pushes the integer value of 4 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">정수 값 4를 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">
      <summary vsli:raw="Pushes the integer value of 5 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">정수 값 5를 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">
      <summary vsli:raw="Pushes the integer value of 6 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">정수 값 6을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">
      <summary vsli:raw="Pushes the integer value of 7 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">정수 값 7을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">
      <summary vsli:raw="Pushes the integer value of 8 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">정수 값 8을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">
      <summary vsli:raw="Pushes the integer value of -1 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">정수 값 -1을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">
      <summary vsli:raw="Pushes the supplied &lt;see langword=&quot;int8&quot; /&gt; value onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;, short form.">주어진 <see langword="int8" /> 값을 약식인 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I8">
      <summary vsli:raw="Pushes a supplied value of type &lt;see langword=&quot;int64&quot; /&gt; onto the evaluation stack as an &lt;see langword=&quot;int64&quot; /&gt;.">
        <see langword="int64" /> 형식의 주어진 값을 <see langword="int64" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R4">
      <summary vsli:raw="Pushes a supplied value of type &lt;see langword=&quot;float32&quot; /&gt; onto the evaluation stack as type &lt;see langword=&quot;F&quot; /&gt; (float).">
        <see langword="float32" /> 형식의 주어진 값을 <see langword="F" /> 형식(부동 소수점)으로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R8">
      <summary vsli:raw="Pushes a supplied value of type &lt;see langword=&quot;float64&quot; /&gt; onto the evaluation stack as type &lt;see langword=&quot;F&quot; /&gt; (float).">
        <see langword="float64" /> 형식의 주어진 값을 <see langword="F" /> 형식(부동 소수점)으로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem">
      <summary vsli:raw="Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.">지정된 배열 인덱스에 있는 요소를 이 명령에 지정된 형식으로 계산 스택 맨 위에 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;native int&quot; /&gt; at a specified array index onto the top of the evaluation stack as a &lt;see langword=&quot;native int&quot; /&gt;.">지정된 배열 인덱스에서 <see langword="native int" /> 형식을 갖는 요소를 계산 스택 위에 <see langword="native int" />로서 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I1">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;int8&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">지정된 배열 인덱스의 <see langword="int8" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I2">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;int16&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">지정된 배열 인덱스의 <see langword="int16" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I4">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;int32&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">지정된 배열 인덱스의 <see langword="int32" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I8">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;int64&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int64&quot; /&gt;.">지정된 배열 인덱스의 <see langword="int64" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int64" />로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R4">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;float32&quot; /&gt; at a specified array index onto the top of the evaluation stack as type &lt;see langword=&quot;F&quot; /&gt; (float).">지정된 배열 인덱스에서 <see langword="float32" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="F" />형식(부동 소수점)으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R8">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;float64&quot; /&gt; at a specified array index onto the top of the evaluation stack as type &lt;see langword=&quot;F&quot; /&gt; (float).">지정된 배열 인덱스에서 <see langword="float64" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="F" />형식(부동 소수점)으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">
      <summary vsli:raw="Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type &lt;see langword=&quot;O&quot; /&gt; (object reference).">지정된 배열 인덱스에서 개체 참조를 포함하는 요소를 <see langword="O" /> 형식(개체 참조)으로 계산 스택 맨 위에 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U1">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;unsigned int8&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">지정된 배열 인덱스의 <see langword="unsigned int8" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U2">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;unsigned int16&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">지정된 배열 인덱스의 <see langword="unsigned int16" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U4">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;unsigned int32&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">지정된 배열 인덱스의 <see langword="unsigned int32" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelema">
      <summary vsli:raw="Loads the address of the array element at a specified array index onto the top of the evaluation stack as type &lt;see langword=&quot;&amp;amp;&quot; /&gt; (managed pointer).">지정된 배열 인덱스에 있는 배열 요소의 주소를 <see langword="&amp;" /> 형식(관리되는 포인터)으로 계산 스택 맨 위에 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldfld">
      <summary vsli:raw="Finds the value of a field in the object whose reference is currently on the evaluation stack.">현재 계산 스택에 참조가 있는 개체에서 필드의 값을 찾습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldflda">
      <summary vsli:raw="Finds the address of a field in the object whose reference is currently on the evaluation stack.">현재 계산 스택에 참조가 있는 개체에서 필드의 주소를 찾습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldftn">
      <summary vsli:raw="Pushes an unmanaged pointer (type &lt;see langword=&quot;native int&quot; /&gt;) to the native code implementing a specific method onto the evaluation stack.">특정 메서드를 구현하는 네이티브 코드에 대한 관리되지 않는 포인터(<see langword="native int" /> 형식)를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;native int&quot; /&gt; as a &lt;see langword=&quot;native int&quot; /&gt; onto the evaluation stack indirectly.">
        <see langword="native int" /> 형식의 값을 <see langword="native int" /> 형식으로 계산 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I1">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;int8&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">
        <see langword="int8" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I2">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;int16&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">
        <see langword="int16" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I4">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;int32&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">
        <see langword="int32" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I8">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;int64&quot; /&gt; as an &lt;see langword=&quot;int64&quot; /&gt; onto the evaluation stack indirectly.">
        <see langword="int64" /> 형식의 값을 <see langword="int64" />로 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R4">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;float32&quot; /&gt; as a type &lt;see langword=&quot;F&quot; /&gt; (float) onto the evaluation stack indirectly.">
        <see langword="float32" /> 형식의 값을 <see langword="F" /> 형식(부동 소수점)으로 계산 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R8">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;float64&quot; /&gt; as a type &lt;see langword=&quot;F&quot; /&gt; (float) onto the evaluation stack indirectly.">
        <see langword="float64" /> 형식의 값을 <see langword="F" /> 형식(부동 소수점)으로 계산 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_Ref">
      <summary vsli:raw="Loads an object reference as a type &lt;see langword=&quot;O&quot; /&gt; (object reference) onto the evaluation stack indirectly.">개체 참조를 <see langword="O" /> 형식(개체 참조)으로 계산 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U1">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;unsigned int8&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">
        <see langword="unsigned int8" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U2">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;unsigned int16&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">
        <see langword="unsigned int16" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U4">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;unsigned int32&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">
        <see langword="unsigned int32" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldlen">
      <summary vsli:raw="Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.">0부터 시작하는 1차원 배열의 요소 수를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc">
      <summary vsli:raw="Loads the local variable at a specific index onto the evaluation stack.">특정 인덱스에 있는 지역 변수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_0">
      <summary vsli:raw="Loads the local variable at index 0 onto the evaluation stack.">인덱스 0의 지역 변수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_1">
      <summary vsli:raw="Loads the local variable at index 1 onto the evaluation stack.">인덱스 1의 지역 변수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_2">
      <summary vsli:raw="Loads the local variable at index 2 onto the evaluation stack.">인덱스 2의 지역 변수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_3">
      <summary vsli:raw="Loads the local variable at index 3 onto the evaluation stack.">인덱스 3의 지역 변수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_S">
      <summary vsli:raw="Loads the local variable at a specific index onto the evaluation stack, short form.">특정 인덱스에 있는 지역 변수를 계산 스택에 약식으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca">
      <summary vsli:raw="Loads the address of the local variable at a specific index onto the evaluation stack.">특정 인덱스에 있는 지역 변수의 주소를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca_S">
      <summary vsli:raw="Loads the address of the local variable at a specific index onto the evaluation stack, short form.">특정 인덱스에 있는 지역 변수의 주소를 계산 스택에 약식으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldnull">
      <summary vsli:raw="Pushes a null reference (type &lt;see langword=&quot;O&quot; /&gt;) onto the evaluation stack.">null 참조(<see langword="O" /> 형식)를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldobj">
      <summary vsli:raw="Copies the value type object pointed to by an address to the top of the evaluation stack.">주소가 가리키는 값 형식 개체를 계산 스택 맨 위로 복사합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsfld">
      <summary vsli:raw="Pushes the value of a static field onto the evaluation stack.">정적 필드의 값을 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsflda">
      <summary vsli:raw="Pushes the address of a static field onto the evaluation stack.">정적 필드의 주소를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldstr">
      <summary vsli:raw="Pushes a new object reference to a string literal stored in the metadata.">새 개체 참조를 메타데이터에 저장된 문자열 리터럴로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldtoken">
      <summary vsli:raw="Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.">메타데이터 토큰을 런타임 표현으로 변환하여 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldvirtftn">
      <summary vsli:raw="Pushes an unmanaged pointer (type &lt;see langword=&quot;native int&quot; /&gt;) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.">지정된 개체와 관련된 특정 가상 메서드를 구현하는 네이티브 코드에 대한 관리되지 않는 포인터(<see langword="native int" /> 형식)를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave">
      <summary vsli:raw="Exits a protected region of code, unconditionally transferring control to a specific target instruction.">조건에 관계없이 특정 대상 명령으로 제어를 전송하여 보호되는 코드 영역을 끝냅니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave_S">
      <summary vsli:raw="Exits a protected region of code, unconditionally transferring control to a target instruction (short form).">조건에 관계없이 대상 명령(약식)으로 제어를 전달하여 보호되는 코드 영역을 끝냅니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Localloc">
      <summary vsli:raw="Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type &lt;see langword=&quot;*&quot; /&gt;) of the first allocated byte onto the evaluation stack.">로컬 동적 메모리 풀에서 특정 바이트 수를 할당하고 처음 할당된 바이트의 주소(임시 포인터, <see langword="*" /> 형식)를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mkrefany">
      <summary vsli:raw="Pushes a typed reference to an instance of a specific type onto the evaluation stack.">특정 형식의 인스턴스에 대한 형식화된 참조를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul">
      <summary vsli:raw="Multiplies two values and pushes the result on the evaluation stack.">두 값을 곱하여 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf">
      <summary vsli:raw="Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.">두 정수 값을 곱하고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">
      <summary vsli:raw="Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.">부호 없는 두 정수 값을 곱하고 오버플로를 검사한 후 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Neg">
      <summary vsli:raw="Negates a value and pushes the result onto the evaluation stack.">값을 음수로 만들고 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newarr">
      <summary vsli:raw="Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.">0부터 시작하고 요소가 특정 형식인 새 1차원 배열에 대한 개체 참조를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newobj">
      <summary vsli:raw="Creates a new object or a new instance of a value type, pushing an object reference (type &lt;see langword=&quot;O&quot; /&gt;) onto the evaluation stack.">개체 참조(<see langword="O" /> 형식)를 계산 스택으로 푸시하여 값 형식의 새 개체나 새 인스턴스를 만듭니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Nop">
      <summary vsli:raw="Fills space if opcodes are patched. No meaningful operation is performed although a processing cycle can be consumed.">opcode가 패치되면 공간을 채웁니다. 처리 사이클이 사용되더라도 의미 있는 연산이 수행되지 않습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Not">
      <summary vsli:raw="Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.">스택 맨 위에 있는 정수 값의 비트 보수를 계산하고 결과를 같은 형식으로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Or">
      <summary vsli:raw="Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.">스택 맨 위에 있는 두 정수 값의 비트 보수를 계산하고 결과를 컴퓨팅 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Pop">
      <summary vsli:raw="Removes the value currently on top of the evaluation stack.">현재 계산 스택 맨 위에 있는 값을 제거합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix1">
      <summary vsli:raw="This is a reserved instruction.">이 명령은 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix2">
      <summary vsli:raw="This is a reserved instruction.">이 명령은 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix3">
      <summary vsli:raw="This is a reserved instruction.">이 명령은 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix4">
      <summary vsli:raw="This is a reserved instruction.">이 명령은 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix5">
      <summary vsli:raw="This is a reserved instruction.">이 명령은 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix6">
      <summary vsli:raw="This is a reserved instruction.">이 명령은 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix7">
      <summary vsli:raw="This is a reserved instruction.">이 명령은 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefixref">
      <summary vsli:raw="This is a reserved instruction.">이 명령은 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Readonly">
      <summary vsli:raw="Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.">후속 배열 주소 연산에서 런타임에 형식 검사를 수행하지 않고 가변성이 제한된 관리되는 포인터를 반환하도록 지정합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanytype">
      <summary vsli:raw="Retrieves the type token embedded in a typed reference.">형식화된 참조에 포함된 형식 토큰을 가져옵니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanyval">
      <summary vsli:raw="Retrieves the address (type &lt;see langword=&quot;&amp;amp;&quot; /&gt;) embedded in a typed reference.">형식화된 참조에 포함된 주소(<see langword="&amp;" /> 형식)를 검색합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem">
      <summary vsli:raw="Divides two values and pushes the remainder onto the evaluation stack.">두 값을 나누어 나머지를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem_Un">
      <summary vsli:raw="Divides two unsigned values and pushes the remainder onto the evaluation stack.">부호 없는 두 값을 나누어 나머지를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ret">
      <summary vsli:raw="Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.">현재 메서드에서 제어를 반환하고 반환 값이 있을 경우 호출 수신자의 계산 스택에서 호출자의 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rethrow">
      <summary vsli:raw="Rethrows the current exception.">현재 예외를 다시 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shl">
      <summary vsli:raw="Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.">결과를 계산 스택으로 푸시하여 지정된 비트 수만큼 정수 값을 0에서 왼쪽으로 이동합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr">
      <summary vsli:raw="Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.">결과를 계산 스택으로 푸시하여 부호 안에 있는 정수 값을 지정된 비트 수만큼 오른쪽으로 이동합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr_Un">
      <summary vsli:raw="Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.">결과를 계산 스택으로 푸시하여 부호 없는 정수 값을 지정된 비트 수만큼 0에서 오른쪽으로 이동합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sizeof">
      <summary vsli:raw="Pushes the size, in bytes, of a supplied value type onto the evaluation stack.">주어진 값 형식의 크기(바이트)를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg">
      <summary vsli:raw="Stores the value on top of the evaluation stack in the argument slot at a specified index.">지정된 인덱스에 있는 인수 슬롯에 계산 스택 맨 위에 있는 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg_S">
      <summary vsli:raw="Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.">계산 스택 맨 위의 값을 약식인 지정된 인덱스의 인수 슬롯에 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem">
      <summary vsli:raw="Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.">지정된 인덱스에 있는 배열 요소를 명령에 지정된 형식을 갖는 계산 스택의 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;native int&quot; /&gt; value on the evaluation stack.">주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="native int" /> 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I1">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;int8&quot; /&gt; value on the evaluation stack.">주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="int8" /> 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I2">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;int16&quot; /&gt; value on the evaluation stack.">주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="int16" /> 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I4">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;int32&quot; /&gt; value on the evaluation stack.">주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="int32" /> 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I8">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;int64&quot; /&gt; value on the evaluation stack.">주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="int64" /> 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R4">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;float32&quot; /&gt; value on the evaluation stack.">주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="float32" /> 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R8">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;float64&quot; /&gt; value on the evaluation stack.">주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="float64" /> 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_Ref">
      <summary vsli:raw="Replaces the array element at a given index with the object ref value (type &lt;see langword=&quot;O&quot; /&gt;) on the evaluation stack.">주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 개체 참조 값(<see langword="O" /> 형식)으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stfld">
      <summary vsli:raw="Replaces the value stored in the field of an object reference or pointer with a new value.">개체 참조나 포인터의 필드에 저장된 값을 새 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;native int&quot; /&gt; at a supplied address.">주어진 주소에 <see langword="native int" /> 형식의 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I1">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;int8&quot; /&gt; at a supplied address.">주어진 주소에 <see langword="int8" /> 형식의 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I2">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;int16&quot; /&gt; at a supplied address.">주어진 주소에 <see langword="int16" /> 형식의 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I4">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;int32&quot; /&gt; at a supplied address.">주어진 주소에 <see langword="int32" /> 형식의 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I8">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;int64&quot; /&gt; at a supplied address.">주어진 주소에 <see langword="int64" /> 형식의 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R4">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;float32&quot; /&gt; at a supplied address.">주어진 주소에 <see langword="float32" /> 형식의 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R8">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;float64&quot; /&gt; at a supplied address.">주어진 주소에 <see langword="float64" /> 형식의 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_Ref">
      <summary vsli:raw="Stores a object reference value at a supplied address.">주어진 주소에 개체 참조 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at a specified index.">계산 스택 맨 위에서 현재 값을 팝하고 지정된 인덱스에 있는 지역 변수 목록에 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_0">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at index 0.">계산 스택 맨 위에서 현재 값을 팝하여 인덱스 0에 있는 지역 변수 목록에 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_1">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at index 1.">계산 스택 맨 위에서 현재 값을 팝하여 인덱스 1에 있는 지역 변수 목록에 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_2">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at index 2.">계산 스택 맨 위에서 현재 값을 팝하여 인덱스 2에 있는 지역 변수 목록에 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_3">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at index 3.">계산 스택 맨 위에서 현재 값을 팝하여 인덱스 3에 있는 지역 변수 목록에 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_S">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at &lt;paramref name=&quot;index&quot; /&gt; (short form).">계산 스택 맨 위에서 현재 값을 팝하여 <paramref name="index" />(약식)의 지역 변수 목록에 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stobj">
      <summary vsli:raw="Copies a value of a specified type from the evaluation stack into a supplied memory address.">지정된 형식의 값을 계산 스택에서 주어진 메모리 주소로 복사합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stsfld">
      <summary vsli:raw="Replaces the value of a static field with a value from the evaluation stack.">정적 필드의 값을 계산 스택에 있는 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub">
      <summary vsli:raw="Subtracts one value from another and pushes the result onto the evaluation stack.">값에서 다른 값을 빼고 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf">
      <summary vsli:raw="Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.">정수 값에서 다른 정수 값을 빼고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">
      <summary vsli:raw="Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.">부호 있는 정수 값에서 다른 부호 있는 정수 값을 빼고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Switch">
      <summary vsli:raw="Implements a jump table.">점프 테이블을 구현합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Tailcall">
      <summary vsli:raw="Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.">실제 호출 명령이 실행되기 전에 현재 메서드의 스택 프레임이 제거되도록 후위 메서드 호출 명령을 수행합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Throw">
      <summary vsli:raw="Throws the exception object currently on the evaluation stack.">현재 계산 스택에 있는 예외 개체를 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unaligned">
      <summary vsli:raw="Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following &lt;see langword=&quot;ldind&quot; /&gt;, &lt;see langword=&quot;stind&quot; /&gt;, &lt;see langword=&quot;ldfld&quot; /&gt;, &lt;see langword=&quot;stfld&quot; /&gt;, &lt;see langword=&quot;ldobj&quot; /&gt;, &lt;see langword=&quot;stobj&quot; /&gt;, &lt;see langword=&quot;initblk&quot; /&gt;, or &lt;see langword=&quot;cpblk&quot; /&gt; instruction.">현재 계산 스택의 맨 위에 있는 주소가 바로 다음에 오는 <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" /> 또는 <see langword="cpblk" /> 명령의 기본 크기에 따라 정렬될 수 없음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox">
      <summary vsli:raw="Converts the boxed representation of a value type to its unboxed form.">boxed로 표시되는 값 형식을 unboxed 형식으로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox_Any">
      <summary vsli:raw="Converts the boxed representation of a type specified in the instruction to its unboxed form.">명령에 지정된 형식의 boxed 표현을 unboxed 형식으로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Volatile">
      <summary vsli:raw="Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.">현재 계산 스택 맨 위에 있는 주소가 휘발성이고, 해당 위치를 읽은 결과가 캐시되지 않으며 이 위치에 여러 번 저장할 수 있음을 지정합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Xor">
      <summary vsli:raw="Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.">계산 스택 맨 위에 있는 두 값의 비트 배타적 OR를 계산하고 결과를 스택으로 푸시합니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Returns true or false if the supplied opcode takes a single byte argument.">주어진 opcode가 싱글바이트 인수를 사용할 경우 True나 false를 반환합니다.</summary>
      <param name="inst" vsli:raw="An instance of an Opcode object.">Opcode 개체의 인스턴스입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 또는 <see langword="false" /></returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodeType">
      <summary vsli:raw="Describes the types of the Microsoft intermediate language (MSIL) instructions.">MSIL(Microsoft Intermediate Language) 명령의 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Annotation">
      <summary vsli:raw="This enumerator value is reserved and should not be used.">이 열거자 값은 예약되었으므로 사용하지 않아야 합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Macro">
      <summary vsli:raw="These are Microsoft intermediate language (MSIL) instructions that are used as a synonym for other MSIL instructions. For example, &lt;see langword=&quot;ldarg.0&quot; /&gt; represents the &lt;see langword=&quot;ldarg&quot; /&gt; instruction with an argument of 0.">이것은 다른 MSIL(Microsoft Intermediate Language) 명령의 동의어로 사용되는 MSIL 명령들입니다. 예를 들어, <see langword="ldarg.0" />은 인수가 0인 <see langword="ldarg" /> 명령을 나타냅니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Nternal">
      <summary vsli:raw="Describes a reserved Microsoft intermediate language (MSIL) instruction.">예약된 MSIL(Microsoft Intermediate Language) 명령을 설명합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Objmodel">
      <summary vsli:raw="Describes a Microsoft intermediate language (MSIL) instruction that applies to objects.">개체에 적용될 MSIL(Microsoft Intermediate Language) 명령을 설명합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Prefix">
      <summary vsli:raw="Describes a prefix instruction that modifies the behavior of the following instruction.">다음 명령의 동작을 수정하는 접두사 명령을 설명합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Primitive">
      <summary vsli:raw="Describes a built-in instruction.">기본 제공 명령을 설명합니다.</summary>
    </member>
    <member name="T:System.Reflection.Emit.OperandType">
      <summary vsli:raw="Describes the operand type of Microsoft intermediate language (MSIL) instruction.">MSIL(Microsoft Intermediate Language) 명령의 피연산자 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineBrTarget">
      <summary vsli:raw="The operand is a 32-bit integer branch target.">피연산자가 32비트 정수 분기 대상입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineField">
      <summary vsli:raw="The operand is a 32-bit metadata token.">피연산자가 32비트 메타데이터 토큰입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI">
      <summary vsli:raw="The operand is a 32-bit integer.">피연산자가 32비트 정수입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI8">
      <summary vsli:raw="The operand is a 64-bit integer.">피연산자가 64비트 정수입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineMethod">
      <summary vsli:raw="The operand is a 32-bit metadata token.">피연산자가 32비트 메타데이터 토큰입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineNone">
      <summary vsli:raw="No operand.">피연산자가 없습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlinePhi">
      <summary vsli:raw="The operand is reserved and should not be used.">피연산자가 예약되었으므로 사용하지 않아야 합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineR">
      <summary vsli:raw="The operand is a 64-bit IEEE floating point number.">피연산자가 64비트 IEEE 부동 소수점 형식입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSig">
      <summary vsli:raw="The operand is a 32-bit metadata signature token.">피연산자가 32비트 메타데이터 시그니처 토큰입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineString">
      <summary vsli:raw="The operand is a 32-bit metadata string token.">피연산자가 32비트 메타데이터 문자열 토큰입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSwitch">
      <summary vsli:raw="The operand is the 32-bit integer argument to a switch instruction.">피연산자가 스위치 명령에 대한 32비트 정수 인수입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineTok">
      <summary vsli:raw="The operand is a &lt;see langword=&quot;FieldRef&quot; /&gt;, &lt;see langword=&quot;MethodRef&quot; /&gt;, or &lt;see langword=&quot;TypeRef&quot; /&gt; token.">피연산자가 <see langword="FieldRef" />, <see langword="MethodRef" /> 또는 <see langword="TypeRef" /> 토큰입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineType">
      <summary vsli:raw="The operand is a 32-bit metadata token.">피연산자가 32비트 메타데이터 토큰입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineVar">
      <summary vsli:raw="The operand is 16-bit integer containing the ordinal of a local variable or an argument.">피연산자가 지역 변수나 인수의 서수가 포함된 16비트 정수입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineBrTarget">
      <summary vsli:raw="The operand is an 8-bit integer branch target.">피연산자가 8비트 정수 분기 대상입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineI">
      <summary vsli:raw="The operand is an 8-bit integer.">피연산자가 8비트 정수입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineR">
      <summary vsli:raw="The operand is a 32-bit IEEE floating point number.">피연산자가 32비트 IEEE 부동 소수점 형식입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineVar">
      <summary vsli:raw="The operand is an 8-bit integer containing the ordinal of a local variable or an argumenta.">피연산자가 지역 변수나 인수의 서수가 포함된 8비트 정수입니다.</summary>
    </member>
    <member name="T:System.Reflection.Emit.PackingSize">
      <summary vsli:raw="Specifies one of two factors that determine the memory alignment of fields when a type is marshaled.">형식이 마샬링될 때 필드의 메모리 맞춤을 결정하는 두 요소 중 하나를 지정합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size1">
      <summary vsli:raw="The packing size is 1 byte.">압축 크기가 1바이트입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size128">
      <summary vsli:raw="The packing size is 128 bytes.">압축 크기가 128바이트입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size16">
      <summary vsli:raw="The packing size is 16 bytes.">압축 크기가 16바이트입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size2">
      <summary vsli:raw="The packing size is 2 bytes.">압축 크기가 2바이트입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size32">
      <summary vsli:raw="The packing size is 32 bytes.">압축 크기가 32바이트입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size4">
      <summary vsli:raw="The packing size is 4 bytes.">압축 크기가 4바이트입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size64">
      <summary vsli:raw="The packing size is 64 bytes.">압축 크기가 64바이트입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size8">
      <summary vsli:raw="The packing size is 8 bytes.">압축 크기가 8바이트입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Unspecified">
      <summary vsli:raw="The packing size is not specified.">압축 크기가 지정되지 않았습니다.</summary>
    </member>
    <member name="T:System.Reflection.Emit.StackBehaviour">
      <summary vsli:raw="Describes how values are pushed onto a stack or popped off a stack.">값을 스택에 푸시하거나 스택에서 팝하는 방법을 설명합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop0">
      <summary vsli:raw="No values are popped off the stack.">스택에서 값을 팝하지 않습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1">
      <summary vsli:raw="Pops one value off the stack.">스택에서 값 하나를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1_pop1">
      <summary vsli:raw="Pops 1 value off the stack for the first operand, and 1 value of the stack for the second operand.">스택에서 첫 번째 피연산자에 대한 값 하나를 팝하고, 두 번째 피연산자에 대한 값 하나를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi">
      <summary vsli:raw="Pops a 32-bit integer off the stack.">스택에서 32비트 정수를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_pop1">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a value off the stack for the second operand.">스택에서 첫 번째 피연산자에 대한 32비트 정수를 팝하고, 두 번째 피연산자에 대한 값 하나를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a 32-bit integer off the stack for the second operand.">스택에서 첫 번째 피연산자에 대한 32비트 정수를 팝하고, 두 번째 피연산자에 대한 32비트 정수를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi_popi">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, a 32-bit integer off the stack for the second operand, and a 32-bit integer off the stack for the third operand.">스택에서 첫 번째 피연산자에 대한 32비트 정수를 팝하고, 두 번째 피연산자에 대한 32비트 정수를 팝합니다. 그리고 세 번째 피연산자에 대한 32비트 정수도 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi8">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a 64-bit integer off the stack for the second operand.">스택에서 첫 번째 피연산자에 대한 32비트 정수를 팝하고, 두 번째 피연산자에 대한 64비트 정수를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr4">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a 32-bit floating point number off the stack for the second operand.">스택에서 첫 번째 피연산자에 대한 32비트 정수를 팝하고, 두 번째 피연산자에 대한 32비트 부동 소수점 수를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr8">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a 64-bit floating point number off the stack for the second operand.">스택에서 첫 번째 피연산자에 대한 32비트 정수를 팝하고, 두 번째 피연산자에 대한 64비트 부동 소수점 수를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref">
      <summary vsli:raw="Pops a reference off the stack.">스택에서 참조를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_pop1">
      <summary vsli:raw="Pops a reference off the stack for the first operand, and a value off the stack for the second operand.">스택에서 첫 번째 피연산자에 대한 참조를 팝하고, 두 번째 피연산자에 대한 값 하나를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi">
      <summary vsli:raw="Pops a reference off the stack for the first operand, and a 32-bit integer off the stack for the second operand.">스택에서 첫 번째 피연산자에 대한 참조를 팝하고, 두 번째 피연산자에 대한 32비트 정수를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_pop1">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.">스택에서 첫 번째 피연산자에 대한 참조를 팝하고, 두 번째 피연산자에 대한 값 하나를 팝합니다. 그리고 세 번째 피연산자에 대한 32비트 정수도 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a value off the stack for the third operand.">스택에서 첫 번째 피연산자에 대한 참조를 팝하고, 두 번째 피연산자에 대한 값 하나를 팝합니다. 그리고 세 번째 피연산자에 대한 값 하나도 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi8">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit integer off the stack for the third operand.">스택에서 첫 번째 피연산자에 대한 참조를 팝하고, 두 번째 피연산자에 대한 값 하나를 팝합니다. 그리고 세 번째 피연산자에 대한 64비트 정수도 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr4">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.">스택에서 첫 번째 피연산자에 대한 참조를 팝하고, 두 번째 피연산자에 대한 값 하나를 팝합니다. 그리고 세 번째 피연산자에 대한 32비트 정수도 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr8">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit floating point number off the stack for the third operand.">스택에서 첫 번째 피연산자에 대한 참조를 팝하고, 두 번째 피연산자에 대한 64비트 부동 소수점 수를 팝합니다. 그리고 세 번째 피연산자에 대한 64비트 정수도 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popref">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a reference off the stack for the third operand.">스택에서 첫 번째 피연산자에 대한 참조를 팝하고, 두 번째 피연산자에 대한 값 하나를 팝합니다. 그리고 세 번째 피연산자에 대한 참조도 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push0">
      <summary vsli:raw="No values are pushed onto the stack.">스택에 값을 푸시하지 않습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1">
      <summary vsli:raw="Pushes one value onto the stack.">스택에 값 하나를 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1_push1">
      <summary vsli:raw="Pushes 1 value onto the stack for the first operand, and 1 value onto the stack for the second operand.">스택에 첫 번째 피연산자에 대한 값 하나를 푸시하고, 두 번째 피연산자에 대한 값 하나를 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi">
      <summary vsli:raw="Pushes a 32-bit integer onto the stack.">스택에 32비트 정수를 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi8">
      <summary vsli:raw="Pushes a 64-bit integer onto the stack.">스택에 64비트 정수를 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr4">
      <summary vsli:raw="Pushes a 32-bit floating point number onto the stack.">스택에 32비트 부동 소수점 수를 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr8">
      <summary vsli:raw="Pushes a 64-bit floating point number onto the stack.">스택에 64비트 부동 소수점 수를 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushref">
      <summary vsli:raw="Pushes a reference onto the stack.">스택에 참조를 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpop">
      <summary vsli:raw="Pops a variable off the stack.">스택에서 변수를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpush">
      <summary vsli:raw="Pushes a variable onto the stack.">스택에 변수를 푸시합니다.</summary>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows.Forms.Design</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.Design.ActiveDesignSurfaceChangedEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurfaceChanged" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignSurfaceChangedEventArgs.#ctor(System.ComponentModel.Design.DesignSurface,System.ComponentModel.Design.DesignSurface)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ActiveDesignSurfaceChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="oldSurface">활성화가 해제될 디자인 화면입니다.</param>
      <param name="newSurface">활성화될 디자인 화면입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignSurfaceChangedEventArgs.NewSurface">
      <summary>활성화될 디자인 화면을 가져옵니다.</summary>
      <returns>활성화될 <see cref="T:System.ComponentModel.Design.DesignSurface" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignSurfaceChangedEventArgs.OldSurface">
      <summary>활성화가 해제될 디자인 화면을 가져옵니다.</summary>
      <returns>활성화가 해제될 <see cref="T:System.ComponentModel.Design.DesignSurface" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignSurfaceChangedEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurfaceChanged" />의 <see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /> 이벤트를 처리할 메서드를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <param name="sender">
        <see cref="T:System.ComponentModel.Design.DesignSurfaceManager" />는 이벤트의 소스입니다.</param>
      <param name="e">이벤트 데이터가 포함된 <see cref="T:System.ComponentModel.Design.ActiveDesignSurfaceChangedEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ArrayEditor">
      <summary>디자인 타임에서 배열을 편집하기 위해 사용자 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ArrayEditor.#ctor(System.Type)">
      <summary>배열의 지정된 데이터 형식을 사용하여 <see cref="T:System.ComponentModel.Design.ArrayEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">배열 항목의 데이터 형식입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ArrayEditor.CreateCollectionItemType">
      <summary>해당 컬렉션이 포함하도록 디자인된 데이터 형식을 가져옵니다.</summary>
      <returns>컬렉션이 포함하도록 디자인된 데이터 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ArrayEditor.GetItems(System.Object)">
      <summary>배열의 항목을 가져옵니다.</summary>
      <param name="editValue">항목을 검색하는 배열입니다.</param>
      <returns>지정된 배열의 항목으로 구성된 배열입니다. <paramref name="editValue" /> 매개 변수에 지정된 개체가 배열이 아니면 새로운 빈 개체가 반환됩니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ArrayEditor.SetItems(System.Object,System.Object[])">
      <summary>배열의 항목을 설정합니다.</summary>
      <param name="editValue">항목을 설정할 배열입니다.</param>
      <param name="value">배열의 항목으로 설정할 개체의 배열입니다.</param>
      <returns>새 배열의 인스턴스입니다. <paramref name="editValue" /> 매개 변수로 지정한 개체가 배열이 아니면 <paramref name="editValue" /> 매개 변수로 지정한 개체가 반환됩니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.BinaryEditor">
      <summary>이진 데이터를 편집하기 위한 사용자 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.BinaryEditor.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.BinaryEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.BinaryEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>지정된 서비스 공급자와 컨텍스트를 사용하여 지정된 개체의 값을 편집합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="provider">편집 서비스를 가져오는 데 사용할 수 있는 서비스 공급자 개체입니다.</param>
      <param name="value">값을 편집할 개체입니다.</param>
      <returns>개체의 새 값입니다. 개체의 값을 변경하지 않은 경우 여기서는 전달된 것과 동일한 개체를 반환해야 합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.BinaryEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.ComponentModel.Design.BinaryEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> 메서드에서 사용하는 편집기 스타일을 가져옵니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>제공된 편집 스타일을 나타내는 <see langword="enum" /> 값입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ByteViewer">
      <summary>16진수, ANSI 및 유니코드 형식으로 바이트 배열을 표시합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.ByteViewer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.GetBytes">
      <summary>버퍼의 바이트를 가져옵니다.</summary>
      <returns>부호 없는 바이트 배열 참조입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.GetDisplayMode">
      <summary>컨트롤에 대한 디스플레이 모드를 가져옵니다.</summary>
      <returns>해당 컨트롤이 사용하는 디스플레이 모드입니다. 반환된 값은 <see cref="T:System.ComponentModel.Design.DisplayMode" />에 정의됩니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>
        <see cref="E:System.Windows.Forms.Control.KeyDown" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.KeyEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.OnLayout(System.Windows.Forms.LayoutEventArgs)">
      <summary>
        <see cref="E:System.Windows.Forms.Control.Layout" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.LayoutEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>
        <see cref="E:System.Windows.Forms.Control.Paint" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.PaintEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.SaveToFile(System.String)">
      <summary>데이터 버퍼의 원시 데이터를 파일에 씁니다.</summary>
      <param name="path">저장할 파일 경로입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />가 빈 문자열("")이거나 공백만 포함하거나 하나 이상의 잘못된 문자를 포함합니다.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
      <exception cref="T:System.IO.IOException">파일 쓰기를 수행하지 못한 경우</exception>
      <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다.</exception>
      <exception cref="T:System.UnauthorizedAccessException">지정된 <paramref name="path" />에 대해 운영 체제에서 요청된 액세스를 허용하지 않는 경우(예: 액세스 권한이 <see langword="Write" /> 또는 <see langword="ReadWrite" />이고 파일 또는 디렉터리가 읽기 전용 권한으로 설정된 경우)</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.ScrollChanged(System.Object,System.EventArgs)">
      <summary>
        <see cref="E:System.Windows.Forms.ScrollBar.ValueChanged" /> 컨트롤의 <see cref="T:System.ComponentModel.Design.ByteViewer" />에 대한 <see cref="T:System.Windows.Forms.ScrollBar" /> 이벤트를 처리합니다.</summary>
      <param name="source">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.SetBytes(System.Byte[])">
      <summary>뷰어에 표시할 바이트 배열을 설정합니다.</summary>
      <param name="bytes">표시할 바이트 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">지정된 바이트 배열이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.SetDisplayMode(System.ComponentModel.Design.DisplayMode)">
      <summary>현재 디스플레이 모드를 설정합니다.</summary>
      <param name="mode">설정할 디스플레이 모드입니다.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">지정된 디스플레이 모드를 <see cref="T:System.ComponentModel.Design.DisplayMode" /> 열거형에서 가져오지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.SetFile(System.String)">
      <summary>뷰어에 표시할 파일을 설정합니다.</summary>
      <param name="path">로드할 파일 경로입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" />가 빈 문자열("")이거나 공백만 포함하거나 하나 이상의 잘못된 문자를 포함합니다.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
      <exception cref="T:System.IO.IOException">파일을 로드하지 못한 경우</exception>
      <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다.</exception>
      <exception cref="T:System.UnauthorizedAccessException">지정된 <paramref name="path" />에 대해 운영 체제에서 요청된 액세스를 허용하지 않는 경우(예: 액세스 권한이 <see langword="Write" /> 또는 <see langword="ReadWrite" />이고 파일 또는 디렉터리가 읽기 전용 권한으로 설정된 경우)</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ByteViewer.SetStartLine(System.Int32)">
      <summary>
        <see cref="F:System.ComponentModel.Design.DisplayMode.Hexdump" /> 뷰에 대한 현재 줄을 설정합니다.</summary>
      <param name="line">표시할 현재 줄입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.CollectionEditor">
      <summary>디자인 타임에 대부분의 컬렉션 형식을 편집할 수 있는 사용자 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.#ctor(System.Type)">
      <summary>지정된 컬렉션 형식을 사용하여 <see cref="T:System.ComponentModel.Design.CollectionEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">이 편집기에서 편집할 컬렉션의 형식입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CancelChanges">
      <summary>컬렉션에 대한 변경을 취소합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CanRemoveInstance(System.Object)">
      <summary>컬렉션의 원래 멤버를 제거할 수 있는지 여부를 나타냅니다.</summary>
      <param name="value">제거할 값입니다.</param>
      <returns>컬렉션에서 이 값을 제거하는 것이 허용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본 구현에서는 항상 <see langword="true" />을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CanSelectMultipleInstances">
      <summary>동시에 여러 컬렉션 항목을 선택할 수 있는지 여부를 나타냅니다.</summary>
      <returns>동시에 여러 컬렉션 멤버를 선택할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본적으로 이 속성은 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CreateCollectionForm">
      <summary>현재 컬렉션을 표시하고 편집할 새 폼을 만듭니다.</summary>
      <returns>컬렉션을 편집하기 위한 사용자 인터페이스로 제공할 <see cref="T:System.ComponentModel.Design.CollectionEditor.CollectionForm" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CreateCollectionItemType">
      <summary>이 컬렉션에 들어 있는 데이터 형식을 가져옵니다.</summary>
      <returns>컬렉션 항목의 데이터 형식이거나, 컬렉션에서 <see langword="Item" /> 속성을 찾을 수 없는 경우 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CreateInstance(System.Type)">
      <summary>지정된 컬렉션 항목 형식의 새 인스턴스를 만듭니다.</summary>
      <param name="itemType">만들 항목의 형식입니다.</param>
      <returns>지정된 개체의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CreateNewItemTypes">
      <summary>이 컬렉션 편집기가 포함할 수 있는 데이터 형식을 가져옵니다.</summary>
      <returns>이 컬렉션이 포함할 수 있는 데이터 형식의 배열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.DestroyInstance(System.Object)">
      <summary>개체의 지정된 인스턴스를 소멸시킵니다.</summary>
      <param name="instance">소멸시킬 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>지정된 서비스 공급자와 컨텍스트를 사용하여 지정된 개체의 값을 편집합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="provider">편집 서비스를 가져오는 데 사용할 수 있는 서비스 공급자 개체입니다.</param>
      <param name="value">값을 편집할 개체입니다.</param>
      <exception cref="T:System.ComponentModel.Design.CheckoutException">소스 코드 관리 프로그램으로 체크 인된 파일을 체크 아웃하지 못한 경우</exception>
      <returns>개체의 새 값입니다. 개체의 값을 변경하지 않은 경우 여기서는 전달된 것과 동일한 개체를 반환해야 합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.GetDisplayText(System.Object)">
      <summary>지정된 목록 항목의 표시 텍스트를 검색합니다.</summary>
      <param name="value">표시 텍스트를 검색할 목록 항목입니다.</param>
      <returns>
        <paramref name="value" />의 표시 텍스트입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.ComponentModel.Design.CollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> 메서드에서 사용하는 편집 스타일을 가져옵니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>제공되는 편집 스타일을 나타내는 <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> 열거형 값입니다. 지정된 컨텍스트에서 메서드를 지원하지 않는 경우 이 메서드에서는 <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" /> 식별자를 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.GetItems(System.Object)">
      <summary>지정된 컬렉션이 들어 있는 개체의 배열을 가져옵니다.</summary>
      <param name="editValue">편집할 컬렉션입니다.</param>
      <returns>컬렉션 개체가 들어 있는 배열이거나, 지정된 컬렉션이 <see cref="T:System.Collections.ICollection" />에서 상속되지 않은 경우 빈 개체 배열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.GetObjectsFromInstance(System.Object)">
      <summary>지정된 개체가 포함된 목록을 반환합니다.</summary>
      <param name="instance">개체로 반환된 <see cref="T:System.Collections.ArrayList" />입니다.</param>
      <returns>만들 개별 개체가 포함된 <see cref="T:System.Collections.ArrayList" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.GetService(System.Type)">
      <summary>요청된 서비스를 사용할 수 있는 경우 해당 서비스를 가져옵니다.</summary>
      <param name="serviceType">검색할 서비스의 형식입니다.</param>
      <returns>서비스의 인스턴스입니다. 서비스를 찾을 수 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.SetItems(System.Object,System.Object[])">
      <summary>지정된 배열을 컬렉션의 항목으로 설정합니다.</summary>
      <param name="editValue">편집할 컬렉션입니다.</param>
      <param name="value">컬렉션 항목으로 설정할 개체의 배열입니다.</param>
      <returns>새로 만들어진 컬렉션 개체이거나, 그렇지 않으면 <paramref name="editValue" /> 매개 변수에서 나타내는 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.ShowHelp">
      <summary>컬렉션 편집기에 대한 기본 도움말 항목을 표시합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionItemType">
      <summary>컬렉션에 있는 각 항목의 데이터 형식을 가져옵니다.</summary>
      <returns>컬렉션 항목의 데이터 형식입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionType">
      <summary>컬렉션 개체의 데이터 형식을 가져옵니다.</summary>
      <returns>컬렉션 개체의 데이터 형식입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.Context">
      <summary>현재 컨텍스트를 나타내는 형식 설명자를 가져옵니다.</summary>
      <returns>현재 사용하고 있는 컨텍스트를 나타내는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 사용할 수 있는 컨텍스트가 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.HelpTopic">
      <summary>편집기 대화 상자의 도움말 단추나 F1 키를 누를 때 도움말 항목 또는 항목 목록을 표시하는 도움말 키워드를 가져옵니다.</summary>
      <returns>편집기에서 도움말을 요청하는 경우 도움말 항목 또는 항목 목록을 표시하는 도움말 키워드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.NewItemTypes">
      <summary>이 컬렉션에 만들 수 있는 사용 가능한 항목 형식을 가져옵니다.</summary>
      <returns>만들 수 있는 항목 형식입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.CollectionEditor.CollectionForm">
      <summary>
        <see cref="T:System.Drawing.Design.UITypeEditor" />를 사용하여 컬렉션 내용을 편집하는 모달 대화 상자를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.#ctor(System.ComponentModel.Design.CollectionEditor)">
      <summary>
        <see cref="T:System.ComponentModel.Design.CollectionEditor.CollectionForm" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="editor">컬렉션 편집에 사용할 <see cref="T:System.ComponentModel.Design.CollectionEditor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.CanRemoveInstance(System.Object)">
      <summary>컬렉션의 원래 멤버를 제거할 수 있는지 여부를 나타냅니다.</summary>
      <param name="value">제거할 값입니다.</param>
      <returns>컬렉션에서 이 값을 제거하는 것이 허용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본적으로 이 메서드에서는 이 폼에 대한 <see cref="M:System.ComponentModel.Design.CollectionEditor.CanRemoveInstance(System.Object)" />의 <see cref="T:System.ComponentModel.Design.CollectionEditor" />에서 값을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.CanSelectMultipleInstances">
      <summary>동시에 여러 컬렉션 항목을 선택할 수 있는지 여부를 나타냅니다.</summary>
      <returns>동시에 여러 컬렉션 멤버를 선택할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본적으로 이 메서드에서는 이 폼에 대한 <see cref="M:System.ComponentModel.Design.CollectionEditor.CanSelectMultipleInstances" />의 <see cref="T:System.ComponentModel.Design.CollectionEditor" />에서 값을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.CreateInstance(System.Type)">
      <summary>지정된 컬렉션 항목 형식의 새 인스턴스를 만듭니다.</summary>
      <param name="itemType">만들 항목의 형식입니다.</param>
      <returns>지정된 개체의 새 인스턴스이거나, 사용자가 이 인스턴스의 작성을 취소한 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.DestroyInstance(System.Object)">
      <summary>개체의 지정된 인스턴스를 소멸시킵니다.</summary>
      <param name="instance">소멸시킬 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.DisplayError(System.Exception)">
      <summary>사용자에게 지정된 예외를 표시합니다.</summary>
      <param name="e">표시할 예외입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.GetService(System.Type)">
      <summary>요청된 서비스를 사용할 수 있는 경우 해당 서비스를 가져옵니다.</summary>
      <param name="serviceType">검색할 서비스의 형식입니다.</param>
      <returns>서비스의 인스턴스입니다. 서비스를 찾을 수 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.OnEditValueChanged">
      <summary>컬렉션 값이 변경된 경우 처리를 수행할 수 있는 기회를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CollectionEditor.CollectionForm.ShowEditorDialog(System.Windows.Forms.Design.IWindowsFormsEditorService)">
      <summary>지정된 <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService" /> 개체를 사용하여 컬렉션 편집기의 대화 상자를 표시합니다.</summary>
      <param name="edSvc">대화 상자를 표시하는 데 사용할 수 있는 <see cref="T:System.Windows.Forms.Design.IWindowsFormsEditorService" />입니다.</param>
      <returns>대화 상자에서 반환된 결과 코드를 나타내는 <see cref="T:System.Windows.Forms.DialogResult" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.CollectionItemType">
      <summary>컬렉션에 있는 각 항목의 데이터 형식을 가져옵니다.</summary>
      <returns>컬렉션 항목의 데이터 형식입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.CollectionType">
      <summary>컬렉션 개체의 데이터 형식을 가져옵니다.</summary>
      <returns>컬렉션 개체의 데이터 형식입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.Context">
      <summary>현재 컨텍스트를 나타내는 형식 설명자를 가져옵니다.</summary>
      <returns>현재 사용하고 있는 컨텍스트를 나타내는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 사용할 수 있는 컨텍스트가 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.EditValue">
      <summary>편집할 컬렉션 개체를 가져오거나 설정합니다.</summary>
      <returns>편집할 컬렉션 개체입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.Items">
      <summary>이 폼에서 표시할 항목 배열을 가져오거나 설정합니다.</summary>
      <returns>이 폼에서 표시할 개체 배열입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CollectionEditor.CollectionForm.NewItemTypes">
      <summary>이 컬렉션에 만들 수 있는 사용 가능한 항목 형식을 가져옵니다.</summary>
      <returns>만들 수 있는 항목 형식입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentDesigner">
      <summary>구성 요소의 디자인 모드 동작을 확장합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.ComponentDesigner" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.ComponentDesigner" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ComponentDesigner" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.DoDefaultAction">
      <summary>구성 요소의 기본 이벤트에 대한 소스 코드 파일에 메서드 시그니처를 만들고 해당 위치로 사용자의 커서를 이동합니다.</summary>
      <exception cref="T:System.ComponentModel.Design.CheckoutException">소스 코드 관리 프로그램으로 체크 인된 파일을 체크 아웃하지 못한 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.GetService(System.Type)">
      <summary>디자이너 구성 요소의 디자인 모드 사이트에서 지정된 서비스 종류를 검색합니다.</summary>
      <param name="serviceType">요청할 서비스의 형식입니다.</param>
      <returns>요청된 서비스를 구현하는 개체이거나, 서비스를 확인할 수 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>지정된 구성 요소를 표시, 편집 및 디자인할 디자이너를 준비합니다.</summary>
      <param name="component">이 디자이너에 대한 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>기존 구성 요소를 다시 초기화합니다.</summary>
      <param name="defaultValues">속성에 적용할 기본값의 이름/값 사전입니다. 기본값이 지정되지 않은 경우 <see langword="null" /> 일 수 있습니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>새로 만들어진 구성 요소를 초기화합니다.</summary>
      <param name="defaultValues">속성에 적용할 기본값의 이름/값 사전입니다. 기본값이 지정되지 않은 경우 <see langword="null" /> 일 수 있습니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.InitializeNonDefault">
      <summary>기본값이 아닌 설정으로 이미 초기화되어 가져온 구성 요소의 설정을 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.InvokeGetInheritanceAttribute(System.ComponentModel.Design.ComponentDesigner)">
      <summary>지정된 <see cref="T:System.ComponentModel.InheritanceAttribute" />의 <see cref="T:System.ComponentModel.Design.ComponentDesigner" />를 가져옵니다.</summary>
      <param name="toInvoke">상속 특성을 검색할 <see cref="T:System.ComponentModel.Design.ComponentDesigner" />입니다.</param>
      <returns>지정된 디자이너의 <see cref="T:System.ComponentModel.InheritanceAttribute" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.OnSetComponentDefaults">
      <summary>구성 요소의 기본 속성을 설정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출되는 특성 집합의 항목을 변경하거나 제거하도록 합니다.</summary>
      <param name="attributes">구성 요소의 클래스에 대한 특성입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PostFilterEvents(System.Collections.IDictionary)">
      <summary>디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출되는 이벤트 집합의 항목을 변경하거나 제거하도록 합니다.</summary>
      <param name="events">구성 요소의 클래스에 대한 이벤트입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PostFilterProperties(System.Collections.IDictionary)">
      <summary>디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출되는 속성 집합의 항목을 변경하거나 제거하도록 합니다.</summary>
      <param name="properties">구성 요소의 클래스에 대한 속성입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출되는 특성 집합에 항목을 추가하도록 합니다.</summary>
      <param name="attributes">구성 요소의 클래스에 대한 특성입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PreFilterEvents(System.Collections.IDictionary)">
      <summary>디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출되는 이벤트 집합에 항목을 추가하도록 합니다.</summary>
      <param name="events">구성 요소의 클래스에 대한 이벤트입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출되는 속성 집합에 항목을 추가하도록 합니다.</summary>
      <param name="properties">구성 요소의 클래스에 대한 속성입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.RaiseComponentChanged(System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.Design.IComponentChangeService" />에 이 구성 요소가 변경되었음을 알립니다.</summary>
      <param name="member">변경된 멤버를 나타내는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
      <param name="oldValue">멤버의 이전 값입니다.</param>
      <param name="newValue">멤버의 새 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.RaiseComponentChanging(System.ComponentModel.MemberDescriptor)">
      <summary>
        <see cref="T:System.ComponentModel.Design.IComponentChangeService" />에 이 구성 요소가 변경될 예정임을 알립니다.</summary>
      <param name="member">변경될 멤버를 나타내는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.System#ComponentModel#Design#IDesignerFilter#PostFilterAttributes(System.Collections.IDictionary)">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)" /> 메서드를 참조하세요.</summary>
      <param name="attributes">구성 요소의 클래스에 대한 <see cref="T:System.Attribute" /> 개체입니다. 특성의 사전에 포함된 키는 특성의 <see cref="P:System.Attribute.TypeId" /> 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.System#ComponentModel#Design#IDesignerFilter#PostFilterEvents(System.Collections.IDictionary)">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)" /> 메서드를 참조하세요.</summary>
      <param name="events">구성 요소 클래스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체입니다. 이벤트의 사전에 포함된 키는 이벤트 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.System#ComponentModel#Design#IDesignerFilter#PostFilterProperties(System.Collections.IDictionary)">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)" /> 메서드를 참조하세요.</summary>
      <param name="properties">구성 요소 클래스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체입니다. 속성의 사전에 포함된 키는 속성 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.System#ComponentModel#Design#IDesignerFilter#PreFilterAttributes(System.Collections.IDictionary)">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)" /> 메서드를 참조하세요.</summary>
      <param name="attributes">구성 요소의 클래스에 대한 <see cref="T:System.Attribute" /> 개체입니다. 특성의 사전에 포함된 키는 특성의 <see cref="P:System.Attribute.TypeId" /> 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.System#ComponentModel#Design#IDesignerFilter#PreFilterEvents(System.Collections.IDictionary)">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)" /> 메서드를 참조하세요.</summary>
      <param name="events">구성 요소 클래스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체입니다. 이벤트의 사전에 포함된 키는 이벤트 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.System#ComponentModel#Design#IDesignerFilter#PreFilterProperties(System.Collections.IDictionary)">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)" /> 메서드를 참조하세요.</summary>
      <param name="properties">구성 요소 클래스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체입니다. 속성의 사전에 포함된 키는 속성 이름입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.ActionLists">
      <summary>디자이너와 관련된 구성 요소에서 지원하는 디자인 타임 작업 목록을 가져옵니다.</summary>
      <returns>디자이너와 관련된 구성 요소에서 지원하는 디자인 타임 작업 목록입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.AssociatedComponents">
      <summary>디자이너가 관리하는 구성 요소와 관련된 구성 요소 컬렉션을 가져옵니다.</summary>
      <returns>디자이너가 관리하는 구성 요소와 관련된 구성 요소입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.Component">
      <summary>이 디자이너에서 디자인하고 있는 구성 요소를 가져옵니다.</summary>
      <returns>디자이너에서 관리하는 구성 요소입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.InheritanceAttribute">
      <summary>관련된 구성 요소의 상속 형식을 나타내는 특성을 가져옵니다.</summary>
      <returns>관련된 구성 요소에 대한 <see cref="T:System.ComponentModel.InheritanceAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.Inherited">
      <summary>이 구성 요소가 상속되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>구성 요소가 상속된 것이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.ParentComponent">
      <summary>이 디자이너의 부모 구성 요소를 가져옵니다.</summary>
      <returns>이 디자이너의 부모 구성 요소이거나, 이 디자이너가 루트 구성 요소인 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.ShadowProperties">
      <summary>사용자 설정을 재정의하는 속성 값의 컬렉션을 가져옵니다.</summary>
      <returns>디자인 문서의 그림자 속성을 나타내는 <see cref="T:System.ComponentModel.Design.ComponentDesigner.ShadowPropertyCollection" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.System#ComponentModel#Design#ITreeDesigner#Children">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="P:System.ComponentModel.Design.ITreeDesigner.Children" /> 속성을 참조하세요.</summary>
      <returns>현재 부모 디자이너에 포함된 <see cref="T:System.Collections.ICollection" /> 디자이너의 컬렉션이 들어 있는 <see cref="T:System.ComponentModel.Design.IDesigner" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.System#ComponentModel#Design#ITreeDesigner#Parent">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="P:System.ComponentModel.Design.ITreeDesigner.Parent" /> 속성을 참조하세요.</summary>
      <returns>부모 디자이너를 나타내는 <see cref="T:System.ComponentModel.Design.IDesigner" />이거나, 부모가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.Verbs">
      <summary>디자이너와 관련된 구성 요소에서 지원하는 디자인 타임 동사를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 개체의 <see cref="T:System.ComponentModel.Design.DesignerVerb" />이거나, 사용할 수 있는 디자이너 동사가 없는 경우 <see langword="null" />입니다. 기본 구현은 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentDesigner.ShadowPropertyCollection">
      <summary>상속된 기본값이나 특정 속성에 할당된 값을 재정의해야 하는 숨김 속성의 컬렉션을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentDesigner.ShadowPropertyCollection.Contains(System.String)">
      <summary>지정된 이름과 일치하는 속성이 컬렉션에 있는지 여부를 나타냅니다.</summary>
      <param name="propertyName">컬렉션에서 검사할 속성의 이름입니다.</param>
      <returns>속성이 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentDesigner.ShadowPropertyCollection.Item(System.String)">
      <summary>지정된 인덱스에서 개체를 가져오거나 설정합니다.</summary>
      <param name="propertyName">컬렉션에 있는 액세스할 속성의 이름입니다.</param>
      <returns>컬렉션에 지정된 속성이 있는 경우 해당 속성의 값입니다. 그렇지 않으면 숨겨져 있지 않은 속성의 현재 값에서 해당 값을 검색합니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DateTimeEditor">
      <summary>이 일시 편집기는 <see cref="T:System.Drawing.Design.UITypeEditor" /> 개체를 시각적으로 편집하기에 적합한 <see cref="T:System.DateTime" />입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DateTimeEditor.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.DateTimeEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DateTimeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>GetEditorStyle에서 제공된 편집기 스타일을 사용하여 지정된 개체 값을 편집합니다. 필요한 편집 서비스를 얻을 수 있도록 서비스 공급자가 제공됩니다.</summary>
      <param name="context">추가 컨텍스트 정보를 제공하는 데 사용할 수 있는 형식 설명자 컨텍스트입니다.</param>
      <param name="provider">편집 서비스를 가져오는 데 사용할 수 있는 서비스 공급자 개체입니다.</param>
      <param name="value">편집 중인 값의 인스턴스입니다.</param>
      <returns>개체의 새 값입니다. 개체의 값을 변경하지 않은 경우 여기서는 전달된 것과 동일한 개체를 반환해야 합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DateTimeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="Overload:System.ComponentModel.Design.DateTimeEditor.EditValue" /> 메서드의 편집 스타일을 검색합니다. 이 메서드가 지원되지 않는 경우에는 None이 반환됩니다.</summary>
      <param name="context">추가 컨텍스트 정보를 제공하는 데 사용할 수 있는 형식 설명자 컨텍스트입니다.</param>
      <returns>제공된 편집 스타일을 나타내는 <see langword="enum" /> 값입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionHeaderItem">
      <summary>스마트 태그 패널의 정적 머리글 항목을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionHeaderItem.#ctor(System.String)">
      <summary>제공된 이름 문자열을 사용하여 <see cref="T:System.ComponentModel.Design.DesignerActionHeaderItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="displayName">머리글에 표시할 텍스트입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionHeaderItem.#ctor(System.String,System.String)">
      <summary>제공된 이름 및 범주 문자열을 사용하여 <see cref="T:System.ComponentModel.Design.DesignerActionHeaderItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="displayName">머리글에 표시할 텍스트입니다.</param>
      <param name="category">패널 항목의 그룹화를 정의하는 대/소문자 구분 <see cref="T:System.String" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionItem">
      <summary>스마트 태그 패널의 패널 항목을 나타내는 형식에 대한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionItem.#ctor(System.String,System.String,System.String)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="displayName">이 항목에 대한 패널 텍스트입니다.</param>
      <param name="category">패널 항목의 그룹화를 정의하는 대/소문자 구분 <see cref="T:System.String" />입니다.</param>
      <param name="description">이 항목에 대한 추가 텍스트로서 도구 설명이나 상태 표시줄에 사용할 수 있습니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionItem.AllowAssociate">
      <summary>동일한 <see cref="P:System.ComponentModel.Design.DesignerActionItem.Category" /> 속성 값을 갖는 항목 그룹에 이 항목을 배치할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>항목을 그룹화할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionItem.Category">
      <summary>항목에 대한 그룹 이름을 가져옵니다.</summary>
      <returns>항목이 속한 그룹을 나타내는 문자열입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionItem.Description">
      <summary>항목에 대한 추가 텍스트를 가져옵니다.</summary>
      <returns>항목에 대한 설명 텍스트를 포함하는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionItem.DisplayName">
      <summary>이 항목에 대한 텍스트를 가져옵니다.</summary>
      <returns>항목의 표시 텍스트를 포함하는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionItem.Properties">
      <summary>프로그래머가 정의한 키/값 쌍을 저장하는 데 사용할 수 있는 컬렉션에 대한 참조를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" />를 구현하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionItem.ShowInSourceView">
      <summary>이 항목이 소스 코드 뷰에 나타나는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>이 항목이 소스 코드 뷰에 나타나는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionItemCollection">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionItemCollection.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionItemCollection.Add(System.ComponentModel.Design.DesignerActionItem)">
      <summary>제공된 <see cref="T:System.ComponentModel.Design.DesignerActionItem" />를 현재 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.ComponentModel.Design.DesignerActionItem" />입니다.</param>
      <returns>값이 추가된 <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" /> 인덱스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionItemCollection.Contains(System.ComponentModel.Design.DesignerActionItem)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" />에 특정 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerActionItem" />에서 찾을 <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" />입니다.</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" />에 지정된 값이 포함된 경우 <see langword="true" />이고, 그렇지 않은 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionItemCollection.CopyTo(System.ComponentModel.Design.DesignerActionItem[],System.Int32)">
      <summary>지정한 배열 인덱스부터 현재 컬렉션의 요소를 제공된 배열에 복사합니다.</summary>
      <param name="array">현재 컬렉션에서 복사한 요소의 대상인 1차원 <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionItemCollection.IndexOf(System.ComponentModel.Design.DesignerActionItem)">
      <summary>컬렉션에 있는 특정 항목의 인덱스를 확인합니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.ComponentModel.Design.DesignerActionItem" />입니다.</param>
      <returns>
        <paramref name="value" />가 있으면 전체 <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" />에서 맨 처음 발견되는 값의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionItemCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerActionItem)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" />의 지정된 인덱스에 요소를 삽입합니다.</summary>
      <param name="index">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value">삽입할 <see cref="T:System.ComponentModel.Design.DesignerActionItem" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionItemCollection.Remove(System.ComponentModel.Design.DesignerActionItem)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerActionItem" />에서 제거할 <see cref="T:System.ComponentModel.Design.DesignerActionItemCollection" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionItemCollection.Item(System.Int32)">
      <summary>지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index">요소의 인덱스(0부터 시작)입니다.</param>
      <returns>지정한 인덱스에 있는 <see cref="T:System.ComponentModel.Design.DesignerActionItem" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionList">
      <summary>스마트 태그 패널을 만드는 데 사용되는 항목의 목록을 정의하는 형식에 대한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionList.#ctor(System.ComponentModel.IComponent)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionList" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.Design.DesignerActionList" />와 관련된 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionList.GetService(System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionList" />와 연결된 구성 요소가 제공한 서비스를 나타내는 개체를 반환합니다.</summary>
      <param name="serviceType">
        <see cref="T:System.ComponentModel.Component" />에서 제공하는 서비스입니다.</param>
      <returns>
        <see cref="T:System.Object" />에서 제공하는 서비스를 나타내는 <see cref="T:System.ComponentModel.Component" />입니다. <see cref="T:System.ComponentModel.Component" />가 지정된 서비스를 제공하지 않으면 이 값이 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionList.GetSortedActionItems">
      <summary>이 목록에 포함된 <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> 개체의 컬렉션을 반환합니다.</summary>
      <returns>이 목록의 항목을 포함하는 <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> 배열입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionList.AutoShow">
      <summary>스마트 태그 패널이 만들어졌을 때 자동으로 표시될지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>해당 구성 요소가 만들어졌을 때 패널을 표시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionList.Component">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionList" />와 관련된 구성 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerActionList" />와 관련된 구성 요소입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionListCollection">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionList" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.#ctor">
      <summary>기본 설정을 포함하는 <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.#ctor(System.ComponentModel.Design.DesignerActionList[])">
      <summary>지정한 패널 항목을 사용하여 <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 채울 <see cref="T:System.ComponentModel.Design.DesignerActionList" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.Add(System.ComponentModel.Design.DesignerActionList)">
      <summary>제공된 <see cref="T:System.ComponentModel.Design.DesignerActionList" />를 현재 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.ComponentModel.Design.DesignerActionList" />입니다.</param>
      <returns>컬렉션의 내부 목록에 새 요소가 삽입되는 위치입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.AddRange(System.ComponentModel.Design.DesignerActionList[])">
      <summary>제공된 <see cref="T:System.ComponentModel.Design.DesignerActionList" /> 배열의 요소를 현재 컬렉션의 끝에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.ComponentModel.Design.DesignerActionList" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.AddRange(System.ComponentModel.Design.DesignerActionListCollection)">
      <summary>제공된 <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" />의 요소를 현재 컬렉션의 끝에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.Contains(System.ComponentModel.Design.DesignerActionList)">
      <summary>특정 값이 컬렉션에 포함되는지 여부를 나타냅니다.</summary>
      <param name="value">검색할 <see cref="T:System.ComponentModel.Design.DesignerActionList" />입니다.</param>
      <returns>컬렉션에 지정한 값이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.CopyTo(System.ComponentModel.Design.DesignerActionList[],System.Int32)">
      <summary>지정한 배열 인덱스부터 현재 컬렉션의 요소를 제공된 배열에 복사합니다.</summary>
      <param name="array">현재 컬렉션에서 복사된 요소의 대상인 <see cref="T:System.ComponentModel.Design.DesignerActionList" /> 형식의 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우  
  
또는 
현재 컬렉션의 요소 수가 <paramref name="index" />에서 대상 배열 끝까지 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.InvalidCastException">다운캐스팅 실패로 인해 대상 배열의 형식에 현재 컬렉션의 요소를 캐스팅하는 동안 문제가 발생한 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.IndexOf(System.ComponentModel.Design.DesignerActionList)">
      <summary>컬렉션에 있는 특정 항목의 인덱스를 확인합니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.ComponentModel.Design.DesignerActionList" />입니다.</param>
      <returns>내부 목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerActionList)">
      <summary>제공된 <see cref="T:System.ComponentModel.Design.DesignerActionList" />를 컬렉션의 지정된 위치에 삽입합니다.</summary>
      <param name="index">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value">컬렉션에 삽입할 <see cref="T:System.ComponentModel.Design.DesignerActionList" />입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작거나 현재 컬렉션의 요소 수보다 큰 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.OnValidate(System.Object)">
      <summary>값의 유효성을 검사할 때 추가로 사용자 지정 프로세스를 수행합니다.</summary>
      <param name="value">유효성을 검사할 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListCollection.Remove(System.ComponentModel.Design.DesignerActionList)">
      <summary>컬렉션에서 맨 처음 발견되는 특정 <see cref="T:System.ComponentModel.Design.DesignerActionList" />를 제거합니다.</summary>
      <param name="value">현재 컬렉션에서 제거할 <see cref="T:System.ComponentModel.Design.DesignerActionList" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionListCollection.Item(System.Int32)">
      <summary>지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index">요소의 인덱스(0부터 시작)입니다.</param>
      <returns>지정한 인덱스에 있는 <see cref="T:System.ComponentModel.Design.DesignerActionList" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionListsChangedEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionListsChangedEventArgs.#ctor(System.Object,System.ComponentModel.Design.DesignerActionListsChangedType,System.ComponentModel.Design.DesignerActionListCollection)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionListsChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="relatedObject">컬렉션과 연결된 개체입니다.</param>
      <param name="changeType">컬렉션에서 <see cref="T:System.ComponentModel.Design.DesignerActionList" />가 추가되었는지 또는 제거되었는지 여부를 지정하는 값입니다.</param>
      <param name="actionLists">작업이 적용된 후 목록 요소의 컬렉션입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionListsChangedEventArgs.ActionLists">
      <summary>이 이벤트와 연결된 <see cref="T:System.ComponentModel.Design.DesignerActionList" /> 개체의 컬렉션을 가져옵니다.</summary>
      <returns>컬렉션의 현재 상태를 나타내는 <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionListsChangedEventArgs.ChangeType">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionList" /> 개체의 컬렉션에서 요소가 추가되었는지 또는 제거되었는지 여부를 나타내는 플래그를 가져옵니다.</summary>
      <returns>변경 형식을 나타내는 <see cref="T:System.ComponentModel.Design.DesignerActionListsChangedType" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionListsChangedEventArgs.RelatedObject">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionList" /> 개체의 컬렉션과 연결된 개체를 가져옵니다.</summary>
      <returns>관리되는 <see cref="T:System.Object" />과 연결된 <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionListsChangedEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged" />의 <see cref="T:System.ComponentModel.Design.DesignerActionService" /> 이벤트를 처리할 메서드를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.DesignerActionListsChangedEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionListsChangedType">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionList" /> 개체의 컬렉션에서 발생하는 변경 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.DesignerActionListsChangedType.ActionListsAdded">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionList" /> 개체가 컬렉션에 하나 이상 추가되었습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.DesignerActionListsChangedType.ActionListsRemoved">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionList" /> 개체가 컬렉션에서 하나 이상 제거되었습니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionMethodItem">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionList" />에서 파생된 클래스의 메서드에 연결된 스마트 태그 패널 항목을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String)">
      <summary>지정된 메서드 이름과 표시 이름을 사용하여 <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionList">이 항목과 연결된 메서드가 포함된 <see cref="T:System.ComponentModel.Design.DesignerActionList" />입니다.</param>
      <param name="memberName">
        <see cref="T:System.ComponentModel.Design.DesignerActionList" />에서 파생된 클래스에 속한 메서드의 대/소문자 구분 이름으로, 이 메서드는 패널 항목을 통해 호출됩니다.</param>
      <param name="displayName">이 항목에 대한 패널 텍스트입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.Boolean)">
      <summary>지정된 메서드 이름과 표시 이름, 그리고 다른 사용자 인터페이스 컨텍스트에 해당 항목을 표시할지 여부를 나타내는 플래그를 사용하여 <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionList">이 항목과 연결된 메서드가 포함된 <see cref="T:System.ComponentModel.Design.DesignerActionList" />입니다.</param>
      <param name="memberName">
        <see cref="T:System.ComponentModel.Design.DesignerActionList" />에서 파생된 클래스에 속한 메서드의 대/소문자 구분 이름으로, 이 메서드는 패널 항목을 통해 호출됩니다.</param>
      <param name="displayName">이 항목에 대한 패널 텍스트입니다.</param>
      <param name="includeAsDesignerVerb">연결된 메서드를 디자이너 동사로도 처리할지 여부를 지정하는 플래그입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.String)">
      <summary>지정된 메서드 이름, 표시 이름 및 범주 이름을 사용하여 <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionList">이 항목과 연결된 메서드가 포함된 <see cref="T:System.ComponentModel.Design.DesignerActionList" />입니다.</param>
      <param name="memberName">
        <see cref="T:System.ComponentModel.Design.DesignerActionList" />에서 파생된 클래스에 속한 메서드의 대/소문자 구분 이름으로, 이 메서드는 패널 항목을 통해 호출됩니다.</param>
      <param name="displayName">이 항목에 대한 패널 텍스트입니다.</param>
      <param name="category">패널에 있는 비슷한 항목들을 그룹화하는 데 사용되는 대/소문자 구분 <see cref="T:System.String" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.String,System.Boolean)">
      <summary>지정된 메서드 이름, 표시 이름, 범주 이름, 그리고 다른 사용자 인터페이스 컨텍스트에 해당 항목을 표시할지 여부를 나타내는 플래그를 사용하여 <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionList">이 항목과 연결된 메서드가 포함된 <see cref="T:System.ComponentModel.Design.DesignerActionList" />입니다.</param>
      <param name="memberName">
        <see cref="T:System.ComponentModel.Design.DesignerActionList" />에서 파생된 클래스에 속한 메서드의 대/소문자 구분 이름으로, 이 메서드는 패널 항목을 통해 호출됩니다.</param>
      <param name="displayName">이 항목에 대한 패널 텍스트입니다.</param>
      <param name="category">패널에 있는 비슷한 항목들을 그룹화하는 데 사용되는 대/소문자 구분 <see cref="T:System.String" />입니다.</param>
      <param name="includeAsDesignerVerb">연결된 메서드를 연결된 구성 요소에 대한 디자이너 동사로도 처리할지 여부를 지정하는 플래그입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.String,System.String)">
      <summary>지정된 메서드 이름, 범주 이름, 표시 텍스트 및 설명 텍스트를 사용하여 <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionList">이 항목과 연결된 메서드가 포함된 <see cref="T:System.ComponentModel.Design.DesignerActionList" />입니다.</param>
      <param name="memberName">
        <see cref="T:System.ComponentModel.Design.DesignerActionList" />에서 파생된 클래스에 속한 메서드의 대/소문자 구분 이름으로, 이 메서드는 패널 항목을 통해 호출됩니다.</param>
      <param name="displayName">이 항목에 대한 패널 텍스트입니다.</param>
      <param name="category">패널에 있는 비슷한 항목들을 그룹화하는 데 사용되는 대/소문자 구분 <see cref="T:System.String" />입니다.</param>
      <param name="description">이 항목에 대한 추가 텍스트로서 도구 설명이나 상태 표시줄에 사용됩니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionMethodItem.#ctor(System.ComponentModel.Design.DesignerActionList,System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>지정된 메서드 이름, 범주 이름, 표시 텍스트, 설명 텍스트, 그리고 다른 사용자 인터페이스 컨텍스트에 해당 항목을 표시할지 여부를 나타내는 플래그를 사용하여 <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionList">이 항목과 연결된 메서드가 포함된 <see cref="T:System.ComponentModel.Design.DesignerActionList" />입니다.</param>
      <param name="memberName">
        <see cref="T:System.ComponentModel.Design.DesignerActionList" />에서 파생된 클래스에 속한 메서드의 대/소문자 구분 이름으로, 이 메서드는 패널 항목을 통해 호출됩니다.</param>
      <param name="displayName">이 항목에 대한 패널 텍스트입니다.</param>
      <param name="category">패널에 있는 비슷한 항목들을 그룹화하는 데 사용되는 대/소문자 구분 <see cref="T:System.String" />입니다.</param>
      <param name="description">이 항목에 대한 추가 텍스트로서 도구 설명이나 상태 표시줄에 사용됩니다.</param>
      <param name="includeAsDesignerVerb">연결된 메서드를 연결된 구성 요소에 대한 디자이너 동사로도 처리할지 여부를 지정하는 플래그입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionMethodItem.Invoke">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" />에 연결된 메서드를 프로그래밍 방식으로 실행합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.Design.DesignerActionMethodItem.MemberName" />에 이름이 지정된 메서드를 찾을 수 없는 경우</exception>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionMethodItem.IncludeAsDesignerVerb">
      <summary>다른 사용자 인터페이스 컨텍스트에 <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" />을 표시할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>바로 가기 메뉴에 이 항목을 사용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionMethodItem.MemberName">
      <summary>이 <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" />에 연결된 메서드의 이름을 가져옵니다.</summary>
      <returns>연결된 메서드의 이름을 포함하는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionMethodItem.RelatedComponent">
      <summary>현재 패널에 <see cref="T:System.ComponentModel.Design.DesignerActionMethodItem" /> 개체를 제공하는 구성 요소를 가져오거나 설정합니다.</summary>
      <returns>개체를 제공하는 구성 요소이며, 항목을 제공하는 연결된 디자이너가 있어야 합니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionPropertyItem">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionList" />에서 파생된 클래스의 속성과 연결된 패널 항목을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionPropertyItem.#ctor(System.String,System.String)">
      <summary>지정된 속성 이름과 표시 이름을 사용하여 <see cref="T:System.ComponentModel.Design.DesignerActionPropertyItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="memberName">이 패널 항목에 연결된 속성의 이름이며 대/소문자를 구분합니다.</param>
      <param name="displayName">이 항목에 대한 패널 텍스트입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionPropertyItem.#ctor(System.String,System.String,System.String)">
      <summary>지정된 속성 이름, 범주 이름 및 표시 텍스트를 사용하여 <see cref="T:System.ComponentModel.Design.DesignerActionPropertyItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="memberName">이 패널 항목에 연결된 속성의 이름이며 대/소문자를 구분합니다.</param>
      <param name="displayName">이 항목에 대한 패널 텍스트입니다.</param>
      <param name="category">패널에 있는 비슷한 항목들을 그룹화하는 데 사용되는 대/소문자 구분 <see cref="T:System.String" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionPropertyItem.#ctor(System.String,System.String,System.String,System.String)">
      <summary>지정된 속성 이름, 범주 이름, 표시 텍스트 및 설명 텍스트를 사용하여 <see cref="T:System.ComponentModel.Design.DesignerActionPropertyItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="memberName">이 패널 항목에 연결된 속성의 이름이며 대/소문자를 구분합니다.</param>
      <param name="displayName">이 항목에 대한 패널 텍스트입니다.</param>
      <param name="category">패널에 있는 비슷한 항목들을 그룹화하는 데 사용되는 대/소문자 구분 <see cref="T:System.String" />입니다.</param>
      <param name="description">이 항목에 대한 추가 텍스트로서 도구 설명이나 상태 표시줄에 사용됩니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionPropertyItem.MemberName">
      <summary>이 항목이 연결된 속성의 이름을 가져옵니다.</summary>
      <returns>연결된 속성의 이름을 포함하는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionPropertyItem.RelatedComponent">
      <summary>현재 패널에 항목을 제공하는 구성 요소를 가져오거나 설정합니다.</summary>
      <returns>항목을 제공하는 구성 요소이며, <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> 개체를 제공하는 연결된 디자이너가 있어야 합니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionService">
      <summary>구성 요소의 <see cref="T:System.ComponentModel.Design.DesignerActionItem" /> 개체 컬렉션을 관리하는 디자인 타임 서비스를 설정합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.DesignerActionService.DesignerActionListsChanged">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionList" />가 구성 요소에 대해 제거되거나 추가되면 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.#ctor(System.IServiceProvider)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="serviceProvider">현재 디자인 타임 환경의 서비스 공급자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Add(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionList)">
      <summary>관리되는 스마트 태그의 현재 컬렉션에 <see cref="T:System.ComponentModel.Design.DesignerActionList" />를 추가합니다.</summary>
      <param name="comp">스마트 태그에 연결할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <param name="actionList">추가할 새 스마트 태그 항목이 포함된 <see cref="T:System.ComponentModel.Design.DesignerActionList" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Add(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)">
      <summary>관리되는 스마트 태그의 현재 컬렉션에 <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" />를 추가합니다.</summary>
      <param name="comp">스마트 태그에 연결할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <param name="designerActionListCollection">추가할 새 스마트 태그 항목이 포함된 <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Clear">
      <summary>모든 구성 요소의 관리를 해제하고 밀어넣기 모델 스마트 태그 목록을 모두 지웁니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Contains(System.ComponentModel.IComponent)">
      <summary>현재 스마트 태그 서비스가 특정 구성 요소의 작업 목록을 관리하는지 여부를 확인합니다.</summary>
      <param name="comp">검색할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comp" />이(가) <see langword="null" />인 경우</exception>
      <returns>현재 서비스에서 구성 요소를 관리하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionService" /> 클래스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionService" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.GetComponentActions(System.ComponentModel.IComponent)">
      <summary>구성 요소에 연결된 스마트 태그 항목 목록의 컬렉션을 반환합니다.</summary>
      <param name="component">스마트 태그에 연결된 구성 요소입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comp" />이(가) <see langword="null" />인 경우</exception>
      <returns>지정된 구성 요소에 대한 스마트 태그의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.GetComponentActions(System.ComponentModel.IComponent,System.Windows.Forms.Design.ComponentActionsType)">
      <summary>구성 요소와 연결 된 지정 된 형식의 디자이너 작업 항목 목록 컬렉션을 반환 합니다.</summary>
      <param name="component">DesignerActions가 연결 된 구성 요소입니다.</param>
      <param name="type">
        <see cref="T:System.ComponentModel.Design.ComponentActionsType" />연결 된 디자이너 작업을 필터링 하는 데 사용 하는입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" />이(가) <see langword="null" />인 경우</exception>
      <returns>지정 된 구성 요소에 대해 지정 된 형식의 디자이너 작업 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.GetComponentDesignerActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)">
      <summary>구성 요소에 연결된 끌어오기 모델 스마트 태그를 검색합니다.</summary>
      <param name="component">스마트 태그에 연결된 구성 요소입니다.</param>
      <param name="actionLists">연결된 스마트 태그를 추가할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.GetComponentServiceActions(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionListCollection)">
      <summary>구성 요소에 연결된 밀어넣기 모델 스마트 태그를 검색합니다.</summary>
      <param name="component">스마트 태그에 연결된 구성 요소입니다.</param>
      <param name="actionLists">연결된 스마트 태그를 추가할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.Design.DesignerActionList)">
      <summary>현재 서비스에서 관리하는 모든 구성 요소에서 특정 스마트 태그 목록을 제거합니다.</summary>
      <param name="actionList">제거할 스마트 태그 목록입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="actionList" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.IComponent)">
      <summary>지정된 구성 요소에 연결된 모든 스마트 태그 목록을 제거합니다.</summary>
      <param name="comp">스마트 태그를 분리할 구성 요소입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comp" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionService.Remove(System.ComponentModel.IComponent,System.ComponentModel.Design.DesignerActionList)">
      <summary>특정 구성 요소에서 특정 스마트 태그 목록을 제거합니다.</summary>
      <param name="comp">스마트 태그를 분리할 구성 요소입니다.</param>
      <param name="actionList">제거할 스마트 태그 목록입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionTextItem">
      <summary>스마트 태그 패널의 정적 텍스트 항목을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionTextItem.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionTextItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="displayName">이 항목에 대한 패널 텍스트입니다.</param>
      <param name="category">패널의 비슷한 항목을 그룹화하는 데 사용되는 범주입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionUIService">
      <summary>스마트 태그 패널에 대한 UI(사용자 인터페이스)를 관리합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.DesignerActionUIService.DesignerActionUIStateChange">
      <summary>스마트 태그 패널을 표시하거나 숨기도록 요청되면 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionUIService.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionUIService" /> 클래스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionUIService.HideUI(System.ComponentModel.IComponent)">
      <summary>구성 요소에 대한 스마트 태그 패널을 숨깁니다.</summary>
      <param name="component">스마트 태그 패널을 숨길 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionUIService.Refresh(System.ComponentModel.IComponent)">
      <summary>스마트 태그 패널을 업데이트합니다.</summary>
      <param name="component">새로 고칠 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionUIService.ShouldAutoShow(System.ComponentModel.IComponent)">
      <summary>스마트 태그 패널을 자동으로 표시할지 여부를 나타냅니다.</summary>
      <param name="component">자동으로 표시할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <returns>스마트 태그 패널을 자동으로 표시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionUIService.ShowUI(System.ComponentModel.IComponent)">
      <summary>구성 요소에 대한 스마트 태그 패널을 표시합니다.</summary>
      <param name="component">스마트 태그 패널을 표시할 구성 요소입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionUIStateChangeEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.DesignerActionUIService.DesignerActionUIStateChange" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerActionUIStateChangeEventArgs.#ctor(System.Object,System.ComponentModel.Design.DesignerActionUIStateChangeType)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerActionUIStateChangeEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="relatedObject">패널과 연결된 개체입니다.</param>
      <param name="changeType">패널이 표시되어 있는지 또는 숨겨져 있는지 지정하는 값입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionUIStateChangeEventArgs.ChangeType">
      <summary>스마트 태그 패널이 표시되어 있는지 또는 숨겨져 있는지 나타내는 플래그를 가져옵니다.</summary>
      <returns>패널 상태를 나타내는 <see cref="T:System.ComponentModel.Design.DesignerActionUIStateChangeType" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerActionUIStateChangeEventArgs.RelatedObject">
      <summary>스마트 태그 패널과 연결된 개체를 가져옵니다.</summary>
      <returns>스마트 태그 패널과 연결된 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionUIStateChangeEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.Design.DesignerActionUIService.DesignerActionUIStateChange" />의 <see cref="T:System.ComponentModel.Design.DesignerActionUIService" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트를 발생시킨 <see cref="T:System.Object" />입니다.</param>
      <param name="e">이벤트 관련 정보입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerActionUIStateChangeType">
      <summary>스마트 태그 패널의 표시 상태를 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.DesignerActionUIStateChangeType.Hide">
      <summary>스마트 태그 패널이 숨겨져 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.DesignerActionUIStateChangeType.Refresh">
      <summary>스마트 태그 패널을 새로 고치고 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.DesignerActionUIStateChangeType.Show">
      <summary>스마트 태그 패널이 표시되어 있습니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCommandSet">
      <summary>
        <see cref="T:System.ComponentModel.Design.ComponentDesigner" />에서 파생되지 않고 스마트 태그나 디자이너 동사 기능을 제공하는 디자인 타임 도구의 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCommandSet.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerCommandSet" /> 클래스의 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCommandSet.GetCommands(System.String)">
      <summary>명령 개체의 컬렉션을 반환합니다.</summary>
      <param name="name">반환할 컬렉션의 형식이며 <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" /> 또는 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />을 나타냅니다.</param>
      <returns>명령 개체의 지정된 형식(<see cref="T:System.ComponentModel.Design.DesignerActionList" /> 또는 <see cref="T:System.ComponentModel.Design.DesignerVerb" />)을 포함하는 컬렉션입니다. 기본 구현은 항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCommandSet.ActionLists">
      <summary>디자인된 구성 요소에 연결된 모든 스마트 태그의 컬렉션을 가져옵니다.</summary>
      <returns>연결되어 있는 디자인된 구성 요소의 스마트 태그가 있는 <see cref="T:System.ComponentModel.Design.DesignerActionListCollection" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCommandSet.Verbs">
      <summary>디자인된 구성 요소에 연결된 모든 디자이너 동사의 컬렉션을 가져옵니다.</summary>
      <returns>연결되어 있는 디자인된 구성 요소의 디자이너 동사가 있는 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignSurface">
      <summary>구성 요소를 디자인하기 위한 사용자 인터페이스를 제공합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurface.Disposed">
      <summary>디자인 화면이 삭제되면 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurface.Flushed">
      <summary>
        <see cref="M:System.ComponentModel.Design.DesignSurface.Flush" />의 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 메서드가 호출되면 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurface.Loaded">
      <summary>디자이너 로드가 완료되면 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurface.Loading">
      <summary>디자이너가 로드되려고 할 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurface.Unloaded">
      <summary>디자이너가 언로드를 완료하면 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurface.Unloading">
      <summary>디자이너가 언로드되려고 할 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurface.ViewActivated">
      <summary>
        <see cref="M:System.ComponentModel.Design.IDesignerHost.Activate" /> 메서드가 <see cref="T:System.ComponentModel.Design.IDesignerHost" />에서 호출되면 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignSurface" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignSurface" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parentProvider">부모 서비스 공급자이거나, 서비스 확인에 사용되는 부모가 없으면 <see langword="null" />입니다.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider,System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignSurface" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parentProvider">부모 서비스 공급자이거나, 서비스 확인에 사용되는 부모가 없으면 <see langword="null" />입니다.</param>
      <param name="rootComponentType">만들 루트 구성 요소의 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rootComponent" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.#ctor(System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignSurface" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="rootComponentType">만들 루트 구성 요소의 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rootComponent" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.BeginLoad(System.ComponentModel.Design.Serialization.DesignerLoader)">
      <summary>지정된 디자이너 로더를 사용하여 로드 프로세스를 시작합니다.</summary>
      <param name="loader">디자이너 로드에 사용할 디자이너 로더입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loader" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.BeginLoad(System.Type)">
      <summary>로드 프로세스를 시작합니다.</summary>
      <param name="rootComponentType">디자인 모드에서 만들 구성 요소의 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rootComponentType" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.CreateComponent(System.Type)">
      <summary>구성 요소의 인스턴스를 만듭니다.</summary>
      <param name="componentType">만들 구성 요소의 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</exception>
      <returns>새로 만들어진 구성 요소입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.CreateDesigner(System.ComponentModel.IComponent,System.Boolean)">
      <summary>구성 요소가 컨테이너에 추가되면 디자이너를 만듭니다.</summary>
      <param name="component">디자이너가 만들어질 구성 요소입니다.</param>
      <param name="rootDesigner">루트 디자이너를 만들려면 <see langword="true" />이고, 일반 디자이너를 만들려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</exception>
      <returns>요청한 디자이너의 인스턴스이거나, 일치하는 디자이너를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.CreateInstance(System.Type)">
      <summary>지정된 형식의 인스턴스를 만듭니다.</summary>
      <param name="type">만들 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</exception>
      <returns>새로 만든 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent)">
      <summary>중첩 컨트롤 또는 구성 요소에 적합한 컨테이너를 만듭니다.</summary>
      <param name="owningComponent">중첩된 컨테이너를 관리하는 구성 요소입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owningComponent" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</exception>
      <returns>중첩된 컨테이너입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent,System.String)">
      <summary>중첩 컨트롤 또는 구성 요소에 적합한 컨테이너를 만듭니다.</summary>
      <param name="owningComponent">중첩된 컨테이너를 관리하는 구성 요소입니다.</param>
      <param name="containerName">중첩된 컨테이너의 추가 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owningComponent" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</exception>
      <returns>중첩된 컨테이너입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignSurface" />에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignSurface" />에서 사용하는 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.Flush">
      <summary>디자인 화면의 변경 내용을 serialize합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.GetService(System.Type)">
      <summary>서비스 컨테이너에서 서비스를 가져옵니다.</summary>
      <param name="serviceType">검색할 서비스의 형식입니다.</param>
      <returns>
        <paramref name="serviceType" />을 구현하는 개체이거나 해당 항목의 파생 클래스가 되는 개체입니다. 서비스 컨테이너에 서비스가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.OnLoaded(System.ComponentModel.Design.LoadedEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.Design.DesignSurface.Loaded" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.LoadedEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.OnLoading(System.EventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.Design.DesignSurface.Loading" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.OnUnloaded(System.EventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.Design.DesignSurface.Unloaded" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.OnUnloading(System.EventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.Design.DesignSurface.Unloading" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurface.OnViewActivate(System.EventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.Design.DesignSurface.ViewActivated" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurface.ComponentContainer">
      <summary>디자인 화면 내의 <see cref="T:System.ComponentModel.IContainer" /> 구현을 가져옵니다.</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</exception>
      <returns>디자인 화면 내의 <see cref="T:System.ComponentModel.IContainer" /> 구현입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurface.DtelLoading">
      <summary>디자인 타임 오류 목록이 로드되고 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 경우는 디자인 타임 오류 목록 이 고, 그렇지 않으면 로드 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurface.IsLoaded">
      <summary>디자인 화면이 현재 로드되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>디자인 화면이 현재 로드되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurface.LoadErrors">
      <summary>로드 오류의 컬렉션이나 void 컬렉션을 반환합니다.</summary>
      <returns>로드 오류의 <see cref="T:System.Collections.ICollection" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurface.ServiceContainer">
      <summary>서비스 컨테이너를 가져옵니다.</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</exception>
      <returns>디자인 화면에 포함된 디자이너에 모든 서비스를 제공하는 서비스 컨테이너입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurface.View">
      <summary>루트 디자이너에 대한 뷰를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">디자인 화면이 로드되고 있지 않거나, 디자이너 로더가 아직 루트 디자이너를 만들지 않았거나, 디자인 화면이 로드를 완료했지만 실패한 경우. 자세한 내용은 <see cref="P:System.Exception.InnerException" />을 참조하십시오.</exception>
      <exception cref="T:System.NotSupportedException">디자이너가 로드되었지만 이 디자인 화면과 호환되는 뷰를 제공하지 않습니다.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />에 연결된 <see cref="T:System.ComponentModel.Design.DesignSurface" />가 삭제된 경우</exception>
      <returns>루트 디자이너에 대한 뷰입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignSurfaceCollection">
      <summary>디자인 화면의 컬렉션을 포함합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurfaceCollection.CopyTo(System.ComponentModel.Design.DesignSurface[],System.Int32)">
      <summary>지정된 대상 인덱스에서 시작하는 지정된 <see cref="T:System.ComponentModel.Design.DesignSurface" /> 배열에 컬렉션 멤버를 복사합니다.</summary>
      <param name="array">컬렉션 멤버를 복사할 배열입니다.</param>
      <param name="index">복사를 시작할 대상 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurfaceCollection.GetEnumerator">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignSurfaceCollection" /> 인스턴스에서 반복할 수 있는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignSurfaceCollection" /> 인스턴스에 대한 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurfaceCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" /> 메서드를 참조하세요.</summary>
      <param name="array">
        <see cref="T:System.ComponentModel.Design.DesignSurfaceCollection" />에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">복사를 시작할 <paramref name="array" />의 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurfaceCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 메서드를 참조하세요.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignSurfaceCollection" /> 인스턴스에 대한 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurfaceCollection.Count">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignSurfaceCollection" />의 총 디자인 화면 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignSurfaceCollection" />의 총 요소 수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurfaceCollection.Item(System.Int32)">
      <summary>지정된 인덱스에 있는 디자인 화면을 가져옵니다.</summary>
      <param name="index">반환할 디자인 화면의 인덱스입니다.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="index" />에 의해 지정된 디자인 화면이 지원되지 않는 경우</exception>
      <returns>지정된 인덱스에 있는 디자인 화면입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurfaceCollection.System#Collections#ICollection#Count">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="P:System.Collections.ICollection.Count" /> 속성을 참조하세요.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignSurfaceCollection" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurfaceCollection.System#Collections#ICollection#IsSynchronized">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="P:System.Collections.ICollection.IsSynchronized" /> 속성을 참조하세요.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.ComponentModel.Design.DesignSurfaceCollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurfaceCollection.System#Collections#ICollection#SyncRoot">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="P:System.Collections.ICollection.SyncRoot" /> 속성을 참조하세요.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignSurfaceCollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignSurfaceEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceCreated" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurfaceEventArgs.#ctor(System.ComponentModel.Design.DesignSurface)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignSurfaceEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="surface">만들고 있는 디자인 화면입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="surface" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurfaceEventArgs.Surface">
      <summary>만들고 있는 디자인 화면을 가져옵니다.</summary>
      <returns>만들고 있는 <see cref="T:System.ComponentModel.Design.DesignSurface" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignSurfaceEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceCreated" /> 클래스의 <see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /> 이벤트를 처리할 메서드를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.DesignSurfaceEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignSurfaceManager">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignSurface" /> 개체의 컬렉션을 관리합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurfaceChanged">
      <summary>현재 활성 디자이너가 변경되면 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceCreated">
      <summary>디자이너가 만들어지면 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaceDisposed">
      <summary>디자이너가 삭제되면 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.DesignSurfaceManager.SelectionChanged">
      <summary>전역 선택이 변경되면 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurfaceManager.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurfaceManager.#ctor(System.IServiceProvider)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parentProvider">부모 서비스 공급자입니다. 디자인 화면 관리자가 서비스 요청을 확인할 수 없을 경우 이 공급자로 서비스 요청이 전달됩니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface">
      <summary>디자인 화면의 인스턴스를 만듭니다.</summary>
      <returns>새로운 디자인 화면 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurface(System.IServiceProvider)">
      <summary>디자인 화면의 인스턴스를 만듭니다.</summary>
      <param name="parentProvider">부모 서비스 공급자입니다. 먼저 이 공급자에게 서비스를 요청한 후 디자인 화면 관리자 개체에 오류를 위임하는 병합된 서비스 공급자가 새로 만들어집니다. 이 병합된 공급자는 <see cref="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(System.IServiceProvider)" /> 메서드에 전달됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parentProvider" />이(가) <see langword="null" />인 경우</exception>
      <returns>새로운 디자인 화면 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurfaceManager.CreateDesignSurfaceCore(System.IServiceProvider)">
      <summary>디자인 화면을 만드는 구현입니다.</summary>
      <param name="parentProvider">디자인 화면에 전달할 서비스 공급자입니다. <see cref="T:System.ComponentModel.Design.DesignSurfaceManager" />의 인스턴스이거나 <see cref="T:System.IServiceProvider" />를 구현하는 개체이며, <see cref="T:System.ComponentModel.Design.DesignSurfaceManager" /> 클래스의 서비스 공급자와 외부에서 전달된 공급자 사이의 병합을 나타냅니다.</param>
      <returns>새로운 디자인 화면 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignSurfaceManager" />에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurfaceManager.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignSurfaceManager" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignSurfaceManager.GetService(System.Type)">
      <summary>디자인 화면 관리자의 서비스 컨테이너에 있는 서비스를 가져옵니다.</summary>
      <param name="serviceType">검색할 서비스 형식입니다.</param>
      <returns>제공된 서비스 형식을 구현하거나 이 서비스 형식의 파생 클래스인 개체입니다. 서비스 컨테이너에 서비스가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurfaceManager.ActiveDesignSurface">
      <summary>활성화된 디자이너를 가져오거나 설정합니다.</summary>
      <returns>활성화된 디자이너입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurfaceManager.DesignSurfaces">
      <summary>디자인 화면 컬렉션을 가져옵니다.</summary>
      <returns>현재 디자인 화면 관리자에서 호스팅하는 디자인 화면 컬렉션입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer">
      <summary>디자인 화면 관리자의 <see cref="P:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer" />를 가져옵니다.</summary>
      <returns>디자인 화면 관리자의 <see cref="P:System.ComponentModel.Design.DesignSurfaceManager.ServiceContainer" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DisplayMode">
      <summary>
        <see cref="T:System.ComponentModel.Design.ByteViewer" />에서 사용한 디스플레이 모드를 나타내는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.DisplayMode.Ansi">
      <summary>ANSI 형식 디스플레이입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.DisplayMode.Auto">
      <summary>자동으로 디스플레이 모드를 선택하는 디스플레이 모드입니다. 이 모드에서는 바이트가 16진수이거나 인쇄할 수 있는지 여부를 확인하기 위해 바이트를 검사합니다. 바이트가 16진수 형식이면 <see cref="F:System.ComponentModel.Design.DisplayMode.Hexdump" /> 모드가 선택됩니다. 문자가 인쇄할 수 있는 문자 집합과 일치하면 <see cref="F:System.ComponentModel.Design.DisplayMode.Ansi" /> 또는 <see cref="F:System.ComponentModel.Design.DisplayMode.Unicode" /> 디스플레이 모드를 자동으로 선택하는 테스트가 실행됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.DisplayMode.Hexdump">
      <summary>16진수 형식 디스플레이입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.DisplayMode.Unicode">
      <summary>유니코드 형식 디스플레이입니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.EventBindingService">
      <summary>
        <see cref="T:System.ComponentModel.Design.IEventBindingService" /> 인터페이스의 기본 구현입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.#ctor(System.IServiceProvider)">
      <summary>
        <see cref="T:System.ComponentModel.Design.EventBindingService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.Design.EventBindingService" />가 서비스를 쿼리할 서비스 공급자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>고유한 메서드 이름을 만듭니다.</summary>
      <param name="component">메서드 이름을 만들 구성 요소입니다.</param>
      <param name="e">이름을 만들 이벤트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 또는 <paramref name="e" />가 <see langword="null" />인 경우</exception>
      <returns>고유한 메서드 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.FreeMethod(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)">
      <summary>이벤트 처리기에서 특정 메서드를 더 이상 사용하지 않는다는 알림을 제공합니다.</summary>
      <param name="component">메서드가 바인딩될 구성 요소입니다.</param>
      <param name="e">이벤트 처리기에 대한 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <param name="methodName">해제할 메서드 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>호환되는 메서드의 이름 컬렉션을 반환합니다.</summary>
      <param name="e">호환되는 대리자가 포함된 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" />이(가) <see langword="null" />인 경우</exception>
      <returns>호환되는 메서드의 이름인 문자열의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.GetService(System.Type)">
      <summary>서비스 공급자에서 요청한 서비스를 가져옵니다.</summary>
      <param name="serviceType">검색할 서비스의 형식입니다.</param>
      <returns>
        <paramref name="serviceType" />에 의해 지정된 서비스에 대한 참조이거나, 요청한 서비스를 사용할 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.ShowCode">
      <summary>사용자 코드를 표시합니다.</summary>
      <returns>코드를 표시할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)">
      <summary>지정된 메서드에 대한 사용자 코드를 표시합니다.</summary>
      <param name="component">메서드가 바인딩될 구성 요소입니다.</param>
      <param name="e">이벤트 처리기에 대한 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <param name="methodName">코드를 표시할 메서드의 이름입니다.</param>
      <returns>코드를 표시할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.ShowCode(System.Int32)">
      <summary>제공된 줄 번호에 있는 사용자 코드를 표시합니다.</summary>
      <param name="lineNumber">표시할 줄 번호입니다.</param>
      <returns>코드를 표시할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>지정된 구성 요소와 이벤트에 대한 이벤트 처리기 메서드의 고유 이름을 만듭니다.</summary>
      <param name="component">이벤트가 연결된 구성 요소 인스턴스입니다.</param>
      <param name="e">이름을 만들 이벤트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 또는 <paramref name="e" />가 <see langword="null" />인 경우</exception>
      <returns>이 이벤트에 대한 이벤트 처리기의 권장 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>지정된 이벤트와 호환되는 메서드 시그니처를 가진 이벤트 처리기 메서드의 컬렉션을 가져옵니다.</summary>
      <param name="e">호환되는 이벤트 처리기 메서드를 가져올 이벤트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" />이(가) <see langword="null" />인 경우</exception>
      <returns>호환되는 메서드의 이름인 문자열의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary>이벤트를 표시하는 경우 지정된 속성 설명자가 표시하는 이벤트에 대한 <see cref="T:System.ComponentModel.EventDescriptor" />를 가져옵니다.</summary>
      <param name="property">이벤트를 표시하는 속성입니다.</param>
      <returns>속성이 표시하는 이벤트에 대한 <see cref="T:System.ComponentModel.EventDescriptor" />이거나, 속성이 이벤트를 표시하지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary>일련의 이벤트 설명자를 일련의 속성 설명자로 변환합니다.</summary>
      <param name="events">속성으로 변환할 이벤트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="events" />이(가) <see langword="null" />인 경우</exception>
      <returns>이벤트 집합을 설명하는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary>단일 이벤트 설명자를 속성 설명자로 변환합니다.</summary>
      <param name="e">변환할 이벤트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" />이(가) <see langword="null" />인 경우</exception>
      <returns>이벤트를 설명하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode">
      <summary>디자이너에 대한 사용자 코드를 표시합니다.</summary>
      <returns>코드가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>지정된 이벤트에 대한 사용자 코드를 표시합니다.</summary>
      <param name="component">이벤트가 연결된 구성 요소입니다.</param>
      <param name="e">표시할 이벤트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="events" />이(가) <see langword="null" />인 경우</exception>
      <returns>코드가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.System#ComponentModel#Design#IEventBindingService#ShowCode(System.Int32)">
      <summary>지정된 줄에서 디자이너에 대한 사용자 코드를 표시합니다.</summary>
      <param name="lineNumber">캐럿을 놓을 줄 번호입니다.</param>
      <returns>코드가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.UseMethod(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor,System.String)">
      <summary>이벤트 처리기에서 특정 메서드를 사용하고 있다는 알림을 제공합니다.</summary>
      <param name="component">메서드가 바인딩될 구성 요소입니다.</param>
      <param name="e">이벤트 처리기에 대한 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <param name="methodName">메서드의 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.EventBindingService.ValidateMethodName(System.String)">
      <summary>제공된 메서드 이름이 사용 중인 언어나 스크립트에 유효한지 검사합니다.</summary>
      <param name="methodName">유효성을 검사할 메서드 이름입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ExceptionCollection">
      <summary>예외의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ExceptionCollection.#ctor(System.Collections.ArrayList)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ExceptionCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="exceptions">컬렉션을 채울 개체를 포함하는 <see cref="T:System.Exception" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ExceptionCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />을 serialize하는 데 필요한 데이터로 <see cref="T:System.ComponentModel.Design.ExceptionCollection" />를 채웁니다.</summary>
      <param name="info">데이터로 채울 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">이 serialization에 대한 대상입니다(<see cref="T:System.Runtime.Serialization.StreamingContext" /> 참조).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ExceptionCollection.Exceptions">
      <summary>예외의 컬렉션을 나타내는 <see cref="T:System.Exception" /> 개체의 배열을 가져옵니다.</summary>
      <returns>예외의 컬렉션을 나타내는 <see cref="T:System.Exception" /> 배열입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMultitargetHelperService">
      <summary>디자인 타임 환경에서 다중 대상 형식 이름 확인 서비스를 정의합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMultitargetHelperService.GetAssemblyQualifiedName(System.Type)">
      <summary>대상 프레임워크의 형식을 어셈블리 정규화된 이름으로 확인합니다.</summary>
      <param name="type">확인할 형식입니다.</param>
      <returns>대상 프레임워크의 <paramref name="type" />에 대한 <see cref="P:System.Type.AssemblyQualifiedName" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.InheritanceService">
      <summary>상속된 구성 요소를 식별하는 데 사용하는 메서드 집합을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.InheritanceService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>지정된 구성 요소에 의해 상속된 구성 요소를 <see cref="T:System.ComponentModel.Design.InheritanceService" />에 추가합니다.</summary>
      <param name="component">지정된 컨테이너에 추가하기 위해 상속된 구성 요소를 검색할 구성 요소입니다.</param>
      <param name="container">상속된 구성 요소를 추가할 컨테이너입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.AddInheritedComponents(System.Type,System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>지정된 구성 요소에 의해 상속된 지정된 형식의 구성 요소를 <see cref="T:System.ComponentModel.Design.InheritanceService" />에 추가합니다.</summary>
      <param name="type">검색할 기본 형식입니다.</param>
      <param name="component">지정된 컨테이너에 추가하기 위해 상속된 구성 요소를 검색할 구성 요소입니다.</param>
      <param name="container">상속된 구성 요소를 추가할 컨테이너입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.InheritanceService" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Design.InheritanceService" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary>지정된 구성 요소의 상속 특성을 가져옵니다.</summary>
      <param name="component">상속 특성을 검색할 구성 요소입니다.</param>
      <returns>해당 구성 요소가 만들어진 상속 수준을 설명하는 <see cref="T:System.ComponentModel.InheritanceAttribute" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.InheritanceService.IgnoreInheritedMember(System.Reflection.MemberInfo,System.ComponentModel.IComponent)">
      <summary>지정된 멤버를 무시할지 여부를 나타냅니다.</summary>
      <param name="member">확인할 멤버입니다. 이 멤버는 <see cref="T:System.Reflection.FieldInfo" /> 또는 <see cref="T:System.Reflection.MethodInfo" /> 중 하나여야 합니다.</param>
      <param name="component">이 멤버가 바인딩된 구성 요소 인스턴스입니다.</param>
      <returns>지정된 구성 요소가 상속된 구성 요소의 집합에 포함되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.LoadedEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.DesignSurface.Loaded" /> 이벤트에 대한 데이터를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.LoadedEventArgs.#ctor(System.Boolean,System.Collections.ICollection)">
      <summary>
        <see cref="T:System.ComponentModel.Design.LoadedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="succeeded">디자이너 로드가 성공적임을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="errors">디자이너가 로드되는 동안 발생한 오류의 컬렉션입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.LoadedEventArgs.Errors">
      <summary>디자이너가 로드되는 동안 발생한 오류의 컬렉션을 가져옵니다.</summary>
      <returns>디자이너가 로드되는 동안 발생한 오류의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.LoadedEventArgs.HasSucceeded">
      <summary>디자이너 로드가 성공했음을 나타내는 값을 가져옵니다.</summary>
      <returns>디자이너 로드가 성공했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.LoadedEventHandler">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignSurface" /> 클래스의 <see cref="E:System.ComponentModel.Design.DesignSurface.Loaded" /> 이벤트를 처리할 메서드를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.LoadedEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommandsChangedEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.MenuCommandService.MenuCommandsChanged" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandsChangedEventArgs.#ctor(System.ComponentModel.Design.MenuCommandsChangedType,System.ComponentModel.Design.MenuCommand)">
      <summary>
        <see cref="T:System.ComponentModel.Design.MenuCommandsChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="changeType">변경 형식입니다.</param>
      <param name="command">메뉴 명령입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommandsChangedEventArgs.ChangeType">
      <summary>
        <see cref="E:System.ComponentModel.Design.MenuCommandService.MenuCommandsChanged" />를 발생시킨 변경 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.MenuCommandsChangedType" />를 발생시킨 <see cref="E:System.ComponentModel.Design.MenuCommandService.MenuCommandsChanged" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommandsChangedEventArgs.Command">
      <summary>추가, 제거 또는 변경한 명령을 가져옵니다.</summary>
      <returns>추가, 제거 또는 변경된 <see cref="T:System.ComponentModel.Design.MenuCommand" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommandsChangedEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.Design.MenuCommandService.MenuCommandsChanged" />의 <see cref="T:System.ComponentModel.Design.MenuCommandService" /> 이벤트를 처리할 메서드를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.MenuCommandsChangedEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommandsChangedType">
      <summary>관련된 개체의 <see cref="T:System.Windows.Forms.Design.MenuCommands" /> 컬렉션에 발생한 작업의 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.MenuCommandsChangedType.CommandAdded">
      <summary>하나 이상의 명령 개체가 추가되었다고 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.MenuCommandsChangedType.CommandChanged">
      <summary>하나 이상의 명령 상태가 변경되었다고 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.MenuCommandsChangedType.CommandRemoved">
      <summary>하나 이상의 명령이 제거되었다고 지정합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommandService">
      <summary>
        <see cref="T:System.ComponentModel.Design.IMenuCommandService" /> 인터페이스를 구현합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommandService.MenuCommandsChanged">
      <summary>메뉴 명령 상태가 변경되면 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandService.#ctor(System.IServiceProvider)">
      <summary>
        <see cref="T:System.ComponentModel.Design.MenuCommandService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="serviceProvider">이 서비스가 다른 서비스를 가져오는 데 사용하는 서비스 공급자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>메뉴 명령 서비스에 명령 처리기를 추가합니다.</summary>
      <param name="command">추가할 <see cref="T:System.ComponentModel.Design.MenuCommand" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">명령 처리기 <paramref name="command" />가 항상 존재할 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>
        <see cref="T:System.ComponentModel.Design.MenuCommandService" />의 동사 테이블에 동사를 추가합니다.</summary>
      <param name="verb">추가할 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="verb" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandService.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.MenuCommandService" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandService.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Design.MenuCommandService" />에서 사용하는 모든 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandService.EnsureVerbs">
      <summary>동사 목록이 만들어졌는지 확인합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary>제공된 명령 ID에 연결된 <see cref="T:System.ComponentModel.Design.MenuCommand" />를 검색합니다.</summary>
      <param name="commandID">찾을 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</param>
      <returns>제공된 명령에 연결된 <see cref="T:System.ComponentModel.Design.MenuCommand" />이거나, 명령을 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandService.FindCommand(System.Guid,System.Int32)">
      <summary>제공된 명령에 연결된 <see cref="T:System.ComponentModel.Design.MenuCommand" />를 검색합니다.</summary>
      <param name="guid">명령의 GUID입니다.</param>
      <param name="id">명령의 ID입니다.</param>
      <returns>제공된 명령에 연결된 <see cref="T:System.ComponentModel.Design.MenuCommand" />이거나, 명령을 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandService.GetCommandList(System.Guid)">
      <summary>제공된 GUID의 명령 목록을 가져옵니다.</summary>
      <param name="guid">명령 목록의 GUID입니다.</param>
      <returns>명령의 <see cref="T:System.Collections.ICollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandService.GetService(System.Type)">
      <summary>요청한 서비스에 대한 참조를 가져옵니다.</summary>
      <param name="serviceType">검색할 서비스의 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="serviceType" />에 대한 참조이거나, 서비스를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary>로컬 폼이나 전역 환경에서 특정 명령을 호출합니다.</summary>
      <param name="commandID">호출할 명령입니다.</param>
      <returns>명령이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID,System.Object)">
      <summary>로컬 폼이나 전역 환경에서 특정 매개 변수를 사용하여 특정 명령을 호출합니다.</summary>
      <param name="commandId">호출할 명령입니다.</param>
      <param name="arg">호출에 사용할 매개 변수입니다.</param>
      <returns>명령이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandService.OnCommandsChanged(System.ComponentModel.Design.MenuCommandsChangedEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.Design.MenuCommandService.MenuCommandsChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.MenuCommandsChangedEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>문서에서 특정 메뉴 명령을 제거합니다.</summary>
      <param name="command">제거할 명령입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="command" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>문서에서 특정 동사를 제거합니다.</summary>
      <param name="verb">제거할 동사입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="verb" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary>특정 위치에서 특정 명령 ID가 있는 바로 가기 메뉴를 표시합니다.</summary>
      <param name="menuID">표시할 바로 가기 메뉴입니다.</param>
      <param name="x">바로 가기 메뉴 위치의 x 좌표입니다.</param>
      <param name="y">바로 가기 메뉴 위치의 y 좌표입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommandService.Verbs">
      <summary>현재 사용할 수 있는 디자이너 동사의 컬렉션을 가져옵니다.</summary>
      <returns>현재 사용할 수 있는 디자이너 동사의 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.MultilineStringEditor">
      <summary>디자인 모드에서 여러 줄 문자열을 편집하기 위한 대화 상자를 표시합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MultilineStringEditor.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.MultilineStringEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MultilineStringEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="M:System.Drawing.Design.ImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" />에서 제공된 편집 스타일을 사용하여 지정된 개체 값을 편집합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="provider">편집 서비스를 가져오는 데 사용할 수 있는 서비스 공급자 개체입니다.</param>
      <param name="value">편집 중인 값의 인스턴스입니다.</param>
      <returns>개체의 새 값입니다. 개체의 값을 변경하지 않은 경우 이 메서드에서는 전달된 것과 동일한 개체를 반환해야 합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MultilineStringEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.Drawing.Design.ImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> 메서드의 편집 스타일을 가져옵니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>지원되는 편집 스타일을 나타내는 <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> 열거형 값입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MultilineStringEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 편집기에서 개체 값 표현을 칠할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>이 <see cref="T:System.Drawing.Design.UITypeEditor" />가 속성 창에서 시각적 표현을 표시하지 않음을 나타내는 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ObjectSelectorEditor">
      <summary>값 편집기를 디자인하는 데 사용할 수 있는 기본 기능을 구현합니다. 이러한 편집기는 지원되는 데이터 형식의 개체 값을 표현 및 편집하기 위한 사용자 인터페이스를 차례로 제공할 수 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ObjectSelectorEditor.currValue">
      <summary>
        <see cref="T:System.ComponentModel.Design.ObjectSelectorEditor" />의 현재 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ObjectSelectorEditor.prevValue">
      <summary>
        <see cref="T:System.ComponentModel.Design.ObjectSelectorEditor" />의 이전 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ObjectSelectorEditor.SubObjectSelector">
      <summary>레이블 항목의 계층적 컬렉션에 있는 노드의 액세스 가능 여부를 제어합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.ObjectSelectorEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ObjectSelectorEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="subObjectSelector">지정된 하위 개체 선택기 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.ApplyTreeViewThemeStyles(System.Windows.Forms.TreeView)">
      <summary>
        <see cref="T:System.Windows.Forms.TreeView" />새 탐색기 스타일 테마를 사용 하도록 Windows Forms 컨트롤을 수정 합니다.</summary>
      <param name="treeView">수정할 트리 뷰 컨트롤입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="Overload:System.ComponentModel.Design.ObjectSelectorEditor.GetEditStyle" />로 표시된 편집기 스타일을 사용하여 지정된 개체의 값을 편집합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="provider">이 편집기에서 서비스를 가져오는 데 사용할 수 있는 <see cref="T:System.IServiceProvider" /> 입니다.</param>
      <param name="value">편집할 개체입니다.</param>
      <returns>개체의 새 값입니다. 개체의 값을 변경하지 않은 경우 이 메서드에서는 전달된 것과 동일한 개체를 반환해야 합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.EqualsToValue(System.Object)">
      <summary>지정한 <see cref="T:System.Object" />가 현재 <see cref="T:System.Object" />와 같은지 여부를 확인합니다.</summary>
      <param name="value">현재 <see cref="T:System.Object" />과 비교할 <see cref="T:System.Object" />입니다.</param>
      <returns>지정된 <see langword="true" />가 현재<see cref="T:System.Object" />와 같으면 <see cref="T:System.Object" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.FillTreeWithData(System.ComponentModel.Design.ObjectSelectorEditor.Selector,System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider)">
      <summary>각각 <see cref="T:System.Windows.Forms.TreeNode" />로 표시되는 레이블 항목의 계층적 컬렉션을 채웁니다.</summary>
      <param name="selector">레이블 항목의 계층적 컬렉션입니다.</param>
      <param name="context">구성 요소의 컨텍스트 정보입니다.</param>
      <param name="provider">서비스를 제공하는 개체를 가져오는 이 인터페이스의 <see cref="M:System.IServiceProvider.GetService(System.Type)" /> 메서드입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="Overload:System.ComponentModel.Design.ObjectSelectorEditor.EditValue" /> 메서드에서 사용하는 편집기 스타일을 가져옵니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>
        <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" />가 사용하는 편집기 스타일을 나타내는 <see cref="Overload:System.ComponentModel.Design.ObjectSelectorEditor.EditValue" /> 값입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.SetValue(System.Object)">
      <summary>현재 <see cref="T:System.ComponentModel.Design.ObjectSelectorEditor" />를 지정된 값에 설정합니다.</summary>
      <param name="value">지정된 값입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ObjectSelectorEditor.Selector">
      <summary>각각 <see cref="T:System.Windows.Forms.TreeNode" />로 표시되는 레이블이 붙은 항목의 계층적 컬렉션을 표시합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ObjectSelectorEditor.Selector.clickSeen">
      <summary>이 필드는 내부용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.#ctor(System.ComponentModel.Design.ObjectSelectorEditor)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ObjectSelectorEditor.Selector" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="editor">
        <see cref="T:System.ComponentModel.Design.ObjectSelectorEditor" />
      </param>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.AddNode(System.String,System.Object,System.ComponentModel.Design.ObjectSelectorEditor.SelectorNode)">
      <summary>컬렉션에 새 트리 노드를 추가합니다.</summary>
      <param name="label">노드의 레이블입니다.</param>
      <param name="value">노드의 값을 나타내는 <see cref="T:System.Object" />입니다.</param>
      <param name="parent">노드의 부모입니다.</param>
      <returns>컬렉션에 추가된 <see cref="T:System.ComponentModel.Design.ObjectSelectorEditor.SelectorNode" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.Clear">
      <summary>컬렉션에서 트리 노드를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.OnAfterSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
      <summary>트리 노드가 선택된 후에 발생합니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.TreeViewEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>컨트롤에 포커스가 있을 때 키를 누르면 발생합니다.</summary>
      <param name="e">
        <see cref="E:System.Windows.Forms.Control.KeyDown" /> 이벤트에 대한 데이터를 제공합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
      <summary>컨트롤에 포커스가 있을 때 키를 누르면 발생합니다.</summary>
      <param name="e">
        <see cref="E:System.Windows.Forms.Control.KeyPress" /> 이벤트에 대한 데이터를 제공합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.OnNodeMouseClick(System.Windows.Forms.TreeNodeMouseClickEventArgs)">
      <summary>마우스 포인터가 컨트롤 위에 있을 때 마우스 단추를 클릭하면 발생합니다.</summary>
      <param name="e">
        <see cref="E:System.Windows.Forms.Control.MouseUp" />, <see cref="E:System.Windows.Forms.Control.MouseDown" /> 및 <see cref="E:System.Windows.Forms.Control.MouseMove" /> 이벤트에 대한 데이터를 제공합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.SetSelection(System.Object,System.Windows.Forms.TreeNodeCollection)">
      <summary>컬렉션 노드를 특정 값으로 설정합니다.</summary>
      <param name="value">설정하려는 값입니다.</param>
      <param name="nodes">노드 컬렉션입니다.</param>
      <returns>컬렉션 노드가 설정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.Start(System.Windows.Forms.Design.IWindowsFormsEditorService,System.Object)">
      <summary>편집기 서비스를 초기화합니다.</summary>
      <param name="edSvc">편집기 서비스입니다.</param>
      <param name="value">설정하려는 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.Stop">
      <summary>편집기 서비스를 제거합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.Selector.WndProc(System.Windows.Forms.Message@)">
      <summary>Windows 메시지를 처리합니다.</summary>
      <param name="m">처리할 Windows <see cref="T:System.Windows.Forms.Message" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ObjectSelectorEditor.SelectorNode">
      <summary>
        <see cref="T:System.Windows.Forms.TreeView" />의 노드를 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ObjectSelectorEditor.SelectorNode.value">
      <summary>노드의 값을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ObjectSelectorEditor.SelectorNode.#ctor(System.String,System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ObjectSelectorEditor.SelectorNode" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="label">노드의 레이블입니다.</param>
      <param name="value">노드의 값을 나타내는 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ProjectTargetFrameworkAttribute">
      <summary>프로젝트의 대상 프레임워크를 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ProjectTargetFrameworkAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ProjectTargetFrameworkAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetFrameworkMoniker">프로젝트의 대상 프레임워크입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ProjectTargetFrameworkAttribute.TargetFrameworkMoniker">
      <summary>프로젝트의 대상 프레임워크를 가져옵니다.</summary>
      <returns>프로젝트의 대상 프레임워크입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.BasicDesignerLoader">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService" /> 인터페이스의 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.BasicDesignerLoader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary>로드 프로세스를 시작합니다.</summary>
      <param name="host">로드할 디자이너 로더 호스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">디자이너가 이미 로드되었거나, 다른 디자이너 로더 호스트를 사용하여 <see cref="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)" />가 호출된 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="host" />이 삭제되었습니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.BasicDesignerLoader" />에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.EnableComponentNotification(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />에 의한 구성 요소 알림을 활성화 또는 비활성화합니다.</summary>
      <param name="enable">
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />에 의한 구성 요소 알림을 사용하려면 <see langword="true" />이고, <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />에 의한 구성 요소 알림을 사용하지 않으려면 <see langword="false" />입니다.</param>
      <returns>이 호출 전에 구성 요소 알림이 설정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Flush">
      <summary>디자이너 로더의 보류 중인 변경 사항을 플러시합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.GetService(System.Type)">
      <summary>요청한 서비스를 가져옵니다.</summary>
      <param name="serviceType">서비스의 <see cref="T:System.Type" />입니다.</param>
      <returns>요청한 서비스이거나, 요청한 서비스가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Initialize">
      <summary>서비스를 초기화합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />가 초기화되지 않은 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />가 삭제된 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.IsReloadNeeded">
      <summary>디자이너가 다시 로드될지 여부를 나타냅니다.</summary>
      <returns>디자이너를 다시 로드해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본 구현에서는 항상 <see langword="true" />을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnBeginLoad">
      <summary>로드가 곧 시작된다고 디자이너 로더에 알립니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnBeginUnload">
      <summary>언로드가 곧 시작된다고 디자이너 로더에 알립니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnEndLoad(System.Boolean,System.Collections.ICollection)">
      <summary>로드가 완료되었음을 디자이너 로더에 알립니다.</summary>
      <param name="successful">로드가 성공적으로 완료되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="errors">오류로 보고된 개체(대개, 예외)가 들어 있는 <see cref="T:System.Collections.ICollection" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />가 초기화되지 않은 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />가 삭제된 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.OnModifying">
      <summary>문서 상태가 곧 수정될 것임을 디자이너 로더에 알립니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.PerformFlush(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>디자이너의 모든 변경 사항을 플러시합니다.</summary>
      <param name="serializationManager">로드된 디자이너의 상태를 유지하는 데 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.PerformLoad(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>지속성 항목으로부터 디자이너를 로드합니다.</summary>
      <param name="serializationManager">디자이너의 상태를 로드하는 데 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Reload(System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadOptions)">
      <summary>디자이너의 다시 로드를 큐에 대기시킵니다.</summary>
      <param name="flags">
        <see cref="T:System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadOptions" /> 값의 비트 조합입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReportFlushErrors(System.Collections.ICollection)">
      <summary>변경 사항을 플러시하는 동안 발생한 오류를 보고합니다.</summary>
      <param name="errors">오류 개체(대개, 예외)가 들어 있는 <see cref="T:System.Collections.ICollection" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">변경 사항을 플러시하는 동안 하나 이상의 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.SetBaseComponentClassName(System.String)">
      <summary>기본 구성 요소의 전체 클래스 이름을 설정합니다.</summary>
      <param name="name">디자인할 구성 요소의 전체 이름을 나타내는 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.System#ComponentModel#Design#Serialization#IDesignerLoaderService#AddLoadDependency">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService" />에서 관리하는 로드 프로세스의 일부로 외부 구성 요소를 등록합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />가 초기화되지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.System#ComponentModel#Design#Serialization#IDesignerLoaderService#DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary>종속 로드가 종료되었음을 나타냅니다.</summary>
      <param name="successful">성공적으로 로드하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="errorCollection">로드하는 동안 발생한 오류가 들어 있는 <see cref="T:System.Collections.ICollection" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.System#ComponentModel#Design#Serialization#IDesignerLoaderService#AddLoadDependency" />가 로드 종속성을 추가하지 않았거나, <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />가 초기화되지 않은 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />가 삭제된 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.System#ComponentModel#Design#Serialization#IDesignerLoaderService#Reload">
      <summary>디자인 문서를 다시 로드합니다.</summary>
      <returns>다시 로드 요청이 받아들여지면 <see langword="true" />이고, 로더가 다시 로드를 허용하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.BasicDesignerLoader.LoaderHost">
      <summary>로더 호스트를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />가 초기화되지 않은 경우</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />가 삭제된 경우</exception>
      <returns>
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> 메서드에 전달된 <see cref="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Loading">
      <summary>디자이너 로더가 디자인 화면을 로드하고 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>디자이너 로더가 디자인 화면을 현재 로드하고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Modified">
      <summary>디자이너가 수정되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>디자이너가 수정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.BasicDesignerLoader.PropertyProvider">
      <summary>로더에서 사용하는 serialization 관리자의 속성 공급자를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />가 초기화되지 않은 경우</exception>
      <returns>serialization 관리자에 속성을 제공할 개체입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadPending">
      <summary>다시 로드 작업이 큐에 대기되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Reload(System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadOptions)" /> 호출로 다시 로드 요청이 큐에 대기되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadOptions">
      <summary>
        <see cref="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Reload(System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadOptions)" /> 메서드의 동작을 정의합니다. 비트 <see langword="OR" /> 연산자를 사용하여 이러한 플래그를 조합할 수 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadOptions.Default">
      <summary>디자이너 로더는 다시 로드하기 전에 변경 사항을 플러시하지만 강제로 다시 로드하지는 않으며, 로드 오류가 발생한 경우 <see cref="P:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Modified" /> 속성을 <see langword="true" />로 설정하지도 않습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadOptions.Force">
      <summary>디자이너 로더가 강제로 다시 로드를 발생시킵니다. 대개 <see cref="M:System.ComponentModel.Design.Serialization.BasicDesignerLoader.IsReloadNeeded" /> 메서드가 <see langword="true" />를 반환하는 경우에만 다시 로드가 발생합니다. 이 플래그는 이 메서드 호출을 건너뛰고 항상 다시 로드를 수행합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadOptions.ModifyOnError">
      <summary>로드 오류가 발생하면 디자이너 로더가 <see cref="P:System.ComponentModel.Design.Serialization.BasicDesignerLoader.Modified" /> 속성을 <see langword="true" />로 설정합니다. 로더 플러시를 통해 오류가 발생한 영구 상태를 덮어쓰려는 경우 이 플래그가 유용합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.BasicDesignerLoader.ReloadOptions.NoFlush">
      <summary>다시 로드하기 전에 디자이너 로더가 변경 사항을 취소합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService">
      <summary>구성 요소 집합을 serialization 저장소에 serialize합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.#ctor(System.IServiceProvider)">
      <summary>서비스 확인을 위해 특정 서비스 공급자를 사용하여 <see cref="T:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="provider">서비스 확인에 사용할 <see cref="T:System.IServiceProvider" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore">
      <summary>새 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />를 만듭니다.</summary>
      <returns>새 serialization 저장소입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary>지정한 저장소를 역직렬화하여 개체 컬렉션을 생성합니다.</summary>
      <param name="store">개체가 역직렬화될 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 가 serialization 저장소의 지원되는 형식이 아닙니다. <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />에서 반환되는 저장소를 사용합니다.</exception>
      <returns>역직렬화된 구성 요소의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>특정 저장소를 역직렬화하고 특정 <see cref="T:System.ComponentModel.IContainer" />를 역직렬화된 <see cref="T:System.ComponentModel.IComponent" /> 개체로 채웁니다.</summary>
      <param name="store">개체가 역직렬화될 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IComponent" /> 개체가 추가될 컨테이너입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 또는 <paramref name="container" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 가 serialization 저장소의 지원되는 형식이 아닙니다. <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />에서 반환되는 저장소를 사용합니다.</exception>
      <returns>역직렬화된 구성 요소의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary>선택적으로 기본 속성 값을 적용하여 특정 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />를 특정 컨테이너에 역직렬화합니다.</summary>
      <param name="store">개체가 역직렬화될 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="container">데이터가 적용될 개체의 컨테이너입니다.</param>
      <param name="validateRecycledTypes">재생된 형식의 유효성을 검사하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="applyDefaults">기본 속성 값을 적용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 또는 <paramref name="container" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 가 serialization 저장소의 지원되는 형식이 아닙니다. <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />에서 반환되는 저장소를 사용합니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary>지정된 스트림에서 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />를 로드합니다.</summary>
      <param name="stream">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />를 로드할 스트림입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="stream" />이 검색을 지원하지만 길이가 0인 경우</exception>
      <returns>로드된 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>지정된 개체를 지정된 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />에 serialize합니다.</summary>
      <param name="store">
        <paramref name="value" />를 serialize할 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="value">serialize할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 가 닫혀 있거나 <paramref name="store" /> 가 serialization 저장소의 지원되는 형식이 아닙니다. <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />에서 반환되는 저장소를 사용합니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>기본 속성 값을 설명하는 지정된 개체를 serialize합니다.</summary>
      <param name="store">
        <paramref name="value" />를 serialize할 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="value">serialize할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 가 닫혀 있거나 <paramref name="store" /> 가 serialization 저장소의 지원되는 형식이 아닙니다. <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />에서 반환되는 저장소를 사용합니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>지정된 개체에 대한 지정된 멤버를 serialize합니다.</summary>
      <param name="store">
        <paramref name="member" />를 serialize할 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="owningObject">
        <paramref name="member" />를 소유하는 개체입니다.</param>
      <param name="member">지정된 멤버입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" />, <paramref name="owningObject" /> 또는 <paramref name="member" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 가 닫혀 있거나 <paramref name="store" /> 가 serialization 저장소의 지원되는 형식이 아닙니다. <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />에서 반환되는 저장소를 사용합니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>지정된 개체에서 지정된 멤버를 serialize하되, 기본 속성 값을 포함하는 경우에 멤버를 serialize합니다.</summary>
      <param name="store">
        <paramref name="member" />를 serialize할 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="owningObject">
        <paramref name="member" />를 소유하는 개체입니다.</param>
      <param name="member">지정된 멤버입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" />, <paramref name="owningObject" /> 또는 <paramref name="member" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 가 닫혀 있거나 <paramref name="store" /> 가 serialization 저장소의 지원되는 형식이 아닙니다. <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />에서 반환되는 저장소를 사용합니다.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader">
      <summary>CodeDOM 기반 디자이너 로더를 구현하기 위한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader" /> 클래스에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.Initialize">
      <summary>서비스를 초기화합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />가 초기화되지 않았거나, 디자이너 로더가 CodeDom serialization에 필요한 형식 확인 서비스를 제공하지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.IsReloadNeeded">
      <summary>다시 로드해야 할지 여부를 나타내는 값을 반환합니다.</summary>
      <exception cref="T:System.NotSupportedException">해당 언어에서 이 파일에 대한 코드 파서를 제공하지 않아 이 파일 형식이 디자이너를 지원하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">클래스를 디자인할 수는 있지만 클래스가 이 파일의 첫째 클래스가 아니거나, 디자인할 수 있는 클래스가 없으므로 이 파일에 대해 디자이너를 표시할 수 없는 경우</exception>
      <returns>
        <see cref="P:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.CodeDomProvider" />에서 다시 로드해야 한다고 결정하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.OnBeginLoad">
      <summary>로드가 곧 시작된다고 디자이너 로더에 알립니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.OnBeginUnload">
      <summary>언로드가 곧 시작된다고 디자이너 로더에 알립니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.OnComponentRename(System.Object,System.String,System.String)">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 이벤트를 발생시킵니다.</summary>
      <param name="component">이름을 바꿀 구성 요소입니다.</param>
      <param name="oldName">구성 요소의 원래 이름입니다.</param>
      <param name="newName">구성 요소의 새 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.OnEndLoad(System.Boolean,System.Collections.ICollection)">
      <summary>로드가 완료되었음을 디자이너 로더에 알립니다.</summary>
      <param name="successful">로드가 성공적으로 완료되었음을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="errors">오류로 보고된 개체(대개, 예외)의 <see cref="T:System.Collections.ICollection" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.Parse">
      <summary>텍스트나 기타 영구 스토리지를 구문 분석하고 <see cref="T:System.CodeDom.CodeCompileUnit" />을 반환합니다.</summary>
      <returns>구문 분석 작업으로 얻어진 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.PerformFlush(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>디자이너 루트 구성 요소의 serialization을 요청합니다.</summary>
      <param name="manager">Serializer를 요청할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />입니다.</param>
      <exception cref="T:System.NotSupportedException">해당 언어에서 이 파일에 대한 코드 파서를 제공하지 않아 이 파일 형식이 디자이너를 지원하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">클래스를 디자인할 수는 있지만 클래스가 이 파일의 첫째 클래스가 아니거나, 디자인할 수 있는 클래스가 없으므로 이 파일에 대해 디자이너를 표시할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.PerformLoad(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>CodeDOM 공급자가 제공한 코드를 구문 분석합니다.</summary>
      <param name="manager">Serializer를 요청할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />입니다.</param>
      <exception cref="T:System.NotSupportedException">해당 언어에서 이 파일에 대한 코드 파서를 제공하지 않아 이 파일 형식이 디자이너를 지원하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">클래스를 디자인할 수는 있지만 클래스가 이 파일의 첫째 클래스가 아니거나, 디자인할 수 있는 클래스가 없으므로 이 파일에 대해 디자이너를 표시할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.System#ComponentModel#Design#Serialization#IDesignerSerializationService#Deserialize(System.Object)">
      <summary>지정된 serialization 데이터 개체를 역직렬화하고 해당 데이터가 표시한 개체의 컬렉션을 반환합니다.</summary>
      <param name="serializationData">serialize된 데이터로 구성된 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="serializationData" />이(가) <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />가 아닌 경우</exception>
      <returns>
        <paramref name="serializationData" />로 나타내는 개체의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.System#ComponentModel#Design#Serialization#IDesignerSerializationService#Serialize(System.Collections.ICollection)">
      <summary>지정된 개체의 컬렉션을 serialize하여 serialization 데이터 개체에 저장합니다.</summary>
      <param name="objects">serialize할 개체의 컬렉션입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />를 찾을 수 없는 경우</exception>
      <returns>지정된 개체 컬렉션의 serialize된 상태가 들어 있는 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.System#ComponentModel#Design#Serialization#INameCreationService#CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary>지정된 컨테이터의 모든 구성 요소에 고유한 새 이름을 만듭니다.</summary>
      <param name="container">새 개체가 추가되는 컨테이너입니다.</param>
      <param name="dataType">이름을 받을 개체의 데이터 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataType" />이(가) <see langword="null" />인 경우</exception>
      <returns>데이터 형식에 대한 고유 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.System#ComponentModel#Design#Serialization#INameCreationService#IsValidName(System.String)">
      <summary>지정된 이름이 유효한지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="name">유효성을 확인할 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />이(가) <see langword="null" />인 경우</exception>
      <returns>유효한 이름이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.System#ComponentModel#Design#Serialization#INameCreationService#ValidateName(System.String)">
      <summary>지정된 이름이 유효한지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="name">유효성을 확인할 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />이 올바른 식별자가 아니거나, 같은 이름을 가진 구성 요소가 이미 있는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.Write(System.CodeDom.CodeCompileUnit)">
      <summary>영구 스토리지에 컴파일 단위 변경 사항을 기록합니다.</summary>
      <param name="unit">보관할 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.CodeDomProvider">
      <summary>이 디자이너 로더가 사용할 <see cref="P:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.CodeDomProvider" />를 가져옵니다.</summary>
      <returns>이 디자이너 로더가 사용할 <see cref="P:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.CodeDomProvider" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.CodeDomDesignerLoader.TypeResolutionService">
      <summary>이 디자이너 로더에 사용할 형식 확인 서비스를 가져옵니다.</summary>
      <returns>형식을 확인할 때 CodeDOM serializer가 사용할 <see cref="T:System.ComponentModel.Design.ITypeResolutionService" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.CodeDomLocalizationModel">
      <summary>CodeDom 리소스 어댑터에서 사용할 지역화 모델을 결정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.CodeDomLocalizationModel.None">
      <summary>지역화 공급자가 지역화된 속성을 무시합니다. 하지만 코드 생성을 지원하지 않고 serialize할 수 있는 개체의 리소스를 계속 작성합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.CodeDomLocalizationModel.PropertyAssignment">
      <summary>지역화 공급자가 각 속성에 리소스를 할당하여 지역화된 속성을 작성합니다. 이 모델은 속성이 적을 때는 빠르지만 기본값이 포함된 속성이 많아지면 확장성이 떨어집니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.CodeDomLocalizationModel.PropertyReflection">
      <summary>지역화 공급자는 리소스 파일에 지역화된 속성 값을 쓰고 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 클래스를 사용하여 런타임에 이름으로 속성을 리플렉션함으로써 속성을 채웁니다. 런타임에 리플렉션을 사용하므로 속도가 느릴 수 있지만 기본값이 포함된 속성이 많은 경우 확장성이 좋아집니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.CodeDomLocalizationProvider">
      <summary>CodeDOM 리소스 serialization 서비스를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomLocalizationProvider.#ctor(System.IServiceProvider,System.ComponentModel.Design.Serialization.CodeDomLocalizationModel)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomLocalizationProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="provider">extender 속성을 추가하기 위해 지역화 공급자가 사용하는 <see cref="T:System.IServiceProvider" />입니다.</param>
      <param name="model">지역화 모델이 CodeDOM 리소스 어댑터에 사용된다는 것을 나타내는 <see cref="T:System.ComponentModel.Design.Serialization.CodeDomLocalizationModel" /> 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomLocalizationProvider.#ctor(System.IServiceProvider,System.ComponentModel.Design.Serialization.CodeDomLocalizationModel,System.Globalization.CultureInfo[])">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomLocalizationProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="provider">extender 속성을 추가하기 위해 지역화 공급자가 사용하는 <see cref="T:System.IServiceProvider" />입니다.</param>
      <param name="model">지역화 모델이 CodeDOM 리소스 어댑터에 사용된다는 것을 나타내는 <see cref="T:System.ComponentModel.Design.Serialization.CodeDomLocalizationModel" /> 값입니다.</param>
      <param name="supportedCultures">이 리소스 어댑터가 지원할 문화권의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomLocalizationProvider.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomLocalizationProvider" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomLocalizationProvider.System#ComponentModel#Design#Serialization#IDesignerSerializationProvider#GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)" />를 참조하세요.</summary>
      <param name="manager">serializer를 요청하는 serialization 관리자입니다.</param>
      <param name="currentSerializer">지정된 형식의 현재 serializer의 인스턴스입니다. 지정한 형식의 serializer가 없으면 이 인스턴스가 <see langword="null" />일 수 있습니다.</param>
      <param name="objectType">serialize할 개체의 데이터 형식입니다.</param>
      <param name="serializerType">만들 serializer의 데이터 형식입니다.</param>
      <returns>요청된 형식의 serializer의 인스턴스이거나 요청이 만족되지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.CodeDomSerializer">
      <summary>일련의 CodeDOM 문에 개체 그래프를 serialize합니다. 이 클래스는 serializer에 대한 추상 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>지정된 직렬화된 CodeDOM 개체를 다른 개체로 역직렬화합니다.</summary>
      <param name="manager">deserialization 프로세스를 수행하는 동안 사용할 serialization 관리자 인터페이스입니다.</param>
      <param name="codeObject">역직렬화할 대상인 직렬화된 CodeDOM 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> 또는 <paramref name="codeObject" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="codeObject" />가 지원되지 않는 코드 요소인 경우</exception>
      <returns>역직렬화된 CodeDOM 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.DeserializeStatementToInstance(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatement)">
      <summary>단일 문을 역직렬화합니다.</summary>
      <param name="manager">serialization에 사용할 serialization 관리자입니다.</param>
      <param name="statement">역직렬화할 문입니다.</param>
      <returns>
        <paramref name="statement" />를 역직렬화하여 생긴 개체 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.GetTargetComponentName(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.Type)">
      <summary>지정된 문이 속한 문 그룹을 확인합니다.</summary>
      <param name="statement">그룹을 확인할 <see cref="T:System.CodeDom.CodeStatement" />입니다.</param>
      <param name="expression">
        <paramref name="statement" />가 축소된 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="targetType">
        <see cref="T:System.Type" />의 <paramref name="statement" />입니다.</param>
      <returns>
        <paramref name="statement" />가 그룹화되는 구성 요소의 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>지정된 개체를 CodeDOM 개체에 serialize합니다.</summary>
      <param name="manager">serialize하는 동안 사용할 serialization 관리자입니다.</param>
      <param name="value">serialize할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <returns>serialize된 개체를 나타내는 CodeDOM 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeAbsolute(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>지정된 개체를 serialize하여 기본값을 생성합니다.</summary>
      <param name="manager">serialization에 사용할 serialization 관리자입니다.</param>
      <param name="value">serialize할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="value" />를 나타내는 CodeDom 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeMember(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>지정된 개체에 대한 지정된 멤버를 serialize합니다.</summary>
      <param name="manager">serialization에 사용할 serialization 관리자입니다.</param>
      <param name="owningObject">
        <paramref name="member" />가 연결된 개체입니다.</param>
      <param name="member">Serialize할 멤버입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="owningObject" /> 또는 <paramref name="member" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="member" /> 가 serialize 가능 형식이 아닙니다.</exception>
      <returns>
        <paramref name="member" />의 serialize된 상태를 나타내는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>기본값을 설명하는 지정된 멤버를 serialize합니다.</summary>
      <param name="manager">serialization에 사용할 serialization 관리자입니다.</param>
      <param name="owningObject">
        <paramref name="member" />가 연결된 개체입니다.</param>
      <param name="member">Serialize할 멤버입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="owningObject" /> 또는 <paramref name="member" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="member" /> 가 serialize 가능 형식이 아닙니다.</exception>
      <returns>
        <paramref name="member" />를 나타내는 CodeDom 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializer.SerializeToReferenceExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>지정된 값을 CodeDOM 식에 serialize합니다.</summary>
      <param name="manager">serialize하는 동안 사용할 serialization 관리자입니다.</param>
      <param name="value">serialize할 개체입니다.</param>
      <returns>serializaton된 값입니다. 지정된 값에 대해 참조식을 얻을 수 없거나 해당 값을 serialize할 수 없으면 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.CodeDomSerializerBase">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> 클래스에 대한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.DeserializeExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.String,System.CodeDom.CodeExpression)">
      <summary>지정된 식을 메모리 내의 개체에 역직렬화합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="name">식의 결과로 얻어지는 개체의 이름입니다. 개체 이름을 지정할 필요가 없으면 <see langword="null" />일 수 있습니다.</param>
      <param name="expression">해석할 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <returns>
        <paramref name="expression" />을 해석하여 얻어지는 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.DeserializeInstance(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Type,System.Object[],System.String,System.Boolean)">
      <summary>지정된 형식의 인스턴스를 반환합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="type">반환할 인스턴스의 <see cref="T:System.Type" />입니다.</param>
      <param name="parameters">
        <paramref name="type" />에 대한 생성자에 전달할 매개 변수입니다.</param>
      <param name="name">역직렬화된 개체의 이름입니다.</param>
      <param name="addToContainer">이 개체를 디자인 컨테이너에 추가하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 개체에서는 영향을 줄 수 있도록 이에 대한 <see cref="T:System.ComponentModel.IComponent" />를 구현해야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> 또는 <paramref name="type" />가 <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="type" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.DeserializePropertiesFromResources(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Attribute[])">
      <summary>고정 문화권의 리소스 번들에서 특정 개체의 속성을 역직렬화합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="value">속성이 역직렬화될 개체입니다.</param>
      <param name="filter">역직렬화할 속성을 필터링하는 <see cref="T:System.Attribute" /> 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.DeserializeStatement(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatement)">
      <summary>CodeDOM 문을 해석하고 실행하여 문을 역직렬화합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="statement">역직렬화할 <see cref="T:System.CodeDom.CodeStatement" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetAttributesFromTypeHelper(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Type)">
      <summary>프로젝트의 대상 .NET Framework 버전에서 정의된 특성의 컬렉션을 가져옵니다.</summary>
      <param name="manager">serialization 관리자입니다.</param>
      <param name="type">대상 형식입니다.</param>
      <returns>프로젝트의 대상 .NET Framework 버전에서 정의된 특성의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetAttributesHelper(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>프로젝트의 대상 .NET Framework 버전에서 정의된 특성의 컬렉션을 가져옵니다.</summary>
      <param name="manager">serialization 관리자입니다.</param>
      <param name="instance">대상 형식의 개체입니다.</param>
      <returns>프로젝트의 대상 .NET Framework 버전에서 정의된 특성의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetEventsHelper(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Attribute[])">
      <summary>프로젝트의 대상 .NET Framework 버전에서 정의된 이벤트의 컬렉션을 가져옵니다.</summary>
      <param name="manager">serialization 관리자입니다.</param>
      <param name="instance">대상 형식의 개체입니다.</param>
      <param name="attributes">대상 .NET Framework 버전에 전달할 특성 배열입니다.</param>
      <returns>프로젝트의 대상 .NET Framework 버전에서 정의된 이벤트의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>지정된 개체에 대해 식을 반환합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="value">식을 가져올 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="value" />를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />이거나, <paramref name="value" />에 대한 기존 식이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetPropertiesHelper(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Attribute[])">
      <summary>프로젝트의 대상 .NET Framework 버전에서 정의된 속성의 컬렉션을 가져옵니다.</summary>
      <param name="manager">serialization 관리자입니다.</param>
      <param name="instance">대상 형식의 개체입니다.</param>
      <param name="attributes">대상 .NET Framework 버전에 전달할 특성 배열입니다.</param>
      <returns>프로젝트의 대상 .NET Framework 버전에서 정의된 속성의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetReflectionTypeFromTypeHelper(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Type)">
      <summary>형식 메타데이터에서 생성된 리플렉션 형식을 가져옵니다.</summary>
      <param name="manager">serialization 관리자입니다.</param>
      <param name="type">메타데이터를 사용할 형식입니다.</param>
      <returns>
        <paramref name="type" />의 메타데이터에서 생성된 리플렉션 형식입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetReflectionTypeHelper(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>개체 메타데이터에서 생성된 리플렉션 형식을 가져옵니다.</summary>
      <param name="manager">serialization 관리자입니다.</param>
      <param name="instance">메타데이터를 사용할 개체입니다.</param>
      <returns>
        <paramref name="object" />의 메타데이터에서 생성된 리플렉션 형식입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>지정된 개체 값에 대한 serializer를 찾습니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="value">검색할 serializer를 지정하는 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="value" />에 알맞은 <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Type)">
      <summary>지정된 형식에 대한 serializer를 찾습니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="valueType">검색할 serializer를 지정하는 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> 또는 <paramref name="valueType" />가 <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="valueType" />에 알맞은 <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetTargetFrameworkProvider(System.IServiceProvider,System.Object)">
      <summary>형식 필터링에 사용하기 위해 대상 .NET Framework 버전을 인식하는 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />를 가져옵니다.</summary>
      <param name="provider">형식 설명 공급자 서비스입니다.</param>
      <param name="instance">
        <paramref name="provider" />가 <see langword="null" />인 경우 형식 설명 공급자 서비스가 파생될 수 있는 개체입니다.</param>
      <returns>.NET Framework 인식 형식 설명 공급자입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.GetUniqueName(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>지정된 개체의 고유한 이름을 반환합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="value">이름을 검색할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="value" />에 대한 고유 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.IsSerialized(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>지정된 개체가 serialize되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="value">이전 serialization에 대해 테스트할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="value" />가 serialize되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.IsSerialized(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Boolean)">
      <summary>미리 설정된 식을 선택적으로 고려하여, 특정 개체가 serialize되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="value">이전 serialization에 대해 테스트할 개체입니다.</param>
      <param name="honorPreset">미리 설정된 식을 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="value" />가 serialize되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeCreationExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Boolean@)">
      <summary>지정된 개체의 생성을 나타내는 식을 반환합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="value">serialize할 개체입니다.</param>
      <param name="isComplete">
        <paramref name="value" />가 완전히 serialize되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="value" />의 생성을 나타내는 식입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeEvent(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatementCollection,System.Object,System.ComponentModel.EventDescriptor)">
      <summary>지정된 이벤트를 지정된 문 컬렉션으로 serialize합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="statements">이벤트가 serialize되는 <see cref="T:System.CodeDom.CodeStatementCollection" /> 입니다.</param>
      <param name="value">
        <paramref name="descriptor" />가 바인딩될 개체입니다.</param>
      <param name="descriptor">serialize할 이벤트를 지정하는 <see cref="T:System.ComponentModel.EventDescriptor" /> 입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="value" />, <paramref name="statements" /> 또는 <paramref name="descriptor" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException">
        <see cref="T:System.ComponentModel.Design.IEventBindingService" />를 사용할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeEvents(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatementCollection,System.Object,System.Attribute[])">
      <summary>지정된 이벤트를 지정된 문 컬렉션으로 serialize합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="statements">이벤트가 serialize되는 <see cref="T:System.CodeDom.CodeStatementCollection" /> 입니다.</param>
      <param name="value">이벤트가 serialize될 개체입니다.</param>
      <param name="filter">serialize할 이벤트를 필터링하는 <see cref="T:System.Attribute" /> 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="value" /> 또는 <paramref name="statements" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeProperties(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatementCollection,System.Object,System.Attribute[])">
      <summary>지정된 개체의 속성을 지정된 문 컬렉션으로 serialize합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="statements">속성이 serialize되는 <see cref="T:System.CodeDom.CodeStatementCollection" /> 입니다.</param>
      <param name="value">속성이 serialize될 개체입니다.</param>
      <param name="filter">serialize할 속성을 필터링하는 <see cref="T:System.Attribute" /> 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="value" /> 또는 <paramref name="statements" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializePropertiesToResources(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatementCollection,System.Object,System.Attribute[])">
      <summary>지정된 개체의 속성을 고정 문화권의 리소스 번들에 serialize합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="statements">사용되지 않습니다.</param>
      <param name="value">속성이 serialize될 개체입니다.</param>
      <param name="filter">serialize할 속성을 필터링하는 <see cref="T:System.Attribute" /> 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="value" /> 또는 <paramref name="statements" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeProperty(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeStatementCollection,System.Object,System.ComponentModel.PropertyDescriptor)">
      <summary>지정된 개체의 속성을 serialize합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="statements">속성이 serialize되는 <see cref="T:System.CodeDom.CodeStatementCollection" /> 입니다.</param>
      <param name="value">속성이 serialize될 개체입니다.</param>
      <param name="propertyToSerialize">Serialize할 속성입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="value" />, <paramref name="statements" /> 또는 <paramref name="propertyToSerialize" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeResource(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.String,System.Object)">
      <summary>특정 리소스 이름을 사용하여 리소스 번들에 특정 개체를 serialize합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="resourceName">
        <paramref name="value" />가 serialize될 리소스 번들의 이름입니다.</param>
      <param name="value">serialize할 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeResourceInvariant(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.String,System.Object)">
      <summary>특정 리소스 이름을 사용하여 리소스 번들에 특정 개체를 serialize합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="resourceName">
        <paramref name="value" />가 serialize될 리소스 번들의 이름입니다.</param>
      <param name="value">serialize할 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>지정된 개체를 식에 serialize합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="value">serialize할 개체입니다. <see langword="null" />일 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="value" />를 serialize할 수 있으면 <see cref="T:System.CodeDom.CodeExpression" /> 개체이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToResourceExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>지정된 개체를 식에 serialize합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="value">serialize할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="value" />를 serialize된 식으로 포함하는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToResourceExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Boolean)">
      <summary>지정된 개체를 고정 문화권에 알맞은 식에 serialize합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="value">serialize할 개체입니다.</param>
      <param name="ensureInvariant">고정 문화권에 serialize하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="value" />를 serialize된 식으로 포함하는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SetExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.CodeDom.CodeExpression)">
      <summary>개체를 식과 연결합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="value">serialize할 개체입니다.</param>
      <param name="expression">
        <paramref name="value" />와 연결할 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="value" /> 또는 <paramref name="expression" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SetExpression(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.CodeDom.CodeExpression,System.Boolean)">
      <summary>선택적으로 사전 설정 식을 지정하여 개체와 식을 연결합니다.</summary>
      <param name="manager">serialization에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="value">serialize할 개체입니다.</param>
      <param name="expression">
        <paramref name="value" />와 연결할 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="isPreset">미리 설정된 식을 지정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException">
      <summary>serialization 오류에 대해 줄 번호 정보를 사용할 수 있을 때 발생하는 예외입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerException.#ctor(System.Exception,System.CodeDom.CodeLinePragma)">
      <summary>지정된 예외와 줄 정보를 사용하는 <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="ex">throw할 예외입니다.</param>
      <param name="linePragma">예외가 발생한 장소를 나타내는 <see cref="T:System.CodeDom.CodeLinePragma" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerException.#ctor(System.Exception,System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="ex">throw할 예외입니다.</param>
      <param name="manager">컨텍스트를 추출할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Manager" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerException.#ctor(System.String,System.CodeDom.CodeLinePragma)">
      <summary>지정된 메시지와 줄 정보를 사용하는 <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다.</param>
      <param name="linePragma">예외가 발생한 장소를 나타내는 <see cref="T:System.CodeDom.CodeLinePragma" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerException.#ctor(System.String,System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializerException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다.</param>
      <param name="manager">컨텍스트를 추출할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Manager" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CodeDomSerializerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>매개 변수 이름 및 추가 예외 정보를 사용하여 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 설정합니다.</summary>
      <param name="info">
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />가 직렬화하거나 역직렬화한 개체를 직렬화하거나 역직렬화하는 데 사용되는 데이터를 저장합니다.</param>
      <param name="context">예외를 생성한 스트림의 소스 및 대상을 설명하고, serialization이 해당 컨텍스트 및 호출자가 정의한 추가 컨텍스트를 보유하도록 하는 방법을 설명합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.CodeDomSerializerException.LinePragma">
      <summary>이 예외와 관련된 오류의 줄 정보를 가져오거나 설정합니다.</summary>
      <returns>오류에 대한 줄 정보를 나타내는 <see cref="T:System.CodeDom.CodeLinePragma" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer">
      <summary>컬렉션을 serialize합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer.MethodSupportsSerialization(System.Reflection.MethodInfo)">
      <summary>
        <paramref name="method" />가 serialization을 지원하는지 확인합니다.</summary>
      <param name="method">serialization 특성을 확인할 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="method" />가 serialization을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>지정된 개체를 CodeDOM 개체에 serialize합니다.</summary>
      <param name="manager">Serialization 중에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="value">serialize할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="value" />를 나타내는 CodeDOM 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.CollectionCodeDomSerializer.SerializeCollection(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeExpression,System.Type,System.Collections.ICollection,System.Collections.ICollection)">
      <summary>지정된 컬렉션을 serialize합니다.</summary>
      <param name="manager">Serialization 중에 사용할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 입니다.</param>
      <param name="targetExpression">컬렉션을 참조하는 <see cref="T:System.CodeDom.CodeExpression" /> 입니다.</param>
      <param name="targetType">컬렉션의 <see cref="T:System.Type" /> 입니다.</param>
      <param name="originalCollection">serialize할 컬렉션입니다.</param>
      <param name="valuesToSerialize">Serialize할 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="targetType" />, <paramref name="originalCollection" /> 또는 <paramref name="valuesToSerialize" />가 <see langword="null" />입니다.</exception>
      <returns>Serialization 프로세스에 성공한 경우 serialize된 컬렉션이고, 그렇지 않은 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> 인터페이스의 구현을 제공합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated">
      <summary>세션이 만들어질 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed">
      <summary>세션이 삭제될 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ResolveName">
      <summary>
        <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)" />이 지정된 이름을 serialization 관리자의 이름 테이블에서 찾을 수 없을 때 발생합니다.</summary>
      <exception cref="T:System.InvalidOperationException">serialization 관리자에 활성 serialization 세션이 없는 경우</exception>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SerializationComplete">
      <summary>serialization이 완료되었을 때 발생합니다.</summary>
      <exception cref="T:System.InvalidOperationException">serialization 관리자에 활성 serialization 세션이 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor(System.IServiceProvider)">
      <summary>지정된 서비스 공급자를 사용하여 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="provider">
        <see cref="T:System.IServiceProvider" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>형식의 인스턴스를 만듭니다.</summary>
      <param name="type">인스턴스를 만들 형식입니다.</param>
      <param name="arguments">형식 생성자의 매개 변수입니다. 매개 변수가 없는 생성자를 호출하려면 <see langword="null" />이거나 빈 컬렉션이 될 수 있습니다.</param>
      <param name="name">개체에 지정할 이름입니다. <see langword="null" />이면, 개체가 컨테이너에 추가되고 이 컨테이너가 개체에 이름을 제공하지 않을 경우 개체에 이름이 지정되지 않습니다.</param>
      <param name="addToContainer">개체가 <see cref="T:System.ComponentModel.IComponent" />를 구현할 경우 컨테이너에 개체를 추가하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <paramref name="type" />에 포함된 매개 변수를 가져오는 생성자가 <paramref name="arguments" />에 없는 경우</exception>
      <returns>
        <paramref name="type" />에 의해 지정된 형식의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession">
      <summary>새 serialization 세션을 만듭니다.</summary>
      <exception cref="T:System.InvalidOperationException">serialization 관리자가 이미 세션에 있는 경우. <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" />의 이 버전은 동시 세션을 지원하지 않습니다.</exception>
      <returns>새 serialization 세션을 나타내는 <see cref="T:System.IDisposable" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetRuntimeType(System.String)">
      <summary>지정된 형식 이름에 해당하는 형식을 가져옵니다.</summary>
      <param name="typeName">가져올 형식의 이름입니다.</param>
      <returns>지정된 형식입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>지정된 개체 형식에 대한 serializer를 가져옵니다.</summary>
      <param name="objectType">serializer를 검색할 개체의 형식입니다.</param>
      <param name="serializerType">검색할 serializer의 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> 또는 <paramref name="serializerType" />가 <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="objectType" />에 대한 serializer이거나, 해당 serializer가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService(System.Type)">
      <summary>요청한 서비스를 가져옵니다.</summary>
      <param name="serviceType">검색할 서비스의 형식입니다.</param>
      <returns>요청된 서비스이거나, 해당 서비스를 확인할 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType(System.String)">
      <summary>요청된 형식을 가져옵니다.</summary>
      <param name="typeName">검색할 형식의 이름입니다.</param>
      <returns>요청된 형식이거나, 해당 형식을 확인할 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>사용자 지정 serialization 공급자를 serialization 관리자에 추가합니다.</summary>
      <param name="provider">추가할 serialization 공급자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>
        <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 메서드를 구현합니다.</summary>
      <param name="type">만들 데이터 형식입니다.</param>
      <param name="arguments">이 형식에 대한 생성자에 전달할 인수입니다.</param>
      <param name="name">개체의 이름입니다. 이 이름은 나중에 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />를 통해 개체에 액세스하는 데 사용할 수 있습니다. <see langword="null" />이 전달되면 개체는 계속 만들어지지만 이름을 통해 개체에 액세스할 수는 없습니다.</param>
      <param name="addToContainer">이 개체를 디자인 컨테이너에 추가하려면 <see langword="true" />입니다. 개체에서는 영향을 줄 수 있도록 이에 대한 <see cref="T:System.ComponentModel.IComponent" />를 구현해야 합니다.</param>
      <returns>새로 만들어진 개체 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)">
      <summary>지정된 이름을 가진 생성된 개체의 인스턴스를 검색합니다.</summary>
      <param name="name">검색할 개체의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 속성이 serialization 세션 밖에서 액세스된 경우</exception>
      <returns>지정된 이름의 개체 인스턴스이거나, 해당 이름의 개체를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)">
      <summary>지정된 개체의 이름을 검색합니다.</summary>
      <param name="value">이름을 검색할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 속성이 serialization 세션 밖에서 액세스된 경우</exception>
      <returns>개체의 이름이거나, 개체에 이름이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetSerializer(System.Type,System.Type)">
      <summary>지정된 개체 형식에 대한 요청된 형식의 serializer를 가져옵니다.</summary>
      <param name="objectType">serializer를 가져올 개체의 형식입니다.</param>
      <param name="serializerType">검색할 serializer의 형식입니다.</param>
      <returns>요청된 serializer의 인스턴스이거나, 적절한 serializer를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetType(System.String)">
      <summary>지정된 이름의 형식을 가져옵니다.</summary>
      <param name="typeName">로드할 형식의 정규화된 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException">이 속성이 serialization 세션 밖에서 액세스된 경우</exception>
      <returns>형식의 인스턴스이거나, 형식이 로드될 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>이전에 추가한 serialization 공급자를 제거합니다.</summary>
      <param name="provider">제거할 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ReportError(System.Object)">
      <summary>serialization에서 발생한 복구 가능 오류를 보고하는 데 사용됩니다.</summary>
      <param name="errorInformation">오류 정보를 포함하는 개체로서 대개 <see cref="T:System.String" /> 또는 <see cref="T:System.Exception" /> 형식입니다.</param>
      <exception cref="T:System.InvalidOperationException">이 속성이 serialization 세션 밖에서 액세스된 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)">
      <summary>지정된 개체의 이름을 설정합니다.</summary>
      <param name="instance">이름을 설정할 개체입니다.</param>
      <param name="name">개체 이름으로 사용되는 <see cref="T:System.String" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">인스턴스에 의해 지정된 개체가 이미 이름을 가지고 있거나, 명명된 다른 개체가 이미 <paramref name="name" />을 사용하는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 속성이 serialization 세션 밖에서 액세스된 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#IServiceProvider#GetService(System.Type)">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="M:System.IServiceProvider.GetService(System.Type)" /> 메서드를 참조하세요.</summary>
      <param name="serviceType">가져올 서비스 개체의 형식을 지정하는 개체입니다.</param>
      <returns>
        <paramref name="serviceType" /> 형식의 서비스 개체입니다.  
  
또는 
 <paramref name="serviceType" /> 형식의 서비스 개체가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Container">
      <summary>이 serialization 관리자에 대한 컨테이너를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">serialization 관리자에 활성 serialization 세션이 있는 경우</exception>
      <returns>serialization 관리자가 구성 요소를 추가할 <see cref="T:System.ComponentModel.IContainer" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors">
      <summary>serialization 또는 deserialization 도중 발생한 오류의 목록을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">이 속성이 serialization 세션 밖에서 액세스된 경우</exception>
      <returns>serialization 또는 deserialization 도중 발생한 오류의 목록입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames">
      <summary>
        <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 메서드가 컨테이너에 특정 이름이 존재하는지 확인할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">이 속성이 serialization 세션 내에서 변경된 경우</exception>
      <returns>
        <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />가 특정 구성 요소 이름을 전달하면 <see langword="true" />이고, <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />가 컨테이너에 특정 이름이 존재하는지 확인하면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider">
      <summary>serialization 관리자의 <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> 속성에 속성을 제공하는 데 사용할 개체를 가져옵니다.</summary>
      <returns>serialization 관리자의 <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> 속성에 속성을 제공하는 데 사용할 개체입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances">
      <summary>
        <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />가 항상 형식의 새 인스턴스를 만들지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">serialization 관리자에 활성 serialization 세션이 있는 경우</exception>
      <returns>
        <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />가 기존 인스턴스를 반환하면 <see langword="true" />이고, <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />가 형식의 새 인스턴스를 만들면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Context">
      <summary>이 serialization 세션을 위한 컨텍스트 스택을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">이 속성이 serialization 세션 밖에서 액세스된 경우</exception>
      <returns>데이터를 저장하는 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Properties">
      <summary>
        <see cref="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties" /> 속성을 구현합니다.</summary>
      <returns>serialize될 속성이 들어 있는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes">
      <summary>
        <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" /> 메서드가 일치하는 이름이 동일한 형식을 참조하는지를 확인하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">serialization 관리자에 활성 serialization 세션이 있는 경우</exception>
      <returns>
        <see cref="M:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)" />가 형식을 확인하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ExpressionContext">
      <summary>serializer 간에 컨텍스트 상태를 전달하는 수단을 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)">
      <summary>지정된 식 및 소유자를 사용하여 <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="expression">지정된 코드 식입니다.</param>
      <param name="expressionType">지정된 코드 식 형식입니다.</param>
      <param name="owner">지정된 코드 식 소유자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />, <paramref name="expressionType" /> 또는 <paramref name="owner" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)">
      <summary>현재 값을 사용하여 <see cref="T:System.ComponentModel.Design.Serialization.ExpressionContext" /> 클래스의 새 인스턴스를 초기화합니다</summary>
      <param name="expression">지정된 코드 식입니다.</param>
      <param name="expressionType">지정된 코드 식 형식입니다.</param>
      <param name="owner">지정된 코드 식 소유자입니다.</param>
      <param name="presetValue">지정된 코드 식 기본 설정 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" />, <paramref name="expressionType" /> 또는 <paramref name="owner" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ExpressionContext.Expression">
      <summary>이 컨텍스트가 나타내는 식을 가져옵니다.</summary>
      <returns>이 컨텍스트가 나타내는 식입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType">
      <summary>식의 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>식의 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ExpressionContext.Owner">
      <summary>이 식을 소유하는 개체를 가져옵니다.</summary>
      <returns>이 식을 소유하는 개체입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue">
      <summary>식의 미리 설정된 값을 가져옵니다.</summary>
      <returns>이 식의 미리 설정된 값이거나, 할당된 값이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ICodeDomDesignerReload">
      <summary>디자이너의 재로딩을 최적화하기 위해서 사용할 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ICodeDomDesignerReload.ShouldReloadDesigner(System.CodeDom.CodeCompileUnit)">
      <summary>디자이너가 지정된 컴파일 단위를 올바르게 가져오기 위해 재로딩해야 할지 여부를 나타냅니다.</summary>
      <param name="newTree">디자이너 문서 코드가 들어 있는 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</param>
      <returns>디자이너가 재로딩하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer">
      <summary>개체 그래프 안의 리플렉션 기본 형식을 serialize하기 위한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.ComponentModel.MemberDescriptor,System.CodeDom.CodeStatementCollection)">
      <summary>지정된 값의 지정된 멤버 설명자를 문 컬렉션에 Serialize합니다.</summary>
      <param name="manager">serialization에 사용할 serialization 관리자입니다.</param>
      <param name="value">멤버가 바인딩될 개체입니다.</param>
      <param name="descriptor">serialize할 멤버의 설명자입니다.</param>
      <param name="statements">
        <paramref name="descriptor" />가 serialize될 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberCodeDomSerializer.ShouldSerialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>지정된 멤버를 serialize해야 하는지 여부를 확인합니다.</summary>
      <param name="manager">serialization에 사용할 serialization 관리자입니다.</param>
      <param name="value">멤버가 바인딩될 개체입니다.</param>
      <param name="descriptor">serialize할 멤버의 설명자입니다.</param>
      <returns>
        <paramref name="descriptor" />에 의해 설명된 멤버를 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ObjectStatementCollection">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.StatementContext" />가 제공하는 문 테이블을 보관합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ObjectStatementCollection.ContainsKey(System.Object)">
      <summary>지정된 문 소유자가 테이블에 있는지 여부를 확인합니다.</summary>
      <param name="statementOwner">문 컬렉션 소유자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statementOwner" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="statementOwner" />가 테이블에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ObjectStatementCollection.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IEnumerator" />의 <see cref="T:System.ComponentModel.Design.Serialization.ObjectStatementCollection" />를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />에 대한 <see cref="T:System.ComponentModel.Design.Serialization.ObjectStatementCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ObjectStatementCollection.Populate(System.Collections.ICollection)">
      <summary>문 소유자 컬렉션으로 문 테이블을 채웁니다.</summary>
      <param name="statementOwners">테이블에 추가할 문 소유자 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statementOwner" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ObjectStatementCollection.Populate(System.Object)">
      <summary>문 소유자로 문 테이블을 채웁니다.</summary>
      <param name="owner">테이블에 추가할 문 소유자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ObjectStatementCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 메서드를 참조하세요.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ObjectStatementCollection.Item(System.Object)">
      <summary>지정된 소유자의 문 컬렉션을 가져옵니다.</summary>
      <param name="statementOwner">문 컬렉션 소유자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="statementOwner" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="statementOwner" />에 대한 문 컬렉션이거나, <paramref name="statementOwner" />가 테이블에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootContext">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />는 루트 컨텍스트를 추가하여 루트 개체의 정의를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootContext.#ctor(System.CodeDom.CodeExpression,System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.RootContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="expression">개체 그래프의 루트 개체를 나타내는 식입니다.</param>
      <param name="value">개체 그래프의 루트 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootContext.Expression">
      <summary>개체 그래프의 루트 개체를 나타내는 식을 가져옵니다.</summary>
      <returns>개체 그래프의 루트 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootContext.Value">
      <summary>개체 그래프의 루트 개체를 가져옵니다.</summary>
      <returns>개체 그래프의 루트 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializeAbsoluteContext">
      <summary>Serializer가 기본값을 처리하도록 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializeAbsoluteContext.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.SerializeAbsoluteContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializeAbsoluteContext.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>특정 멤버에 바인딩하는 옵션을 사용하여 <see cref="T:System.ComponentModel.Design.Serialization.SerializeAbsoluteContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member">이 컨텍스트가 바인딩될 멤버입니다. <see langword="null" />일 수 있습니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializeAbsoluteContext.ShouldSerialize(System.ComponentModel.MemberDescriptor)">
      <summary>지정된 멤버를 이 컨텍스트에서 serialize할지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="member">serialization을 위해 검사할 멤버입니다.</param>
      <returns>지정된 멤버를 이 컨텍스트에서 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializeAbsoluteContext.Member">
      <summary>이 컨텍스트가 바인딩될 멤버를 가져옵니다.</summary>
      <returns>이 컨텍스트가 바인딩된 멤버이거나, 컨텍스트가 개체의 모든 멤버에 바인딩되면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.StatementContext">
      <summary>문을 serialize할 수 있는 위치를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.StatementContext.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.StatementContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.StatementContext.StatementCollection">
      <summary>문 컨텍스트에서 제공한 문 컬렉션을 가져옵니다.</summary>
      <returns>문 컨텍스트에서 제공한 문이 들어 있는 <see cref="T:System.ComponentModel.Design.Serialization.ObjectStatementCollection" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer">
      <summary>개체를 새 형식으로 serialize합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
      <summary>지정된 형식 선언을 역직렬화합니다.</summary>
      <param name="manager">serialization에 사용할 serialization 관리자입니다.</param>
      <param name="declaration">serialization에 사용할 형식 선언입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> 또는 <paramref name="typeDecl" />가 <see langword="null" />인 경우</exception>
      <returns>루트 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
      <summary>멤버 serialize에 사용되는 문을 저장하는 메서드를 반환합니다.</summary>
      <param name="manager">serialization에 사용할 serialization 관리자입니다.</param>
      <param name="declaration">Serialization에 사용할 형식 선언입니다.</param>
      <param name="value">serialization에 사용할 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="typeDecl" /> 또는 <paramref name="value" />가 <see langword="null" />입니다.</exception>
      <returns>지정된 멤버의 모든 초기화 코드를 내보내는 데 사용되는 메서드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
      <summary>deserialization을 수행하는 동안 해석될 메서드 배열을 반환합니다.</summary>
      <param name="manager">serialization에 사용할 serialization 관리자입니다.</param>
      <param name="declaration">Serialization에 사용할 형식 선언입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> 또는 <paramref name="typeDecl" />가 <see langword="null" />인 경우</exception>
      <returns>deserialization을 수행하는 동안 해석될 메서드의 <see cref="T:System.CodeDom.CodeMemberMethod" /> 배열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
      <summary>루트를 정의하는 새로운 형식 선언을 만들어 개체 루트를 serialize합니다.</summary>
      <param name="manager">serialization에 사용할 serialization 관리자입니다.</param>
      <param name="root">serialize할 개체입니다.</param>
      <param name="members">멤버의 선택적 컬렉션입니다. <see langword="null" />이거나 비어 있을 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> 또는 <paramref name="root" />가 <see langword="null" />인 경우</exception>
      <returns>루트 개체를 정의하는 <see cref="T:System.CodeDom.CodeTypeDeclaration" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.UndoEngine">
      <summary>디자인 타임에 일반적인 실행 취소/다시 실행 기능을 지정합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.UndoEngine.Undoing">
      <summary>실행 취소 작업이 수행되기 직전에 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.UndoEngine.Undone">
      <summary>실행 취소 작업이 수행된 직후에 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.#ctor(System.IServiceProvider)">
      <summary>
        <see cref="T:System.ComponentModel.Design.UndoEngine" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="provider">부모 서비스 공급자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">필요한 서비스를 찾을 수 없는 경우. 필요한 서비스는 <see cref="T:System.ComponentModel.Design.UndoEngine" />을 참조하십시오. 이 서비스를 제거한 경우 대체 서비스를 제공해야 합니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.AddUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)">
      <summary>
        <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />을 실행 취소 스택에 추가합니다.</summary>
      <param name="unit">추가할 실행 취소 단위입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.CreateUndoUnit(System.String,System.Boolean)">
      <summary>새 <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />를 만듭니다.</summary>
      <param name="name">만들 단위의 이름입니다.</param>
      <param name="primary">일련의 중첩된 단위에서 첫 번째 단위를 만들 경우 <see langword="true" />이고, 두 번째 이후의 단위를 만들 경우 <see langword="false" />입니다.</param>
      <returns>지정된 이름을 가진 새 <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.DiscardUndoUnit(System.ComponentModel.Design.UndoEngine.UndoUnit)">
      <summary>
        <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />을 삭제합니다.</summary>
      <param name="unit">삭제할 단위입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.UndoEngine" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Design.UndoEngine" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.GetRequiredService(System.Type)">
      <summary>요청한 서비스를 가져옵니다.</summary>
      <param name="serviceType">검색할 서비스의 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="serviceType" />이 필요하지만 찾을 수 없는 경우. 이 서비스를 제거한 경우 대체 서비스를 제공해야 합니다.</exception>
      <returns>요청한 서비스입니다(있을 경우).</returns>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.GetService(System.Type)">
      <summary>요청한 서비스를 가져옵니다.</summary>
      <param name="serviceType">검색할 서비스의 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" />이(가) <see langword="null" />인 경우</exception>
      <returns>요청한 서비스이거나, 요청한 서비스가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.OnUndoing(System.EventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.Design.UndoEngine.Undoing" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.OnUndone(System.EventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.Design.UndoEngine.Undone" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.UndoEngine.Enabled">
      <summary>
        <see cref="T:System.ComponentModel.Design.UndoEngine" />을 사용하거나 사용하지 않습니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.UndoEngine" />가 활성화되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.UndoEngine.UndoInProgress">
      <summary>실행 취소 작업이 처리 중인지 여부를 나타냅니다.</summary>
      <returns>실행 취소 작업이 처리 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.UndoEngine.UndoUnit">
      <summary>사용자가 실행 취소할 수 있는 작업 단위를 캡슐화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.#ctor(System.ComponentModel.Design.UndoEngine,System.String)">
      <summary>
        <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="engine">이 실행 취소 단위를 소유하는 실행 취소 엔진입니다.</param>
      <param name="name">이 실행 취소 단위의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="engine" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.Close">
      <summary>실행 취소 엔진에서 호출을 받아 이 단위를 닫습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.ComponentAdded(System.ComponentModel.Design.ComponentEventArgs)">
      <summary>
        <see cref="T:System.ComponentModel.Design.UndoEngine" /> 이벤트에 대한 응답으로 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />에서 호출을 받습니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.ComponentAdding(System.ComponentModel.Design.ComponentEventArgs)">
      <summary>
        <see cref="T:System.ComponentModel.Design.UndoEngine" /> 이벤트에 대한 응답으로 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />에서 호출을 받습니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.ComponentChanged(System.ComponentModel.Design.ComponentChangedEventArgs)">
      <summary>
        <see cref="T:System.ComponentModel.Design.UndoEngine" /> 이벤트에 대한 응답으로 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />에서 호출을 받습니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.ComponentChanging(System.ComponentModel.Design.ComponentChangingEventArgs)">
      <summary>
        <see cref="T:System.ComponentModel.Design.UndoEngine" /> 이벤트에 대한 응답으로 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />에서 호출을 받습니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.ComponentRemoved(System.ComponentModel.Design.ComponentEventArgs)">
      <summary>
        <see cref="T:System.ComponentModel.Design.UndoEngine" /> 이벤트에 대한 응답으로 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" />에서 호출을 받습니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.ComponentRemoving(System.ComponentModel.Design.ComponentEventArgs)">
      <summary>
        <see cref="T:System.ComponentModel.Design.UndoEngine" /> 이벤트에 대한 응답으로 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />에서 호출을 받습니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.ComponentRename(System.ComponentModel.Design.ComponentRenameEventArgs)">
      <summary>
        <see cref="T:System.ComponentModel.Design.UndoEngine" /> 이벤트에 대한 응답으로 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" />에서 호출을 받습니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.GetService(System.Type)">
      <summary>요청한 서비스의 인스턴스를 가져옵니다.</summary>
      <param name="serviceType">검색할 서비스의 형식입니다.</param>
      <returns>서비스의 인스턴스이거나, 서비스를 확인할 수 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.ToString">
      <summary>단위의 현재 이름을 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>단위의 현재 이름을 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.Undo">
      <summary>실행 취소 또는 다시 실행 작업을 수행합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.UndoEngine.UndoUnit.UndoCore">
      <summary>실행 취소 작업을 수행하기 위해 <see cref="M:System.ComponentModel.Design.UndoEngine.UndoUnit.Undo" />에서 호출합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.UndoEngine.UndoUnit.IsEmpty">
      <summary>
        <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />에 이벤트가 없는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />에 이벤트가 없으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.UndoEngine.UndoUnit.Name">
      <summary>
        <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.UndoEngine.UndoUnit.UndoEngine">
      <summary>부모 <see cref="P:System.ComponentModel.Design.UndoEngine.UndoUnit.UndoEngine" />을 가져옵니다.</summary>
      <returns>이 <see cref="P:System.ComponentModel.Design.UndoEngine.UndoUnit.UndoEngine" />가 연결된 <see cref="T:System.ComponentModel.Design.UndoEngine.UndoUnit" />입니다.</returns>
    </member>
    <member name="T:System.Drawing.Design.BitmapEditor">
      <summary>속성 브라우저에서 비트맵 파일을 선택할 수 있는 사용자 인터페이스를 제공합니다.</summary>
    </member>
    <member name="F:System.Drawing.Design.BitmapEditor.BitmapExtensions">
      <summary>파일 목록을 필터링하는 데 사용되는 기본 파일 확장명 목록을 제공합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.BitmapEditor.#ctor">
      <summary>
        <see cref="T:System.Drawing.Design.BitmapEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.BitmapEditor.GetExtensions">
      <summary>비트맵 편집기에서 처음에 파일 목록을 필터링하는 데 사용될 파일 목록 필터용 확장명을 가져옵니다.</summary>
      <returns>파일 목록을 필터링하는 데 사용되는 기본 파일 확장명 집합입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.BitmapEditor.GetFileDialogDescription">
      <summary>이 편집기에서 제공하는 기본 파일 목록 필터에 대한 설명을 가져옵니다.</summary>
      <returns>파일 목록 필터링의 기준이 되는 기본 파일 형식에 대한 설명입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.BitmapEditor.LoadFromStream(System.IO.Stream)">
      <summary>지정된 스트림에서 이미지를 로드합니다.</summary>
      <param name="stream">이미지를 로드할 스트림입니다.</param>
      <returns>스트림에서 로드된 <see cref="T:System.Drawing.Image" />입니다.</returns>
    </member>
    <member name="T:System.Drawing.Design.ColorEditor">
      <summary>색을 시각적으로 선택할 수 있는 <see cref="T:System.Drawing.Design.UITypeEditor" />를 제공합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.#ctor">
      <summary>
        <see cref="T:System.Drawing.Design.ColorEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="M:System.Drawing.Design.ColorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" /> 메서드에서 제공된 편집기 스타일을 사용하여 지정된 개체 값을 편집합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="provider">편집 서비스를 얻을 수 있는 <see cref="T:System.IServiceProvider" />입니다.</param>
      <param name="value">편집 중인 값의 인스턴스입니다.</param>
      <returns>개체의 새 값입니다. 개체의 값을 변경하지 않은 경우 여기서는 전달된 것과 동일한 개체를 반환해야 합니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Edit 메서드의 편집 스타일을 가져옵니다. 이 메서드가 지원되지 않는 경우에는 <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />이 반환됩니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>제공된 편집 스타일을 나타내는 열거형 값입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 편집기에서 개체 값 표현를 칠할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>
        <see cref="Overload:System.Drawing.Design.ColorEditor.PaintValue" />이 구현되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ColorEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>지정된 개체의 표시 값을 제공된 캔버스에 칠합니다.</summary>
      <param name="e">칠할 대상과 위치입니다.</param>
    </member>
    <member name="T:System.Drawing.Design.ContentAlignmentEditor">
      <summary>내용 맞춤을 시각적으로 편집할 수 있는 <see cref="T:System.Drawing.Design.UITypeEditor" />를 제공합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.ContentAlignmentEditor.#ctor">
      <summary>
        <see cref="T:System.Drawing.Design.ContentAlignmentEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.ContentAlignmentEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="Overload:System.Drawing.Design.ContentAlignmentEditor.GetEditStyle" /> 메서드에서 제공된 편집기 스타일을 사용하여 지정된 개체 값을 편집합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="provider">편집 서비스를 얻을 수 있는 <see cref="T:System.IServiceProvider" />입니다.</param>
      <param name="value">편집 중인 값의 인스턴스입니다.</param>
      <returns>개체의 새 값입니다. 개체의 값을 변경하지 않은 경우 여기서는 전달된 것과 동일한 개체를 반환해야 합니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ContentAlignmentEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="Overload:System.Drawing.Design.ContentAlignmentEditor.EditValue" /> 메서드의 편집 스타일을 가져옵니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>제공되는 편집 스타일을 나타내는 <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> 값입니다. 편집 스타일을 검색할 메서드가 지원되지 않을 경우  <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />이 반환됩니다.</returns>
    </member>
    <member name="T:System.Drawing.Design.CursorEditor">
      <summary>커서 파일(.cur)에 대한 기본 파일 검색을 수행할 수 있는 <see cref="T:System.Drawing.Design.UITypeEditor" />를 제공합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.CursorEditor.#ctor">
      <summary>
        <see cref="T:System.Drawing.Design.CursorEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.CursorEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="Overload:System.Drawing.Design.CursorEditor.GetEditStyle" /> 메서드에서 제공된 편집기 스타일을 사용하여 지정된 개체 값을 편집합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 제공하는 데 사용할 수 있는 형식 설명자 컨텍스트입니다.</param>
      <param name="provider">편집 서비스를 가져오는 데 사용할 수 있는 서비스 공급자 개체입니다.</param>
      <param name="value">편집 중인 값의 인스턴스입니다.</param>
      <returns>개체의 새 값입니다. 개체의 값을 변경하지 않은 경우 여기서는 전달된 것과 동일한 개체를 반환해야 합니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.CursorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="Overload:System.Drawing.Design.CursorEditor.EditValue" /> 메서드의 편집 스타일을 검색합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 제공하는 데 사용할 수 있는 형식 설명자 컨텍스트입니다.</param>
      <returns>제공된 편집 스타일을 나타내는 열거형 값입니다. 이 메서드가 지원되지 않는 경우에는 <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />이 반환됩니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.CursorEditor.IsDropDownResizable">
      <summary>드롭다운 편집기를 사용자가 크기 조정할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>드롭다운 편집기의 크기를 조정할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Drawing.Design.FontEditor">
      <summary>
        <see cref="T:System.Drawing.Font" /> 개체를 선택하고 구성하기 위한 사용자 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.FontEditor.#ctor">
      <summary>
        <see cref="T:System.Drawing.Design.FontEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.FontEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="M:System.Drawing.Design.FontEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" />로 표시된 편집기 스타일을 사용하여 지정된 개체의 값을 편집합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="provider">이 편집기에서 서비스를 가져오는 데 사용할 수 있는 <see cref="T:System.IServiceProvider" /> 입니다.</param>
      <param name="value">편집할 개체입니다.</param>
      <returns>개체의 새 값입니다. 개체의 값을 변경하지 않은 경우에는 전달된 것과 동일한 개체가 반환되어야 합니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.FontEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.Drawing.Design.FontEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> 메서드에서 사용하는 편집기 스타일을 가져옵니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>
        <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" />가 사용하는 편집기 스타일을 나타내는 <see cref="M:System.Drawing.Design.FontEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> 값입니다.</returns>
    </member>
    <member name="T:System.Drawing.Design.FontNameEditor">
      <summary>글꼴 이름에 대한 문자 모양을 칠하는 <see cref="T:System.Drawing.Design.UITypeEditor" />를 제공합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.FontNameEditor.#ctor">
      <summary>
        <see cref="T:System.Drawing.Design.FontNameEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.FontNameEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 편집기에서 개체 값 표현를 칠할 수 있는지 여부를 나타냅니다.</summary>
      <param name="context">추가 컨텍스트 정보를 제공하는 데 사용할 수 있는 형식 설명자 컨텍스트입니다.</param>
      <returns>
        <see cref="Overload:System.Drawing.Design.FontNameEditor.PaintValue" />이 구현되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.FontNameEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>지정된 개체의 표시 값을 제공된 캔버스에 칠합니다. 제공된 사각형의 경계 안에서 칠해야 합니다.</summary>
      <param name="e">칠할 대상과 위치입니다.</param>
    </member>
    <member name="T:System.Drawing.Design.IconEditor">
      <summary>아이콘을 시각적으로 선택할 수 있는 <see cref="T:System.Drawing.Design.UITypeEditor" />를 제공합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.#ctor">
      <summary>
        <see cref="T:System.Drawing.Design.IconEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.CreateExtensionsString(System.String[],System.String)">
      <summary>아이콘에 대한 올바른 파일 확장명을 나타내는 문자열을 만듭니다.</summary>
      <param name="extensions">올바른 파일 확장명을 보유하는 문자열 배열입니다.</param>
      <param name="sep">구분 문자를 지정하는 문자열입니다.</param>
      <returns>아이콘 파일 확장명이 들어 있는 문자열입니다. <paramref name="extensions" />가 <see langword="null" />이거나 비어 있는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.CreateFilterEntry(System.Drawing.Design.IconEditor)">
      <summary>파일 대화 상자에 대한 필터 문자열을 만듭니다.</summary>
      <param name="editor">필터 문자열이 만들어질 <see cref="T:System.Drawing.Design.IconEditor" />입니다.</param>
      <returns>
        <see cref="M:System.Drawing.Design.IconEditor.CreateExtensionsString(System.String[],System.String)" />에서 반환된 문자열을 사용하여 만들어지는 필터 문자열입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="M:System.Drawing.Design.IconEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" /> 메서드에서 제공된 편집기 스타일을 사용하여 지정된 개체 값을 편집합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 제공하는 데 사용할 수 있는 형식 설명자 컨텍스트입니다.</param>
      <param name="provider">편집 서비스를 가져오는 데 사용할 수 있는 서비스 공급자 개체입니다.</param>
      <param name="value">편집 중인 값의 인스턴스입니다.</param>
      <returns>개체의 새 값입니다. 개체의 값을 변경하지 않은 경우 여기서는 전달된 것과 동일한 개체를 반환해야 합니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="Overload:System.Drawing.Design.IconEditor.EditValue" /> 메서드의 편집 스타일을 검색합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 제공하는 데 사용할 수 있는 형식 설명자 컨텍스트입니다.</param>
      <returns>제공된 편집 스타일을 나타내는 <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.GetExtensions">
      <summary>아이콘에 대한 올바른 파일 확장명 배열을 검색합니다.</summary>
      <returns>아이콘에 대한 올바른 파일 확장명 배열입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.GetFileDialogDescription">
      <summary>이 편집기에서 제공하는 기본 파일 목록 필터에 대한 설명을 가져옵니다.</summary>
      <returns>파일 목록 필터링의 기준이 되는 기본 파일 형식에 대한 설명입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 편집기에서 개체 값 표현를 칠할 수 있는지 여부를 나타냅니다.</summary>
      <param name="context">추가 컨텍스트 정보를 제공하는 데 사용할 수 있는 형식 설명자 컨텍스트입니다.</param>
      <returns>
        <see cref="Overload:System.Drawing.Design.UITypeEditor.PaintValue" />이 구현되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.LoadFromStream(System.IO.Stream)">
      <summary>지정된 스트림에서 새 <see cref="T:System.Drawing.Icon" />을 만듭니다.</summary>
      <param name="stream">아이콘이 만들어질 소스 스트림입니다.</param>
      <returns>새로 만든 <see cref="T:System.Drawing.Icon" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IconEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>지정된 개체의 표시 값을 제공된 캔버스에 칠합니다.</summary>
      <param name="e">칠할 대상과 위치입니다.</param>
    </member>
    <member name="T:System.Drawing.Design.ImageEditor">
      <summary>속성 표에서 속성에 대한 이미지를 선택할 수 있는 사용자 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.#ctor">
      <summary>
        <see cref="T:System.Drawing.Design.ImageEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.CreateExtensionsString(System.String[],System.String)">
      <summary>지정된 확장명 배열 및 지정된 구분 기호를 사용하여 확장명에 사용할 문자열을 만듭니다.</summary>
      <param name="extensions">필터링의 기준이 되는 확장명입니다.</param>
      <param name="sep">사용할 구분 기호입니다.</param>
      <returns>지정된 확장명을 포함하는 문자열이며 각 문자열은 지정된 구분 기호에 의해 구분됩니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.CreateFilterEntry(System.Drawing.Design.ImageEditor)">
      <summary>파일 대화 상자의 파일 목록에 사용할 필터 엔트리를 만듭니다.</summary>
      <param name="e">필터 항목을 가져올 <see cref="T:System.Drawing.Design.ImageEditor" />입니다.</param>
      <returns>새 필터 엔트리 문자열입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="M:System.Drawing.Design.ImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" /> 메서드에서 제공한 편집 스타일을 사용하여 지정된 개체 값을 편집합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="provider">편집 서비스를 얻을 수 있는 <see cref="T:System.IServiceProvider" />입니다.</param>
      <param name="value">편집하고 있는 <see cref="T:System.Object" />입니다.</param>
      <returns>새 값을 나타내는 <see cref="T:System.Object" />입니다. 개체의 값을 변경하지 않은 경우 <see cref="M:System.Drawing.Design.ImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" />는 전달된 개체를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.Drawing.Design.ImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> 메서드의 편집 스타일을 가져옵니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>지원되는 편집 스타일을 나타내는 <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.GetExtensions">
      <summary>파일 목록을 필터링하기 위해 이 편집기가 처음 사용하는 파일 목록 필터에 대한 확장을 가져옵니다.</summary>
      <returns>파일 목록을 필터링하는 데 사용되는 확장명 집합입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.GetFileDialogDescription">
      <summary>이 편집기에서 제공되는 기본 파일 목록 필터에 대한 설명을 가져옵니다.</summary>
      <returns>기본 파일 목록 필터에 대한 설명입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.GetImageExtenders">
      <summary>지원되는 이미지 형식의 배열을 가져옵니다.</summary>
      <returns>지원되는 이미지 형식을 나타내는 <see cref="T:System.Type" /> 배열입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 편집기에서 개체 값 표현을 칠할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>
        <see cref="M:System.Drawing.Design.ImageEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)" />이 구현되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.LoadFromStream(System.IO.Stream)">
      <summary>지정된 스트림에서 이미지를 로드합니다.</summary>
      <param name="stream">로드할 이미지를 포함하는 <see cref="T:System.IO.Stream" /> 입니다.</param>
      <returns>로드된 <see cref="T:System.Drawing.Image" /> 입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ImageEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>지정된 <see cref="T:System.Drawing.Design.PaintValueEventArgs" />가 나타내는 값을 칠합니다.</summary>
      <param name="e">칠할 대상과 칠할 위치를 나타내는 <see cref="T:System.Drawing.Design.PaintValueEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Drawing.Design.IToolboxItemProvider">
      <summary>도구 상자 항목의 컬렉션을 노출합니다.</summary>
    </member>
    <member name="P:System.Drawing.Design.IToolboxItemProvider.Items">
      <summary>
        <see cref="T:System.Drawing.Design.ToolboxItem" /> 개체의 컬렉션입니다.</summary>
      <returns>
        <see cref="T:System.Drawing.Design.ToolboxItem" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Drawing.Design.IToolboxService">
      <summary>개발 환경에서 도구 상자를 관리하고 쿼리할 수 있는 메서드와 속성을 제공합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.AddCreator(System.Drawing.Design.ToolboxItemCreatorCallback,System.String)">
      <summary>지정된 데이터 형식에 대해 새 도구 상자 항목 작성자를 추가합니다.</summary>
      <param name="creator">도구 상자 항목을 호출할 때, 구성 요소를 만드는 <see cref="T:System.Drawing.Design.ToolboxItemCreatorCallback" />입니다.</param>
      <param name="format">작성자가 처리하는 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.AddCreator(System.Drawing.Design.ToolboxItemCreatorCallback,System.String,System.ComponentModel.Design.IDesignerHost)">
      <summary>지정된 데이터 형식과 디자이너 호스트에 대해 새 도구 상자 항목 작성자를 추가합니다.</summary>
      <param name="creator">도구 상자 항목을 호출할 때, 구성 요소를 만드는 <see cref="T:System.Drawing.Design.ToolboxItemCreatorCallback" />입니다.</param>
      <param name="format">작성자가 처리하는 데이터 형식입니다.</param>
      <param name="host">작성자와 연결할 디자이너 호스트를 나타내는 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.AddLinkedToolboxItem(System.Drawing.Design.ToolboxItem,System.ComponentModel.Design.IDesignerHost)">
      <summary>도구 상자에 지정된 프로젝트 연결 도구 상자 항목을 추가합니다.</summary>
      <param name="toolboxItem">도구 상자에 추가할 연결된 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <param name="host">현재 디자인 문서에 대한 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.AddLinkedToolboxItem(System.Drawing.Design.ToolboxItem,System.String,System.ComponentModel.Design.IDesignerHost)">
      <summary>프로젝트에 연결된 지정 도구 상자 항목을 지정된 범주에 속한 도구 상자에 추가합니다.</summary>
      <param name="toolboxItem">도구 상자에 추가할 연결된 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <param name="category">도구 상자 항목을 추가할 도구 상자 항목 범주입니다.</param>
      <param name="host">현재 디자인 문서에 대한 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.AddToolboxItem(System.Drawing.Design.ToolboxItem)">
      <summary>지정된 도구 상자 항목을 도구 상자에 추가합니다.</summary>
      <param name="toolboxItem">도구 상자에 추가할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.AddToolboxItem(System.Drawing.Design.ToolboxItem,System.String)">
      <summary>지정된 범주의 도구 상자에 지정된 도구 상자 항목을 추가합니다.</summary>
      <param name="toolboxItem">도구 상자에 추가할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <param name="category">
        <see cref="T:System.Drawing.Design.ToolboxItem" />을 추가할 도구 상자 항목 범주입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.DeserializeToolboxItem(System.Object)">
      <summary>도구 상자 항목을 serialize된 형식으로 나타내는 지정된 개체에서 도구 상자 항목을 가져옵니다.</summary>
      <param name="serializedObject">검색할 <see cref="T:System.Drawing.Design.ToolboxItem" />이 들어 있는 개체입니다.</param>
      <returns>serialize된 개체로 만들어진 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.DeserializeToolboxItem(System.Object,System.ComponentModel.Design.IDesignerHost)">
      <summary>지정된 디자이너 호스트를 사용하여, 도구 상자 항목을 serialize된 형식으로 나타내는 지정된 개체에서 도구 상자 항목을 가져옵니다.</summary>
      <param name="serializedObject">검색할 <see cref="T:System.Drawing.Design.ToolboxItem" />이 들어 있는 개체입니다.</param>
      <param name="host">이 <see cref="T:System.ComponentModel.Design.IDesignerHost" />와 연결할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <returns>deserialization으로 만들어진 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.GetSelectedToolboxItem">
      <summary>현재 선택한 도구 상자 항목을 가져옵니다.</summary>
      <returns>현재 선택된 <see cref="T:System.Drawing.Design.ToolboxItem" />이거나, 선택된 도구 상자 항목이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.GetSelectedToolboxItem(System.ComponentModel.Design.IDesignerHost)">
      <summary>모든 디자이너가 사용할 수 있거나, 지정된 디자이너를 지원하는 경우, 현재 선택한 도구 상자 항목을 가져옵니다.</summary>
      <param name="host">선택한 도구가 반환되기 위해 연결되어야 하는 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</param>
      <returns>현재 선택된 <see cref="T:System.Drawing.Design.ToolboxItem" />이거나, 현재 선택된 도구 상자 항목이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.GetToolboxItems">
      <summary>도구 상자에서 도구 상자 항목의 전체 컬렉션을 가져옵니다.</summary>
      <returns>현재 도구 상자 항목이 들어 있는 <see cref="T:System.Drawing.Design.ToolboxItemCollection" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.GetToolboxItems(System.ComponentModel.Design.IDesignerHost)">
      <summary>도구 상자에서 지정된 디자이너 호스트와 연결되는 도구 상자 컬렉션을 가져옵니다.</summary>
      <param name="host">검색할 도구 상자 항목과 연결되는 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</param>
      <returns>지정된 디자이너 호스트와 연결되는 현재 도구 상자 항목이 들어 있는 <see cref="T:System.Drawing.Design.ToolboxItemCollection" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.GetToolboxItems(System.String)">
      <summary>지정된 범주와 일치하는 도구 상자에서 도구 상자 항목의 컬렉션을 가져옵니다.</summary>
      <param name="category">모든 도구 상자 항목을 검색할 도구 상자 항목 범주입니다.</param>
      <returns>지정된 범주와 연결되는 현재 도구 상자 항목이 들어 있는 <see cref="T:System.Drawing.Design.ToolboxItemCollection" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.GetToolboxItems(System.String,System.ComponentModel.Design.IDesignerHost)">
      <summary>도구 상자에서 지정된 디자이너 호스트 및 범주와 연결되는 도구 상자 컬렉션을 가져옵니다.</summary>
      <param name="category">도구 상자 항목을 검색할 도구 상자 항목 범주입니다.</param>
      <param name="host">검색할 도구 상자 항목과 연결되는 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</param>
      <returns>지정된 범주 및 디자이너 호스트와 연결되는 현재 도구 상자 항목이 들어 있는 <see cref="T:System.Drawing.Design.ToolboxItemCollection" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.IsSupported(System.Object,System.Collections.ICollection)">
      <summary>serialize된 도구 상자 항목을 나타내는 지정된 개체가 지정된 특성과 일치하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="serializedObject">검색할 <see cref="T:System.Drawing.Design.ToolboxItem" />이 들어 있는 개체입니다.</param>
      <param name="filterAttributes">serializaton된 개체를 테스트할 특성이 들어 있는 <see cref="T:System.Collections.ICollection" />입니다.</param>
      <returns>개체가 지정된 특성과 일치하는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.IsSupported(System.Object,System.ComponentModel.Design.IDesignerHost)">
      <summary>지정된 디자이너 호스트가 serialize된 도구 상자 항목을 나타내는 지정된 개체를 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="serializedObject">검색할 <see cref="T:System.Drawing.Design.ToolboxItem" />이 들어 있는 개체입니다.</param>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />을 지원하는지 테스트할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <returns>지정된 개체가 지정된 디자이너 호스트와 호환되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.IsToolboxItem(System.Object)">
      <summary>지정된 개체가 serialize된 도구 상자 항목인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="serializedObject">검사할 개체입니다.</param>
      <returns>이 개체가 도구 상자 항목 개체를 포함하면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.IsToolboxItem(System.Object,System.ComponentModel.Design.IDesignerHost)">
      <summary>지정된 디자이너 호스트를 사용하여, 지정된 개체가 serialize된 도구 상자 항목인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="serializedObject">검사할 개체입니다.</param>
      <param name="host">이 요청을 하는 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</param>
      <returns>이 개체가 도구 상자 항목 개체를 포함하면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.Refresh">
      <summary>도구 상자 항목의 상태를 새로 고칩니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.RemoveCreator(System.String)">
      <summary>지정된 데이터 형식의 이전에 추가된 도구 상자 항목 작성자를 제거합니다.</summary>
      <param name="format">제거할 작성자의 데이터 형식입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.RemoveCreator(System.String,System.ComponentModel.Design.IDesignerHost)">
      <summary>지정된 데이터 형식 및 지정된 디자이너 호스트와 연결되는 이전에 추가된 도구 상자 작성자를 제거합니다.</summary>
      <param name="format">제거할 작성자의 데이터 형식입니다.</param>
      <param name="host">제거할 작성자와 연결되는 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.RemoveToolboxItem(System.Drawing.Design.ToolboxItem)">
      <summary>도구 상자에서 지정된 도구 상자 항목을 제거합니다.</summary>
      <param name="toolboxItem">도구 상자에서 제거할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.RemoveToolboxItem(System.Drawing.Design.ToolboxItem,System.String)">
      <summary>도구 상자에서 지정된 도구 상자 항목을 제거합니다.</summary>
      <param name="toolboxItem">도구 상자에서 제거할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <param name="category">
        <see cref="T:System.Drawing.Design.ToolboxItem" />을 제거할 도구 상자 항목 범주입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.SelectedToolboxItemUsed">
      <summary>도구 상자 서비스에 선택한 도구의 사용 여부를 알립니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.SerializeToolboxItem(System.Drawing.Design.ToolboxItem)">
      <summary>지정된 도구 상자 항목을 나타내는 serializable 개체를 가져옵니다.</summary>
      <param name="toolboxItem">serialize할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <returns>지정된 <see cref="T:System.Drawing.Design.ToolboxItem" />을 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.SetCursor">
      <summary>현재 애플리케이션의 커서를 현재 선택한 도구를 나타내는 커서로 설정합니다.</summary>
      <returns>커서가 현재 선택한 도구가 커서에 의해 설정되면 <see langword="true" />이고, 선택한 도구가 없고 커서가 표준 Windows 커서로 설정되면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxService.SetSelectedToolboxItem(System.Drawing.Design.ToolboxItem)">
      <summary>지정된 도구 상자 항목을 선택합니다.</summary>
      <param name="toolboxItem">선택할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
    </member>
    <member name="P:System.Drawing.Design.IToolboxService.CategoryNames">
      <summary>현재 도구 상자에 있는 모든 도구 범주의 이름을 가져옵니다.</summary>
      <returns>도구 범주를 포함하는 <see cref="T:System.Drawing.Design.CategoryNameCollection" />입니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.IToolboxService.SelectedCategory">
      <summary>도구 상자에서 현재 선택한 도구 범주의 이름을 가져오거나 설정합니다.</summary>
      <returns>현재 선택한 범주의 이름입니다.</returns>
    </member>
    <member name="T:System.Drawing.Design.IToolboxUser">
      <summary>현재 선택된 도구 상자 항목을 설정하고 디자이너에서 특정 도구 상자 항목을 지원하는지 여부를 나타내는 인터페이스를 정의합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)">
      <summary>현재 디자이너에서 지정된 도구를 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="tool">도구 상자 지원 여부를 테스트할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <returns>도구 상자에서 해당 도구를 지원하며 도구를 활성화할 수 있으면 <see langword="true" />이고 문서 디자이너에서 도구 사용 방법을 알지 못하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.IToolboxUser.ToolPicked(System.Drawing.Design.ToolboxItem)">
      <summary>지정된 도구를 선택합니다.</summary>
      <param name="tool">선택할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
    </member>
    <member name="T:System.Drawing.Design.MetafileEditor">
      <summary>메타파일(.emf) 파일에 대한 기본 파일 검색을 수행할 수 있는 <see cref="T:System.Drawing.Design.UITypeEditor" />를 제공합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.MetafileEditor.#ctor">
      <summary>
        <see cref="T:System.Drawing.Design.MetafileEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.MetafileEditor.GetExtensions">
      <summary>파일 목록을 필터링하기 위해 이 편집기가 처음 사용하는 파일 목록 필터에 대한 확장을 가져옵니다.</summary>
      <returns>파일 목록을 필터링하는 데 사용되는 확장명 집합입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.MetafileEditor.GetFileDialogDescription">
      <summary>이 편집기에서 제공되는 기본 파일 목록 필터에 대한 설명을 가져옵니다.</summary>
      <returns>기본 파일 목록 필터에 대한 설명입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.MetafileEditor.LoadFromStream(System.IO.Stream)">
      <summary>지정된 스트림에서 이미지를 로드합니다.</summary>
      <param name="stream">로드할 이미지를 포함하는 <see cref="T:System.IO.Stream" /> 입니다.</param>
      <returns>로드된 <see cref="T:System.Drawing.Image" /> 입니다.</returns>
    </member>
    <member name="T:System.Drawing.Design.ToolboxComponentsCreatedEventArgs">
      <summary>도구 상자에 구성 요소가 추가될 때 발생하는 <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreated" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.ToolboxComponentsCreatedEventArgs.#ctor(System.ComponentModel.IComponent[])">
      <summary>
        <see cref="T:System.Drawing.Design.ToolboxComponentsCreatedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="components">도구 상자에 포함시킬 구성 요소입니다.</param>
    </member>
    <member name="P:System.Drawing.Design.ToolboxComponentsCreatedEventArgs.Components">
      <summary>도구 상자에 추가할 구성 요소를 포함하는 배열을 가져오거나 설정합니다.</summary>
      <returns>도구 상자에 추가할 구성 요소를 나타내는 <see cref="T:System.ComponentModel.IComponent" /> 형식의 배열입니다.</returns>
    </member>
    <member name="T:System.Drawing.Design.ToolboxComponentsCreatedEventHandler">
      <summary>
        <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreated" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Drawing.Design.ToolboxComponentsCreatedEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Drawing.Design.ToolboxComponentsCreatingEventArgs">
      <summary>도구 상자에 구성 요소가 추가될 때 발생하는 <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreating" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.ToolboxComponentsCreatingEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>
        <see cref="T:System.Drawing.Design.ToolboxComponentsCreatingEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="host">요청 중인 디자이너 호스트입니다.</param>
    </member>
    <member name="P:System.Drawing.Design.ToolboxComponentsCreatingEventArgs.DesignerHost">
      <summary>도구 상자 구성 요소를 만들도록 요청한 <see cref="T:System.ComponentModel.Design.IDesignerHost" />의 인스턴스를 가져오거나 설정합니다.</summary>
      <returns>도구 상자 구성 요소를 만들도록 요청한 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다. 도구 상자 항목에 디자이너 호스트가 지정되어 있지 않은 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Drawing.Design.ToolboxComponentsCreatingEventHandler">
      <summary>
        <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreating" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Drawing.Design.ToolboxComponentsCreatingEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Drawing.Design.ToolboxItem">
      <summary>기본 구현된 도구 상자 항목을 제공합니다.</summary>
    </member>
    <member name="E:System.Drawing.Design.ToolboxItem.ComponentsCreated">
      <summary>구성 요소를 만든 후 즉시 발생합니다.</summary>
    </member>
    <member name="E:System.Drawing.Design.ToolboxItem.ComponentsCreating">
      <summary>구성 요소를 만들기 직전에 발생합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.#ctor">
      <summary>
        <see cref="T:System.Drawing.Design.ToolboxItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.#ctor(System.Type)">
      <summary>지정된 구성 요소 형식을 만드는 <see cref="T:System.Drawing.Design.ToolboxItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="toolType">도구 상자 항목에서 만드는 <see cref="T:System.ComponentModel.IComponent" /> 형식입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Drawing.Design.ToolboxItem" />이 잠긴 경우</exception>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.CheckUnlocked">
      <summary>도구 상자 항목이 현재 잠겨 있으면 예외를 throw합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Drawing.Design.ToolboxItem" />이 잠겨 있는 경우</exception>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.CreateComponents">
      <summary>도구 상자 항목이 만들도록 구성된 구성 요소를 만듭니다.</summary>
      <returns>생성된 <see cref="T:System.ComponentModel.IComponent" /> 개체 배열입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.CreateComponents(System.ComponentModel.Design.IDesignerHost)">
      <summary>도구 상자 항목이 만들도록 구성된 구성 요소를 지정된 디자이너 호스트를 사용하여 만듭니다.</summary>
      <param name="host">구성 요소를 만들 때 사용할 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</param>
      <returns>생성된 <see cref="T:System.ComponentModel.IComponent" /> 개체 배열입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.CreateComponents(System.ComponentModel.Design.IDesignerHost,System.Collections.IDictionary)">
      <summary>도구 상자 항목이 만들도록 구성된 구성 요소를 지정된 디자이너 호스트와 기본값을 사용하여 만듭니다.</summary>
      <param name="host">구성 요소를 만들 때 사용할 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</param>
      <param name="defaultValues">구성 요소의 초기화에 사용할 기본값의 속성 이름/값 쌍 사전입니다.</param>
      <returns>생성된 <see cref="T:System.ComponentModel.IComponent" /> 개체 배열입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.CreateComponentsCore(System.ComponentModel.Design.IDesignerHost)">
      <summary>도구 상자 항목이 호출될 때 구성 요소 한 개나 구성 요소의 배열을 만듭니다.</summary>
      <param name="host">도구 상자 항목을 호스팅할 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</param>
      <returns>생성된 <see cref="T:System.ComponentModel.IComponent" /> 개체 배열입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.CreateComponentsCore(System.ComponentModel.Design.IDesignerHost,System.Collections.IDictionary)">
      <summary>도구 상자 항목이 호출될 때 구성 요소의 배열을 만듭니다.</summary>
      <param name="host">구성 요소를 만들 때 사용할 디자이너 호스트입니다.</param>
      <param name="defaultValues">구성 요소의 초기화에 사용할 기본값의 속성 이름/값 쌍 사전입니다.</param>
      <returns>생성된 <see cref="T:System.ComponentModel.IComponent" /> 개체 배열입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.Deserialize(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>도구 상자 항목의 상태를 지정된 serialization 정보 개체에서 로드합니다.</summary>
      <param name="info">로드할 원본 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">스트림 특징을 나타내는 <see cref="T:System.Runtime.Serialization.StreamingContext" />입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.Equals(System.Object)">
      <summary>두 개의 <see cref="T:System.Drawing.Design.ToolboxItem" /> 인스턴스가 같은지 여부를 확인합니다.</summary>
      <param name="obj">현재 <see cref="T:System.Drawing.Design.ToolboxItem" />과 비교할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <returns>지정된 <see langword="true" />가 현재<see cref="T:System.Drawing.Design.ToolboxItem" />와 같으면 <see cref="T:System.Drawing.Design.ToolboxItem" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.FilterPropertyValue(System.String,System.Object)">
      <summary>속성 값을 반환하기 전에 필터링합니다.</summary>
      <param name="propertyName">필터링할 속성의 이름입니다.</param>
      <param name="value">속성을 필터링할 값입니다.</param>
      <returns>필터링된 속성 값입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.Drawing.Design.ToolboxItem" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.GetType(System.ComponentModel.Design.IDesignerHost)">
      <summary>도구 상자 항목과 연결된 형식에 대한 액세스를 가능하게 합니다.</summary>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.ITypeResolutionService" />에 대해 쿼리할 디자이너 호스트입니다.</param>
      <returns>해당 도구 상자 항목과 연결된 형식입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.GetType(System.ComponentModel.Design.IDesignerHost,System.Reflection.AssemblyName,System.String,System.Boolean)">
      <summary>지정된 디자이너 호스트와 어셈블리 이름을 선택적으로 사용하여 지정된 형식의 인스턴스를 만듭니다.</summary>
      <param name="host">현재 문서에 대한 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
      <param name="assemblyName">로드할 형식을 포함하는 어셈블리를 나타내는 <see cref="T:System.Reflection.AssemblyName" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
      <param name="typeName">인스턴스를 만들 형식의 이름입니다.</param>
      <param name="reference">지정된 형식을 포함하는 어셈블리에 대한 참조를 디자이너 호스트의 참조 집합에 추가할 것인지 여부를 나타내는 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" />을(를) 지정하지 않았습니다.</exception>
      <returns>지정된 형식을 찾을 수 있는 경우 그 형식의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.Initialize(System.Type)">
      <summary>만들려는 지정된 형식으로 현재 도구 상자 항목을 초기화합니다.</summary>
      <param name="type">도구 상자 항목에서 만드는 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Drawing.Design.ToolboxItem" />이 잠긴 경우</exception>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.Lock">
      <summary>도구 상자 항목을 잠그고 속성에 대한 변경을 방지합니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.OnComponentsCreated(System.Drawing.Design.ToolboxComponentsCreatedEventArgs)">
      <summary>
        <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreated" /> 이벤트를 발생시킵니다.</summary>
      <param name="args">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Drawing.Design.ToolboxComponentsCreatedEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.OnComponentsCreating(System.Drawing.Design.ToolboxComponentsCreatingEventArgs)">
      <summary>
        <see cref="E:System.Drawing.Design.ToolboxItem.ComponentsCreating" /> 이벤트를 발생시킵니다.</summary>
      <param name="args">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Drawing.Design.ToolboxComponentsCreatingEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.Serialize(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>도구 상자 항목의 상태를 지정된 serialization 정보 개체에 저장합니다.</summary>
      <param name="info">저장할 곳인 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">스트림 특징을 나타내는 <see cref="T:System.Runtime.Serialization.StreamingContext" />입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 메서드를 참조하세요.</summary>
      <param name="info">데이터로 채울 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">이 serialization에 대한 대상입니다(<see cref="T:System.Runtime.Serialization.StreamingContext" /> 참조).</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.ToString">
      <summary>현재 <see cref="T:System.Drawing.Design.ToolboxItem" />를 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>현재 <see cref="T:System.String" />를 나타내는 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.ValidatePropertyType(System.String,System.Object,System.Type,System.Boolean)">
      <summary>개체가 지정된 형식인지 유효성을 검사합니다.</summary>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
      <param name="value">유효성을 검사할 선택적 값입니다.</param>
      <param name="expectedType">속성의 필요한 형식입니다.</param>
      <param name="allowNull">
        <see langword="true" />을 허용하면 <see langword="null" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />이고 <paramref name="allowNull" />이 <see langword="false" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />가 <paramref name="expectedType" />에 지정된 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItem.ValidatePropertyValue(System.String,System.Object)">
      <summary>속성을 속성 사전에 할당하기 전에 유효성을 검사합니다.</summary>
      <param name="propertyName">유효성을 검사할 속성의 이름입니다.</param>
      <param name="value">유효성을 검사할 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />이고 <paramref name="propertyName" />이 "IsTransient"인 경우</exception>
      <returns>유효성 검사를 수행하는 데 사용할 값입니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.AssemblyName">
      <summary>도구 상자 항목이 만드는 형식을 포함하는 어셈블리 이름을 가져오거나 설정합니다.</summary>
      <returns>만들 형식을 포함하는 어셈블리를 나타내는 <see cref="T:System.Reflection.AssemblyName" />입니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.Bitmap">
      <summary>도구 상자에서 도구 상자 항목을 나타내는 비트맵을 가져오거나 설정합니다.</summary>
      <returns>도구 상자에서 도구 상자 항목을 나타내는 <see cref="T:System.Drawing.Bitmap" />입니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.Company">
      <summary>
        <see cref="T:System.Drawing.Design.ToolboxItem" />의 회사 이름을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.String" />의 회사를 지정하는 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.ComponentType">
      <summary>
        <see cref="T:System.Drawing.Design.ToolboxItem" />에 대한 구성 요소 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />에 대한 회사 형식을 지정하는 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.DependentAssemblies">
      <summary>도구 상자 항목의 <see cref="T:System.Reflection.AssemblyName" />을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Reflection.AssemblyName" /> 개체의 배열입니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.Description">
      <summary>
        <see cref="T:System.Drawing.Design.ToolboxItem" />의 설명을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.String" />의 설명을 지정하는 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.DisplayName">
      <summary>도구 상자 항목의 표시 이름을 가져오거나 설정합니다.</summary>
      <returns>도구 상자 항목에 대한 표시 이름입니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.Filter">
      <summary>도구 상자 항목이 대상 구성 요소에서 사용될 수 있는지를 결정하는 필터를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 개체의 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />입니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.IsTransient">
      <summary>도구 상자 항목이 임시인지를 나타내는 값을 가져옵니다.</summary>
      <returns>도구 상자를 제공하는 애플리케이션을 닫을 때 이 도구 상자 항목을 도구 상자 데이터베이스에 저장할 필요가 없으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.Locked">
      <summary>
        <see cref="T:System.Drawing.Design.ToolboxItem" />이 현재 잠겨 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>도구 상자 항목이 잠겨 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.OriginalBitmap">
      <summary>이 항목의 도구 상자에서 사용될 원래 비트맵을 가져오거나 설정합니다.</summary>
      <returns>도구 상자에서 도구 상자 항목을 나타내는 <see cref="T:System.Drawing.Bitmap" />입니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.Properties">
      <summary>속성 사전을 가져옵니다.</summary>
      <returns>이름/값 쌍 사전입니다. 여기서 이름은 속성 이름이고 값은 속성 값입니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.TypeName">
      <summary>도구 상자 항목이 호출될 때 만드는 <see cref="T:System.ComponentModel.IComponent" /> 형식의 정규화된 이름을 가져오거나 설정합니다.</summary>
      <returns>이 도구 상자 항목이 만드는 구성 요소 형식의 정규화된 형식 이름입니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItem.Version">
      <summary>
        <see cref="T:System.Drawing.Design.ToolboxItem" />의 버전을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />의 버전을 지정하는 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</returns>
    </member>
    <member name="T:System.Drawing.Design.ToolboxItemCollection">
      <summary>도구 상자 항목의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemCollection.#ctor(System.Drawing.Design.ToolboxItem[])">
      <summary>지정된 도구 상자 항목의 배열을 사용하여 <see cref="T:System.Drawing.Design.ToolboxItemCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 채울 도구 상자 항목을 포함하는 <see cref="T:System.Drawing.Design.ToolboxItem" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemCollection.#ctor(System.Drawing.Design.ToolboxItemCollection)">
      <summary>지정된 컬렉션을 사용하여 <see cref="T:System.Drawing.Design.ToolboxItemCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">새 컬렉션을 채울 <see cref="T:System.Drawing.Design.ToolboxItemCollection" />입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemCollection.Contains(System.Drawing.Design.ToolboxItem)">
      <summary>컬렉션에 지정된 <see cref="T:System.Drawing.Design.ToolboxItem" />이 들어 있는지 여부를 나타냅니다.</summary>
      <param name="value">컬렉션을 검색할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <returns>컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemCollection.CopyTo(System.Drawing.Design.ToolboxItem[],System.Int32)">
      <summary>지정된 대상 인덱스에서 시작하는 지정된 배열에 컬렉션을 복사합니다.</summary>
      <param name="array">복사할 대상 배열입니다.</param>
      <param name="index">복사를 시작할 인덱스입니다.</param>
    </member>
    <member name="M:System.Drawing.Design.ToolboxItemCollection.IndexOf(System.Drawing.Design.ToolboxItem)">
      <summary>컬렉션에 지정된 도구 상자 항목이 있는 경우 해당 <see cref="T:System.Drawing.Design.ToolboxItem" />의 인덱스를 가져옵니다.</summary>
      <param name="value">컬렉션에 있는 인덱스를 가져올 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <returns>지정된 <see cref="T:System.Drawing.Design.ToolboxItem" />의 인덱스입니다.</returns>
    </member>
    <member name="P:System.Drawing.Design.ToolboxItemCollection.Item(System.Int32)">
      <summary>지정된 인덱스의 <see cref="T:System.Drawing.Design.ToolboxItem" />를 가져옵니다.</summary>
      <param name="index">가져오거나 설정할 개체의 인덱스입니다.</param>
      <returns>컬렉션의 유효한 각 인덱스에 있는 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</returns>
    </member>
    <member name="T:System.Drawing.Design.ToolboxItemCreatorCallback">
      <summary>
        <see cref="T:System.Drawing.Design.ToolboxItem" />을 만들 수 있는 콜백 메커니즘을 제공합니다.</summary>
      <param name="serializedObject">
        <see cref="T:System.Drawing.Design.ToolboxItem" />을 만들 대상 데이터가 포함된 개체입니다.</param>
      <param name="format">
        <see cref="T:System.Drawing.Design.ToolboxItem" />을 만들 대상 클립보드 데이터 형식의 이름입니다.</param>
      <returns>
        <paramref name="serializedObject" />로 지정된 <see cref="T:System.Drawing.Design.ToolboxItem" /> 개체의 역직렬화된 형식입니다.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UCOMITypeLib">
      <summary>대신 <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeLib" />를 사용하세요.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>라이브러리의 설명서 문자열, 전체 도움말 파일 이름과 경로, 도움말 파일의 라이브러리 도움말 항목에 대한 컨텍스트 식별자를 검색합니다.</summary>
      <param name="index">설명서를 반환할 형식 설명의 인덱스입니다.</param>
      <param name="strName">지정된 항목의 이름이 들어 있는 문자열을 반환합니다.</param>
      <param name="strDocString">지정된 항목에 대한 설명서 문자열이 들어 있는 문자열을 반환합니다.</param>
      <param name="dwHelpContext">지정된 항목과 연관된 도움말 컨텍스트 식별자를 반환합니다.</param>
      <param name="strHelpFile">도움말 파일의 정규화된 이름이 들어 있는 문자열을 반환합니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetLibAttr(System.IntPtr@)">
      <summary>라이브러리의 특성이 들어 있는 구조를 검색합니다.</summary>
      <param name="ppTLibAttr">반환이 성공적이면, 라이브러리의 특성이 들어 있는 구조입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetTypeInfoCount">
      <summary>형식 라이브러리에 있는 형식 설명의 수를 반환합니다.</summary>
      <returns>형식 라이브러리에 있는 형식 설명의 수입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>형식 설명의 형식을 검색합니다.</summary>
      <param name="index">형식 라이브러리에 있는 형식 설명의 인덱스</param>
      <param name="pTKind">형식 설명에 대한 <see langword="TYPEKIND" /> 열거형에 대한 참조입니다.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.IsName(System.String,System.Int32)">
      <summary>라이브러리에 설명되어 있는 형식이나 멤버의 이름이 전달된 문자열에 들어 있는지 여부를 나타냅니다.</summary>
      <param name="szNameBuf">테스트할 문자열입니다.</param>
      <param name="lHashVal">
        <paramref name="szNameBuf" />의 해시 값입니다.</param>
      <returns>
        <paramref name="szNameBuf" />가 형식 라이브러리에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.UCOMITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" />에서 처음 얻은 <see cref="M:System.Runtime.InteropServices.UCOMITypeLib.GetLibAttr(System.IntPtr@)" />를 해제합니다.</summary>
      <param name="pTLibAttr">해제할 <see langword="TLIBATTR" />입니다.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.AnchorEditor">
      <summary>
        <see cref="P:System.Windows.Forms.Control.Anchor" /> 속성을 구성하기 위한 사용자 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AnchorEditor.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.AnchorEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AnchorEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>지정된 서비스 공급자와 컨텍스트를 사용하여 지정된 개체의 값을 편집합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="provider">편집 서비스를 얻을 수 있는 <see cref="T:System.IServiceProvider" />입니다.</param>
      <param name="value">편집 중인 값의 인스턴스입니다.</param>
      <returns>개체의 새 값입니다. 개체의 값을 변경하지 않은 경우 여기서는 전달된 것과 동일한 개체를 반환해야 합니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AnchorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.Windows.Forms.Design.AnchorEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> 메서드에서 사용하는 편집기 스타일을 가져옵니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>제공된 편집 스타일을 나타내는 <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> 값 중 하나입니다. 해당 메서드가 지원되지 않는 경우 이 메서드는 <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.AxImporter">
      <summary>ActiveX 컨트롤을 가져와 디자이너가 액세스할 수 있는 래퍼를 생성합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.#ctor(System.Windows.Forms.Design.AxImporter.Options)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.AxImporter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="options">ActiveX 컨트롤 가져오기에서 사용할 옵션을 나타내는 <see cref="T:System.Windows.Forms.Design.AxImporter.Options" />입니다.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.AxImporter.IReferenceResolver">
      <summary>ActiveX 라이브러리, COM 형식 라이브러리나 어셈블리 또는 관리되는 어셈블리에 대한 참조를 확인하는 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.IReferenceResolver.ResolveActiveXReference(System.Runtime.InteropServices.UCOMITypeLib)">
      <summary>ActiveX 컨트롤이 포함된 지정 형식 라이브러리에 대한 참조를 확인합니다.</summary>
      <param name="typeLib">참조를 확인할 <see cref="T:System.Runtime.InteropServices.UCOMITypeLib" />입니다.</param>
      <returns>어셈블리에 대한 정규화된 경로입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.IReferenceResolver.ResolveComReference(System.Reflection.AssemblyName)">
      <summary>COM 구성 요소가 포함된 지정 어셈블리에 대한 참조를 확인합니다.</summary>
      <param name="name">참조를 확인할 어셈블리를 나타내는 <see cref="T:System.Reflection.AssemblyName" />입니다.</param>
      <returns>어셈블리에 대한 정규화된 경로입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.IReferenceResolver.ResolveComReference(System.Runtime.InteropServices.UCOMITypeLib)">
      <summary>COM 구성 요소가 포함된 지정 형식 라이브러리에 대한 참조를 확인합니다.</summary>
      <param name="typeLib">참조를 확인할 <see cref="T:System.Runtime.InteropServices.UCOMITypeLib" />입니다.</param>
      <returns>어셈블리에 대한 정규화된 경로입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.IReferenceResolver.ResolveManagedReference(System.String)">
      <summary>지정된 어셈블리에 대한 참조를 확인합니다.</summary>
      <param name="assemName">참조를 확인할 어셈블리의 이름입니다.</param>
      <returns>어셈블리에 대한 정규화된 경로입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.AxImporter.Options">
      <summary>
        <see cref="T:System.Windows.Forms.Design.AxImporter" />에 대한 옵션 집합을 나타냅니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.delaySign">
      <summary>생성된 어셈블리에 강력한 이름을 지정하고 서명을 나중에 할 것인지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.genSources">
      <summary>형식 라이브러리 래퍼의 소스를 생성할 것인지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.ignoreRegisteredOcx">
      <summary>등록된 버전에 의존하지 않고 명령줄 입력만 사용할지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.keyContainer">
      <summary>생성된 어셈블리에 대해 강력한 이름 키 컨테이너가 포함된 파일의 경로를 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.keyFile">
      <summary>생성된 어셈블리에 대해 강력한 이름 키가 포함된 파일의 경로를 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.keyPair">
      <summary>생성된 어셈블리에 대해 사용한 강력한 이름을 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.msBuildErrors">
      <summary>오류가 MSBuild(Microsoft Build Engine) 형식으로 출력되는지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.noLogo">
      <summary>컨트롤을 가져올 때 ActiveX 가져오기 도구 로고를 표시할지 여부를 나타냅니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.outputDirectory">
      <summary>생성된 어셈블리를 만들어 넣을 디렉터리의 경로를 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.outputName">
      <summary>ActiveX 컨트롤 래퍼를 생성할 파일 이름을 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.overwriteRCW">
      <summary>어셈블리를 생성할 때 기존 파일을 덮어쓰기할 것인지를 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.publicKey">
      <summary>생성된 어셈블리에 서명하는 데 사용하는 공개 키를 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.references">
      <summary>
        <see cref="T:System.Windows.Forms.Design.AxImporter.IReferenceResolver" />를 지정하여 어셈블리를 생성할 때 형식과 참조를 확인하는 데 사용합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.silentMode">
      <summary>컴파일 타임에 정보를 표시하지 않는 자동 설치 모드(설치 상태 표시 안 함)로 컴파일할 것인지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.AxImporter.Options.verboseMode">
      <summary>컴파일 타임에 많은 정보를 표시하는 세부 정보 표시 모드로 컴파일할 것인지 여부를 지정합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.AxImporter.Options.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.AxImporter.Options" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.Adorner">
      <summary>사용자 인터페이스와 관련된 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 개체의 컬렉션을 관리합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Adorner.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Adorner.Invalidate">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />의 표시기(Adorner) 창을 새로 고치도록 합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Adorner.Invalidate(System.Drawing.Rectangle)">
      <summary>지정된 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> 안에서 <see cref="T:System.Drawing.Rectangle" />의 표시기 창을 새로 고치게 합니다.</summary>
      <param name="rectangle">무효화할 영역입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Adorner.Invalidate(System.Drawing.Region)">
      <summary>지정된 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> 안에서 <see cref="T:System.Drawing.Region" />의 표시기 창을 새로 고치게 합니다.</summary>
      <param name="region">무효화할 <see cref="T:System.Drawing.Region" />입니다.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.Adorner.BehaviorService">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />와 연결된 <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />와 연결된 <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.Adorner.Enabled">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />가 활성화되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.Adorner.Glyphs">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.Behavior">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />에서 관리하는 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> 개체를 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.#ctor(System.Boolean,System.Windows.Forms.Design.Behavior.BehaviorService)">
      <summary>주어진 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />을 사용하여 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="callParentBehavior">부모 동작이 있는 경우에 그 동작을 호출해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="behaviorService">사용할 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callParentBehavior" />가 <see langword="true" />이고 <paramref name="behaviorService" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary>명령을 차단합니다.</summary>
      <param name="commandId">
        <see cref="T:System.ComponentModel.Design.CommandID" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> 기본적으로 <see cref="M:System.Windows.Forms.Design.Behavior.Behavior.FindCommand(System.ComponentModel.Design.CommandID)" /> 반환 <see langword="null" />합니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragDrop(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)">
      <summary>끌어서 놓기 동작을 사용자 지정할 수 있습니다.</summary>
      <param name="g">끌어서 놓기 동작을 호출할 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 개체입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragEnter(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)">
      <summary>범위 안으로 끌기 동작을 사용자 지정할 수 있습니다.</summary>
      <param name="g">범위 안으로 끌기 동작을 호출할 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragLeave(System.Windows.Forms.Design.Behavior.Glyph,System.EventArgs)">
      <summary>범위 밖으로 끌기 동작을 사용자 지정할 수 있습니다.</summary>
      <param name="g">범위 밖으로 끌기 동작을 호출할 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnDragOver(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)">
      <summary>범위 위로 끌기 동작을 사용자 지정할 수 있습니다.</summary>
      <param name="g">범위 위로 끌기 동작을 호출할 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnGiveFeedback(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>끌어서 놓기 피드백 동작을 사용자 지정할 수 있습니다.</summary>
      <param name="g">끌어서 놓기 동작을 호출할 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnLoseCapture(System.Windows.Forms.Design.Behavior.Glyph,System.EventArgs)">
      <summary>표시기 창에서 마우스 캡처가 손실될 때 호출됩니다.</summary>
      <param name="g">끌어서 놓기 동작을 호출할 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</param>
      <param name="e">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDoubleClick(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons,System.Drawing.Point)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />의 표시기 창에 두 번 클릭 메시지가 전달될 때 호출됩니다.</summary>
      <param name="g">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
      </param>
      <param name="button">클릭한 단추를 나타내는 <see cref="T:System.Windows.Forms.MouseButtons" /> 값입니다.</param>
      <param name="mouseLoc">마우스 클릭이 발생한 위치입니다.</param>
      <returns>메시지가 처리되었으면 <see langword="true" />이고, 처리되지 않았으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseDown(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons,System.Drawing.Point)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />의 표시기 창에 마우스 클릭 메시지가 전달될 때 호출됩니다.</summary>
      <param name="g">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
      </param>
      <param name="button">클릭한 단추를 나타내는 <see cref="T:System.Windows.Forms.MouseButtons" /> 값입니다.</param>
      <param name="mouseLoc">마우스 클릭이 발생한 위치입니다.</param>
      <returns>메시지가 처리되었으면 <see langword="true" />이고, 처리되지 않았으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseEnter(System.Windows.Forms.Design.Behavior.Glyph)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />의 표시기 창에 마우스 이동 메시지가 전달될 때 호출됩니다.</summary>
      <param name="g">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
      </param>
      <returns>메시지가 처리되었으면 <see langword="true" />이고, 처리되지 않았으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseHover(System.Windows.Forms.Design.Behavior.Glyph,System.Drawing.Point)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />의 표시기 창에 위로 마우스 호버 메시지가 전달될 때 호출됩니다.</summary>
      <param name="g">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
      </param>
      <param name="mouseLoc">호버 마우스 이동이 발생한 위치입니다.</param>
      <returns>메시지가 처리되었으면 <see langword="true" />이고, 처리되지 않았으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseLeave(System.Windows.Forms.Design.Behavior.Glyph)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />의 표시기 창에 범위 밖으로 마우스 이동 메시지가 전달될 때 호출됩니다.</summary>
      <param name="g">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
      </param>
      <returns>메시지가 처리되었으면 <see langword="true" />이고, 처리되지 않았으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseMove(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons,System.Drawing.Point)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />의 표시기 창에 마우스 이동 메시지가 전달될 때 호출됩니다.</summary>
      <param name="g">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
      </param>
      <param name="button">클릭한 단추를 나타내는 <see cref="T:System.Windows.Forms.MouseButtons" /> 값입니다.</param>
      <param name="mouseLoc">마우스 이동이 발생한 위치입니다.</param>
      <returns>메시지가 처리되었으면 <see langword="true" />이고, 처리되지 않았으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnMouseUp(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.MouseButtons)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />의 표시기 창에 마우스 놓기 메시지가 전달될 때 호출됩니다.</summary>
      <param name="g">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
      </param>
      <param name="button">클릭한 단추를 나타내는 <see cref="T:System.Windows.Forms.MouseButtons" /> 값입니다.</param>
      <returns>메시지가 처리되었으면 <see langword="true" />이고, 처리되지 않았으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Behavior.OnQueryContinueDrag(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.QueryContinueDragEventArgs)">
      <summary>표시기 창에서 적절한 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 또는 적중 테스트가 수행된 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />에 이 끌어서 놓기 이벤트를 전달합니다.</summary>
      <param name="g">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />
      </param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" />입니다.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.Behavior.Cursor">
      <summary>이 동작에 대해 표시할 커서를 가져옵니다.</summary>
      <returns>이 동작에 대해 표시해야 할 커서를 나타내는 <see cref="T:System.Windows.Forms.Cursor" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.Behavior.DisableAllCommands">
      <summary>
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> 개체를 비활성화해야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />
        <see cref="T:System.ComponentModel.Design.MenuCommand" />디자이너가 받는 모든 개체가 활성 상태일 때 상태를 <c>Enabled = false</c> 로 설정 해야 하면이 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 고, 그렇지 않으면 <see langword="false" /> 입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs">
      <summary>
        <see cref="E:System.Windows.Forms.Design.Behavior.BehaviorService.BeginDrag" /> 및 <see cref="E:System.Windows.Forms.Design.Behavior.BehaviorService.EndDrag" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs.#ctor(System.Collections.ICollection)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dragComponents">현재 끌고 있는 <see cref="T:System.Collections.ICollection" /> 개체의 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs.DragComponents">
      <summary>현재 끌고 있는 <see cref="T:System.ComponentModel.IComponent" /> 개체의 목록을 가져옵니다.</summary>
      <returns>현재 끌고 있는 <see cref="T:System.Collections.ICollection" /> 개체의 <see cref="T:System.ComponentModel.IComponent" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.BehaviorDragDropEventHandler">
      <summary>
        <see cref="E:System.Windows.Forms.Design.Behavior.BehaviorService.BeginDrag" />의 <see cref="E:System.Windows.Forms.Design.Behavior.BehaviorService.EndDrag" /> 및 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> 이벤트를 처리하는 메서드를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.BehaviorService">
      <summary>디자이너의 사용자 인터페이스를 관리합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="E:System.Windows.Forms.Design.Behavior.BehaviorService.BeginDrag">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />에서 끌어서 놓기 작업을 시작할 때 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Forms.Design.Behavior.BehaviorService.EndDrag">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />에서 끌기 작업을 완료할 때 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Forms.Design.Behavior.BehaviorService.Synchronize">
      <summary>현재 선택 내용을 새로 고쳐야 할 경우에 발생합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.AdornerWindowPointToScreen(System.Drawing.Point)">
      <summary>표시기 창의 <see cref="T:System.Drawing.Point" />를 화면 좌표로 변환합니다.</summary>
      <param name="p">변환할 <see cref="T:System.Drawing.Point" /> 값입니다.</param>
      <returns>화면 좌표로 변환된 <see cref="T:System.Drawing.Point" /> 값입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.AdornerWindowToScreen">
      <summary>화면 좌표에서 표시기 창 위치를 가져옵니다.</summary>
      <returns>화면 좌표에서 표시기 창의 왼쪽 위 모퉁이부터 계산된 위치입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.ControlRectInAdornerWindow(System.Windows.Forms.Control)">
      <summary>
        <see cref="T:System.Drawing.Rectangle" />의 경계 <see cref="T:System.Windows.Forms.Control" />을 반환합니다.</summary>
      <param name="c">변환할 <see cref="T:System.Windows.Forms.Control" />입니다.</param>
      <returns>표시기 창 좌표로 변환된 <see cref="T:System.Drawing.Rectangle" />의 경계 <see cref="T:System.Windows.Forms.Control" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.ControlToAdornerWindow(System.Windows.Forms.Control)">
      <summary>표시기 창 좌표로 변환된 <see cref="T:System.Windows.Forms.Control" />의 위치를 반환합니다.</summary>
      <param name="c">변환할 <see cref="T:System.Windows.Forms.Control" />입니다.</param>
      <returns>표시기 창 좌표에 있는 <paramref name="c" /> 위치를 나타내는 <see cref="T:System.Drawing.Point" /> 값입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.Dispose">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.GetNextBehavior(System.Windows.Forms.Design.Behavior.Behavior)">
      <summary>동작 스택에서 지정된 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 바로 다음에 있는 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />를 반환합니다.</summary>
      <param name="behavior">반환될 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 바로 앞에 있는 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />입니다.</param>
      <returns>동작 스택에서 <paramref name="behavior" /> 바로 다음에 있는 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />이거나, 바로 다음 동작이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.Invalidate">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />의 표시기 창을 무효화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.Invalidate(System.Drawing.Rectangle)">
      <summary>표시기 창 내에서 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />의 지정된 영역을 무효화합니다.</summary>
      <param name="rect">무효화할 사각형 영역입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.Invalidate(System.Drawing.Region)">
      <summary>표시기 창 내에서 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />의 지정된 영역을 무효화합니다.</summary>
      <param name="r">무효화할 영역입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.MapAdornerWindowPoint(System.IntPtr,System.Drawing.Point)">
      <summary>핸들 좌표계 위치를 표시기 창 좌표로 변환합니다.</summary>
      <param name="handle">표시기 창의 핸들입니다.</param>
      <param name="pt">핸들 좌표계의 <see cref="T:System.Drawing.Point" />입니다.</param>
      <returns>표시기 창 좌표에 있는 <see cref="T:System.Drawing.Point" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.PopBehavior(System.Windows.Forms.Design.Behavior.Behavior)">
      <summary>스택의 맨 위에서 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />를 제거하고 반환합니다.</summary>
      <param name="behavior">스택에서 제거할 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" /> 스택이 비어 있는 경우</exception>
      <returns>스택에서 제거된 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.PushBehavior(System.Windows.Forms.Design.Behavior.Behavior)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />를 동작 스택에 푸시합니다.</summary>
      <param name="behavior">푸시할 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="behavior" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.PushCaptureBehavior(System.Windows.Forms.Design.Behavior.Behavior)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />를 동작 스택에 푸시하고 동작에 마우스 캡처를 할당합니다.</summary>
      <param name="behavior">푸시할 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="behavior" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.ScreenToAdornerWindow(System.Drawing.Point)">
      <summary>화면 좌표 위치를 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />의 표시기 창 좌표로 변환합니다.</summary>
      <param name="p">변환할 <see cref="T:System.Drawing.Point" /> 값입니다.</param>
      <returns>표시기 창 좌표로 변환된 <see cref="T:System.Drawing.Point" /> 값입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorService.SyncSelection">
      <summary>모든 선택 문자 모양을 동기화합니다.</summary>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.BehaviorService.Adorners">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />를 가져옵니다.</summary>
      <returns>표시기(adorner)의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.BehaviorService.AdornerWindowGraphics">
      <summary>표시기(Adorner) 창의 <see cref="T:System.Drawing.Graphics" />를 가져옵니다.</summary>
      <returns>표시기 창에 대한 <see cref="T:System.Drawing.Graphics" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.BehaviorService.CurrentBehavior">
      <summary>동작 스택의 맨 위에서 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />를 제거하지 않고 가져옵니다.</summary>
      <returns>동작 스택의 맨 위에 있는 <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> 개체를 강력한 형식의 컬렉션에 저장합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.#ctor(System.Windows.Forms.Design.Behavior.Adorner[])">
      <summary>지정된 배열을 사용하여 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 채울 <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.#ctor(System.Windows.Forms.Design.Behavior.BehaviorService)">
      <summary>주어진 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> 참조를 사용하여 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="behaviorService">
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" /> 참조입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.#ctor(System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection)">
      <summary>기존 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />에서 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 채우기 시작할 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.Add(System.Windows.Forms.Design.Behavior.Adorner)">
      <summary>지정된 값이 있는 <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />를 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />에 추가합니다.</summary>
      <param name="value">컬렉션의 끝에 추가할 <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />입니다.</param>
      <returns>새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.AddRange(System.Windows.Forms.Design.Behavior.Adorner[])">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />의 끝에 배열의 요소를 복사합니다.</summary>
      <param name="value">컬렉션의 끝에 복사할 <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.AddRange(System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection)">
      <summary>다른 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />의 내용을 컬렉션의 끝에 추가합니다.</summary>
      <param name="value">컬렉션의 끝에 추가할 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.Contains(System.Windows.Forms.Design.Behavior.Adorner)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />에 지정한 <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />가 포함되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">찾을 <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />입니다.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />이 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.CopyTo(System.Windows.Forms.Design.Behavior.Adorner[],System.Int32)">
      <summary>지정한 인덱스에서 1차원 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />에 <see cref="T:System.Array" /> 값을 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">복사를 시작할 <paramref name="array" />의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우

또는

<see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />의 요소 수가 <paramref name="index" />와 <paramref name="array" /> 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" />가 <paramref name="array" />의 하한값보다 작습니다.</exception>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.GetEnumerator">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> 인스턴스에서 반복할 수 있는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> 인스턴스에 대한 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.IndexOf(System.Windows.Forms.Design.Behavior.Adorner)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />에 있는 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />의 인덱스를 반환합니다.</summary>
      <param name="value">찾을 <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />입니다.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />에 <paramref name="value" />의 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" /> 인덱스가 있으면 반환 값은 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.Insert(System.Int32,System.Windows.Forms.Design.Behavior.Adorner)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />의 지정된 인덱스에 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />를 삽입합니다.</summary>
      <param name="index">
        <paramref name="value" />를 삽입할 0부터 시작하는 인덱스입니다.</param>
      <param name="value">삽입할 <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.Remove(System.Windows.Forms.Design.Behavior.Adorner)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />에서 특정한 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />를 제거합니다.</summary>
      <param name="value">
        <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />에서 제거할 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />가 컬렉션에 없습니다.</exception>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection.Item(System.Int32)">
      <summary>지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index">요소의 인덱스(0부터 시작)입니다.</param>
      <returns>
        <paramref name="index" />로 지정된 <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" /> 요소입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />에 대한 반복을 지원합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator.#ctor(System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="mappings">열거자를 만들 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />의 다음 요소로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />가 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />가 반환됩니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator.Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator.Current">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />의 현재 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollection" />의 현재 요소입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.BehaviorServiceAdornerCollectionEnumerator.System#Collections#IEnumerator#Current">
      <summary>이 멤버에 대한 설명을 보려면 <see cref="P:System.Collections.IEnumerator.Current" /> 속성을 참조하세요.</summary>
      <returns>컬렉션의 현재 <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.ComponentGlyph">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />를 해당 구성 요소에 연결합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.ComponentGlyph.#ctor(System.ComponentModel.IComponent)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.ComponentGlyph" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="relatedComponent">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />가 연결된 구성 요소입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.ComponentGlyph.#ctor(System.ComponentModel.IComponent,System.Windows.Forms.Design.Behavior.Behavior)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.ComponentGlyph" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="relatedComponent">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />가 연결된 구성 요소입니다.</param>
      <param name="behavior">
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />가 연결된 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.ComponentGlyph.GetHitTest(System.Drawing.Point)">
      <summary>지정한 지점에서 발생한 마우스 클릭을 <see cref="T:System.Windows.Forms.Design.Behavior.ComponentGlyph" />에서 처리해야 할지 여부를 나타냅니다.</summary>
      <param name="p">적중 테스트를 수행할 지점입니다.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Cursor" />가 <paramref name="p" />와 연결되어 있을 경우 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.ComponentGlyph.Paint(System.Windows.Forms.PaintEventArgs)">
      <summary>그리기 논리를 제공합니다.</summary>
      <param name="pe">
        <see cref="T:System.Windows.Forms.PaintEventArgs" />의 <see cref="P:System.Windows.Forms.Design.Behavior.BehaviorService.AdornerWindowGraphics" />가 포함된 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />입니다.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.ComponentGlyph.RelatedComponent">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />와 연결된 구성 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" />와 연결된 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.ControlBodyGlyph">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />를 해당 컨트롤에 연결합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.ControlBodyGlyph.#ctor(System.Drawing.Rectangle,System.Windows.Forms.Cursor,System.ComponentModel.IComponent,System.Windows.Forms.Design.Behavior.Behavior)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.ControlBodyGlyph" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="bounds">
        <see cref="T:System.Drawing.Rectangle" />의 범위를 나타내는 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</param>
      <param name="cursor">마우스 포인터가 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 위에 있을 때 표시할 커서를 나타내는 <see cref="T:System.Windows.Forms.Cursor" />입니다.</param>
      <param name="relatedComponent">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />가 연결된 구성 요소입니다.</param>
      <param name="behavior">
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />가 연결된 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.ControlBodyGlyph.#ctor(System.Drawing.Rectangle,System.Windows.Forms.Cursor,System.ComponentModel.IComponent,System.Windows.Forms.Design.ControlDesigner)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.ControlBodyGlyph" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="bounds">
        <see cref="T:System.Drawing.Rectangle" />의 범위를 나타내는 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</param>
      <param name="cursor">마우스 포인터가 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 위에 있을 때 표시할 커서를 나타내는 <see cref="T:System.Windows.Forms.Cursor" />입니다.</param>
      <param name="relatedComponent">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />가 연결된 구성 요소입니다.</param>
      <param name="designer">
        <see cref="T:System.Windows.Forms.Design.ControlDesigner" />가 연결된 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.ControlBodyGlyph.GetHitTest(System.Drawing.Point)">
      <summary>지정한 지점에서 발생한 마우스 클릭을 <see cref="T:System.Windows.Forms.Design.Behavior.ControlBodyGlyph" />에서 처리해야 할지 여부를 나타냅니다.</summary>
      <param name="p">적중 테스트를 수행할 지점입니다.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Cursor" />가 <paramref name="p" />와 연결되어 있을 경우 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.ControlBodyGlyph.Bounds">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />의 범위를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Drawing.Rectangle" />의 범위를 나타내는 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.Glyph">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Adorner" />에서 관리되는 단일 UI(사용자 인터페이스) 엔터티를 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Glyph.#ctor(System.Windows.Forms.Design.Behavior.Behavior)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="behavior">
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />와 연결된 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다. <see langword="null" />일 수 있습니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Glyph.GetHitTest(System.Drawing.Point)">
      <summary>적중 테스트 논리를 제공합니다.</summary>
      <param name="p">적중 테스트를 수행할 지점입니다.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Cursor" />가 <paramref name="p" />와 연결되어 있을 경우 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Glyph.Paint(System.Windows.Forms.PaintEventArgs)">
      <summary>그리기 논리를 제공합니다.</summary>
      <param name="pe">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.PaintEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.Glyph.SetBehavior(System.Windows.Forms.Design.Behavior.Behavior)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />에 연결된 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />를 변경합니다.</summary>
      <param name="behavior">
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />에 연결할 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.Glyph.Behavior">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />와 연결된 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.Behavior" />에 연결된<see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />이거나, 동작이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.Glyph.Bounds">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />의 범위를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Drawing.Rectangle" />의 범위를 나타내는 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.GlyphCollection">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 개체를 강력한 형식의 컬렉션에 저장합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.#ctor(System.Windows.Forms.Design.Behavior.Glyph[])">
      <summary>지정된 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" /> 배열을 사용하여 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 채울 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.#ctor(System.Windows.Forms.Design.Behavior.GlyphCollection)">
      <summary>다른 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />을 기준으로 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 채울 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.Add(System.Windows.Forms.Design.Behavior.Glyph)">
      <summary>지정된 값을 가지는 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />를 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />에 추가합니다.</summary>
      <param name="value">컬렉션의 끝에 추가할 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</param>
      <returns>새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.AddRange(System.Windows.Forms.Design.Behavior.Glyph[])">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />의 끝에 배열의 요소를 복사합니다.</summary>
      <param name="value">컬렉션의 끝에 복사할 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.AddRange(System.Windows.Forms.Design.Behavior.GlyphCollection)">
      <summary>다른 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />의 내용을 컬렉션의 끝에 추가합니다.</summary>
      <param name="value">컬렉션의 끝에 추가할 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.Contains(System.Windows.Forms.Design.Behavior.Glyph)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />에 지정한 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />가 포함되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">찾을 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />이 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.CopyTo(System.Windows.Forms.Design.Behavior.Glyph[],System.Int32)">
      <summary>지정한 인덱스에서 1차원 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />에 <see cref="T:System.Array" /> 값을 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">복사를 시작할 <paramref name="array" />의 인덱스입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.IndexOf(System.Windows.Forms.Design.Behavior.Glyph)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />에 있는 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />의 인덱스를 반환합니다.</summary>
      <param name="value">찾을 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />에 <paramref name="value" />의 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" /> 인덱스가 있으면 반환 값은 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.Insert(System.Int32,System.Windows.Forms.Design.Behavior.Glyph)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />의 지정된 인덱스에 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />를 삽입합니다.</summary>
      <param name="index">
        <paramref name="value" />를 삽입할 0부터 시작하는 인덱스입니다.</param>
      <param name="value">삽입할 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.GlyphCollection.Remove(System.Windows.Forms.Design.Behavior.Glyph)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />에서 특정한 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />를 제거합니다.</summary>
      <param name="value">
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />에서 제거할 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" />입니다.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.GlyphCollection.Item(System.Int32)">
      <summary>지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index">요소의 인덱스(0부터 시작)입니다.</param>
      <returns>지정된 인덱스에 있는 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 요소입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.GlyphSelectionType">
      <summary>디자이너의 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 선택 상태를 설명합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.GlyphSelectionType.NotSelected">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />이 선택되지 않았습니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.GlyphSelectionType.Selected">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />이 선택되었습니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.GlyphSelectionType.SelectedPrimary">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />가 기본 선택 항목입니다.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.SnapLine">
      <summary>디자인 타임에 컨테이너에서 컨트롤의 레이아웃을 쉽게 조정할 수 있도록 UI(사용자 인터페이스)에 동적으로 만들어지는 가로 및 세로 선 세그먼트를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.SnapLine.#ctor(System.Windows.Forms.Design.Behavior.SnapLineType,System.Int32)">
      <summary>지정한 맞춤선 형식과 오프셋을 사용하여 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">만들 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLineType" />입니다. 맞춤선의 상대 위치와 방향을 나타냅니다.</param>
      <param name="offset">소유하고 있는 컨트롤의 왼쪽 위 원점을 기준으로 계산된 맞춤선의 위치(픽셀)입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.SnapLine.#ctor(System.Windows.Forms.Design.Behavior.SnapLineType,System.Int32,System.String)">
      <summary>지정한 맞춤선 형식, 오프셋 및 필터 이름을 사용하여 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">만들 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLineType" />입니다. 맞춤선의 상대 위치와 방향을 나타냅니다.</param>
      <param name="offset">소유하고 있는 컨트롤의 왼쪽 위 원점을 기준으로 계산된 맞춤선의 위치(픽셀)입니다.</param>
      <param name="filter">프로그래머가 정의한 맞춤선 범주를 지정하는 데 사용되는 <see cref="T:System.String" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.SnapLine.#ctor(System.Windows.Forms.Design.Behavior.SnapLineType,System.Int32,System.String,System.Windows.Forms.Design.Behavior.SnapLinePriority)">
      <summary>지정된 맞춤선 형식, 오프셋, 필터 이름 및 우선 순위를 사용하여 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">만들 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLineType" />입니다. 맞춤선의 상대 위치와 방향을 나타냅니다.</param>
      <param name="offset">소유하고 있는 컨트롤의 왼쪽 위 원점을 기준으로 계산된 맞춤선의 위치(픽셀)입니다.</param>
      <param name="filter">프로그래머가 정의한 맞춤선 범주를 지정하는 데 사용되는 <see cref="T:System.String" />입니다.</param>
      <param name="priority">맞춤선의 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLinePriority" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.SnapLine.#ctor(System.Windows.Forms.Design.Behavior.SnapLineType,System.Int32,System.Windows.Forms.Design.Behavior.SnapLinePriority)">
      <summary>지정된 맞춤선 형식, 오프셋 및 우선 순위를 사용하여 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">만들 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLineType" />입니다. 맞춤선의 상대 위치와 방향을 나타냅니다.</param>
      <param name="offset">소유하고 있는 컨트롤의 왼쪽 위 원점을 기준으로 계산된 맞춤선의 위치(픽셀)입니다.</param>
      <param name="priority">맞춤선의 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLinePriority" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.SnapLine.AdjustOffset(System.Int32)">
      <summary>맞춤선의 <see cref="P:System.Windows.Forms.Design.Behavior.SnapLine.Offset" /> 속성을 조정합니다.</summary>
      <param name="adjustment">맞춤선 오프셋을 변경할 픽셀 수입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.SnapLine.ShouldSnap(System.Windows.Forms.Design.Behavior.SnapLine,System.Windows.Forms.Design.Behavior.SnapLine)">
      <summary>지정한 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" />을 다른 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" />에 맞출지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="line1">지정된 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" />입니다.</param>
      <param name="line2">지정한 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" />을 맞출 대상 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" />입니다.</param>
      <returns>
        <paramref name="line1" />을 <paramref name="line2" />에 맞추려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.Behavior.SnapLine.ToString">
      <summary>현재 맞춤선의 문자열 표현을 반환합니다.</summary>
      <returns>현재 <see cref="T:System.String" />를 나타내는 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.SnapLine.Filter">
      <summary>이 맞춤선과 관련하여 프로그래머가 정의한 필터 범주를 가져옵니다.</summary>
      <returns>필터 범주를 정의하는 <see cref="T:System.String" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.SnapLine.IsHorizontal">
      <summary>가로 방향 맞춤선인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>가로 방향 맞춤선이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.SnapLine.IsVertical">
      <summary>세로 방향 맞춤선인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>세로 방향 맞춤선이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.SnapLine.Offset">
      <summary>연결된 컨트롤의 원점부터 계산된 맞춤선의 오프셋(픽셀)을 가져옵니다.</summary>
      <returns>맞춤선의 오프셋(픽셀)입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.SnapLine.Priority">
      <summary>맞춤선의 상대적인 중요도를 나타내는 값을 가져옵니다.</summary>
      <returns>맞춤선의 우선 순위 범주를 나타내는 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLinePriority" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.Behavior.SnapLine.SnapLineType">
      <summary>일반적인 위치와 방향을 나타내는 맞춤선의 형식을 가져옵니다.</summary>
      <returns>컨트롤 가장자리를 기준으로 맞춤선의 방향과 일반적인 위치를 나타내는 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLineType" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.SnapLinePriority">
      <summary>맞춤선의 상대적인 중요도를 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLinePriority.Always">
      <summary>현재의 모든 맞춤선 중 가장 높은 우선 순위에 해당하는 우선 순위 범주입니다. 이 범주에 속하는 맞춤선은 항상 활성화됩니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLinePriority.High">
      <summary>가장 높은 우선 순위의 범주입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLinePriority.Low">
      <summary>가장 낮은 우선 순위 범주입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLinePriority.Medium">
      <summary>중간 우선 순위 범주입니다.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.Behavior.SnapLineType">
      <summary>맞춤선의 방향과 상대 위치를 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLineType.Baseline">
      <summary>일반적으로 컨트롤의 기본 내부 기능과 관련된 가로 맞춤선입니다. 예를 들면 <see cref="T:System.Windows.Forms.Label" /> 컨트롤에 있는 텍스트 문자열의 기준선입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLineType.Bottom">
      <summary>일반적으로 컨트롤의 아래쪽 가장자리에 맞춰진 가로 맞춤선입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLineType.Horizontal">
      <summary>일반적으로 컨트롤의 가장자리와 관련되지 않은 가로 맞춤선입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLineType.Left">
      <summary>일반적으로 컨트롤의 왼쪽 가장자리에 맞춰진 세로 맞춤선입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLineType.Right">
      <summary>일반적으로 컨트롤의 오른쪽 가장자리에 맞춰진 세로 맞춤선입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLineType.Top">
      <summary>일반적으로 컨트롤의 위쪽 가장자리에 맞춰진 가로 맞춤선입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.Behavior.SnapLineType.Vertical">
      <summary>일반적으로 컨트롤의 가장자리와 관련되지 않은 세로 맞춤선입니다.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.BorderSidesEditor">
      <summary>
        <see cref="P:System.Windows.Forms.ToolStripStatusLabel.BorderSides" /> 속성을 설정할 수 있는 편집기를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.BorderSidesEditor.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.BorderSidesEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.BorderSidesEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="M:System.Windows.Forms.Design.BorderSidesEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" />에서 제공하는 편집기 스타일을 사용하여 지정된 개체 값을 편집합니다.</summary>
      <param name="context">컨트롤 또는 구성 요소에 대한 정보를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="provider">다른 개체에 대한 사용자 지정을 지원하는 <see cref="T:System.IServiceProvider" />입니다.</param>
      <param name="value">편집할 개체 값입니다.</param>
      <returns>편집된 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.BorderSidesEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see langword="EditValue" /> 메서드의 편집 스타일을 검색합니다.</summary>
      <param name="context">컨트롤 또는 구성 요소에 대한 정보를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>
        <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> 값 중 하나입니다. 이 메서드가 지원되지 않는 경우에는 <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None" />이 반환됩니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.ComponentActionsType">
      <summary>구성 요소와 연결할 수 있는 디자이너 작업 항목입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ComponentActionsType.All">
      <summary>구성 요소 및 서비스 유형 디자이너 작업을 나타냅니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ComponentActionsType.Component">
      <summary>풀 모델 디자이너 작업을 나타냅니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ComponentActionsType.Service">
      <summary>푸시 모델 디자이너 작업을 나타냅니다.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.ComponentDocumentDesigner">
      <summary>중첩된 구성 요소를 지원하는 루트 디자인 문서의 디자인 모드 동작을 확장하기 위한 기본 디자이너 클래스입니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.ComponentDocumentDesigner" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.ComponentDocumentDesigner" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.GetToolSupported(System.Drawing.Design.ToolboxItem)">
      <summary>현재 디자이너에서 지정된 도구를 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="tool">도구 상자 지원 여부를 테스트할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <returns>도구 상자에서 이 도구를 사용하려면 <see langword="true" />이고 문서 디자이너가 도구 사용 방법을 인식하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>디자이너를 지정된 구성 요소로 초기화합니다.</summary>
      <param name="component">디자이너에 연결할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>구성 요소가 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출하는 속성 집합을 조정합니다.</summary>
      <param name="properties">구성 요소의 클래스에 대한 속성이 포함된 <see cref="T:System.Collections.IDictionary" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.System#ComponentModel#Design#IRootDesigner#GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>이 멤버에 대한 설명은 <see cref="T:System.ComponentModel.Design.ViewTechnology" />를 참조하세요.</summary>
      <param name="technology">특정 뷰 기술을 나타내는 <see cref="T:System.ComponentModel.Design.ViewTechnology" />입니다.</param>
      <returns>해당 디자이너에 대한 뷰를 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.System#ComponentModel#Design#ITypeDescriptorFilterService#FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)" />를 참조하세요.</summary>
      <param name="component">특성을 필터링할 구성 요소입니다.</param>
      <param name="attributes">수정할 수 있는 특성의 사전입니다.</param>
      <returns>필터링된 특성 집합이 캐시되도록 하려면 <see langword="true" />이고, 필터 서비스가 다시 쿼리하도록 하려면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.System#ComponentModel#Design#ITypeDescriptorFilterService#FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)" />를 참조하세요.</summary>
      <param name="component">이벤트를 필터링할 구성 요소입니다.</param>
      <param name="events">수정할 수 있는 이벤트의 사전입니다.</param>
      <returns>필터링된 이벤트 집합이 캐시되도록 하려면 <see langword="true" />이고, 필터 서비스가 다시 쿼리하도록 하려면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.System#ComponentModel#Design#ITypeDescriptorFilterService#FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)" />를 참조하세요.</summary>
      <param name="component">속성을 필터링할 구성 요소입니다.</param>
      <param name="properties">수정할 수 있는 속성의 사전입니다.</param>
      <returns>필터링된 속성 집합이 캐시되도록 하려면 <see langword="true" />이고, 필터 서비스가 다시 쿼리하도록 하려면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.System#Drawing#Design#IToolboxUser#GetToolSupported(System.Drawing.Design.ToolboxItem)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" />를 참조하세요.</summary>
      <param name="tool">도구 상자 지원 여부를 테스트할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <returns>도구 상자에서 해당 도구를 지원하며 도구를 활성화할 수 있으면 <see langword="true" />이고 문서 디자이너에서 도구 사용 방법을 알지 못하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentDocumentDesigner.System#Drawing#Design#IToolboxUser#ToolPicked(System.Drawing.Design.ToolboxItem)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Drawing.Design.IToolboxUser.ToolPicked(System.Drawing.Design.ToolboxItem)" />를 참조하세요.</summary>
      <param name="tool">선택할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentDocumentDesigner.Control">
      <summary>디자이너에 대한 컨트롤을 가져옵니다.</summary>
      <returns>디자이너가 편집하고 있는 <see cref="T:System.Windows.Forms.Control" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentDocumentDesigner.System#ComponentModel#Design#IRootDesigner#SupportedTechnologies">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies" />를 참조하세요.</summary>
      <returns>지원되는 <see cref="T:System.ComponentModel.Design.ViewTechnology" /> 값의 배열입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentDocumentDesigner.TrayAutoArrange">
      <summary>디자이너의 구성 요소 트레이가 자동 정렬 모드인지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>디자이너의 구성 요소 트레이가 자동 정렬 모드이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentDocumentDesigner.TrayLargeIcon">
      <summary>디자이너의 구성 요소 트레이가 큰 아이콘 모드인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>디자이너의 구성 요소 트레이가 큰 아이콘 모드이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.ComponentTray">
      <summary>디자이너의 구성 요소 트레이에 대한 동작을 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.#ctor(System.ComponentModel.Design.IDesigner,System.IServiceProvider)">
      <summary>지정된 디자이너와 서비스 공급자를 사용하여 <see cref="T:System.Windows.Forms.Design.ComponentTray" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="mainDesigner">현재 프로젝트의 주요 또는 문서 디자이너인 <see cref="T:System.ComponentModel.Design.IDesigner" />입니다.</param>
      <param name="serviceProvider">디자인 타임 서비스를 얻는 데 사용할 수 있는 <see cref="T:System.IServiceProvider" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.AddComponent(System.ComponentModel.IComponent)">
      <summary>구성 요소를 트레이에 추가합니다.</summary>
      <param name="component">트레이에 추가할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.CanCreateComponentFromTool(System.Drawing.Design.ToolboxItem)">
      <summary>지정된 도구가 새 구성 요소를 만드는데 사용될 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="tool">테스트할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <returns>지정된 도구가 새 구성 요소를 만드는데 사용될 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.CanDisplayComponent(System.ComponentModel.IComponent)">
      <summary>지정된 구성 요소를 표시할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="component">테스트할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <returns>구성 요소를 표시할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.CreateComponentFromTool(System.Drawing.Design.ToolboxItem)">
      <summary>지정된 도구 상자 항목에서 구성 요소를 만들고, 이 구성 요소를 현재 문서에 추가한 다음, 구성 요소 트레이에 구성 요소를 표시합니다.</summary>
      <param name="tool">구성 요소를 만들 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.DisplayError(System.Exception)">
      <summary>지정된 예외에 대한 정보를 사용해 사용자에게 오류 메시지를 표시합니다.</summary>
      <param name="e">정보를 표시할 대상에 대한 예외입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.ComponentTray" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.GetLocation(System.ComponentModel.IComponent)">
      <summary>구성 요소 트레이의 왼쪽 위 모퉁이를 기준으로 상대적으로 결정된 지정 구성 요소의 위치를 가져옵니다.</summary>
      <param name="receiver">위치를 검색할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <returns>지정된 구성 요소의 좌표를 나타내는 <see cref="T:System.Drawing.Point" />이거나, 지정된 구성 요소가 구성 요소 트레이에 없는 경우 빈 <see cref="T:System.Drawing.Point" />입니다. 빈 <see cref="T:System.Drawing.Point" />에는 <see langword="true" />와 같은 <see cref="P:System.Drawing.Point.IsEmpty" /> 속성이 있고, 일반적으로 각각 0과 같은 <see cref="P:System.Drawing.Point.X" />와 <see cref="P:System.Drawing.Point.Y" /> 속성이 있습니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.GetNextComponent(System.ComponentModel.IComponent,System.Boolean)">
      <summary>
        <see cref="M:System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)" />과 마찬가지로 이 메서드는 지정된 시작 구성 요소의 다음 구성 요소를 반환합니다.</summary>
      <param name="component">열거를 시작할 구성 요소입니다.</param>
      <param name="forward">목록에서 앞으로 열거하면 <see langword="true" />이고, 뒤로 열거하면 <see langword="false" />입니다.</param>
      <returns>구성 요소 트레이에 있는 다음 구성 요소이거나, 목록의 끝(<paramref name="forward" />가 <see langword="null" />인 경우에는 목록 맨 앞)에 도달한 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.GetService(System.Type)">
      <summary>요청한 서비스 형식을 가져옵니다.</summary>
      <param name="serviceType">검색할 서비스 형식입니다.</param>
      <returns>요청한 서비스의 인스턴스이거나, 서비스를 찾을 수 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.GetTrayLocation(System.ComponentModel.IComponent)">
      <summary>
        <see langword="Location" /> 확장 속성의 값을 가져옵니다.</summary>
      <param name="receiver">위치 확장 속성을 받는 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <returns>
        <paramref name="receiver" />의 위치를 나타내는 <see cref="T:System.Drawing.Point" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.IsTrayComponent(System.ComponentModel.IComponent)">
      <summary>구성 요소가 구성 요소 트레이에 있는지 테스트합니다.</summary>
      <param name="comp">구성 요소 트레이에 있는지 테스트할 구성 요소입니다.</param>
      <returns>
        <paramref name="comp" />가 트레이에 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnDragDrop(System.Windows.Forms.DragEventArgs)">
      <summary>개체를 구성 요소 트레이에 끌어 놓으면 호출됩니다.</summary>
      <param name="de">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnDragEnter(System.Windows.Forms.DragEventArgs)">
      <summary>구성 요소 트레이에 개체를 끌어 와 트레이 영역에 들어오면 호출됩니다.</summary>
      <param name="de">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnDragLeave(System.EventArgs)">
      <summary>개체를 구성 요소 트레이 영역 밖으로 끌어 놓으면 호출됩니다.</summary>
      <param name="e">이벤트에 대한 데이터를 제공하는 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>개체를 구성 요소 트레이 영역으로 끌어 오면 호출됩니다.</summary>
      <param name="de">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>구성 요소 트레이가 특정 지점의 개체 끌어서 놓기 작업 결과에 대한 피드백을 사용자에게 제공하기 위해 OLE 끌어서 놓기 작업 과정에서 호출됩니다.</summary>
      <param name="gfevent">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnLayout(System.Windows.Forms.LayoutEventArgs)">
      <summary>
        <see cref="E:System.Windows.Forms.Control.Layout" /> 이벤트를 발생시킵니다.</summary>
      <param name="levent">이벤트 데이터를 포함하는 <see cref="T:System.Windows.Forms.LayoutEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnLostCapture">
      <summary>마우스 끌기 선택 작업을 취소하면 호출됩니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
      <summary>구성 요소 트레이를 마우스로 두 번 클릭하면 호출됩니다.</summary>
      <param name="e">이벤트에 대한 데이터를 제공하는 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>마우스 단추를 누르면 호출됩니다.</summary>
      <param name="e">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.MouseEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>마우스 커서 위치가 바뀌면 호출됩니다.</summary>
      <param name="e">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.MouseEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>마우스 단추를 놓으면 호출됩니다.</summary>
      <param name="e">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.MouseEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>구성 요소 트레이의 뷰가 새로 고쳐지면 호출됩니다.</summary>
      <param name="pe">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.PaintEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.OnSetCursor">
      <summary>마우스 커서를 설정하기 위해 호출됩니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.RemoveComponent(System.ComponentModel.IComponent)">
      <summary>지정된 구성 요소를 트레이에서 제거합니다.</summary>
      <param name="component">트레이에서 제거할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.SetLocation(System.ComponentModel.IComponent,System.Drawing.Point)">
      <summary>지정된 구성 요소의 위치를 지정된 위치로 설정합니다.</summary>
      <param name="receiver">위치를 설정할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <param name="location">지정된 구성 요소의 새 위치를 나타내는 <see cref="T:System.Drawing.Point" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.SetTrayLocation(System.ComponentModel.IComponent,System.Drawing.Point)">
      <summary>
        <see langword="Location" /> 확장 속성의 값을 설정합니다.</summary>
      <param name="receiver">위치 확장 속성을 받는 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <param name="location">
        <paramref name="receiver" />의 위치를 나타내는 <see cref="T:System.Drawing.Point" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.System#ComponentModel#IExtenderProvider#CanExtend(System.Object)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)" />를 참조하세요.</summary>
      <param name="extendee">Extender 속성을 받을 개체입니다.</param>
      <returns>이 개체가 지정된 개체에 Extender 속성을 제공할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ComponentTray.WndProc(System.Windows.Forms.Message@)">
      <summary>Windows 메시지를 처리합니다.</summary>
      <param name="m">처리할 <see cref="T:System.Windows.Forms.Message" />입니다.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentTray.AutoArrange">
      <summary>트레이 항목이 자동 정렬되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>트레이 항목이 자동 정렬되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentTray.ComponentCount">
      <summary>트레이에 포함된 구성 요소의 수를 가져옵니다.</summary>
      <returns>트레이에 포함된 구성 요소의 수입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ComponentTray.ShowLargeIcons">
      <summary>트레이에 각 구성 요소를 나타내는 큰 아이콘이 표시되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>큰 아이콘이 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.ControlDesigner">
      <summary>
        <see cref="T:System.Windows.Forms.Control" />의 디자인 모드 동작을 확장합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ControlDesigner.accessibilityObj">
      <summary>디자이너에 대한 내게 필요한 옵션 지원 개체를 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ControlDesigner.InvalidPoint">
      <summary>잘못된 <see cref="T:System.Drawing.Point" />의 값을 나타내는 로컬 <see cref="T:System.Drawing.Point" />를 정의합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.ControlDesigner" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.BaseWndProc(System.Windows.Forms.Message@)">
      <summary>Windows 메시지를 처리합니다.</summary>
      <param name="m">처리할 <see cref="T:System.Windows.Forms.Message" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.CanBeParentedTo(System.ComponentModel.Design.IDesigner)">
      <summary>이 디자이너의 컨트롤이 지정된 디자이너의 컨트롤을 부모로 사용할 수 있는지 여부를 지정합니다.</summary>
      <param name="parentDesigner">확인할 컨트롤을 관리하는 <see cref="T:System.ComponentModel.Design.IDesigner" />입니다.</param>
      <returns>지정한 디자이너가 관리하는 컨트롤이 이 디자이너가 관리하는 컨트롤의 부모일 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.DefWndProc(System.Windows.Forms.Message@)">
      <summary>Windows 메시지에 대한 기본 처리 방법을 제공합니다.</summary>
      <param name="m">처리할 <see cref="T:System.Windows.Forms.Message" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.DisplayError(System.Exception)">
      <summary>지정된 예외에 대한 정보를 사용자에게 표시합니다.</summary>
      <param name="e">표시할 <see cref="T:System.Exception" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.ControlDesigner" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.EnableDesignMode(System.Windows.Forms.Control,System.String)">
      <summary>자식 컨트롤의 디자인 타임 기능을 사용하도록 설정합니다.</summary>
      <param name="child">디자인 모드를 사용하도록 설정할 자식 컨트롤입니다.</param>
      <param name="name">최종 사용자에게 표시되는 <paramref name="child" />의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="child" /> 또는 <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <returns>자식 컨트롤을 디자인 타임에 사용할 수 있도록 설정하려면 <see langword="true" />이고, 호스팅 인프라에서 지원하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.EnableDragDrop(System.Boolean)">
      <summary>디자인되는 컨트롤에 대한 끌어서 놓기 지원을 활성화 또는 비활성화합니다.</summary>
      <param name="value">
        <see langword="true" />이면 끌어서 놓기 지원을 컨트롤에 사용하고 <see langword="false" />이면 컨트롤에 끌어서 놓기 지원을 사용하지 않습니다. 기본값은 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.GetControlGlyph(System.Windows.Forms.Design.Behavior.GlyphSelectionType)">
      <summary>이 컨트롤의 범위를 나타내는 <see cref="T:System.Windows.Forms.Design.Behavior.ControlBodyGlyph" />를 반환합니다.</summary>
      <param name="selectionType">선택 상태를 지정하는 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphSelectionType" /> 값입니다.</param>
      <returns>이 컨트롤의 범위를 나타내는 <see cref="T:System.Windows.Forms.Design.Behavior.ControlBodyGlyph" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.GetGlyphs(System.Windows.Forms.Design.Behavior.GlyphSelectionType)">
      <summary>표준 컨트롤의 선택 테두리와 잡기 핸들을 나타내는 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 개체의 컬렉션을 가져옵니다.</summary>
      <param name="selectionType">선택 상태를 지정하는 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphSelectionType" /> 값입니다.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.GetHitTest(System.Drawing.Point)">
      <summary>지정된 지점의 마우스 클릭이 컨트롤에 의해 처리되는지 여부를 지정합니다.</summary>
      <param name="point">화면 좌표에서 마우스를 클릭한 위치를 나타내는 <see cref="T:System.Drawing.Point" />입니다.</param>
      <returns>지정된 위치의 클릭을 컨트롤에서 처리해야 하면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.HookChildControls(System.Windows.Forms.Control)">
      <summary>지정한 컨트롤의 자식 컨트롤에서 메시지를 디자이너로 라우트합니다.</summary>
      <param name="firstChild">처리할 첫째 자식 <see cref="T:System.Windows.Forms.Control" />. 이 메서드는 컨트롤의 자식에 대해 자신을 재귀적으로 호출할 수 있습니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>디자이너를 지정된 구성 요소로 초기화합니다.</summary>
      <param name="component">디자이너에 연결할 <see cref="T:System.ComponentModel.IComponent" />. 이 구성 요소는 항상 <see cref="T:System.Windows.Forms.Control" />의 인스턴스이거나 이 컨트롤에서 파생되어야 합니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>기존 구성 요소를 다시 초기화합니다.</summary>
      <param name="defaultValues">속성에 적용할 기본값의 이름/값 사전입니다. 기본값이 지정되지 않은 경우 <see langword="null" /> 일 수 있습니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>새로 만들어진 구성 요소를 초기화합니다.</summary>
      <param name="defaultValues">속성에 적용할 기본값의 이름/값 사전입니다. 기본값이 지정되지 않은 경우 <see langword="null" /> 일 수 있습니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.InternalControlDesigner(System.Int32)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.ControlDesigner" />에서 지정된 인덱스에 있는 내부 컨트롤 디자이너를 반환합니다.</summary>
      <param name="internalControlIndex">선택할 내부 컨트롤 디자이너의 인덱스입니다. 인덱스는 0부터 시작합니다.</param>
      <returns>지정한 인덱스에 있는 <see cref="T:System.Windows.Forms.Design.ControlDesigner" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.NumberOfInternalControlDesigners">
      <summary>
        <see cref="T:System.Windows.Forms.Design.ControlDesigner" />에 포함된 내부 컨트롤 디자이너의 수를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.ControlDesigner" />에 포함된 내부 컨트롤 디자이너의 수입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnContextMenu(System.Int32,System.Int32)">
      <summary>상황에 맞는 메뉴를 표시하고 이 메뉴가 표시되려고 할 때 추가 작업을 처리할 수 있는 기회를 제공합니다.</summary>
      <param name="x">상황에 맞는 메뉴를 표시할 x 좌표입니다.</param>
      <param name="y">상황에 맞는 메뉴를 표시할 y 좌표입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnCreateHandle">
      <summary>컨트롤 핸들을 만든 직후 추가 작업을 처리할 기회를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnDragComplete(System.Windows.Forms.DragEventArgs)">
      <summary>끌어서 놓기 작업을 정리하기 위해 호출됩니다.</summary>
      <param name="de">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnDragDrop(System.Windows.Forms.DragEventArgs)">
      <summary>끌어서 놓기 개체를 컨트롤 디자이너 뷰에 놓으면 호출됩니다.</summary>
      <param name="de">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnDragEnter(System.Windows.Forms.DragEventArgs)">
      <summary>끌어서 놓기 작업이 컨트롤 디자이너 뷰에 진입하면 호출됩니다.</summary>
      <param name="de">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnDragLeave(System.EventArgs)">
      <summary>끌어서 놓기 작업이 컨트롤 디자이너 뷰를 벗어나면 호출됩니다.</summary>
      <param name="e">이벤트에 대한 데이터를 제공하는 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>끌어서 놓기 개체를 컨트롤 디자이너 뷰로 끌어 오면 호출됩니다.</summary>
      <param name="de">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>끌기 작업을 진행하는 동안 마우스 위치에 따라 시각적 정보를 제공하기 위해 끌어서 놓기 작업이 진행되는 동안 호출됩니다.</summary>
      <param name="e">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseDragBegin(System.Int32,System.Int32)">
      <summary>구성 요소를 마우스 왼쪽 단추로 누르고 있는 상태에 대한 응답으로 호출됩니다.</summary>
      <param name="x">화면 좌표에서 마우스의 x 위치입니다.</param>
      <param name="y">화면 좌표에서 마우스의 y 위치입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseDragEnd(System.Boolean)">
      <summary>끌어서 놓기 작업을 완료하거나 취소하기 위해 해당 작업의 마지막에 호출됩니다.</summary>
      <param name="cancel">
        <see langword="true" />이면 끌기를 취소하고 <see langword="false" />이면 끌기를 커밋합니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseDragMove(System.Int32,System.Int32)">
      <summary>끌어서 놓기 작업 중에 마우스를 움직일 때마다 호출됩니다.</summary>
      <param name="x">화면 좌표에서 마우스의 x 위치입니다.</param>
      <param name="y">화면 좌표에서 마우스의 y 위치입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseEnter">
      <summary>마우스가 컨트롤에 처음으로 진입하면 호출됩니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseHover">
      <summary>마우스로 컨트롤을 가리키면 호출됩니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnMouseLeave">
      <summary>마우스가 컨트롤에 처음으로 진입하면 호출됩니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnPaintAdornments(System.Windows.Forms.PaintEventArgs)">
      <summary>디자이너에서 관리하는 컨트롤의 위쪽에 추가 장식을 그릴 수 있도록 해당 컨트롤의 표면이 그려지면 호출됩니다.</summary>
      <param name="pe">디자이너가 컨트롤 위에 그리는데 사용하는 <see cref="T:System.Windows.Forms.PaintEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnSetComponentDefaults">
      <summary>디자이너가 초기화 될 때 호출됩니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.OnSetCursor">
      <summary>커서를 설정해야 할 때마다 호출됩니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>구성 요소가 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출하는 속성 집합을 조정합니다.</summary>
      <param name="properties">구성 요소의 클래스에 대한 속성이 포함된 <see cref="T:System.Collections.IDictionary" />.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.UnhookChildControls(System.Windows.Forms.Control)">
      <summary>지정한 컨트롤의 자식에 대한 메시지를 부모 디자이너 대신 각 컨트롤에 라우트합니다.</summary>
      <param name="firstChild">처리할 첫째 자식 <see cref="T:System.Windows.Forms.Control" />. 이 메서드는 컨트롤의 자식에 대해 자신을 재귀적으로 호출할 수 있습니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.WndProc(System.Windows.Forms.Message@)">
      <summary>Windows 메시지를 처리하고 필요에 따라 컨트롤로 라우트합니다.</summary>
      <param name="m">처리할 <see cref="T:System.Windows.Forms.Message" />입니다.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.AccessibilityObject">
      <summary>컨트롤에 할당된 <see cref="T:System.Windows.Forms.AccessibleObject" />를 가져옵니다.</summary>
      <returns>컨트롤에 할당된 <see cref="T:System.Windows.Forms.AccessibleObject" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.AssociatedComponents">
      <summary>디자이너가 관리하는 구성 요소와 관련된 구성 요소 컬렉션을 가져옵니다.</summary>
      <returns>디자이너가 관리하는 구성 요소와 관련된 구성 요소입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.AutoResizeHandles">
      <summary>
        <see cref="P:System.Windows.Forms.Control.AutoSize" /> 속성의 값을 기반으로 크기 조정 핸들이 할당되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="P:System.Windows.Forms.Control.AutoSize" /> 및 <see langword="true" /> 속성의 값을 기반으로 크기 조정 핸들이 할당되면 <see langword="AutoSizeMode" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.BehaviorService">
      <summary>디자인 환경에서 <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.BehaviorService" />이거나, 서비스를 사용할 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.Control">
      <summary>디자이너가 디자인하고 있는 컨트롤을 가져옵니다.</summary>
      <returns>디자이너가 디자인하고 있는 컨트롤입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.EnableDragRect">
      <summary>끌기 사각형을 이 디자이너 구성 요소에 그릴 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>끌기 사각형을 그리 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.InheritanceAttribute">
      <summary>디자이너의 <see cref="T:System.ComponentModel.InheritanceAttribute" />를 가져옵니다.</summary>
      <returns>디자이너가 루트 디자이너이면 <see cref="F:System.ComponentModel.InheritanceAttribute.Inherited" />이고, 그렇지 않으면 부모 디자이너의 <see cref="P:System.ComponentModel.Design.ComponentDesigner.InheritanceAttribute" /> 속성입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ParentComponent">
      <summary>
        <see cref="T:System.Windows.Forms.Design.ControlDesigner" />의 부모 구성 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.ControlDesigner" />의 부모 구성 요소이거나, 부모 구성 요소가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ParticipatesWithSnapLines">
      <summary>끌기 작업 동안 <see cref="T:System.Windows.Forms.Design.ControlDesigner" />에서 맞춤선 정렬을 허용하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>끌기 작업 동안 기본 끌기 컨트롤이 디자이너 위에 있을 때 해당 <see cref="T:System.Windows.Forms.Design.ControlDesigner" />에서 맞춤선 정렬을 허용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.SelectionRules">
      <summary>구성 요소의 이동 기능을 나타내는 선택 규칙을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.SelectionRules" /> 값의 비트 조합입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.SnapLines">
      <summary>이 컨트롤의 중요 맞춤 지점을 나타내는 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> 개체의 목록을 가져옵니다.</summary>
      <returns>이 컨트롤의 중요한 맞춤 지점을 나타내는 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> 개체의 목록입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject">
      <summary>
        <see cref="T:System.Windows.Forms.Design.ControlDesigner" />에 대한 <see cref="T:System.Windows.Forms.AccessibleObject" />를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.#ctor(System.Windows.Forms.Design.ControlDesigner,System.Windows.Forms.Control)">
      <summary>지정된 디자이너와 컨트롤을 사용하여 <see cref="T:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="designer">액세스 가능 개체에 대한 <see cref="T:System.Windows.Forms.Design.ControlDesigner" /> 개체입니다.</param>
      <param name="control">액세스 가능 개체에 대한 <see cref="T:System.Windows.Forms.Control" /> 개체입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.GetChild(System.Int32)">
      <summary>지정된 인덱스에 해당하는 액세스 가능한 자식을 검색합니다.</summary>
      <param name="index">액세스 가능한 자식의 인덱스(0부터 시작)입니다.</param>
      <returns>지정한 인덱스에 해당하는 내게 필요한 옵션 지원 자식을 나타내는 <see cref="T:System.Windows.Forms.AccessibleObject" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.GetChildCount">
      <summary>액세스 가능한 개체에 속하는 자식 수를 검색합니다.</summary>
      <returns>액세스 가능한 개체에 속하는 자식 수입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.GetFocused">
      <summary>키보드 포커스를 갖는 개체를 검색합니다.</summary>
      <returns>현재 포커스를 받은 자식을 지정하는 <see cref="T:System.Windows.Forms.AccessibleObject" />입니다. 이 메서드는 호출 개체 자신이 포커스를 받는 경우 자신을 반환합니다. 포커스를 갖는 개체가 없으면 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.GetSelected">
      <summary>현재 선택된 자식을 검색합니다.</summary>
      <returns>현재 선택된 자식을 나타내는 <see cref="T:System.Windows.Forms.AccessibleObject" />입니다. 이 메서드는 호출 개체 자신이 선택된 경우 자신을 반환합니다. 현재 선택된 자식이 없고 개체 자신에 포커스가 없으면 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.HitTest(System.Int32,System.Int32)">
      <summary>지정된 화면 좌표에 있는 자식 개체를 검색합니다.</summary>
      <param name="x">가로 화면 좌표입니다.</param>
      <param name="y">세로 화면 좌표입니다.</param>
      <returns>지정된 화면 좌표에 있는 자식 개체를 나타내는 <see cref="T:System.Windows.Forms.AccessibleObject" />입니다. 이 메서드는 호출하는 개체 자신이 지정된 위치에 있는 경우에 호출하는 개체를 반환합니다. 테스트한 위치에 개체가 없는 경우 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.Bounds">
      <summary>디자이너에 대한 액세스 가능 개체의 경계를 정의하는 포인트를 가져옵니다.</summary>
      <returns>디자이너에 대한 액세스 가능 개체의 경계를 나타내는 <see cref="T:System.Drawing.Rectangle" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.DefaultAction">
      <summary>지정된 개체의 기본 동작을 설명하는 문자열을 가져옵니다.</summary>
      <returns>지정된 개체의 기본 동작에 대한 설명입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.Description">
      <summary>지정한 개체의 시각적 모양을 설명하는 문자열을 가져옵니다.</summary>
      <returns>사용자에게 표시되는 개체의 시각적 모양에 대한 설명이며 개체에 설명이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.Name">
      <summary>개체 이름을 가져오거나 설정합니다.</summary>
      <returns>개체 이름이며 속성이 설정되어 있지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.Parent">
      <summary>내게 필요한 옵션 지원 개체의 부모를 가져옵니다.</summary>
      <returns>액세스할 수 있는 개체의 부모를 나타내는 <see cref="T:System.Windows.Forms.AccessibleObject" /> 또는 부모 개체가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.Role">
      <summary>이 액세스 가능성 개체의 역할을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.AccessibleRole" /> 값 중 하나이며, 지정된 역할이 없으면 <see cref="F:System.Windows.Forms.AccessibleRole.None" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.State">
      <summary>이 액세스 가능 개체의 상태를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.AccessibleStates" /> 값 중 하나이며, 설정된 상태가 없으면 <see cref="F:System.Windows.Forms.AccessibleStates.None" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ControlDesigner.ControlDesignerAccessibleObject.Value">
      <summary>액세스 가능 개체의 값을 가져오거나 설정합니다.</summary>
      <returns>액세스 가능한 개체의 값이거나, 개체에 설정된 값이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.DesignerOptions">
      <summary>디자이너에 대한 옵션 값을 가져오고 설정하는 액세스를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DesignerOptions.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.DesignerOptions" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerOptions.EnableInSituEditing">
      <summary>
        <see cref="T:System.Windows.Forms.ToolStrip" /> 컨트롤에 내부 편집을 사용할지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.ToolStrip" /> 컨트롤에 내부 편집을 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerOptions.GridSize">
      <summary>모눈 단위의 크기를 나타내는 <see cref="T:System.Drawing.Size" />를 가져오거나 설정합니다.</summary>
      <returns>모눈 단위의 크기를 나타내는 <see cref="T:System.Drawing.Size" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerOptions.ObjectBoundSmartTagAutoShow">
      <summary>디자이너에서 구성 요소의 스마트 태그 패널을 생성할 때 자동으로 표시하는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>구성 요소의 스마트 태그 패널을 생성할 때 자동으로 열 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerOptions.ShowGrid">
      <summary>디자이너에 모눈을 사용할지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>모눈을 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerOptions.SnapToGrid">
      <summary>컨트롤을 모눈 좌표에 자동으로 배치할지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>자동 맞춤을 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerOptions.UseOptimizedCodeGeneration">
      <summary>구성 요소 캐시를 사용할지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>구성 요소 캐시를 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerOptions.UseSmartTags">
      <summary>디자이너에서 스마트 태그를 사용할지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>디자이너에서 스마트 태그를 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DesignerOptions.UseSnapLines">
      <summary>디자이너에서 맞춤선을 사용하거나 사용하지 않도록 설정하는 값을 가져오거나 설정합니다.</summary>
      <returns>디자이너에서 맞춤선을 사용하도록 설정하면<see langword="true" /> 이고, 사용하지 않도록 설정하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.DockEditor">
      <summary>
        <see cref="P:System.Windows.Forms.Control.Dock" /> 속성을 지정하기 위한 사용자 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DockEditor.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.DockEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DockEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>GetEditorStyle에서 제공된 편집기 스타일을 사용하여 지정된 개체 값을 편집합니다. 필요한 편집 서비스를 얻을 수 있도록 서비스 공급자가 제공됩니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="provider">편집 서비스를 가져오는 데 사용할 수 있는 서비스 공급자 개체입니다.</param>
      <param name="value">편집 중인 값의 인스턴스입니다.</param>
      <returns>개체의 새 값입니다. 개체의 값을 변경하지 않은 경우 여기서는 전달된 것과 동일한 개체를 반환해야 합니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.DockEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>EditValue 메서드의 편집 스타일을 검색합니다. 이 메서드가 지원되지 않는 경우에는 None이 반환됩니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>제공된 편집 스타일을 나타내는 열거형 값입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.DocumentDesigner">
      <summary>중첩된 컨트롤을 지원하고 스크롤 메시지를 받아야 하는 <see cref="T:System.Windows.Forms.Control" /> 의 디자인 모드 동작을 확장하고 루트 수준의 디자인 모드 보기를 제공하기 위한 기본 디자이너 클래스입니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.DocumentDesigner" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.DocumentDesigner" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.EnsureMenuEditorService(System.ComponentModel.IComponent)">
      <summary>메뉴 편집기 서비스가 있는지 검사하고 없으면 이 서비스를 만듭니다.</summary>
      <param name="c">확인할 <see cref="T:System.ComponentModel.IComponent" />에는 상황에 맞는 메뉴 서비스가 있습니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.GetGlyphs(System.Windows.Forms.Design.Behavior.GlyphSelectionType)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.Behavior.GlyphCollection" /> 개체를 나타내는 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" />을 가져옵니다.</summary>
      <param name="selectionType">선택 상태를 지정하는 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphSelectionType" /> 값입니다.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.GetToolSupported(System.Drawing.Design.ToolboxItem)">
      <summary>지정한 도구가 디자이너에서 지원되는지 여부를 나타냅니다.</summary>
      <param name="tool">도구 상자 지원 여부를 테스트할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <returns>도구 상자에서 이 도구를 사용하려면 <see langword="true" />이고 문서 디자이너가 도구 사용 방법을 인식하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>디자이너를 지정된 구성 요소로 초기화합니다.</summary>
      <param name="component">디자이너에 연결할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.OnContextMenu(System.Int32,System.Int32)">
      <summary>상황에 맞는 메뉴를 표시해야 할 때 호출됩니다.</summary>
      <param name="x">상황에 맞는 메뉴를 표시할 가로 화면 좌표입니다.</param>
      <param name="y">상황에 맞는 메뉴를 표시할 세로 화면 좌표입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.OnCreateHandle">
      <summary>디자이너 핸들이 만들어진 직후 호출됩니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>구성 요소가 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출하는 속성 집합을 조정합니다.</summary>
      <param name="properties">구성 요소의 클래스에 대한 속성이 포함된 <see cref="T:System.Collections.IDictionary" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.System#ComponentModel#Design#IRootDesigner#GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>이 멤버에 대한 설명은 <see cref="T:System.ComponentModel.Design.ViewTechnology" />를 참조하세요.</summary>
      <param name="technology">특정 뷰 기술을 나타내는 <see cref="T:System.ComponentModel.Design.ViewTechnology" />입니다.</param>
      <returns>해당 디자이너에 대한 뷰를 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.System#Drawing#Design#IToolboxUser#GetToolSupported(System.Drawing.Design.ToolboxItem)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" />를 참조하세요.</summary>
      <param name="tool">도구 상자 지원 여부를 테스트할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <returns>도구 상자에서 해당 도구를 지원하며 도구를 활성화할 수 있으면 <see langword="true" />이고 문서 디자이너에서 도구 사용 방법을 알지 못하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.System#Drawing#Design#IToolboxUser#ToolPicked(System.Drawing.Design.ToolboxItem)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Drawing.Design.IToolboxUser.ToolPicked(System.Drawing.Design.ToolboxItem)" />를 참조하세요.</summary>
      <param name="tool">선택할 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.ToolPicked(System.Drawing.Design.ToolboxItem)">
      <summary>지정된 도구를 선택합니다.</summary>
      <param name="tool">구성 요소를 만들 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.DocumentDesigner.WndProc(System.Windows.Forms.Message@)">
      <summary>Windows 메시지를 처리합니다.</summary>
      <param name="m">처리할 <see cref="T:System.Windows.Forms.Message" />입니다.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.DocumentDesigner.SelectionRules">
      <summary>디자이너에 대한 <see cref="T:System.Windows.Forms.Design.SelectionRules" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.SelectionRules" /> 값의 비트 조합입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.DocumentDesigner.System#ComponentModel#Design#IRootDesigner#SupportedTechnologies">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies" />를 참조하세요.</summary>
      <returns>지원되는 <see cref="T:System.ComponentModel.Design.ViewTechnology" /> 값의 배열입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.EventHandlerService">
      <summary>현재 문서의 이벤트 처리기를 관리하는 체계적인 방법을 제공합니다.</summary>
    </member>
    <member name="E:System.Windows.Forms.Design.EventHandlerService.EventHandlerChanged">
      <summary>OnEventHandlerChanged 이벤트를 발생시킵니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.EventHandlerService.#ctor(System.Windows.Forms.Control)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.EventHandlerService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="focusWnd">디자인되고 있는 <see cref="T:System.Windows.Forms.Control" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.EventHandlerService.GetHandler(System.Type)">
      <summary>지정된 형식의 현재 활성 이벤트 처리기를 가져옵니다.</summary>
      <param name="handlerType">가져올 처리기의 형식입니다.</param>
      <returns>처리기의 인스턴스이거나, 요청된 형식의 처리기가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.EventHandlerService.PopHandler(System.Object)">
      <summary>지정된 처리기를 스택에서 팝합니다.</summary>
      <param name="handler">스택에서 제거할 처리기입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.EventHandlerService.PushHandler(System.Object)">
      <summary>새 이벤트 처리기를 스택에 푸시합니다.</summary>
      <param name="handler">스택에 추가할 처리기입니다.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.EventHandlerService.FocusWindow">
      <summary>이벤트 처리기가 연결되는 컨트롤을 가져옵니다.</summary>
      <returns>생성자를 통해 연결된 <see cref="T:System.Windows.Forms.Control" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.FileNameEditor">
      <summary>파일 이름을 선택할 수 있는 사용자 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.FileNameEditor.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.FileNameEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.FileNameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="M:System.Windows.Forms.Design.FileNameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" /> 메서드가 제공한 편집기 스타일을 사용하여 지정된 개체를 편집합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="provider">편집 서비스를 가져오는 데 사용할 수 있는 서비스 공급자 개체입니다.</param>
      <param name="value">편집 중인 값의 인스턴스입니다.</param>
      <returns>개체의 새 값입니다. 개체의 값을 변경하지 않은 경우 여기서는 전달된 것과 동일한 개체를 반환해야 합니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.FileNameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.Windows.Forms.Design.FileNameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> 메서드에서 사용하는 편집 스타일을 가져옵니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>제공된 편집 스타일을 나타내는 <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.FileNameEditor.InitializeDialog(System.Windows.Forms.OpenFileDialog)">
      <summary>파일 열기 대화 상자를 만든 경우 이 대화 상자를 초기화합니다.</summary>
      <param name="openFileDialog">파일 이름을 선택하는데 사용하는 <see cref="T:System.Windows.Forms.OpenFileDialog" />입니다.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.FolderNameEditor">
      <summary>파일 시스템에서 폴더를 선택하기 위한 사용자 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.FolderNameEditor.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.FolderNameEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.FolderNameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="M:System.Windows.Forms.Design.FolderNameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" />에서 제공하는 편집기 스타일을 사용하여 지정된 개체를 편집합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="provider">서비스 개체 공급자입니다.</param>
      <param name="value">설정할 값입니다.</param>
      <returns>개체의 새 값이거나, 개체를 업데이트할 수 없는 경우 이전 값입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.FolderNameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.Windows.Forms.Design.FolderNameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> 메서드에서 사용하는 편집 스타일을 가져옵니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>제공되는 편집 스타일을 나타내는 <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> 열거형 값입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.FolderNameEditor.InitializeDialog(System.Windows.Forms.Design.FolderNameEditor.FolderBrowser)">
      <summary>폴더 브라우저 대화 상자를 초기화합니다.</summary>
      <param name="folderBrowser">폴더를 선택할 <see cref="T:System.Windows.Forms.Design.FolderNameEditor.FolderBrowser" />입니다.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.FolderNameEditor.FolderBrowser">
      <summary>폴더를 선택할 수 있는 대화 상자를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.FolderNameEditor.FolderBrowser.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.FolderNameEditor.FolderBrowser" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.FolderNameEditor.FolderBrowser.ShowDialog">
      <summary>폴더 브라우저 대화 상자를 표시합니다.</summary>
      <returns>폼의 <see cref="T:System.Windows.Forms.DialogResult" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.FolderNameEditor.FolderBrowser.ShowDialog(System.Windows.Forms.IWin32Window)">
      <summary>소유자가 지정된 폴더 브라우저 대화 상자를 표시합니다.</summary>
      <param name="owner">모달 대화 상자를 소유할 최상위 창입니다(예: System.Windows.Forms.Form).</param>
      <returns>폼의 <see cref="T:System.Windows.Forms.DialogResult" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.FolderNameEditor.FolderBrowser.Description">
      <summary>폴더 위에 표시할 설명을 가져오거나 설정합니다.</summary>
      <returns>폴더 위에 표시할 설명입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.FolderNameEditor.FolderBrowser.DirectoryPath">
      <summary>사용자가 선택한 개체의 디렉터리 경로를 가져옵니다.</summary>
      <returns>사용자가 선택한 개체의 디렉터리 경로입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.FolderNameEditor.FolderBrowser.StartLocation">
      <summary>루트 노드의 시작 위치를 가져오거나 설정합니다.</summary>
      <returns>처음에 찾아볼 폴더 브라우저의 위치를 나타내는 <see cref="T:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.FolderNameEditor.FolderBrowser.Style">
      <summary>폴더 브라우저에서 폴더를 찾아볼 때 사용할 스타일입니다. 이 스타일은 <see cref="T:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles" /> 열거형의 플래그 조합이어야 합니다.</summary>
      <returns>사용할 <see cref="T:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles" />의 동작을 나타내는 <see cref="T:System.Windows.Forms.Design.FolderNameEditor.FolderBrowser" /> 열거형 멤버입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder">
      <summary>폴더 브라우저에서 초기에 찾아볼 루트 폴더를 나타내는 데 사용되는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.Desktop">
      <summary>사용자의 바탕 화면입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.Favorites">
      <summary>사용자의 즐겨찾기 목록입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.MyComputer">
      <summary>내 컴퓨터 아이콘의 콘텐츠입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.MyDocuments">
      <summary>사용자의 내 문서 폴더입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.MyPictures">
      <summary>사용자의 그림 저장 위치입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.NetAndDialUpConnections">
      <summary>네트워크 및 전화 접속 연결입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.NetworkNeighborhood">
      <summary>네트워크 환경입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.Printers">
      <summary>설치 프린터가 있는 폴더입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.Recent">
      <summary>최근 열어본 파일의 바로 가기가 있는 폴더입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.SendTo">
      <summary>문서를 보낼 애플리케이션의 바로 가기가 있는 폴더입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.StartMenu">
      <summary>사용자의 시작 메뉴입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserFolder.Templates">
      <summary>사용자의 파일 템플릿입니다.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles">
      <summary>
        <see cref="T:System.Windows.Forms.Design.FolderNameEditor.FolderBrowser" />의 동작을 지정하는 데 사용되는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles.BrowseForComputer">
      <summary>폴더 브라우저에서 컴퓨터만 반환할 수 있습니다. 사용자가 컴퓨터가 아닌 항목을 선택하면 확인 단추가 회색으로 나타납니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles.BrowseForEverything">
      <summary>폴더 브라우저에서 반환할 수 있는 모든 개체를 반환할 수 있습니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles.BrowseForPrinter">
      <summary>폴더 브라우저에서 프린터만 반환할 수 있습니다. 사용자가 프린터가 아닌 항목을 선택하면 확인 단추가 회색으로 나타납니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles.RestrictToDomain">
      <summary>폴더 브라우저에서 대화 상자의 트리 뷰 컨트롤에 도메인 수준 아래의 네트워크 폴더를 포함하지 않고 도메인 외부의 네트워크 위치를 탐색할 수 없습니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles.RestrictToFilesystem">
      <summary>폴더 브라우저에서 로컬 파일 시스템의 디렉터리만 반환합니다. 사용자가 로컬 파일 시스템에 있지 않은 폴더를 선택하면 확인 단추가 회색으로 나타납니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles.RestrictToSubfolders">
      <summary>폴더 브라우저에서 루트 폴더나 루트 폴더의 하위 폴더에 있는 로컬 파일 시스템 개체만 반환합니다. 사용자가 로컬 파일 시스템에 있지 않은 루트 폴더의 하위 폴더를 선택하면 확인 단추가 회색으로 나타납니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.FolderNameEditor.FolderBrowserStyles.ShowTextBox">
      <summary>폴더 브라우저의 찾아보기 대화 상자에는 사용자가 항목 이름을 입력할 수 있는 <see cref="T:System.Windows.Forms.TextBox" /> 컨트롤이 있습니다.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.IContainsThemedScrollbarWindows">
      <summary>Visual Studio 디자이너에 표시될 때 창의 스크롤 막대에 테마를 지정하는 방법에 대한 정보를 가져오는 메서드를 정의합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.IContainsThemedScrollbarWindows.ThemedScrollbarWindows">
      <summary>창을 나타내는 <see cref="T:System.Windows.Forms.Design.ThemedScrollbarWindow" /> 개체의 열거형 및 Visual Studio 디자이너에 표시될 때 이 스크롤 막대에 테마를 지정하는 방법을 가져옵니다.</summary>
      <returns>창을 나타내는 개체의 열거형 및 Visual Studio 디자이너에 표시될 때 이 스크롤 막대에 테마를 지정하는 방법입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.ImageListCodeDomSerializer">
      <summary>문자열 사전을 serialize합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageListCodeDomSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.ImageListCodeDomSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageListCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>직렬화된 특정 CodeDOM(코드 문서 개체 모델) 개체를 다른 개체로 역직렬화합니다.</summary>
      <param name="manager">deserialization 프로세스를 수행하는 동안 사용할 serialization 관리자 인터페이스입니다.</param>
      <param name="codeObject">역직렬화할 대상인 직렬화된 CodeDOM 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> 또는 <paramref name="codeObject" />가 <see langword="null" />인 경우</exception>
      <returns>역직렬화된 CodeDOM 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageListCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>지정된 개체를 CodeDOM(코드 문서 개체 모델) 개체로 serialize합니다.</summary>
      <param name="manager">serialize하는 동안 사용할 serialization 관리자입니다.</param>
      <param name="value">serialize할 개체입니다.</param>
      <returns>serialize된 개체를 나타내는 CodeDOM 개체입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.ImageListImageEditor">
      <summary>비트맵(.bmp) 파일에 대한 기본 파일 검색을 수행할 수 있는 편집기를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageListImageEditor.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.ImageListImageEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageListImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="M:System.Drawing.Design.ImageEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" /> 메서드에서 제공한 편집 스타일을 사용하여 지정된 개체 값을 편집합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="provider">편집 서비스를 얻을 수 있는 <see cref="T:System.IServiceProvider" />입니다.</param>
      <param name="value">편집하고 있는 <see cref="T:System.Object" />입니다.</param>
      <returns>새 값을 나타내는 <see cref="T:System.Object" />입니다. 개체의 값이 변경되지 않은 경우 <see cref="M:System.Windows.Forms.Design.ImageListImageEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> 메서드는 전달된 개체를 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageListImageEditor.GetFileDialogDescription">
      <summary>이 편집기에서 제공되는 기본 파일 목록 필터에 대한 설명을 가져옵니다.</summary>
      <returns>기본 파일 목록 필터에 대한 설명입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageListImageEditor.GetImageExtenders">
      <summary>지원되는 이미지 형식의 배열을 가져옵니다.</summary>
      <returns>지원되는 이미지 형식을 나타내는 <see cref="T:System.Type" /> 배열입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageListImageEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 편집기에서 개체 값 표현을 칠할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>
        <see cref="M:System.Drawing.Design.ImageEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)" />이 구현되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ImageListImageEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
      <summary>지정된 <see cref="T:System.Drawing.Design.PaintValueEventArgs" />가 나타내는 값을 칠합니다.</summary>
      <param name="e">칠할 대상과 칠할 위치를 나타내는 <see cref="T:System.Drawing.Design.PaintValueEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.MaskDescriptor">
      <summary>마스킹된 텍스트 상자 UI 형식 편집기에 대한 옵션을 제공하기 위해 파생 클래스에서 사용할 수 있는 멤버 집합을 정의합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.MaskDescriptor.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.MaskDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.MaskDescriptor.Equals(System.Object)">
      <summary>지정한 <see cref="T:System.Windows.Forms.Design.MaskDescriptor" />가 현재 <see cref="T:System.Windows.Forms.Design.MaskDescriptor" />와 같은지 여부를 확인합니다.</summary>
      <param name="maskDescriptor">현재 <see cref="T:System.Windows.Forms.Design.MaskDescriptor" />과 비교할 <see cref="T:System.Windows.Forms.Design.MaskDescriptor" />입니다.</param>
      <returns>지정된 <see langword="true" />가 현재<see cref="T:System.Windows.Forms.Design.MaskDescriptor" />와 같으면 <see cref="T:System.Windows.Forms.Design.MaskDescriptor" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.MaskDescriptor.GetHashCode">
      <summary>특정 유형에 대한 해시 함수로 사용합니다.</summary>
      <returns>현재 <see cref="T:System.Object" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.MaskDescriptor.IsValidMaskDescriptor(System.Windows.Forms.Design.MaskDescriptor)">
      <summary>지정된 마스크 설명자가 유효하며 마스크 목록에 추가할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="maskDescriptor">유효성을 테스트할 마스크 설명자입니다.</param>
      <returns>
        <paramref name="maskDescriptor" />가 올바르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.MaskDescriptor.IsValidMaskDescriptor(System.Windows.Forms.Design.MaskDescriptor,System.String@)">
      <summary>지정된 마스크 설명자가 유효한지 여부를 나타내는 값을 반환하고 해당 설명자가 유효하지 않을 경우 오류 설명을 제공합니다.</summary>
      <param name="maskDescriptor">유효성을 테스트할 마스크 설명자입니다.</param>
      <param name="validationErrorDescription">유효성 검사 오류를 나타내는 문자열입니다. 유효성 검사 오류가 발생하지 않으면 <paramref name="validationErrorDescription" />은 <see cref="F:System.String.Empty" />입니다.</param>
      <returns>
        <paramref name="maskDescriptor" />가 올바르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.MaskDescriptor.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.MaskDescriptor.Culture">
      <summary>마스크가 작성된 로캘을 나타내는 <see cref="T:System.Globalization.CultureInfo" />를 가져옵니다.</summary>
      <returns>마스크가 작성된 로캘을 나타내는 <see cref="T:System.Globalization.CultureInfo" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.MaskDescriptor.Mask">
      <summary>정의되는 마스크를 가져옵니다.</summary>
      <returns>정의되는 마스크가 포함된 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.MaskDescriptor.Name">
      <summary>마스크의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />의 이름과 간단한 설명이 포함된 <see cref="P:System.Windows.Forms.Design.MaskDescriptor.Mask" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.MaskDescriptor.Sample">
      <summary>마스크에 대해 서식이 지정된 문자열의 샘플을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />를 사용하여 서식이 지정된 텍스트가 포함된 <see cref="P:System.Windows.Forms.Design.MaskDescriptor.Mask" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.MaskDescriptor.ValidatingType">
      <summary>마스크와 관련된 유효성 검사를 제공하는 형식을 가져옵니다.</summary>
      <returns>서식이 지정된 문자열의 유효성을 검사하는 기준으로 사용할 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.MenuCommands">
      <summary>각 필드가 호스트 환경이 제공하는 명령 함수에 해당하는 <see cref="T:System.ComponentModel.Design.CommandID" /> 필드의 집합을 정의합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.ComponentTrayMenu">
      <summary>구성 요소 트레이 메뉴에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.ContainerMenu">
      <summary>컨테이너 메뉴에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.DesignerProperties">
      <summary>디자이너에 대한 속성 페이지에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.EditLabel">
      <summary>레이블 편집 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyCancel">
      <summary>취소 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyDefaultAction">
      <summary>기본 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyEnd">
      <summary>End 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyHome">
      <summary>Home 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyInvokeSmartTag">
      <summary>스마트 태그 호출 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyMoveDown">
      <summary>아래쪽으로 이동 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyMoveLeft">
      <summary>왼쪽으로 이동 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyMoveRight">
      <summary>오른쪽으로 이동 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyMoveUp">
      <summary>위쪽으로 이동 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeDown">
      <summary>아래쪽으로 조금 이동 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeHeightDecrease">
      <summary>높이 조금 줄이기 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeHeightIncrease">
      <summary>높이 조금 늘리기 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeLeft">
      <summary>왼쪽으로 조금 이동 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeRight">
      <summary>오른쪽으로 조금 이동 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeUp">
      <summary>위쪽으로 조금 이동 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeWidthDecrease">
      <summary>너비 조금 줄이기 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyNudgeWidthIncrease">
      <summary>너비 조금 늘리기 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyReverseCancel">
      <summary>반전 취소 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySelectNext">
      <summary>다음 선택 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySelectPrevious">
      <summary>이전 선택 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyShiftEnd">
      <summary>Shift-End 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyShiftHome">
      <summary>Shift-Home 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySizeHeightDecrease">
      <summary>높이 줄이기 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySizeHeightIncrease">
      <summary>높이 늘리기 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySizeWidthDecrease">
      <summary>너비 줄이기 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeySizeWidthIncrease">
      <summary>너비 늘리기 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.KeyTabOrderSelect">
      <summary>탭 순서 선택 키 처리기에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.SelectionMenu">
      <summary>선택 메뉴에 액세스하는 데 사용하는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.SetStatusRectangle">
      <summary>상태 사각형을 설정하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.SetStatusText">
      <summary>상태 사각형 텍스트를 설정하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.MenuCommands.TraySelectionMenu">
      <summary>트레이 선택 메뉴에 액세스하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.MenuCommands.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.MenuCommands" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.ParentControlDesigner">
      <summary>중첩 컨트롤을 지원하는 <see cref="T:System.Windows.Forms.Control" /> 의 디자인 모드 동작을 확장합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.ParentControlDesigner" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.AddPaddingSnapLines(System.Collections.ArrayList@)">
      <summary>패딩 Snaplines를 추가합니다.</summary>
      <param name="snapLines">
        <see cref="T:System.Collections.ArrayList" /> 개체가 포함된 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CanAddComponent(System.ComponentModel.IComponent)">
      <summary>구성 요소가 부모 컨테이너에 추가되면 호출됩니다.</summary>
      <param name="component">오류를 테스트할 구성 요소입니다.</param>
      <returns>
        <paramref name="component" />를 추가할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CanParent(System.Windows.Forms.Control)">
      <summary>지정한 컨트롤이 이 디자이너가 관리하는 컨트롤의 자식이 될 수 있는지 여부를 나타냅니다.</summary>
      <param name="control">테스트할 <see cref="T:System.Windows.Forms.Control" />입니다.</param>
      <returns>지정한 컨트롤이 이 디자이너가 관리하는 컨트롤의 자식이 될 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CanParent(System.Windows.Forms.Design.ControlDesigner)">
      <summary>지정한 디자이너가 관리하는 컨트롤이 이 디자이너가 관리하는 컨트롤의 자식이 될 수 있는지 여부를 나타냅니다.</summary>
      <param name="controlDesigner">테스트할 컨트롤의 디자이너입니다.</param>
      <returns>지정한 디자이너가 관리하는 컨트롤이 이 디자이너가 관리하는 컨트롤의 자식일 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CreateTool(System.Drawing.Design.ToolboxItem)">
      <summary>지정한 도구에서 구성 요소나 컨트롤을 만들어 현재 디자인 문서에 추가합니다.</summary>
      <param name="tool">구성 요소를 만들 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CreateTool(System.Drawing.Design.ToolboxItem,System.Drawing.Point)">
      <summary>지정한 도구에서 구성 요소나 컨트롤을 만들어 현재 디자인 문서의 지정한 위치에 추가합니다.</summary>
      <param name="tool">구성 요소를 만들 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <param name="location">구성 요소를 중앙에 위치시킬 디자인 타임 보기 화면 좌표 상의 <see cref="T:System.Drawing.Point" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CreateTool(System.Drawing.Design.ToolboxItem,System.Drawing.Rectangle)">
      <summary>지정한 도구에서 구성 요소나 컨트롤을 만들어 현재 디자인 문서의 지정한 사각형 내에 추가합니다.</summary>
      <param name="tool">구성 요소를 만들 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <param name="bounds">도구에서 만든 구성 요소의 위치 및 크기를 나타내는 <see cref="T:System.Drawing.Rectangle" />. <see cref="P:System.Drawing.Rectangle.X" />의 <see cref="P:System.Drawing.Rectangle.Y" /> 및 <see cref="T:System.Drawing.Rectangle" /> 값은 디자인 타임 보기 화면 상에 나타나는 구성 요소의 왼쪽 위의 좌표를 나타냅니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.CreateToolCore(System.Drawing.Design.ToolboxItem,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>모든 <see cref="M:System.Windows.Forms.Design.ParentControlDesigner.CreateTool(System.Drawing.Design.ToolboxItem)" /> 메서드의 핵심 기능을 제공합니다.</summary>
      <param name="tool">구성 요소를 만들 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
      <param name="x">크기가 지정된 경우 디자인 타임 보기 좌표에서 도구 왼쪽 가장자리의 가로 위치이고, 크기가 지정되지 않은 경우 도구 가운데의 가로 위치입니다.</param>
      <param name="y">크기가 지정된 경우 디자인 타임 보기 좌표에서 도구 위쪽 가장자리의 세로 위치이고, 크기가 지정되지 않은 경우 도구 가운데의 세로 위치입니다.</param>
      <param name="width">도구의 너비입니다. 이 매개 변수는 <paramref name="hasSize" /> 매개 <see langword="false" />로 설정되어 있으면 무시됩니다.</param>
      <param name="height">도구의 높이입니다. 이 매개 변수는 <paramref name="hasSize" /> 매개 <see langword="false" />로 설정되어 있으면 무시됩니다.</param>
      <param name="hasLocation">구성 요소의 위치가 지정되어 있으면 <see langword="true" />이고 구성 요소가 현재 선택한 컨트롤의 중앙에 위치하게 되면 <see langword="false" />입니다.</param>
      <param name="hasSize">구성 요소의 크기가 지정되어 있으면 <see langword="true" />이고 구성 요소의 기본 높이와 너비가 사용되면 <see langword="false" />입니다.</param>
      <returns>도구에서 만든 구성 요소의 배열입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Windows.Forms.Design.ParentControlDesigner" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.GetControl(System.Object)">
      <summary>지정된 구성 요소의 디자이너에서 컨트롤을 가져옵니다.</summary>
      <param name="component">컨트롤을 검색할 구성 요소입니다.</param>
      <returns>지정한 구성 요소가 속한 <see cref="T:System.Windows.Forms.Control" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.GetControlGlyph(System.Windows.Forms.Design.Behavior.GlyphSelectionType)">
      <summary>컨트롤의 범위를 나타내는 본문 문자 모양을 가져옵니다.</summary>
      <param name="selectionType">선택 상태를 지정하는 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphSelectionType" /> 값입니다.</param>
      <returns>컨트롤의 범위를 나타내는 본문 문자 모양입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.GetGlyphs(System.Windows.Forms.Design.Behavior.GlyphSelectionType)">
      <summary>표준 컨트롤의 선택 테두리와 잡기 핸들을 나타내는 <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 개체의 컬렉션을 가져옵니다.</summary>
      <param name="selectionType">선택 상태를 지정하는 <see cref="T:System.Windows.Forms.Design.Behavior.GlyphSelectionType" /> 값입니다.</param>
      <returns>
        <see cref="T:System.Windows.Forms.Design.Behavior.Glyph" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.GetParentForComponent(System.ComponentModel.IComponent)">
      <summary>파생 클래스에서 구성 요소를 추가할 때 디자인하고 있는 컨트롤이나 다른 <see cref="T:System.ComponentModel.Container" />를 반환하는지 여부를 확인하는 데 사용됩니다.</summary>
      <param name="component">부모 <see cref="T:System.Windows.Forms.Control" />을 검색할 구성 요소입니다.</param>
      <returns>구성 요소의 부모 <see cref="T:System.Windows.Forms.Control" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.GetUpdatedRect(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
      <summary>지정한 사각형의 위치를 업데이트합니다. 모눈 정렬 모드를 사용하는 경우 모눈 정렬에 맞춰 조정합니다.</summary>
      <param name="originalRect">업데이트하고 있는 구성 요소의 초기 위치를 나타내는 <see cref="T:System.Drawing.Rectangle" />입니다.</param>
      <param name="dragRect">구성 요소의 새 위치를 나타내는 <see cref="T:System.Drawing.Rectangle" />입니다.</param>
      <param name="updateSize">변경 사항이 있는 경우 <see langword="true" />이면 사각형의 크기를 업데이트하고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>디자인 타임 보기 화면 좌표에서 구성 요소의 위치를 나타내는 사각형. 변경 사항이 없으면 이 메서드는 원래의 사각형을 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>디자이너를 지정된 구성 요소로 초기화합니다.</summary>
      <param name="component">디자이너에 연결할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>새로 만들어진 구성 요소를 초기화합니다.</summary>
      <param name="defaultValues">속성에 적용할 기본값의 이름/값 사전입니다. 기본값이 지정되지 않은 경우 <see langword="null" /> 일 수 있습니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.InvokeCreateTool(System.Windows.Forms.Design.ParentControlDesigner,System.Drawing.Design.ToolboxItem)">
      <summary>지정한 <see cref="T:System.Drawing.Design.ToolboxItem" />에서 도구를 만듭니다.</summary>
      <param name="toInvoke">도구가 사용될 <see cref="T:System.Windows.Forms.Design.ParentControlDesigner" />입니다.</param>
      <param name="tool">도구를 만들 <see cref="T:System.Drawing.Design.ToolboxItem" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnDragComplete(System.Windows.Forms.DragEventArgs)">
      <summary>끌어서 놓기 작업을 정리하기 위해 호출됩니다.</summary>
      <param name="de">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnDragDrop(System.Windows.Forms.DragEventArgs)">
      <summary>끌어서 놓기 개체를 컨트롤 디자이너 보기에 놓았을 때 호출됩니다.</summary>
      <param name="de">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnDragEnter(System.Windows.Forms.DragEventArgs)">
      <summary>끌어서 놓기 작업이 컨트롤 디자이너 보기로 진입할 때 호출됩니다.</summary>
      <param name="de">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnDragLeave(System.EventArgs)">
      <summary>끌어서 놓기 작업이 컨트롤 디자이너 보기를 벗어날 때 호출됩니다.</summary>
      <param name="e">이벤트에 대한 데이터를 제공하는 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>끌어서 놓기 개체를 컨트롤 디자이너 보기로 끌어 올 때 호출됩니다.</summary>
      <param name="de">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.DragEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnMouseDragBegin(System.Int32,System.Int32)">
      <summary>구성 요소를 마우스 왼쪽 단추로 누르고 있을 때의 응답으로 호출됩니다.</summary>
      <param name="x">화면 좌표에서 마우스의 x 좌표입니다.</param>
      <param name="y">화면 좌표에서 마우스의 y 좌표입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnMouseDragEnd(System.Boolean)">
      <summary>끌어서 놓기 작업의 마지막에 호출되어 그 작업을 완료하거나 취소합니다.</summary>
      <param name="cancel">
        <see langword="true" />이면 끌기 작업을 취소하고, <see langword="false" />이면 커밋합니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnMouseDragMove(System.Int32,System.Int32)">
      <summary>끌어서 놓기 작업 도중 마우스를 움직일 때마다 호출됩니다.</summary>
      <param name="x">화면 좌표에서 마우스의 x 좌표입니다.</param>
      <param name="y">화면 좌표에서 마우스의 y 좌표입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnPaintAdornments(System.Windows.Forms.PaintEventArgs)">
      <summary>디자이너가 관리하고 있는 컨트롤이 자신을 색칠할 때 호출되므로 디자이너는 컨트롤 위에 추가로 색칠할 수 있습니다.</summary>
      <param name="pe">이벤트에 대한 데이터를 제공하는 <see cref="T:System.Windows.Forms.PaintEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.OnSetCursor">
      <summary>현재 마우스 커서를 변경할 기회를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ParentControlDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>구성 요소가 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출하는 속성 집합을 조정합니다.</summary>
      <param name="properties">구성 요소의 클래스에 대한 속성이 포함된 <see cref="T:System.Collections.IDictionary" />입니다.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.AllowControlLasso">
      <summary>선택한 컨트롤의 부모가 다시 지정되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>디자이너 화면에서 올가미를 지정하여 선택한 컨트롤이 다시 이 디자이너 컨트롤의 부모가 되면 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.AllowGenericDragBox">
      <summary>디자이너 화면 위로 도구 상자 항목을 끌 때 일반 끌기 상자를 그려야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>디자이너 화면 위로 도구 상자 항목을 끌 때 일반 끌기 상자를 그려야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.AllowSetChildIndexOnDrop">
      <summary>컨트롤을 <see cref="T:System.Windows.Forms.Design.ParentControlDesigner" />에 놓을 때 컨트롤의 Z 순서를 유지해야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컨트롤을 <see cref="T:System.Windows.Forms.Design.ParentControlDesigner" />에 놓을 때 컨트롤의 Z 순서를 유지해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.DefaultControlLocation">
      <summary>이 디자이너에 추가된 컨트롤의 기본 위치를 가져옵니다.</summary>
      <returns>이 디자이너에 추가된 컨트롤의 기본 위치를 나타내는 <see cref="T:System.Drawing.Point" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.DrawGrid">
      <summary>이 디자이너에 대한 컨트롤에 모눈을 그려야 할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>이 디자이너에서 컨트롤에 모눈을 그려야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.EnableDragRect">
      <summary>끌기 사각형을 디자이너에서 그릴지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>끌기 사각형을 그리면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.GridSize">
      <summary>디자이너가 모눈 그리기 모드일 때 그려지는 모눈의 각 사각형의 크기를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Drawing.Size" />가 <see cref="P:System.Windows.Forms.Design.ParentControlDesigner.GridSize" />의 허용되는 범위를 벗어난 경우. 기본 최소값은 2이고 기본 최대값은 200입니다.</exception>
      <returns>폼이나 사용자 정의 컨트롤에 그려진 모눈의 각 사각형의 크기를 나타내는 <see cref="T:System.Drawing.Size" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.MouseDragTool">
      <summary>끌기 작업 중 디자이너에 유효한 도구가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>구성 요소를 만드는 경우 끌고 있는 도구이거나, 도구가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Forms.Design.ParentControlDesigner.SnapLines">
      <summary>이 컨트롤의 중요 맞춤 지점을 나타내는 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> 개체의 목록을 가져옵니다.</summary>
      <returns>이 컨트롤의 중요한 맞춤 지점을 나타내는 <see cref="T:System.Windows.Forms.Design.Behavior.SnapLine" /> 개체의 목록입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.ScrollableControlDesigner">
      <summary>스크롤 메시지를 받는 <see cref="T:System.Windows.Forms.Control" /> 의 디자인 모드 동작을 확장하기 위한 기본 디자이너 클래스입니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ScrollableControlDesigner.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.ScrollableControlDesigner" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ScrollableControlDesigner.GetHitTest(System.Drawing.Point)">
      <summary>지정된 지점의 마우스 클릭이 컨트롤에 의해 처리되는지 여부를 지정합니다.</summary>
      <param name="pt">화면 좌표에서 마우스를 클릭한 위치를 나타내는 <see cref="T:System.Drawing.Point" />입니다.</param>
      <returns>지정된 위치의 클릭을 컨트롤에서 처리해야 하면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ScrollableControlDesigner.WndProc(System.Windows.Forms.Message@)">
      <summary>디자인 타임에 Windows 메시지를 처리하고 WM_HSCROLL 및 WM_VSCROLL 메시지를 컨트롤에 전달합니다.</summary>
      <param name="m">처리할 <see cref="T:System.Windows.Forms.Message" />입니다.</param>
    </member>
    <member name="T:System.Windows.Forms.Design.SelectionRules">
      <summary>구성 요소에 대한 선택 규칙을 나타내는 데 사용하는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.AllSizeable">
      <summary>구성 요소가 모든 방향으로의 크기 조정을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.BottomSizeable">
      <summary>구성 요소가 아래로부터의 크기 조정을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.LeftSizeable">
      <summary>구성 요소가 왼쪽으로부터의 크기 조정을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.Locked">
      <summary>구성 요소가 해당 컨테이너에 고정됨을 나타냅니다. 이 열거형의 <see cref="F:System.Windows.Forms.Design.SelectionRules.Moveable" />, <see cref="F:System.Windows.Forms.Design.SelectionRules.AllSizeable" />, <see cref="F:System.Windows.Forms.Design.SelectionRules.BottomSizeable" />, <see cref="F:System.Windows.Forms.Design.SelectionRules.LeftSizeable" />, <see cref="F:System.Windows.Forms.Design.SelectionRules.RightSizeable" /> 및 <see cref="F:System.Windows.Forms.Design.SelectionRules.TopSizeable" /> 비트 플래그를 재정의합니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.Moveable">
      <summary>구성 요소가 화면에서 이동할 수 있는 위치 속성을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.None">
      <summary>특별한 선택 특성이 없음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.RightSizeable">
      <summary>구성 요소가 오른쪽으로부터의 크기 조정을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.TopSizeable">
      <summary>구성 요소가 위쪽으로부터의 크기 조정을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.SelectionRules.Visible">
      <summary>구성 요소에 시각적 사용자 인터페이스의 일부 폼이 있고 선택 서비스가 이 사용자 인터페이스 주위에 선택 테두리를 그리고 있음을 나타냅니다. 선택한 구성 요소에 이 규칙이 설정되어 있으면 구성 요소가 <see cref="T:System.ComponentModel.IComponent" />를 구현했고 해당 디자이너 인스턴스에 연결되어 있음을 가정할 수 있습니다.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.ShortcutKeysEditor">
      <summary>바로 가기 키를 선택하는 데 사용할 수 있는 편집기를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ShortcutKeysEditor.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.ShortcutKeysEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.ShortcutKeysEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
        <see cref="M:System.Windows.Forms.Design.ShortcutKeysEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" /> 메서드에서 제공된 편집기 스타일을 사용하여 지정된 개체 값을 편집합니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="provider">이 편집기에서 서비스를 가져오는 데 사용할 수 있는 <see cref="T:System.IServiceProvider" /> 입니다.</param>
      <param name="value">편집할 <see cref="T:System.Object" />입니다.</param>
      <returns>
        <see cref="T:System.Object" />의 새 값입니다.</returns>
    </member>
    <member name="M:System.Windows.Forms.Design.ShortcutKeysEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="Overload:System.Windows.Forms.Design.ShortcutKeysEditor.EditValue" /> 메서드에서 사용하는 편집기 스타일을 가져옵니다.</summary>
      <param name="context">추가 컨텍스트 정보를 얻는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>
        <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> 메서드에서 사용하는 편집기 스타일을 나타내는 <see cref="Overload:System.Windows.Forms.Design.ShortcutKeysEditor.EditValue" /> 값입니다.</returns>
    </member>
    <member name="T:System.Windows.Forms.Design.ThemedScrollbarMode">
      <summary>Visual Studio 디자이너에 표시될 때 창과 자식의 스크롤 막대에 테마를 지정할지 여부를 나타내는 값입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ThemedScrollbarMode.All">
      <summary>창과 모든 자식에는 테마가 적용된 스크롤 막대를 갖게 됩니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ThemedScrollbarMode.None">
      <summary>창과 모든 자식에는 테마가 적용되지 않습니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ThemedScrollbarMode.OnlyTopLevel">
      <summary>창은 테마가 적용된 스크롤 막대를 갖게 되지만 모든 자식은 테마가 적용되지 않습니다.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.ThemedScrollbarWindow">
      <summary>Visual Studio 디자이너에 표시될 때 창 스크롤 막대에 테마를 지정하는 방법을 나타내는 값과 창을 나타냅니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ThemedScrollbarWindow.Handle">
      <summary>창 핸들입니다.</summary>
    </member>
    <member name="F:System.Windows.Forms.Design.ThemedScrollbarWindow.Mode">
      <summary>Visual Studio 디자이너에 표시될 때 창 스크롤 막대에 테마를 지정하는 방법을 나타내는 값입니다.</summary>
    </member>
    <member name="T:System.Windows.Forms.Design.WindowsFormsDesignerOptionService">
      <summary>Windows Forms 디자이너의 get 및 set 옵션 값에 대한 액세스를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.WindowsFormsDesignerOptionService.#ctor">
      <summary>
        <see cref="T:System.Windows.Forms.Design.WindowsFormsDesignerOptionService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Forms.Design.WindowsFormsDesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />을 채웁니다.</summary>
      <param name="options">채울 컬렉션입니다.</param>
    </member>
    <member name="P:System.Windows.Forms.Design.WindowsFormsDesignerOptionService.CompatibilityOptions">
      <summary>
        <see cref="T:System.Windows.Forms.Design.DesignerOptions" />에서 노출하는 <see cref="T:System.Windows.Forms.Design.WindowsFormsDesignerOptionService" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.Design.DesignerOptions" />에서 노출하는 <see cref="T:System.Windows.Forms.Design.WindowsFormsDesignerOptionService" />입니다.</returns>
    </member>
  </members>
</doc>
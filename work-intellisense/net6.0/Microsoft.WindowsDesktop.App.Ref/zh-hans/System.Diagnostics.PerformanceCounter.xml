<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Diagnostics.PerformanceCounter</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.CounterCreationData">
      <summary>定义自定义计数器的计数器类型、名称和帮助字符串。</summary>
    </member>
    <member name="M:System.Diagnostics.CounterCreationData.#ctor">
      <summary>将 <see cref="T:System.Diagnostics.CounterCreationData" /> 类的新实例初始化为 <see langword="NumberOfItems32" /> 类型的计数器，其名称和帮助字符串为空。</summary>
    </member>
    <member name="M:System.Diagnostics.CounterCreationData.#ctor(System.String,System.String,System.Diagnostics.PerformanceCounterType)">
      <summary>使用指定的计数器名称和帮助字符串，将 <see cref="T:System.Diagnostics.CounterCreationData" /> 类的新实例初始化为指定类型的计数器。</summary>
      <param name="counterName">计数器的名称，该名称在其类别中必须是唯一的。</param>
      <param name="counterHelp">描述计数器行为的文本。</param>
      <param name="counterType">标识计数器行为的 <see cref="T:System.Diagnostics.PerformanceCounterType" />。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">为 <paramref name="counterType" /> 指定的值不是 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 枚举的成员。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterHelp" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Diagnostics.CounterCreationData.CounterHelp">
      <summary>获取或设置自定义计数器的说明。</summary>
      <exception cref="T:System.ArgumentNullException">指定的值为 <see langword="null" />。</exception>
      <returns>描述计数器行为的文本。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterCreationData.CounterName">
      <summary>获取或设置自定义计数器的名称。</summary>
      <exception cref="T:System.ArgumentNullException">指定的值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">指定值的长度不在 1 到 80 个字符之间，或者包含双引号、控制字符或者前导或尾随空格。</exception>
      <returns>计数器的名称，该名称在其类别内是唯一的。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterCreationData.CounterType">
      <summary>获取或设置自定义计数器的性能计数器类型。</summary>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定的类型不是 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 枚举的成员。</exception>
      <returns>定义性能计数器行为的 <see cref="T:System.Diagnostics.PerformanceCounterType" />。</returns>
    </member>
    <member name="T:System.Diagnostics.CounterCreationDataCollection">
      <summary>提供 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象的强类型集合。</summary>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.#ctor">
      <summary>在没有关联的 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例的情况下，初始化 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.#ctor(System.Diagnostics.CounterCreationData[])">
      <summary>使用指定的 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 实例数组来初始化 <see cref="T:System.Diagnostics.CounterCreationData" /> 类的新实例。</summary>
      <param name="value">
        <see cref="T:System.Diagnostics.CounterCreationData" /> 实例数组，将使用这些实例初始化该 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.#ctor(System.Diagnostics.CounterCreationDataCollection)">
      <summary>使用指定的 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 实例集合来初始化 <see cref="T:System.Diagnostics.CounterCreationData" /> 类的新实例。</summary>
      <param name="value">一个 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />，它包含用于初始化该 <see cref="T:System.Diagnostics.CounterCreationData" /> 的 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Add(System.Diagnostics.CounterCreationData)">
      <summary>向集合添加 <see cref="T:System.Diagnostics.CounterCreationData" /> 类的实例。</summary>
      <param name="value">要追加到现有集合中的 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</exception>
      <returns>新的 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.AddRange(System.Diagnostics.CounterCreationData[])">
      <summary>将指定的 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例数组添加到该集合中。</summary>
      <param name="value">要追加到现有集合的 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.AddRange(System.Diagnostics.CounterCreationDataCollection)">
      <summary>将指定的 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例集合添加到该集合中。</summary>
      <param name="value">要追加到现有集合的 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Contains(System.Diagnostics.CounterCreationData)">
      <summary>确定集合中是否存在某 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</param>
      <returns>如果集合中存在指定 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.CopyTo(System.Diagnostics.CounterCreationData[],System.Int32)">
      <summary>从数组中指定的索引位置开始，将 <see cref="T:System.Diagnostics.CounterCreationData" /> 的元素复制到数组。</summary>
      <param name="array">要添加到集合的 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例数组。</param>
      <param name="index">要添加新实例的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">此 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 中的元素数大于从 <paramref name="index" /> 到目标数组末尾之间的可用空间。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.IndexOf(System.Diagnostics.CounterCreationData)">
      <summary>返回该集合中 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象的索引。</summary>
      <param name="value">要在集合中定位的 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</param>
      <returns>如果找到指定的 <see cref="T:System.Diagnostics.CounterCreationData" />，则为其在集合中从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Insert(System.Int32,System.Diagnostics.CounterCreationData)">
      <summary>将 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象插入集合中的指定索引处。</summary>
      <param name="index">要插入 <see cref="T:System.Diagnostics.CounterCreationData" /> 的位置的从零开始的索引。</param>
      <param name="value">要插入到集合中的 <see cref="T:System.Diagnostics.CounterCreationData" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。  
  
- 或 - 
 <paramref name="index" /> 大于集合中的项数。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.OnValidate(System.Object)">
      <summary>检查指定的对象以确定它是否为有效的 <see cref="T:System.Diagnostics.CounterCreationData" /> 类型。</summary>
      <param name="value">将要验证的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Remove(System.Diagnostics.CounterCreationData)">
      <summary>从集合中移除 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.Diagnostics.CounterCreationData" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。  
  
- 或 - 
 集合中不存在 <paramref name="value" />。</exception>
    </member>
    <member name="P:System.Diagnostics.CounterCreationDataCollection.Item(System.Int32)">
      <summary>为 <see cref="T:System.Diagnostics.CounterCreationData" /> 集合编制索引。</summary>
      <param name="index">
        <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。  
  
- 或 - 
 <paramref name="index" /> 大于或等于集合中的项数。</exception>
      <returns>集合索引，用于访问该集合中的单个元素。</returns>
    </member>
    <member name="T:System.Diagnostics.CounterSample">
      <summary>定义存放性能计数器的原始数据的结构。</summary>
    </member>
    <member name="F:System.Diagnostics.CounterSample.Empty">
      <summary>定义 <see langword="NumberOfItems32" /> 类型的、未初始化并且为空的性能计数器样本。</summary>
    </member>
    <member name="M:System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType)">
      <summary>初始化 <see cref="T:System.Diagnostics.CounterSample" /> 结构的新实例，然后将 <see cref="P:System.Diagnostics.CounterSample.CounterTimeStamp" /> 属性设置为 0（零）。</summary>
      <param name="rawValue">与性能计数器样本关联的数值。</param>
      <param name="baseValue">可选的计数器基原始值，仅当该样本基于多个计数器时才使用。</param>
      <param name="counterFrequency">读取计数器的频率。</param>
      <param name="systemFrequency">系统读取计数器的频率。</param>
      <param name="timeStamp">原始时间戳。</param>
      <param name="timeStamp100nSec">原始的高保真时间戳。</param>
      <param name="counterType">
        <see cref="T:System.Diagnostics.PerformanceCounterType" /> 对象，它指示计数器的类型，此样本是该计数器的快照。</param>
    </member>
    <member name="M:System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType,System.Int64)">
      <summary>初始化 <see cref="T:System.Diagnostics.CounterSample" /> 结构的新实例，然后将 <see cref="P:System.Diagnostics.CounterSample.CounterTimeStamp" /> 属性设置为传入的值。</summary>
      <param name="rawValue">与性能计数器样本关联的数值。</param>
      <param name="baseValue">可选的计数器基原始值，仅当该样本基于多个计数器时才使用。</param>
      <param name="counterFrequency">读取计数器的频率。</param>
      <param name="systemFrequency">系统读取计数器的频率。</param>
      <param name="timeStamp">原始时间戳。</param>
      <param name="timeStamp100nSec">原始的高保真时间戳。</param>
      <param name="counterType">
        <see cref="T:System.Diagnostics.PerformanceCounterType" /> 对象，它指示计数器的类型，此样本是该计数器的快照。</param>
      <param name="counterTimeStamp">样本采集时间。</param>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample)">
      <summary>使用单个采样点计算计数器的性能数据。 此方法通常用于非计算所得的性能计数器类型。</summary>
      <param name="counterSample">
        <see cref="T:System.Diagnostics.CounterSample" /> 结构，用作性能数据计算的基点。</param>
      <returns>计算的性能值。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>使用两个采样点计算计数器的性能数据。 此方法通常用于计算所得的性能计数器类型，如平均值。</summary>
      <param name="counterSample">
        <see cref="T:System.Diagnostics.CounterSample" /> 结构，用作性能数据计算的基点。</param>
      <param name="nextCounterSample">
        <see cref="T:System.Diagnostics.CounterSample" /> 结构，用作性能数据计算的结束点。</param>
      <returns>计算的性能值。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Equals(System.Diagnostics.CounterSample)">
      <summary>指示指定的 <see cref="T:System.Diagnostics.CounterSample" /> 结构是否等于当前的 <see cref="T:System.Diagnostics.CounterSample" /> 结构。</summary>
      <param name="sample">要与此实例进行比较的 <see cref="T:System.Diagnostics.CounterSample" /> 结构。</param>
      <returns>如果 <paramref name="sample" /> 等于当前实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Equals(System.Object)">
      <summary>指示指定的结构是否为 <see cref="T:System.Diagnostics.CounterSample" /> 结构且与当前的 <see cref="T:System.Diagnostics.CounterSample" /> 结构相同。</summary>
      <param name="o">要与当前结构进行比较的 <see cref="T:System.Diagnostics.CounterSample" /> 结构。</param>
      <returns>如果 <paramref name="o" /> 是 <see cref="T:System.Diagnostics.CounterSample" /> 结构且与当前实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.GetHashCode">
      <summary>获取当前计数器示例的哈希代码。</summary>
      <returns>当前计数器示例的哈希代码。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.op_Equality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Diagnostics.CounterSample" /> 结构是否相等。</summary>
      <param name="a">
        <see cref="T:System.Diagnostics.CounterSample" /> 结构。</param>
      <param name="b">要与 <paramref name="a" /> 参数指定的结构进行比较的另一个 <see cref="T:System.Diagnostics.CounterSample" /> 结构。</param>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.op_Inequality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Diagnostics.CounterSample" /> 结构是否不等。</summary>
      <param name="a">
        <see cref="T:System.Diagnostics.CounterSample" /> 结构。</param>
      <param name="b">要与 <paramref name="a" /> 参数指定的结构进行比较的另一个 <see cref="T:System.Diagnostics.CounterSample" /> 结构。</param>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.BaseValue">
      <summary>获取可选的计数器基原始值。</summary>
      <returns>基原始值，仅在样本是基于多个计数器时才使用该值。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterFrequency">
      <summary>获取原始计数器频率。</summary>
      <returns>读取计数器的频率。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterTimeStamp">
      <summary>获取计数器的时间戳。</summary>
      <returns>样本采集时间。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterType">
      <summary>获取性能计数器类型。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterType" /> 对象，它指示计数器的类型，此样本是该计数器的快照。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.RawValue">
      <summary>获取计数器的原始值。</summary>
      <returns>与性能计数器样本关联的数值。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.SystemFrequency">
      <summary>获取原始系统频率。</summary>
      <returns>系统读取计数器的频率。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.TimeStamp">
      <summary>获取原始时间戳。</summary>
      <returns>系统时间戳。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.TimeStamp100nSec">
      <summary>获取原始的高保真时间戳。</summary>
      <returns>系统时间戳，精度在 0.1 毫秒内。</returns>
    </member>
    <member name="T:System.Diagnostics.CounterSampleCalculator">
      <summary>为解释性能计数器数据提供一组实用工具函数。</summary>
    </member>
    <member name="M:System.Diagnostics.CounterSampleCalculator.ComputeCounterValue(System.Diagnostics.CounterSample)">
      <summary>对单个原始计数器样本的计算所得值进行运算。</summary>
      <param name="newSample">
        <see cref="T:System.Diagnostics.CounterSample" />，它指示系统采集的最新样本。</param>
      <returns>性能计数器计算值的浮点表示形式。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSampleCalculator.ComputeCounterValue(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>对两个原始计数器样本计算所得值进行运算。</summary>
      <param name="oldSample">
        <see cref="T:System.Diagnostics.CounterSample" />，它指示系统以前采集的样本。</param>
      <param name="newSample">
        <see cref="T:System.Diagnostics.CounterSample" />，它指示系统采集的最新样本。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="oldSample" /> 使用的计数器类型不同于 <paramref name="newSample" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">
        <paramref name="newSample" /> 计数器类型有一个性能数据助手 (PDH) 错误。 有关更多信息，请参见本文档 Win32 和 COM 开发一节中的“检查 PDH 接口返回值”</exception>
      <returns>性能计数器计算值的浮点表示形式。</returns>
    </member>
    <member name="T:System.Diagnostics.ICollectData">
      <summary>为系统使用性能计数器时加载的性能 DLL 准备性能数据。</summary>
    </member>
    <member name="M:System.Diagnostics.ICollectData.CloseData">
      <summary>由性能 DLL 的封闭性能数据函数调用。</summary>
    </member>
    <member name="M:System.Diagnostics.ICollectData.CollectData(System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr@)">
      <summary>为性能 DLL 收集性能数据。</summary>
      <param name="id">调用索引。</param>
      <param name="valueName">指向具有请求的对象标识符的 Unicode 字符串列表的指针。</param>
      <param name="data">指向数据缓冲区的指针。</param>
      <param name="totalBytes">指向若干个字节的指针。</param>
      <param name="res">此方法返回时，包含指向数据后第一个字节的 <see cref="T:System.IntPtr" />，-1 表示错误，-2 表示需要更大的缓冲区。 此参数未经初始化即被传递。</param>
    </member>
    <member name="T:System.Diagnostics.InstanceData">
      <summary>保存与性能计数器样本关联的实例数据。</summary>
    </member>
    <member name="M:System.Diagnostics.InstanceData.#ctor(System.String,System.Diagnostics.CounterSample)">
      <summary>使用指定的样本和性能计数器实例来初始化 InstanceData 类的新实例。</summary>
      <param name="instanceName">与性能计数器关联的实例的名称。</param>
      <param name="sample">从 <paramref name="instanceName" /> 参数指定的实例中采集的 <see cref="T:System.Diagnostics.CounterSample" />。</param>
    </member>
    <member name="P:System.Diagnostics.InstanceData.InstanceName">
      <summary>获取与此实例数据关联的实例名称。</summary>
      <returns>与性能计数器关联的实例的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceData.RawValue">
      <summary>获取与性能计数器样本关联的原始数据值。</summary>
      <returns>由与 <see cref="P:System.Diagnostics.InstanceData.Sample" /> 属性关联的性能计数器样本读取的原始值。</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceData.Sample">
      <summary>获取生成此数据的性能计数器样本。</summary>
      <returns>从 <see cref="T:System.Diagnostics.CounterSample" /> 属性指定的实例采集的 <see cref="P:System.Diagnostics.InstanceData.InstanceName" />。</returns>
    </member>
    <member name="T:System.Diagnostics.InstanceDataCollection">
      <summary>提供 <see cref="T:System.Diagnostics.InstanceData" /> 对象的强类型集合。</summary>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollection.#ctor(System.String)">
      <summary>使用指定的性能计数器（定义性能实例）初始化 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 类的新实例。</summary>
      <param name="counterName">计数器的名称，通常描述计数的数量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterName" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollection.Contains(System.String)">
      <summary>确定集合中是否存在带有指定名称的性能实例（由一个索引 <see cref="T:System.Diagnostics.InstanceData" /> 对象来标识）。</summary>
      <param name="instanceName">要在该集合中查找的实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 <see langword="null" />。</exception>
      <returns>如果集合中存在该实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollection.CopyTo(System.Diagnostics.InstanceData[],System.Int32)">
      <summary>将集合中的项复制到指定一维数组中的指定索引处。</summary>
      <param name="instances">一维 <see cref="T:System.Array" />，它是从集合所复制值的目标位置。</param>
      <param name="index">添加新实例的从零开始的索引值。</param>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.CounterName">
      <summary>获取要获取其实例数据的性能计数器的名称。</summary>
      <returns>性能计数器名称。</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.Item(System.String)">
      <summary>获取与该计数器关联的实例数据。 这通常是一组原始计数器值。</summary>
      <param name="instanceName">性能计数器类别实例的名称，或者为空字符串 ("")（如果该类别包含单个实例）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 <see langword="null" />。</exception>
      <returns>一个 <see cref="T:System.Diagnostics.InstanceData" /> 项，将根据它对 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 对象进行索引。</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.Keys">
      <summary>获取对象和与该实例数据关联的对象的计数器注册表项。</summary>
      <returns>表示一组对象特定的注册表项的 <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.Values">
      <summary>获取组成计数器实例数据的原始计数器值。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它表示计数器的原始数据值。</returns>
    </member>
    <member name="T:System.Diagnostics.InstanceDataCollectionCollection">
      <summary>提供 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 对象的强类型集合。</summary>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollectionCollection.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.InstanceDataCollectionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollectionCollection.Contains(System.String)">
      <summary>确定集合中是否存在指定计数器的实例数据集合（由索引 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 对象之一来标识）。</summary>
      <param name="counterName">性能计数器的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterName" /> 参数为 <see langword="null" />。</exception>
      <returns>如果集合中存在包含指定计数器的实例数据集合，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollectionCollection.CopyTo(System.Diagnostics.InstanceDataCollection[],System.Int32)">
      <summary>将 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 实例数组复制到集合中的指定索引处。</summary>
      <param name="counters">要添加到集合中的 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 实例的数组（由它们包含的计数器来标识）。</param>
      <param name="index">要添加新实例的位置。</param>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollectionCollection.Item(System.String)">
      <summary>获取指定计数器的实例数据。</summary>
      <param name="counterName">性能计数器的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterName" /> 参数为 <see langword="null" />。</exception>
      <returns>一个 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 项，将根据它对 <see cref="T:System.Diagnostics.InstanceDataCollectionCollection" /> 对象进行索引。</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollectionCollection.Keys">
      <summary>获取对象和与该实例数据集合关联的对象的计数器注册表项。</summary>
      <returns>表示一组对象特定的注册表项的 <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollectionCollection.Values">
      <summary>获取组成计数器实例集合的实例数据值。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它表示计数器的实例和它们的关联数据值。</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounter">
      <summary>表示 Windows NT 性能计数器组件。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounter.DefaultFileMappingSize">
      <summary>指定由性能计数器共享的全局内存的大小（以字节为单位）。 默认大小为 524,288 个字节。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类的新的只读实例，但不将该实例与任何系统性能计数器或自定义性能计数器关联。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类的新的只读实例，并将其与本地计算机上指定的系统性能计数器或自定义性能计数器关联。 此构造函数要求该类别包含单个实例。</summary>
      <param name="categoryName">此性能计数器关联的性能计数器类别（性能对象）的名称。</param>
      <param name="counterName">性能计数器的名称。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" /> 为空字符串 ("")。  
  
- 或 - 
 <paramref name="counterName" /> 为空字符串 ("")。  
  
- 或 - 
指定的类别不存在。  
  
- 或 - 
指定的类别被标记为多实例，并且要求使用实例名称创建性能计数器。  
  
- 或 - 
 <paramref name="categoryName" /> 和 <paramref name="counterName" /> 已本地化为不同的语言。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 或 <paramref name="counterName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类的新的只读或读/写实例，并将其与本地计算机上指定的系统性能计数器或自定义性能计数器关联。 此构造函数要求该类别包含单个实例。</summary>
      <param name="categoryName">此性能计数器关联的性能计数器类别（性能对象）的名称。</param>
      <param name="counterName">性能计数器的名称。</param>
      <param name="readOnly">若要以只读模式访问计数器（但计数器本身可能是可读/写的），则为 <see langword="true" />；若要以读/写模式访问计数器，则为 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" /> 是空字符串 ("")。  
  
- 或 - 
<paramref name="counterName" /> 是空字符串 ("")。  
  
- 或 - 
指定的类别不存在。 （如果 <paramref name="readOnly" /> 为 <see langword="true" />）。  
  
- 或 - 
指定的类别不是 .NET Framework 自定义类别（如果 <paramref name="readOnly" /> 为 <see langword="false" />）。  
  
- 或 - 
指定的类别被标记为多实例，并且要求使用实例名称创建性能计数器。  
  
- 或 - 
 <paramref name="categoryName" /> 和 <paramref name="counterName" /> 已本地化为不同的语言。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 或 <paramref name="counterName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类的新的只读实例，并将其与本地计算机上指定的系统性能计数器或自定义性能计数器及类别实例关联。</summary>
      <param name="categoryName">此性能计数器关联的性能计数器类别（性能对象）的名称。</param>
      <param name="counterName">性能计数器的名称。</param>
      <param name="instanceName">性能计数器类别实例的名称，或者为空字符串 ("")（如果该类别包含单个实例）。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" /> 为空字符串 ("")。  
  
- 或 - 
 <paramref name="counterName" /> 为空字符串 ("")。  
  
- 或 - 
指定的类别无效。  
  
- 或 - 
指定的类别被标记为多实例，并且要求使用实例名称创建性能计数器。  
  
- 或 - 
 <paramref name="instanceName" /> 的长度超过 127 个字符。  
  
- 或 - 
 <paramref name="categoryName" /> 和 <paramref name="counterName" /> 已本地化为不同的语言。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 或 <paramref name="counterName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类的新的只读实例或读/写实例，并将其与本地计算机上指定的系统性能计数器或自定义性能计数器及类别实例关联。</summary>
      <param name="categoryName">此性能计数器关联的性能计数器类别（性能对象）的名称。</param>
      <param name="counterName">性能计数器的名称。</param>
      <param name="instanceName">性能计数器类别实例的名称，或者为空字符串 ("")（如果该类别包含单个实例）。</param>
      <param name="readOnly">若要以只读模式访问计数器，则为 <see langword="true" />；若要以读/写模式访问计数器，则为 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" /> 为空字符串 ("")。  
  
- 或 - 
 <paramref name="counterName" /> 为空字符串 ("")。  
  
- 或 - 
请求的读/写权限设置对此计数器无效。  
  
- 或 - 
指定的类别不存在（如果 <paramref name="readOnly" /> 为 <see langword="true" />）。  
  
- 或 - 
指定的类别不是 .NET Framework 自定义类别（如果 <paramref name="readOnly" /> 为 <see langword="false" />）。  
  
- 或 - 
指定的类别被标记为多实例，并且要求使用实例名称创建性能计数器。  
  
- 或 - 
 <paramref name="instanceName" /> 的长度超过 127 个字符。  
  
- 或 - 
 <paramref name="categoryName" /> 和 <paramref name="counterName" /> 已本地化为不同的语言。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 或 <paramref name="counterName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类的新的只读实例，并将其与指定计算机上指定的系统性能计数器或自定义性能计数器及类别实例关联。</summary>
      <param name="categoryName">此性能计数器关联的性能计数器类别（性能对象）的名称。</param>
      <param name="counterName">性能计数器的名称。</param>
      <param name="instanceName">性能计数器类别实例的名称，或者为空字符串 ("")（如果该类别包含单个实例）。</param>
      <param name="machineName">性能计数器及其关联的类别所在的计算机。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" /> 为空字符串 ("")。  
  
- 或 - 
 <paramref name="counterName" /> 为空字符串 ("")。  
  
- 或 - 
请求的读/写权限设置对此计数器无效。  
  
- 或 - 
指定的计算机上不存在该计数器。  
  
- 或 - 
指定的类别被标记为多实例，并且要求使用实例名称创建性能计数器。  
  
- 或 - 
 <paramref name="instanceName" /> 的长度超过 127 个字符。  
  
- 或 - 
 <paramref name="categoryName" /> 和 <paramref name="counterName" /> 已本地化为不同的语言。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 或 <paramref name="counterName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.BeginInit">
      <summary>开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例。 此初始化在运行时发生。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Close">
      <summary>关闭性能计数器并释放由此性能计数器实例分配的所有资源。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.CloseSharedResources">
      <summary>释放由计数器分配的性能计数器库共享状态。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Decrement">
      <summary>通过有效的原子操作使关联的性能计数器减一。</summary>
      <exception cref="T:System.InvalidOperationException">该计数器是只读的，因而应用程序无法使之减少。  
  
- 或 - 
此实例未与性能计数器正确关联。  
  
- 或 - 
使用全局共享内存时，<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <returns>减少后的计数器值。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.EndInit">
      <summary>结束在窗体上使用或由另一组件使用的 <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例的初始化。 此初始化在运行时发生。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Increment">
      <summary>通过有效的原子操作使关联的性能计数器增加一。</summary>
      <exception cref="T:System.InvalidOperationException">该计数器是只读的，因此应用程序无法递增它的值。  
  
- 或 - 
此实例未与性能计数器正确关联。  
  
- 或 - 
使用全局共享内存时，<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <returns>增加后的计数器值。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)">
      <summary>通过有效的原子操作，使关联的性能计数器的值增加或减少指定的量。</summary>
      <param name="value">要增加的值。 （负值使计数器减少。）</param>
      <exception cref="T:System.InvalidOperationException">该计数器是只读的，因此应用程序无法递增它的值。  
  
- 或 - 
此实例未与性能计数器正确关联。  
  
- 或 - 
使用全局共享内存时，<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <returns>新的计数器值。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.NextSample">
      <summary>获取计数器样本，并为其返回原始值（即未经过计算的值）。</summary>
      <exception cref="T:System.InvalidOperationException">此实例未与性能计数器正确关联。  
  
- 或 - 
使用全局共享内存时，<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>一个 <see cref="T:System.Diagnostics.CounterSample" />，它代表系统为此计数器获取的下一原始值。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.NextValue">
      <summary>获取计数器样本并为其返回计算所得值。</summary>
      <exception cref="T:System.InvalidOperationException">此实例未与性能计数器正确关联。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>系统为此计数器获取的下一计算所得值。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.RemoveInstance">
      <summary>删除由 <see cref="T:System.Diagnostics.PerformanceCounter" /> 对象的 <see cref="P:System.Diagnostics.PerformanceCounter.InstanceName" /> 属性指定的类别实例。</summary>
      <exception cref="T:System.InvalidOperationException">此计数器为只读，因而不能移除与该类别关联的任何实例。  
  
- 或 - 
此实例未与性能计数器正确关联。  
  
- 或 - 
使用全局共享内存时，<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CategoryName">
      <summary>获取或设置此性能计数器的性能计数器类别的名称。</summary>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.PerformanceCounter.CategoryName" /> 为 <see langword="null" />。</exception>
      <returns>此性能计数器关联的性能计数器类别（性能对象）的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterHelp">
      <summary>获取此性能计数器的说明。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例未与性能计数器关联。  
  
- 或 - 
使用全局共享内存时，<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>此性能计数器测量的项或数量的说明。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterName">
      <summary>获取或设置与此 <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例关联的性能计数器的名称。</summary>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.PerformanceCounter.CounterName" /> 为 <see langword="null" />。</exception>
      <returns>计数器的名称，它一般描述计数的数量。 此名称显示在性能计数器管理器 MMC 管理单元的“添加计数器”对话框的计数器列表中。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterType">
      <summary>获取关联的性能计数器的计数器类型。</summary>
      <exception cref="T:System.InvalidOperationException">此实例未与性能计数器正确关联。  
  
- 或 - 
使用全局共享内存时，<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterType" />，它既描述计数器如何与监视应用程序交互，又描述计数器包含的值的特性（例如计算所得和非计算所得）。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.InstanceLifetime">
      <summary>获取或设置进程的生存期。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">设置的值不是 <see cref="T:System.Diagnostics.PerformanceCounterInstanceLifetime" /> 枚举的成员。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 是在初始化 <see cref="T:System.Diagnostics.PerformanceCounter" /> 后设置的。</exception>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterInstanceLifetime" /> 值之一。 默认值为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Global" />。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.InstanceName">
      <summary>获取或设置此性能计数器的实例名称。</summary>
      <returns>性能计数器类别实例的名称，或者为空字符串 ("")（如果该计数器是单实例计数器）。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.MachineName">
      <summary>获取或设置此性能计数器的计算机名。</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.PerformanceCounter.MachineName" /> 格式无效。</exception>
      <returns>性能计数器及其关联的类别所在的服务器。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.RawValue">
      <summary>获取或设置此计数器的原始值（即未经过计算的值）。</summary>
      <exception cref="T:System.InvalidOperationException">您尝试设置计数器的原始值，但该计数器是只读的。  
  
- 或 - 
此实例未与性能计数器正确关联。  
  
- 或 - 
使用全局共享内存时，<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>计数器的原始值。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.ReadOnly">
      <summary>获取或设置一个值，该值指示此 <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例是否处于只读模式。</summary>
      <returns>如果 <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例为只读模式（即使计数器本身为自定义 .NET Framework 计数器），则为 <see langword="true" />；如果它为读/写模式，则为 <see langword="false" />。 默认值为构造函数设置的值。</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterCategory">
      <summary>表示性能对象，它定义性能计数器的类别。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 类的新实例，让 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性保持为空，并将 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性设置为本地计算机。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 类的新实例，将 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性设置为指定的值，并将 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性设置为本地计算机。</summary>
      <param name="categoryName">性能计数器类别的名称或性能对象，此 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 实例将与之关联。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 是空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 类的新实例，并将 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 和 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性设置为指定的值。</summary>
      <param name="categoryName">性能计数器类别的名称或性能对象，此 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 实例将与之关联。</param>
      <param name="machineName">性能计数器类别及其关联的计数器所在的计算机。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 是空字符串 ("")。  
  
- 或 - 
<paramref name="machineName" /> 语法无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)">
      <summary>确定是否向此类别注册了指定的计数器，这由 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 和 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性指示。</summary>
      <param name="counterName">要查找的性能计数器的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">尚未设置 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>如果向 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 和 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性指定的类别注册了该计数器，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String)">
      <summary>确定是否向本地计算机上的指定类别注册了指定的计数器。</summary>
      <param name="counterName">要查找的性能计数器的名称。</param>
      <param name="categoryName">性能计数器类别的名称或性能对象，指定的性能计数器与之关联。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="counterName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 是空字符串 ("")。</exception>
      <exception cref="T:System.InvalidOperationException">类别名称不存在。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>如果向本地计算机上的指定类别注册了该计数器，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String,System.String)">
      <summary>确定是否向远程计算机上的指定类别注册了指定的计数器。</summary>
      <param name="counterName">要查找的性能计数器的名称。</param>
      <param name="categoryName">性能计数器类别的名称或性能对象，指定的性能计数器与之关联。</param>
      <param name="machineName">性能计数器类别及其关联计数器所在的计算机的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="counterName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 是空字符串 ("")。  
  
- 或 - 
<paramref name="machineName" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">类别名称不存在。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>如果向指定计算机上的指定类别注册了该计数器，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.CounterCreationDataCollection)">
      <summary>在本地计算机上注册包含指定计数器的自定义性能计数器类别。</summary>
      <param name="categoryName">要创建并注册到系统的自定义性能计数器类别的名称。</param>
      <param name="categoryHelp">自定义类别的说明。</param>
      <param name="counterData">一个 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />，它指定要作为新类别的一部分创建的计数器。</param>
      <exception cref="T:System.ArgumentException">在 <paramref name="counterData" /> 集合内指定的某计数器名称为 <see langword="null" /> 或空字符串 ("")。  
  
- 或 - 
在 <paramref name="counterData" /> 集合内指定的某计数器已经存在。  
  
- 或 - 
<paramref name="counterName" /> 参数的语法无效。 它可能包含反斜杠字符（“\”）或者长度大于 80 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">该类别已存在于本地计算机上。  
  
- 或 - 
<paramref name="counterData" /> 集合的布局对于基本计数器不正确。 <see langword="AverageCount64" />、<see langword="AverageTimer32" />、<see langword="CounterMultiTimer" />、<see langword="CounterMultiTimerInverse" />、<see langword="CounterMultiTimer100Ns" />、<see langword="CounterMultiTimer100NsInverse" />、<see langword="RawFraction" />、<see langword="SampleFraction" /> 或 <see langword="SampleCounter" /> 类型的计数器的后面必须紧跟基本计数器类型之一（<see langword="AverageBase" />、<see langword="MultiBase" />、<see langword="RawBase" /> 或 <see langword="SampleBase" />）。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>与新的自定义类别或性能对象关联的 <see cref="T:System.Diagnostics.PerformanceCounterCategory" />。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.Diagnostics.CounterCreationDataCollection)">
      <summary>在本地计算机上注册包含指定计数器的自定义性能计数器类别。</summary>
      <param name="categoryName">要创建并注册到系统的自定义性能计数器类别的名称。</param>
      <param name="categoryHelp">自定义类别的说明。</param>
      <param name="categoryType">
        <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" /> 值之一。</param>
      <param name="counterData">一个 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />，它指定要作为新类别的一部分创建的计数器。</param>
      <exception cref="T:System.ArgumentException">在 <paramref name="counterData" /> 集合内指定的某计数器名称为 <see langword="null" /> 或空字符串 ("")。  
  
- 或 - 
在 <paramref name="counterData" /> 集合内指定的某计数器已经存在。  
  
- 或 - 
 <paramref name="counterName" /> 含有无效语法。 它可能包含反斜杠字符（“\”）或者长度大于 80 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="counterData" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="categoryType" /> 值不在以下值范围内：<see langword="MultiInstance" />、<see langword="SingleInstance" /> 或 <see langword="Unknown" />。</exception>
      <exception cref="T:System.InvalidOperationException">该类别已存在于本地计算机上。  
  
- 或 - 
<paramref name="counterData" /> 集合的布局对于基本计数器不正确。 <see langword="AverageCount64" />、<see langword="AverageTimer32" />、<see langword="CounterMultiTimer" />、<see langword="CounterMultiTimerInverse" />、<see langword="CounterMultiTimer100Ns" />、<see langword="CounterMultiTimer100NsInverse" />、<see langword="RawFraction" />、<see langword="SampleFraction" /> 或 <see langword="SampleCounter" /> 类型的计数器的后面必须紧跟基本计数器类型之一（<see langword="AverageBase" />、<see langword="MultiBase" />、<see langword="RawBase" /> 或 <see langword="SampleBase" />）。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>与新的自定义类别或性能对象关联的 <see cref="T:System.Diagnostics.PerformanceCounterCategory" />。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.String,System.String)">
      <summary>在本地计算机上注册包含 <see cref="F:System.Diagnostics.PerformanceCounterType.NumberOfItems32" /> 类型的单个计数器的自定义性能计数器类别。</summary>
      <param name="categoryName">要创建并注册到系统的自定义性能计数器类别的名称。</param>
      <param name="categoryHelp">自定义类别的说明。</param>
      <param name="categoryType">
        <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" /> 值之一，指定类别为 <see cref="F:System.Diagnostics.PerformanceCounterCategoryType.MultiInstance" />、<see cref="F:System.Diagnostics.PerformanceCounterCategoryType.SingleInstance" /> 还是 <see cref="F:System.Diagnostics.PerformanceCounterCategoryType.Unknown" />。</param>
      <param name="counterName">要创建为新类别的一部分的新计数器的名称。</param>
      <param name="counterHelp">对与新的自定义类别关联的计数器所作的说明。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="counterName" /> 为 <see langword="null" /> 或是一个空字符串 ("")。  
  
- 或 - 
由 <paramref name="counterName" /> 指定的计数器已经存在。  
  
- 或 - 
 <paramref name="counterName" /> 含有无效语法。 它可能包含反斜杠字符（“\”）或者长度大于 80 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">该类别已存在于本地计算机上。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="counterHelp" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>与新的系统类别或性能对象关联的 <see cref="T:System.Diagnostics.PerformanceCounterCategory" />。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.String,System.String)">
      <summary>在本地计算机上注册包含 <see langword="NumberOfItems32" /> 类型的单个计数器的自定义性能计数器类别。</summary>
      <param name="categoryName">要创建并注册到系统的自定义性能计数器类别的名称。</param>
      <param name="categoryHelp">自定义类别的说明。</param>
      <param name="counterName">要作为新类别的一部分创建的、<see langword="NumberOfItems32" /> 类型的新计数器的名称。</param>
      <param name="counterHelp">对与新的自定义类别关联的计数器所作的说明。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="counterName" /> 为 <see langword="null" /> 或是一个空字符串 ("")。  
  
- 或 - 
由 <paramref name="counterName" /> 指定的计数器已经存在。  
  
- 或 - 
 <paramref name="counterName" /> 含有无效语法。 它可能包含反斜杠字符（“\”）或者长度大于 80 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">该类别已存在于本地计算机上。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="counterHelp" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>与新的系统类别或性能对象关联的 <see cref="T:System.Diagnostics.PerformanceCounterCategory" />。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Delete(System.String)">
      <summary>从本地计算机移除类别及其关联的计数器。</summary>
      <param name="categoryName">要删除的自定义性能计数器类别的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 参数的语法无效。 它可能包含反斜杠字符（“\”）或者长度大于 80 个字符。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.InvalidOperationException">不能删除该类别，因为它不是自定义类别。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)">
      <summary>确定是否在本地计算机上注册了该类别。</summary>
      <param name="categoryName">要查找的性能计数器类别的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 参数为空字符串 ("")。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>如果已注册该类别，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String,System.String)">
      <summary>确定是否在指定的计算机上注册了该类别。</summary>
      <param name="categoryName">要查找的性能计数器类别的名称。</param>
      <param name="machineName">要为该类别检查的计算机的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 参数为空字符串 ("")。  
  
- 或 - 
<paramref name="machineName" /> 参数无效。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.IO.IOException">无法找到网络路径。</exception>
      <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。  
  
 - 或 -  
  
 以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>如果已注册该类别，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCategories">
      <summary>检索本地计算机上注册的性能计数器类别的列表。</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 对象的数组，这些对象指示本地计算机上注册的类别。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCategories(System.String)">
      <summary>检索指定计算机上注册的性能计数器类别的列表。</summary>
      <param name="machineName">要查看的计算机。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数无效。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 对象的数组，这些对象指示指定计算机上注册的类别。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCounters">
      <summary>检索正好包含一个实例的某性能计数器类别中的计数器列表。</summary>
      <exception cref="T:System.ArgumentException">该类别不是单个实例。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.InvalidOperationException">没有与该类别关联的实例。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 对象的数组，这些对象指示与此单实例性能计数器类别关联的计数器。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCounters(System.String)">
      <summary>检索包含一个或多个实例的某性能计数器类别中的计数器列表。</summary>
      <param name="instanceName">要为其检索关联计数器列表的性能对象实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">尚未设置此 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 实例的 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 属性。  
  
- 或 - 
该类别不包含由 <paramref name="instanceName" /> 参数指定的实例。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 对象的数组，这些对象指示与此性能计数器类别的指定对象实例关联的计数器。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetInstanceNames">
      <summary>检索与此类别关联的性能对象实例列表。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性为 <see langword="null" />。 可能尚未设置该属性。  
  
- 或 - 
没有与该类别关联的实例。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>字符串的数组，这些字符串表示与此类别关联的性能对象实例名称；或者，如果该类别仅包含一个性能对象实例，则为包含空字符串 ("") 的单项数组。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)">
      <summary>确定由此 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 对象的 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性标识的类别中是否存在指定的性能对象实例。</summary>
      <param name="instanceName">要搜索的此性能计数器类别中的性能对象实例。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性为 <see langword="null" />。 可能尚未设置该属性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>如果该类别包含指定的性能对象实例，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String)">
      <summary>确定本地计算机上指定的类别是否包含指定的性能对象实例。</summary>
      <param name="instanceName">要搜索的性能对象实例。</param>
      <param name="categoryName">要搜索的性能计数器类别。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 <see langword="null" />。  
  
- 或 - 
<paramref name="categoryName" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 参数为空字符串 ("")。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>如果该类别包含指定的性能对象实例，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String,System.String)">
      <summary>确定指定计算机上的指定类别是否包含指定的性能对象实例。</summary>
      <param name="instanceName">要搜索的性能对象实例。</param>
      <param name="categoryName">要搜索的性能计数器类别。</param>
      <param name="machineName">要在其上查找该类别实例对的计算机的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 <see langword="null" />。  
  
- 或 - 
<paramref name="categoryName" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 参数为空字符串 ("")。  
  
- 或 - 
<paramref name="machineName" /> 参数无效。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>如果该类别包含指定的性能对象实例，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.ReadCategory">
      <summary>读取与此性能计数器类别关联的所有计数器和性能对象实例数据。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性为 <see langword="null" />。 可能尚未设置该属性。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">以不具有管理特权的用户身份正在执行的代码尝试读取性能计数器。</exception>
      <returns>一个 <see cref="T:System.Diagnostics.InstanceDataCollectionCollection" />，它包含类别的计数器和性能对象实例数据。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.CategoryHelp">
      <summary>获取类别的帮助文字。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性为 <see langword="null" />。 必须在获取类别帮助前设置类别名称。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <returns>对此类别测量的性能对象所作的说明。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.CategoryName">
      <summary>获取或设置定义此类别的性能对象的名称。</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 是空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 为 <see langword="null" />。</exception>
      <returns>性能计数器类别的名称或性能对象，此 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 实例将与之关联。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.CategoryType">
      <summary>获取性能计数器类别类型。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" /> 值之一。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.MachineName">
      <summary>获取或设置此类别所在的计算机的名称。</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 语法无效。</exception>
      <returns>性能计数器类别及其关联计数器所在的计算机的名称。</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterCategoryType">
      <summary>指示性能计数器类别是否可以有多个实例。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterCategoryType.MultiInstance">
      <summary>性能计数器类别可以有多个实例。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterCategoryType.SingleInstance">
      <summary>性能计数器类别只能有一个实例。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterCategoryType.Unknown">
      <summary>性能计数器类别的实例功能未知。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterInstanceLifetime">
      <summary>指定性能计数器实例的生存期。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Global">
      <summary>在没有计数器使用进程类别时，移除该性能计数器实例。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process">
      <summary>关闭进程时移除该性能计数器实例。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterManager">
      <summary>为系统使用性能计数器时加载的 performance.dll 准备性能数据。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterManager.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterManager.System#Diagnostics#ICollectData#CloseData">
      <summary>由 perf dll 的关闭性能数据调用。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterManager.System#Diagnostics#ICollectData#CollectData(System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr@)">
      <summary>性能数据收集例程。 由 PerfCount perf dll 调用。</summary>
      <param name="callIdx">调用索引。</param>
      <param name="valueNamePtr">指向具有请求的对象标识符的 Unicode 字符串列表的指针。</param>
      <param name="dataPtr">指向数据缓冲区的指针。</param>
      <param name="totalBytes">指向若干个字节的指针。</param>
      <param name="res">此方法返回时，包含值为 -1 的 <see cref="T:System.IntPtr" />。</param>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterType">
      <summary>为 <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> 实例指定用于计算 <see cref="T:System.Diagnostics.PerformanceCounter" /> 方法的公式。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageBase">
      <summary>在时间或计数的平均值计算中使用的基本计数器（如 <see langword="AverageTimer32" /> 和 <see langword="AverageCount64" />）。 存储用于计算表示“每个操作的时间”或“每个操作的计数”的计数器的分母。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageCount64">
      <summary>平均计数器，它显示一次操作中平均处理的项数。 这种类型的计数器显示已处理的项与已完成的操作数的比率。 计算该比率的方法是将上一个时间间隔内处理的项数与上一个时间间隔内完成的操作数进行比较 此类型的计数器包括 PhysicalDisk \ Avg. Disk Bytes/Transfer。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageTimer32">
      <summary>平均计数器，它测量完成某个进程或操作平均所花费的时间。 这种类型的计数器显示采样时间间隔的总运行时间与该时间内完成的进程或操作数的比率。 此计数器类型用系统时钟的滴答来测量时间 此类型的计数器包括 PhysicalDisk \ Avg. Disk sec/Transfer。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterDelta32">
      <summary>差异计数器，它显示在最近的两个采用间隔内已测量特性的更改。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterDelta64">
      <summary>差异计数器，它显示在最近的两个采用间隔内已测量特性的更改。 它与 <see langword="CounterDelta32" /> 计数器类型基本相同，只是它使用更大的字段来容纳更大的值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiBase">
      <summary>基本计数器，它指示已采用的项数。 它在计算中用作分母，以在获取多个相似项的计时时间时获取已采用项的平均数。 与 <see langword="CounterMultiTimer" />、<see langword="CounterMultiTimerInverse" />、<see langword="CounterMultiTimer100Ns" /> 和 <see langword="CounterMultiTimer100NsInverse" /> 一起使用。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer">
      <summary>百分比计数器，它以采用间隔总时间百分比的形式显示一个或多个组件的活动时间。 由于分子记录的是同时操作的组件的活动时间，因此最终的百分比可以超过 100%。 此计数器类型与 <see langword="CounterMultiTimer100Ns" /> 的不同之处在于：它以系统性能计时器的滴答为单位（而不是以 100 毫微秒为单位）来测量时间 此计数器的类型是多项计时器。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns">
      <summary>百分比计数器，它以采用间隔总时间百分比的形式显示一个或多个组件的活动时间。 它以 100 毫微秒 (ns) 为单位来测量时间。 此计数器的类型是多项计时器。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse">
      <summary>百分比计数器，它以采用间隔总时间百分比的形式显示一个或多个组件的活动时间。 这种类型的计数器以 100 毫微秒 (ns) 为单位来测量时间。 它们推导活动时间的方法是测量组件处于非活动状态的时间，然后从受监视的对象数乘以 100% 中减去该结果。 此计数器类型为一个反向多项计时器。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse">
      <summary>百分比计数器，它以采用间隔总时间百分比的形式显示一个或多个组件的活动时间。 它推导活动时间的方法是测量组件处于非活动状态的时间，然后从受监视的对象乘以 100% 中减去该结果。 此计数器类型为一个反向多项计时器。 它与 CounterMultiTimer100NsInverse 的不同之处在于：它是以系统性能计时器的滴答为单位（而不是以 100 毫微秒为单位）来测量时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterTimer">
      <summary>百分比计数器，它以总采用时间的百分比形式显示组件处于活动状态的平均时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterTimerInverse">
      <summary>百分比计数器，它显示在采用时间间隔内观测到的活动时间的平均百分比。 计算这些计数器值的方法是监视服务处于非活动状态的时间百分比，然后从 100% 中减去该值。 这是反向计数器类型。 它与 CounterTimer100NsInv 相同，但它是以系统性能计时器的滴答为单位（而不是以 100 毫微秒为单位）来测量时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32">
      <summary>平均计数器，旨在监视一段时间内资源队列的平均长度。 它显示在最近两个采用时间间隔内观测到的队列长度分别除以间隔时间后的差值。 此类型的计数器通常用于跟踪排队或等候的项数。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64">
      <summary>平均值计数器，它监视一段时间内资源队列的平均长度。 这种类型的计数器显示在最近两个采用间隔内观测到的队列长度分别除以间隔时间后的差值。 此计数器类型与 <see langword="CountPerTimeInterval32" /> 相同，但它使用更大的字段来容纳较大的值。 此类型的计数器通常用于跟踪排队或等候的大量项。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.ElapsedTime">
      <summary>差异计时器，它显示组件或进程的开始时间与该值的计算时间之间的总时间。 此类型的计数器包括 System\ System Up Time。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItems32">
      <summary>即时计数器，它显示最近观测到的值。 例如，用于维护项或操作的简单计数。 此类型的计数器包括 Memory\Available Bytes。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItems64">
      <summary>即时计数器，它显示最近观测到的值。 例如，用于维护大量的项或操作的简单计数。 它与 <see langword="NumberOfItems32" /> 相同，但它使用更大的字段来容纳较大的值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32">
      <summary>即时计数器，它以十六进制形式显示最近观测到的值。 例如，用于维护项或操作的简单计数。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64">
      <summary>即时计数器，它显示最近观测到的值。 例如，用于维护大量的项或操作的简单计数。 它与 <see langword="NumberOfItemsHEX32" /> 相同，但它使用更大的字段来容纳较大的值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32">
      <summary>差异计数器，它显示在采用间隔的每一秒内完成的操作的平均数目。 这种类型的计数器用系统时钟的滴答 (Tick) 来测量时间 此类型的计数器包括 System\ File Read Operations/sec。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64">
      <summary>差异计数器，它显示在采用间隔的每一秒内完成的操作的平均数目。 这种类型的计数器用系统时钟的滴答 (Tick) 来测量时间 此计数器类型与 <see langword="RateOfCountsPerSecond32" /> 类型相同，但它使用更大的字段来容纳较大的值，以跟踪每秒内的大量项数或操作数（如字节传输速率）。 此类型的计数器包括 System\ File Read Bytes/sec。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RawBase">
      <summary>基本计数器，它存储表示常规算术分数的计数器的分母。 检查以确保此值大于零，然后将它用作 <see langword="RawFraction" /> 值计算中的分母。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RawFraction">
      <summary>即时百分比计数器，它以百分比的形式显示子集与其父集的比率。 例如，它将磁盘上使用的字节数与该磁盘上的总字节数进行比较。 这种类型的计数器只显示当前百分比，而不显示一段时间的平均值。 此类型的计数器包括 Paging File\% Usage Peak。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleBase">
      <summary>基本计数器，它存储获取的采用中断数，并在样本分数中用作分母。 样本分数是采用中断的值为 1（或 <see langword="true" />）的样本数。 检查以确保此值大于零，然后再将它用作 <see langword="SampleFraction" /> 计算中的分母。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleCounter">
      <summary>平均计数器，它显示一秒内完成的平均操作数。 当这种类型的计数器对数据进行采用时，每个采用中断返回一或零。 该计数器数据是采用的个数。 它以系统性能计时器的滴答为单位来测量时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleFraction">
      <summary>百分比计数器，它显示最近两个采用时间间隔内的命中与所有操作的平均比率。 此类型的计数器包括 Cache\Pin Read Hits %。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.Timer100Ns">
      <summary>百分比计数器，它以采用时间间隔的总运行时间的百分比形式显示组件的活动时间。 它以 100 毫微秒 (ns) 为单位来测量时间。 这种类型的计数器旨在一次测量一个组件的活动 此类型的计数器包括 Processor\ % User Time。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.Timer100NsInverse">
      <summary>百分比计数器，它显示采用时间间隔内观测到的活动时间的平均百分比。 这是反向计数器。 此类型的计数器包括 Processor\ % Processor Time。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterData">
      <summary>包含计数器的原始数据。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.Decrement">
      <summary>将计数器值减 1。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.Increment">
      <summary>将计数器值加 1。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.IncrementBy(System.Int64)">
      <summary>将计数器值增加指定数量。</summary>
      <param name="value">要为计数器值增加的数量。 增量值可以是正数也可以是负数。</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterData.RawValue">
      <summary>获取或设置原始计数器数据。</summary>
      <returns>原始计数器数据。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterData.Value">
      <summary>获取或设置计数器数据。</summary>
      <returns>计数器数据。</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSet">
      <summary>定义一组逻辑计数器。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.#ctor(System.Guid,System.Guid,System.Diagnostics.PerformanceData.CounterSetInstanceType)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceData.CounterSet" /> 类的新实例。</summary>
      <param name="providerGuid">唯一标识计数器数据的提供程序的 GUID。 请使用清单中指定的 GUID。</param>
      <param name="counterSetGuid">唯一标识提供程序的计数器集的 GUID。 请使用清单中指定的 GUID。</param>
      <param name="instanceType">标识计数器集的类型，例如，计数器集是单实例还是多实例计数器集。</param>
      <exception cref="T:System.InsufficientMemoryException">没有足够的可用内存来完成该操作。</exception>
      <exception cref="T:System.PlatformNotSupportedException">在 Windows Vista 之前的操作系统中不受支持。</exception>
      <exception cref="T:System.ArgumentException">其中某个参数为 NULL 或无效。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">基础 Win32 函数调用失败。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType)">
      <summary>使用指定的计数器标识符和类型向计数器集中添加计数器。</summary>
      <param name="counterId">标识计数器。 使用在清单中所用的值来定义计数器。</param>
      <param name="counterType">标识计数器类型。 计数器类型用来确定如何计算和显示计数器数据以及如何对其求平均值。</param>
      <exception cref="T:System.ArgumentException">计数器标识符已经存在于计数器集中、计数器标识符为负数，或者计数器类型为 NULL 或无效。</exception>
      <exception cref="T:System.InvalidOperationException">在为计数器集创建实例之后，将无法向其中添加计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType,System.String)">
      <summary>使用指定的计数器标识符和类型以及计数器的显示名称向计数器集中添加计数器。</summary>
      <param name="counterId">标识计数器。 使用在清单中所用的值来定义计数器。</param>
      <param name="counterType">标识计数器类型。 计数器类型用来确定如何计算和显示计数器数据以及如何对其求平均值。</param>
      <param name="counterName">计数器的名称。 可以使用此名称来为该计数器集实例中的计数器编制索引。 （请参阅<see cref="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)" />.)</param>
      <exception cref="T:System.ArgumentException">计数器标识符已经存在于计数器集中、计数器标识符为负数，或者计数器类型为 NULL 或无效。</exception>
      <exception cref="T:System.InvalidOperationException">在为计数器集创建实例之后，将无法向其中添加计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance(System.String)">
      <summary>创建计数器集的一个实例。</summary>
      <param name="instanceName">实例的名称。 该名称必须是唯一的。</param>
      <exception cref="T:System.ArgumentException">实例名称为 NULL。</exception>
      <exception cref="T:System.InvalidOperationException">在为计数器集创建实例之前，必须先向其中添加计数器。</exception>
      <returns>将包含计数器数据的计数器集的实例。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Dispose">
      <summary>释放此对象使用的所有非托管资源。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Dispose(System.Boolean)">
      <summary>释放此对象使用的所有非托管资源，并可选择释放托管资源。</summary>
      <param name="disposing">如果这是从 Dispose 方法调用的，则为 <see langword="True" />；如果是从终结器调用的，则为 <see langword="False" />。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Finalize">
      <summary>在垃圾回收功能将对象回收之前，释放资源。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstance">
      <summary>创建在 <see cref="T:System.Diagnostics.PerformanceData.CounterSet" /> 类中定义的逻辑计数器的实例。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstance.Dispose">
      <summary>释放此对象使用的所有非托管资源。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstance.Finalize">
      <summary>释放非托管的资源并执行其他清理操作。</summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstance.Counters">
      <summary>为计数器集实例检索计数器数据集合。</summary>
      <returns>计数器集实例中包含的计数器数据集合。</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet">
      <summary>包含计数器值的集合。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Dispose">
      <summary>释放此对象使用的所有非托管资源。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Finalize">
      <summary>在垃圾回收将某一对象回收前允许该对象尝试释放资源并执行其他清理操作。</summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.Int32)">
      <summary>使用指定的计数器标识符来访问集合中的计数器值。</summary>
      <param name="counterId">计数器的标识符。 这是在向计数器集中添加计数器时所使用的标识符。</param>
      <returns>计数器数据。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)">
      <summary>使用指定的计数器名称来访问集合中的计数器值。</summary>
      <param name="counterName">计数器的名称。 这是在向计数器集中添加计数器时所使用的名称。</param>
      <returns>计数器数据。</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstanceType">
      <summary>指定计数器集是允许多实例（如进程和物理磁盘），还是允许单实例（如内存）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate">
      <summary>该计数器集中包含多个单实例计数器，这些计数器的聚合值是从一个或多个源获取的。 例如，这种类型的计数器集内的计数器可以从计算机上的每个硬盘（共三个）获取读取次数并对它们的值求和。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregateWithHistory">
      <summary>此类型与 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate" /> 相似，只是这种类型的计数器集存储使用者应用程序生存期的所有计数器值（计数器值将在超出计数器生存期之后进行缓存）。 例如，如果全局聚合示例中的某个硬盘变得不可用，则该磁盘读取的总字节数仍将可用，并用来计算聚合值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate">
      <summary>此类型与 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" /> 相似，只是它将聚合来自同名实例的计数器数据，而不会将所有实例数据聚合到一个经过聚合的 (_Total) 实例。 例如，如果多个提供程序进程中都包含了名为 IExplore 的实例，则 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple" /> 和 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" /> CounterSet 将显示多个 IExplore 实例（IExplore、IExplore#1、IExplore#2 等）；但是，<see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate" /> 实例类型将只发布一个 IExplore 实例，该实例的聚合计数器数据来自所有名为 IExplore 的实例。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple">
      <summary>该计数器集中包含多个多实例计数器，例如，测量进程的平均磁盘 I/O 的计数器。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate">
      <summary>该计数器集中包含多个多实例计数器，这些计数器的聚合值是从该计数器的所有实例获取的。 例如，这种类型的计数器集中的计数器可以获取多线程应用程序中所有线程的总的线程执行时间并对它们的值求和。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Single">
      <summary>该计数器集中包含多个单实例计数器，例如，测量物理内存的计数器。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterType">
      <summary>定义可能的计数器类型。 每个计数器都被分配一个计数器类型。 计数器类型用来确定如何计算和显示计数器数据以及如何对其求平均值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageBase">
      <summary>该计数器在为 <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64" /> 和 <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32" /> 计数器类型计算时间或统计平均值时用作基数（分母）。 该计数器类型仅收集最后观测到的值 （请参见部署工具包中的 PERF_AVERAGE_BASE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64">
      <summary>该计数器类型显示一次操作中平均处理的项数。 这种类型的计数器显示已处理的项（例如已发送的字节数）与已完成的操作数的比率。 计算该比率的方法是将上一个时间间隔内处理的项数与上一个时间间隔内完成的操作数进行比较 （请参见部署工具包中的 PERF_AVERAGE_BULK 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32">
      <summary>这种类型的计数器测量完成某个过程或操作平均所花费的时间。 这种类型的计数器显示采样时间间隔的总运行时间与该时间内完成的进程或操作数的比率。 此计数器类型用系统时钟的滴答来测量时间 （请参见部署工具包中的 PERF_AVERAGE_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.Delta32">
      <summary>这种类型的计数器显示在最近的两个取样时间间隔内已测量特性发生的更改。 （请参见部署工具包中的 PERF_COUNTER_DELTA 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.Delta64">
      <summary>这种类型的计数器显示在最近的两个取样时间间隔内已测量特性发生的更改。 它与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.Delta32" /> 计数器类型基本相同，只是它使用更大的字段来容纳较大的值 （请参见部署工具包中的 PERF_COUNTER_LARGE_DELTA 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.ElapsedTime">
      <summary>这种类型的计数器显示从启动组件或进程到计算该值之间经历的总时间 （请参见部署工具包中的 PERF_ELAPSED_TIME 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.LargeQueueLength">
      <summary>这种类型的计数器监视一段时间内资源队列的平均长度。 这种类型的计数器显示在最近两个采用间隔内观测到的队列长度分别除以间隔时间后的差值。 此计数器类型与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.QueueLength" /> 计数器类型基本相同，只是它使用更大的字段来容纳较大的值 （请参见部署工具包中的 PERF_COUNTER_LARGE_QUEUELEN_TYPE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerBase">
      <summary>指示已取样的项数。 它在计算中用作分母，以在获取多个相似项的计时时间时获取已取样各项的平均值。 此类型支持下列计数器类型：<see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive" />、<see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive" />、<see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" /> 和 <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" />。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive">
      <summary>此计数器的类型是多项计时器。 多项计时器从组件（如处理器或磁盘）的多个实例中收集数据。 这种类型的计数器以取样时间间隔总时间百分比的形式显示一个或多个组件处于活动状态的时间。 由于分子记录的是同时操作的组件的活动时间，因此最终的百分比可以超过 100%。 此计数器类型与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" /> 的不同之处在于：它以系统性能计时器的滴答为单位（而不是以 100 毫微秒为单位）来测量时间 （请参见部署工具包中的 PERF_COUNTER_MULTI_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns">
      <summary>这种类型的计数器以取样时间间隔总时间百分比的形式显示一个或多个组件处于活动状态的时间。 它以 100 纳秒为单位来测量时间。 此计数器的类型是多项计时器。 多项计时器旨在监视组件（如处理器或磁盘）的多个实例。 （请参见部署工具包中的 PERF_100NSEC_MULTI_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive">
      <summary>这种类型的计数器以取样时间间隔总时间百分比的形式显示一个或多个组件处于活动状态的时间。 此计数器类型为一个反向多项计时器。 多项计时器监视组件（如处理器或磁盘）多个实例。 反向计数器测量组件处于非活动状态的时间并从该测量值中推导出处于活动状态的时间。 此计数器与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" /> 的不同之处在于：它是以系统性能计时器的滴答为单位（而不是以 100 毫微秒为单位）来测量时间 （请参见部署工具包中的 PERF_COUNTER_MULTI_TIMER_INV 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns">
      <summary>这种类型的计数器以取样时间间隔总时间百分比的形式显示一个或多个组件处于活动状态的时间。 这种类型的计数器以 100 纳秒为单位来测量时间。 此计数器类型为一个反向多项计时器。 多项计时器旨在监视组件（如处理器或磁盘）的多个实例。 反向计数器测量组件处于非活动状态的时间，并根据非活动时间的测量值推导出处于活动状态的时间 （请参见部署工具包中的 PERF_100NSEC_MULTI_TIMER_INV 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.ObjectSpecificTimer">
      <summary>这种类型的 64 位计数器是一种以对象特定的单位来显示内容的计时器 （请参见部署工具包中的 PERF_OBJ_TIME_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageActive">
      <summary>这种类型的计数器以总取样时间的百分比形式显示组件处于活动状态的平均时间 （请参见部署工具包中的 PERF_COUNTER_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageActive100Ns">
      <summary>这种类型的计数器以取样时间间隔的总运行时间的百分比形式显示组件处于活动状态的时间。 它以 100 纳秒为单位来测量时间。 这种类型的计数器旨在一次测量一个组件的活动 （请参见部署工具包中的 PERF_100NSEC_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive">
      <summary>这是反向计数器类型。 反向计数器测量组件处于非活动状态的时间并从该测量值中推导出处于活动状态的时间。 这种类型的计数器显示在取样时间间隔内观测到的活动时间的平均百分比。 计算这些计数器值的方法是监视服务处于非活动状态的时间百分比，然后从 100% 中减去该值。 此计数器类型与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns" /> 计数器类型基本相同，只是它以系统性能计时器的计时周期（而不是以 100 纳秒）为单位来测量时间 （请参见部署工具包中的 PERF_COUNTER_TIMER_INV 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns">
      <summary>这种类型的计数器显示取样时间间隔内观测到的活动时间的平均百分比。 这是反向计数器。 计算反向计数器值的方法是监视服务处于非活动状态的时间的百分比，然后从 100% 中减去该值 （请参见部署工具包中的 PERF_100NSEC_TIMER_INV 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionObjectSpecificTimer">
      <summary>这种类型的计数器显示一个由以下两个计数器值组成的值：所监视事件的运行时间计数以及在对象头的 PerfFreq 字段中指定的频率。 这种类型的计数器与其他计数器计时器的不同之处在于伴随计数器值的时钟计时周期值，从而消除了因函数调用带来的延迟所造成的任何可能的差异。 当标准系统计时器的精度不足以提供精确读数时，需要使用精确计数器类型 （请参见部署工具包中的 PERF_PRECISION_OBJECT_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionSystemTimer">
      <summary>这种类型的计数器显示一个由以下两个计数器值组成的值：所监视事件的运行时间计数以及系统性能计时器的频率。 这种类型的计数器与其他计数器计时器的不同之处在于伴随计数器值的时钟计时周期值，从而消除了因函数调用带来的延迟所造成的任何可能的差异。 当标准系统计时器的精度不足以提供精确读数时，需要使用精确计数器类型 （请参见部署工具包中的 PERF_PRECISION_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionTimer100Ns">
      <summary>这种类型的计数器显示一个由以下两个计数器值组成的值：所监视事件的运行时间计数以及采用相同单位的专用计时器中的“时钟”时间。 它以 100 纳秒为单位来测量时间。 这种类型的计数器与其他计数器计时器的不同之处在于伴随计数器值的时钟计时周期值，从而消除了因函数调用带来的延迟所造成的任何可能的差异。 当标准系统计时器的精度不足以提供精确读数时，需要使用精确计数器类型 （请参见部署工具包中的 PERF_PRECISION_100NS_TIMER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLength">
      <summary>这种类型的计数器旨在监视一段时间内资源队列的平均长度。 它显示在最近两个采用时间间隔内观测到的队列长度分别除以间隔时间后的差值。 （请参见部署工具包中的 PERF_COUNTER_QUEUELEN_TYPE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLength100Ns">
      <summary>这种类型的计数器以 100 纳秒为时间基准来测量队列长度的空间-时间积 （请参见部署工具包中的 PERF_COUNTER_100NS_QUEUELEN_TYPE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLengthObjectTime">
      <summary>这种类型的计数器使用对象特定的时间基准来测量队列长度的空间-时间积 （请参见部署工具包中的 PERF_COUNTER_OBJ_QUEUELEN_TYPE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32">
      <summary>这种类型的计数器显示在取样时间间隔的每一秒内完成的操作的平均数目。 这种类型的计数器用系统时钟的滴答 (Tick) 来测量时间 （请参见部署工具包中的 PERF_COUNTER_COUNTER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond64">
      <summary>这种类型的计数器显示在取样时间间隔的每一秒内完成的操作的平均数目。 这种类型的计数器用系统时钟的滴答 (Tick) 来测量时间 此计数器类型与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32" /> 类型相同，只是它使用更大的字段来容纳较大的值 （请参见部署工具包中的 PERF_COUNTER_BULK_COUNT 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawBase32">
      <summary>该计数器类型仅收集最后观测到的值 该值用作计数器的表示常规算术分数的分母。 此类型支持 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" /> 计数器类型 （请参见部署工具包中的 PERF_RAW_BASE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawBase64">
      <summary>这种类型的计数器收集最后观测到的值。 它与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawBase32" /> 计数器类型基本相同，只是它使用更大的字段来容纳更大的值。 此类型支持 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64" /> 计数器类型 （请参见部署工具包中的 PERF_LARGE_RAW_BASE 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawData32">
      <summary>这种类型的计数器仅显示最后观测到的值， 而不显示平均值 （请参见部署工具包中的 PERF_COUNTER_RAWCOUNT 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawData64">
      <summary>这种类型的计数器仅显示最后观测到的值，而不显示平均值。 它与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawData32" /> 计数器类型基本相同，只是它使用更大的字段来容纳较大的值 （请参见部署工具包中的 PERF_COUNTER_LARGE_RAWCOUNT 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32">
      <summary>这种类型的计数器以十六进制格式显示最近观测到的值， 而不显示平均值 （请参见部署工具包中的 PERF_COUNTER_RAWCOUNT_HEX 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex64">
      <summary>这种类型的计数器以十六进制格式显示最后观测到的值。 它与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32" /> 计数器类型基本相同，只是它使用更大的字段来容纳较大的值 （请参见部署工具包中的 PERF_COUNTER_LARGE_RAWCOUNT_HEX 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32">
      <summary>这种类型的计数器以百分比形式显示子集与其所属集合的比率。 例如，它将磁盘上使用的字节数与该磁盘上的总字节数进行比较。 这种类型的计数器只显示当前百分比，而不显示一段时间的平均值。 （请参见部署工具包中的 PERF_RAW_FRACTION 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64">
      <summary>这种类型的计数器以百分比形式显示子集与其所属集合的比率。 例如，它将磁盘上使用的字节数与该磁盘上的总字节数进行比较。 这种类型的计数器只显示当前百分比，而不显示一段时间的平均值。 它与 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" /> 计数器类型基本相同，只是它使用更大的字段来容纳较大的值</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleBase">
      <summary>此计数器存储获取的取样中断次数，并用作取样分数中的分母。 此类型支持 <see cref="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction" /> 计数器类型</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleCounter">
      <summary>这种类型的计数器显示一秒内完成的操作的平均数。 它以系统性能计时器的滴答为单位来测量时间。 变量 F 表示一秒内出现的计时周期数。 将 F 的值因式分解为方程式，以便可以以秒为单位显示结果。 （请参见部署工具包中的 PERF_SAMPLE_COUNTER 计数器类型）。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction">
      <summary>这种类型的计数器显示最近两个取样时间间隔内的命中操作与所有操作的平均比率 （请参见部署工具包中的 PERF_SAMPLE_FRACTION 计数器类型）。</summary>
    </member>
  </members>
</doc>